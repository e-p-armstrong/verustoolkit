[
    "What are the different options for defining a currency in Verus, and how do they affect the behavior of the currency?",
    "When defining a currency in Verus, you can specify an `options` parameter that determines the type of currency and its behavior. There are three main options:\n\n**Option 1: Decentralized Currency**\nOption `1` is the default and launches a decentralized currency. When subIDs are created with this option, the registration fees are burned. This means that the currency is not controlled by a central authority and operates independently.\n\n**Option 2: Centralized Currency**\nOption `2` is for a centralized currency. In this case, the rootID can mint and burn supply, and anyone can burn supply without lowering the reserve ratio. If it's a basket currency, the rootID can also automatically lower and raise the reserve ratio. The subID registration fees go to the rootID. This means that the currency is controlled by a central authority, which has the power to manage the supply of the currency.\n\n**Option 3: Ethereum ERC-20 Mapped Tokens**\nOption `3` is for Ethereum ERC-20 mapped tokens. This option allows for the creation of tokens that are mapped to Ethereum ERC-20 tokens.\n\n**Additional Parameters**\nIn addition to the `options` parameter, you can also specify other parameters when defining a currency. For example, you can specify `currencies` which lists the names of the currencies that will be in the reserves when it's a basket currency. You can also specify `preallocations` which allocates a certain amount of tokens to a specific address. You can also use `conversions` to determine the preconversion price when it's a simple token currency.\n\n**Example**\nHere's an example of how to define a simple token currency called MyBrand, which is centralized and has a preallocation of 100 tokens to Klaus@:\n```json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\nIn this example, the `options` parameter is set to `32`, which means it's a simple token currency. The `proofprotocol` is set to `2`, which means it's a centralized currency. The `preallocations` parameter allocates 100 tokens to Klaus@.",
    "``1`` is default, which launches a decentralized currency (no need to include this parameter when defining such a currency). When subIDs are created with this option, the registration fees are burned.``2`` is for a centralized currency. If it\u2019s a basket currency the rootID can mint and burn supply while automatically lowering and raising the reserve ratio (also anyone can burn supply without lowering the reserve ratio). Or when it\u2019s a simple token currency they can just mint and burn supply. The subID registration fees go to the rootID.``3`` is for Ethereum ERC-20 mapped tokens. [Read more](/currencies/mapping-1:1-eth)Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\n\u261d\ufe0f A simple token currency called MyBrand, centralized (the controller of the rootID can mint and burn), and has a preallocation of 100 tokens to Klaus@.### **\"currencies\"**\nHere you put the names of the currencies (or just one \u2014 it must have VRSC when launched on Verus) that will be in the reserves when it\u2019s a basket currency (`options:33`).Or when it\u2019s a simple token currency (`options:32`), what people convert during the preconversion timeframe will go to the rootID of the currency, as a funding mechanism. In the case of a simple token currency, combine it with `\"conversions\"` to determine the preconversion price.Use up to 10 currencies for this parameter.",
    "./raw_text_input_docs/launch-currency.md"
]