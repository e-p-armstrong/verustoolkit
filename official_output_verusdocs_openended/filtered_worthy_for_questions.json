[["# Network Economy\nVerus is a rent-free blockchain protocol that has a decentralized economy. Costs for services paid to the protocol are distributed to the miners and stakers. There are no developer fees, and no rent-seeking profiteers.## Mining Ecosystem\nVerus has a naturally decentralized miner ecosystem. VerusHash 2.2 is the mining algorithm that is specifically developed for Verus. The algorithm equalizes mining fairness across hardware classes.To mine Verus no specialized mining equipment is necessary. Anyone can start mining with consumer-grade hardware. Mining is made especially easy for starters, since they can start directly from within Verus Desktop, without any additional software requirements. [Start mining](/economy/start-mining.html).### Merge Mining\nAdditionally, when PBaaS goes live on mainnet, miners can choose to mine up to 22 PBaaS-chains simultaneously, without losing any of their original hashing power.## Staking Ecosystem\nAnyone can start staking Verus, even with the smallest amount possible, e.g. `0.00000001 VRSC`. Although it could take many years before you win a block with such a tiny amount.Verus has a powerful and fair staking system. No threshold required and no registrations necessary. [Start staking](/economy/start-staking.html).## Block Rewards\nMiners and stakers are rewarded for their efforts to keep the network secure. They earn block rewards. The Verus block reward emission schedule:", "./raw_text_input_docs/README_economy.md"], ["| Block Height (& Start Date) | Block Rewards | Coin Emission | \n| -------------: | ----------:| --------------:| \n| 1 (5.21.2018) | 0 - 384 | 485,000 VRSC| \n| 10,080 (5.28.2018)| 384* | 16,589,000 VRSC| \n| 53,280 (6.28.2018)| 192* | 8,294,000 VRSC| \n| 96,480 (7.28.2018)| 96 | 4,147,200 VRSC|\n| 139,680 (8.28.2018)| 48 | 2,073,600 VRSC|\n| 226,080 (9.28.2018) | 24 | 25,282,880 VRSC|\n| 1,278,000 (11.22.2020)| 12 | 12,623,040 VRSC|\n| 2,329,920 (12.17.2022)| 6 | 6,311,520 VRSC|\n| 3,381,840 (~1.9.2025)| 3 | 3,155,760 VRSC|\n| 4,433,760 (~ 2027)| 1.5 | 1,577,880 VRSC|\n| 5,485,680 (~ 2029)| 0.75 | 788,940 VRSC|\n| 6,537,600 (~ 2031) | 0.375 | 394,470 VRSC|\n| 7,589,520 (~ 2033) | 0.1875 | 197,235 VRSC|\n| 8,641,440 (~ 2035) | 0.09375 | 98,618 VRSC|\n| 9,693,360 (~ 2037) | 0.0486875 | 49,309 VRSC|\n| 10,745,280 (~ 2039) | 0.0234375 | 24,655 VRSC|\n| 11,797,200 (~ 2041) | 0.01171875 | 12,327 VRSC|\n| 12,849,120 (~ 2043) | 0.00585937 | 6,164 VRSC|\n| 13,901,040 (~ 2045) | 0.00292968 | 3,082 VRSC|\n| etc. | ... | ... | ... |The maximum circulating supply of all coins is 83,540,184 VRSC.\n::: tip * 384, 192 Block Rewards \u23f2\ufe0f\nFrom block height 10,080 on, all block rewards of 384 and 192 VRSC were timelocked and then unlocked at random block heights. The last of those rewards were unlocked at block height 1,181,520.\n:::## Block Fees\n Fees are generated from users paying for services and interacting with the protocol. These fees are processed in the blocks and earned by miners and stakers.| Protocol Activity | Fees | \n| :------------- | -------------:| \n| VerusID Registration | 20 - 100 VRSC |\n| PBaaS-chain Launch| 10,000 VRSC** |\n| Currency/Token Launch | 200 VRSC |\n| Conversion Fee | 0.025%, 0.05% |\n| Transaction Fee | 0.0001 VRSC  |_**Half the fee (5000) goes to the miners and stakers of the newly launched PBaaS-chain._", "./raw_text_input_docs/README_economy.md"], ["## Fee Pool\nAll the fees generated by the protocol are collected in the ``fee pool``. With each new block, ``1%`` of the fee pool is added on top of the block rewards. It is expected that fees outnumber block rewards, making mining and staking in the Verus ecosystem a profitable and competitive endeavor.", "./raw_text_input_docs/README_economy.md"], ["# How to bridge from Verus to Ethereum\nBridge VRSC, ETH, DAI, MKR, Bridge.vETH and any other bridged assets from the Verus blockchain to the Ethereum blockchain.To bridge from Verus to Ethereum gas fees have to be paid to use the smart contract on the Ethereum side. It can be very expensive.You can estimate the bridging costs through Verus Mobile or if you are on a computer use the following command: (\u26a0\ufe0f KEEP THE `1` AT THE END OR YOU WILL SEND THE ACTUAL AMOUNT)``` json\nrun sendcurrency \"*\" '[{\n  \"currency\":\"veth\",\n  \"exportto\":\"veth\",\n  \"address\":\"0x71518580f36FeCEFfE0721F06bA4703218cD7F63\",\n  \"amount\":1,\n  \"refundto\":\"john doe@\"\n}]' 1 0.0001 1\n```Or use:``` json\ncurl --location 'https://YOUR-API-SERVER' \\\n--header 'content-type: text/plain;' \\\n--data-raw '{\n  \"jsonrpc\": \"1.0\",\n  \"id\": \"curltext\",\n  \"method\": \"sendcurrency\",\n  \"params\": [\n    \"*\",\n    [\n      {\n        \"currency\": \"veth\",\n        \"exportto\": \"veth\",\n        \"address\": \"0x71518580f36FeCEFfE0721F06bA4703218cD7F63\",\n        \"amount\": 1,\n        \"refundto\": \"john doe@\"\n      }\n    ],\n    1,\n    0.0001,\n    true\n  ]\n}'\n```Then you look for the number after ``i5w5MuNik5NtLcYmNzcvaoixooEebB6MGV``, it is the fee you have to pay in VRSC to cross from Verus to Ethereum.\u23f1\ufe0f The bridging from Verus to Ethereum can take 30 - 60 mins.Learn how to go from Verus to Ethereum with [Verus Mobile](/eth-bridge/verus-to-ethereum.html#verus-mobile), [Verus Desktop](/eth-bridge/verus-to-ethereum.html#verus-desktop) or [CLI](/eth-bridge/verus-to-ethereum.html#cli).## Verus Mobile\nTo bridge over from Verus to Ethereum using Verus Mobile you can go to vETH (or DAI.vETH, MKR.vETH, VRSC or other bridged assets). Then click on \"Send\", then \"Convert or Cross-chain\", then \"Send off-chain\".", "./raw_text_input_docs/verus-to-ethereum.md"], ["![image-verus-mobile-bridge](/images/mobile-verus-to-eth.png)\n\n**``Recipient Address``** is your Ethereum address.\n\n**``Select network to send to``** select ``vETH``\n\nThen follow the next steps.\n\n## Verus Desktop\nTo bridge over from Verus to Ethereum using Verus Desktop you can press \"Convert Currencies\" and go to the \"Advanced\"-tab. Fill in the red highlighted inputs.\n\n![image-verus-desktop-bridge](/images/desktop-verus-to-eth.png)\n\nIn the **``From Currency``** you can put ``veth``, ``dai.veth``, ``mkr.veth``, ``vrsc`` or other bridged assets. Not capital sensitive.\n\n**``Destination System``** is ``veth`` for Ethereum.\n\n**``Destination Address``** is your Ethereum address.\n\n**``Refund Address``** is your Verus address (R-,i- or VerusID).\n\n## CLI\nTo bridge over from Verus to Ethereum using CLI. You can also use this command with the built-in command-line interface in Verus Desktop, under Settings -> Coin Settings, just replace ``./verus`` with ``run``.\n\n``` json\n./verus sendcurrency \"*\" '[{\n  \"currency\":\"veth\",\n  \"exportto\":\"veth\",\n  \"address\":\"ETH-ADDRESS\",\n  \"amount\":100,\n  \"refundto\":\"VERUS-ADDRESS\"\n}]'\n```\n\n**``currency: ``** ``veth``, ``dai.veth``, ``mkr.veth``, ``vrsc`` or other bridged assets. Not capital sensitive.\n\n**``exportto:``** keep as ``veth``\n\n**``address:``** your Ethereum address\n\n**``refundto:``** your Verus address (R-,i- or VerusID)\n\nYou can also add ``\"feecurrency\":\"veth\"`` to pay the fees in vETH. Standard is in VRSC.", "./raw_text_input_docs/verus-to-ethereum.md"], ["# Get a Verus address\nThere are a few ways to get a Verus address on desktop and on mobile.\n\n## Verus Mobile\nDownload Verus Mobile from the [App Store](https://apps.apple.com/en/app/verus-mobile/id6447361908) or [Play Store](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US)\n\nUse Verus Mobile to bridge from Ethereum to Verus (or vice versa) all within the application. And use it for MEV-resistant and low-cost conversions: [more on Verus DeFi](/sendcurrency)\n\n## Verus Desktop\nDownload Verus Desktop for Windows, macOS, Linux or Linux ARM [here](https://verus.io/wallet).\n\nRun a full node (native mode) to experience all protocol features.", "./raw_text_input_docs/getwallet.md"], ["# Register VerusID / subID\n\nRegister a VerusID or subID. First a name needs to be committed, this costs a transaction fee (0.0001), after a block has passed the VerusID or subID can be registered.\n\n### VerusID name commitment\nCommit a VerusID name by using the following command below. If no referral is available leave it empty.\n\n``` json\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\"\n```\n\nUsing the command above gives an output. Take that output and add the highlighted lines from below:\n\n### VerusID registration\n\n``` json{11-16}\n./verus -chain=VRSCTEST registeridentity '{\n \"txid\": \"2a614ae147a8abcb870eb45d5ddbfc1e1d283b942a5e77340d0d268c7fd47260\",\n \"namereservation\": {\n  \"version\": 1,\n  \"name\": \"test-id\",\n  \"parent\": \"iJhCezBExJHvtyH3fGhNnt2NhU4Ztkf2yq\",\n  \"salt\": \"bf5b76bb38cefd2bec266bdcc2f2f37cb321c9aab103e4aa802fdef90224a2f7\",\n  \"referral\": \"\",\n  \"nameid\": \"iMGMwQhtnaVwdrzev9uMspuNyQbYhCJEmU\"\n }, \n  \"identity\":{\n    \"name\":\"YOUR_ID_NAME\",\n    \"primaryaddresses\":[\"R_ADDRESS_CHOSEN_WITH_NAME_COMMITMENT\"],\n    \"minimumsignatures\":1,\n    \"revocationauthority\":[\"CHOOSE_I_ADDRESS\"],\n    \"recoveryauthority\":[\"CHOOSE_I_ADDRESS\"]}\n}'\n```\n\n### SubID name commitment\nCommit a subID name by using the following command below (it is almost the same as doing a VerusID name commitment, except currency name is added.)\n\n``` json\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\" \"CURRENCY_NAME\"\n```\n\n### SubID registration\nThe same as with VerusID registration.", "./raw_text_input_docs/verusid-create.md"], ["# Transfer DestinationThe Transfer Destination construct is a universal component used within the Verus blockchain network, designed to define destinations within blockchain operations comprehensively. This construct is crucial for specifying the end points in a variety of blockchain transactions, supporting a wide array of destination types to accommodate diverse blockchain functionalities and cross-chain interactions.## Core ConceptsTransfer Destination encapsulates key information necessary for blockchain transactions, including the destination type, destination-specific bytes, gateway information, and associated fees. It supports a flexible architecture for defining complex transaction paths, enhancing the blockchain's capability to handle sophisticated and multi-layered operations.### Destination TypesThe Transfer Destination construct supports various destination types, each serving specific purposes:", "./raw_text_input_docs/transfer-destination.md"], ["- **DEST_INVALID (0)**: Represents an invalid or unspecified destination type, used as a default or error state.\n- **DEST_PK (1)**: Indicates a public key destination, typically used for transactions directly to a public key.\n- **DEST_PKH (2)**: Stands for a public key hash destination, common in many blockchain platforms for sending transactions to a hashed version of a public key (e.g. an r-address).\n- **DEST_SH (3)**: Represents a script hash destination, used for transactions that should be processed by a specific script, enabling smart contracts or complex spending conditions.\n- **DEST_ID (4)**: Identifies a [**VerusID**](/verusid/) destination.\n- **DEST_FULLID (5)**:\n- **DEST_REGISTERCURRENCY (6)**:\n- **DEST_QUANTUM (7)**: Used for quantum-resistant addresses.\n- **DEST_NESTEDTRANSFER (8)**:\n- **DEST_ETH (9)**: Specifies an Ethereum account as the destination, facilitating cross-chain transactions with Ethereum.\n- **DEST_ETHNFT (10)**: Indicates a destination for an Ethereum-compatible Non-Fungible Token (NFT), enabling the mapping of NFTs across different blockchain systems.\n- **DEST_RAW (11)**: Represents a raw data destination, allowing for arbitrary data to be included as a destination, offering maximum flexibility.### FlagsTransfer Destination also supports the use of flags to indicate additional attributes of a destination:- **FLAG_DEST_AUX (64)**: Indicates the presence of auxiliary destinations, allowing for the specification of additional destinations within a single Transfer Destination construct.\n- **FLAG_DEST_GATEWAY (128)**: Specifies that the destination is associated with a gateway, relevant for cross-chain transactions or interactions with external systems.## Serialization and Deserialization Process", "./raw_text_input_docs/transfer-destination.md"], ["The core functionality of Transfer Destination revolves around the ability to serialize and deserialize destination information. This process ensures that destination data can be efficiently transmitted across networks or stored, maintaining integrity and compatibility across different implementations.### Key Components in Serialization![image-transfer-destination-bytes](/images/transfer-destination-bytes.svg)- **Type**: A numerical value indicating the destination type, serialized directly as part of the destination data. Includes flags.\n- **Destination Bytes**: The specific bytes associated with the destination, which may represent an address, identifier, or other relevant data, depending on the destination type.\n- **Gateway ID & Gateway Code**: Optional components used for gateway destinations, serialized when present to include external system identifiers.\n- **Fees**: Associated fees, if applicable, serialized to ensure the correct processing of transactions, particularly for complex or cross-chain operations.\n- **Auxiliary Destinations**: An optional list of additional Transfer Destination constructs, serialized to support nested or multi-part transactions.### ConsiderationsThe serialization and deserialization mechanisms must adhere to a standardized format to ensure interoperability. Implementations in different programming languages should focus on accurately reflecting the structure and logic outlined, ensuring that Transfer Destination constructs are universally compatible, regardless of the underlying platform or language used.## Application and Significance", "./raw_text_input_docs/transfer-destination.md"], ["Transfer Destination is a foundational component for blockchain developers, enabling the definition of flexible, interoperable, and sophisticated transaction pathways. Its design facilitates a wide range of blockchain operations, from simple transfers to complex cross-chain and multi-step transactions, making it an essential tool in the development of decentralized applications and systems.\n\n## Implementation Examples\n\nThe Transfer Destination construct is implemented in a number of codebases accross the Verus ecosystem:\n\n- [The VerusCoin core GitHub repository (as CTransferDestination)](https://github.com/VerusCoin/VerusCoin/blob/master/src/pbaas/crosschainrpc.h)\n- [The verus-typescript-primitives utility library (as TransferDestination)](https://github.com/VerusCoin/verus-typescript-primitives/blob/master/src/pbaas/TransferDestination.ts)", "./raw_text_input_docs/transfer-destination.md"], ["# API commands\nAll functionality is easily accessible by doing API commands. Here are a few examples:## Converting (DeFi)### Estimate conversion price\nThe ``estimateconversion`` API estimates what you might receive for a certain conversion.Example:\n``` json\n./verus -chain=VRSCTEST estimateconversion '{\n  \"currency\":\"vrsctest\",\n  \"convertto\":\"veth\",\n  \"via\":\"bridge.veth\",\n  \"amount\":1000\n}'\n```Example:\n``` json\n./verus -chain=VRSCTEST estimateconversion '{\n  \"currency\":\"vrsctest\",\n  \"convertto\":\"bridge.veth\",\n  \"amount\":500\n}'\n```### Get currency converters\nThe ``getcurrencyconverters`` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves.Example ``btc`` and ``eth``:\n``` json\n./verus -chain=VRSCTEST getcurrencyconverters btc eth\n```### Converting VRSCTEST to basket currency\nConverting VRSCTEST to a basket currency, VRSC-BTC, using IDs as a funding source:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*i\" '[{\n  \"address\":\"bob@\",\n  \"amount\":10,\n  \"convertto\":\"VRSC-BTC\"\n}]'\n```### Converting VRSCTEST to BTC via basket currency\nConverting VRSCTEST to another reserve, BTC through a basket currency, VRSC-BTC:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"bob@\",\n  \"amount\":10,\n  \"convertto\":\"BTC\",\n  \"via\":\"VRSC-BTC\"\n}]'\n```\n### Preconverting\nPreconverting to new currency, NEWCOIN, before it is active:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"alice@\",\n  \"amount\":10,\n  \"convertto\":\"NEWCOIN\",\n  \"preconvert\":true,\n  \"refundto\":\"alice@\"\n}]'\n```", "./raw_text_input_docs/sendcurrency-examples.md"], ["### Converting VRSCTEST cross-chain to PBaaS-chain\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"convertto\":\"PBaaSChain\",\n  \"exportto\":\"Bridge.PBaaSChain\",\n  \"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\n### Converting PBaaS-chain to VRSCTEST\n``` json\n./verus -chain=PBaaSChain sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"convertto\":\"VRSCTEST\",\n  \"exportto\":\"VRSCTEST\",\n  \"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\n## Sending\nSending VRSCTEST from a single address (bob@) to a single recipient (alice@):\n``` json\n./verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\n  \"currency\":\"vrsctest\",\n  \"address\":\"alice@\",\n  \"amount\":10\n}]'\n```\n\nSending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\n  \"currency\":\"vrsctest\",\n  \"address\":\"alice@:private\",\n  \"amount\":10\n},\n{\n  \"currency\":\"VRSCTEST\",\n  \"address\":\"bob@:private\",\n  \"amount\":10\n}]'\n```\n\nSending VRSCTEST cross-chain to PBaaSChain:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"exportto\":\"Bridge.PBaaSChain\"\n}]'\n```", "./raw_text_input_docs/sendcurrency-examples.md"], ["# What is the Verus-Ethereum Bridge\nThe Verus-Ethereum Bridge (fully operational since Oct 20, 2023) allows for the secure transfer and conversion of cryptocurrencies between Verus and Ethereum. It's **trustless** and **non-custodial**, meaning it doesn't require users to trust a third party with their funds, and **no single entity has control over the assets being transferred**.The Bridge stands out because it avoids common security issues found in other cryptocurrency bridges by using the decentralized network of miners and stakers to verify and account for funds crossing the bridge.\ud83d\udc49 Access the Verus-Ethereum Bridge [with MetaMask or WalletConnect](https://eth.verusbridge.io), or download Verus Mobile for [iOS](https://apps.apple.com/en/app/verus-mobile/id6447361908) and [Android](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US).## What can the Verus-Ethereum Bridge do\nThe trustless and non-custodial Verus-Ethereum Bridge can be used for the following things:", "./raw_text_input_docs/README_eth-bridge.md"], ["| What       |     Details      |\n| :------------------ | :----------------------------------------- |\n| **Conversions**| Convert VRSC, ETH (vETH), DAI (DAI.vETH) & MKR (MKR.vETH) with each other into any direction (on/to Verus & Ethereum), or to and from the Bridge.vETH currency.|\n| **Launch mapped currencies**| Launch currencies on Verus that are 1:1 mapped to any ERC-20. [Learn how](/currencies/mapping-1:1-eth.html)|\n| **Export currencies as ERC-20**| Export any launched currency (simple tokens, basket currencies) on Verus as an ERC-20. [Learn how](/currencies/export-to-eth.html)|\n| **Cross-chain sends**| Send any tokens, basket currencies (e.g. liquidity pools), mapped currencies etc. that are exported to Ethereum across the bridge.|\n| **Export tokenized ID control**| Export a tokenized VerusID to Ethereum as ERC-721.|\n| **Map VerusID to Ethereum NFT**| Launch a tokenized ID with a mapping of an Ethereum ERC-721 or ERC-1155.|Then there is the bridge currency Bridge.vETH, a 100% backed currency with 4 currencies in its reserves (VRSC, ETH, DAI, MKR). The Bridge.vETH currency function is to make the bridging of assets simple. From wherever you send it converts the fees that you need seamlessly. [More on Bridge.vETH below.](/eth-bridge/#bridge-veth-currency)## What makes the Verus-Ethereum Bridge secure\nThe Verus-Ethereum Bridge is different because the assets are never in anyone\u2019s custody. This is done through the seamless cooperation between the block producers (worldwide miners and stakers), community notary witnesses, [the Bridgekeeper software](https://github.com/VerusCoin/Verusbridgekeeper) and the [Ethereum smart contract](https://etherscan.io/address/0x71518580f36FeCEFfE0721F06bA4703218cD7F63). At each step during cross-chain transactions the assets are verified and proven by consensus rules, with safeguards in place to prevent hacks.", "./raw_text_input_docs/README_eth-bridge.md"], ["Every 10 blocks the block producers create a notarization (when there is traffic over the bridge). They create these digital receipts for both Verus and Ethereum. The digital receipts, called \u201cnotarizations\", contain, among other things: the \u201cstateroot\u201d ([Merkle Mountain Range](https://www.investopedia.com/terms/m/merkle-root-cryptocurrency.asp) for Verus, [Merkle Patricia Trie](https://ethereum.org/en/developers/docs/data-structures-and-encoding/patricia-merkle-trie/) for Ethereum), the blockheight, blockhash and the gas price for Ethereum. The notarizations have to be agreed to by the block producers (miners and stakers) and are then mined into the Verus blockchain.\ud83d\udc49 [Read more here](https://medium.com/veruscoin/verus-internet-protocol-vip-provable-decentralized-cross-chain-communication-8d9414a429c5?source=rss----4869a79d7e7f---4) on how the Verus Protocol handles cross-chain communication (PBaaS-chains and more) in a decentralized and provable way.### Safeguards against bridge hacks\nThreats caused by malicious notary witnesses, or stolen keys to drain funds are not viable against the Verus-Ethereum Bridge. To successfully mount an attack on the bridge, if a majority of witnesses were colluding or got their private keys stolen the following would need to happen:- Colluding, malicious witnesses.\n- Fake block producers with more combined hash and stake power than the publicly validated Verus blockchain. [\ud83d\udc49 Verus Paper: A Provable Hybrid Solution to 51% Hash Attacks](https://verus.io/papers/VerusPoP.pdf)\n- Developers helping them by creating an alternate protocol for the shadow chain.These requirements are very close to the requirements of attacking any blockchain. The bridge even provides a way to defend against such an unlikely scenario.", "./raw_text_input_docs/README_eth-bridge.md"], ["The notary witnesses are also monitoring notarizations, and if they were to sign for something that they themselves do not agree with, they can auto-revoke their identities, using the VerusID protocol, which cannot be stopped by an attacker unless they have stolen both the keys for the notary ID and those for its revocation ID as well. This serves as a prevention for stolen key attacks, ensuring that notaries are extremely hard targets to compromise.## Bridge.vETH currency\nBridge.vETH is a 100% backed currency with 4 currencies in its reserves (VRSC, ETH, DAI, MKR), [read more on basket currencies](/currencies/). The Bridge.vETH currency function is to make the bridging of assets simple. From wherever side on the bridge you send it converts the fees that you need seamlessly.The value of Bridge.vETH increases relative to reserves when fees or interest are added to the reserves without there being new Bridge.vETH minted.", "./raw_text_input_docs/README_eth-bridge.md"], ["| \ud83d\udcc8 Accrued fees       |     Details      |\n| :------------------ | :----------------------------------------- |\n| [**Dai Savings Rate**](https://blog.makerdao.com/an-update-on-the-dai-savings-rate-in-multi-collateral-dai/)| 5% interest (at the time of writing, the rate is subject to change by MakerDAO) is earned automatically when holding Dai in the DSR (Dai Savings Rate) contract. Dai in Bridge.vETH and in the complete Verus ecosystem get this savings rate. The DSR is being passed through 100% to the DAI reserves of Bridge.vETH.|\n| **.vETH subID registrations**| A .vETH subID costs 0.01 vETH worth of Bridge.vETH. When registering the subID the Bridge.vETH is burned, meaning the Bridge.vETH supply decreases. |\n| **Conversion fees**| 50% of the conversion fees go into the reserves of Bridge.vETH: 0.025% when it's a reserve to reserve conversion, 0.0125% when it's a reserve to Bridge.vETH conversion (or vice versa). |\n| **Cross-chain send fees**| A share of the cross-chain send fees go into the reserves of Bridge.vETH. |Bridge.vETH had an initial supply of 100,000. During the preconversion timeframe which lasted 10 days, anyone could add VRSC, ETH, DAI and MKR into its reserves. When the preconversion period ended everyone got their share of the 100,000 Bridge.vETH, distributed by the protocol.The supply of Bridge.vETH is dynamic. The currency gets minted when people convert VRSC, ETH, DAI or MKR to Bridge.vETH, and the currency gets burned when they convert from Bridge.vETH back to VRSC, ETH, DAI or MKR.Converting currencies using Bridge.vETH (or other basket currencies) has many advantages. It is MEV-resistant, has no smart contract risks due to protocol level security and has low fees (max. 0.05%). [More on Verus DeFi here.](/sendcurrency/)See statistics for Bridge.vETH here: [verus.io/eth-bridge](https://verus.io/eth-bridge)", "./raw_text_input_docs/README_eth-bridge.md"], ["## .vETH subID\nRegister a .vETH subID to launch a currency with a 1-to-1 mapping of an ERC-20. The cost is 0.01 vETH worth of Bridge.vETH.\n\n[Learn here how to register a VerusID / subID.](/verusid/verusid-create/)\n\n## Contract addresses\n\n| What       |     Contract address      |\n| :------------------ | :----------------------------------------- |\n| Verus-Ethereum Bridge smart contract **mainnet**| [0x71518580f36FeCEFfE0721F06bA4703218cD7F63](https://etherscan.io/address/0x71518580f36FeCEFfE0721F06bA4703218cD7F63) |\n| **VRSC** token address| [0xBc2738BA63882891094C99E59a02141Ca1A1C36a](https://etherscan.io/token/0xbc2738ba63882891094c99e59a02141ca1a1c36a) |\n| **Bridge.vETH** token address| [0xE6052Dcc60573561ECef2D9A4C0FEA6d3aC5B9A2](https://etherscan.io/token/0xE6052Dcc60573561ECef2D9A4C0FEA6d3aC5B9A2) |", "./raw_text_input_docs/README_eth-bridge.md"], ["# Introduction to VerusWelcome to the Verus documentation. Here you find all mainnet and testnet protocol features and implementations. The documentation will be updated continuously.## Open-source, rent-free, scalable public infrastructure\nVerus is an open-source, [fairly launched](/overview/#fair-launch), decentralized blockchain protocol with proof-of-work and proof-of-stake as its consensus mechanism. It offers rent-free blockchain tools for creators and organizations to build products, services and systems.Verus is a multichain protocol with strong focus on scalability, security and decentralization. It can scale to world demand, is proven 51% hash attack resistant and is community built - all coins in circulation are fairly mined and staked.With Public Blockchains as a Service (PBaaS) anyone can launch scalable, fully interoperable, customizable and independent blockchains for public or private use. Launch tokens & basket currencies (e.g. liquidity pools) on top of blockchains for any use case. Get funding and create markets with protocol level built-in DeFi and smart launch options.Protocol-level self-sovereign digital identities and namespaces ([VerusID](/verusid/)) are at the center of the Verus multichain protocol. Giving builders, communities, businesses and organizations tools never before seen.Everything happening on the Verus multichain protocol has aligned incentives with the [miners and stakers](/economy/) of the worldwide network. This makes it one of the most secure protocols with opportunities to earn.## Low-cost, rapid & easy deployment\nLaunch blockchains, tokens, liquidity pools, identities and much more without any coding needed, just simple API commands. Save money on expensive blockchain (Solidity) developers & infrastructure with the rent-free Verus Protocol.", "./raw_text_input_docs/README_overview.md"], ["* **No programming needed for [blockchain](/blockchains/), [token and currency launches](/currencies/)**\n* **Low protocol fees**## Scalability\nVerus achieves practically unlimited scalability through its [Public Blockchains as a Service](/blockchains/). Verus PBaaS enables the provisioning of an unlimited number of independent, interoperable and interconnected L1 blockchains, which inherit all Verus L1 features.Verus' scale out TPS (transactions-per-second) is better than what other blockchains have today. A single PBaaS chain can reach between 75 and 800 TPS depending on blocktime; a network of several thousand chains would have a total bandwidth of 1 million+ TPS. But there is no maximum TPS metric because such a thing does not exist on an open fractal network like Verus.* **Create use case specific blockchains and currencies** \n* **Move activity between chains to avoid congestion**## Security\nVerus and its PBaaS-blockchains are 51% hash attack resistant. All functionality can be found in the consensus layer (L1), making the protocol secure for developers and users. No smart contract risks \u2014 Verus uses smart transactions, not smart contracts.* **51% hash attack resistant through [Verus Proof of Power](/overview/verus-proof-of-power/)**\n* Read: [Verus Smart Transactions vs. Smart Contracts](https://medium.com/veruscoin/verus-smart-transactions-vs-smart-contracts-f98079c00ed0)## Interoperability\nVerus enables a world where all blockchains communicate with each other. All PBaaS-chains are interoperable and interconnected. Verus and all PBaaS-chains are now also connected to Ethereum, in a trustless and non-custodial way.* Read: [Verus Internet Protocol (VIP) \u2014 Provable, Decentralized Cross-chain Communication](https://medium.com/veruscoin/verus-internet-protocol-vip-provable-decentralized-cross-chain-communication-8d9414a429c5)\n* [Verus-Ethereum Bridge](/eth-bridge/)", "./raw_text_input_docs/README_overview.md"], ["## Decentralized & community-built\nVerus is a decentralized public blockchain, a community driven project in the true spirit of Bitcoin. Anyone can participate and contribute, no matter who you are or where you come from. Verus is:\n* **Open**\n* **Borderless**\n* **Public**\n* **Neutral**\n* **Censorship resistant**\n\nAnyone can start mining and staking the Verus Protocol. Mobile phones and ARMs (e.g. Orange Pi 5) are the most energy efficient devices to mine Verus (and 22 other PBaaS-chains) with. To stake there are no minimum requirements or locking of funds.\n\nThere is no company behind Verus, it is community-built. All protocol fees go to the block producers of the network (the miners and stakers).\n\nThese characteristics that anyone can participate in the Verus Protocol makes it one of the most decentralized networks worldwide.\n\n## Fair launch\nVerus had a fair launch, meaning that everyone had, and still has equal opportunity to collect its currency through mining and staking. For Verus this means:\n* **No ICO has been held**\n* **No founder or developer fees/tax**\n* **No premine**\n* **No commercial interests**\n* **No rent-seeking behavior**\n\nThe launch of the Verus blockchain was announced on the Bitcointalk.org forum [See post](https://bitcointalk.org/index.php?topic=4070404.0) 15 minutes before the first block could be mined.\n\n::: tip Rich List\n[Take a look at the richlist to see coin distribution.](https://dexstats.info/richlist.php?asset=VRSC) \n:::", "./raw_text_input_docs/README_overview.md"], ["# Coin Overview\n\n| | |\n| -----------------------: | :-- | \n| **Launch Date** | 21 May 2018 | \n| **Coin Ticker** | VRSC | \n| **Average Block Time** | 1 minute | \n| **Transaction Fee** | 0.0001 VRSC | \n| **Max Supply** | 83,540,184 VRSC | \n| **Consensus Algorithm** | [Verus Proof of Power](/overview/verus-proof-of-power/) | \n| **Hash Algorithm** | [VerusHash 2.2](/overview/verus-proof-of-power.md#verushash-2-2) | \n| **Privacy** | Zcash Sapling |", "./raw_text_input_docs/coin.md"], ["# Introduction", "./raw_text_input_docs/README_wallet.md"], ["---\nsidebarDepth: 2\n---# Mining## Solo vs Pool Mining### Solo MiningMine solo through Verus Desktop to receive full block rewards. Depending on hashrate it may take a while before winning a block. No additional software is needed to get started.### Pool MiningParticipate in pool mining to receive regular rewards. You will need to set up a few things before you can start.---Quick Comparison\n| | Solo mining | Pool mining |\n| -----------------------: | :--: | :----------: |\n| **Full Node** | yes | no |\n| **Regular Rewards** | no | yes |\n| **Setup Difficulty** | easy | intermediate |## Suitable DevicesMine Verus with various devices. Profitability **indication** means the electricity usage vs hashrate.| Device       |     Profitability Indication      |\n| :------------------ | :-----------------------------------------: |\n| CPU (processor)   |  <span style=\"color:green\">high</span>  |\n| GPU (graphics card) | <span style=\"color:orange\">medium</span>  |\n| Mobile Phone    |  <span style=\"color:green\">high</span>  |\n| ARM (not RP4)    |  <span style=\"color:green\">high</span>  |\n| FPGA        | <span style=\"color:red\">not possible</span> |\n| ASIC        | <span style=\"color:red\">not possible</span> |::: tip Hashrate Comparison\nCompare hashrates from different devices. See [Community Reported Hashrates](https://docs.google.com/spreadsheets/d/1RrSYJDV0Mjj3X-myMC3aQDGkcipivxHsD7ZxJ3r5f_A/edit#gid=10943314)\n:::## Mining Software\n::: warning Need help with mining? \u26cf\ufe0f\n[Go to the Verus Discord #mining channel. The community is happy to assist!](https://www.verus.io/discord). \n:::\n### \ud83d\udda5\ufe0f CPUSoftware to mine with a CPU (processor).#### CCminer", "./raw_text_input_docs/start-mining.md"], ["| OS   |  Name | Version |   Download |\n| :------ | ------: | ------: | -----------: |\n| Windows | CCminer | v3.8.3a | [Download](https://github.com/monkins1010/ccminer/releases/tag/v3.8.3a) |\n| macOS (Apple silicon)| CCminer | -- | not (yet) available |\n| Linux  | CCminer | v3.8.3a | [Download](https://github.com/Oink70/ccminer-verus/releases/tag/v3.8.3a-CPU) |\n| ARM   | CCminer | v3.8.3a | [Download](https://github.com/Oink70/ccminer-verus/releases/tag/v3.8.3a-CPU) |\n\n### \ud83d\udcf1 Mobile\nStart mining with your phone.\n\n**VerusMiner** [Download here](https://pangz-lab.github.io/verusminer/)\n\n### GPU\n\nNo software yet.\n\n## Mining Pools\n\n| Pool Name                    | Fee % |\n| :---------------------------------------------- | ----: |\n| [Verus Pool](https://pool.verus.io/) <span style=\"color:green\">Fees donated to the Verus foundation</span>   |  <span style=\"color:green\"> <b>5%</b></span>|\n| [LuckPool](https://luckpool.net/verus/)     |  1% |\n| [ZergPool](https://zergpool.com/)        | 0.5% |\n| [CiscoTech](https://vrsc.ciscotech.dk/)     |  1% |\n| [LePool](http://vrsc.lepool.com.cn:8088/)    |  1% |\n| [Zhuaao](http://www.zhuaao.com:8880/)      |  1% |\n| [AlphatechIT](https://verus.alphatechit.co.uk/) | 0.2% |\n| [Wattpool](https://wattpool.net/ui/verus/stats) | 0.5% |\n| [011Data](https://verusna.011data.com/) | 0.5% |\n| [vipor.net](https://vipor.net) | 0.1% |\n| [cloudiko.io](https://cloudiko.io) | 0% |", "./raw_text_input_docs/start-mining.md"], ["# Staking\n\nStaking is accessible for everyone. Use Verus holdings to secure the network. It does not matter how much $VRSC you have, there are no minimum requirements to start staking.\n\nOn the Verus blockchain UTXOs (unspent transaction outputs) are staking, not balances. A large UTXO has more chances of winning a block than a small UTXO. [What is a UTXO?](https://www.youtube.com/watch?v=xJ0UYZ9hDos)\n\n## Solo staking\nThere are a few rules you need to know before you can start staking.\n\n| Rules | \n| :-----|\n| Wallet Running | \n| Full Node Required (native mode in Verus Desktop) | \n| Staking Enabled | \n| UTXO Eligible After 150 Blocks | \n| Minimum of 0.00000001 VRSC in Wallet |\n\nWith solo staking you either win a full block or you win nothing.\n\n::: warning Need help with staking? \ud83d\udcb0\n[Join the Verus Discord #staking channel. The community is happy to assist!](https://www.verus.io/discord). \n:::\n\n## Pool staking\nThere are two ways to do pool staking with Verus. One is keeping control over your funds in combination with VerusID, the other is sending your coins to a pool operator and trusting your funds with them.\n\nA non-custodial staking pool: [Synergy Pool](https://synergopool.io)", "./raw_text_input_docs/start-staking.md"], ["# Verus Data eXchange Format (VDXF)The Verus Data Exchange Format provides a fully interoperable system for defining data types that may consist of structured or or unstructured data and associated content or keys that may be used to retrieve such data from centralized or decentralized storage for use in and across centralized or decentralized applications.The Verus Data eXchange Format (VDXF) object is a structured data representation of the Verus Data eXchange Format, designed to facilitate the exchange of information across different systems and programming languages. It encapsulates data in a serialized byte format, making it interoperable and easy to transmit or store. This document outlines the structure and functionality of a VDXF object, focusing on its serialized form rather than the methods used to manipulate it in any specific programming language.## OverviewThe Verus Data Exchange Format enables application developers to define globally unique data types and publish references to the same, which may refer to structured or unstructured data that can be located unambiguously via an URL, which implicitly provides both location and decoding information, enabling applications to use such data, in whole or in part, if they know how, or even ignore parts of the data, while remaining compatible with those parts they understand. VDXF typee keys are globally unique identifiers, which are defined as human readable names along with a specification of how to define and convert unlimited length, human readable type names into collison-free 20 byte IDs, which can be used as type keys associated with content or location values in various forms of data records. These data records, which may have application specific structures or no structure at all, besides length form the basis of an interoperable data exchange format across decentralized applications.", "./raw_text_input_docs/README_vdxf.md"], ["## Definition of VDXF typesVDXF is not a strongly opinionated or highly specified type description specification, and, instead, focuses on a model for recognizing an unlimited number of user defined data types, using a standard human readable format for definition and encoding of the type specifier, which is hashed, using the VDXF specification and standard methodology, to produce collision-free, 20 byte keys, which can be associated with retrieveable content hashes and location qualifiers that enable applications to locate, recognize types of, parse, and decode any form of application or system specific data. VDXF specifies some basic type formats, as necessary to enable initial applications, but leaves further specifications of applicaiton specific data formats, of which there may be an unlimited number, as an open-ended option for those needing new data type definitions for efficient application development. It is recommended that new fundamental data types not be defined unless necessary, but adherence to such recommendation is not enforced at the consensus protocol layer.## Namespace for Type Definitions - VerusIDNamespaces for type definitions are equivalent to VerusIDs, a protocol first implemented on the Verus Blockchain, and also one that can support IDs registered on any blockchain or uniquely named system that becomes recognized via a consensus-based bridge on the Verus network. Currently, to be recognized as a unique namespace, the easiest way is to base it on a VerusID, registered on the Verus blockchain network.", "./raw_text_input_docs/README_vdxf.md"], ["Generally, one may think of two types of VerusIDs, those defined on the Verus network or on independent PBaaS (Public Blockchains as a Service) blockchains spawned originally from and registered on the Verus blockchain network, or VerusIDs, which may also exist on fully external systems that may have been created without any registration on the Verus network initially. In order for an externally created VerusID to be recognizable on the Verus blockchain network or by applications using the VDXF that are compatible with the Verus blockchain network that external system must provide a recognized bridge to the Verus blockchain.First, it is important to understand the requirements of registered VerusID identity names, which will also inform how externally generated VerusIDs are recognized as well. For the purposes of the VDXF, we do not require compatibility of the internal structure of IDs across different systems, and only define compatibility requirements of the naming systems and how those names translate into recognisable IDs on the Verus network.## ImplementationA VDXF object is fundamentally a serialized byte array that can be written to or interpreted by any system, given the appropriate libraries for handling its format. The serialization process transforms structured data into a byte stream, while deserialization reverses this process, reconstructing the original structured data from the byte stream.### Key ComponentsThe VDXF object comprises several key components encoded into bytes:", "./raw_text_input_docs/README_vdxf.md"], ["- **VDXF Key**: A unique, 20 byte identifier for the VDXF object, that can be represented as a human readable string. This key is essential for identifying the type of data the VDXF object represents.\n- **Version**: Indicates the version of the VDXF object.\n- **Data**: The actual content stored within the VDXF object. This can be any form of data, structured or unstructured, that needs to be serialized.\n\n### Serialization Process\n\n![image-verusid-login](/images/vdxf-bytes.svg)\n\nThe serialization process involves converting the structured data within the VDXF object into a byte stream. This includes encoding the VDXF key, version, and actual data into bytes.\n\n#### Components Encoding\n\n- **VDXF Key**: 20 byte fixed length slice encoded using Base58Check\n- **Version**: Serialized using variable integer encoding to optimize space. The version ensures that the serialized data can be correctly interpreted by systems aware of different versioning.\n- **Data**: The actual data is serialized into a byte buffer. The format and encoding of this data can vary widely depending on the type of data being serialized and the intended use case.\n\n### Deserialization Process\n\nDeserialization is the reverse of serialization, where the byte stream is converted back into structured data according to the VDXF format specification. This process involves reading the byte stream, extracting and decoding the VDXF key, version, and data components, and reconstructing the original structured data.\n\n::: tip VDXF in Action\nLearn how the CHIPS project (decentralized poker) uses [VerusID](https://github.com/chips-blockchain/bet/blob/verus_test/docs/verus_migration/id_creation_process.md) and [VDXF](https://github.com/chips-blockchain/bet/blob/verus_test/docs/verus_migration/ids_keys_data.md)", "./raw_text_input_docs/README_vdxf.md"], ["# VerusID SSID Login\n\n::: tip VerusID Login Demo\nTest the VerusID login with Verus Mobile [here](https://verus.io/verusid-login-demo)\n:::\n\n### Login to websites and services\nLogin with VerusID on supported websites and services. Users control how, when, and with whom their personal data is shared. Users control their personal data fully.\n\n![image-verusid-login](/images/verusidlogin1.png)\n\nThese are the steps:\n1. **User Scans QR Code**: The user scans a QR code if they want to proceed to login. If the user has a valid attestation the website respects, it can be used on login.\n\n2. **Mobile App Verification and Data Request**: Once Verus Mobile ([Google Play](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US), [App Store](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US)) scans the QR code the user can verify the request from the site. In this case it will ask the user to reveal some identity data. The user can confirm the source of the request of data by verifying, and then trusting.\n\n3. **Login and Data Sharing**: At the website the user will be logged in using a reply the phone posts to the websites server in the background. This causes an immediate login and\nsharing of the data privately.", "./raw_text_input_docs/login.md"], ["# Invoice SpecificationThe VerusPay Invoice specification, introduced in VerusPay v3, outlines a standardized format for creating, managing, and interpreting invoices across the Verus blockchain ecosystem and beyond. It is designed to be universally implementable across various programming languages, focusing primarily on the serialization and deserialization processes to ensure interoperability and consistency. VerusPay invoices provide a robust framework for blockchain invoice management, emphasizing interoperability, security, and ease of use. Their design facilitates a seamless payment experience across different blockchain ecosystems, making it a valuable tool for developers, merchants, and users within the Verus network and beyond.## Core ComponentsThe VerusPay Invoice construct is central to this specification, encapsulating all necessary information for a comprehensive invoice system, including:- **System ID**: If the invoice is signed by a VerusID, this is the ID system it is signed on.\n- **Signing ID**: If the invoice is signed by a VerusID, this is the address of the VerusID that signed it.\n- **Signature**: If the invoice is signed by a VerusID, this is the signature.\n- **Details**: Incorporates detailed transaction information through the VerusPay InvoiceDetails sub-component, covering aspects such as the payment amount, destination, and currency.\n- **Version**: Manages the invoice format version, facilitating future updates and backward compatibility through version flags and checks.### VerusPay InvoiceDetailsEmbedded within the VerusPay Invoice, the VerusPay InvoiceDetails component provides specific transaction-related data:", "./raw_text_input_docs/invoices.md"], ["- **Flags**: Configurable flag bits for invoice options.\n- **Amount**: The payment amount specified in the invoice.\n- **Destination**: Details about the payment destination, utilizing the [TransferDestination](/addresses/transfer-destination) construct for flexibility across different types of destinations.\n- **Requested Currency ID**: The identifier for the currency in which the payment is requested.\n- **Expiry Height**: Optionally specifies a Verus blockchain height after which the invoice is considered expired.\n- **Max Estimated Slippage**: Defines the acceptable slippage for currency conversions, if applicable. Denoted as a satoshi representation of a percentage in decimal format (between 0 and 1).\n- **Accepted Systems**: Lists blockchain systems or platforms accepted for payment other than VRSC/VRSCTEST.#### Flags", "./raw_text_input_docs/invoices.md"], ["- **VERUSPAY_INVALID (0)**: Indicates that the invoice is invalid. This default state can be used to signify that an invoice should not be processed.\n- **VERUSPAY_VALID (1)**: Signifies that the invoice is valid and can be processed. This flag must be set for the invoice to be considered actionable.\n- **VERUSPAY_ACCEPTS_CONVERSION (2)**: Specifies that the invoice accepts currency conversions. This allows payments in different currencies, with conversion to the invoice's requested currency. If an invoice accepts conversion, it requires a max estimated slippage value.\n- **VERUSPAY_ACCEPTS_NON_VERUS_SYSTEMS (4)**: Indicates that payments from non-Verus blockchain systems are accepted. If this flag is set, specifying accepted systems is required.\n- **VERUSPAY_EXPIRES (8)**: Determines that the invoice has an expiry condition. If set, the invoice must be paid before a specific Verus blockchain height is reached, and an expiry height must be set.\n- **VERUSPAY_ACCEPTS_ANY_DESTINATION (16)**: Allows the invoice to accept payments to any destination. If set, the destination field in the invoice must be left blank.\n- **VERUSPAY_ACCEPTS_ANY_AMOUNT (32)**: Indicates that the invoice can be paid with any amount. This is useful for donations or when the exact payment amount is not fixed. If set, the amount field in the invoice must be left blank.\n- **VERUSPAY_EXCLUDES_VERUS_BLOCKCHAIN (64)**: If set, invoice cannot be paid on VRSC/VRSCTEST.\n- **VERUSPAY_IS_TESTNET (128)**: Marks the invoice as only valid on VRSCTEST and/or testnet PBaaS blockchains, and establishes that all currencies/identities referenced within the invoice exist only on testnet.## Serialization and Deserialization![veruspay-invoice-bytes](/images/veruspay-invoice-bytes.svg)", "./raw_text_input_docs/invoices.md"], ["The specification emphasizes a standardized approach to converting the VerusPay Invoice and VerusPay InvoiceDetails into a binary format (serialization) and back (deserialization) to enable efficient transmission and storage. This process ensures that invoices can be shared, processed, and stored across different systems and languages without loss of fidelity or meaning.\n\n### Packaging into Deeplinks and QR Codes\n\nTo package a VerusPay Invoice into a deeplink or QR code readable by wallets like [Verus Mobile](https://github.com/VerusCoin/Verus-Mobile), the invoice must be serialized using the method described above, without its 20-byte [VDXF](/vdxf/) key included, and then its bytes formatted into a base64url string. Then, a deeplink URL can be created as follows:\n\n```[vrsc::applications.wallet VDXF ID]://x-callback-url/[veruspay.vrsc::invoice VDXF ID]/[VerusPay invoice bytes in base64url format]```\n\nIn practice, this creates URLs such as `i5jtwbp6zymeay9llnraglgjqgdrffsau4://x-callback-url/iEETy7La3FTN2Sd2hNRgepek5S8x8eeUeQ/AzABpJ-uxwACFAAtMxHDi_0hkJLSrvRJgEvos77-pu-eojVjXjKBJP80KdufnpG2Ti0`, which can then be packaged into a QR code and scanned by a VerusPay supporting wallet application, or linked to by an application or service to trigger an invoice request.", "./raw_text_input_docs/invoices.md"], ["# Introduction\nLaunching currencies on Verus, and any other PBaaS-chain (Public Blockchains as a Service), is better, faster, cheaper and more secure than any EVM-like protocol out there. There is no coding involved.There are two types of currencies that can be launched with the Verus Protocol. Basket currencies (e.g. liquidity pools) and simple token currencies. Both can be issued decentralized, or centralized with minting and burning capabilities.When a currency is launched, subIDs can be created from it. SubIDs are powerful objects on Verus (and other PBaaS-blockchains). They are exactly the same as [VerusIDs](/verusid/), yet can not launch blockchains or currencies.## Basket currencies (e.g. liquidity pools)\n![image-basket-currencies](/images/currencies-reserves.png)Basket currencies function like automated market makers (AMMs), they have reserves. A reserve can be any currency or token on the Verus network (also bridged). Have a look at the simplified image. If anyone has currency X or Y, they can convert to the basket currency, or convert from reserve to reserve. If anyone has the basket currency, they can go to currency X or Y. A basket currency can have 1 and up to 10 currencies in its reserves.The basket currency supply is dynamic, depending on how much is converted to the basket currency (supply minted), or back to its reserve(s) (supply burned).A basket currency can be 100% backed by its reserves, 5%, or anything in between. This is called the reserve ratio, or the weight. The lower the reserve ratio, the more volatile the currency is when people are converting into or out of the basket currency. The value of the basket currency is directly linked to what is in the reserves and what the reserve ratio is.", "./raw_text_input_docs/README_currencies.md"], ["When a centralized version of this currency is created, the owner of the rootID can mint currencies into existence, while automatically lowering the reserve ratio. Or they can burn currencies and automatically raise the reserve ratio. Anyone can also just burn the currency at will without raising the reserve ratio.The conversion fees are incredibly low, 0.025% when converting to and from a basket currency, and 0.05% when converting from reserve to reserve currency. These fees go directly to the worldwide miners and stakers of the protocol, and/or they are accrued into the reserves making the basket currency worth more.| Conversion type | Fee | Fee goes to |\n| :-----| :------ | :-------- |\n| Basket currency \u2194\ufe0f reserve | 0.025% | 0.0125% added to reserves of the basket currency, 0.0125% to the block reward for miners and stakers | \n| Reserve \u2194\ufe0f reserve | 0.05% | 0.025% added to reserves of the basket currency, 0.025% to the block reward for miners and stakers |Because all currency conversions are solved simultaneously inside a block, giving all participants the same price, the protocol is MEV-free (no front-running, back-running, sandwich attacks etc.). The protocol doesn\u2019t have any of the problems EVM-like account-based systems have. Verus DeFi is fair, cheap and has no rent-seekers.Every(!) currency and token on the Verus network (also mapped ERC-20s!), can be used as reserves for basket currencies. As you might start to understand now \u2014 basket currencies are unique currencies that can not be found anywhere else and offer an enormous amount of opportunities for value creation.", "./raw_text_input_docs/README_currencies.md"], ["## Simple token currencies\nSimple token currencies and are just currencies without any reserves. They are not as exciting as the basket currencies, yet still offer much value. With all the parameters that can be added, subIDs created and decentralized crowdfund mechanisms, these currencies can support a lot of use cases that are difficult to do with alternative protocols.The supply of this type of currency is static when it\u2019s a decentralized version. When it\u2019s a centralized version, the owner of the rootID can mint tokens into existence, and anyone can burn them.This option is also used to create currencies that are mapped to Ethereum ERC-20s. Which means you can send those ERC-20s over to Verus, or from Verus to the ERC-20. This is made possible with the non-custodial Verus-Ethereum Bridge. You can read more about it here.And of course, a simple token currency can be one of the reserves in a basket currency.## Ethereum ERC-20 \nThe Verus-Ethereum Bridge makes it possible for currencies and tokens to be send over to Ethereum, and back to Verus. It is a true non-custodial bridge. All tokens and currencies flowing over the bridge are never in anyone\u2019s custody, and are proven and verified by consensus rules. [Everything on the Verus-Ethereum Bridge here.](/eth-bridge/)Any currency and token, on Verus or any other PBaaS-blockchain, can be exported to Ethereum as an ERC-20. They can then be used in the Ethereum ecosystem.Also, any already existing ERC-20 token can be mapped one-to-one as a Verus currency. Meaning any ERC-20 token can live on the Verus blockchain (or any other PBaaS-chain) and take advantage of all the L1 features.", "./raw_text_input_docs/README_currencies.md"], ["## Crowdfund mechanisms\nAll currencies can be launched through decentralized crowdfund mechanisms. [Set required minimum levels](/currencies/launch-currency.html#minpreconversion) of worldwide participation in your preferred currencies. If by the start time of your currency or token, minimums are not met, all participants will automatically get a refund of all of their preconversions, less the network fees.\n\nThe launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral [pre-allocations](launch-currency.html#preallocations) to select VerusIDs that increase the reserve ratio to issue currencies, similarly price neutral [carve-outs of proceeds](launch-currency.html#prelaunchcarveout), and [pre-launch discounts](launch-currency.html#prelaunchdiscount) for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n\n#", "./raw_text_input_docs/README_currencies.md"], ["# IntroductionVerusID is the first decentralized and self-sovereign identity of its kind, the permanent namespace for the Verus Protocol, and the building block to create Web3 Dapps.## Feature List| Feature | Details | \n| :-----| :------ | \n| **Namespace** | VerusID is the permanent namespace for the Verus Protocol and can be registered by anyone. | \n| **Self-sovereign identity** | VerusID can function as a self-sovereign identity for anyone in the world, empowering individuals with complete autonomy both online and offline. |\n| [**Blockchain launches**](/blockchains/) | With the VerusID namespace anyone can launch fully interconnected, customizable, independent and secure blockchains, without any coding needed (just simple commands). | \n| [**Currency & token launches**](/currencies/) | With the VerusID namespace anyone can launch powerful currencies and tokens, including basket currencies (DeFi AMMs). |\n| [**Publish & store data**](/vdxf/README) | Use VerusID and VDXF as a controlled public storage system. Publish and store data with multiple levels of nesting. | \n| [**Revoking & recovering**](/verusid/#revoke-recover) | Each VerusID has revocation and recovery authorities (which are also VerusIDs). Autonomously revoke access to a VerusID, and recover all assets and data on a VerusID. | \n| [**Friendly name address**](/verusid/#friendly-name) | A VerusID is a friendly name address that can send, receive and hold assets. | \n| [**Verus Vault**](/verusid/#verus-vault) | Enable theft-proof Verus Vault. Set locks or timelocks to secure assets on a VerusID. | \n| [**Marketplace**](/verusid/#marketplace) | Peer-to-peer decentralized marketplace for VerusIDs and currencies and tokens. | \n| **Privacy** | Point a private address to a VerusID. Send and receive native assets with full anonimity. | \n| **Signatures** | Create unforgable, verifiable signatures with VerusID. Sign fi", "./raw_text_input_docs/README_addresses.md"], ["les, hashes and messages. | \n| **Multisig** | Multiple organizations or people can manage a VerusID. | \n| **Messages** | Send and receive completely private messages through VerusID private addresses. | \n| [**SSID login**](/verusid/login/) | Login to supported VerusID services without ever needing a password. |\n| **SubID** | Under each launched currency and token subIDs can be registered. SubIDs have the exact same features as VerusIDs, although they can not launch blockchains, currencies or tokens. |", "./raw_text_input_docs/README_addresses.md"], ["VerusIDs can be anything you want. They can be bound digitally to many things. They can be bound to you, or other VerusIDs they have authority or ownership of. They can be bound to an unlimited amount of content, data, and provable information, both public and private. Including provable contracts and rights that can be bound to ownership of the VerusID itself.VerusIDs can hold funds. They can be personal profiles, corporate websites, or government portals. VerusIDs are much more than identities or today's NFTs. They are owned assets of all kinds on the Verus blockchain.A VerusID can be revoked and recovered, set (time)locks and can be controlled by any number of identities. Sign and verify data, files and messages. VerusID has privacy through added z-addresses and can send and receive messages. Identities can communicate in standardized ways through the novel [Verus Data Exchange Format (VDXF)](/vdxf/README).## Real Estate\nA VerusID is **premium** real estate on the Verus blockchain. To create PBaaS-chains, tokens and currencies on the Verus blockchain, a VerusID is necessary. The name you assign to the VerusID is also the name of the PBaaS-chain, token or currency.Each PBaaS-chain has standard VerusID support and creators of these chains can assign the costs of identites themselves. The costs will then be paid in the native coin of the PBaaS-chain.## Friendly Name\nEach VerusID can have an easy to remember name, chosen by the user. It has never been easier to send and receive funds.::: tip Supporting Worldwide Adoption\nAll characters from **all character sets** (except ``/`` ``:`` ``*`` ``?`` ``\"`` ``<`` ``>`` ``|`` ``@`` ``.`` ) are available to create a VerusID.\n:::", "./raw_text_input_docs/README_addresses.md"], ["## Costs\n**On the Verus blockchain** a VerusID costs 100 VRSC. These costs can be discounted with referrals. All costs paid are going to the [miners and stakers of the ecosystem](/economy/) and to the referrals if used.| | VerusID Cost |\n| :----------------------- | --: | \n| **Base cost** | 100 VRSC | \n| **Cost with referral used** | 80 VRSC |### Referrals\nA referral system is implemented to reward users with identities. For each VerusID a user creates, the referral identity receives 20 VRSC. The referral system goes three levels down.If one owns three identities that are stringed together through its referrals, one can receive 60 VRSC with each VerusID creation. This way an identity only has to cost 20 VRSC.::: tip Support the Verus Vision\nUse ``Verus Coin Foundation@`` when creating a VerusID on the Verus blockchain. All proceeds will go to the further development of the Verus vision.\n:::## Structure\nAn example of a VerusID:\n| Structure | Information |\n| :----------------------- | :--------------------- | \n| **VerusID Name** | The name is a unique namespace and human readable cryptocurrency address. | \n| **Primary Address** | The primary address is the owner of the VerusID, as it contains the private key. It can contain more than one VerusID. | \n| **Identity Address** | The identity address is, next to the name, the identifier of the VerusID. | \n| **Private Address** | An optional attached private z-address | \n| **Revocation Authority** | The identity address that can revoke the VerusID | \n| **Recovery Authority** | The identity address that can recover the VerusID | \n| **Contentmap** | VDXF key/value data |", "./raw_text_input_docs/README_addresses.md"], ["Input:\n```\n./verus getidentity \"Verus Coin Foundation@\"\n```\nOutput:\n``` json\n{\n\"fullyqualifiedname\": \"Verus Coin Foundation.VRSC@\",\n\"identity\": {\n\"version\": 3,\n\"flags\": 0,\n\"primaryaddresses\": [\"REpxm9bCLMiHRNVPA9unPBWixie7uHFA5C\"],\n\"minimumsignatures\": 1,\n\"name\": \"Verus Coin Foundation\",\n\"identityaddress\": \"i5v3h9FWVdRFbNHU7DfcpGykQjRaHtMqu7\",\n\"parent\": \"i5w5MuNik5NtLcYmNzcvaoixooEebB6MGV\",\n\"systemid\": \"i5w5MuNik5NtLcYmNzcvaoixooEebB6MGV\",\n\"contentmap\": {},\n\"contentmultimap\": {\n\"i5Zkx5Z7tEfh42xtKfwbJ5LgEWE9rEgpFY\": [{\n\"i5Zkx5Z7tEfh42xtKfwbJ5LgEWE9rEgpFY\": {\n\"version\": 1,\n\"action\": 2,\n\"entrykey\": \"73960afaad96f923c616b26f9646c059021d4ffa\",\n\"valuehash\": \"10230fb3df7c507f062593c55d94d1442f937b68b71e045c442e1e49647cfc6a\"\n}\n},\n{\n\"i5Zkx5Z7tEfh42xtKfwbJ5LgEWE9rEgpFY\": {\n\"version\": 1,\n\"action\": 2,\n\"entrykey\": \"73960afaad96f923c616b26f9646c059021d4ffa\",\n\"valuehash\": \"9ed2b3516d4ccd2d419bfb12f325902e1a3f566d222445c97005e4e8fee5903a\"\n}\n}],\n\"iSJ38vYX7qoCtotc9wBHb1vZdR3oTgoHCX\": [\"0186ff9300d99a27d51944ef1563b8c3b7445bc67ce91cebc8809cff0000\"]\n},\n\"revocationauthority\": \"i5v3h9FWVdRFbNHU7DfcpGykQjRaHtMqu7\",\n\"recoveryauthority\": \"i5v3h9FWVdRFbNHU7DfcpGykQjRaHtMqu7\",\n\"privateaddress\": \"zs1dycegwse0x67qvy2fksukcng3ekkgvly2qwjckj8fxraam33xu2y5jyh3yva0e4ywec9quedcud\",\n\"timelock\": 0\n},\n\"status\": \"active\",\n\"canspendfor\": false,\n\"cansignfor\": false,\n\"blockheight\": 2588672,\n\"txid\": \"802e3e5e928038bdabae648f0690d919bce85759b3ecc845db458cc1dba0fe83\",\n\"vout\": 0\n}\n```## Revoke & Recover\nRevoking and recovering identities are essentials in a decentralized system. Users need to have full self-sovereignty to move around in an ecosystem without central control. VerusID is the first decentralized identity system where users have full control over their identities.", "./raw_text_input_docs/README_addresses.md"], ["When creating a VerusID users can assign a ``RevokeID`` and a ``RecoveryID`` to their VerusID. They can be the same identities, different ones or appointed ``self``. These assigned identities are also VerusIDs and thus must be purchased.| Action | Outcome |\n| :----------------------- | :-- | \n| Revoking | Funds can not be spent anymore | \n| Recovering | Recover all assets to a new address. Funds and UTXOs can be spent again |::: danger Be Careful\nDon't assign a ``RecoveryID`` to ``self`` when the ``RevokeID`` is assigned to another identity. This way when you revoke an identity, you can not recover it anymore.\n:::## Verus Vault\nThe Verus Vault for identities is a unique feature to create extra security. Set locks or timelocks to safeguard funds on a VerusID. Locked identities can not spend funds.### How it Works\nThere are three stages the Vault can be set to. When the vault is locked it can not spend funds.| Action | Outcome |\n| :----------------------- | :-- | \n| Locked until x blocks | Funds can not be spent, until a predetermined number of blocks have passed | \n| Locked with delay | Funds can not be spent, until an unlock has been requested + predetermined number of blocks have passed | \n| Unlocked | Funds can be spent |When a VerusID is locked or timelocked, it can still receive, hold and stake funds. It can also still be used for signing.[Learn here how to set up Verus Vault in Verus Desktop](/guides/setup-vault-v2/)::: warning Revoking Locked VerusID\nEven when a VerusID is locked, it can still be [revoked and recovered](/verusid/specifications#revoke-recover/). \n:::### Vault Use Case Examples", "./raw_text_input_docs/README_addresses.md"], [":::tip Safe Staking\nPut funds to stake with on a VerusID. Use Vault to lock the identity with a delay of 10,080 blocks ( ~1 week). Now whenever someone gains access to the private keys of the locked VerusID, they have to unlock the identity in order to spend the funds. When someone makes an unlock request that isn't you, you are warned. The intruder has to wait 10,080 blocks before he can spend the funds. If you have set up revocation and recovery authorities, you now have one week to safeguard your funds away from prying hands, back into your control.\n::::::tip Trusts\nSetting up a trust fund for your children. Give your child a time locked VerusID with funds on them. When he or she turns 18, the VerusID unlocks and the funds can be spent. Keep revocation and recovery authorities with yourself or a trustee.\n::::::tip Vesting Periods\nWhen doing a currency or chain launch, development funds can be diverted to a locked VerusID. After two years the VerusID unlocks and the funds can only be spent with signatures of other developers. You can also spread the funds across multiple identities with different unlock periods.\n:::## Marketplace\nWith the VerusID Marketplace protocol, anyone is able to buy and sell VerusIDs. You can look for offers on any VerusID (buy or sell offers). If you like the best offer on your VerusID, or if someone likes an offer you made on theirs, the deal is made 100% peer-to-peer, decentralized on the blockchain, without any middleman or contract controller.For total payment privacy, you can even pay or receive payment using private addresses and zero knowledge transactions based on the Zcash Sapling protocol.### Exchanging in\u00a0Private", "./raw_text_input_docs/README_addresses.md"], ["In addition to advertising worldwide on the blockchain to buy or sell VerusIDs, you can also make an exchange with the Marketplace without ever posting the offer on the blockchain until it is agreed and signed by all parties. Combine that with zero knowledge transactions, and it's a great way to transact worldwide, escrow-free in private.:::tip Use Case Example\nA business sells subscriptions for exclusive content. They make VerusIDs with contracts that give access to the exclusive content. They now create a transaction that would pay for the VerusID. They give the transaction to the buyer who then executes it. The buyer now owns the VerusID that gives access to the exclusive content.\n:::Now imagine how you can do this for a VerusID that can be any kind of asset. A new way for everyone to engage in peer-to-peer, escrow-free commerce has arrived.### RPC APIs\n| API | What it does | \n| :- |:-----|\n| makeoffer | define what you offer and for what. What you offer can be funds, VerusIDs, or when PBaaS goes live even other currencies. What you want in return can also be funds, VerusIDs or currencies. In exchange for what you offer, you also define what VerusID or how much you want for it and in what currency | \n| takeoffer | take a specific offer in exchange for its request | \n| getoffers | specify which VerusID or currency you want to see offers for or on offer, and it returns all offers (buy and sell) in all currencies, sorted by highest to lowest price | \n| closeoffers | close expired or unexpired offers which you opened with makeoffer |\n| listopenoffers | list all offers that you have opened with makeoffer |## Privacy\nA VerusID can contain a pointer to a ``z-address``. These are private addresses that can not be checked on the public blockchain. Attach any z-address to a VerusID.", "./raw_text_input_docs/README_addresses.md"], ["## Signatures\nCreate unforgable, verifiable signatures with VerusID. Sign files, hashes and messages. Use the protocol to verify those signatures for free.\n\n## Multisig\nMultiple VerusIDs can have spending or signing ability of one VerusID. This means that multiple organizations or people can manage a VerusID.\n\n## Messages\nSend private messages to VerusIDs.", "./raw_text_input_docs/README_addresses.md"], ["# Introduction\nIn Verus, there are two kinds of addresses: **public** and **private**. This doc guides you through understanding these address types and how they're involved in transactions.Understanding the distinctions between public and private addresses in the Verus ecosystem is crucial for making informed decisions about transaction privacy.## Public addresses\nYou can use the following public address types to send and receive funds.| Address type | Details | \n| :-----| :------ | \n| **R-address** | A R-address is a public cryptocurrency address derived from a private key. The private key is essential for accessing and controlling the R-address.| \n| [**VerusID@**](/verusid/) | A VerusID is a public friendly-name cryptocurrency address. It is controlled by a primary address, which is a R-address.| \n| **i-address** | An i-address is a public cryptocurrency address derived from a VerusID.|Public addresses and their transactions are visible on blockchain explorers because they're recorded on the public ledger, unlike private z-addresses.## Private addresses\nYou can use the following private address type for confidential exchange of funds and data.| Address type | Details | \n| :-----| :------ | \n| **z-address** | A z-address is a private cryptocurrency address derived from a private key. The private key is essential for accessing and controlling the z-address. Only the person who has the private key can spend and see its balance. Or provide visibility in the balance through a ``viewing key``. |Balances and transactions associated with private addresses are confidential. They do not appear on the blockchain or any explorer.\u2139\ufe0f A VerusID can contain a pointer to a z-address. You can then send coins to ``VerusID@:private``.", "./raw_text_input_docs/README.md"], ["::: warning Only native currencies\nZ-addresses can only contain the native blockchain currency. Simple token currencies or basket currencies can **not** be held in a z-address.\n:::\n\n# Transaction scenarios\n\n## Public-to-public\n``VerusID@``, ``R-address``, or ``i-address`` \u27a1\ufe0f ``VerusID@``, ``R-address``, or ``i-address``\n\n- Sender's address and the amount sent are visible \n- Recipient's address(es) and received amount(s) are visible\n   \n## Public-to-private\n``VerusID@``, ``R-address``, or ``i-address`` \u27a1\ufe0f ``z-address`` or ``VerusID@:private``\n\n- Sender's address and the amount sent are visible\n- Recipient's address(es) and received amount(s) are **not** visible\n\n*Note: Correlating transactions by time and amounts between public and private addresses is still possible, potentially linking two public addresses based on transaction patterns.*\n\n## Private-to-public\n``z-address`` \u27a1\ufe0f ``VerusID@``, ``R-address``, or ``i-address``\n\n- Sender's address and the amount sent are **not** visible \n- Recipient's address(es) and received amount(s) are visible\n\n*Note: Like public-to-private transactions, there remains a possibility of correlating transactions based on timing and value, potentially linking two public addresses.*\n\n## Private-to-private\n``z-address`` \u27a1\ufe0f ``z-address`` or ``VerusID@:private``\n\n- Sender's address and the amount sent are **not** visible \n- Recipient's address(es) and received amount(s) are **not** visible", "./raw_text_input_docs/README.md"], ["# Setup verus-cli\n\n### [Download verus-cli for Windows, macOS and Linux](https://verus.io/wallet/)\n\nThe CLI (command-line-interface) wallet is an alternative to Verus Desktop, and is used through the terminal.\n\nIn the packaged file you find ``verusd``, ``verus``, ``fetch-bootstrap``, ``fetch-params`` and accompanying text files to [verify](https://verus.io/signatures) signatures.\n\nRun ``verusd`` to start the blockchain. The ``d`` stands for daemon. A daemon is a program that runs as a background process.\n\nRun ``verus`` to interact with the blockchain.\n\n::: warning New System \nRun ``fetch-params`` before using ``verusd`` when you are running a new system. It downloads the zcash parameters needed to get started.\n:::\n\n::: tip Bootstrap Blockchain\nDownloading the blockchain can take up a long time, to speed it up you can bootstrap the blockchain. Run ``fetch-bootstrap``.\n:::\n\nExtract the packaged file on your computer, preferably where you can find it back easily.\n\n## Use Commands\nIn your terminal, go into the directory where you extracted verus-cli.\n\n### Start Verus Blockchain\n\n``` \n./verusd\n```\n\n### Start Testnet Blockchain\n``` \n./verusd -chain=VRSCTEST\n```", "./raw_text_input_docs/setup-cli.md"], ["# Defining a PBaaS-blockchain::: warning Information here is not complete. Need help setting up a blockchain launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord) \n:::There are many options to choose from when defining your blockchain. Combine them in the ``options`` parameter for different use cases.| # | Options | Details |\n| - |:-----|:-----|\n| 1 | OPTION_FRACTIONAL | Allows reserve conversion using base calculations when set |\n| 2 | OPTION_ID_ISSUANCE | Clear is permissionless, if set, IDs may only be created by controlling ID |\n| 4 | OPTION_ID_STAKING | All IDs on chain stake equally, rather than value-based staking |\n| 8 | OPTION_ID_REFERRALS | If set, this chain supports referrals |\n| 16 | OPTION_ID_REFERRALREQUIRED | If set, this chain requires referrals |\n| 32 | OPTION_TOKEN | If set, this is a token, not a native currency |\n| 64 | OPTION_SINGLECURRENCY | For PBaaS chains or gateways to potentially restrict to single currency |\n| 128 | OPTION_GATEWAY | If set, this routes external currencies |\n| 256 | OPTION_PBAAS | This is a PBaaS chain definition|\n| 512 | OPTION_GATEWAY_CONVERTER | This means that for a specific PBaaS gateway, this is the default converter and will publish prices |\n| 1024 | OPTION_GATEWAY_NAMECONTROLLER | When not set on a gateway, top level ID and currency registration happen on launch chain |\n| 2048 | OPTION_NFT_TOKEN | Single satoshi NFT token, tokenizes control over the root ID |## VerusID Namespace\nTo create a blockchain of a specific name, you need a VerusID of the same name. The controller of this VerusID is the only one who can create a blockchain of that name, and they can only do so once.## Examples of blockchain launches", "./raw_text_input_docs/define-pbaas.md"], ["::: danger Limit for all currency supplies (10 billion)\n10 billion (-1 SATOSHI) with 8 decimal places (9999999999.99999999) is now the recommended absolute limit for all currency supplies, including over time with conversions and extended tail emissions for blockchains.\n:::### Blockchain 1``` json\n./verus -chain=VRSCTEST definecurrency '{\n  \"name\":\"PBaaSChain\",\n  \"options\":264,\n  \"currencies\":[\"VRSCTEST\"],\n  \"conversions\":[1],\n  \"eras\":[\n    {\n      \"reward\":1200000000,\n      \"decay\":0,\n      \"halving\":0,\n      \"eraend\":0\n    }\n  ],\n  \"notaries\":[\n    \"Notary1@\",\n    \"Notary2@\",\n    \"Notary3@\"\n  ],\n  \"minnotariesconfirm\":2,\n  \"nodes\":[\n    {\n      \"networkaddress\":\"111.111.111.111:10000\",\n      \"nodeidentity\":\"Node1@\"\n    },\n    {\n      \"networkaddress\":\"111.111.111.112:10000\",\n      \"nodeidentity\":\"Node2@\"\n    }\n  ],\n  \"gatewayconvertername\":\"Bridge\",\n  \"gatewayconverterissuance\":1000000\n  }' \n  '{\n    \"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\n    \"initialcontributions\":[371747.20398827,0,1000000],\n    \"initialsupply\":3000000\n  }'\n```### Blockchain 2", "./raw_text_input_docs/define-pbaas.md"], ["``` json\n./verus -chain=vrsctest definecurrency '{\n  \"name\":\"v2\",\n  \"options\":264,\n  \"currencies\":[\"vrsctest\"],\n  \"preallocations\":[\n    {\n      \"allnotary1@\":800000\n    }\n  ],\n  \"conversions\":[1],\n  \"eras\":[\n    {\n      \"reward\":76800000000,\n      \"decay\":0,\n      \"halving\":525000,\n      \"eraend\":0\n    }\n  ],\n  \"blocktime\":10,\n  \"idregistrationfees\":25,\n  \"notaries\":[\n    \"allnotary1@\",\n    \"allnotary2@\",\n    \"allnotary3@\"\n    ],\n  \"startblock\":9500,\n  \"minnotariesconfirm\":2,\n  \"nodes\":[\n    {\n      \"networkaddress\":\"45.76.168.133:20022\",\n      \"nodeidentity\": \"allnotary1@\"\n    },\n    {\n      \"networkaddress\":\"149.28.95.28:20022\",\n      \"nodeidentity\":\"allnotary2@\"\n    },\n    {\n      \"networkaddress\":\"45.63.58.171:20022\",\n      \"nodeidentity\":\"allnotary3@\"\n    }\n  ],\n  \"gatewayconvertername\":\"Bridge\",\n  \"gatewayconverterissuance\":800000\n  }' \n  '{\n    \"currencies\":[\"VRSCTEST\",\"v2\"],\n    \"initialcontributions\":[2500,0],\n    \"initialsupply\":800000\n  }'\n```\n\n::: warning Need help setting up a blockchain launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::", "./raw_text_input_docs/define-pbaas.md"], ["# Launch currencies::: warning Need help setting up a currency launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::![image-currencies-launching](/images/launching-currencies.png)This is what a (simple) currency definition looks like:``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```The above command is processed into a HEX, and that HEX is broadcasted to the network. Simultaneously the fees are taken from the rootID (and distributed among the block producers) and after waiting a minimum period of 20 blocks the currency is launched and ready to be used by the worldwide network.## VerusID namespace\nTo launch a currency on Verus (and any other PBaaS-chain) a namespace is needed. That namespace is a VerusID. The namespace is the name of the currency (e.g. ``MyBrand@``). That namespace can also have subIDs (e.g. ``product.MyBrand@``, ``user.MyBrand@``). The controller of this VerusID is the only one who can create a currency of that name, and they can only do so once.On Verus a VerusID registration costs between 20 and 100 VRSC, and the launch of a currency costs 200 VRSC. These costs are always paid in the chain\u2019s native coin (to the worldwide miners and stakers). On other PBaaS-chains these costs can differ since the chain launcher can define its own costs for VerusID registrations and currency launches.## Defining options\nTo define a currency, choose options. Then combine these options to whatever the currency needs to be. Just add the numbers together in the currency definition. The currency options are listed below.", "./raw_text_input_docs/launch-currency.md"], ["| Options # | Details |\n| -: |:-----|\n| 1 | The currency has reserves, and can be converted to and from the reserves (option 32 needs to be added). Can have one currency as its reserves, or multiple with up to 10 currencies. This is a \u201cBasket currency\u201d \u2014 a currency with a basket of reserves. Such a currency can be launched centralized or decentralized. |\n| 2 | Only the controlling VerusID (the namespace of the currency, the rootID) can create subIDs. |\n| 8 | Referrals and discounts are enabled for subID creation. |\n| 16 | Referrals are required for subID creation. |\n| 32 | The currency is a simple token currency without any reserves. Such a currency can be launched centralized or decentralized. This option is also used for [Ethereum ERC-20 mapped tokens](/currencies/mapping-1:1-eth). |\n| 2048 | A single satoshi (0.00000001) NFT token is created & has tokenized control of the root VerusID. Which means you can send the single satoshi token to other addresses and then they have control of the root VerusID. |Let\u2019s give some examples of combined options:\n- ``\"options\":33`` \u2014 this launches a basket currency. It is options 1 + 32 combined.\n- ``\"options\":2080`` \u2014 this launches a single satoshi token that has control of the root VerusID. It is options 32 + 2048 combined.\n- ``\"options\":35`` \u2014 this launches a basket currency, and only the rootID can create subIDs. It is options 1 + 2 + 32 combined.## Defining parameters\nNext up are the parameters. Choose the parameters wisely to launch a currency that suits any need. Not all parameters are needed or combinable. There are many to go through, so let\u2019s start.### **\"proofprotocol\"**\nThis parameter defines, among others, if the currency is centralized or decentralized. You can choose 1,2 or 3.", "./raw_text_input_docs/launch-currency.md"], ["``1`` is default, which launches a decentralized currency (no need to include this parameter when defining such a currency). When subIDs are created with this option, the registration fees are burned.``2`` is for a centralized currency. If it\u2019s a basket currency the rootID can mint and burn supply while automatically lowering and raising the reserve ratio (also anyone can burn supply without lowering the reserve ratio). Or when it\u2019s a simple token currency they can just mint and burn supply. The subID registration fees go to the rootID.``3`` is for Ethereum ERC-20 mapped tokens. [Read more](/currencies/mapping-1:1-eth)Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\n\u261d\ufe0f A simple token currency called MyBrand, centralized (the controller of the rootID can mint and burn), and has a preallocation of 100 tokens to Klaus@.### **\"currencies\"**\nHere you put the names of the currencies (or just one \u2014 it must have VRSC when launched on Verus) that will be in the reserves when it\u2019s a basket currency (`options:33`).Or when it\u2019s a simple token currency (`options:32`), what people convert during the preconversion timeframe will go to the rootID of the currency, as a funding mechanism. In the case of a simple token currency, combine it with `\"conversions\"` to determine the preconversion price.Use up to 10 currencies for this parameter.", "./raw_text_input_docs/launch-currency.md"], ["Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CommunityX\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"MyBrand\",\"InfluencerCoin\"], \n \"minpreconversion\":[10,50,10],\n \"initialsupply\":100\n}'\n```\n\u261d\ufe0f A basket currency called CommunityX. It needs to get a minimum of 10 VRSCTEST, 50 MyBrand and 10 InfluencerCoin into its reserves within the preconversion time frame to be launched. The initial supply of 100 CommunityX will be distributed among the preconverters.### **\"conversions\"**\nUse this parameter when launching a simple token currency. Together with `\"currencies\"`, it can be used as a funding mechanism for the rootID. This parameter is for the preconversion price. So when doing `\"conversions\":[0.1]`, it means that for every VRSC the preconverter receives 10 CURRENCY after launch. The converted VRSC goes into the rootID.People can preconvert to this currency within the preconversion time frame. Define a `\"startblock\"`, or let the default and minimum time frame play out, which is 20 blocks.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CoolBrand\",\n \"options\":32,\n \"currencies\":[\"vrsctest\"],\n \"conversions\":[0.1],\n \"minpreconversion\":[1000]\n}'\n```\n\u261d\ufe0f This simple token currency is called CoolBrand. During the preconversion time frame people need to convert 1000 VRSCTEST to the rootID. In exchange for that they receive 10.000 CoolBrand. If this minimum amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back.### **\"minpreconversion\"**\nUse this parameter to set a minimum amount of preconversions. The minimum amount of preconversions needs to be met or the currency will not launch and everyone gets their conversions returned, minus the transaction and conversion fees. It works both with basket currencies and simple token currencies.", "./raw_text_input_docs/launch-currency.md"], ["There is a 0.025% fee taken when preconverting. Take this into consideration when trying to meet the minimum amount of preconversions.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CompanyX\",\n \"options\":32,\n \"currencies\":[\"vrsctest\"],\n \"conversions\":[2],\n \"minpreconversion\":[500]\n}'\n```\n\u261d\ufe0f This simple token currency is called CompanyX. During the preconversion time frame people need to convert at least 500 VRSCTEST to the rootID. In exchange for that they receive 250 CompanyX, or more when more is converted. If this minimum amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back.### **\"maxpreconversion\"**\nUse this parameter to set a maximum amount of preconversions. During the preconversion time frame the amount set can not be exceeded. Everything above this amount will be automatically refunded after the currency is launched.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CoinCommunity\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"maxpreconversion\":[100], \n \"initialsupply\":100\n}'\n```\n\u261d\ufe0f This is a basket currency called CoinCommunity. During the preconversion time frame people can convert VRSCTEST into its reserves for 100 CoinCommunity in return. During the preconversion time frame there can not be more than 100 VRSCTEST converted into its reserves. Whatever is preconverted more will be returned.### **\"initialcontributions\"**\nThe rootID can contribute some or all of the minimum preconversions directly as part of the currency definition. Use this parameter to make an initial contribution to either the reserves when it\u2019s a basket currency (`options:33`), or to the rootID when it\u2019s a simple token currency (`options:32`).", "./raw_text_input_docs/launch-currency.md"], ["The funds to initially contribute need to be in the rootID when defining the currency. After the preconversion time frame is over and the currency launched, the rootID has received an amount of the launched currency.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CommunityBasket\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"CoinCommunity\"], \n \"initialcontributions\":[10,200], \n \"initialsupply\":100, \n \"preallocations\":[{\"Jane@\":100},{\"John@\":50}]\n}'\n```\n\u261d\ufe0f This is a basket currency called CommunityBasket. The launcher of the currency wanted to make initial contributions to its reserves. At the moment of broadcasting the currency to the network, there needed to be 210 VRSCTEST and 200 CoinCommunity in the rootID. The initial supply of 100 went to the rootID (if there weren\u2019t any more preconverters). At the same time of the launch, 100 CoinCommunity was minted into Jane@ and 50 into John@, this lowered the reserve ratio of the currency.### **\"initialsupply\"**\nA required parameter for basket currencies (`options:33`). This parameter does not work with simple token currencies. This is the initial supply during the preconversion time frame, before the currency is launched. People preconverting into the reserves receive from this initial supply.\u26a0\ufe0f IMPORTANT: `\"initialcontributions\"` and/or preconversions are required, otherwise the initial supply can not go anywhere and the currency is bricked.Immediately after the currency is launched, the supply can be larger due to `\"preallocations\"`.", "./raw_text_input_docs/launch-currency.md"], ["Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"SocialBrand\", \n \"options\":33, \"currencies\":[\"vrsctest\"], \n \"initialsupply\":500, \n \"preallocations\":[{\"Max@\":1000}]\n}'\n```\n\u261d\ufe0f This is a basket currency called SocialBrand. People can preconvert VRSCTEST into its reserves and in return they get 500 SocialBrand distributed among them. Immediately after launch Max@ receives 1000 SocialBrand, lowering the reserve ratio of the currency.### **\"preallocations\"**\nUse this parameter to receive a chosen amount of funds after the preconversion time frame has passed and the currency is launched. Funds can be directed to VerusIDs and R-addresses. Works with simple token currencies and basket currencies.When using this parameter with basket currencies, after the preconversion time frame has passed and the currency is launched, the reserve ratio is lowered. This is because new currency has been minted after the initial supply (`\"initialsupply\"`) is distributed, and nothing was new added into the reserves.::: danger Limit for all currency supplies (10 billion)\n10 billion (minus 1 satoshi) with 8 decimal places (9999999999.99999999) is now the recommended absolute limit for all currency supplies, including over time with conversions and extended tail emissions for blockchains.\n:::### **\"prelaunchcarveout\"**\nOnly works with basket currencies (`options:33`). Use this to redirect a percentage of preconverted reserves to the rootID.\nAfter the preconversion time frame has passed and the currency is launched, a percentage of the reserves is taken and redirected to the rootID. This lowers the reserve ratio, making the currency more volatile.", "./raw_text_input_docs/launch-currency.md"], ["Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"BusinessBrand\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"initialsupply\":100, \n \"prelaunchcarveout\":0.1\n}'\n```\n\u261d\ufe0f This is a basket currency called BusinessBrand. People can preconvert VRSCTEST into its reserves in return for 100 BusinessBrand distributed among them. When the currency is launched, 10% VRSCTEST is taken out of the reserves, into the rootID. This lowers the reserve ratio by 10%.### **\"prelaunchdiscount\"**\nOnly works with basket currencies (`options:33`). Use this to give people a discount during the preconversion time frame. After the preconversion time frame and the currency is launched, the conversion price will be higher, depending on what percentage the discount was.When using this parameter, after the currency is launched, the reserve ratio will be lowered by the discounted percentage.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"DiscountBrand\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"initialsupply\":100, \n \"prelaunchdiscount\":0.5\n}'\n```\n\u261d\ufe0f This is a basket currency called DiscountBrand. People can preconvert VRSCTEST into its reserves in return for 100 DiscountBrand distributed among them. Immediately after the launch of the currency, when people want to convert, the price is 50% higher. Also, the reserve ratio is 50% lower because of the prelaunchdiscount.### **\"weights\"**\nOnly works with basket currencies (`options:33`). Use this to change the respective weights of the reserves in a basket currency. The total of all weights must equal 1. With a minimum of 0.1, since there can\u2019t be more than 10 reserve currencies in a basket currency.", "./raw_text_input_docs/launch-currency.md"], ["Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBusiness\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"BusinessBrand\",\"DiscountBrand\"], \n \"initialsupply\":100, \n \"weights\":[0.5,0.25,0.25]\n}'\n```\n\u261d\ufe0f This is a basket currency called MyBusiness. During the preconversion time frame there are various currencies that can be converted into its reserves. They have different weights to them. 0.5 for VRSCTEST, 0.25 for both BusinessBrand and DiscountBrand.### **\"startblock\"**\nUse this parameter to define the block height when the currency should be launched. There is a preconversion time frame before the currency is launched. When omitting this parameter it uses a 20 block preconversion time frame before the currency is launched.The preconversion time frame is always 20 blocks, this can not be less.\u26a0\ufe0f IMPORTANT: Fill in the absolute block height you want the currency to launch on.### **\"endblock\"**\nEndblock can not be defined on basket currencies. It does nothing. It could be set as a signal to software that might use the basket currency.It can be set on centralized (`proofprotcol:2`) simple token currencies. When the endblock is reached, it turns the centralized currency into a decentralized one (no more minting and burning capabilities.)### **\"idregistrationfees\"**\nUse this parameter to change the costs of registering subIDs under the rootID. The default registration fee is `100`.\nWhen it\u2019s a decentralized currency the fees are burned (and the basket currency becomes worth more because there is less supply, yet the reserves stay the same), when it\u2019s centralized the fees go to the rootID.", "./raw_text_input_docs/launch-currency.md"], ["Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"InternetCommunity\", \n \"options\":41, \n \"currencies\":[\"vrsctest\"],\n \"initialcontributions\":[25],\n \"initialsupply\":5000, \n \"idregistrationfees\":1\n}'\n```\n\u261d\ufe0f The is a basket currency called InternetCommunity with subID referrals enabled. The launcher of the currency wanted to make initial contributions to its reserves. There needs to be 225.0002 VRSCTEST in the rootID at the moment of broadcasting the currency to the network (currency launch fee + initial contributions + txfees). The initial supply of 5000 went to the rootID (if there weren\u2019t any more preconverters). The base fee to register a subID is 1 InternetCommunity.### **\"idreferrallevels\"**\n![image-referralsID](/images/referralsID2.png)\nUse this parameter to change the levels of referrals used when registering subIDs. The image above shows the division and distribution of subID registration fees, depending on the chosen level. Minimum is 0 levels, maximum is 5. The default is `3` levels.To enable referrals, add `\"options\":8` to the currency definition.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"PremiumAccess\", \n \"options\":40, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":2000}],\n \"idregistrationfees\":300,\n \"idreferrallevels\":1\n}'\n```\n\u261d\ufe0f This is a centralized simple token currency called PremiumAccess. The owner of the rootID can mint and burn tokens at will. It has referrals enabled. When the currency is launched 2000 PremiumAccess go to the Klaus@ VerusID. It costs a 300 PremiumAccess fee to register a subID. These fees go to the rootID because it is a centralized token currency. When someone registers a subID using a referral they pay 200 of which 100 goes to the referred subID, and 100 to the rootID.", "./raw_text_input_docs/launch-currency.md"], ["### **\"nativecurrencyid\"**\nUse this parameter for mapped ERC-20 tokens. The parameter includes the Ethereum contract address for the ERC-20. [Read more](/currencies/mapping-1:1-eth)\n\n::: warning Need help setting up a currency launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::\n\n## How to launch\nNow you know how to create a currency definition with all its options and parameters. Next up: how to actually use the definition to launch a currency.\n\nHere we use the command-line interface. If you want to use the built-in terminal from Verus Desktop, just replace ``./verus -chain=VRSCTEST`` with ``run``.\n\n::: tip Use Verus Testnet first! \ud83d\udc77\nBefore launching your currency or token on Verus (or any other PBaaS-chain), it is highly recommended to try it out on testnet first. \n:::\n\nLet's use this example definition to launch the currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\",\n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Influencer@\":100}]\n}'\n```\n\nEntering the above command into the command-line interface wallet gives a `HEX` value as output. Take that HEX and do the following command below. \u26a0\ufe0f IMPORTANT: make sure there are enough funds in the rootID for the currency fee (200.0002 VRSC) and the initial contribution (when in parameters).\n\n``` json\n./verus -chain=VRSCTEST sendrawtransaction \"HEX\"\n```\n\nAfter doing the command above the currency has started, the funds from the rootID are taken, and it takes a minimum of 20 blocks (or startblock) to actually launch it (and if all preconversion goals are met).\n\nDuring the preconversion time frame and after the launch you can lookup all kinds of information on the currency with the following command:\n\n``` json\n./verus -chain=VRSCTEST getcurrency \"MyBrand\"\n```", "./raw_text_input_docs/launch-currency.md"], ["# Export currency to Ethereum (as ERC-20)\n\nAny currency on Verus can be exported to Ethereum as an ERC-20. The currency can then be used in the complete Ethereum ecosystem, and on the Verus network. Sending to and from Verus and Ethereum couldn't be easier. [More on the Verus-Ethereum Bridge.](/eth-bridge/)\n\n::: tip \u2194\ufe0f Verus-Ethereum Bridge \ud83d\udc68\u200d\ud83d\udd27 For Testnet!\n[\ud83d\udc49 Access the Verus-Ethereum Testnet Bridge](https://ethbridge.verustest.net/) (\u26a0\ufe0f Goerli testnet)\n:::\n\n::: tip \u2194\ufe0f Verus-Ethereum Bridge \u2705 For Mainnet!\n[\ud83d\udc49 Access the Verus-Ethereum Mainnet Bridge](https://eth.verusbridge.io)\n:::\n\n### Exporting the currency\nNow, let\u2019s export a currency from Verus to Ethereum as an ERC-20 over the non-custodial bridge. We must have enough funds to pay for the export.\n\nThe command to export a currency to Ethereum as an ERC-20:\n\n``` json\n./verus -chain=VRSCTEST sendcurrency \"myVerusID@\" '[{\n  \"address\":\"0x85a7dE2278E52327471e174AeeB280cdFdC6A68a\", \n  \"currency\":\"myCurrency\", \n  \"amount\":0, \n  \"exportto\":\"veth\", \n  \"exportcurrency\":true, \n  \"feecurrency\":\"veth\"\n}]'\n```\n\nLet's break the command down with what you can change.\n\n**``myVerusID@``** is the from- and change-address. Can be a VerusID, R-address or i-address. The fee to pay for the export comes from here, and if you paid too much fees the rest will be returned here.\n\n**``address``** You can fill in any ETH-address here, it is actually not important what is here.\n\n**``currency``** is the name of the currency you wish to export as an ERC-20. E.g. `MyCurrency`, `MyCurrency.vETH`.\n\n### Wait for notarization\n\nAfter the bridge has been notarized to the blockheight where you have exported the currency, you can choose it from the token dropdown on the [Bridge website mainnet](https://eth.verusbridge.io) or [Bridge website Goerli testnet](https://ethbridge.verustest.net/)", "./raw_text_input_docs/export-to-eth.md"], ["# Introduction\nLaunch blockchains that are \u2705 **fully interoperable**, \u2705 **customizable** and \u2705 **independent**. Each blockchain launched has the following L1 features.| Feature | Details | \n| :-----| :------ | \n| [L1 Multi-currency](/currencies/) | Consensus layer basket currencies (e.g. liquidity pools) & simple token currencies, decentralized crowdfund mechanisms |\n| [L1 DeFi](/sendcurrency/) | Consensus layer AMMs, MEV-free, no front/back-running, solving all conversions simultaneously within a block & fully decentralized marketplace | \n| [L1 VerusID](/verusid/) | Consensus layer self-sovereign identities, namespace for currencies, tokens & PBaaS-blockchains, friendly-name addresses, revocable, recoverable, NFTs, profiles, can be bound to any type of data | \n| L1 Privacy | Consensus layer zk-SNARKs privacy technology |\n| 51% hash attack resistant | 50% proof-of-work, 50% proof-of-stake. [Read the paper here.](https://verus.io/papers/VerusPoP.pdf) |\n| 75 - 800 TPS | High performance blockchain, adjustable block times 10 secs - 2 mins |\n| Scaling | Scale out by deploying more interoperable, interconnected PBaaS-chains |It costs 10,000 VRSC to launch a PBaaS-chain. 5000 goes to the Verus block producers, 5000 goes to the block producers of the newly launched chain.## Launch without programming needed\nEnables any user with VerusID to create their own token currency or even full fledged, multi-currency, VerusID-issuing 50% PoW/50% PoS, [51% hash attack resistant](https://verus.io/papers/VerusPoP.pdf) blockchain that can send and receive from the Verus chain which launched it.", "./raw_text_input_docs/README_blockchains.md"], ["All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, VerusID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.## DeFi liquidity pools and fractional currency baskets\nAny VerusID owner may define basket currencies, with one or more reserves backing the currency, at a fractional percentage ranging from 5% to 100% backing.The Verus DeFi protocol ensures that all currency conversions that use a particular basket currency, and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi basket currencies directly into the consensus and cross-chain bridge protocols.## Bridge converter launches\nLaunch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain.Bridge converter currencies have the same flexibility as other 100% asset backed or partially asset backed basket currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross-chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.", "./raw_text_input_docs/README_blockchains.md"], ["## Crowdfunding currency and blockchain launches\nSet required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees.\n\nThe launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n\n## Interoperable, multichain network\nThe Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network.\n\nNotary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access.\n\nThere is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.", "./raw_text_input_docs/README_blockchains.md"], ["# Overview\n\n| Guides | \n| :----------------------- |\n| [Set up verus-cli for beginners](/guides/setup-cli/) | \n| [Set up Verus Vault (flags)](/guides/setup-vault/) | \n| [Set up Verus Vault (easy)](/guides/setup-vault-v2/) | \n| [Divert staking rewards to different wallet](/guides/divert-rewards/)   |\n| [Claim refunds from Verus-Ethereum Bridge](/guides/refunds/) |\n| [Get Verus address](/guides/getwallet/)", "./raw_text_input_docs/README_guides.md"], ["# Divert staking rewards to different wallet\n![image-divert](/images/divert-stakes.png)\nIf you are staking with funds on a VerusID, and that VerusID is locked with Vault, yet you want to spend your won stakes, this might be for you. Let's explain how you can divert your won stakes to a different wallet with Verus Desktop.\n\nWe have two devices with two different wallets:\n- Your staking device\n- Your hot wallet device\n\n### Hot wallet\nThe hot wallet is the device you want your stakes to arrive on. On the hot wallet we need to lookup the ``pubkey`` for the address you want your won stakes to arrive.\n\nGo to the ``Wallet-tab``, click ``receive`` under Transparent Balance. Then click the three-dots next to the address you want to use. Click ``Copy public key`` as seen in the image below. Paste and save this somewhere, we will need it later.\n\n![image-pubkey](/images/copy-pubkey.png)\n\n### Staking device\nThis device is staking happily, and your funds are secured with the Vault ([read here how to set up](/guides/setup-vault/)). Let's make sure your won stakes are sent to your hot wallet device.\n\nGo to ``settings`` (the cogwheel top right corner), then select ``Profile Settings`` (default). Here you see the option ``Custom native mode launch options``. Select ``Verus``.\n\nFirst copy and paste the code from below into the textfield and click ``Add launch option``.\n\n```\nminetolocalwallet=0\n```\n\nNext, copy and paste the code below. Change ``xxx`` to the ``public key`` we have from the hot wallet. Click ``Add launch option``.\n```\npubkey=xxx\n```\n\nAt last, click the ``Save Changes`` button. **Don't forget this step!** Now close the wallet and open it again. Congratulations, your stakes will now be diverted to your hot wallet.", "./raw_text_input_docs/divert-rewards.md"], ["# Introduction\nVerus DeFi is incredibly simple, low-cost, MEV-resistant and without any middleman. You can convert into a currency that has reserves (you are now \"providing liquidity\"), and you can convert out of the currency again, back into its reserves. Furthermore you can convert from reserve to reserve. [Learn more about basket currencies (DeFi AMMs).](/currencies/#basket-currencies)| Verus DeFi | Details | \n| :-----| :------ | \n| \u2705 **MEV-resistant** | Because of protocol design there is no front/back running. Every participant gets the same, fair conversion rate in one or more blocks. | \n| \u2705 **Protocol level security** | All DeFi operations take place on the consensus layer of the protocol, and are verified by miners and stakers. There is no smart contract risk. | \n| \u2705 **Low fees** | Protocol conversion fees are as low as 0.025%, or as high as 0.05%. |Two conversion types:| Conversion type | Fee | Fee goes to |\n| :-----| :------ | :-------- |\n| Basket currency \u2194\ufe0f reserve | 0.025% | 0.0125% added to reserves of the basket currency, 0.0125% to the block reward for miners and stakers | \n| Reserve \u2194\ufe0f reserve | 0.05% | 0.025% added to reserves of the basket currency, 0.025% to the block reward for miners and stakers |## L1 DeFi\nVerus is a ``UTXO-based`` blockchain with ``smart transactions``. All smart capabilities are implemented on the protocol level. This has many advantages over blockchain projects that use layer two solutions. [Read \"Smart Transactions vs. Smart Contracts\"](https://medium.com/veruscoin/verus-smart-transactions-vs-smart-contracts-f98079c00ed0)Advantages of DeFi at the protocol level:* Increased security at the application level - Verus DeFi is not implemented by having many smart contract authors creating smart contracts on top of the protocol, so there can be no exploits by searching for unintended \"cracks\" in the seams between contracts.", "./raw_text_input_docs/README_sendcurrency.md"], ["* Increased security at the protocol level - Verus DeFi is implemented in the protocol as part of the consensus, following the fundamental systems design principle which says that the most important security layers should be located in the system/protocol itself.\n\n## MEV-resistance\n\nThe Verus protocol solves all transactions ``simultaneously`` within a block (as opposed to serially, in order, as is done on Ethereum and all other systems which use the VM-model). This has important implications for security, fairness, and efficiency:\n\n* Elimination of front-running, back-running and sandwich attacks.\n\n* Enhancing system-wide liquidity, thus reducing slippage, as conversions going to and from any given currency within the same block are offset against each other.\n\n* Providing all users converting to and from a currency within the same block the same fair price with no spread.", "./raw_text_input_docs/README_sendcurrency.md"], ["# Set up Verus Vault in Verus Desktop (easy method)\n![image-vaulteasy](/images/lockfunds2.png)\nVerus Vault is not yet accessible with clickable interfaces. You can still set up Vault in Verus Desktop. Here's how.What do you need:\n- Latest version Verus Desktop [download here](https://verus.io/wallet/desktop)\n- VerusID (on the Verus mainchain, or when PBaaS is live on any other chain)With Verus Vault you can lock funds in your VerusID. When your funds are locked in the Vault you can not spend them anymore, they cannot leave the VerusID. You can still always continue to stake and receive coins.You can lock a VerusID in two different ways that cannot be circumvented by anyone, except the ``revocation and recovery authorities`` together.| Lock type | How it works | \n| - |:-----|:-----|\n| TimeLock | Locks the funds and unlocks until a predetermined number of blocks have passed. | \n| DelayLock | Locks the funds and unlocks with a delay. Funds can not be spent until an unlock has been requested + a predetermined number of blocks have passed. |### Get Started\nWe need to access the commandline interface in Verus Desktop. Go to ``settings`` (the cogwheel top right corner), then select ``Coin Settings``. Here we can fill in the commands to set up your Vault.## Vault with TimeLock\n![image-timelock](/images/timeock.png)\nNow let's put a TimeLock on a VerusID. For a TimeLock you need to know the blockheight of the blockchain. Let's say the blockchain's blockheight is at ``1,000,000`` blocks. You want to lock your VerusID for 1 year. 1 year is ``508994`` blocks.::: warning Long-Term Locking\n**For long-term locking it's best to take an average block time of 62 seconds. Yet there are some variables that make it difficult to predict an exact time, leap years for example. Over long-term there are an average of 1394.5484 blocks per day.**\n:::", "./raw_text_input_docs/setup-vault-v2.md"], ["- Under ``unlockatblock`` you put ``1508994``\n- Change ``myid@`` with your own VerusIDSo in our example your VerusID is locked for approximately for 1 year. After that period of time the funds can be spent again.``` json\nrun setidentitytimelock \"myid@\" \n'{\n  \"unlockatblock\":1508994\n}'\n```You can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs.:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::## Vault with DelayLock\n![image-delaylock](/images/delaylock.png)\nNow let's put a DelayLock on a VerusID. This means that you lock the identity, and when you request the identity to be unlocked, a predetermined number of blocks have to pass before you can actually spend the funds again.### Set the DelayLock\nLet's say you want to put a DelayLock of 1 week. 1 week is ``10,080`` blocks (1440x7). This will lock the identity, and when you request an unlock, it takes 1 week (or 10,080 blocks) before the funds can be spent again.- Under ``setunlockdelay`` you put ``10080``\n- Change ``myid@`` with your own VerusID``` json\nrun setidentitytimelock \"myid@\" \n'{\n  \"setunlockdelay\":10080\n}'\n```You can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs.:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::### Request an unlock\nAbove you locked a VerusID with a DelayLock. Now let's request an unlock. When an unlock has been requested you have to wait the predetermined number of blocks before you can spend the funds again.", "./raw_text_input_docs/setup-vault-v2.md"], ["To request an unlock you need to know the blockheight of the blockchain. Under ``unlockatblock`` you can fill in whatever the current blockheight is minus 1. So if the blockheight is at 1,000,000 you can fill in ``999999`` or just ``0`` (recommended) to immediately request an unlock.\n\n``` json\nrun setidentitytimelock \"myid@\" \n'{\n  \"unlockatblock\":0\n}'\n```\n\nYou can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs.", "./raw_text_input_docs/setup-vault-v2.md"], ["# Set up multisig for VerusID\nWith multisig, you can set up a wallet that requires multiple signatures to send a transaction.\n\nFor example, you could set up a wallet that requires two out of three possible signatures before a transaction can be sent.\n\nA multisig VerusID can be up to **13 of 25 signatures**. It can also be 13 of 13; 1 of 25; and of course 1 of 1.", "./raw_text_input_docs/multisig-tutorial.md"], ["# Claim refunds on the Verus-Ethereum Bridge\nCrossing the bridge costs Ethereum gas fees. Gas fees can swing in price quite dramatically in a short period of time. It can happen that when you pay for a bridge crossing the gas fees jumped up higher than what you paid for the crossing, resulting in a refund. Learn here how you can claim your refunds back.\n\n## Ethereum to Ethereum\nWhen using the Bridge website and making a conversion that goes from Ethereum to Verus and back to Ethereum, you have signed a message that created a refund address based on your Ethereum wallet's private key.\n\nThese are the steps to claim refunds when you did an Ethereum to Ethereum transaction:\n\n### Verus Mobile\n1. Export your Ethereum private key from the wallet you did the conversion with (probably MetaMask)\n2. Import that private key into a Verus wallet. The easiest way to do that is with Verus Mobile. \n- Download Verus Mobile on the Play Store or App Store\n- Add a new profile (choose username and password)\n- Choose \"import wallet\"\n- Choose \"Enter key/seed\"\n- Enter the Ethereum private key here\n- Add the currency you want to get back (click the plus-button corner-right, \"Add PBaaS currency\" and choose the one for you)\n\n### Verus Desktop\nIf you are running native mode (full node) Verus Desktop then you can import the Ethereum's private key in this way:\n\nGo to ``Settings (gear-icon top right)``, then ``Coin Settings``, then select the Verus blockchain and type the following:\n\n```json\nrun importprivkey \"ETH_PRIVATE_KEY\" \"\" true\n```\n\n::: warning Important!\nVerus Desktop will not show any progress on the import. It will take some time for the process to finish in the background.\n:::\n\n## Verus to Ethereum\nWhen bridging with Verus Desktop from the Verus blockchain to the Ethereum blockchain you had to fill in a refund address.\n\nOn the Bridge website you can use that refund address to claim the funds back.", "./raw_text_input_docs/refunds.md"], ["# VerusPay\n\nVerusPay represents a sophisticated blockchain payment platform within the Verus ecosystem, designed to facilitate the creation, management, and processing of invoices utilizing blockchain technology. Through the introduction of the VerusPay Invoice specification in VerusPay v3, it standardizes the format for invoices, ensuring interoperability, security, and ease of use across different blockchain systems. This specification enables users to include detailed transaction information such as payment amounts, destinations, and requested currencies, as well as to handle conversions and accept payments from various [PBaaS](/blockchains/) blockchains. Notably, it supports packaging these invoices into deeplinks and QR codes, making them easily accessible and usable within the Verus Mobile wallet and potentially other applications. This functionality opens up a wide array of possibilities for merchants, developers, and users within the Verus network and beyond, offering a seamless payment experience across different blockchain ecosystems.\n\n## Usage\n\nTo use VerusPay in your own application or service, refer to the [verusid-ts-client helper library.](https://github.com/VerusCoin/verusid-ts-client/tree/master)", "./raw_text_input_docs/README_veruspay.md"], ["# Launch currency with 1:1 mapping of ERC-20When defining a currency it can be mapped to an ERC-20 1:1. The currency on Verus and the ERC-20 on Ethereum are then always interchangeable 1 to 1. [More on the Verus-Ethereum Bridge.](/eth-bridge/)::: tip \u2194\ufe0f Verus-Ethereum Bridge \ud83d\udc68\u200d\ud83d\udd27 For Testnet!\n[\ud83d\udc49 Access the Verus-Ethereum Testnet Bridge](https://ethbridge.verustest.net/) (\u26a0\ufe0f Goerli testnet)\n:::::: tip \u2194\ufe0f Verus-Ethereum Bridge \u2705 For Mainnet!\n[\ud83d\udc49 Access the Verus-Ethereum Mainnet Bridge](https://eth.verusbridge.io)\n:::::: warning Need help setting up a currency launch? \ud83e\udd14\n[\ud83d\udc49 Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::### Defining the currency\nTo create a currency of a specific name, we need a VerusID of the same name. The controller of this VerusID is the only one who can create a currency of that name, and we can only do so once.The cost for a VerusID on the Verus is ``100 VRSC`` (or 80 when using a referral). The cost to launch a currency is ``200 VRSC``. Before launching we need to have enough VRSC in the namespace VerusID.You can also use a .vETH subID. The cost to register a .vETH subID is an amount of Bridge.vETH (0.01 vETH worth).In our example we have a namespace ``MyUSDC`` with which we want to launch a currency that is mapped to the Ethereum ``USDC`` ERC-20 (on Goerli testnet, [see contract address](https://goerli.etherscan.io/address/0x98339D8C260052B7ad81c28c16C0b98420f2B46a)).Below is the command to map a currency 1:1 to an ERC-20 on Ethereum. The ``address`` field is the Ethereum smart contract address of the ERC-20 we want to map to.", "./raw_text_input_docs/mapping-1:1-eth.md"], ["``` json\n./verus -chain=VRSCTEST definecurrency '{\n  \"name\":\"MyUSDC\", \n  \"options\":32, \n  \"systemid\":\"veth\", \n  \"parent\":\"vrsctest\", \n  \"launchsystemid\":\"vrsctest\", \n  \"nativecurrencyid\":{\n    \"type\":9, \n    \"address\":\"0x98339D8C260052B7ad81c28c16C0b98420f2B46a\"\n  }, \n  \"initialsupply\":0, \n  \"proofprotocol\":3\n}'\n```\n\nAfter we put in the command, we get returned a HEX. We use this HEX to launch the currency on the network. Use the command below to launch the currency:\n\n``` json\n./verus -chain=VRSCTEST sendrawtransaction \"HEX\"\n```\n\nNow we have to wait a few blocks for the currency to be available on the network.\n\n### Export to Ethereum\nThe last step is to export the currency to Ethereum so we can see it there too. [\ud83d\udc49 Read it here](/currencies/export-to-eth/)", "./raw_text_input_docs/mapping-1:1-eth.md"], ["# Verus Proof of Power\nVerusPoP is a 50% proof-of-work, 50% proof-of-stake consensus algorithm.\n[More information on the Verus miner and staker ecosystem](/economy/).## Hybrid Consensus\nVerus Proof of Power, or VerusPoP, is a hybrid consensus algorithm which uses a statistical function that combines Proof of Work (PoW) and Proof of Stake (PoS) to validate each block by either PoW or PoS, while averaging to a target percentage of blocks being validated by each form of proof.In short, it a unique consensus mechanism with 50% of all blocks validated by miners, and the other 50% by stakers.## Attack Resistant\nTo successfully attack the Verus blockchain, more than 50% of the validation power is needed, called ``Chain Power``. A 51% attack would require a combined value of over 50% of both the chain\u2019s hashpower and its coin supply. [For technical information on VerusPoP read the whitepaper](https://verus.io/docs/VerusPoP.pdf).VerusPoP provides a decentralizing effect on the network, incentivizing holders to keep nodes online to support the network. Even if a change in network hashrate happens, the PoW/PoS ratio stays the same: 50/50%.## VerusHash 2.2\n[From the VerusPoP whitepaper](https://verus.io/docs/VerusPoP.pdf):\"VerusHash is specifically developed to deliver a competitive advantage for CPUs with GPUs. It is an exceedingly CPU-friendly long input hash function that uses the quantum-secure, short input Haraka512 V2 as its core compression algorithm. The result is the fastest known cryptocurrency hash algorithm available to modern CPUs and the only hash algorithm which enables today\u2019s CPUs and GPUs to compete on an economically comparable level.", "./raw_text_input_docs/verus-proof-of-power.md"], ["Haraka512 V2 is designed as a short input hash to exclusively consume one chunk of 512 bits and produce 256 bits of a hash result. Utilizing Haraka512 V2 VerusHash takes any length of input and produces a 256 bit hash result, unique to VerusHash, that also provides the same security guarantees as Haraka512 V2. This makes VerusHash 256 bit secure for classical computing attacks and 128 bit secure against quantum computers for pre-image and second pre-image attacks.\n\nTo understand the VerusHash algorithm it helps to first separate the digest from the core. We then consider the Haraka512 V2 core as an abstract digest function that takes 512 bits (64 bytes) of input and produces 256 bits (32 bytes) of output. Given such a digest function, referred to as haraka512256, the most concise implementation of VerusHash, in any language to-date, is the following Python code for the VerusHash hash digest as follows:\"\n\n``` py\n# verus_hash\n    def verus_hash(msg):\n      buf = [0] * 64\n      length = len(msg)\n      for i in range(0, length, 32):\n        clen = min(32, length - i)\n        buf[32:64] = [b for b in msg[i:i + clen]] + [0] * (32 - clen)\n        buf[0:32] = haraka512256(buf)\n      return bytes(buf[0:32])\n```\n\n## PoS Problems Solved\nVerus\u2019 staking algorithm solves the two major theoretical issues undermining other PoS systems, ``Nothing at Stake`` and ``Weak Subjectivity`` by leveraging its smart transaction capabilities to remove any incentive to attempt cheating, making it a losing proposition. [Read: How Verus Solved Proof of Stake\u2019s Two Biggest Problems: Nothing at Stake and Weak Subjectivity](https://medium.com/veruscoin/how-verus-solved-nothing-at-stake-and-weak-subjectivity-proof-of-stake-problems-b4dd6a85086e)", "./raw_text_input_docs/verus-proof-of-power.md"], ["# Set up Verus Vault in Verus Desktop (flags)\n![image-vaulteasy](/images/lockfunds.png)\nVerus Vault is not yet accessible with clickable interfaces. You can still set up Vault in Verus Desktop. Here's how.What do you need:\n- Latest version Verus Desktop\n- VerusID (on the Verus mainchain, or when PBaaS is live on any other chain)With Verus Vault you can lock funds in your VerusID. When your funds are locked in the Vault you can not spend them anymore, they cannot leave the VerusID. You can still always continue to stake and receive coins.You can lock a VerusID in two different ways that cannot be circumvented by anyone, except the ``revocation and recovery authorities`` together.| Lock type | How it works | \n| - |:-----|:-----|\n| TimeLock | Locks the funds and unlocks until a predetermined number of blocks have passed. | \n| DelayLock | Locks the funds and unlocks with a delay. Funds can not be spent until an unlock has been requested + a predetermined number of blocks have passed. |### Get Started\nWe need to access the commandline interface in Verus Desktop. Go to ``settings`` (the cogwheel top right corner), then select ``Coin Settings``. Here we can fill in the commands to set up your Vault.## Vault with TimeLock\n![image-timelock](/images/timeock.png)\nNow let's put a Timelock on a VerusID. For a TimeLock you need to know the blockheight of the blockchain. Let's say the blockchain's blockheight is at ``1,000,000`` blocks. You want to lock your VerusID for 1 year. 1 year is ``508994`` blocks.::: warning Long-Term Locking\n**For long-term locking it's best to take an average block time of 62 seconds. Yet there are some variables that make it difficult to predict an exact time, leap years for example. Over long-term there are an average of 1394.5484 blocks per day.**\n:::", "./raw_text_input_docs/setup-vault.md"], ["- Under ``timelock`` you put ``1508994``\n- Under ``name`` you put your VerusID name without ``@``\n- Under ``primaryaddress`` you put the R-address which is the primary address of your VerusID (you can find this address in the 'VerusID'-tab, open your VerusID and click `ID Info')So in our example your VerusID is locked for approximately for 1 year. After that period of time the funds can be spent again.``` json\nrun updateidentity \n'{\n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":0,\n  \"timelock\":1534360\n}'\n```You can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs. In the code snippet are the minimum requirements to update your VerusID with a lock.:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::## Vault with DelayLock\n![image-delaylock](/images/delaylock.png)\nNow let's put a DelayLock on a VerusID. This means that you lock the identity, and when you request the identity to be unlocked, a predetermined number of blocks have to pass before you can actually spend the funds again.### Set the DelayLock\nLet's say you want to put a Delaylock of 1 week. 1 week is ``10,080`` blocks (1440x7). This will lock the identity, and when you requested an unlock, it takes 1 week (or 10,080 blocks) before the funds can be spent again.- Under ``timelock`` you put ``10080``\n- Under ``name`` you put your VerusID name without ``@``\n- Under ``primaryaddress`` you put the R-address which is the primary address of your VerusID (you can find this address in the 'VerusID'-tab, open your VerusID and click `ID Info')", "./raw_text_input_docs/setup-vault.md"], ["``` json\nrun updateidentity \n'{ \n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":2,\n  \"timelock\":10080\n  }'\n```\n\nYou can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs. In the code snippet are the minimum requirements to update your VerusID with a lock.\n\n:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::\n\n### Request an unlock\nAbove you locked a VerusID with a DelayLock. Now let's request an unlock. When an unlock has been requested you have to wait the predetermined number of blocks before you can spend the funds again.\n\nFill in your VerusID ``name``, the ``primary address`` and set ``flags`` to 0. Now you only have to wait for your predetermined number of blocks (10,080 in our example) to run out so you can spend the funds again.\n\n``` json\nrun updateidentity \n'{ \n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":0\n  }'\n```\n\nYou can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs. In the code snippet are the minimum requirements to unlock your VerusID.", "./raw_text_input_docs/setup-vault.md"], ["# How to bridge from Ethereum to Verus\n\n## Verus Mobile\nPlease read the first parts of [this article](https://medium.com/veruscoin/how-to-participate-in-the-verus-ethereum-bridge-launch-73aeeae1c76a). You can skip the part on preconverting.\n\n## MetaMask\nPlease read the first parts of [this article](https://medium.com/veruscoin/how-to-participate-in-the-verus-ethereum-bridge-launch-73aeeae1c76a). You can skip the part on preconverting.", "./raw_text_input_docs/ethereum-to-verus.md"]]