[[["User:: Hey, I'm interested in launching a currency on Verus that has a 1:1 mapping to an ERC-20 on Ethereum. Can you walk me through how to do that?", "AI Assistant:: To define a currency on Verus with a 1:1 mapping to an ERC-20 on Ethereum, you need a VerusID with the same name as the currency you want to create. The controller of this VerusID is the only one who can create a currency of that name, and it can only be done once. You also need to have enough VRSC in the namespace VerusID to cover the launch cost. Additionally, you need to specify the Ethereum smart contract address of the ERC-20 you want to map to in the `address` field. Are you planning on launching a currency soon?", "User:: Yeah, I think so. But before I do, I want to know what the costs are going to be. What's the cost of launching a currency on Verus with a 1:1 mapping to an ERC-20 on Ethereum?", "AI Assistant:: The cost of launching a currency on Verus is 200 VRSC. Additionally, you need to have a VerusID of the same name as the currency, which costs 100 VRSC (or 80 VRSC when using a referral). Alternatively, you can use a.vETH subID, which costs an amount of Bridge.vETH (0.01 vETH worth). It's a one-time payment, and it's a relatively small cost considering the benefits of having a currency on Verus.", "User:: That makes sense. I'm still a bit unclear on the role of VerusIDs in all this. What's the purpose of a VerusID in the context of launching a currency on Verus?", "AI Assistant:: A VerusID is required to launch a currency on Verus. The controller of the VerusID with the same name as the currency is the only one who can create a currency of that name, and it can only be done once. Think of the VerusID as a unique identifier that gives you control over the currency. It's a way to prove ownership and ensure that only the intended person can create and manage the currency. Does that make sense?"], "AI Assistant", "", "N/A", [["How do I define a currency on Verus with a 1:1 mapping to an ERC-20 on Ethereum?", "To define a currency on Verus with a 1:1 mapping to an ERC-20 on Ethereum, you need a VerusID with the same name as the currency you want to create. The controller of this VerusID is the only one who can create a currency of that name, and it can only be done once. You also need to have enough VRSC in the namespace VerusID to cover the launch cost. Additionally, you need to specify the Ethereum smart contract address of the ERC-20 you want to map to in the `address` field.", "# Launch currency with 1:1 mapping of ERC-20When defining a currency it can be mapped to an ERC-20 1:1. The currency on Verus and the ERC-20 on Ethereum are then always interchangeable 1 to 1. [More on the Verus-Ethereum Bridge.](/eth-bridge/)::: tip \u2194\ufe0f Verus-Ethereum Bridge \ud83d\udc68\u200d\ud83d\udd27 For Testnet!\n[\ud83d\udc49 Access the Verus-Ethereum Testnet Bridge](https://ethbridge.verustest.net/) (\u26a0\ufe0f Goerli testnet)\n:::::: tip \u2194\ufe0f Verus-Ethereum Bridge \u2705 For Mainnet!\n[\ud83d\udc49 Access the Verus-Ethereum Mainnet Bridge](https://eth.verusbridge.io)\n:::::: warning Need help setting up a currency launch? \ud83e\udd14\n[\ud83d\udc49 Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::### Defining the currency\nTo create a currency of a specific name, we need a VerusID of the same name. The controller of this VerusID is the only one who can create a currency of that name, and we can only do so once.The cost for a VerusID on the Verus is ``100 VRSC`` (or 80 when using a referral). The cost to launch a currency is ``200 VRSC``. Before launching we need to have enough VRSC in the namespace VerusID.You can also use a .vETH subID. The cost to register a .vETH subID is an amount of Bridge.vETH (0.01 vETH worth).In our example we have a namespace ``MyUSDC`` with which we want to launch a currency that is mapped to the Ethereum ``USDC`` ERC-20 (on Goerli testnet, [see contract address](https://goerli.etherscan.io/address/0x98339D8C260052B7ad81c28c16C0b98420f2B46a)).Below is the command to map a currency 1:1 to an ERC-20 on Ethereum. The ``address`` field is the Ethereum smart contract address of the ERC-20 we want to map to.", "./raw_text_input_docs/mapping-1:1-eth.md"], ["What is the cost of launching a currency on Verus with a 1:1 mapping to an ERC-20 on Ethereum?", "The cost of launching a currency on Verus is 200 VRSC. Additionally, you need to have a VerusID of the same name as the currency, which costs 100 VRSC (or 80 VRSC when using a referral). Alternatively, you can use a.vETH subID, which costs an amount of Bridge.vETH (0.01 vETH worth).", "# Launch currency with 1:1 mapping of ERC-20When defining a currency it can be mapped to an ERC-20 1:1. The currency on Verus and the ERC-20 on Ethereum are then always interchangeable 1 to 1. [More on the Verus-Ethereum Bridge.](/eth-bridge/)::: tip \u2194\ufe0f Verus-Ethereum Bridge \ud83d\udc68\u200d\ud83d\udd27 For Testnet!\n[\ud83d\udc49 Access the Verus-Ethereum Testnet Bridge](https://ethbridge.verustest.net/) (\u26a0\ufe0f Goerli testnet)\n:::::: tip \u2194\ufe0f Verus-Ethereum Bridge \u2705 For Mainnet!\n[\ud83d\udc49 Access the Verus-Ethereum Mainnet Bridge](https://eth.verusbridge.io)\n:::::: warning Need help setting up a currency launch? \ud83e\udd14\n[\ud83d\udc49 Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::### Defining the currency\nTo create a currency of a specific name, we need a VerusID of the same name. The controller of this VerusID is the only one who can create a currency of that name, and we can only do so once.The cost for a VerusID on the Verus is ``100 VRSC`` (or 80 when using a referral). The cost to launch a currency is ``200 VRSC``. Before launching we need to have enough VRSC in the namespace VerusID.You can also use a .vETH subID. The cost to register a .vETH subID is an amount of Bridge.vETH (0.01 vETH worth).In our example we have a namespace ``MyUSDC`` with which we want to launch a currency that is mapped to the Ethereum ``USDC`` ERC-20 (on Goerli testnet, [see contract address](https://goerli.etherscan.io/address/0x98339D8C260052B7ad81c28c16C0b98420f2B46a)).Below is the command to map a currency 1:1 to an ERC-20 on Ethereum. The ``address`` field is the Ethereum smart contract address of the ERC-20 we want to map to.", "./raw_text_input_docs/mapping-1:1-eth.md"], ["What is the purpose of a VerusID in the context of launching a currency on Verus?", "A VerusID is required to launch a currency on Verus. The controller of the VerusID with the same name as the currency is the only one who can create a currency of that name, and it can only be done once.", "# Launch currency with 1:1 mapping of ERC-20When defining a currency it can be mapped to an ERC-20 1:1. The currency on Verus and the ERC-20 on Ethereum are then always interchangeable 1 to 1. [More on the Verus-Ethereum Bridge.](/eth-bridge/)::: tip \u2194\ufe0f Verus-Ethereum Bridge \ud83d\udc68\u200d\ud83d\udd27 For Testnet!\n[\ud83d\udc49 Access the Verus-Ethereum Testnet Bridge](https://ethbridge.verustest.net/) (\u26a0\ufe0f Goerli testnet)\n:::::: tip \u2194\ufe0f Verus-Ethereum Bridge \u2705 For Mainnet!\n[\ud83d\udc49 Access the Verus-Ethereum Mainnet Bridge](https://eth.verusbridge.io)\n:::::: warning Need help setting up a currency launch? \ud83e\udd14\n[\ud83d\udc49 Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::### Defining the currency\nTo create a currency of a specific name, we need a VerusID of the same name. The controller of this VerusID is the only one who can create a currency of that name, and we can only do so once.The cost for a VerusID on the Verus is ``100 VRSC`` (or 80 when using a referral). The cost to launch a currency is ``200 VRSC``. Before launching we need to have enough VRSC in the namespace VerusID.You can also use a .vETH subID. The cost to register a .vETH subID is an amount of Bridge.vETH (0.01 vETH worth).In our example we have a namespace ``MyUSDC`` with which we want to launch a currency that is mapped to the Ethereum ``USDC`` ERC-20 (on Goerli testnet, [see contract address](https://goerli.etherscan.io/address/0x98339D8C260052B7ad81c28c16C0b98420f2B46a)).Below is the command to map a currency 1:1 to an ERC-20 on Ethereum. The ``address`` field is the Ethereum smart contract address of the ERC-20 we want to map to.", "./raw_text_input_docs/mapping-1:1-eth.md"]]], [["User:: Hi, I have some questions about using VerusIDs safely and some of their advanced features. How can I safely stake my funds using a VerusID?", "AI Assistant:: To safely stake your funds using a VerusID, you can use the Vault feature to lock the identity with a delay of 10,080 blocks (~1 week). This way, if someone gains access to the private keys of the locked VerusID, they will have to unlock the identity before they can spend the funds. You will be warned if someone makes an unlock request that isn't you, and the intruder will have to wait 10,080 blocks before they can spend the funds. If you have set up revocation and recovery authorities, you will have one week to safeguard your funds away from prying hands, back into your control.", "User:: That makes sense. What about setting up a trust fund for my children using VerusID? Is that possible?", "AI Assistant:: You can set up a trust fund for your children by giving them a time-locked VerusID with funds on it. When they turn 18, the VerusID will unlock, and the funds can be spent. You can keep the revocation and recovery authorities with yourself or a trustee to ensure the funds are protected until your child reaches the age of 18.", "User:: I've heard of vesting periods in VerusID. What's the purpose of those, and how can they be used?", "AI Assistant:: Vesting periods in VerusID can be used to lock development funds during a currency or chain launch. The funds can be diverted to a locked VerusID, and after a specified period (e.g., two years), the VerusID will unlock, and the funds can only be spent with signatures of other developers. You can also spread the funds across multiple identities with different unlock periods.", "User:: Finally, can you explain how the VerusID Marketplace protocol works?", "AI Assistant:: The VerusID Marketplace protocol allows anyone to buy and sell VerusIDs in a decentralized, peer-to-peer manner. You can look for offers on any VerusID (buy or sell offers), and if you like the best offer on your VerusID, or if someone likes an offer you made on theirs, the deal is made 100% peer-to-peer, without any middleman or contract controller. Additionally, for total payment privacy, you can even pay or receive payment using private addresses and zero-knowledge transactions based on the Zcash Sapling protocol."], "AI Assistant", "", "N/A", [["How can I safely stake my funds using a VerusID?", "To safely stake your funds using a VerusID, you can use the Vault feature to lock the identity with a delay of 10,080 blocks (~1 week). This way, if someone gains access to the private keys of the locked VerusID, they will have to unlock the identity before they can spend the funds. You will be warned if someone makes an unlock request that isn't you, and the intruder will have to wait 10,080 blocks before they can spend the funds. If you have set up revocation and recovery authorities, you will have one week to safeguard your funds away from prying hands, back into your control.", ":::tip Safe Staking\nPut funds to stake with on a VerusID. Use Vault to lock the identity with a delay of 10,080 blocks ( ~1 week). Now whenever someone gains access to the private keys of the locked VerusID, they have to unlock the identity in order to spend the funds. When someone makes an unlock request that isn't you, you are warned. The intruder has to wait 10,080 blocks before he can spend the funds. If you have set up revocation and recovery authorities, you now have one week to safeguard your funds away from prying hands, back into your control.\n::::::tip Trusts\nSetting up a trust fund for your children. Give your child a time locked VerusID with funds on them. When he or she turns 18, the VerusID unlocks and the funds can be spent. Keep revocation and recovery authorities with yourself or a trustee.\n::::::tip Vesting Periods\nWhen doing a currency or chain launch, development funds can be diverted to a locked VerusID. After two years the VerusID unlocks and the funds can only be spent with signatures of other developers. You can also spread the funds across multiple identities with different unlock periods.\n:::## Marketplace\nWith the VerusID Marketplace protocol, anyone is able to buy and sell VerusIDs. You can look for offers on any VerusID (buy or sell offers). If you like the best offer on your VerusID, or if someone likes an offer you made on theirs, the deal is made 100% peer-to-peer, decentralized on the blockchain, without any middleman or contract controller.For total payment privacy, you can even pay or receive payment using private addresses and zero knowledge transactions based on the Zcash Sapling protocol.### Exchanging in\u00a0Private", "./raw_text_input_docs/README_addresses.md"], ["How can I set up a trust fund for my children using VerusID?", "You can set up a trust fund for your children by giving them a time-locked VerusID with funds on it. When they turn 18, the VerusID will unlock, and the funds can be spent. You can keep the revocation and recovery authorities with yourself or a trustee to ensure the funds are protected until your child reaches the age of 18.", ":::tip Safe Staking\nPut funds to stake with on a VerusID. Use Vault to lock the identity with a delay of 10,080 blocks ( ~1 week). Now whenever someone gains access to the private keys of the locked VerusID, they have to unlock the identity in order to spend the funds. When someone makes an unlock request that isn't you, you are warned. The intruder has to wait 10,080 blocks before he can spend the funds. If you have set up revocation and recovery authorities, you now have one week to safeguard your funds away from prying hands, back into your control.\n::::::tip Trusts\nSetting up a trust fund for your children. Give your child a time locked VerusID with funds on them. When he or she turns 18, the VerusID unlocks and the funds can be spent. Keep revocation and recovery authorities with yourself or a trustee.\n::::::tip Vesting Periods\nWhen doing a currency or chain launch, development funds can be diverted to a locked VerusID. After two years the VerusID unlocks and the funds can only be spent with signatures of other developers. You can also spread the funds across multiple identities with different unlock periods.\n:::## Marketplace\nWith the VerusID Marketplace protocol, anyone is able to buy and sell VerusIDs. You can look for offers on any VerusID (buy or sell offers). If you like the best offer on your VerusID, or if someone likes an offer you made on theirs, the deal is made 100% peer-to-peer, decentralized on the blockchain, without any middleman or contract controller.For total payment privacy, you can even pay or receive payment using private addresses and zero knowledge transactions based on the Zcash Sapling protocol.### Exchanging in\u00a0Private", "./raw_text_input_docs/README_addresses.md"], ["What is the purpose of vesting periods in VerusID, and how can they be used?", "Vesting periods in VerusID can be used to lock development funds during a currency or chain launch. The funds can be diverted to a locked VerusID, and after a specified period (e.g., two years), the VerusID will unlock, and the funds can only be spent with signatures of other developers. You can also spread the funds across multiple identities with different unlock periods.", ":::tip Safe Staking\nPut funds to stake with on a VerusID. Use Vault to lock the identity with a delay of 10,080 blocks ( ~1 week). Now whenever someone gains access to the private keys of the locked VerusID, they have to unlock the identity in order to spend the funds. When someone makes an unlock request that isn't you, you are warned. The intruder has to wait 10,080 blocks before he can spend the funds. If you have set up revocation and recovery authorities, you now have one week to safeguard your funds away from prying hands, back into your control.\n::::::tip Trusts\nSetting up a trust fund for your children. Give your child a time locked VerusID with funds on them. When he or she turns 18, the VerusID unlocks and the funds can be spent. Keep revocation and recovery authorities with yourself or a trustee.\n::::::tip Vesting Periods\nWhen doing a currency or chain launch, development funds can be diverted to a locked VerusID. After two years the VerusID unlocks and the funds can only be spent with signatures of other developers. You can also spread the funds across multiple identities with different unlock periods.\n:::## Marketplace\nWith the VerusID Marketplace protocol, anyone is able to buy and sell VerusIDs. You can look for offers on any VerusID (buy or sell offers). If you like the best offer on your VerusID, or if someone likes an offer you made on theirs, the deal is made 100% peer-to-peer, decentralized on the blockchain, without any middleman or contract controller.For total payment privacy, you can even pay or receive payment using private addresses and zero knowledge transactions based on the Zcash Sapling protocol.### Exchanging in\u00a0Private", "./raw_text_input_docs/README_addresses.md"], ["How does the VerusID Marketplace protocol work?", "The VerusID Marketplace protocol allows anyone to buy and sell VerusIDs in a decentralized, peer-to-peer manner. You can look for offers on any VerusID (buy or sell offers), and if you like the best offer on your VerusID, or if someone likes an offer you made on theirs, the deal is made 100% peer-to-peer, without any middleman or contract controller. Additionally, for total payment privacy, you can even pay or receive payment using private addresses and zero-knowledge transactions based on the Zcash Sapling protocol.", ":::tip Safe Staking\nPut funds to stake with on a VerusID. Use Vault to lock the identity with a delay of 10,080 blocks ( ~1 week). Now whenever someone gains access to the private keys of the locked VerusID, they have to unlock the identity in order to spend the funds. When someone makes an unlock request that isn't you, you are warned. The intruder has to wait 10,080 blocks before he can spend the funds. If you have set up revocation and recovery authorities, you now have one week to safeguard your funds away from prying hands, back into your control.\n::::::tip Trusts\nSetting up a trust fund for your children. Give your child a time locked VerusID with funds on them. When he or she turns 18, the VerusID unlocks and the funds can be spent. Keep revocation and recovery authorities with yourself or a trustee.\n::::::tip Vesting Periods\nWhen doing a currency or chain launch, development funds can be diverted to a locked VerusID. After two years the VerusID unlocks and the funds can only be spent with signatures of other developers. You can also spread the funds across multiple identities with different unlock periods.\n:::## Marketplace\nWith the VerusID Marketplace protocol, anyone is able to buy and sell VerusIDs. You can look for offers on any VerusID (buy or sell offers). If you like the best offer on your VerusID, or if someone likes an offer you made on theirs, the deal is made 100% peer-to-peer, decentralized on the blockchain, without any middleman or contract controller.For total payment privacy, you can even pay or receive payment using private addresses and zero knowledge transactions based on the Zcash Sapling protocol.### Exchanging in\u00a0Private", "./raw_text_input_docs/README_addresses.md"]]], [["User:: Hey, I've got a question about bridging assets from Verus to Ethereum. How do I do it using Verus Desktop?", "AI Assistant:: To bridge assets from Verus to Ethereum using Verus Desktop, you need to follow these steps:\n\n1. Press \"Convert Currencies\" and go to the \"Advanced\"-tab.\n2. Fill in the required inputs: **``From Currency``** with the bridged asset (e.g. ``veth``, ``dai.veth``, ``mkr.veth``, ``vrsc``), **``Destination System``** with ``veth`` for Ethereum, **``Destination Address``** with your Ethereum address, and **``Refund Address``** with your Verus address (R-, i- or VerusID).\n\nHave you tried that? Do you have any more questions about bridging assets?", "User:: Actually, I'm more comfortable using the command-line interface (CLI). Can you tell me how to bridge assets from Verus to Ethereum using the CLI?", "AI Assistant:: To bridge assets from Verus to Ethereum using the CLI, you can use the following command:\n```\n./verus sendcurrency \"*\" '[{\n\"currency\":\"veth\",\n\"exportto\":\"veth\",\n\"address\":\"ETH-ADDRESS\",\n\"amount\":100,\n\"refundto\":\"VERUS-ADDRESS\"\n}]'\n```\nYou need to replace **``currency``** with the bridged asset (e.g. ``veth``, ``dai.veth``, ``mkr.veth``, ``vrsc``), **``exportto``** with ``veth``, **``address``** with your Ethereum address, **``amount``** with the amount to bridge, and **``refundto``** with your Verus address (R-, i- or VerusID). You can also add **``\"feecurrency\":\"veth\"``** to pay the fees in vETH.\n\nMake sure to replace the placeholders with your actual values. If you have any issues or need further assistance, feel free to ask!"], "AI Assistant", "", "N/A", [["What are the steps to bridge assets from Verus to Ethereum using Verus Desktop?", "To bridge assets from Verus to Ethereum using Verus Desktop, you need to press \"Convert Currencies\" and go to the \"Advanced\"-tab. Then, fill in the required inputs: **``From Currency``** with the bridged asset (e.g. ``veth``, ``dai.veth``, ``mkr.veth``, ``vrsc``), **``Destination System``** with ``veth`` for Ethereum, **``Destination Address``** with your Ethereum address, and **``Refund Address``** with your Verus address (R-, i- or VerusID).", "![image-verus-mobile-bridge](/images/mobile-verus-to-eth.png)\n\n**``Recipient Address``** is your Ethereum address.\n\n**``Select network to send to``** select ``vETH``\n\nThen follow the next steps.\n\n## Verus Desktop\nTo bridge over from Verus to Ethereum using Verus Desktop you can press \"Convert Currencies\" and go to the \"Advanced\"-tab. Fill in the red highlighted inputs.\n\n![image-verus-desktop-bridge](/images/desktop-verus-to-eth.png)\n\nIn the **``From Currency``** you can put ``veth``, ``dai.veth``, ``mkr.veth``, ``vrsc`` or other bridged assets. Not capital sensitive.\n\n**``Destination System``** is ``veth`` for Ethereum.\n\n**``Destination Address``** is your Ethereum address.\n\n**``Refund Address``** is your Verus address (R-,i- or VerusID).\n\n## CLI\nTo bridge over from Verus to Ethereum using CLI. You can also use this command with the built-in command-line interface in Verus Desktop, under Settings -> Coin Settings, just replace ``./verus`` with ``run``.\n\n``` json\n./verus sendcurrency \"*\" '[{\n  \"currency\":\"veth\",\n  \"exportto\":\"veth\",\n  \"address\":\"ETH-ADDRESS\",\n  \"amount\":100,\n  \"refundto\":\"VERUS-ADDRESS\"\n}]'\n```\n\n**``currency: ``** ``veth``, ``dai.veth``, ``mkr.veth``, ``vrsc`` or other bridged assets. Not capital sensitive.\n\n**``exportto:``** keep as ``veth``\n\n**``address:``** your Ethereum address\n\n**``refundto:``** your Verus address (R-,i- or VerusID)\n\nYou can also add ``\"feecurrency\":\"veth\"`` to pay the fees in vETH. Standard is in VRSC.", "./raw_text_input_docs/verus-to-ethereum.md"], ["How can I bridge assets from Verus to Ethereum using the command-line interface (CLI)?", "To bridge assets from Verus to Ethereum using the CLI, you can use the following command:\n```\n./verus sendcurrency \"*\" '[{\n  \"currency\":\"veth\",\n  \"exportto\":\"veth\",\n  \"address\":\"ETH-ADDRESS\",\n  \"amount\":100,\n  \"refundto\":\"VERUS-ADDRESS\"\n}]'\n```\nYou need to replace **``currency``** with the bridged asset (e.g. ``veth``, ``dai.veth``, ``mkr.veth``, ``vrsc``), **``exportto``** with ``veth``, **``address``** with your Ethereum address, **``amount``** with the amount to bridge, and **``refundto``** with your Verus address (R-, i- or VerusID). You can also add **``\"feecurrency\":\"veth\"``** to pay the fees in vETH.", "![image-verus-mobile-bridge](/images/mobile-verus-to-eth.png)\n\n**``Recipient Address``** is your Ethereum address.\n\n**``Select network to send to``** select ``vETH``\n\nThen follow the next steps.\n\n## Verus Desktop\nTo bridge over from Verus to Ethereum using Verus Desktop you can press \"Convert Currencies\" and go to the \"Advanced\"-tab. Fill in the red highlighted inputs.\n\n![image-verus-desktop-bridge](/images/desktop-verus-to-eth.png)\n\nIn the **``From Currency``** you can put ``veth``, ``dai.veth``, ``mkr.veth``, ``vrsc`` or other bridged assets. Not capital sensitive.\n\n**``Destination System``** is ``veth`` for Ethereum.\n\n**``Destination Address``** is your Ethereum address.\n\n**``Refund Address``** is your Verus address (R-,i- or VerusID).\n\n## CLI\nTo bridge over from Verus to Ethereum using CLI. You can also use this command with the built-in command-line interface in Verus Desktop, under Settings -> Coin Settings, just replace ``./verus`` with ``run``.\n\n``` json\n./verus sendcurrency \"*\" '[{\n  \"currency\":\"veth\",\n  \"exportto\":\"veth\",\n  \"address\":\"ETH-ADDRESS\",\n  \"amount\":100,\n  \"refundto\":\"VERUS-ADDRESS\"\n}]'\n```\n\n**``currency: ``** ``veth``, ``dai.veth``, ``mkr.veth``, ``vrsc`` or other bridged assets. Not capital sensitive.\n\n**``exportto:``** keep as ``veth``\n\n**``address:``** your Ethereum address\n\n**``refundto:``** your Verus address (R-,i- or VerusID)\n\nYou can also add ``\"feecurrency\":\"veth\"`` to pay the fees in vETH. Standard is in VRSC.", "./raw_text_input_docs/verus-to-ethereum.md"]]], [["User:: Hey, I'm trying to define a currency on Verus, but I'm not sure what the `options` parameter does. Can you help me out?", "AI Assistant:: The `options` parameter determines the type of currency being defined. The possible values are:\n- `1`: Default, a decentralized currency where registration fees are burned.\n- `2`: Centralized currency, where the rootID can mint and burn supply, and subID registration fees go to the rootID.\n- `3`: Ethereum ERC-20 mapped tokens.\n\nDo you have any specific use case in mind for your currency, or would you like me to elaborate on these options?", "User:: I think I want to create a simple token currency. Can you tell me how to do that, and what the implications are?", "AI Assistant:: You can define a simple token currency on Verus by setting `options` to `32`. This allows the controller of the rootID to mint and burn supply. Additionally, during the preconversion timeframe, people can convert their funds to this currency, which will go to the rootID as a funding mechanism.\n\nKeep in mind that this means the rootID will have control over the supply of the currency, and people will be able to convert their funds to it during the preconversion phase.", "User:: What about the `currencies` parameter? I'm not sure what that's for.", "AI Assistant:: The `currencies` parameter is used when defining a basket currency (`options:33`). In that case, it specifies the currencies that will be in the reserves.\n\nFor a simple token currency (`options:32`), it determines what people can convert during the preconversion timeframe, which will go to the rootID of the currency as a funding mechanism. You can specify up to 10 currencies for this parameter.\n\nSo, in your case, you'll want to specify the currencies that you want people to be able to convert to your new token currency during the preconversion phase. Does that make sense?"], "AI Assistant", "", "N/A", [["What do the different values of the `options` parameter mean when defining a currency on Verus?", "The `options` parameter determines the type of currency being defined. The possible values are:\n- `1`: Default, a decentralized currency where registration fees are burned.\n- `2`: Centralized currency, where the rootID can mint and burn supply, and subID registration fees go to the rootID.\n- `3`: Ethereum ERC-20 mapped tokens.", "``1`` is default, which launches a decentralized currency (no need to include this parameter when defining such a currency). When subIDs are created with this option, the registration fees are burned.``2`` is for a centralized currency. If it\u2019s a basket currency the rootID can mint and burn supply while automatically lowering and raising the reserve ratio (also anyone can burn supply without lowering the reserve ratio). Or when it\u2019s a simple token currency they can just mint and burn supply. The subID registration fees go to the rootID.``3`` is for Ethereum ERC-20 mapped tokens. [Read more](/currencies/mapping-1:1-eth)Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\n\u261d\ufe0f A simple token currency called MyBrand, centralized (the controller of the rootID can mint and burn), and has a preallocation of 100 tokens to Klaus@.### **\"currencies\"**\nHere you put the names of the currencies (or just one \u2014 it must have VRSC when launched on Verus) that will be in the reserves when it\u2019s a basket currency (`options:33`).Or when it\u2019s a simple token currency (`options:32`), what people convert during the preconversion timeframe will go to the rootID of the currency, as a funding mechanism. In the case of a simple token currency, combine it with `\"conversions\"` to determine the preconversion price.Use up to 10 currencies for this parameter.", "./raw_text_input_docs/launch-currency.md"], ["How can I define a simple token currency on Verus, and what are the implications of doing so?", "You can define a simple token currency on Verus by setting `options` to `32`. This allows the controller of the rootID to mint and burn supply. Additionally, during the preconversion timeframe, people can convert their funds to this currency, which will go to the rootID as a funding mechanism.", "``1`` is default, which launches a decentralized currency (no need to include this parameter when defining such a currency). When subIDs are created with this option, the registration fees are burned.``2`` is for a centralized currency. If it\u2019s a basket currency the rootID can mint and burn supply while automatically lowering and raising the reserve ratio (also anyone can burn supply without lowering the reserve ratio). Or when it\u2019s a simple token currency they can just mint and burn supply. The subID registration fees go to the rootID.``3`` is for Ethereum ERC-20 mapped tokens. [Read more](/currencies/mapping-1:1-eth)Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\n\u261d\ufe0f A simple token currency called MyBrand, centralized (the controller of the rootID can mint and burn), and has a preallocation of 100 tokens to Klaus@.### **\"currencies\"**\nHere you put the names of the currencies (or just one \u2014 it must have VRSC when launched on Verus) that will be in the reserves when it\u2019s a basket currency (`options:33`).Or when it\u2019s a simple token currency (`options:32`), what people convert during the preconversion timeframe will go to the rootID of the currency, as a funding mechanism. In the case of a simple token currency, combine it with `\"conversions\"` to determine the preconversion price.Use up to 10 currencies for this parameter.", "./raw_text_input_docs/launch-currency.md"], ["What is the purpose of the `currencies` parameter when defining a currency on Verus?", "The `currencies` parameter specifies the currencies that will be in the reserves when defining a basket currency (`options:33`). For a simple token currency (`options:32`), it determines what people can convert during the preconversion timeframe, which will go to the rootID of the currency as a funding mechanism. Up to 10 currencies can be specified for this parameter.", "``1`` is default, which launches a decentralized currency (no need to include this parameter when defining such a currency). When subIDs are created with this option, the registration fees are burned.``2`` is for a centralized currency. If it\u2019s a basket currency the rootID can mint and burn supply while automatically lowering and raising the reserve ratio (also anyone can burn supply without lowering the reserve ratio). Or when it\u2019s a simple token currency they can just mint and burn supply. The subID registration fees go to the rootID.``3`` is for Ethereum ERC-20 mapped tokens. [Read more](/currencies/mapping-1:1-eth)Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\n\u261d\ufe0f A simple token currency called MyBrand, centralized (the controller of the rootID can mint and burn), and has a preallocation of 100 tokens to Klaus@.### **\"currencies\"**\nHere you put the names of the currencies (or just one \u2014 it must have VRSC when launched on Verus) that will be in the reserves when it\u2019s a basket currency (`options:33`).Or when it\u2019s a simple token currency (`options:32`), what people convert during the preconversion timeframe will go to the rootID of the currency, as a funding mechanism. In the case of a simple token currency, combine it with `\"conversions\"` to determine the preconversion price.Use up to 10 currencies for this parameter.", "./raw_text_input_docs/launch-currency.md"]]], [["User:: I'm trying to understand the different flags in a VerusPay invoice. Can you explain what the VERUSPAY_INVALID flag does?", "AI Assistant:: The VERUSPAY_INVALID flag (0) indicates that an invoice is invalid and should not be processed. This default state can be used to signify that an invoice should not be actionable. Do you have any other questions about VerusPay invoice flags?", "User:: What about the VERUSPAY_VALID flag? What does it signify?", "AI Assistant:: The VERUSPAY_VALID flag (1) signifies that an invoice is valid and can be processed. This flag must be set for the invoice to be considered actionable. Does that make sense?", "User:: Yes, that's clear. What about the VERUSPAY_ACCEPTS_CONVERSION flag?", "AI Assistant:: The VERUSPAY_ACCEPTS_CONVERSION flag (2) allows payments in different currencies, with conversion to the invoice's requested currency. If an invoice accepts conversion, it requires a max estimated slippage value. This flag gives more flexibility to the payment process.", "User:: What does the VERUSPAY_ACCEPTS_NON_VERUS_SYSTEMS flag indicate?", "AI Assistant:: The VERUSPAY_ACCEPTS_NON_VERUS_SYSTEMS flag (4) indicates that payments from non-Verus blockchain systems are accepted. If this flag is set, specifying accepted systems is required. This flag allows for more compatibility with other blockchain systems.", "User:: What's the purpose of the VERUSPAY_EXPIRES flag?", "AI Assistant:: The VERUSPAY_EXPIRES flag (8) determines that the invoice has an expiry condition. If set, the invoice must be paid before a specific Verus blockchain height is reached, and an expiry height must be set. This flag adds an extra layer of control to the payment process.", "User:: What does the VERUSPAY_ACCEPTS_ANY_DESTINATION flag allow?", "AI Assistant:: The VERUSPAY_ACCEPTS_ANY_DESTINATION flag (16) allows the invoice to accept payments to any destination. If set, the destination field in the invoice must be left blank. This flag gives more flexibility to the payment destination.", "User:: What does the VERUSPAY_ACCEPTS_ANY_AMOUNT flag indicate?", "AI Assistant:: The VERUSPAY_ACCEPTS_ANY_AMOUNT flag (32) indicates that the invoice can be paid with any amount. This is useful for donations or when the exact payment amount is not fixed. If set, the amount field in the invoice must be left blank. This flag allows for more flexibility in the payment amount.", "User:: What's the effect of setting the VERUSPAY_EXCLUDES_VERUS_BLOCKCHAIN flag?", "AI Assistant:: The VERUSPAY_EXCLUDES_VERUS_BLOCKCHAIN flag (64) means that the invoice cannot be paid on VRSC/VRSCTEST. This flag restricts the payment options for the invoice.", "User:: Finally, what does the VERUSPAY_IS_TESTNET flag signify?", "AI Assistant:: The VERUSPAY_IS_TESTNET flag (128) marks the invoice as only valid on VRSCTEST and/or testnet PBaaS blockchains, and establishes that all currencies/identities referenced within the invoice exist only on testnet. This flag is useful for testing purposes."], "AI Assistant", "", "N/A", [["What is the purpose of the VERUSPAY_INVALID flag in a VerusPay invoice?", "The VERUSPAY_INVALID flag (0) indicates that an invoice is invalid and should not be processed. This default state can be used to signify that an invoice should not be actionable.", "- **VERUSPAY_INVALID (0)**: Indicates that the invoice is invalid. This default state can be used to signify that an invoice should not be processed.\n- **VERUSPAY_VALID (1)**: Signifies that the invoice is valid and can be processed. This flag must be set for the invoice to be considered actionable.\n- **VERUSPAY_ACCEPTS_CONVERSION (2)**: Specifies that the invoice accepts currency conversions. This allows payments in different currencies, with conversion to the invoice's requested currency. If an invoice accepts conversion, it requires a max estimated slippage value.\n- **VERUSPAY_ACCEPTS_NON_VERUS_SYSTEMS (4)**: Indicates that payments from non-Verus blockchain systems are accepted. If this flag is set, specifying accepted systems is required.\n- **VERUSPAY_EXPIRES (8)**: Determines that the invoice has an expiry condition. If set, the invoice must be paid before a specific Verus blockchain height is reached, and an expiry height must be set.\n- **VERUSPAY_ACCEPTS_ANY_DESTINATION (16)**: Allows the invoice to accept payments to any destination. If set, the destination field in the invoice must be left blank.\n- **VERUSPAY_ACCEPTS_ANY_AMOUNT (32)**: Indicates that the invoice can be paid with any amount. This is useful for donations or when the exact payment amount is not fixed. If set, the amount field in the invoice must be left blank.\n- **VERUSPAY_EXCLUDES_VERUS_BLOCKCHAIN (64)**: If set, invoice cannot be paid on VRSC/VRSCTEST.\n- **VERUSPAY_IS_TESTNET (128)**: Marks the invoice as only valid on VRSCTEST and/or testnet PBaaS blockchains, and establishes that all currencies/identities referenced within the invoice exist only on testnet.## Serialization and Deserialization![veruspay-invoice-bytes](/images/veruspay-invoice-bytes.svg)", "./raw_text_input_docs/invoices.md"], ["What does the VERUSPAY_VALID flag signify in a VerusPay invoice?", "The VERUSPAY_VALID flag (1) signifies that an invoice is valid and can be processed. This flag must be set for the invoice to be considered actionable.", "- **VERUSPAY_INVALID (0)**: Indicates that the invoice is invalid. This default state can be used to signify that an invoice should not be processed.\n- **VERUSPAY_VALID (1)**: Signifies that the invoice is valid and can be processed. This flag must be set for the invoice to be considered actionable.\n- **VERUSPAY_ACCEPTS_CONVERSION (2)**: Specifies that the invoice accepts currency conversions. This allows payments in different currencies, with conversion to the invoice's requested currency. If an invoice accepts conversion, it requires a max estimated slippage value.\n- **VERUSPAY_ACCEPTS_NON_VERUS_SYSTEMS (4)**: Indicates that payments from non-Verus blockchain systems are accepted. If this flag is set, specifying accepted systems is required.\n- **VERUSPAY_EXPIRES (8)**: Determines that the invoice has an expiry condition. If set, the invoice must be paid before a specific Verus blockchain height is reached, and an expiry height must be set.\n- **VERUSPAY_ACCEPTS_ANY_DESTINATION (16)**: Allows the invoice to accept payments to any destination. If set, the destination field in the invoice must be left blank.\n- **VERUSPAY_ACCEPTS_ANY_AMOUNT (32)**: Indicates that the invoice can be paid with any amount. This is useful for donations or when the exact payment amount is not fixed. If set, the amount field in the invoice must be left blank.\n- **VERUSPAY_EXCLUDES_VERUS_BLOCKCHAIN (64)**: If set, invoice cannot be paid on VRSC/VRSCTEST.\n- **VERUSPAY_IS_TESTNET (128)**: Marks the invoice as only valid on VRSCTEST and/or testnet PBaaS blockchains, and establishes that all currencies/identities referenced within the invoice exist only on testnet.## Serialization and Deserialization![veruspay-invoice-bytes](/images/veruspay-invoice-bytes.svg)", "./raw_text_input_docs/invoices.md"], ["What does the VERUSPAY_ACCEPTS_CONVERSION flag allow in a VerusPay invoice?", "The VERUSPAY_ACCEPTS_CONVERSION flag (2) allows payments in different currencies, with conversion to the invoice's requested currency. If an invoice accepts conversion, it requires a max estimated slippage value.", "- **VERUSPAY_INVALID (0)**: Indicates that the invoice is invalid. This default state can be used to signify that an invoice should not be processed.\n- **VERUSPAY_VALID (1)**: Signifies that the invoice is valid and can be processed. This flag must be set for the invoice to be considered actionable.\n- **VERUSPAY_ACCEPTS_CONVERSION (2)**: Specifies that the invoice accepts currency conversions. This allows payments in different currencies, with conversion to the invoice's requested currency. If an invoice accepts conversion, it requires a max estimated slippage value.\n- **VERUSPAY_ACCEPTS_NON_VERUS_SYSTEMS (4)**: Indicates that payments from non-Verus blockchain systems are accepted. If this flag is set, specifying accepted systems is required.\n- **VERUSPAY_EXPIRES (8)**: Determines that the invoice has an expiry condition. If set, the invoice must be paid before a specific Verus blockchain height is reached, and an expiry height must be set.\n- **VERUSPAY_ACCEPTS_ANY_DESTINATION (16)**: Allows the invoice to accept payments to any destination. If set, the destination field in the invoice must be left blank.\n- **VERUSPAY_ACCEPTS_ANY_AMOUNT (32)**: Indicates that the invoice can be paid with any amount. This is useful for donations or when the exact payment amount is not fixed. If set, the amount field in the invoice must be left blank.\n- **VERUSPAY_EXCLUDES_VERUS_BLOCKCHAIN (64)**: If set, invoice cannot be paid on VRSC/VRSCTEST.\n- **VERUSPAY_IS_TESTNET (128)**: Marks the invoice as only valid on VRSCTEST and/or testnet PBaaS blockchains, and establishes that all currencies/identities referenced within the invoice exist only on testnet.## Serialization and Deserialization![veruspay-invoice-bytes](/images/veruspay-invoice-bytes.svg)", "./raw_text_input_docs/invoices.md"], ["What does the VERUSPAY_ACCEPTS_NON_VERUS_SYSTEMS flag indicate in a VerusPay invoice?", "The VERUSPAY_ACCEPTS_NON_VERUS_SYSTEMS flag (4) indicates that payments from non-Verus blockchain systems are accepted. If this flag is set, specifying accepted systems is required.", "- **VERUSPAY_INVALID (0)**: Indicates that the invoice is invalid. This default state can be used to signify that an invoice should not be processed.\n- **VERUSPAY_VALID (1)**: Signifies that the invoice is valid and can be processed. This flag must be set for the invoice to be considered actionable.\n- **VERUSPAY_ACCEPTS_CONVERSION (2)**: Specifies that the invoice accepts currency conversions. This allows payments in different currencies, with conversion to the invoice's requested currency. If an invoice accepts conversion, it requires a max estimated slippage value.\n- **VERUSPAY_ACCEPTS_NON_VERUS_SYSTEMS (4)**: Indicates that payments from non-Verus blockchain systems are accepted. If this flag is set, specifying accepted systems is required.\n- **VERUSPAY_EXPIRES (8)**: Determines that the invoice has an expiry condition. If set, the invoice must be paid before a specific Verus blockchain height is reached, and an expiry height must be set.\n- **VERUSPAY_ACCEPTS_ANY_DESTINATION (16)**: Allows the invoice to accept payments to any destination. If set, the destination field in the invoice must be left blank.\n- **VERUSPAY_ACCEPTS_ANY_AMOUNT (32)**: Indicates that the invoice can be paid with any amount. This is useful for donations or when the exact payment amount is not fixed. If set, the amount field in the invoice must be left blank.\n- **VERUSPAY_EXCLUDES_VERUS_BLOCKCHAIN (64)**: If set, invoice cannot be paid on VRSC/VRSCTEST.\n- **VERUSPAY_IS_TESTNET (128)**: Marks the invoice as only valid on VRSCTEST and/or testnet PBaaS blockchains, and establishes that all currencies/identities referenced within the invoice exist only on testnet.## Serialization and Deserialization![veruspay-invoice-bytes](/images/veruspay-invoice-bytes.svg)", "./raw_text_input_docs/invoices.md"], ["What is the purpose of the VERUSPAY_EXPIRES flag in a VerusPay invoice?", "The VERUSPAY_EXPIRES flag (8) determines that the invoice has an expiry condition. If set, the invoice must be paid before a specific Verus blockchain height is reached, and an expiry height must be set.", "- **VERUSPAY_INVALID (0)**: Indicates that the invoice is invalid. This default state can be used to signify that an invoice should not be processed.\n- **VERUSPAY_VALID (1)**: Signifies that the invoice is valid and can be processed. This flag must be set for the invoice to be considered actionable.\n- **VERUSPAY_ACCEPTS_CONVERSION (2)**: Specifies that the invoice accepts currency conversions. This allows payments in different currencies, with conversion to the invoice's requested currency. If an invoice accepts conversion, it requires a max estimated slippage value.\n- **VERUSPAY_ACCEPTS_NON_VERUS_SYSTEMS (4)**: Indicates that payments from non-Verus blockchain systems are accepted. If this flag is set, specifying accepted systems is required.\n- **VERUSPAY_EXPIRES (8)**: Determines that the invoice has an expiry condition. If set, the invoice must be paid before a specific Verus blockchain height is reached, and an expiry height must be set.\n- **VERUSPAY_ACCEPTS_ANY_DESTINATION (16)**: Allows the invoice to accept payments to any destination. If set, the destination field in the invoice must be left blank.\n- **VERUSPAY_ACCEPTS_ANY_AMOUNT (32)**: Indicates that the invoice can be paid with any amount. This is useful for donations or when the exact payment amount is not fixed. If set, the amount field in the invoice must be left blank.\n- **VERUSPAY_EXCLUDES_VERUS_BLOCKCHAIN (64)**: If set, invoice cannot be paid on VRSC/VRSCTEST.\n- **VERUSPAY_IS_TESTNET (128)**: Marks the invoice as only valid on VRSCTEST and/or testnet PBaaS blockchains, and establishes that all currencies/identities referenced within the invoice exist only on testnet.## Serialization and Deserialization![veruspay-invoice-bytes](/images/veruspay-invoice-bytes.svg)", "./raw_text_input_docs/invoices.md"], ["What does the VERUSPAY_ACCEPTS_ANY_DESTINATION flag allow in a VerusPay invoice?", "The VERUSPAY_ACCEPTS_ANY_DESTINATION flag (16) allows the invoice to accept payments to any destination. If set, the destination field in the invoice must be left blank.", "- **VERUSPAY_INVALID (0)**: Indicates that the invoice is invalid. This default state can be used to signify that an invoice should not be processed.\n- **VERUSPAY_VALID (1)**: Signifies that the invoice is valid and can be processed. This flag must be set for the invoice to be considered actionable.\n- **VERUSPAY_ACCEPTS_CONVERSION (2)**: Specifies that the invoice accepts currency conversions. This allows payments in different currencies, with conversion to the invoice's requested currency. If an invoice accepts conversion, it requires a max estimated slippage value.\n- **VERUSPAY_ACCEPTS_NON_VERUS_SYSTEMS (4)**: Indicates that payments from non-Verus blockchain systems are accepted. If this flag is set, specifying accepted systems is required.\n- **VERUSPAY_EXPIRES (8)**: Determines that the invoice has an expiry condition. If set, the invoice must be paid before a specific Verus blockchain height is reached, and an expiry height must be set.\n- **VERUSPAY_ACCEPTS_ANY_DESTINATION (16)**: Allows the invoice to accept payments to any destination. If set, the destination field in the invoice must be left blank.\n- **VERUSPAY_ACCEPTS_ANY_AMOUNT (32)**: Indicates that the invoice can be paid with any amount. This is useful for donations or when the exact payment amount is not fixed. If set, the amount field in the invoice must be left blank.\n- **VERUSPAY_EXCLUDES_VERUS_BLOCKCHAIN (64)**: If set, invoice cannot be paid on VRSC/VRSCTEST.\n- **VERUSPAY_IS_TESTNET (128)**: Marks the invoice as only valid on VRSCTEST and/or testnet PBaaS blockchains, and establishes that all currencies/identities referenced within the invoice exist only on testnet.## Serialization and Deserialization![veruspay-invoice-bytes](/images/veruspay-invoice-bytes.svg)", "./raw_text_input_docs/invoices.md"], ["What does the VERUSPAY_ACCEPTS_ANY_AMOUNT flag indicate in a VerusPay invoice?", "The VERUSPAY_ACCEPTS_ANY_AMOUNT flag (32) indicates that the invoice can be paid with any amount. This is useful for donations or when the exact payment amount is not fixed. If set, the amount field in the invoice must be left blank.", "- **VERUSPAY_INVALID (0)**: Indicates that the invoice is invalid. This default state can be used to signify that an invoice should not be processed.\n- **VERUSPAY_VALID (1)**: Signifies that the invoice is valid and can be processed. This flag must be set for the invoice to be considered actionable.\n- **VERUSPAY_ACCEPTS_CONVERSION (2)**: Specifies that the invoice accepts currency conversions. This allows payments in different currencies, with conversion to the invoice's requested currency. If an invoice accepts conversion, it requires a max estimated slippage value.\n- **VERUSPAY_ACCEPTS_NON_VERUS_SYSTEMS (4)**: Indicates that payments from non-Verus blockchain systems are accepted. If this flag is set, specifying accepted systems is required.\n- **VERUSPAY_EXPIRES (8)**: Determines that the invoice has an expiry condition. If set, the invoice must be paid before a specific Verus blockchain height is reached, and an expiry height must be set.\n- **VERUSPAY_ACCEPTS_ANY_DESTINATION (16)**: Allows the invoice to accept payments to any destination. If set, the destination field in the invoice must be left blank.\n- **VERUSPAY_ACCEPTS_ANY_AMOUNT (32)**: Indicates that the invoice can be paid with any amount. This is useful for donations or when the exact payment amount is not fixed. If set, the amount field in the invoice must be left blank.\n- **VERUSPAY_EXCLUDES_VERUS_BLOCKCHAIN (64)**: If set, invoice cannot be paid on VRSC/VRSCTEST.\n- **VERUSPAY_IS_TESTNET (128)**: Marks the invoice as only valid on VRSCTEST and/or testnet PBaaS blockchains, and establishes that all currencies/identities referenced within the invoice exist only on testnet.## Serialization and Deserialization![veruspay-invoice-bytes](/images/veruspay-invoice-bytes.svg)", "./raw_text_input_docs/invoices.md"], ["What is the effect of setting the VERUSPAY_EXCLUDES_VERUS_BLOCKCHAIN flag in a VerusPay invoice?", "The VERUSPAY_EXCLUDES_VERUS_BLOCKCHAIN flag (64) means that the invoice cannot be paid on VRSC/VRSCTEST.", "- **VERUSPAY_INVALID (0)**: Indicates that the invoice is invalid. This default state can be used to signify that an invoice should not be processed.\n- **VERUSPAY_VALID (1)**: Signifies that the invoice is valid and can be processed. This flag must be set for the invoice to be considered actionable.\n- **VERUSPAY_ACCEPTS_CONVERSION (2)**: Specifies that the invoice accepts currency conversions. This allows payments in different currencies, with conversion to the invoice's requested currency. If an invoice accepts conversion, it requires a max estimated slippage value.\n- **VERUSPAY_ACCEPTS_NON_VERUS_SYSTEMS (4)**: Indicates that payments from non-Verus blockchain systems are accepted. If this flag is set, specifying accepted systems is required.\n- **VERUSPAY_EXPIRES (8)**: Determines that the invoice has an expiry condition. If set, the invoice must be paid before a specific Verus blockchain height is reached, and an expiry height must be set.\n- **VERUSPAY_ACCEPTS_ANY_DESTINATION (16)**: Allows the invoice to accept payments to any destination. If set, the destination field in the invoice must be left blank.\n- **VERUSPAY_ACCEPTS_ANY_AMOUNT (32)**: Indicates that the invoice can be paid with any amount. This is useful for donations or when the exact payment amount is not fixed. If set, the amount field in the invoice must be left blank.\n- **VERUSPAY_EXCLUDES_VERUS_BLOCKCHAIN (64)**: If set, invoice cannot be paid on VRSC/VRSCTEST.\n- **VERUSPAY_IS_TESTNET (128)**: Marks the invoice as only valid on VRSCTEST and/or testnet PBaaS blockchains, and establishes that all currencies/identities referenced within the invoice exist only on testnet.## Serialization and Deserialization![veruspay-invoice-bytes](/images/veruspay-invoice-bytes.svg)", "./raw_text_input_docs/invoices.md"], ["What does the VERUSPAY_IS_TESTNET flag signify in a VerusPay invoice?", "The VERUSPAY_IS_TESTNET flag (128) marks the invoice as only valid on VRSCTEST and/or testnet PBaaS blockchains, and establishes that all currencies/identities referenced within the invoice exist only on testnet.", "- **VERUSPAY_INVALID (0)**: Indicates that the invoice is invalid. This default state can be used to signify that an invoice should not be processed.\n- **VERUSPAY_VALID (1)**: Signifies that the invoice is valid and can be processed. This flag must be set for the invoice to be considered actionable.\n- **VERUSPAY_ACCEPTS_CONVERSION (2)**: Specifies that the invoice accepts currency conversions. This allows payments in different currencies, with conversion to the invoice's requested currency. If an invoice accepts conversion, it requires a max estimated slippage value.\n- **VERUSPAY_ACCEPTS_NON_VERUS_SYSTEMS (4)**: Indicates that payments from non-Verus blockchain systems are accepted. If this flag is set, specifying accepted systems is required.\n- **VERUSPAY_EXPIRES (8)**: Determines that the invoice has an expiry condition. If set, the invoice must be paid before a specific Verus blockchain height is reached, and an expiry height must be set.\n- **VERUSPAY_ACCEPTS_ANY_DESTINATION (16)**: Allows the invoice to accept payments to any destination. If set, the destination field in the invoice must be left blank.\n- **VERUSPAY_ACCEPTS_ANY_AMOUNT (32)**: Indicates that the invoice can be paid with any amount. This is useful for donations or when the exact payment amount is not fixed. If set, the amount field in the invoice must be left blank.\n- **VERUSPAY_EXCLUDES_VERUS_BLOCKCHAIN (64)**: If set, invoice cannot be paid on VRSC/VRSCTEST.\n- **VERUSPAY_IS_TESTNET (128)**: Marks the invoice as only valid on VRSCTEST and/or testnet PBaaS blockchains, and establishes that all currencies/identities referenced within the invoice exist only on testnet.## Serialization and Deserialization![veruspay-invoice-bytes](/images/veruspay-invoice-bytes.svg)", "./raw_text_input_docs/invoices.md"]]], [["User:: Hey, I'm interested in mining Verus. Can you tell me what options are available for mining Verus on different operating systems?", "AI Assistant:: The available options for mining Verus on different operating systems are:\n\n* On Windows, you can use CCminer v3.8.3a.\n* On Linux, you can use CCminer v3.8.3a-CPU.\n* On ARM, you can use CCminer v3.8.3a-CPU.\n* On macOS (Apple silicon), there is no available option yet.\n* On mobile devices, you can use VerusMiner.\n\nLet me know if you have any further questions about mining Verus!", "User:: Are there any GPU mining software options available for Verus?", "AI Assistant:: Unfortunately, no, there are no GPU mining software options available for Verus yet.", "User:: What about mining pools? Are there any available options for mining Verus, and what are their fees?", "AI Assistant:: Some available mining pools for Verus are:\n\n* Verus Pool (5% fee, with fees donated to the Verus foundation)\n* LuckPool (1% fee)\n* ZergPool (0.5% fee)\n* CiscoTech (1% fee)\n* LePool (1% fee)\n* Zhuaao (1% fee)\n* AlphatechIT (0.2% fee)\n* Wattpool (0.5% fee)\n* 011Data (0.5% fee)\n* vipor.net (0.1% fee)\n* cloudiko.io (0% fee)\n\nPlease note that fees may be subject to change, and it's always a good idea to check the pool's website for the most up-to-date information."], "AI Assistant", "", "N/A", [["What are the available options for mining Verus on different operating systems?", "The available options for mining Verus on different operating systems are:\n\n* On Windows, you can use CCminer v3.8.3a.\n* On Linux, you can use CCminer v3.8.3a-CPU.\n* On ARM, you can use CCminer v3.8.3a-CPU.\n* On macOS (Apple silicon), there is no available option yet.\n* On mobile devices, you can use VerusMiner.", "| OS   |  Name | Version |   Download |\n| :------ | ------: | ------: | -----------: |\n| Windows | CCminer | v3.8.3a | [Download](https://github.com/monkins1010/ccminer/releases/tag/v3.8.3a) |\n| macOS (Apple silicon)| CCminer | -- | not (yet) available |\n| Linux  | CCminer | v3.8.3a | [Download](https://github.com/Oink70/ccminer-verus/releases/tag/v3.8.3a-CPU) |\n| ARM   | CCminer | v3.8.3a | [Download](https://github.com/Oink70/ccminer-verus/releases/tag/v3.8.3a-CPU) |\n\n### \ud83d\udcf1 Mobile\nStart mining with your phone.\n\n**VerusMiner** [Download here](https://pangz-lab.github.io/verusminer/)\n\n### GPU\n\nNo software yet.\n\n## Mining Pools\n\n| Pool Name                    | Fee % |\n| :---------------------------------------------- | ----: |\n| [Verus Pool](https://pool.verus.io/) <span style=\"color:green\">Fees donated to the Verus foundation</span>   |  <span style=\"color:green\"> <b>5%</b></span>|\n| [LuckPool](https://luckpool.net/verus/)     |  1% |\n| [ZergPool](https://zergpool.com/)        | 0.5% |\n| [CiscoTech](https://vrsc.ciscotech.dk/)     |  1% |\n| [LePool](http://vrsc.lepool.com.cn:8088/)    |  1% |\n| [Zhuaao](http://www.zhuaao.com:8880/)      |  1% |\n| [AlphatechIT](https://verus.alphatechit.co.uk/) | 0.2% |\n| [Wattpool](https://wattpool.net/ui/verus/stats) | 0.5% |\n| [011Data](https://verusna.011data.com/) | 0.5% |\n| [vipor.net](https://vipor.net) | 0.1% |\n| [cloudiko.io](https://cloudiko.io) | 0% |", "./raw_text_input_docs/start-mining.md"], ["Are there any GPU mining software options available for Verus?", "No, there are no GPU mining software options available for Verus yet.", "| OS   |  Name | Version |   Download |\n| :------ | ------: | ------: | -----------: |\n| Windows | CCminer | v3.8.3a | [Download](https://github.com/monkins1010/ccminer/releases/tag/v3.8.3a) |\n| macOS (Apple silicon)| CCminer | -- | not (yet) available |\n| Linux  | CCminer | v3.8.3a | [Download](https://github.com/Oink70/ccminer-verus/releases/tag/v3.8.3a-CPU) |\n| ARM   | CCminer | v3.8.3a | [Download](https://github.com/Oink70/ccminer-verus/releases/tag/v3.8.3a-CPU) |\n\n### \ud83d\udcf1 Mobile\nStart mining with your phone.\n\n**VerusMiner** [Download here](https://pangz-lab.github.io/verusminer/)\n\n### GPU\n\nNo software yet.\n\n## Mining Pools\n\n| Pool Name                    | Fee % |\n| :---------------------------------------------- | ----: |\n| [Verus Pool](https://pool.verus.io/) <span style=\"color:green\">Fees donated to the Verus foundation</span>   |  <span style=\"color:green\"> <b>5%</b></span>|\n| [LuckPool](https://luckpool.net/verus/)     |  1% |\n| [ZergPool](https://zergpool.com/)        | 0.5% |\n| [CiscoTech](https://vrsc.ciscotech.dk/)     |  1% |\n| [LePool](http://vrsc.lepool.com.cn:8088/)    |  1% |\n| [Zhuaao](http://www.zhuaao.com:8880/)      |  1% |\n| [AlphatechIT](https://verus.alphatechit.co.uk/) | 0.2% |\n| [Wattpool](https://wattpool.net/ui/verus/stats) | 0.5% |\n| [011Data](https://verusna.011data.com/) | 0.5% |\n| [vipor.net](https://vipor.net) | 0.1% |\n| [cloudiko.io](https://cloudiko.io) | 0% |", "./raw_text_input_docs/start-mining.md"], ["What are some available mining pools for Verus, and what are their fees?", "Some available mining pools for Verus are:\n\n* Verus Pool (5% fee, with fees donated to the Verus foundation)\n* LuckPool (1% fee)\n* ZergPool (0.5% fee)\n* CiscoTech (1% fee)\n* LePool (1% fee)\n* Zhuaao (1% fee)\n* AlphatechIT (0.2% fee)\n* Wattpool (0.5% fee)\n* 011Data (0.5% fee)\n* vipor.net (0.1% fee)\n* cloudiko.io (0% fee)\n\nPlease note that fees may be subject to change, and it's always a good idea to check the pool's website for the most up-to-date information.", "| OS   |  Name | Version |   Download |\n| :------ | ------: | ------: | -----------: |\n| Windows | CCminer | v3.8.3a | [Download](https://github.com/monkins1010/ccminer/releases/tag/v3.8.3a) |\n| macOS (Apple silicon)| CCminer | -- | not (yet) available |\n| Linux  | CCminer | v3.8.3a | [Download](https://github.com/Oink70/ccminer-verus/releases/tag/v3.8.3a-CPU) |\n| ARM   | CCminer | v3.8.3a | [Download](https://github.com/Oink70/ccminer-verus/releases/tag/v3.8.3a-CPU) |\n\n### \ud83d\udcf1 Mobile\nStart mining with your phone.\n\n**VerusMiner** [Download here](https://pangz-lab.github.io/verusminer/)\n\n### GPU\n\nNo software yet.\n\n## Mining Pools\n\n| Pool Name                    | Fee % |\n| :---------------------------------------------- | ----: |\n| [Verus Pool](https://pool.verus.io/) <span style=\"color:green\">Fees donated to the Verus foundation</span>   |  <span style=\"color:green\"> <b>5%</b></span>|\n| [LuckPool](https://luckpool.net/verus/)     |  1% |\n| [ZergPool](https://zergpool.com/)        | 0.5% |\n| [CiscoTech](https://vrsc.ciscotech.dk/)     |  1% |\n| [LePool](http://vrsc.lepool.com.cn:8088/)    |  1% |\n| [Zhuaao](http://www.zhuaao.com:8880/)      |  1% |\n| [AlphatechIT](https://verus.alphatechit.co.uk/) | 0.2% |\n| [Wattpool](https://wattpool.net/ui/verus/stats) | 0.5% |\n| [011Data](https://verusna.011data.com/) | 0.5% |\n| [vipor.net](https://vipor.net) | 0.1% |\n| [cloudiko.io](https://cloudiko.io) | 0% |", "./raw_text_input_docs/start-mining.md"]]], [["User:: I'm trying to understand VDXF objects better. Can you tell me what the purpose of the VDXF Key in a VDXF object is?", "AI Assistant:: The VDXF Key is a unique, 20-byte identifier that serves as a human-readable string to identify the type of data represented by the VDXF object. It's an important component that helps identify what kind of data is stored within the VDXF object.", "User:: Got it! What are the main components of a VDXF object that need to be serialized?", "AI Assistant:: The three main components of a VDXF object that need to be serialized are:\n\n1. **VDXF Key**: a 20-byte fixed-length slice encoded using Base58Check.\n2. **Version**: serialized using variable integer encoding to optimize space.\n3. **Data**: the actual content stored within the VDXF object, which can be any form of data (structured or unstructured) that needs to be serialized.\n\nThese components are essential for creating a valid VDXF object.", "User:: What happens during the serialization process of a VDXF object?", "AI Assistant:: During the serialization process, the structured data within the VDXF object is converted into a byte stream. This involves encoding the VDXF key, version, and actual data into bytes. It's an important step that allows the VDXF object to be stored or transmitted efficiently.", "User:: What is the purpose of the version component in a VDXF object?", "AI Assistant:: The version component ensures that the serialized data can be correctly interpreted by systems aware of different versioning. This allows for compatibility and ensures that the data can be accurately reconstructed during deserialization. It's a crucial component that helps prevent versioning issues.", "User:: What happens during the deserialization process of a VDXF object?", "AI Assistant:: During the deserialization process, the byte stream is converted back into structured data according to the VDXF format specification. This involves reading the byte stream, extracting and decoding the VDXF key, version, and data components, and reconstructing the original structured data. It's the reverse of the serialization process, and it's essential for retrieving the original data from a VDXF object.", "User:: Can you give an example of how VDXF is used in a real-world project?", "AI Assistant:: Yes, the CHIPS project, a decentralized poker platform, uses VDXF in conjunction with VerusID. You can learn more about how they use VDXF and VerusID in their documentation. It's a great example of how VDXF can be applied in a practical setting."], "AI Assistant", "", "N/A", [["What is the purpose of the VDXF Key in a VDXF object?", "The VDXF Key is a unique, 20-byte identifier that serves as a human-readable string to identify the type of data represented by the VDXF object.", "- **VDXF Key**: A unique, 20 byte identifier for the VDXF object, that can be represented as a human readable string. This key is essential for identifying the type of data the VDXF object represents.\n- **Version**: Indicates the version of the VDXF object.\n- **Data**: The actual content stored within the VDXF object. This can be any form of data, structured or unstructured, that needs to be serialized.\n\n### Serialization Process\n\n![image-verusid-login](/images/vdxf-bytes.svg)\n\nThe serialization process involves converting the structured data within the VDXF object into a byte stream. This includes encoding the VDXF key, version, and actual data into bytes.\n\n#### Components Encoding\n\n- **VDXF Key**: 20 byte fixed length slice encoded using Base58Check\n- **Version**: Serialized using variable integer encoding to optimize space. The version ensures that the serialized data can be correctly interpreted by systems aware of different versioning.\n- **Data**: The actual data is serialized into a byte buffer. The format and encoding of this data can vary widely depending on the type of data being serialized and the intended use case.\n\n### Deserialization Process\n\nDeserialization is the reverse of serialization, where the byte stream is converted back into structured data according to the VDXF format specification. This process involves reading the byte stream, extracting and decoding the VDXF key, version, and data components, and reconstructing the original structured data.\n\n::: tip VDXF in Action\nLearn how the CHIPS project (decentralized poker) uses [VerusID](https://github.com/chips-blockchain/bet/blob/verus_test/docs/verus_migration/id_creation_process.md) and [VDXF](https://github.com/chips-blockchain/bet/blob/verus_test/docs/verus_migration/ids_keys_data.md)", "./raw_text_input_docs/README_vdxf.md"], ["What are the main components of a VDXF object that need to be serialized?", "The three main components of a VDXF object that need to be serialized are:\n\n1. **VDXF Key**: a 20-byte fixed-length slice encoded using Base58Check.\n2. **Version**: serialized using variable integer encoding to optimize space.\n3. **Data**: the actual content stored within the VDXF object, which can be any form of data (structured or unstructured) that needs to be serialized.", "- **VDXF Key**: A unique, 20 byte identifier for the VDXF object, that can be represented as a human readable string. This key is essential for identifying the type of data the VDXF object represents.\n- **Version**: Indicates the version of the VDXF object.\n- **Data**: The actual content stored within the VDXF object. This can be any form of data, structured or unstructured, that needs to be serialized.\n\n### Serialization Process\n\n![image-verusid-login](/images/vdxf-bytes.svg)\n\nThe serialization process involves converting the structured data within the VDXF object into a byte stream. This includes encoding the VDXF key, version, and actual data into bytes.\n\n#### Components Encoding\n\n- **VDXF Key**: 20 byte fixed length slice encoded using Base58Check\n- **Version**: Serialized using variable integer encoding to optimize space. The version ensures that the serialized data can be correctly interpreted by systems aware of different versioning.\n- **Data**: The actual data is serialized into a byte buffer. The format and encoding of this data can vary widely depending on the type of data being serialized and the intended use case.\n\n### Deserialization Process\n\nDeserialization is the reverse of serialization, where the byte stream is converted back into structured data according to the VDXF format specification. This process involves reading the byte stream, extracting and decoding the VDXF key, version, and data components, and reconstructing the original structured data.\n\n::: tip VDXF in Action\nLearn how the CHIPS project (decentralized poker) uses [VerusID](https://github.com/chips-blockchain/bet/blob/verus_test/docs/verus_migration/id_creation_process.md) and [VDXF](https://github.com/chips-blockchain/bet/blob/verus_test/docs/verus_migration/ids_keys_data.md)", "./raw_text_input_docs/README_vdxf.md"], ["What happens during the serialization process of a VDXF object?", "During the serialization process, the structured data within the VDXF object is converted into a byte stream. This involves encoding the VDXF key, version, and actual data into bytes.", "- **VDXF Key**: A unique, 20 byte identifier for the VDXF object, that can be represented as a human readable string. This key is essential for identifying the type of data the VDXF object represents.\n- **Version**: Indicates the version of the VDXF object.\n- **Data**: The actual content stored within the VDXF object. This can be any form of data, structured or unstructured, that needs to be serialized.\n\n### Serialization Process\n\n![image-verusid-login](/images/vdxf-bytes.svg)\n\nThe serialization process involves converting the structured data within the VDXF object into a byte stream. This includes encoding the VDXF key, version, and actual data into bytes.\n\n#### Components Encoding\n\n- **VDXF Key**: 20 byte fixed length slice encoded using Base58Check\n- **Version**: Serialized using variable integer encoding to optimize space. The version ensures that the serialized data can be correctly interpreted by systems aware of different versioning.\n- **Data**: The actual data is serialized into a byte buffer. The format and encoding of this data can vary widely depending on the type of data being serialized and the intended use case.\n\n### Deserialization Process\n\nDeserialization is the reverse of serialization, where the byte stream is converted back into structured data according to the VDXF format specification. This process involves reading the byte stream, extracting and decoding the VDXF key, version, and data components, and reconstructing the original structured data.\n\n::: tip VDXF in Action\nLearn how the CHIPS project (decentralized poker) uses [VerusID](https://github.com/chips-blockchain/bet/blob/verus_test/docs/verus_migration/id_creation_process.md) and [VDXF](https://github.com/chips-blockchain/bet/blob/verus_test/docs/verus_migration/ids_keys_data.md)", "./raw_text_input_docs/README_vdxf.md"], ["What is the purpose of the version component in a VDXF object?", "The version component ensures that the serialized data can be correctly interpreted by systems aware of different versioning. This allows for compatibility and ensures that the data can be accurately reconstructed during deserialization.", "- **VDXF Key**: A unique, 20 byte identifier for the VDXF object, that can be represented as a human readable string. This key is essential for identifying the type of data the VDXF object represents.\n- **Version**: Indicates the version of the VDXF object.\n- **Data**: The actual content stored within the VDXF object. This can be any form of data, structured or unstructured, that needs to be serialized.\n\n### Serialization Process\n\n![image-verusid-login](/images/vdxf-bytes.svg)\n\nThe serialization process involves converting the structured data within the VDXF object into a byte stream. This includes encoding the VDXF key, version, and actual data into bytes.\n\n#### Components Encoding\n\n- **VDXF Key**: 20 byte fixed length slice encoded using Base58Check\n- **Version**: Serialized using variable integer encoding to optimize space. The version ensures that the serialized data can be correctly interpreted by systems aware of different versioning.\n- **Data**: The actual data is serialized into a byte buffer. The format and encoding of this data can vary widely depending on the type of data being serialized and the intended use case.\n\n### Deserialization Process\n\nDeserialization is the reverse of serialization, where the byte stream is converted back into structured data according to the VDXF format specification. This process involves reading the byte stream, extracting and decoding the VDXF key, version, and data components, and reconstructing the original structured data.\n\n::: tip VDXF in Action\nLearn how the CHIPS project (decentralized poker) uses [VerusID](https://github.com/chips-blockchain/bet/blob/verus_test/docs/verus_migration/id_creation_process.md) and [VDXF](https://github.com/chips-blockchain/bet/blob/verus_test/docs/verus_migration/ids_keys_data.md)", "./raw_text_input_docs/README_vdxf.md"], ["What happens during the deserialization process of a VDXF object?", "During the deserialization process, the byte stream is converted back into structured data according to the VDXF format specification. This involves reading the byte stream, extracting and decoding the VDXF key, version, and data components, and reconstructing the original structured data.", "- **VDXF Key**: A unique, 20 byte identifier for the VDXF object, that can be represented as a human readable string. This key is essential for identifying the type of data the VDXF object represents.\n- **Version**: Indicates the version of the VDXF object.\n- **Data**: The actual content stored within the VDXF object. This can be any form of data, structured or unstructured, that needs to be serialized.\n\n### Serialization Process\n\n![image-verusid-login](/images/vdxf-bytes.svg)\n\nThe serialization process involves converting the structured data within the VDXF object into a byte stream. This includes encoding the VDXF key, version, and actual data into bytes.\n\n#### Components Encoding\n\n- **VDXF Key**: 20 byte fixed length slice encoded using Base58Check\n- **Version**: Serialized using variable integer encoding to optimize space. The version ensures that the serialized data can be correctly interpreted by systems aware of different versioning.\n- **Data**: The actual data is serialized into a byte buffer. The format and encoding of this data can vary widely depending on the type of data being serialized and the intended use case.\n\n### Deserialization Process\n\nDeserialization is the reverse of serialization, where the byte stream is converted back into structured data according to the VDXF format specification. This process involves reading the byte stream, extracting and decoding the VDXF key, version, and data components, and reconstructing the original structured data.\n\n::: tip VDXF in Action\nLearn how the CHIPS project (decentralized poker) uses [VerusID](https://github.com/chips-blockchain/bet/blob/verus_test/docs/verus_migration/id_creation_process.md) and [VDXF](https://github.com/chips-blockchain/bet/blob/verus_test/docs/verus_migration/ids_keys_data.md)", "./raw_text_input_docs/README_vdxf.md"], ["Can you give an example of how VDXF is used in a real-world project?", "Yes, the CHIPS project, a decentralized poker platform, uses VDXF in conjunction with VerusID. You can learn more about how they use VDXF and VerusID in their documentation.", "- **VDXF Key**: A unique, 20 byte identifier for the VDXF object, that can be represented as a human readable string. This key is essential for identifying the type of data the VDXF object represents.\n- **Version**: Indicates the version of the VDXF object.\n- **Data**: The actual content stored within the VDXF object. This can be any form of data, structured or unstructured, that needs to be serialized.\n\n### Serialization Process\n\n![image-verusid-login](/images/vdxf-bytes.svg)\n\nThe serialization process involves converting the structured data within the VDXF object into a byte stream. This includes encoding the VDXF key, version, and actual data into bytes.\n\n#### Components Encoding\n\n- **VDXF Key**: 20 byte fixed length slice encoded using Base58Check\n- **Version**: Serialized using variable integer encoding to optimize space. The version ensures that the serialized data can be correctly interpreted by systems aware of different versioning.\n- **Data**: The actual data is serialized into a byte buffer. The format and encoding of this data can vary widely depending on the type of data being serialized and the intended use case.\n\n### Deserialization Process\n\nDeserialization is the reverse of serialization, where the byte stream is converted back into structured data according to the VDXF format specification. This process involves reading the byte stream, extracting and decoding the VDXF key, version, and data components, and reconstructing the original structured data.\n\n::: tip VDXF in Action\nLearn how the CHIPS project (decentralized poker) uses [VerusID](https://github.com/chips-blockchain/bet/blob/verus_test/docs/verus_migration/id_creation_process.md) and [VDXF](https://github.com/chips-blockchain/bet/blob/verus_test/docs/verus_migration/ids_keys_data.md)", "./raw_text_input_docs/README_vdxf.md"]]], [["User:: Hey there, I've got a question about exporting currencies from Verus to Ethereum. How can I export a currency from Verus to Ethereum as an ERC-20?", "AI Assistant:: You can export a currency from Verus to Ethereum as an ERC-20 using the Verus-Ethereum Bridge. This can be done with the `sendcurrency` command on the Verus command line interface. The command should be in the following format:\n\n``` json\n./verus -chain=VRSCTEST sendcurrency \"myVerusID@\" '[{\n\"address\":\"0x85a7dE2278E52327471e174AeeB280cdFdC6A68a\",\n\"currency\":\"myCurrency\",\n\"amount\":0,\n\"exportto\":\"veth\",\n\"exportcurrency\":true,\n\"feecurrency\":\"veth\"\n}]'\n```\n\nDo you have any questions about this command or the process in general?", "User:: Actually, I do. What's the purpose of the `exportto` and `exportcurrency` parameters in the `sendcurrency` command when exporting a currency to Ethereum?", "AI Assistant:: The `exportto` parameter specifies that the currency should be exported to Ethereum (as \"veth\"), and the `exportcurrency` parameter indicates that the currency should be exported as an ERC-20 token.\n\nDoes that make sense? Do you have any more questions about these parameters or the export process?", "User:: What happens after I export a currency to Ethereum using the Verus-Ethereum Bridge?", "AI Assistant:: After you export a currency to Ethereum using the Verus-Ethereum Bridge, you need to wait for the bridge to be notarized to the block height where you exported the currency. Once this is done, you can select the exported currency from the token dropdown on the Verus-Ethereum Bridge website.\n\nIs that clear? Do you have any more questions about the process after exporting a currency?", "User:: Finally, can I use the Verus-Ethereum Bridge to export any currency on Verus to Ethereum as an ERC-20?", "AI Assistant:: Yes, any currency on Verus can be exported to Ethereum as an ERC-20 using the Verus-Ethereum Bridge.\n\nSo, you can export any currency you have on Verus to Ethereum, giving you more flexibility and options for using your digital assets."], "AI Assistant", "", "N/A", [["How can I export a currency from Verus to Ethereum as an ERC-20?", "You can export a currency from Verus to Ethereum as an ERC-20 using the Verus-Ethereum Bridge. This can be done with the `sendcurrency` command on the Verus command line interface. The command should be in the following format:\n\n``` json\n./verus -chain=VRSCTEST sendcurrency \"myVerusID@\" '[{\n  \"address\":\"0x85a7dE2278E52327471e174AeeB280cdFdC6A68a\", \n  \"currency\":\"myCurrency\", \n  \"amount\":0, \n  \"exportto\":\"veth\", \n  \"exportcurrency\":true, \n  \"feecurrency\":\"veth\"\n}]'\n```", "# Export currency to Ethereum (as ERC-20)\n\nAny currency on Verus can be exported to Ethereum as an ERC-20. The currency can then be used in the complete Ethereum ecosystem, and on the Verus network. Sending to and from Verus and Ethereum couldn't be easier. [More on the Verus-Ethereum Bridge.](/eth-bridge/)\n\n::: tip \u2194\ufe0f Verus-Ethereum Bridge \ud83d\udc68\u200d\ud83d\udd27 For Testnet!\n[\ud83d\udc49 Access the Verus-Ethereum Testnet Bridge](https://ethbridge.verustest.net/) (\u26a0\ufe0f Goerli testnet)\n:::\n\n::: tip \u2194\ufe0f Verus-Ethereum Bridge \u2705 For Mainnet!\n[\ud83d\udc49 Access the Verus-Ethereum Mainnet Bridge](https://eth.verusbridge.io)\n:::\n\n### Exporting the currency\nNow, let\u2019s export a currency from Verus to Ethereum as an ERC-20 over the non-custodial bridge. We must have enough funds to pay for the export.\n\nThe command to export a currency to Ethereum as an ERC-20:\n\n``` json\n./verus -chain=VRSCTEST sendcurrency \"myVerusID@\" '[{\n  \"address\":\"0x85a7dE2278E52327471e174AeeB280cdFdC6A68a\", \n  \"currency\":\"myCurrency\", \n  \"amount\":0, \n  \"exportto\":\"veth\", \n  \"exportcurrency\":true, \n  \"feecurrency\":\"veth\"\n}]'\n```\n\nLet's break the command down with what you can change.\n\n**``myVerusID@``** is the from- and change-address. Can be a VerusID, R-address or i-address. The fee to pay for the export comes from here, and if you paid too much fees the rest will be returned here.\n\n**``address``** You can fill in any ETH-address here, it is actually not important what is here.\n\n**``currency``** is the name of the currency you wish to export as an ERC-20. E.g. `MyCurrency`, `MyCurrency.vETH`.\n\n### Wait for notarization\n\nAfter the bridge has been notarized to the blockheight where you have exported the currency, you can choose it from the token dropdown on the [Bridge website mainnet](https://eth.verusbridge.io) or [Bridge website Goerli testnet](https://ethbridge.verustest.net/)", "./raw_text_input_docs/export-to-eth.md"], ["What is the purpose of the `exportto` and `exportcurrency` parameters in the `sendcurrency` command when exporting a currency to Ethereum?", "The `exportto` parameter specifies that the currency should be exported to Ethereum (as \"veth\"), and the `exportcurrency` parameter indicates that the currency should be exported as an ERC-20 token.", "# Export currency to Ethereum (as ERC-20)\n\nAny currency on Verus can be exported to Ethereum as an ERC-20. The currency can then be used in the complete Ethereum ecosystem, and on the Verus network. Sending to and from Verus and Ethereum couldn't be easier. [More on the Verus-Ethereum Bridge.](/eth-bridge/)\n\n::: tip \u2194\ufe0f Verus-Ethereum Bridge \ud83d\udc68\u200d\ud83d\udd27 For Testnet!\n[\ud83d\udc49 Access the Verus-Ethereum Testnet Bridge](https://ethbridge.verustest.net/) (\u26a0\ufe0f Goerli testnet)\n:::\n\n::: tip \u2194\ufe0f Verus-Ethereum Bridge \u2705 For Mainnet!\n[\ud83d\udc49 Access the Verus-Ethereum Mainnet Bridge](https://eth.verusbridge.io)\n:::\n\n### Exporting the currency\nNow, let\u2019s export a currency from Verus to Ethereum as an ERC-20 over the non-custodial bridge. We must have enough funds to pay for the export.\n\nThe command to export a currency to Ethereum as an ERC-20:\n\n``` json\n./verus -chain=VRSCTEST sendcurrency \"myVerusID@\" '[{\n  \"address\":\"0x85a7dE2278E52327471e174AeeB280cdFdC6A68a\", \n  \"currency\":\"myCurrency\", \n  \"amount\":0, \n  \"exportto\":\"veth\", \n  \"exportcurrency\":true, \n  \"feecurrency\":\"veth\"\n}]'\n```\n\nLet's break the command down with what you can change.\n\n**``myVerusID@``** is the from- and change-address. Can be a VerusID, R-address or i-address. The fee to pay for the export comes from here, and if you paid too much fees the rest will be returned here.\n\n**``address``** You can fill in any ETH-address here, it is actually not important what is here.\n\n**``currency``** is the name of the currency you wish to export as an ERC-20. E.g. `MyCurrency`, `MyCurrency.vETH`.\n\n### Wait for notarization\n\nAfter the bridge has been notarized to the blockheight where you have exported the currency, you can choose it from the token dropdown on the [Bridge website mainnet](https://eth.verusbridge.io) or [Bridge website Goerli testnet](https://ethbridge.verustest.net/)", "./raw_text_input_docs/export-to-eth.md"], ["What happens after I export a currency to Ethereum using the Verus-Ethereum Bridge?", "After you export a currency to Ethereum using the Verus-Ethereum Bridge, you need to wait for the bridge to be notarized to the block height where you exported the currency. Once this is done, you can select the exported currency from the token dropdown on the Verus-Ethereum Bridge website.", "# Export currency to Ethereum (as ERC-20)\n\nAny currency on Verus can be exported to Ethereum as an ERC-20. The currency can then be used in the complete Ethereum ecosystem, and on the Verus network. Sending to and from Verus and Ethereum couldn't be easier. [More on the Verus-Ethereum Bridge.](/eth-bridge/)\n\n::: tip \u2194\ufe0f Verus-Ethereum Bridge \ud83d\udc68\u200d\ud83d\udd27 For Testnet!\n[\ud83d\udc49 Access the Verus-Ethereum Testnet Bridge](https://ethbridge.verustest.net/) (\u26a0\ufe0f Goerli testnet)\n:::\n\n::: tip \u2194\ufe0f Verus-Ethereum Bridge \u2705 For Mainnet!\n[\ud83d\udc49 Access the Verus-Ethereum Mainnet Bridge](https://eth.verusbridge.io)\n:::\n\n### Exporting the currency\nNow, let\u2019s export a currency from Verus to Ethereum as an ERC-20 over the non-custodial bridge. We must have enough funds to pay for the export.\n\nThe command to export a currency to Ethereum as an ERC-20:\n\n``` json\n./verus -chain=VRSCTEST sendcurrency \"myVerusID@\" '[{\n  \"address\":\"0x85a7dE2278E52327471e174AeeB280cdFdC6A68a\", \n  \"currency\":\"myCurrency\", \n  \"amount\":0, \n  \"exportto\":\"veth\", \n  \"exportcurrency\":true, \n  \"feecurrency\":\"veth\"\n}]'\n```\n\nLet's break the command down with what you can change.\n\n**``myVerusID@``** is the from- and change-address. Can be a VerusID, R-address or i-address. The fee to pay for the export comes from here, and if you paid too much fees the rest will be returned here.\n\n**``address``** You can fill in any ETH-address here, it is actually not important what is here.\n\n**``currency``** is the name of the currency you wish to export as an ERC-20. E.g. `MyCurrency`, `MyCurrency.vETH`.\n\n### Wait for notarization\n\nAfter the bridge has been notarized to the blockheight where you have exported the currency, you can choose it from the token dropdown on the [Bridge website mainnet](https://eth.verusbridge.io) or [Bridge website Goerli testnet](https://ethbridge.verustest.net/)", "./raw_text_input_docs/export-to-eth.md"], ["Can I use the Verus-Ethereum Bridge to export any currency on Verus to Ethereum as an ERC-20?", "Yes, any currency on Verus can be exported to Ethereum as an ERC-20 using the Verus-Ethereum Bridge.", "# Export currency to Ethereum (as ERC-20)\n\nAny currency on Verus can be exported to Ethereum as an ERC-20. The currency can then be used in the complete Ethereum ecosystem, and on the Verus network. Sending to and from Verus and Ethereum couldn't be easier. [More on the Verus-Ethereum Bridge.](/eth-bridge/)\n\n::: tip \u2194\ufe0f Verus-Ethereum Bridge \ud83d\udc68\u200d\ud83d\udd27 For Testnet!\n[\ud83d\udc49 Access the Verus-Ethereum Testnet Bridge](https://ethbridge.verustest.net/) (\u26a0\ufe0f Goerli testnet)\n:::\n\n::: tip \u2194\ufe0f Verus-Ethereum Bridge \u2705 For Mainnet!\n[\ud83d\udc49 Access the Verus-Ethereum Mainnet Bridge](https://eth.verusbridge.io)\n:::\n\n### Exporting the currency\nNow, let\u2019s export a currency from Verus to Ethereum as an ERC-20 over the non-custodial bridge. We must have enough funds to pay for the export.\n\nThe command to export a currency to Ethereum as an ERC-20:\n\n``` json\n./verus -chain=VRSCTEST sendcurrency \"myVerusID@\" '[{\n  \"address\":\"0x85a7dE2278E52327471e174AeeB280cdFdC6A68a\", \n  \"currency\":\"myCurrency\", \n  \"amount\":0, \n  \"exportto\":\"veth\", \n  \"exportcurrency\":true, \n  \"feecurrency\":\"veth\"\n}]'\n```\n\nLet's break the command down with what you can change.\n\n**``myVerusID@``** is the from- and change-address. Can be a VerusID, R-address or i-address. The fee to pay for the export comes from here, and if you paid too much fees the rest will be returned here.\n\n**``address``** You can fill in any ETH-address here, it is actually not important what is here.\n\n**``currency``** is the name of the currency you wish to export as an ERC-20. E.g. `MyCurrency`, `MyCurrency.vETH`.\n\n### Wait for notarization\n\nAfter the bridge has been notarized to the blockheight where you have exported the currency, you can choose it from the token dropdown on the [Bridge website mainnet](https://eth.verusbridge.io) or [Bridge website Goerli testnet](https://ethbridge.verustest.net/)", "./raw_text_input_docs/export-to-eth.md"]]], [["User:: I'm trying to learn more about VerusID. What are some of the key features of VerusID?", "AI Assistant:: VerusID has several key features, including multisig capabilities, private messaging, SSID login, and SubID registration. These features provide a robust and flexible digital identity system. Do you have any specific questions about these features or would you like me to explain them in more detail?", "User:: That's a great start! I'd love to know more about multisig. What is the purpose of multisig in VerusID?", "AI Assistant:: Multisig in VerusID allows multiple organizations or people to manage a single VerusID, providing a way for multiple parties to jointly control and manage a digital identity. This feature is particularly useful for organizations or groups that require multiple sign-offs or approvals for certain actions. Would you like me to explain more about how multisig works in VerusID?", "User:: That makes sense. I'm also curious about SubIDs. What are SubIDs, and how do they relate to VerusIDs?", "AI Assistant:: SubIDs are a type of ID that can be registered under each launched currency and token. They have the same features as VerusIDs, but they cannot launch blockchains, currencies, or tokens. SubIDs provide a way to create a hierarchical structure of IDs, with VerusIDs at the top level and SubIDs beneath them. This hierarchical structure allows for a more organized and scalable digital identity system. Do you have any more questions about SubIDs or their relationship with VerusIDs?"], "AI Assistant", "", "N/A", [["What are some of the key features of VerusID?", "VerusID has several key features, including multisig capabilities, private messaging, SSID login, and SubID registration.", "les, hashes and messages. | \n| **Multisig** | Multiple organizations or people can manage a VerusID. | \n| **Messages** | Send and receive completely private messages through VerusID private addresses. | \n| [**SSID login**](/verusid/login/) | Login to supported VerusID services without ever needing a password. |\n| **SubID** | Under each launched currency and token subIDs can be registered. SubIDs have the exact same features as VerusIDs, although they can not launch blockchains, currencies or tokens. |", "./raw_text_input_docs/README_addresses.md"], ["What is the purpose of multisig in VerusID?", "Multisig in VerusID allows multiple organizations or people to manage a single VerusID, providing a way for multiple parties to jointly control and manage a digital identity.", "les, hashes and messages. | \n| **Multisig** | Multiple organizations or people can manage a VerusID. | \n| **Messages** | Send and receive completely private messages through VerusID private addresses. | \n| [**SSID login**](/verusid/login/) | Login to supported VerusID services without ever needing a password. |\n| **SubID** | Under each launched currency and token subIDs can be registered. SubIDs have the exact same features as VerusIDs, although they can not launch blockchains, currencies or tokens. |", "./raw_text_input_docs/README_addresses.md"], ["What are SubIDs, and how do they relate to VerusIDs?", "SubIDs are a type of ID that can be registered under each launched currency and token. They have the same features as VerusIDs, but they cannot launch blockchains, currencies, or tokens. SubIDs provide a way to create a hierarchical structure of IDs, with VerusIDs at the top level and SubIDs beneath them.", "les, hashes and messages. | \n| **Multisig** | Multiple organizations or people can manage a VerusID. | \n| **Messages** | Send and receive completely private messages through VerusID private addresses. | \n| [**SSID login**](/verusid/login/) | Login to supported VerusID services without ever needing a password. |\n| **SubID** | Under each launched currency and token subIDs can be registered. SubIDs have the exact same features as VerusIDs, although they can not launch blockchains, currencies or tokens. |", "./raw_text_input_docs/README_addresses.md"]]], [["User:: I'm trying to create a currency in Verus, but I'm a bit unclear about how it works. What happens to the funds needed for initial contributions when defining a currency in Verus?", "AI Assistant:: When defining a currency in Verus, the funds needed for initial contributions must be in the rootID. After the preconversion time frame is over and the currency is launched, the rootID receives an amount of the launched currency. Does that make sense?", "User:: That helps, thanks. I've also heard about basket currencies, but I'm not entirely sure how they work. What is a basket currency, and how is it different from a simple token currency?", "AI Assistant:: A basket currency is a type of currency that can hold reserves of other currencies. It is different from a simple token currency in that it has an \"initialsupply\" parameter, which is required for basket currencies (options:33). This parameter does not work with simple token currencies. Do you want to know more about basket currencies?", "User:: Yes, please. What is the purpose of the \"initialsupply\" parameter when defining a basket currency in Verus?", "AI Assistant:: The \"initialsupply\" parameter is a required parameter for basket currencies (options:33). It specifies the initial supply of the currency during the preconversion time frame, before the currency is launched. People preconverting into the reserves receive from this initial supply. Do you have any more questions about basket currencies?", "User:: What happens if \"initialcontributions\" and/or preconversions are not specified when defining a basket currency in Verus?", "AI Assistant:: If \"initialcontributions\" and/or preconversions are not specified when defining a basket currency, the initial supply cannot go anywhere, and the currency is bricked. Make sure to specify these parameters correctly to avoid this issue.", "User:: Got it. One more question about basket currencies. How does the supply of a basket currency change immediately after it is launched in Verus?", "AI Assistant:: Immediately after a basket currency is launched, the supply can be larger due to \"preallocations\". This means that the initial supply is allocated to specific addresses, which can increase the overall supply of the currency."], "AI Assistant", "", "N/A", [["What happens to the funds needed for initial contributions when defining a currency in Verus?", "The funds needed for initial contributions must be in the rootID when defining the currency. After the preconversion time frame is over and the currency is launched, the rootID receives an amount of the launched currency.", "The funds to initially contribute need to be in the rootID when defining the currency. After the preconversion time frame is over and the currency launched, the rootID has received an amount of the launched currency.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CommunityBasket\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"CoinCommunity\"], \n \"initialcontributions\":[10,200], \n \"initialsupply\":100, \n \"preallocations\":[{\"Jane@\":100},{\"John@\":50}]\n}'\n```\n\u261d\ufe0f This is a basket currency called CommunityBasket. The launcher of the currency wanted to make initial contributions to its reserves. At the moment of broadcasting the currency to the network, there needed to be 210 VRSCTEST and 200 CoinCommunity in the rootID. The initial supply of 100 went to the rootID (if there weren\u2019t any more preconverters). At the same time of the launch, 100 CoinCommunity was minted into Jane@ and 50 into John@, this lowered the reserve ratio of the currency.### **\"initialsupply\"**\nA required parameter for basket currencies (`options:33`). This parameter does not work with simple token currencies. This is the initial supply during the preconversion time frame, before the currency is launched. People preconverting into the reserves receive from this initial supply.\u26a0\ufe0f IMPORTANT: `\"initialcontributions\"` and/or preconversions are required, otherwise the initial supply can not go anywhere and the currency is bricked.Immediately after the currency is launched, the supply can be larger due to `\"preallocations\"`.", "./raw_text_input_docs/launch-currency.md"], ["What is a basket currency, and how is it different from a simple token currency?", "A basket currency is a type of currency that can hold reserves of other currencies. It is different from a simple token currency in that it has an \"initialsupply\" parameter, which is required for basket currencies (options:33). This parameter does not work with simple token currencies.", "The funds to initially contribute need to be in the rootID when defining the currency. After the preconversion time frame is over and the currency launched, the rootID has received an amount of the launched currency.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CommunityBasket\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"CoinCommunity\"], \n \"initialcontributions\":[10,200], \n \"initialsupply\":100, \n \"preallocations\":[{\"Jane@\":100},{\"John@\":50}]\n}'\n```\n\u261d\ufe0f This is a basket currency called CommunityBasket. The launcher of the currency wanted to make initial contributions to its reserves. At the moment of broadcasting the currency to the network, there needed to be 210 VRSCTEST and 200 CoinCommunity in the rootID. The initial supply of 100 went to the rootID (if there weren\u2019t any more preconverters). At the same time of the launch, 100 CoinCommunity was minted into Jane@ and 50 into John@, this lowered the reserve ratio of the currency.### **\"initialsupply\"**\nA required parameter for basket currencies (`options:33`). This parameter does not work with simple token currencies. This is the initial supply during the preconversion time frame, before the currency is launched. People preconverting into the reserves receive from this initial supply.\u26a0\ufe0f IMPORTANT: `\"initialcontributions\"` and/or preconversions are required, otherwise the initial supply can not go anywhere and the currency is bricked.Immediately after the currency is launched, the supply can be larger due to `\"preallocations\"`.", "./raw_text_input_docs/launch-currency.md"], ["What is the purpose of the \"initialsupply\" parameter when defining a basket currency in Verus?", "The \"initialsupply\" parameter is a required parameter for basket currencies (options:33). It specifies the initial supply of the currency during the preconversion time frame, before the currency is launched. People preconverting into the reserves receive from this initial supply.", "The funds to initially contribute need to be in the rootID when defining the currency. After the preconversion time frame is over and the currency launched, the rootID has received an amount of the launched currency.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CommunityBasket\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"CoinCommunity\"], \n \"initialcontributions\":[10,200], \n \"initialsupply\":100, \n \"preallocations\":[{\"Jane@\":100},{\"John@\":50}]\n}'\n```\n\u261d\ufe0f This is a basket currency called CommunityBasket. The launcher of the currency wanted to make initial contributions to its reserves. At the moment of broadcasting the currency to the network, there needed to be 210 VRSCTEST and 200 CoinCommunity in the rootID. The initial supply of 100 went to the rootID (if there weren\u2019t any more preconverters). At the same time of the launch, 100 CoinCommunity was minted into Jane@ and 50 into John@, this lowered the reserve ratio of the currency.### **\"initialsupply\"**\nA required parameter for basket currencies (`options:33`). This parameter does not work with simple token currencies. This is the initial supply during the preconversion time frame, before the currency is launched. People preconverting into the reserves receive from this initial supply.\u26a0\ufe0f IMPORTANT: `\"initialcontributions\"` and/or preconversions are required, otherwise the initial supply can not go anywhere and the currency is bricked.Immediately after the currency is launched, the supply can be larger due to `\"preallocations\"`.", "./raw_text_input_docs/launch-currency.md"], ["What happens if \"initialcontributions\" and/or preconversions are not specified when defining a basket currency in Verus?", "If \"initialcontributions\" and/or preconversions are not specified when defining a basket currency, the initial supply cannot go anywhere, and the currency is bricked.", "The funds to initially contribute need to be in the rootID when defining the currency. After the preconversion time frame is over and the currency launched, the rootID has received an amount of the launched currency.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CommunityBasket\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"CoinCommunity\"], \n \"initialcontributions\":[10,200], \n \"initialsupply\":100, \n \"preallocations\":[{\"Jane@\":100},{\"John@\":50}]\n}'\n```\n\u261d\ufe0f This is a basket currency called CommunityBasket. The launcher of the currency wanted to make initial contributions to its reserves. At the moment of broadcasting the currency to the network, there needed to be 210 VRSCTEST and 200 CoinCommunity in the rootID. The initial supply of 100 went to the rootID (if there weren\u2019t any more preconverters). At the same time of the launch, 100 CoinCommunity was minted into Jane@ and 50 into John@, this lowered the reserve ratio of the currency.### **\"initialsupply\"**\nA required parameter for basket currencies (`options:33`). This parameter does not work with simple token currencies. This is the initial supply during the preconversion time frame, before the currency is launched. People preconverting into the reserves receive from this initial supply.\u26a0\ufe0f IMPORTANT: `\"initialcontributions\"` and/or preconversions are required, otherwise the initial supply can not go anywhere and the currency is bricked.Immediately after the currency is launched, the supply can be larger due to `\"preallocations\"`.", "./raw_text_input_docs/launch-currency.md"], ["How does the supply of a basket currency change immediately after it is launched in Verus?", "Immediately after a basket currency is launched, the supply can be larger due to \"preallocations\". This means that the initial supply is allocated to specific addresses, which can increase the overall supply of the currency.", "The funds to initially contribute need to be in the rootID when defining the currency. After the preconversion time frame is over and the currency launched, the rootID has received an amount of the launched currency.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CommunityBasket\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"CoinCommunity\"], \n \"initialcontributions\":[10,200], \n \"initialsupply\":100, \n \"preallocations\":[{\"Jane@\":100},{\"John@\":50}]\n}'\n```\n\u261d\ufe0f This is a basket currency called CommunityBasket. The launcher of the currency wanted to make initial contributions to its reserves. At the moment of broadcasting the currency to the network, there needed to be 210 VRSCTEST and 200 CoinCommunity in the rootID. The initial supply of 100 went to the rootID (if there weren\u2019t any more preconverters). At the same time of the launch, 100 CoinCommunity was minted into Jane@ and 50 into John@, this lowered the reserve ratio of the currency.### **\"initialsupply\"**\nA required parameter for basket currencies (`options:33`). This parameter does not work with simple token currencies. This is the initial supply during the preconversion time frame, before the currency is launched. People preconverting into the reserves receive from this initial supply.\u26a0\ufe0f IMPORTANT: `\"initialcontributions\"` and/or preconversions are required, otherwise the initial supply can not go anywhere and the currency is bricked.Immediately after the currency is launched, the supply can be larger due to `\"preallocations\"`.", "./raw_text_input_docs/launch-currency.md"]]], [["User:: I'm interested in launching a currency on Verus, but I'm not sure where to start. Where can I get help setting up a currency launch on Verus?", "AI Assistant:: You can get help setting up a currency launch on Verus by joining the Verus Discord #pbaas-development channel, where the community is happy to assist. They can guide you through the process and answer any questions you might have. Would you like me to explain the basic format of a currency definition on Verus?", "User:: Yes, please! I'd love to know more about that. What is the basic format of a currency definition on Verus, and how is it processed?", "AI Assistant:: A simple currency definition on Verus looks like this:\n```json\n./verus -chain=VRSCTEST definecurrency '{\n\"name\":\"MyBrand\",\n\"options\":32,\n\"proofprotocol\":2,\n\"preallocations\":[{\"Klaus@\":100}]\n}'\n```\nWhen you run this command, it is processed into a HEX, which is then broadcasted to the network. The fees for this transaction are taken from the rootID and distributed among the block producers. After a minimum of 20 blocks, the currency is launched and ready to be used by the worldwide network. Do you have any questions about this process?", "User:: What is the purpose of a VerusID namespace in launching a currency on Verus or a PBaaS chain?", "AI Assistant:: A VerusID namespace is required to launch a currency on Verus or a PBaaS chain. This namespace is a VerusID that serves as the name of the currency (e.g., \"MyBrand@\"). The controller of this VerusID is the only one who can create a currency with that name, and they can only do so once. The namespace can also have subIDs (e.g., \"product.MyBrand@\", \"user.MyBrand@\"). This namespace ensures that the currency name is unique and tied to a specific VerusID.", "User:: What are the costs associated with launching a currency on Verus, and how are they paid?", "AI Assistant:: On Verus, the cost of registering a VerusID is between 20 and 100 VRSC, and the cost of launching a currency is 200 VRSC. These costs are always paid in the chain's native coin (to the worldwide miners and stakers). Note that these costs may differ on other PBaaS chains, as the chain launcher can define their own costs for VerusID registrations and currency launches. It's essential to consider these costs when planning your currency launch.", "User:: I'm curious about defining options for a currency on Verus. How do I do that?", "AI Assistant:: To define a currency on Verus, you choose options that suit your needs and combine them by adding their corresponding numbers together in the currency definition. The available currency options are listed, and you can select the ones that fit your currency's requirements. For example, you might want to enable private transactions or allow for token burning. The options you choose will determine the features and behavior of your currency."], "AI Assistant", "", "N/A", [["Where can I get help setting up a currency launch on Verus?", "You can get help setting up a currency launch on Verus by joining the Verus Discord #pbaas-development channel, where the community is happy to assist.", "# Launch currencies::: warning Need help setting up a currency launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::![image-currencies-launching](/images/launching-currencies.png)This is what a (simple) currency definition looks like:``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```The above command is processed into a HEX, and that HEX is broadcasted to the network. Simultaneously the fees are taken from the rootID (and distributed among the block producers) and after waiting a minimum period of 20 blocks the currency is launched and ready to be used by the worldwide network.## VerusID namespace\nTo launch a currency on Verus (and any other PBaaS-chain) a namespace is needed. That namespace is a VerusID. The namespace is the name of the currency (e.g. ``MyBrand@``). That namespace can also have subIDs (e.g. ``product.MyBrand@``, ``user.MyBrand@``). The controller of this VerusID is the only one who can create a currency of that name, and they can only do so once.On Verus a VerusID registration costs between 20 and 100 VRSC, and the launch of a currency costs 200 VRSC. These costs are always paid in the chain\u2019s native coin (to the worldwide miners and stakers). On other PBaaS-chains these costs can differ since the chain launcher can define its own costs for VerusID registrations and currency launches.## Defining options\nTo define a currency, choose options. Then combine these options to whatever the currency needs to be. Just add the numbers together in the currency definition. The currency options are listed below.", "./raw_text_input_docs/launch-currency.md"], ["What is the basic format of a currency definition on Verus, and how is it processed?", "A simple currency definition on Verus looks like this:\n```json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\nWhen you run this command, it is processed into a HEX, which is then broadcasted to the network. The fees for this transaction are taken from the rootID and distributed among the block producers. After a minimum of 20 blocks, the currency is launched and ready to be used by the worldwide network.", "# Launch currencies::: warning Need help setting up a currency launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::![image-currencies-launching](/images/launching-currencies.png)This is what a (simple) currency definition looks like:``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```The above command is processed into a HEX, and that HEX is broadcasted to the network. Simultaneously the fees are taken from the rootID (and distributed among the block producers) and after waiting a minimum period of 20 blocks the currency is launched and ready to be used by the worldwide network.## VerusID namespace\nTo launch a currency on Verus (and any other PBaaS-chain) a namespace is needed. That namespace is a VerusID. The namespace is the name of the currency (e.g. ``MyBrand@``). That namespace can also have subIDs (e.g. ``product.MyBrand@``, ``user.MyBrand@``). The controller of this VerusID is the only one who can create a currency of that name, and they can only do so once.On Verus a VerusID registration costs between 20 and 100 VRSC, and the launch of a currency costs 200 VRSC. These costs are always paid in the chain\u2019s native coin (to the worldwide miners and stakers). On other PBaaS-chains these costs can differ since the chain launcher can define its own costs for VerusID registrations and currency launches.## Defining options\nTo define a currency, choose options. Then combine these options to whatever the currency needs to be. Just add the numbers together in the currency definition. The currency options are listed below.", "./raw_text_input_docs/launch-currency.md"], ["What is the purpose of a VerusID namespace in launching a currency on Verus or a PBaaS chain?", "A VerusID namespace is required to launch a currency on Verus or a PBaaS chain. This namespace is a VerusID that serves as the name of the currency (e.g., \"MyBrand@\"). The controller of this VerusID is the only one who can create a currency with that name, and they can only do so once. The namespace can also have subIDs (e.g., \"product.MyBrand@\", \"user.MyBrand@\").", "# Launch currencies::: warning Need help setting up a currency launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::![image-currencies-launching](/images/launching-currencies.png)This is what a (simple) currency definition looks like:``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```The above command is processed into a HEX, and that HEX is broadcasted to the network. Simultaneously the fees are taken from the rootID (and distributed among the block producers) and after waiting a minimum period of 20 blocks the currency is launched and ready to be used by the worldwide network.## VerusID namespace\nTo launch a currency on Verus (and any other PBaaS-chain) a namespace is needed. That namespace is a VerusID. The namespace is the name of the currency (e.g. ``MyBrand@``). That namespace can also have subIDs (e.g. ``product.MyBrand@``, ``user.MyBrand@``). The controller of this VerusID is the only one who can create a currency of that name, and they can only do so once.On Verus a VerusID registration costs between 20 and 100 VRSC, and the launch of a currency costs 200 VRSC. These costs are always paid in the chain\u2019s native coin (to the worldwide miners and stakers). On other PBaaS-chains these costs can differ since the chain launcher can define its own costs for VerusID registrations and currency launches.## Defining options\nTo define a currency, choose options. Then combine these options to whatever the currency needs to be. Just add the numbers together in the currency definition. The currency options are listed below.", "./raw_text_input_docs/launch-currency.md"], ["What are the costs associated with launching a currency on Verus, and how are they paid?", "On Verus, the cost of registering a VerusID is between 20 and 100 VRSC, and the cost of launching a currency is 200 VRSC. These costs are always paid in the chain's native coin (to the worldwide miners and stakers). Note that these costs may differ on other PBaaS chains, as the chain launcher can define their own costs for VerusID registrations and currency launches.", "# Launch currencies::: warning Need help setting up a currency launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::![image-currencies-launching](/images/launching-currencies.png)This is what a (simple) currency definition looks like:``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```The above command is processed into a HEX, and that HEX is broadcasted to the network. Simultaneously the fees are taken from the rootID (and distributed among the block producers) and after waiting a minimum period of 20 blocks the currency is launched and ready to be used by the worldwide network.## VerusID namespace\nTo launch a currency on Verus (and any other PBaaS-chain) a namespace is needed. That namespace is a VerusID. The namespace is the name of the currency (e.g. ``MyBrand@``). That namespace can also have subIDs (e.g. ``product.MyBrand@``, ``user.MyBrand@``). The controller of this VerusID is the only one who can create a currency of that name, and they can only do so once.On Verus a VerusID registration costs between 20 and 100 VRSC, and the launch of a currency costs 200 VRSC. These costs are always paid in the chain\u2019s native coin (to the worldwide miners and stakers). On other PBaaS-chains these costs can differ since the chain launcher can define its own costs for VerusID registrations and currency launches.## Defining options\nTo define a currency, choose options. Then combine these options to whatever the currency needs to be. Just add the numbers together in the currency definition. The currency options are listed below.", "./raw_text_input_docs/launch-currency.md"], ["How do I define options for a currency on Verus?", "To define a currency on Verus, you choose options that suit your needs and combine them by adding their corresponding numbers together in the currency definition. The available currency options are listed, and you can select the ones that fit your currency's requirements.", "# Launch currencies::: warning Need help setting up a currency launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::![image-currencies-launching](/images/launching-currencies.png)This is what a (simple) currency definition looks like:``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```The above command is processed into a HEX, and that HEX is broadcasted to the network. Simultaneously the fees are taken from the rootID (and distributed among the block producers) and after waiting a minimum period of 20 blocks the currency is launched and ready to be used by the worldwide network.## VerusID namespace\nTo launch a currency on Verus (and any other PBaaS-chain) a namespace is needed. That namespace is a VerusID. The namespace is the name of the currency (e.g. ``MyBrand@``). That namespace can also have subIDs (e.g. ``product.MyBrand@``, ``user.MyBrand@``). The controller of this VerusID is the only one who can create a currency of that name, and they can only do so once.On Verus a VerusID registration costs between 20 and 100 VRSC, and the launch of a currency costs 200 VRSC. These costs are always paid in the chain\u2019s native coin (to the worldwide miners and stakers). On other PBaaS-chains these costs can differ since the chain launcher can define its own costs for VerusID registrations and currency launches.## Defining options\nTo define a currency, choose options. Then combine these options to whatever the currency needs to be. Just add the numbers together in the currency definition. The currency options are listed below.", "./raw_text_input_docs/launch-currency.md"]]], [["User:: I've been looking into Verus and currencies, and I had a question about basket currencies. What is a basket currency in Verus, and how is it defined?", "AI Assistant:: A basket currency in Verus is a type of currency that holds reserves of multiple currencies. It is defined by specifying the currencies that make up its reserves, along with their respective weights. For example, the command `./verus -chain=VRSCTEST definecurrency '{ \"name\":\"MyBusiness\", \"options\":33, \"currencies\":[\"vrsctest\",\"BusinessBrand\",\"DiscountBrand\"], \"initialsupply\":100, \"weights\":[0.5,0.25,0.25] }'` defines a basket currency called \"MyBusiness\" that holds reserves of VRSCTEST, BusinessBrand, and DiscountBrand, with weights of 0.5, 0.25, and 0.25, respectively.", "User:: That's helpful, thanks! I was also wondering about the \"startblock\" parameter when defining a currency. What is the purpose of that?", "AI Assistant:: The \"startblock\" parameter is used to specify the block height at which a currency should be launched. There is a preconversion time frame before the currency is launched, during which various currencies can be converted into its reserves. The preconversion time frame is always 20 blocks, and cannot be less. If the \"startblock\" parameter is omitted, the currency will launch 20 blocks after it is defined.", "User:: I understand. I also had a question about centralized currencies in Verus. What happens to a centralized currency when the \"endblock\" is reached?", "AI Assistant:: When the \"endblock\" is reached for a centralized currency (one with `proofprotocol:2`), it turns the currency into a decentralized one, meaning that no more minting and burning capabilities are available.", "User:: Finally, I was looking at the \"idregistrationfees\" parameter when defining a currency. What is the purpose of that?", "AI Assistant:: The \"idregistrationfees\" parameter is used to change the costs of registering subIDs under the rootID. The default registration fee is 100. When it's a decentralized currency, the fees are burned, making the basket currency worth more because there is less supply, yet the reserves stay the same. When it's centralized, the fees go to the rootID. Does that make sense?"], "AI Assistant", "", "N/A", [["What is a basket currency in Verus, and how is it defined?", "A basket currency in Verus is a type of currency that holds reserves of multiple currencies. It is defined by specifying the currencies that make up its reserves, along with their respective weights. For example, the command `./verus -chain=VRSCTEST definecurrency '{ \"name\":\"MyBusiness\", \"options\":33, \"currencies\":[\"vrsctest\",\"BusinessBrand\",\"DiscountBrand\"], \"initialsupply\":100, \"weights\":[0.5,0.25,0.25] }'` defines a basket currency called \"MyBusiness\" that holds reserves of VRSCTEST, BusinessBrand, and DiscountBrand, with weights of 0.5, 0.25, and 0.25, respectively.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBusiness\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"BusinessBrand\",\"DiscountBrand\"], \n \"initialsupply\":100, \n \"weights\":[0.5,0.25,0.25]\n}'\n```\n\u261d\ufe0f This is a basket currency called MyBusiness. During the preconversion time frame there are various currencies that can be converted into its reserves. They have different weights to them. 0.5 for VRSCTEST, 0.25 for both BusinessBrand and DiscountBrand.### **\"startblock\"**\nUse this parameter to define the block height when the currency should be launched. There is a preconversion time frame before the currency is launched. When omitting this parameter it uses a 20 block preconversion time frame before the currency is launched.The preconversion time frame is always 20 blocks, this can not be less.\u26a0\ufe0f IMPORTANT: Fill in the absolute block height you want the currency to launch on.### **\"endblock\"**\nEndblock can not be defined on basket currencies. It does nothing. It could be set as a signal to software that might use the basket currency.It can be set on centralized (`proofprotcol:2`) simple token currencies. When the endblock is reached, it turns the centralized currency into a decentralized one (no more minting and burning capabilities.)### **\"idregistrationfees\"**\nUse this parameter to change the costs of registering subIDs under the rootID. The default registration fee is `100`.\nWhen it\u2019s a decentralized currency the fees are burned (and the basket currency becomes worth more because there is less supply, yet the reserves stay the same), when it\u2019s centralized the fees go to the rootID.", "./raw_text_input_docs/launch-currency.md"], ["What is the purpose of the \"startblock\" parameter when defining a currency in Verus?", "The \"startblock\" parameter is used to specify the block height at which a currency should be launched. There is a preconversion time frame before the currency is launched, during which various currencies can be converted into its reserves. The preconversion time frame is always 20 blocks, and cannot be less. If the \"startblock\" parameter is omitted, the currency will launch 20 blocks after it is defined.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBusiness\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"BusinessBrand\",\"DiscountBrand\"], \n \"initialsupply\":100, \n \"weights\":[0.5,0.25,0.25]\n}'\n```\n\u261d\ufe0f This is a basket currency called MyBusiness. During the preconversion time frame there are various currencies that can be converted into its reserves. They have different weights to them. 0.5 for VRSCTEST, 0.25 for both BusinessBrand and DiscountBrand.### **\"startblock\"**\nUse this parameter to define the block height when the currency should be launched. There is a preconversion time frame before the currency is launched. When omitting this parameter it uses a 20 block preconversion time frame before the currency is launched.The preconversion time frame is always 20 blocks, this can not be less.\u26a0\ufe0f IMPORTANT: Fill in the absolute block height you want the currency to launch on.### **\"endblock\"**\nEndblock can not be defined on basket currencies. It does nothing. It could be set as a signal to software that might use the basket currency.It can be set on centralized (`proofprotcol:2`) simple token currencies. When the endblock is reached, it turns the centralized currency into a decentralized one (no more minting and burning capabilities.)### **\"idregistrationfees\"**\nUse this parameter to change the costs of registering subIDs under the rootID. The default registration fee is `100`.\nWhen it\u2019s a decentralized currency the fees are burned (and the basket currency becomes worth more because there is less supply, yet the reserves stay the same), when it\u2019s centralized the fees go to the rootID.", "./raw_text_input_docs/launch-currency.md"], ["What happens to a centralized currency when the \"endblock\" is reached in Verus?", "When the \"endblock\" is reached for a centralized currency (one with `proofprotocol:2`), it turns the currency into a decentralized one, meaning that no more minting and burning capabilities are available.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBusiness\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"BusinessBrand\",\"DiscountBrand\"], \n \"initialsupply\":100, \n \"weights\":[0.5,0.25,0.25]\n}'\n```\n\u261d\ufe0f This is a basket currency called MyBusiness. During the preconversion time frame there are various currencies that can be converted into its reserves. They have different weights to them. 0.5 for VRSCTEST, 0.25 for both BusinessBrand and DiscountBrand.### **\"startblock\"**\nUse this parameter to define the block height when the currency should be launched. There is a preconversion time frame before the currency is launched. When omitting this parameter it uses a 20 block preconversion time frame before the currency is launched.The preconversion time frame is always 20 blocks, this can not be less.\u26a0\ufe0f IMPORTANT: Fill in the absolute block height you want the currency to launch on.### **\"endblock\"**\nEndblock can not be defined on basket currencies. It does nothing. It could be set as a signal to software that might use the basket currency.It can be set on centralized (`proofprotcol:2`) simple token currencies. When the endblock is reached, it turns the centralized currency into a decentralized one (no more minting and burning capabilities.)### **\"idregistrationfees\"**\nUse this parameter to change the costs of registering subIDs under the rootID. The default registration fee is `100`.\nWhen it\u2019s a decentralized currency the fees are burned (and the basket currency becomes worth more because there is less supply, yet the reserves stay the same), when it\u2019s centralized the fees go to the rootID.", "./raw_text_input_docs/launch-currency.md"], ["What is the purpose of the \"idregistrationfees\" parameter when defining a currency in Verus?", "The \"idregistrationfees\" parameter is used to change the costs of registering subIDs under the rootID. The default registration fee is 100. When it's a decentralized currency, the fees are burned, making the basket currency worth more because there is less supply, yet the reserves stay the same. When it's centralized, the fees go to the rootID.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBusiness\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"BusinessBrand\",\"DiscountBrand\"], \n \"initialsupply\":100, \n \"weights\":[0.5,0.25,0.25]\n}'\n```\n\u261d\ufe0f This is a basket currency called MyBusiness. During the preconversion time frame there are various currencies that can be converted into its reserves. They have different weights to them. 0.5 for VRSCTEST, 0.25 for both BusinessBrand and DiscountBrand.### **\"startblock\"**\nUse this parameter to define the block height when the currency should be launched. There is a preconversion time frame before the currency is launched. When omitting this parameter it uses a 20 block preconversion time frame before the currency is launched.The preconversion time frame is always 20 blocks, this can not be less.\u26a0\ufe0f IMPORTANT: Fill in the absolute block height you want the currency to launch on.### **\"endblock\"**\nEndblock can not be defined on basket currencies. It does nothing. It could be set as a signal to software that might use the basket currency.It can be set on centralized (`proofprotcol:2`) simple token currencies. When the endblock is reached, it turns the centralized currency into a decentralized one (no more minting and burning capabilities.)### **\"idregistrationfees\"**\nUse this parameter to change the costs of registering subIDs under the rootID. The default registration fee is `100`.\nWhen it\u2019s a decentralized currency the fees are burned (and the basket currency becomes worth more because there is less supply, yet the reserves stay the same), when it\u2019s centralized the fees go to the rootID.", "./raw_text_input_docs/launch-currency.md"]]], [["User:: I'm interested in registering a VerusID or subID, but I'm not sure about the costs. What is the cost of registering a.vETH subID?", "AI Assistant:: The cost of registering a.vETH subID is 0.01 vETH worth of Bridge.vETH. Would you like to know more about the registration process or how to get started with VerusIDs?", "User:: That's actually my next question. How can I register a VerusID or subID?", "AI Assistant:: To register a VerusID or subID, you can follow the instructions on the VerusID creation page. It's a straightforward process that will guide you through the necessary steps. If you need any help or have questions during the process, feel free to ask.", "User:: I'm also interested in exploring the Verus-Ethereum Bridge and the associated tokens. What are the contract addresses for the Verus-Ethereum Bridge smart contract, VRSC token, and Bridge.vETH token on the Ethereum mainnet?", "AI Assistant:: Here are the contract addresses you're looking for:\n\n* Verus-Ethereum Bridge smart contract: 0x71518580f36FeCEFfE0721F06bA4703218cD7F63\n* VRSC token: 0xBc2738BA63882891094C99e59a02141Ca1a1C36a\n* Bridge.vETH token: 0xE6052Dcc60573561ECef2D9A4C0FEA6d3aC5B9A2\n\nYou can use these addresses to interact with the Verus-Ethereum Bridge and the associated tokens on the Ethereum network. If you have any more questions or need further assistance, I'm here to help!"], "AI Assistant", "", "N/A", [["What is the cost of registering a.vETH subID?", "The cost of registering a.vETH subID is 0.01 vETH worth of Bridge.vETH.", "## .vETH subID\nRegister a .vETH subID to launch a currency with a 1-to-1 mapping of an ERC-20. The cost is 0.01 vETH worth of Bridge.vETH.\n\n[Learn here how to register a VerusID / subID.](/verusid/verusid-create/)\n\n## Contract addresses\n\n| What       |     Contract address      |\n| :------------------ | :----------------------------------------- |\n| Verus-Ethereum Bridge smart contract **mainnet**| [0x71518580f36FeCEFfE0721F06bA4703218cD7F63](https://etherscan.io/address/0x71518580f36FeCEFfE0721F06bA4703218cD7F63) |\n| **VRSC** token address| [0xBc2738BA63882891094C99E59a02141Ca1A1C36a](https://etherscan.io/token/0xbc2738ba63882891094c99e59a02141ca1a1c36a) |\n| **Bridge.vETH** token address| [0xE6052Dcc60573561ECef2D9A4C0FEA6d3aC5B9A2](https://etherscan.io/token/0xE6052Dcc60573561ECef2D9A4C0FEA6d3aC5B9A2) |", "./raw_text_input_docs/README_eth-bridge.md"], ["How can I register a VerusID or subID?", "You can register a VerusID or subID by following the instructions on the VerusID creation page.", "## .vETH subID\nRegister a .vETH subID to launch a currency with a 1-to-1 mapping of an ERC-20. The cost is 0.01 vETH worth of Bridge.vETH.\n\n[Learn here how to register a VerusID / subID.](/verusid/verusid-create/)\n\n## Contract addresses\n\n| What       |     Contract address      |\n| :------------------ | :----------------------------------------- |\n| Verus-Ethereum Bridge smart contract **mainnet**| [0x71518580f36FeCEFfE0721F06bA4703218cD7F63](https://etherscan.io/address/0x71518580f36FeCEFfE0721F06bA4703218cD7F63) |\n| **VRSC** token address| [0xBc2738BA63882891094C99E59a02141Ca1A1C36a](https://etherscan.io/token/0xbc2738ba63882891094c99e59a02141ca1a1c36a) |\n| **Bridge.vETH** token address| [0xE6052Dcc60573561ECef2D9A4C0FEA6d3aC5B9A2](https://etherscan.io/token/0xE6052Dcc60573561ECef2D9A4C0FEA6d3aC5B9A2) |", "./raw_text_input_docs/README_eth-bridge.md"], ["What are the contract addresses for the Verus-Ethereum Bridge smart contract, VRSC token, and Bridge.vETH token on the Ethereum mainnet?", "The contract addresses are:\n\n* Verus-Ethereum Bridge smart contract: 0x71518580f36FeCEFfE0721F06bA4703218cD7F63\n* VRSC token: 0xBc2738BA63882891094C99e59a02141Ca1a1C36a\n* Bridge.vETH token: 0xE6052Dcc60573561ECef2D9A4C0FEA6d3aC5B9A2\n\nThese addresses can be used to interact with the Verus-Ethereum Bridge and the associated tokens on the Ethereum network.", "## .vETH subID\nRegister a .vETH subID to launch a currency with a 1-to-1 mapping of an ERC-20. The cost is 0.01 vETH worth of Bridge.vETH.\n\n[Learn here how to register a VerusID / subID.](/verusid/verusid-create/)\n\n## Contract addresses\n\n| What       |     Contract address      |\n| :------------------ | :----------------------------------------- |\n| Verus-Ethereum Bridge smart contract **mainnet**| [0x71518580f36FeCEFfE0721F06bA4703218cD7F63](https://etherscan.io/address/0x71518580f36FeCEFfE0721F06bA4703218cD7F63) |\n| **VRSC** token address| [0xBc2738BA63882891094C99E59a02141Ca1A1C36a](https://etherscan.io/token/0xbc2738ba63882891094c99e59a02141ca1a1c36a) |\n| **Bridge.vETH** token address| [0xE6052Dcc60573561ECef2D9A4C0FEA6d3aC5B9A2](https://etherscan.io/token/0xE6052Dcc60573561ECef2D9A4C0FEA6d3aC5B9A2) |", "./raw_text_input_docs/README_eth-bridge.md"]]], [["User:: Hi, I've been looking into Verus and I'm curious about the features of a blockchain launched with it. Can you tell me a bit more about that?", "AI Assistant:: A blockchain launched with Verus has several key features that make it unique and powerful. These include full interoperability with other blockchains, customizability to meet specific needs, independence from other chains, and more. Some other notable features are L1 multi-currency support, L1 DeFi capabilities, L1 VerusID support for self-sovereign identities, L1 privacy with zk-SNARKs, 51% hash attack resistance, high performance, and scalability through deploying more interoperable chains.\n\nWould you like me to elaborate on any of these features?", "User:: That's really interesting. I'm particularly curious about VerusID. What is the purpose of VerusID in a Verus-launched blockchain?", "AI Assistant:: VerusID is a key feature of a Verus-launched blockchain that enables self-sovereign identities. It provides a namespace for currencies, tokens, and PBaaS-blockchains, allowing for friendly-name addresses. Additionally, VerusID is revocable, recoverable, and can be bound to any type of data, including NFTs and profiles. This gives users a high level of control and flexibility over their digital identities.\n\nDo you have any more questions about VerusID or its role in a Verus-launched blockchain?", "User:: Another feature that caught my eye is the 51% hash attack resistance. How does Verus achieve that?", "AI Assistant:: Verus achieves 51% hash attack resistance through a consensus mechanism that combines 50% proof-of-work and 50% proof-of-stake. This hybrid approach provides a robust defense against 51% hash attacks, making the network more secure for users.\n\nWould you like more information on how this consensus mechanism works?", "User:: I'm also curious about the cost of launching a PBaaS-chain on Verus. What's the cost, and how does it work?", "AI Assistant:: The cost of launching a PBaaS-chain on Verus is 10,000 VRSC, which is split equally between the Verus block producers and the block producers of the newly launched chain. This cost is a one-time payment that allows users to create their own custom blockchain with a high degree of flexibility and control.\n\nDo you have any more questions about the cost or the process of launching a PBaaS-chain?", "User:: Finally, what's the benefit of using Verus to launch a blockchain? Why would someone choose Verus over other options?", "AI Assistant:: The benefit of using Verus to launch a blockchain is that it enables any user with a VerusID to create their own token currency or full-fledged blockchain without needing to program. This allows for easy creation and deployment of custom blockchains that are interoperable with the Verus chain, giving users a high degree of flexibility and control over their digital assets."], "AI Assistant", "", "N/A", [["What are the key features of a blockchain launched with Verus?", "A blockchain launched with Verus has several key features, including:\n\n1. Full interoperability with other blockchains\n2. Customizability to meet specific needs\n3. Independence from other chains\n4. L1 Multi-currency support for basket currencies and simple token currencies\n5. L1 DeFi capabilities with consensus layer AMMs and a fully decentralized marketplace\n6. L1 VerusID support for self-sovereign identities and namespace for currencies, tokens, and PBaaS-blockchains\n7. L1 Privacy with zk-SNARKs privacy technology\n8. 51% hash attack resistance through a 50% proof-of-work, 50% proof-of-stake consensus mechanism\n9. High performance with 75-800 TPS and adjustable block times\n10. Scalability through deploying more interoperable, interconnected PBaaS-chains", "# Introduction\nLaunch blockchains that are \u2705 **fully interoperable**, \u2705 **customizable** and \u2705 **independent**. Each blockchain launched has the following L1 features.| Feature | Details | \n| :-----| :------ | \n| [L1 Multi-currency](/currencies/) | Consensus layer basket currencies (e.g. liquidity pools) & simple token currencies, decentralized crowdfund mechanisms |\n| [L1 DeFi](/sendcurrency/) | Consensus layer AMMs, MEV-free, no front/back-running, solving all conversions simultaneously within a block & fully decentralized marketplace | \n| [L1 VerusID](/verusid/) | Consensus layer self-sovereign identities, namespace for currencies, tokens & PBaaS-blockchains, friendly-name addresses, revocable, recoverable, NFTs, profiles, can be bound to any type of data | \n| L1 Privacy | Consensus layer zk-SNARKs privacy technology |\n| 51% hash attack resistant | 50% proof-of-work, 50% proof-of-stake. [Read the paper here.](https://verus.io/papers/VerusPoP.pdf) |\n| 75 - 800 TPS | High performance blockchain, adjustable block times 10 secs - 2 mins |\n| Scaling | Scale out by deploying more interoperable, interconnected PBaaS-chains |It costs 10,000 VRSC to launch a PBaaS-chain. 5000 goes to the Verus block producers, 5000 goes to the block producers of the newly launched chain.## Launch without programming needed\nEnables any user with VerusID to create their own token currency or even full fledged, multi-currency, VerusID-issuing 50% PoW/50% PoS, [51% hash attack resistant](https://verus.io/papers/VerusPoP.pdf) blockchain that can send and receive from the Verus chain which launched it.", "./raw_text_input_docs/README_blockchains.md"], ["What is the purpose of VerusID in a Verus-launched blockchain?", "VerusID is a key feature of a Verus-launched blockchain that enables self-sovereign identities. It provides a namespace for currencies, tokens, and PBaaS-blockchains, allowing for friendly-name addresses. Additionally, VerusID is revocable, recoverable, and can be bound to any type of data, including NFTs and profiles.", "# Introduction\nLaunch blockchains that are \u2705 **fully interoperable**, \u2705 **customizable** and \u2705 **independent**. Each blockchain launched has the following L1 features.| Feature | Details | \n| :-----| :------ | \n| [L1 Multi-currency](/currencies/) | Consensus layer basket currencies (e.g. liquidity pools) & simple token currencies, decentralized crowdfund mechanisms |\n| [L1 DeFi](/sendcurrency/) | Consensus layer AMMs, MEV-free, no front/back-running, solving all conversions simultaneously within a block & fully decentralized marketplace | \n| [L1 VerusID](/verusid/) | Consensus layer self-sovereign identities, namespace for currencies, tokens & PBaaS-blockchains, friendly-name addresses, revocable, recoverable, NFTs, profiles, can be bound to any type of data | \n| L1 Privacy | Consensus layer zk-SNARKs privacy technology |\n| 51% hash attack resistant | 50% proof-of-work, 50% proof-of-stake. [Read the paper here.](https://verus.io/papers/VerusPoP.pdf) |\n| 75 - 800 TPS | High performance blockchain, adjustable block times 10 secs - 2 mins |\n| Scaling | Scale out by deploying more interoperable, interconnected PBaaS-chains |It costs 10,000 VRSC to launch a PBaaS-chain. 5000 goes to the Verus block producers, 5000 goes to the block producers of the newly launched chain.## Launch without programming needed\nEnables any user with VerusID to create their own token currency or even full fledged, multi-currency, VerusID-issuing 50% PoW/50% PoS, [51% hash attack resistant](https://verus.io/papers/VerusPoP.pdf) blockchain that can send and receive from the Verus chain which launched it.", "./raw_text_input_docs/README_blockchains.md"], ["How does Verus achieve 51% hash attack resistance?", "Verus achieves 51% hash attack resistance through a consensus mechanism that combines 50% proof-of-work and 50% proof-of-stake. This hybrid approach provides a robust defense against 51% hash attacks.", "# Introduction\nLaunch blockchains that are \u2705 **fully interoperable**, \u2705 **customizable** and \u2705 **independent**. Each blockchain launched has the following L1 features.| Feature | Details | \n| :-----| :------ | \n| [L1 Multi-currency](/currencies/) | Consensus layer basket currencies (e.g. liquidity pools) & simple token currencies, decentralized crowdfund mechanisms |\n| [L1 DeFi](/sendcurrency/) | Consensus layer AMMs, MEV-free, no front/back-running, solving all conversions simultaneously within a block & fully decentralized marketplace | \n| [L1 VerusID](/verusid/) | Consensus layer self-sovereign identities, namespace for currencies, tokens & PBaaS-blockchains, friendly-name addresses, revocable, recoverable, NFTs, profiles, can be bound to any type of data | \n| L1 Privacy | Consensus layer zk-SNARKs privacy technology |\n| 51% hash attack resistant | 50% proof-of-work, 50% proof-of-stake. [Read the paper here.](https://verus.io/papers/VerusPoP.pdf) |\n| 75 - 800 TPS | High performance blockchain, adjustable block times 10 secs - 2 mins |\n| Scaling | Scale out by deploying more interoperable, interconnected PBaaS-chains |It costs 10,000 VRSC to launch a PBaaS-chain. 5000 goes to the Verus block producers, 5000 goes to the block producers of the newly launched chain.## Launch without programming needed\nEnables any user with VerusID to create their own token currency or even full fledged, multi-currency, VerusID-issuing 50% PoW/50% PoS, [51% hash attack resistant](https://verus.io/papers/VerusPoP.pdf) blockchain that can send and receive from the Verus chain which launched it.", "./raw_text_input_docs/README_blockchains.md"], ["What is the cost of launching a PBaaS-chain on Verus?", "The cost of launching a PBaaS-chain on Verus is 10,000 VRSC, which is split equally between the Verus block producers and the block producers of the newly launched chain.", "# Introduction\nLaunch blockchains that are \u2705 **fully interoperable**, \u2705 **customizable** and \u2705 **independent**. Each blockchain launched has the following L1 features.| Feature | Details | \n| :-----| :------ | \n| [L1 Multi-currency](/currencies/) | Consensus layer basket currencies (e.g. liquidity pools) & simple token currencies, decentralized crowdfund mechanisms |\n| [L1 DeFi](/sendcurrency/) | Consensus layer AMMs, MEV-free, no front/back-running, solving all conversions simultaneously within a block & fully decentralized marketplace | \n| [L1 VerusID](/verusid/) | Consensus layer self-sovereign identities, namespace for currencies, tokens & PBaaS-blockchains, friendly-name addresses, revocable, recoverable, NFTs, profiles, can be bound to any type of data | \n| L1 Privacy | Consensus layer zk-SNARKs privacy technology |\n| 51% hash attack resistant | 50% proof-of-work, 50% proof-of-stake. [Read the paper here.](https://verus.io/papers/VerusPoP.pdf) |\n| 75 - 800 TPS | High performance blockchain, adjustable block times 10 secs - 2 mins |\n| Scaling | Scale out by deploying more interoperable, interconnected PBaaS-chains |It costs 10,000 VRSC to launch a PBaaS-chain. 5000 goes to the Verus block producers, 5000 goes to the block producers of the newly launched chain.## Launch without programming needed\nEnables any user with VerusID to create their own token currency or even full fledged, multi-currency, VerusID-issuing 50% PoW/50% PoS, [51% hash attack resistant](https://verus.io/papers/VerusPoP.pdf) blockchain that can send and receive from the Verus chain which launched it.", "./raw_text_input_docs/README_blockchains.md"], ["What is the benefit of using Verus to launch a blockchain?", "The benefit of using Verus to launch a blockchain is that it enables any user with a VerusID to create their own token currency or full-fledged blockchain without needing to program. This allows for easy creation and deployment of custom blockchains that are interoperable with the Verus chain.", "# Introduction\nLaunch blockchains that are \u2705 **fully interoperable**, \u2705 **customizable** and \u2705 **independent**. Each blockchain launched has the following L1 features.| Feature | Details | \n| :-----| :------ | \n| [L1 Multi-currency](/currencies/) | Consensus layer basket currencies (e.g. liquidity pools) & simple token currencies, decentralized crowdfund mechanisms |\n| [L1 DeFi](/sendcurrency/) | Consensus layer AMMs, MEV-free, no front/back-running, solving all conversions simultaneously within a block & fully decentralized marketplace | \n| [L1 VerusID](/verusid/) | Consensus layer self-sovereign identities, namespace for currencies, tokens & PBaaS-blockchains, friendly-name addresses, revocable, recoverable, NFTs, profiles, can be bound to any type of data | \n| L1 Privacy | Consensus layer zk-SNARKs privacy technology |\n| 51% hash attack resistant | 50% proof-of-work, 50% proof-of-stake. [Read the paper here.](https://verus.io/papers/VerusPoP.pdf) |\n| 75 - 800 TPS | High performance blockchain, adjustable block times 10 secs - 2 mins |\n| Scaling | Scale out by deploying more interoperable, interconnected PBaaS-chains |It costs 10,000 VRSC to launch a PBaaS-chain. 5000 goes to the Verus block producers, 5000 goes to the block producers of the newly launched chain.## Launch without programming needed\nEnables any user with VerusID to create their own token currency or even full fledged, multi-currency, VerusID-issuing 50% PoW/50% PoS, [51% hash attack resistant](https://verus.io/papers/VerusPoP.pdf) blockchain that can send and receive from the Verus chain which launched it.", "./raw_text_input_docs/README_blockchains.md"]]], [["User:: Hey, I'm trying to learn more about managing my VerusID. How can I lock a VerusID using the command line interface of Verus Desktop?", "AI Assistant:: You can lock a VerusID by running the `updateidentity` command with the necessary parameters. Here's an example:\n```json\nrun updateidentity\n'{\n\"name\":\"youridentityname\",\n\"minimumsignatures\":1,\n\"primaryaddresses\":[\"primary-address-comes-here\"],\n\"flags\":2,\n\"timelock\":10080\n}'\n```\nThis command locks the VerusID with a DelayLock, which requires a certain number of blocks to pass before the funds can be spent again. Do you have any questions about this process or would you like to know more about locking VerusIDs?", "User:: That makes sense, but what happens if I lock a VerusID and want to regain access to the funds?", "AI Assistant:: If you lock a VerusID, you can always revoke and recover it. Additionally, you can request an unlock by updating the identity with the necessary parameters, such as setting `flags` to 0. After requesting an unlock, you need to wait for the predetermined number of blocks to pass before you can spend the funds again. This way, you can ensure that your funds are protected, while still having control over your VerusID.", "User:: I see. How do I request an unlock for a locked VerusID?", "AI Assistant:: To request an unlock for a locked VerusID, you need to run the `updateidentity` command with the necessary parameters. Here's an example:\n```json\nrun updateidentity\n'{\n\"name\":\"youridentityname\",\n\"minimumsignatures\":1,\n\"primaryaddresses\":[\"primary-address-comes-here\"],\n\"flags\":0\n}'\n```\nThis command requests an unlock for the VerusID, and you need to wait for the predetermined number of blocks to pass before you can spend the funds again. Make sure to replace the placeholders with your actual VerusID name and primary address."], "AI Assistant", "", "N/A", [["How can I lock a VerusID using the command line interface of Verus Desktop?", "You can lock a VerusID by running the `updateidentity` command with the necessary parameters. Here's an example:\n```json\nrun updateidentity \n'{ \n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":2,\n  \"timelock\":10080\n  }'\n```\nThis command locks the VerusID with a DelayLock, which requires a certain number of blocks to pass before the funds can be spent again.", "``` json\nrun updateidentity \n'{ \n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":2,\n  \"timelock\":10080\n  }'\n```\n\nYou can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs. In the code snippet are the minimum requirements to update your VerusID with a lock.\n\n:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::\n\n### Request an unlock\nAbove you locked a VerusID with a DelayLock. Now let's request an unlock. When an unlock has been requested you have to wait the predetermined number of blocks before you can spend the funds again.\n\nFill in your VerusID ``name``, the ``primary address`` and set ``flags`` to 0. Now you only have to wait for your predetermined number of blocks (10,080 in our example) to run out so you can spend the funds again.\n\n``` json\nrun updateidentity \n'{ \n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":0\n  }'\n```\n\nYou can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs. In the code snippet are the minimum requirements to unlock your VerusID.", "./raw_text_input_docs/setup-vault.md"], ["What happens if I lock a VerusID and want to regain access to the funds?", "If you lock a VerusID, you can always revoke and recover it. Additionally, you can request an unlock by updating the identity with the necessary parameters, such as setting `flags` to 0. After requesting an unlock, you need to wait for the predetermined number of blocks to pass before you can spend the funds again.", "``` json\nrun updateidentity \n'{ \n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":2,\n  \"timelock\":10080\n  }'\n```\n\nYou can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs. In the code snippet are the minimum requirements to update your VerusID with a lock.\n\n:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::\n\n### Request an unlock\nAbove you locked a VerusID with a DelayLock. Now let's request an unlock. When an unlock has been requested you have to wait the predetermined number of blocks before you can spend the funds again.\n\nFill in your VerusID ``name``, the ``primary address`` and set ``flags`` to 0. Now you only have to wait for your predetermined number of blocks (10,080 in our example) to run out so you can spend the funds again.\n\n``` json\nrun updateidentity \n'{ \n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":0\n  }'\n```\n\nYou can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs. In the code snippet are the minimum requirements to unlock your VerusID.", "./raw_text_input_docs/setup-vault.md"], ["How do I request an unlock for a locked VerusID?", "To request an unlock for a locked VerusID, you need to run the `updateidentity` command with the necessary parameters. Here's an example:\n```json\nrun updateidentity \n'{ \n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":0\n  }'\n```\nThis command requests an unlock for the VerusID, and you need to wait for the predetermined number of blocks to pass before you can spend the funds again.", "``` json\nrun updateidentity \n'{ \n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":2,\n  \"timelock\":10080\n  }'\n```\n\nYou can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs. In the code snippet are the minimum requirements to update your VerusID with a lock.\n\n:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::\n\n### Request an unlock\nAbove you locked a VerusID with a DelayLock. Now let's request an unlock. When an unlock has been requested you have to wait the predetermined number of blocks before you can spend the funds again.\n\nFill in your VerusID ``name``, the ``primary address`` and set ``flags`` to 0. Now you only have to wait for your predetermined number of blocks (10,080 in our example) to run out so you can spend the funds again.\n\n``` json\nrun updateidentity \n'{ \n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":0\n  }'\n```\n\nYou can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs. In the code snippet are the minimum requirements to unlock your VerusID.", "./raw_text_input_docs/setup-vault.md"]]], [["User:: Hey, I've been reading about Verus and I'm interested in crowdfunding a new currency or blockchain launch. Can you tell me how Verus enables crowdfunding for new currency and blockchain launches?", "AI Assistant:: Verus allows for crowdfunding of new currency and blockchain launches by setting minimum levels of worldwide participation in preferred currencies on-chain. If the minimums are not met by the start time of the blockchain, all participants will automatically receive a refund of their pre-conversions, minus network fees. This ensures that participants are protected and that the launch is successful.", "User:: That sounds interesting. What kinds of launch options are available for crowdfunding a new currency or blockchain on Verus?", "AI Assistant:: Verus launch options include setting maximum participation levels in one or more currencies, offering pre-launch discounts, price-neutral pre-allocations to select IDs, and pre-launch discounts for early participants. Additionally, VerusIDs can be used to include vesting schedules in pre-allocations. This flexibility allows for a wide range of launch strategies and customization to fit your project's needs.", "User:: I see. So, what is the Verus multi-currency, multi-chain network, and what does it enable?", "AI Assistant:: The Verus multi-currency, multi-chain network is a decentralized network that allows the creation of an unlimited number of interoperable blockchains. This enables the creation of public and private blockchains that can interoperate with each other, with features such as decentralized bridge confirmation, merge mining, and staking. This network provides a robust and flexible infrastructure for blockchain projects.", "User:: That sounds powerful. What role do Notary IDs play in the Verus network, and how do they enable interoperability between blockchains?", "AI Assistant:: Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation. This enables public blockchains to be available for merge mining and staking, while also allowing for the creation of private, internal blockchains that can easily bridge public currencies onto an organization's internal network. Notary IDs are a key component of the Verus network, enabling seamless interoperability between blockchains.", "User:: I'm impressed. Is there a limit to the number of blockchains that can operate and interoperate on the Verus network?", "AI Assistant:: No, there is no limit to the number of blockchains that can continuously operate and interoperate on the Verus network. The Verus network model is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains. This means that the Verus network can support a vast ecosystem of blockchain projects, with no limits to growth or scalability."], "AI Assistant", "", "N/A", [["How does Verus enable crowdfunding for new currency and blockchain launches?", "Verus allows for crowdfunding of new currency and blockchain launches by setting minimum levels of worldwide participation in preferred currencies on-chain. If the minimums are not met by the start time of the blockchain, all participants will automatically receive a refund of their pre-conversions, minus network fees.", "## Crowdfunding currency and blockchain launches\nSet required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees.\n\nThe launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n\n## Interoperable, multichain network\nThe Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network.\n\nNotary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access.\n\nThere is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.", "./raw_text_input_docs/README_blockchains.md"], ["What kinds of launch options are available for crowdfunding a new currency or blockchain on Verus?", "Verus launch options include setting maximum participation levels in one or more currencies, offering pre-launch discounts, price-neutral pre-allocations to select IDs, and pre-launch discounts for early participants. Additionally, VerusIDs can be used to include vesting schedules in pre-allocations.", "## Crowdfunding currency and blockchain launches\nSet required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees.\n\nThe launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n\n## Interoperable, multichain network\nThe Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network.\n\nNotary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access.\n\nThere is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.", "./raw_text_input_docs/README_blockchains.md"], ["What is the Verus multi-currency, multi-chain network, and what does it enable?", "The Verus multi-currency, multi-chain network is a decentralized network that allows the creation of an unlimited number of interoperable blockchains. This enables the creation of public and private blockchains that can interoperate with each other, with features such as decentralized bridge confirmation, merge mining, and staking.", "## Crowdfunding currency and blockchain launches\nSet required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees.\n\nThe launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n\n## Interoperable, multichain network\nThe Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network.\n\nNotary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access.\n\nThere is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.", "./raw_text_input_docs/README_blockchains.md"], ["What role do Notary IDs play in the Verus network, and how do they enable interoperability between blockchains?", "Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation. This enables public blockchains to be available for merge mining and staking, while also allowing for the creation of private, internal blockchains that can easily bridge public currencies onto an organization's internal network.", "## Crowdfunding currency and blockchain launches\nSet required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees.\n\nThe launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n\n## Interoperable, multichain network\nThe Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network.\n\nNotary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access.\n\nThere is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.", "./raw_text_input_docs/README_blockchains.md"], ["Is there a limit to the number of blockchains that can operate and interoperate on the Verus network?", "No, there is no limit to the number of blockchains that can continuously operate and interoperate on the Verus network. The Verus network model is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.", "## Crowdfunding currency and blockchain launches\nSet required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees.\n\nThe launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n\n## Interoperable, multichain network\nThe Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network.\n\nNotary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access.\n\nThere is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.", "./raw_text_input_docs/README_blockchains.md"]]], [["User:: I've been looking into Verus DeFi and I'm interested in learning more about its security features. Can you tell me about the approach to security in Verus DeFi, and where are the most important security layers located?", "AI Assistant:: In Verus DeFi, the approach to security is to implement it at the protocol level as part of the consensus. This follows the fundamental systems design principle that the most important security layers should be located in the system/protocol itself. By doing so, Verus DeFi ensures that security is built into the foundation of the system, providing a robust and secure environment for users.", "User:: That makes sense. I've also heard about MEV-resistance in Verus. Can you explain what that means and how it improves security and fairness?", "AI Assistant:: MEV-resistance in Verus refers to the protocol's ability to solve all transactions simultaneously within a block, rather than serially as in other systems like Ethereum. This provides several benefits, including the elimination of front-running, back-running, and sandwich attacks, enhanced system-wide liquidity, reducing slippage, and providing all users with the same fair price, with no spread, when converting to and from a currency within the same block.", "User:: I see. So, how does Verus's simultaneous transaction processing within a block differ from other systems like Ethereum, and what are the advantages of this approach?", "AI Assistant:: Verus processes all transactions within a block simultaneously, whereas other systems like Ethereum process transactions serially, one after another. This simultaneous processing in Verus eliminates front-running, back-running, and sandwich attacks, enhances system-wide liquidity, and provides a fair price with no spread to all users converting to and from a currency within the same block. This approach ensures that all users have an equal opportunity to participate in the network, without giving an advantage to any particular group or individual."], "AI Assistant", "", "N/A", [["What is the approach to security in Verus DeFi, and where are the most important security layers located?", "In Verus DeFi, the approach to security is to implement it at the protocol level as part of the consensus. This follows the fundamental systems design principle that the most important security layers should be located in the system/protocol itself.", "* Increased security at the protocol level - Verus DeFi is implemented in the protocol as part of the consensus, following the fundamental systems design principle which says that the most important security layers should be located in the system/protocol itself.\n\n## MEV-resistance\n\nThe Verus protocol solves all transactions ``simultaneously`` within a block (as opposed to serially, in order, as is done on Ethereum and all other systems which use the VM-model). This has important implications for security, fairness, and efficiency:\n\n* Elimination of front-running, back-running and sandwich attacks.\n\n* Enhancing system-wide liquidity, thus reducing slippage, as conversions going to and from any given currency within the same block are offset against each other.\n\n* Providing all users converting to and from a currency within the same block the same fair price with no spread.", "./raw_text_input_docs/README_sendcurrency.md"], ["What is MEV-resistance in the context of Verus, and how does it improve security and fairness?", "MEV-resistance in Verus refers to the protocol's ability to solve all transactions simultaneously within a block, rather than serially as in other systems like Ethereum. This provides several benefits, including:\n\n1. Elimination of front-running, back-running, and sandwich attacks.\n2. Enhanced system-wide liquidity, reducing slippage.\n3. Providing all users with the same fair price, with no spread, when converting to and from a currency within the same block.", "* Increased security at the protocol level - Verus DeFi is implemented in the protocol as part of the consensus, following the fundamental systems design principle which says that the most important security layers should be located in the system/protocol itself.\n\n## MEV-resistance\n\nThe Verus protocol solves all transactions ``simultaneously`` within a block (as opposed to serially, in order, as is done on Ethereum and all other systems which use the VM-model). This has important implications for security, fairness, and efficiency:\n\n* Elimination of front-running, back-running and sandwich attacks.\n\n* Enhancing system-wide liquidity, thus reducing slippage, as conversions going to and from any given currency within the same block are offset against each other.\n\n* Providing all users converting to and from a currency within the same block the same fair price with no spread.", "./raw_text_input_docs/README_sendcurrency.md"], ["How does Verus's simultaneous transaction processing within a block differ from other systems like Ethereum, and what are the advantages of this approach?", "Verus processes all transactions within a block simultaneously, whereas other systems like Ethereum process transactions serially, one after another. This simultaneous processing in Verus eliminates front-running, back-running, and sandwich attacks, enhances system-wide liquidity, and provides a fair price with no spread to all users converting to and from a currency within the same block.", "* Increased security at the protocol level - Verus DeFi is implemented in the protocol as part of the consensus, following the fundamental systems design principle which says that the most important security layers should be located in the system/protocol itself.\n\n## MEV-resistance\n\nThe Verus protocol solves all transactions ``simultaneously`` within a block (as opposed to serially, in order, as is done on Ethereum and all other systems which use the VM-model). This has important implications for security, fairness, and efficiency:\n\n* Elimination of front-running, back-running and sandwich attacks.\n\n* Enhancing system-wide liquidity, thus reducing slippage, as conversions going to and from any given currency within the same block are offset against each other.\n\n* Providing all users converting to and from a currency within the same block the same fair price with no spread.", "./raw_text_input_docs/README_sendcurrency.md"]]], [["User:: I'm interested in trying out Verus, but I'm not sure where to start. Where can I find guides to help me set up and use Verus?", "AI Assistant:: You can find guides to help you set up and use Verus on the Verus website. These guides cover various topics, including setting up the Verus command-line interface (CLI), setting up Verus Vault, diverting staking rewards to different wallets, claiming refunds from the Verus-Ethereum Bridge, and getting a Verus address. Would you like me to point you in the direction of a specific guide?", "User:: That sounds great. I'm particularly interested in setting up Verus Vault. What kind of setup guides are available for Verus Vault?", "AI Assistant:: There are two setup guides available for Verus Vault: one for setting up Verus Vault using flags, and another for setting up Verus Vault using an easier method (Verus Vault v2). Would you like me to provide a link to these guides or walk you through the process?", "User:: That's really helpful. I also have a question about staking rewards. Can I divert my staking rewards to a different wallet using Verus?", "AI Assistant:: Yes, you can divert your staking rewards to a different wallet using Verus. There is a guide available on the Verus website that explains how to do this. Would you like me to provide a link to the guide or give you a brief overview of the process?", "User:: That's great. I've also heard about the Verus-Ethereum Bridge. How can I claim refunds from the Verus-Ethereum Bridge?", "AI Assistant:: To claim refunds from the Verus-Ethereum Bridge, you can follow these steps: [provide the steps or a clear link to the guide]. It's a relatively straightforward process, and the guide on the Verus website will walk you through it step-by-step.", "User:: One last question: How can I get a Verus address?", "AI Assistant:: You can get a Verus address by creating a new wallet in the Verus Desktop application or by using the Verus CLI command `getnewaddress`. Both methods are explained in the guides on the Verus website. Do you have any other questions about getting started with Verus?"], "AI Assistant", "", "N/A", [["Where can I find guides to help me set up and use Verus?", "You can find guides to help you set up and use Verus on the Verus website. These guides cover various topics, including setting up the Verus command-line interface (CLI), setting up Verus Vault, diverting staking rewards to different wallets, claiming refunds from the Verus-Ethereum Bridge, and getting a Verus address.", "# Overview\n\n| Guides | \n| :----------------------- |\n| [Set up verus-cli for beginners](/guides/setup-cli/) | \n| [Set up Verus Vault (flags)](/guides/setup-vault/) | \n| [Set up Verus Vault (easy)](/guides/setup-vault-v2/) | \n| [Divert staking rewards to different wallet](/guides/divert-rewards/)   |\n| [Claim refunds from Verus-Ethereum Bridge](/guides/refunds/) |\n| [Get Verus address](/guides/getwallet/)", "./raw_text_input_docs/README_guides.md"], ["What kind of setup guides are available for Verus Vault?", "There are two setup guides available for Verus Vault: one for setting up Verus Vault using flags, and another for setting up Verus Vault using an easier method (Verus Vault v2).", "# Overview\n\n| Guides | \n| :----------------------- |\n| [Set up verus-cli for beginners](/guides/setup-cli/) | \n| [Set up Verus Vault (flags)](/guides/setup-vault/) | \n| [Set up Verus Vault (easy)](/guides/setup-vault-v2/) | \n| [Divert staking rewards to different wallet](/guides/divert-rewards/)   |\n| [Claim refunds from Verus-Ethereum Bridge](/guides/refunds/) |\n| [Get Verus address](/guides/getwallet/)", "./raw_text_input_docs/README_guides.md"], ["Can I divert my staking rewards to a different wallet using Verus?", "Yes, you can divert your staking rewards to a different wallet using Verus. There is a guide available on the Verus website that explains how to do this.", "# Overview\n\n| Guides | \n| :----------------------- |\n| [Set up verus-cli for beginners](/guides/setup-cli/) | \n| [Set up Verus Vault (flags)](/guides/setup-vault/) | \n| [Set up Verus Vault (easy)](/guides/setup-vault-v2/) | \n| [Divert staking rewards to different wallet](/guides/divert-rewards/)   |\n| [Claim refunds from Verus-Ethereum Bridge](/guides/refunds/) |\n| [Get Verus address](/guides/getwallet/)", "./raw_text_input_docs/README_guides.md"], ["How can I claim refunds from the Verus-Ethereum Bridge?", "To claim refunds from the Verus-Ethereum Bridge, you can follow these steps: [provide the steps or a clear link to the guide].", "# Overview\n\n| Guides | \n| :----------------------- |\n| [Set up verus-cli for beginners](/guides/setup-cli/) | \n| [Set up Verus Vault (flags)](/guides/setup-vault/) | \n| [Set up Verus Vault (easy)](/guides/setup-vault-v2/) | \n| [Divert staking rewards to different wallet](/guides/divert-rewards/)   |\n| [Claim refunds from Verus-Ethereum Bridge](/guides/refunds/) |\n| [Get Verus address](/guides/getwallet/)", "./raw_text_input_docs/README_guides.md"], ["How can I get a Verus address?", "You can get a Verus address by creating a new wallet in the Verus Desktop application or by using the Verus CLI command `getnewaddress`.", "# Overview\n\n| Guides | \n| :----------------------- |\n| [Set up verus-cli for beginners](/guides/setup-cli/) | \n| [Set up Verus Vault (flags)](/guides/setup-vault/) | \n| [Set up Verus Vault (easy)](/guides/setup-vault-v2/) | \n| [Divert staking rewards to different wallet](/guides/divert-rewards/)   |\n| [Claim refunds from Verus-Ethereum Bridge](/guides/refunds/) |\n| [Get Verus address](/guides/getwallet/)", "./raw_text_input_docs/README_guides.md"]]], [["User:: What is Verus Vault, and how does it work?", "AI Assistant:: Verus Vault is a feature in Verus Desktop that allows you to lock funds in your VerusID, making them unable to be spent. However, you can still continue to stake and receive coins. The locked funds can only be unlocked by the revocation and recovery authorities together. Would you like to know more about the types of locks available in Verus Vault?", "User:: Yes, that sounds interesting. What are the two types of locks available in Verus Vault, and how do they work?", "AI Assistant:: There are two types of locks available in Verus Vault: TimeLock and DelayLock. A TimeLock locks the funds until a predetermined number of blocks have passed, while a DelayLock locks the funds and unlocks them with a delay, requiring a request to unlock and a predetermined number of blocks to pass before the funds can be spent again. Do you have any questions about how to set up a TimeLock or DelayLock?", "User:: Actually, yes. How do I set up a TimeLock on a VerusID using Verus Desktop?", "AI Assistant:: To set up a TimeLock on a VerusID using Verus Desktop, you need to access the command-line interface in Verus Desktop by going to \"Settings\" (the cogwheel top right corner) and selecting \"Coin Settings\". Then, you can fill in the commands to set up your Vault. For a TimeLock, you need to know the block height of the blockchain and calculate the number of blocks you want to lock your VerusID for. Would you like to know more about considerations when setting up a long-term TimeLock?", "User:: Yes, I think so. Why is it important to consider the average block time when setting up a long-term TimeLock in Verus Vault?", "AI Assistant:: When setting up a long-term TimeLock in Verus Vault, it's important to consider the average block time because there are variables that make it difficult to predict an exact time, such as leap years. Therefore, it's recommended to take an average block time of 62 seconds, and there are approximately 1394.5484 blocks per day. This helps you accurately calculate the number of blocks you want to lock your VerusID for."], "AI Assistant", "", "N/A", [["What is Verus Vault, and how does it work?", "Verus Vault is a feature in Verus Desktop that allows you to lock funds in your VerusID, making them unable to be spent. However, you can still continue to stake and receive coins. The locked funds can only be unlocked by the revocation and recovery authorities together.", "# Set up Verus Vault in Verus Desktop (easy method)\n![image-vaulteasy](/images/lockfunds2.png)\nVerus Vault is not yet accessible with clickable interfaces. You can still set up Vault in Verus Desktop. Here's how.What do you need:\n- Latest version Verus Desktop [download here](https://verus.io/wallet/desktop)\n- VerusID (on the Verus mainchain, or when PBaaS is live on any other chain)With Verus Vault you can lock funds in your VerusID. When your funds are locked in the Vault you can not spend them anymore, they cannot leave the VerusID. You can still always continue to stake and receive coins.You can lock a VerusID in two different ways that cannot be circumvented by anyone, except the ``revocation and recovery authorities`` together.| Lock type | How it works | \n| - |:-----|:-----|\n| TimeLock | Locks the funds and unlocks until a predetermined number of blocks have passed. | \n| DelayLock | Locks the funds and unlocks with a delay. Funds can not be spent until an unlock has been requested + a predetermined number of blocks have passed. |### Get Started\nWe need to access the commandline interface in Verus Desktop. Go to ``settings`` (the cogwheel top right corner), then select ``Coin Settings``. Here we can fill in the commands to set up your Vault.## Vault with TimeLock\n![image-timelock](/images/timeock.png)\nNow let's put a TimeLock on a VerusID. For a TimeLock you need to know the blockheight of the blockchain. Let's say the blockchain's blockheight is at ``1,000,000`` blocks. You want to lock your VerusID for 1 year. 1 year is ``508994`` blocks.::: warning Long-Term Locking\n**For long-term locking it's best to take an average block time of 62 seconds. Yet there are some variables that make it difficult to predict an exact time, leap years for example. Over long-term there are an average of 1394.5484 blocks per day.**\n:::", "./raw_text_input_docs/setup-vault-v2.md"], ["What are the two types of locks available in Verus Vault, and how do they work?", "There are two types of locks available in Verus Vault: TimeLock and DelayLock. A TimeLock locks the funds until a predetermined number of blocks have passed, while a DelayLock locks the funds and unlocks them with a delay, requiring a request to unlock and a predetermined number of blocks to pass before the funds can be spent again.", "# Set up Verus Vault in Verus Desktop (easy method)\n![image-vaulteasy](/images/lockfunds2.png)\nVerus Vault is not yet accessible with clickable interfaces. You can still set up Vault in Verus Desktop. Here's how.What do you need:\n- Latest version Verus Desktop [download here](https://verus.io/wallet/desktop)\n- VerusID (on the Verus mainchain, or when PBaaS is live on any other chain)With Verus Vault you can lock funds in your VerusID. When your funds are locked in the Vault you can not spend them anymore, they cannot leave the VerusID. You can still always continue to stake and receive coins.You can lock a VerusID in two different ways that cannot be circumvented by anyone, except the ``revocation and recovery authorities`` together.| Lock type | How it works | \n| - |:-----|:-----|\n| TimeLock | Locks the funds and unlocks until a predetermined number of blocks have passed. | \n| DelayLock | Locks the funds and unlocks with a delay. Funds can not be spent until an unlock has been requested + a predetermined number of blocks have passed. |### Get Started\nWe need to access the commandline interface in Verus Desktop. Go to ``settings`` (the cogwheel top right corner), then select ``Coin Settings``. Here we can fill in the commands to set up your Vault.## Vault with TimeLock\n![image-timelock](/images/timeock.png)\nNow let's put a TimeLock on a VerusID. For a TimeLock you need to know the blockheight of the blockchain. Let's say the blockchain's blockheight is at ``1,000,000`` blocks. You want to lock your VerusID for 1 year. 1 year is ``508994`` blocks.::: warning Long-Term Locking\n**For long-term locking it's best to take an average block time of 62 seconds. Yet there are some variables that make it difficult to predict an exact time, leap years for example. Over long-term there are an average of 1394.5484 blocks per day.**\n:::", "./raw_text_input_docs/setup-vault-v2.md"], ["How do I set up a TimeLock on a VerusID using Verus Desktop?", "To set up a TimeLock on a VerusID using Verus Desktop, you need to access the command-line interface in Verus Desktop by going to \"Settings\" (the cogwheel top right corner) and selecting \"Coin Settings\". Then, you can fill in the commands to set up your Vault. For a TimeLock, you need to know the block height of the blockchain and calculate the number of blocks you want to lock your VerusID for.", "# Set up Verus Vault in Verus Desktop (easy method)\n![image-vaulteasy](/images/lockfunds2.png)\nVerus Vault is not yet accessible with clickable interfaces. You can still set up Vault in Verus Desktop. Here's how.What do you need:\n- Latest version Verus Desktop [download here](https://verus.io/wallet/desktop)\n- VerusID (on the Verus mainchain, or when PBaaS is live on any other chain)With Verus Vault you can lock funds in your VerusID. When your funds are locked in the Vault you can not spend them anymore, they cannot leave the VerusID. You can still always continue to stake and receive coins.You can lock a VerusID in two different ways that cannot be circumvented by anyone, except the ``revocation and recovery authorities`` together.| Lock type | How it works | \n| - |:-----|:-----|\n| TimeLock | Locks the funds and unlocks until a predetermined number of blocks have passed. | \n| DelayLock | Locks the funds and unlocks with a delay. Funds can not be spent until an unlock has been requested + a predetermined number of blocks have passed. |### Get Started\nWe need to access the commandline interface in Verus Desktop. Go to ``settings`` (the cogwheel top right corner), then select ``Coin Settings``. Here we can fill in the commands to set up your Vault.## Vault with TimeLock\n![image-timelock](/images/timeock.png)\nNow let's put a TimeLock on a VerusID. For a TimeLock you need to know the blockheight of the blockchain. Let's say the blockchain's blockheight is at ``1,000,000`` blocks. You want to lock your VerusID for 1 year. 1 year is ``508994`` blocks.::: warning Long-Term Locking\n**For long-term locking it's best to take an average block time of 62 seconds. Yet there are some variables that make it difficult to predict an exact time, leap years for example. Over long-term there are an average of 1394.5484 blocks per day.**\n:::", "./raw_text_input_docs/setup-vault-v2.md"], ["Why is it important to consider the average block time when setting up a long-term TimeLock in Verus Vault?", "When setting up a long-term TimeLock in Verus Vault, it's important to consider the average block time because there are variables that make it difficult to predict an exact time, such as leap years. Therefore, it's recommended to take an average block time of 62 seconds, and there are approximately 1394.5484 blocks per day. This helps you accurately calculate the number of blocks you want to lock your VerusID for.", "# Set up Verus Vault in Verus Desktop (easy method)\n![image-vaulteasy](/images/lockfunds2.png)\nVerus Vault is not yet accessible with clickable interfaces. You can still set up Vault in Verus Desktop. Here's how.What do you need:\n- Latest version Verus Desktop [download here](https://verus.io/wallet/desktop)\n- VerusID (on the Verus mainchain, or when PBaaS is live on any other chain)With Verus Vault you can lock funds in your VerusID. When your funds are locked in the Vault you can not spend them anymore, they cannot leave the VerusID. You can still always continue to stake and receive coins.You can lock a VerusID in two different ways that cannot be circumvented by anyone, except the ``revocation and recovery authorities`` together.| Lock type | How it works | \n| - |:-----|:-----|\n| TimeLock | Locks the funds and unlocks until a predetermined number of blocks have passed. | \n| DelayLock | Locks the funds and unlocks with a delay. Funds can not be spent until an unlock has been requested + a predetermined number of blocks have passed. |### Get Started\nWe need to access the commandline interface in Verus Desktop. Go to ``settings`` (the cogwheel top right corner), then select ``Coin Settings``. Here we can fill in the commands to set up your Vault.## Vault with TimeLock\n![image-timelock](/images/timeock.png)\nNow let's put a TimeLock on a VerusID. For a TimeLock you need to know the blockheight of the blockchain. Let's say the blockchain's blockheight is at ``1,000,000`` blocks. You want to lock your VerusID for 1 year. 1 year is ``508994`` blocks.::: warning Long-Term Locking\n**For long-term locking it's best to take an average block time of 62 seconds. Yet there are some variables that make it difficult to predict an exact time, leap years for example. Over long-term there are an average of 1394.5484 blocks per day.**\n:::", "./raw_text_input_docs/setup-vault-v2.md"]]], [["User:: I'm interested in launching a new currency or token using decentralized crowdfund mechanisms in Verus. Can you explain how I can do that?", "AI Assistant:: In Verus, you can launch a new currency or token using decentralized crowdfund mechanisms. This involves setting required minimum levels of worldwide participation in your preferred currencies. If the minimums are not met by the start time of your currency or token, all participants will automatically get a refund of all their preconversions, less the network fees. Would you like to know more about the launch options available for crowdfunding a new currency or token in Verus?", "User:: Yes, that would be helpful. What are some of the launch options available for crowdfunding a new currency or token in Verus?", "AI Assistant:: Verus provides various launch options for crowdfunding a new currency or token, including:\n\n1. Setting maximum participation in one or more currencies.\n2. Offering pre-launch discounts to early participants.\n3. Allowing price-neutral pre-allocations to select VerusIDs, which increase the reserve ratio to issue currencies.\n4. Providing price-neutral carve-outs of proceeds.\n5. Including vesting schedules in pre-allocations using VerusIDs.\n\nThese options give you flexibility in structuring your crowdfund launch to suit your needs. Do you have any questions about these options or would you like to know more about the process?", "User:: What happens if the minimum participation levels are not met during a crowdfund launch in Verus?", "AI Assistant:: If the minimum participation levels are not met by the start time of your currency or token, all participants will automatically get a refund of all their preconversions, less the network fees. This ensures that participants are not left with unwanted or unsold tokens or currencies. It's a safety net to protect participants in case the launch doesn't meet the required minimum participation."], "AI Assistant", "", "N/A", [["How can I launch a new currency or token using decentralized crowdfund mechanisms in Verus?", "In Verus, you can launch a new currency or token using decentralized crowdfund mechanisms. This involves setting required minimum levels of worldwide participation in your preferred currencies. If the minimums are not met by the start time of your currency or token, all participants will automatically get a refund of all their preconversions, less the network fees.", "## Crowdfund mechanisms\nAll currencies can be launched through decentralized crowdfund mechanisms. [Set required minimum levels](/currencies/launch-currency.html#minpreconversion) of worldwide participation in your preferred currencies. If by the start time of your currency or token, minimums are not met, all participants will automatically get a refund of all of their preconversions, less the network fees.\n\nThe launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral [pre-allocations](launch-currency.html#preallocations) to select VerusIDs that increase the reserve ratio to issue currencies, similarly price neutral [carve-outs of proceeds](launch-currency.html#prelaunchcarveout), and [pre-launch discounts](launch-currency.html#prelaunchdiscount) for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n\n#", "./raw_text_input_docs/README_currencies.md"], ["What are some of the launch options available for crowdfunding a new currency or token in Verus?", "Verus provides various launch options for crowdfunding a new currency or token, including:\n\n1. Setting maximum participation in one or more currencies.\n2. Offering pre-launch discounts to early participants.\n3. Allowing price-neutral pre-allocations to select VerusIDs, which increase the reserve ratio to issue currencies.\n4. Providing price-neutral carve-outs of proceeds.\n5. Including vesting schedules in pre-allocations using VerusIDs.", "## Crowdfund mechanisms\nAll currencies can be launched through decentralized crowdfund mechanisms. [Set required minimum levels](/currencies/launch-currency.html#minpreconversion) of worldwide participation in your preferred currencies. If by the start time of your currency or token, minimums are not met, all participants will automatically get a refund of all of their preconversions, less the network fees.\n\nThe launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral [pre-allocations](launch-currency.html#preallocations) to select VerusIDs that increase the reserve ratio to issue currencies, similarly price neutral [carve-outs of proceeds](launch-currency.html#prelaunchcarveout), and [pre-launch discounts](launch-currency.html#prelaunchdiscount) for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n\n#", "./raw_text_input_docs/README_currencies.md"], ["What happens if the minimum participation levels are not met during a crowdfund launch in Verus?", "If the minimum participation levels are not met by the start time of your currency or token, all participants will automatically get a refund of all their preconversions, less the network fees. This ensures that participants are not left with unwanted or unsold tokens or currencies.", "## Crowdfund mechanisms\nAll currencies can be launched through decentralized crowdfund mechanisms. [Set required minimum levels](/currencies/launch-currency.html#minpreconversion) of worldwide participation in your preferred currencies. If by the start time of your currency or token, minimums are not met, all participants will automatically get a refund of all of their preconversions, less the network fees.\n\nThe launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral [pre-allocations](launch-currency.html#preallocations) to select VerusIDs that increase the reserve ratio to issue currencies, similarly price neutral [carve-outs of proceeds](launch-currency.html#prelaunchcarveout), and [pre-launch discounts](launch-currency.html#prelaunchdiscount) for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n\n#", "./raw_text_input_docs/README_currencies.md"]]], [["User:: Hey, I've been wondering about the fee pool in the Verus ecosystem. What's its purpose?", "AI Assistant:: The fee pool is a collection of all fees generated by the Verus protocol. With each new block, 1% of the fee pool is added to the block rewards, making mining and staking in the Verus ecosystem a potentially profitable and competitive endeavor. Do you have any other questions about the fee pool or its role in the Verus ecosystem?", "User:: That's interesting. How does the fee pool impact the profitability of mining and staking in Verus?", "AI Assistant:: The fee pool is designed to make mining and staking in Verus more profitable. By adding 1% of the fee pool to the block rewards with each new block, the protocol incentivizes miners and stakers to participate in the network, as fees are expected to outnumber block rewards. This means that miners and stakers can earn more rewards for their efforts, making it a more attractive option for those looking to contribute to the network.", "User:: That makes sense. What's the relationship between fees and block rewards in the Verus ecosystem?", "AI Assistant:: In the Verus ecosystem, fees are expected to outnumber block rewards. The protocol is designed such that the fees collected in the fee pool are added to the block rewards, making the overall reward for miners and stakers more substantial. This approach encourages participation in the network, as miners and stakers can earn more rewards for their efforts. Does that answer your question?"], "AI Assistant", "", "N/A", [["What is the purpose of the fee pool in the Verus ecosystem?", "The fee pool is a collection of all fees generated by the Verus protocol. With each new block, 1% of the fee pool is added to the block rewards, making mining and staking in the Verus ecosystem a potentially profitable and competitive endeavor.", "## Fee Pool\nAll the fees generated by the protocol are collected in the ``fee pool``. With each new block, ``1%`` of the fee pool is added on top of the block rewards. It is expected that fees outnumber block rewards, making mining and staking in the Verus ecosystem a profitable and competitive endeavor.", "./raw_text_input_docs/README_economy.md"], ["How does the fee pool impact the profitability of mining and staking in Verus?", "The fee pool is designed to make mining and staking in Verus more profitable. By adding 1% of the fee pool to the block rewards with each new block, the protocol incentivizes miners and stakers to participate in the network, as fees are expected to outnumber block rewards.", "## Fee Pool\nAll the fees generated by the protocol are collected in the ``fee pool``. With each new block, ``1%`` of the fee pool is added on top of the block rewards. It is expected that fees outnumber block rewards, making mining and staking in the Verus ecosystem a profitable and competitive endeavor.", "./raw_text_input_docs/README_economy.md"], ["What is the relationship between fees and block rewards in the Verus ecosystem?", "In the Verus ecosystem, fees are expected to outnumber block rewards. The protocol is designed such that the fees collected in the fee pool are added to the block rewards, making the overall reward for miners and stakers more substantial.", "## Fee Pool\nAll the fees generated by the protocol are collected in the ``fee pool``. With each new block, ``1%`` of the fee pool is added on top of the block rewards. It is expected that fees outnumber block rewards, making mining and staking in the Verus ecosystem a profitable and competitive endeavor.", "./raw_text_input_docs/README_economy.md"]]], [["User:: I've been looking into Verus DeFi and I was wondering, what are the benefits of Verus DeFi compared to other DeFi solutions?", "AI Assistant:: Verus DeFi offers several benefits, including being MEV-resistant (no front/back running), having protocol-level security, and low fees. All DeFi operations take place on the consensus layer of the protocol, ensuring fairness and security. Fees are as low as 0.025% or 0.05%, depending on the conversion type. Would you like to know more about how Verus DeFi ensures fairness and security in its conversions?", "User:: Yes, that would be great. How does Verus DeFi ensure fairness and security in its conversions?", "AI Assistant:: Verus DeFi ensures fairness and security by having all DeFi operations take place on the consensus layer of the protocol. This means that every participant gets the same conversion rate in one or more blocks, with no front/back running (MEV-resistance). Additionally, all operations are verified by miners and stakers, providing an extra layer of security. This ensures that all conversions are fair and secure for all participants.", "User:: That sounds great. Can you tell me more about the different conversion types in Verus DeFi and their respective fees?", "AI Assistant:: There are two conversion types in Verus DeFi: Basket currency \u2194\ufe0f reserve and Reserve \u2194\ufe0f reserve. The fees for these conversions are 0.025% and 0.05%, respectively. The fees are distributed between adding to the reserves of the basket currency and the block reward for miners and stakers. This ensures that the fees are low and distributed fairly among participants.", "User:: I've also heard that Verus is a UTXO-based blockchain with smart transactions. What's the advantage of that?", "AI Assistant:: The advantage of Verus being a UTXO-based blockchain with smart transactions is that all smart capabilities are implemented at the protocol level. This provides increased security at the application level, as there are no smart contracts that can be exploited. Instead, the protocol-level implementation ensures that all DeFi operations are secure and fair.", "User:: How does Verus DeFi compare to other blockchain projects that use layer two solutions?", "AI Assistant:: Verus DeFi has an advantage over other blockchain projects that use layer two solutions because it implements all smart capabilities at the protocol level. This provides increased security and fairness, as well as lower fees, compared to layer two solutions that rely on smart contracts. With Verus DeFi, you can be sure that all DeFi operations are secure, fair, and efficient."], "AI Assistant", "", "N/A", [["What are the benefits of Verus DeFi compared to other DeFi solutions?", "Verus DeFi offers several benefits, including being MEV-resistant (no front/back running), having protocol-level security, and low fees. All DeFi operations take place on the consensus layer of the protocol, ensuring fairness and security. Fees are as low as 0.025% or 0.05%, depending on the conversion type.", "# Introduction\nVerus DeFi is incredibly simple, low-cost, MEV-resistant and without any middleman. You can convert into a currency that has reserves (you are now \"providing liquidity\"), and you can convert out of the currency again, back into its reserves. Furthermore you can convert from reserve to reserve. [Learn more about basket currencies (DeFi AMMs).](/currencies/#basket-currencies)| Verus DeFi | Details | \n| :-----| :------ | \n| \u2705 **MEV-resistant** | Because of protocol design there is no front/back running. Every participant gets the same, fair conversion rate in one or more blocks. | \n| \u2705 **Protocol level security** | All DeFi operations take place on the consensus layer of the protocol, and are verified by miners and stakers. There is no smart contract risk. | \n| \u2705 **Low fees** | Protocol conversion fees are as low as 0.025%, or as high as 0.05%. |Two conversion types:| Conversion type | Fee | Fee goes to |\n| :-----| :------ | :-------- |\n| Basket currency \u2194\ufe0f reserve | 0.025% | 0.0125% added to reserves of the basket currency, 0.0125% to the block reward for miners and stakers | \n| Reserve \u2194\ufe0f reserve | 0.05% | 0.025% added to reserves of the basket currency, 0.025% to the block reward for miners and stakers |## L1 DeFi\nVerus is a ``UTXO-based`` blockchain with ``smart transactions``. All smart capabilities are implemented on the protocol level. This has many advantages over blockchain projects that use layer two solutions. [Read \"Smart Transactions vs. Smart Contracts\"](https://medium.com/veruscoin/verus-smart-transactions-vs-smart-contracts-f98079c00ed0)Advantages of DeFi at the protocol level:* Increased security at the application level - Verus DeFi is not implemented by having many smart contract authors creating smart contracts on top of the protocol, so there can be no exploits by searching for unintended \"cracks\" in the seams between contracts.", "./raw_text_input_docs/README_sendcurrency.md"], ["How does Verus DeFi ensure fairness and security in its conversions?", "Verus DeFi ensures fairness and security by having all DeFi operations take place on the consensus layer of the protocol. This means that every participant gets the same conversion rate in one or more blocks, with no front/back running (MEV-resistance). Additionally, all operations are verified by miners and stakers, providing an extra layer of security.", "# Introduction\nVerus DeFi is incredibly simple, low-cost, MEV-resistant and without any middleman. You can convert into a currency that has reserves (you are now \"providing liquidity\"), and you can convert out of the currency again, back into its reserves. Furthermore you can convert from reserve to reserve. [Learn more about basket currencies (DeFi AMMs).](/currencies/#basket-currencies)| Verus DeFi | Details | \n| :-----| :------ | \n| \u2705 **MEV-resistant** | Because of protocol design there is no front/back running. Every participant gets the same, fair conversion rate in one or more blocks. | \n| \u2705 **Protocol level security** | All DeFi operations take place on the consensus layer of the protocol, and are verified by miners and stakers. There is no smart contract risk. | \n| \u2705 **Low fees** | Protocol conversion fees are as low as 0.025%, or as high as 0.05%. |Two conversion types:| Conversion type | Fee | Fee goes to |\n| :-----| :------ | :-------- |\n| Basket currency \u2194\ufe0f reserve | 0.025% | 0.0125% added to reserves of the basket currency, 0.0125% to the block reward for miners and stakers | \n| Reserve \u2194\ufe0f reserve | 0.05% | 0.025% added to reserves of the basket currency, 0.025% to the block reward for miners and stakers |## L1 DeFi\nVerus is a ``UTXO-based`` blockchain with ``smart transactions``. All smart capabilities are implemented on the protocol level. This has many advantages over blockchain projects that use layer two solutions. [Read \"Smart Transactions vs. Smart Contracts\"](https://medium.com/veruscoin/verus-smart-transactions-vs-smart-contracts-f98079c00ed0)Advantages of DeFi at the protocol level:* Increased security at the application level - Verus DeFi is not implemented by having many smart contract authors creating smart contracts on top of the protocol, so there can be no exploits by searching for unintended \"cracks\" in the seams between contracts.", "./raw_text_input_docs/README_sendcurrency.md"], ["What are the different conversion types in Verus DeFi, and what are their respective fees?", "There are two conversion types in Verus DeFi: Basket currency \u2194\ufe0f reserve and Reserve \u2194\ufe0f reserve. The fees for these conversions are 0.025% and 0.05%, respectively. The fees are distributed between adding to the reserves of the basket currency and the block reward for miners and stakers.", "# Introduction\nVerus DeFi is incredibly simple, low-cost, MEV-resistant and without any middleman. You can convert into a currency that has reserves (you are now \"providing liquidity\"), and you can convert out of the currency again, back into its reserves. Furthermore you can convert from reserve to reserve. [Learn more about basket currencies (DeFi AMMs).](/currencies/#basket-currencies)| Verus DeFi | Details | \n| :-----| :------ | \n| \u2705 **MEV-resistant** | Because of protocol design there is no front/back running. Every participant gets the same, fair conversion rate in one or more blocks. | \n| \u2705 **Protocol level security** | All DeFi operations take place on the consensus layer of the protocol, and are verified by miners and stakers. There is no smart contract risk. | \n| \u2705 **Low fees** | Protocol conversion fees are as low as 0.025%, or as high as 0.05%. |Two conversion types:| Conversion type | Fee | Fee goes to |\n| :-----| :------ | :-------- |\n| Basket currency \u2194\ufe0f reserve | 0.025% | 0.0125% added to reserves of the basket currency, 0.0125% to the block reward for miners and stakers | \n| Reserve \u2194\ufe0f reserve | 0.05% | 0.025% added to reserves of the basket currency, 0.025% to the block reward for miners and stakers |## L1 DeFi\nVerus is a ``UTXO-based`` blockchain with ``smart transactions``. All smart capabilities are implemented on the protocol level. This has many advantages over blockchain projects that use layer two solutions. [Read \"Smart Transactions vs. Smart Contracts\"](https://medium.com/veruscoin/verus-smart-transactions-vs-smart-contracts-f98079c00ed0)Advantages of DeFi at the protocol level:* Increased security at the application level - Verus DeFi is not implemented by having many smart contract authors creating smart contracts on top of the protocol, so there can be no exploits by searching for unintended \"cracks\" in the seams between contracts.", "./raw_text_input_docs/README_sendcurrency.md"], ["What is the advantage of Verus being a UTXO-based blockchain with smart transactions?", "The advantage of Verus being a UTXO-based blockchain with smart transactions is that all smart capabilities are implemented at the protocol level. This provides increased security at the application level, as there are no smart contracts that can be exploited. Instead, the protocol-level implementation ensures that all DeFi operations are secure and fair.", "# Introduction\nVerus DeFi is incredibly simple, low-cost, MEV-resistant and without any middleman. You can convert into a currency that has reserves (you are now \"providing liquidity\"), and you can convert out of the currency again, back into its reserves. Furthermore you can convert from reserve to reserve. [Learn more about basket currencies (DeFi AMMs).](/currencies/#basket-currencies)| Verus DeFi | Details | \n| :-----| :------ | \n| \u2705 **MEV-resistant** | Because of protocol design there is no front/back running. Every participant gets the same, fair conversion rate in one or more blocks. | \n| \u2705 **Protocol level security** | All DeFi operations take place on the consensus layer of the protocol, and are verified by miners and stakers. There is no smart contract risk. | \n| \u2705 **Low fees** | Protocol conversion fees are as low as 0.025%, or as high as 0.05%. |Two conversion types:| Conversion type | Fee | Fee goes to |\n| :-----| :------ | :-------- |\n| Basket currency \u2194\ufe0f reserve | 0.025% | 0.0125% added to reserves of the basket currency, 0.0125% to the block reward for miners and stakers | \n| Reserve \u2194\ufe0f reserve | 0.05% | 0.025% added to reserves of the basket currency, 0.025% to the block reward for miners and stakers |## L1 DeFi\nVerus is a ``UTXO-based`` blockchain with ``smart transactions``. All smart capabilities are implemented on the protocol level. This has many advantages over blockchain projects that use layer two solutions. [Read \"Smart Transactions vs. Smart Contracts\"](https://medium.com/veruscoin/verus-smart-transactions-vs-smart-contracts-f98079c00ed0)Advantages of DeFi at the protocol level:* Increased security at the application level - Verus DeFi is not implemented by having many smart contract authors creating smart contracts on top of the protocol, so there can be no exploits by searching for unintended \"cracks\" in the seams between contracts.", "./raw_text_input_docs/README_sendcurrency.md"], ["How does Verus DeFi compare to other blockchain projects that use layer two solutions?", "Verus DeFi has an advantage over other blockchain projects that use layer two solutions because it implements all smart capabilities at the protocol level. This provides increased security and fairness, as well as lower fees, compared to layer two solutions that rely on smart contracts.", "# Introduction\nVerus DeFi is incredibly simple, low-cost, MEV-resistant and without any middleman. You can convert into a currency that has reserves (you are now \"providing liquidity\"), and you can convert out of the currency again, back into its reserves. Furthermore you can convert from reserve to reserve. [Learn more about basket currencies (DeFi AMMs).](/currencies/#basket-currencies)| Verus DeFi | Details | \n| :-----| :------ | \n| \u2705 **MEV-resistant** | Because of protocol design there is no front/back running. Every participant gets the same, fair conversion rate in one or more blocks. | \n| \u2705 **Protocol level security** | All DeFi operations take place on the consensus layer of the protocol, and are verified by miners and stakers. There is no smart contract risk. | \n| \u2705 **Low fees** | Protocol conversion fees are as low as 0.025%, or as high as 0.05%. |Two conversion types:| Conversion type | Fee | Fee goes to |\n| :-----| :------ | :-------- |\n| Basket currency \u2194\ufe0f reserve | 0.025% | 0.0125% added to reserves of the basket currency, 0.0125% to the block reward for miners and stakers | \n| Reserve \u2194\ufe0f reserve | 0.05% | 0.025% added to reserves of the basket currency, 0.025% to the block reward for miners and stakers |## L1 DeFi\nVerus is a ``UTXO-based`` blockchain with ``smart transactions``. All smart capabilities are implemented on the protocol level. This has many advantages over blockchain projects that use layer two solutions. [Read \"Smart Transactions vs. Smart Contracts\"](https://medium.com/veruscoin/verus-smart-transactions-vs-smart-contracts-f98079c00ed0)Advantages of DeFi at the protocol level:* Increased security at the application level - Verus DeFi is not implemented by having many smart contract authors creating smart contracts on top of the protocol, so there can be no exploits by searching for unintended \"cracks\" in the seams between contracts.", "./raw_text_input_docs/README_sendcurrency.md"]]], [["User:: Hey, I've heard about VerusPay. Can you tell me more about it? What is it, and what's its purpose in the Verus ecosystem?", "AI Assistant:: VerusPay is a sophisticated blockchain payment platform designed to facilitate the creation, management, and processing of invoices utilizing blockchain technology. Its purpose is to standardize the format for invoices, ensuring interoperability, security, and ease of use across different blockchain systems. In essence, VerusPay makes it easier for users to create and manage invoices, and for merchants to process payments in a secure and standardized manner.", "User:: That sounds interesting. What features does the VerusPay Invoice specification provide?", "AI Assistant:: The VerusPay Invoice specification is quite comprehensive. It allows users to include detailed transaction information such as payment amounts, destinations, and requested currencies. It also enables handling conversions and accepting payments from various PBaaS blockchains. Additionally, it supports packaging invoices into deeplinks and QR codes, making them easily accessible and usable within the Verus Mobile wallet and other applications.", "User:: I'm a developer, and I'm interested in integrating VerusPay into my own application or service. How can I do that?", "AI Assistant:: To use VerusPay in your own application or service, you can refer to the verusid-ts-client helper library, which provides the necessary tools and documentation to get started. This library should give you everything you need to integrate VerusPay into your project.", "User:: What benefits does VerusPay offer to merchants, developers, and users within the Verus network?", "AI Assistant:: VerusPay offers a seamless payment experience across different blockchain ecosystems, providing a wide array of possibilities for merchants, developers, and users within the Verus network and beyond. It enables easy creation, management, and processing of invoices, as well as secure and interoperable payments across different blockchain systems. This makes it a very powerful tool for anyone looking to simplify and standardize their payment processes."], "AI Assistant", "", "N/A", [["What is VerusPay, and what is its purpose in the Verus ecosystem?", "VerusPay is a sophisticated blockchain payment platform designed to facilitate the creation, management, and processing of invoices utilizing blockchain technology. Its purpose is to standardize the format for invoices, ensuring interoperability, security, and ease of use across different blockchain systems.", "# VerusPay\n\nVerusPay represents a sophisticated blockchain payment platform within the Verus ecosystem, designed to facilitate the creation, management, and processing of invoices utilizing blockchain technology. Through the introduction of the VerusPay Invoice specification in VerusPay v3, it standardizes the format for invoices, ensuring interoperability, security, and ease of use across different blockchain systems. This specification enables users to include detailed transaction information such as payment amounts, destinations, and requested currencies, as well as to handle conversions and accept payments from various [PBaaS](/blockchains/) blockchains. Notably, it supports packaging these invoices into deeplinks and QR codes, making them easily accessible and usable within the Verus Mobile wallet and potentially other applications. This functionality opens up a wide array of possibilities for merchants, developers, and users within the Verus network and beyond, offering a seamless payment experience across different blockchain ecosystems.\n\n## Usage\n\nTo use VerusPay in your own application or service, refer to the [verusid-ts-client helper library.](https://github.com/VerusCoin/verusid-ts-client/tree/master)", "./raw_text_input_docs/README_veruspay.md"], ["What features does the VerusPay Invoice specification provide?", "The VerusPay Invoice specification allows users to include detailed transaction information such as payment amounts, destinations, and requested currencies. It also enables handling conversions and accepting payments from various PBaaS blockchains. Additionally, it supports packaging invoices into deeplinks and QR codes, making them easily accessible and usable within the Verus Mobile wallet and other applications.", "# VerusPay\n\nVerusPay represents a sophisticated blockchain payment platform within the Verus ecosystem, designed to facilitate the creation, management, and processing of invoices utilizing blockchain technology. Through the introduction of the VerusPay Invoice specification in VerusPay v3, it standardizes the format for invoices, ensuring interoperability, security, and ease of use across different blockchain systems. This specification enables users to include detailed transaction information such as payment amounts, destinations, and requested currencies, as well as to handle conversions and accept payments from various [PBaaS](/blockchains/) blockchains. Notably, it supports packaging these invoices into deeplinks and QR codes, making them easily accessible and usable within the Verus Mobile wallet and potentially other applications. This functionality opens up a wide array of possibilities for merchants, developers, and users within the Verus network and beyond, offering a seamless payment experience across different blockchain ecosystems.\n\n## Usage\n\nTo use VerusPay in your own application or service, refer to the [verusid-ts-client helper library.](https://github.com/VerusCoin/verusid-ts-client/tree/master)", "./raw_text_input_docs/README_veruspay.md"], ["How can I integrate VerusPay into my own application or service?", "To use VerusPay in your own application or service, you can refer to the verusid-ts-client helper library, which provides the necessary tools and documentation to get started.", "# VerusPay\n\nVerusPay represents a sophisticated blockchain payment platform within the Verus ecosystem, designed to facilitate the creation, management, and processing of invoices utilizing blockchain technology. Through the introduction of the VerusPay Invoice specification in VerusPay v3, it standardizes the format for invoices, ensuring interoperability, security, and ease of use across different blockchain systems. This specification enables users to include detailed transaction information such as payment amounts, destinations, and requested currencies, as well as to handle conversions and accept payments from various [PBaaS](/blockchains/) blockchains. Notably, it supports packaging these invoices into deeplinks and QR codes, making them easily accessible and usable within the Verus Mobile wallet and potentially other applications. This functionality opens up a wide array of possibilities for merchants, developers, and users within the Verus network and beyond, offering a seamless payment experience across different blockchain ecosystems.\n\n## Usage\n\nTo use VerusPay in your own application or service, refer to the [verusid-ts-client helper library.](https://github.com/VerusCoin/verusid-ts-client/tree/master)", "./raw_text_input_docs/README_veruspay.md"], ["What benefits does VerusPay offer to merchants, developers, and users within the Verus network?", "VerusPay offers a seamless payment experience across different blockchain ecosystems, providing a wide array of possibilities for merchants, developers, and users within the Verus network and beyond. It enables easy creation, management, and processing of invoices, as well as secure and interoperable payments across different blockchain systems.", "# VerusPay\n\nVerusPay represents a sophisticated blockchain payment platform within the Verus ecosystem, designed to facilitate the creation, management, and processing of invoices utilizing blockchain technology. Through the introduction of the VerusPay Invoice specification in VerusPay v3, it standardizes the format for invoices, ensuring interoperability, security, and ease of use across different blockchain systems. This specification enables users to include detailed transaction information such as payment amounts, destinations, and requested currencies, as well as to handle conversions and accept payments from various [PBaaS](/blockchains/) blockchains. Notably, it supports packaging these invoices into deeplinks and QR codes, making them easily accessible and usable within the Verus Mobile wallet and potentially other applications. This functionality opens up a wide array of possibilities for merchants, developers, and users within the Verus network and beyond, offering a seamless payment experience across different blockchain ecosystems.\n\n## Usage\n\nTo use VerusPay in your own application or service, refer to the [verusid-ts-client helper library.](https://github.com/VerusCoin/verusid-ts-client/tree/master)", "./raw_text_input_docs/README_veruspay.md"]]], [["User:: I'm learning about currencies in Verus, and I came across the term \"Basket currency.\" Can you tell me what it means?", "AI Assistant:: A \"Basket currency\" is a type of currency in Verus that has reserves and can be converted to and from those reserves. It can have one or multiple currencies as its reserves, up to a maximum of 10 currencies. This currency can be launched in a centralized or decentralized manner. Do you have any other questions about Basket currencies?", "User:: Yes, actually. I saw an option 32 when defining a currency in Verus. What does that do?", "AI Assistant:: Option 32 defines a currency as a simple token currency without any reserves. This type of currency can be launched in a centralized or decentralized manner. This option is also used for Ethereum ERC-20 mapped tokens. Is that clear?", "User:: I think so. But I'm still trying to figure out how to launch a specific type of currency. How do I launch a basket currency with the root VerusID having control over subID creation?", "AI Assistant:: To launch a basket currency with the root VerusID having control over subID creation, you would combine the options for creating a basket currency, enabling root VerusID control, and allowing subID creation. This would result in an \"options\" value of 35. Does that make sense?", "User:: Yes, I think so. One more question. What does the \"proofprotocol\" parameter do when defining a currency in Verus?", "AI Assistant:: The \"proofprotocol\" parameter defines, among other things, whether a currency is centralized or decentralized. It can have values of 1, 2, or 3. Does that answer your question?"], "AI Assistant", "", "N/A", [["What is a \"Basket currency\" in the context of Verus?", "A \"Basket currency\" is a type of currency in Verus that has reserves and can be converted to and from those reserves. It can have one or multiple currencies as its reserves, up to a maximum of 10 currencies. This currency can be launched in a centralized or decentralized manner.", "| Options # | Details |\n| -: |:-----|\n| 1 | The currency has reserves, and can be converted to and from the reserves (option 32 needs to be added). Can have one currency as its reserves, or multiple with up to 10 currencies. This is a \u201cBasket currency\u201d \u2014 a currency with a basket of reserves. Such a currency can be launched centralized or decentralized. |\n| 2 | Only the controlling VerusID (the namespace of the currency, the rootID) can create subIDs. |\n| 8 | Referrals and discounts are enabled for subID creation. |\n| 16 | Referrals are required for subID creation. |\n| 32 | The currency is a simple token currency without any reserves. Such a currency can be launched centralized or decentralized. This option is also used for [Ethereum ERC-20 mapped tokens](/currencies/mapping-1:1-eth). |\n| 2048 | A single satoshi (0.00000001) NFT token is created & has tokenized control of the root VerusID. Which means you can send the single satoshi token to other addresses and then they have control of the root VerusID. |Let\u2019s give some examples of combined options:\n- ``\"options\":33`` \u2014 this launches a basket currency. It is options 1 + 32 combined.\n- ``\"options\":2080`` \u2014 this launches a single satoshi token that has control of the root VerusID. It is options 32 + 2048 combined.\n- ``\"options\":35`` \u2014 this launches a basket currency, and only the rootID can create subIDs. It is options 1 + 2 + 32 combined.## Defining parameters\nNext up are the parameters. Choose the parameters wisely to launch a currency that suits any need. Not all parameters are needed or combinable. There are many to go through, so let\u2019s start.### **\"proofprotocol\"**\nThis parameter defines, among others, if the currency is centralized or decentralized. You can choose 1,2 or 3.", "./raw_text_input_docs/launch-currency.md"], ["What does option 32 do when defining a currency in Verus?", "Option 32 defines a currency as a simple token currency without any reserves. This type of currency can be launched in a centralized or decentralized manner. This option is also used for Ethereum ERC-20 mapped tokens.", "| Options # | Details |\n| -: |:-----|\n| 1 | The currency has reserves, and can be converted to and from the reserves (option 32 needs to be added). Can have one currency as its reserves, or multiple with up to 10 currencies. This is a \u201cBasket currency\u201d \u2014 a currency with a basket of reserves. Such a currency can be launched centralized or decentralized. |\n| 2 | Only the controlling VerusID (the namespace of the currency, the rootID) can create subIDs. |\n| 8 | Referrals and discounts are enabled for subID creation. |\n| 16 | Referrals are required for subID creation. |\n| 32 | The currency is a simple token currency without any reserves. Such a currency can be launched centralized or decentralized. This option is also used for [Ethereum ERC-20 mapped tokens](/currencies/mapping-1:1-eth). |\n| 2048 | A single satoshi (0.00000001) NFT token is created & has tokenized control of the root VerusID. Which means you can send the single satoshi token to other addresses and then they have control of the root VerusID. |Let\u2019s give some examples of combined options:\n- ``\"options\":33`` \u2014 this launches a basket currency. It is options 1 + 32 combined.\n- ``\"options\":2080`` \u2014 this launches a single satoshi token that has control of the root VerusID. It is options 32 + 2048 combined.\n- ``\"options\":35`` \u2014 this launches a basket currency, and only the rootID can create subIDs. It is options 1 + 2 + 32 combined.## Defining parameters\nNext up are the parameters. Choose the parameters wisely to launch a currency that suits any need. Not all parameters are needed or combinable. There are many to go through, so let\u2019s start.### **\"proofprotocol\"**\nThis parameter defines, among others, if the currency is centralized or decentralized. You can choose 1,2 or 3.", "./raw_text_input_docs/launch-currency.md"], ["How do I launch a basket currency with the root VerusID having control over subID creation?", "To launch a basket currency with the root VerusID having control over subID creation, you would combine the options for creating a basket currency, enabling root VerusID control, and allowing subID creation. This would result in an \"options\" value of 35.", "| Options # | Details |\n| -: |:-----|\n| 1 | The currency has reserves, and can be converted to and from the reserves (option 32 needs to be added). Can have one currency as its reserves, or multiple with up to 10 currencies. This is a \u201cBasket currency\u201d \u2014 a currency with a basket of reserves. Such a currency can be launched centralized or decentralized. |\n| 2 | Only the controlling VerusID (the namespace of the currency, the rootID) can create subIDs. |\n| 8 | Referrals and discounts are enabled for subID creation. |\n| 16 | Referrals are required for subID creation. |\n| 32 | The currency is a simple token currency without any reserves. Such a currency can be launched centralized or decentralized. This option is also used for [Ethereum ERC-20 mapped tokens](/currencies/mapping-1:1-eth). |\n| 2048 | A single satoshi (0.00000001) NFT token is created & has tokenized control of the root VerusID. Which means you can send the single satoshi token to other addresses and then they have control of the root VerusID. |Let\u2019s give some examples of combined options:\n- ``\"options\":33`` \u2014 this launches a basket currency. It is options 1 + 32 combined.\n- ``\"options\":2080`` \u2014 this launches a single satoshi token that has control of the root VerusID. It is options 32 + 2048 combined.\n- ``\"options\":35`` \u2014 this launches a basket currency, and only the rootID can create subIDs. It is options 1 + 2 + 32 combined.## Defining parameters\nNext up are the parameters. Choose the parameters wisely to launch a currency that suits any need. Not all parameters are needed or combinable. There are many to go through, so let\u2019s start.### **\"proofprotocol\"**\nThis parameter defines, among others, if the currency is centralized or decentralized. You can choose 1,2 or 3.", "./raw_text_input_docs/launch-currency.md"], ["What does the \"proofprotocol\" parameter do when defining a currency in Verus?", "The \"proofprotocol\" parameter defines, among other things, whether a currency is centralized or decentralized. It can have values of 1, 2, or 3.", "| Options # | Details |\n| -: |:-----|\n| 1 | The currency has reserves, and can be converted to and from the reserves (option 32 needs to be added). Can have one currency as its reserves, or multiple with up to 10 currencies. This is a \u201cBasket currency\u201d \u2014 a currency with a basket of reserves. Such a currency can be launched centralized or decentralized. |\n| 2 | Only the controlling VerusID (the namespace of the currency, the rootID) can create subIDs. |\n| 8 | Referrals and discounts are enabled for subID creation. |\n| 16 | Referrals are required for subID creation. |\n| 32 | The currency is a simple token currency without any reserves. Such a currency can be launched centralized or decentralized. This option is also used for [Ethereum ERC-20 mapped tokens](/currencies/mapping-1:1-eth). |\n| 2048 | A single satoshi (0.00000001) NFT token is created & has tokenized control of the root VerusID. Which means you can send the single satoshi token to other addresses and then they have control of the root VerusID. |Let\u2019s give some examples of combined options:\n- ``\"options\":33`` \u2014 this launches a basket currency. It is options 1 + 32 combined.\n- ``\"options\":2080`` \u2014 this launches a single satoshi token that has control of the root VerusID. It is options 32 + 2048 combined.\n- ``\"options\":35`` \u2014 this launches a basket currency, and only the rootID can create subIDs. It is options 1 + 2 + 32 combined.## Defining parameters\nNext up are the parameters. Choose the parameters wisely to launch a currency that suits any need. Not all parameters are needed or combinable. There are many to go through, so let\u2019s start.### **\"proofprotocol\"**\nThis parameter defines, among others, if the currency is centralized or decentralized. You can choose 1,2 or 3.", "./raw_text_input_docs/launch-currency.md"]]], [["User:: Hey, I'm trying to get a better understanding of the API commands in Verus. Can you tell me what the purpose of the `estimateconversion` API command is?", "AI Assistant:: The `estimateconversion` API command estimates what you might receive for a certain conversion. It takes parameters such as the currency to convert from, the currency to convert to, the amount to convert, and an optional \"via\" parameter to specify a bridge currency. This command helps users predict the outcome of a conversion before actually performing it. Do you have any other questions about this command or API commands in general?", "User:: Actually, yes, I do. How do I use the `getcurrencyconverters` API command to retrieve a list of currencies that can be used for conversion?", "AI Assistant:: To use the `getcurrencyconverters` API command, you need to specify one or more currencies as arguments. For example, `./verus -chain=VRSCTEST getcurrencyconverters btc eth` will retrieve all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have both BTC and ETH as reserves. This command is super helpful for finding currencies that can be used for conversion. Do you have any other questions about this command?", "User:: I think I'm starting to get the hang of it. How can I convert VRSCTEST to a basket currency using the `sendcurrency` API command?", "AI Assistant:: To convert VRSCTEST to a basket currency, you can use the `sendcurrency` API command with the following format: `./verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"your_address@\",\"amount\":amount_to_convert,\"convertto\":\"basket_currency\"}]'`. Replace \"your_address@\" with your Verus ID and \"amount_to_convert\" with the amount of VRSCTEST you want to convert. This command is pretty straightforward once you get the hang of it!", "User:: That makes sense. How can I convert VRSCTEST to another reserve currency, such as BTC, through a basket currency using the `sendcurrency` API command?", "AI Assistant:: To convert VRSCTEST to another reserve currency, such as BTC, through a basket currency, you can use the `sendcurrency` API command with the following format: `./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"your_address@\",\"amount\":amount_to_convert,\"convertto\":\"target_currency\",\"via\":\"basket_currency\"}]'`. Replace \"your_address@\" with your Verus ID, \"amount_to_convert\" with the amount of VRSCTEST you want to convert, \"target_currency\" with the currency you want to convert to (e.g. BTC), and \"basket_currency\" with the basket currency you want to use as an intermediate step (e.g. VRSC-BTC).", "User:: I've heard of preconverting in Verus, but I'm not entirely sure what it is or how to use it. Can you explain?", "AI Assistant:: Preconverting in Verus allows you to convert your funds to a new currency before it becomes active. To preconvert to a new currency, you can use the `sendcurrency` API command with the following format: `./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"your_address@\",\"amount\":amount_to_convert,\"convertto\":\"new_currency\",\"preconvert\":true,\"refundto\":\"your_address@\"}]'`. Replace \"your_address@\" with your Verus ID, \"amount_to_convert\" with the amount of VRSCTEST you want to convert, and \"new_currency\" with the new currency you want to preconvert to. If the conversion fails, the funds will be refunded to the specified \"refundto\" address."], "AI Assistant", "", "N/A", [["What is the purpose of the `estimateconversion` API command in Verus?", "The `estimateconversion` API command estimates what you might receive for a certain conversion. It takes parameters such as the currency to convert from, the currency to convert to, the amount to convert, and an optional \"via\" parameter to specify a bridge currency. This command helps users predict the outcome of a conversion before actually performing it.", "# API commands\nAll functionality is easily accessible by doing API commands. Here are a few examples:## Converting (DeFi)### Estimate conversion price\nThe ``estimateconversion`` API estimates what you might receive for a certain conversion.Example:\n``` json\n./verus -chain=VRSCTEST estimateconversion '{\n  \"currency\":\"vrsctest\",\n  \"convertto\":\"veth\",\n  \"via\":\"bridge.veth\",\n  \"amount\":1000\n}'\n```Example:\n``` json\n./verus -chain=VRSCTEST estimateconversion '{\n  \"currency\":\"vrsctest\",\n  \"convertto\":\"bridge.veth\",\n  \"amount\":500\n}'\n```### Get currency converters\nThe ``getcurrencyconverters`` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves.Example ``btc`` and ``eth``:\n``` json\n./verus -chain=VRSCTEST getcurrencyconverters btc eth\n```### Converting VRSCTEST to basket currency\nConverting VRSCTEST to a basket currency, VRSC-BTC, using IDs as a funding source:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*i\" '[{\n  \"address\":\"bob@\",\n  \"amount\":10,\n  \"convertto\":\"VRSC-BTC\"\n}]'\n```### Converting VRSCTEST to BTC via basket currency\nConverting VRSCTEST to another reserve, BTC through a basket currency, VRSC-BTC:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"bob@\",\n  \"amount\":10,\n  \"convertto\":\"BTC\",\n  \"via\":\"VRSC-BTC\"\n}]'\n```\n### Preconverting\nPreconverting to new currency, NEWCOIN, before it is active:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"alice@\",\n  \"amount\":10,\n  \"convertto\":\"NEWCOIN\",\n  \"preconvert\":true,\n  \"refundto\":\"alice@\"\n}]'\n```", "./raw_text_input_docs/sendcurrency-examples.md"], ["How do I use the `getcurrencyconverters` API command to retrieve a list of currencies that can be used for conversion?", "To use the `getcurrencyconverters` API command, you need to specify one or more currencies as arguments. For example, `./verus -chain=VRSCTEST getcurrencyconverters btc eth` will retrieve all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have both BTC and ETH as reserves.", "# API commands\nAll functionality is easily accessible by doing API commands. Here are a few examples:## Converting (DeFi)### Estimate conversion price\nThe ``estimateconversion`` API estimates what you might receive for a certain conversion.Example:\n``` json\n./verus -chain=VRSCTEST estimateconversion '{\n  \"currency\":\"vrsctest\",\n  \"convertto\":\"veth\",\n  \"via\":\"bridge.veth\",\n  \"amount\":1000\n}'\n```Example:\n``` json\n./verus -chain=VRSCTEST estimateconversion '{\n  \"currency\":\"vrsctest\",\n  \"convertto\":\"bridge.veth\",\n  \"amount\":500\n}'\n```### Get currency converters\nThe ``getcurrencyconverters`` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves.Example ``btc`` and ``eth``:\n``` json\n./verus -chain=VRSCTEST getcurrencyconverters btc eth\n```### Converting VRSCTEST to basket currency\nConverting VRSCTEST to a basket currency, VRSC-BTC, using IDs as a funding source:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*i\" '[{\n  \"address\":\"bob@\",\n  \"amount\":10,\n  \"convertto\":\"VRSC-BTC\"\n}]'\n```### Converting VRSCTEST to BTC via basket currency\nConverting VRSCTEST to another reserve, BTC through a basket currency, VRSC-BTC:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"bob@\",\n  \"amount\":10,\n  \"convertto\":\"BTC\",\n  \"via\":\"VRSC-BTC\"\n}]'\n```\n### Preconverting\nPreconverting to new currency, NEWCOIN, before it is active:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"alice@\",\n  \"amount\":10,\n  \"convertto\":\"NEWCOIN\",\n  \"preconvert\":true,\n  \"refundto\":\"alice@\"\n}]'\n```", "./raw_text_input_docs/sendcurrency-examples.md"], ["How can I convert VRSCTEST to a basket currency using the `sendcurrency` API command?", "To convert VRSCTEST to a basket currency, you can use the `sendcurrency` API command with the following format: `./verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"your_address@\",\"amount\":amount_to_convert,\"convertto\":\"basket_currency\"}]'`. Replace \"your_address@\" with your Verus ID and \"amount_to_convert\" with the amount of VRSCTEST you want to convert.", "# API commands\nAll functionality is easily accessible by doing API commands. Here are a few examples:## Converting (DeFi)### Estimate conversion price\nThe ``estimateconversion`` API estimates what you might receive for a certain conversion.Example:\n``` json\n./verus -chain=VRSCTEST estimateconversion '{\n  \"currency\":\"vrsctest\",\n  \"convertto\":\"veth\",\n  \"via\":\"bridge.veth\",\n  \"amount\":1000\n}'\n```Example:\n``` json\n./verus -chain=VRSCTEST estimateconversion '{\n  \"currency\":\"vrsctest\",\n  \"convertto\":\"bridge.veth\",\n  \"amount\":500\n}'\n```### Get currency converters\nThe ``getcurrencyconverters`` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves.Example ``btc`` and ``eth``:\n``` json\n./verus -chain=VRSCTEST getcurrencyconverters btc eth\n```### Converting VRSCTEST to basket currency\nConverting VRSCTEST to a basket currency, VRSC-BTC, using IDs as a funding source:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*i\" '[{\n  \"address\":\"bob@\",\n  \"amount\":10,\n  \"convertto\":\"VRSC-BTC\"\n}]'\n```### Converting VRSCTEST to BTC via basket currency\nConverting VRSCTEST to another reserve, BTC through a basket currency, VRSC-BTC:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"bob@\",\n  \"amount\":10,\n  \"convertto\":\"BTC\",\n  \"via\":\"VRSC-BTC\"\n}]'\n```\n### Preconverting\nPreconverting to new currency, NEWCOIN, before it is active:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"alice@\",\n  \"amount\":10,\n  \"convertto\":\"NEWCOIN\",\n  \"preconvert\":true,\n  \"refundto\":\"alice@\"\n}]'\n```", "./raw_text_input_docs/sendcurrency-examples.md"], ["How can I convert VRSCTEST to another reserve currency, such as BTC, through a basket currency using the `sendcurrency` API command?", "To convert VRSCTEST to another reserve currency, such as BTC, through a basket currency, you can use the `sendcurrency` API command with the following format: `./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"your_address@\",\"amount\":amount_to_convert,\"convertto\":\"target_currency\",\"via\":\"basket_currency\"}]'`. Replace \"your_address@\" with your Verus ID, \"amount_to_convert\" with the amount of VRSCTEST you want to convert, \"target_currency\" with the currency you want to convert to (e.g. BTC), and \"basket_currency\" with the basket currency you want to use as an intermediate step (e.g. VRSC-BTC).", "# API commands\nAll functionality is easily accessible by doing API commands. Here are a few examples:## Converting (DeFi)### Estimate conversion price\nThe ``estimateconversion`` API estimates what you might receive for a certain conversion.Example:\n``` json\n./verus -chain=VRSCTEST estimateconversion '{\n  \"currency\":\"vrsctest\",\n  \"convertto\":\"veth\",\n  \"via\":\"bridge.veth\",\n  \"amount\":1000\n}'\n```Example:\n``` json\n./verus -chain=VRSCTEST estimateconversion '{\n  \"currency\":\"vrsctest\",\n  \"convertto\":\"bridge.veth\",\n  \"amount\":500\n}'\n```### Get currency converters\nThe ``getcurrencyconverters`` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves.Example ``btc`` and ``eth``:\n``` json\n./verus -chain=VRSCTEST getcurrencyconverters btc eth\n```### Converting VRSCTEST to basket currency\nConverting VRSCTEST to a basket currency, VRSC-BTC, using IDs as a funding source:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*i\" '[{\n  \"address\":\"bob@\",\n  \"amount\":10,\n  \"convertto\":\"VRSC-BTC\"\n}]'\n```### Converting VRSCTEST to BTC via basket currency\nConverting VRSCTEST to another reserve, BTC through a basket currency, VRSC-BTC:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"bob@\",\n  \"amount\":10,\n  \"convertto\":\"BTC\",\n  \"via\":\"VRSC-BTC\"\n}]'\n```\n### Preconverting\nPreconverting to new currency, NEWCOIN, before it is active:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"alice@\",\n  \"amount\":10,\n  \"convertto\":\"NEWCOIN\",\n  \"preconvert\":true,\n  \"refundto\":\"alice@\"\n}]'\n```", "./raw_text_input_docs/sendcurrency-examples.md"], ["What is preconverting in Verus, and how do I use the `sendcurrency` API command to preconvert to a new currency?", "Preconverting in Verus allows you to convert your funds to a new currency before it becomes active. To preconvert to a new currency, you can use the `sendcurrency` API command with the following format: `./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"your_address@\",\"amount\":amount_to_convert,\"convertto\":\"new_currency\",\"preconvert\":true,\"refundto\":\"your_address@\"}]'`. Replace \"your_address@\" with your Verus ID, \"amount_to_convert\" with the amount of VRSCTEST you want to convert, and \"new_currency\" with the new currency you want to preconvert to. If the conversion fails, the funds will be refunded to the specified \"refundto\" address.", "# API commands\nAll functionality is easily accessible by doing API commands. Here are a few examples:## Converting (DeFi)### Estimate conversion price\nThe ``estimateconversion`` API estimates what you might receive for a certain conversion.Example:\n``` json\n./verus -chain=VRSCTEST estimateconversion '{\n  \"currency\":\"vrsctest\",\n  \"convertto\":\"veth\",\n  \"via\":\"bridge.veth\",\n  \"amount\":1000\n}'\n```Example:\n``` json\n./verus -chain=VRSCTEST estimateconversion '{\n  \"currency\":\"vrsctest\",\n  \"convertto\":\"bridge.veth\",\n  \"amount\":500\n}'\n```### Get currency converters\nThe ``getcurrencyconverters`` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves.Example ``btc`` and ``eth``:\n``` json\n./verus -chain=VRSCTEST getcurrencyconverters btc eth\n```### Converting VRSCTEST to basket currency\nConverting VRSCTEST to a basket currency, VRSC-BTC, using IDs as a funding source:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*i\" '[{\n  \"address\":\"bob@\",\n  \"amount\":10,\n  \"convertto\":\"VRSC-BTC\"\n}]'\n```### Converting VRSCTEST to BTC via basket currency\nConverting VRSCTEST to another reserve, BTC through a basket currency, VRSC-BTC:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"bob@\",\n  \"amount\":10,\n  \"convertto\":\"BTC\",\n  \"via\":\"VRSC-BTC\"\n}]'\n```\n### Preconverting\nPreconverting to new currency, NEWCOIN, before it is active:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"alice@\",\n  \"amount\":10,\n  \"convertto\":\"NEWCOIN\",\n  \"preconvert\":true,\n  \"refundto\":\"alice@\"\n}]'\n```", "./raw_text_input_docs/sendcurrency-examples.md"]]], [["User:: I've been looking into Verus and I'm curious about staking. What is staking, and how can I participate in it on the Verus blockchain?", "AI Assistant:: Staking is a way to secure the Verus network by using your Verus holdings. Anyone can participate in staking, regardless of the amount of Verus coins they hold. In Verus, staking is done with UTXOs (unspent transaction outputs), and a larger UTXO has a higher chance of winning a block. This is a great way to contribute to the security of the network and earn some rewards in the process. Do you have any further questions about staking on Verus?", "User:: That makes sense. I've heard of solo staking and pool staking, what's the difference between them?", "AI Assistant:: Solo staking involves staking with your own wallet and node, where you either win a full block or nothing. Pool staking, on the other hand, involves joining a pool of stakeholders, where the rewards are shared among the pool members. There are two types of pool staking: non-custodial staking pools, where you keep control of your funds, and custodial staking pools, where you trust a pool operator with your funds. So, it really depends on your personal preference and risk tolerance.", "User:: I think I'll try solo staking. What are the rules to start solo staking on Verus?", "AI Assistant:: To start solo staking on Verus, you need to:\n\n1. Have your wallet running\n2. Run a full node (native mode in Verus Desktop)\n3. Enable staking\n4. Have a UTXO that is eligible for staking after 150 blocks\n5. Have a minimum of 0.00000001 VRSC in your wallet\n\nMake sure you follow these steps and you'll be set up for solo staking on Verus. If you have any more questions or need further assistance, feel free to ask!"], "AI Assistant", "", "N/A", [["What is staking, and how can I participate in it on the Verus blockchain?", "Staking is a way to secure the Verus network by using your Verus holdings. Anyone can participate in staking, regardless of the amount of Verus coins they hold. In Verus, staking is done with UTXOs (unspent transaction outputs), and a larger UTXO has a higher chance of winning a block.", "# Staking\n\nStaking is accessible for everyone. Use Verus holdings to secure the network. It does not matter how much $VRSC you have, there are no minimum requirements to start staking.\n\nOn the Verus blockchain UTXOs (unspent transaction outputs) are staking, not balances. A large UTXO has more chances of winning a block than a small UTXO. [What is a UTXO?](https://www.youtube.com/watch?v=xJ0UYZ9hDos)\n\n## Solo staking\nThere are a few rules you need to know before you can start staking.\n\n| Rules | \n| :-----|\n| Wallet Running | \n| Full Node Required (native mode in Verus Desktop) | \n| Staking Enabled | \n| UTXO Eligible After 150 Blocks | \n| Minimum of 0.00000001 VRSC in Wallet |\n\nWith solo staking you either win a full block or you win nothing.\n\n::: warning Need help with staking? \ud83d\udcb0\n[Join the Verus Discord #staking channel. The community is happy to assist!](https://www.verus.io/discord). \n:::\n\n## Pool staking\nThere are two ways to do pool staking with Verus. One is keeping control over your funds in combination with VerusID, the other is sending your coins to a pool operator and trusting your funds with them.\n\nA non-custodial staking pool: [Synergy Pool](https://synergopool.io)", "./raw_text_input_docs/start-staking.md"], ["What is the difference between solo staking and pool staking?", "Solo staking involves staking with your own wallet and node, where you either win a full block or nothing. Pool staking, on the other hand, involves joining a pool of stakeholders, where the rewards are shared among the pool members. There are two types of pool staking: non-custodial staking pools, where you keep control of your funds, and custodial staking pools, where you trust a pool operator with your funds.", "# Staking\n\nStaking is accessible for everyone. Use Verus holdings to secure the network. It does not matter how much $VRSC you have, there are no minimum requirements to start staking.\n\nOn the Verus blockchain UTXOs (unspent transaction outputs) are staking, not balances. A large UTXO has more chances of winning a block than a small UTXO. [What is a UTXO?](https://www.youtube.com/watch?v=xJ0UYZ9hDos)\n\n## Solo staking\nThere are a few rules you need to know before you can start staking.\n\n| Rules | \n| :-----|\n| Wallet Running | \n| Full Node Required (native mode in Verus Desktop) | \n| Staking Enabled | \n| UTXO Eligible After 150 Blocks | \n| Minimum of 0.00000001 VRSC in Wallet |\n\nWith solo staking you either win a full block or you win nothing.\n\n::: warning Need help with staking? \ud83d\udcb0\n[Join the Verus Discord #staking channel. The community is happy to assist!](https://www.verus.io/discord). \n:::\n\n## Pool staking\nThere are two ways to do pool staking with Verus. One is keeping control over your funds in combination with VerusID, the other is sending your coins to a pool operator and trusting your funds with them.\n\nA non-custodial staking pool: [Synergy Pool](https://synergopool.io)", "./raw_text_input_docs/start-staking.md"], ["What are the rules to start solo staking on Verus?", "To start solo staking on Verus, you need to:\n\n1. Have your wallet running\n2. Run a full node (native mode in Verus Desktop)\n3. Enable staking\n4. Have a UTXO that is eligible for staking after 150 blocks\n5. Have a minimum of 0.00000001 VRSC in your wallet", "# Staking\n\nStaking is accessible for everyone. Use Verus holdings to secure the network. It does not matter how much $VRSC you have, there are no minimum requirements to start staking.\n\nOn the Verus blockchain UTXOs (unspent transaction outputs) are staking, not balances. A large UTXO has more chances of winning a block than a small UTXO. [What is a UTXO?](https://www.youtube.com/watch?v=xJ0UYZ9hDos)\n\n## Solo staking\nThere are a few rules you need to know before you can start staking.\n\n| Rules | \n| :-----|\n| Wallet Running | \n| Full Node Required (native mode in Verus Desktop) | \n| Staking Enabled | \n| UTXO Eligible After 150 Blocks | \n| Minimum of 0.00000001 VRSC in Wallet |\n\nWith solo staking you either win a full block or you win nothing.\n\n::: warning Need help with staking? \ud83d\udcb0\n[Join the Verus Discord #staking channel. The community is happy to assist!](https://www.verus.io/discord). \n:::\n\n## Pool staking\nThere are two ways to do pool staking with Verus. One is keeping control over your funds in combination with VerusID, the other is sending your coins to a pool operator and trusting your funds with them.\n\nA non-custodial staking pool: [Synergy Pool](https://synergopool.io)", "./raw_text_input_docs/start-staking.md"]]], [["User:: I've been looking into the Verus ecosystem and I came across something called the Dai Savings Rate. Can you tell me more about it?", "AI Assistant:: The Dai Savings Rate is a 5% interest rate (subject to change by MakerDAO) that is earned automatically when holding Dai in the DSR (Dai Savings Rate) contract. This benefit is passed through 100% to the DAI reserves of Bridge.vETH, which means that holders of Dai in the Verus ecosystem, including Bridge.vETH, can earn this interest rate. It's a great incentive for holding Dai in the Verus ecosystem!", "User:: That sounds interesting. I've also been looking into registering a.vETH subID. What's the cost of doing that, and what happens to the Bridge.vETH used for registration?", "AI Assistant:: The cost of registering a.vETH subID is 0.01 vETH worth of Bridge.vETH. When registering the subID, the Bridge.vETH is burned, which means the Bridge.vETH supply decreases. It's a small price to pay for the benefits of having a.vETH subID!", "User:: I've heard about conversion fees in the Verus ecosystem. How are they distributed, and what's the purpose of these fees?", "AI Assistant:: 50% of the conversion fees go into the reserves of Bridge.vETH. The fees are 0.025% for reserve to reserve conversions and 0.0125% for reserve to Bridge.vETH conversions (or vice versa). These fees help to support the Bridge.vETH ecosystem and contribute to its reserves. They're an important part of keeping the ecosystem healthy and sustainable!", "User:: Finally, I was wondering about Bridge.vETH itself. How is its supply maintained, and what are the advantages of using it for conversions?", "AI Assistant:: The supply of Bridge.vETH is dynamic and is increased when people convert VRSC, ETH, DAI, or MKR to Bridge.vETH, and decreased when they convert from Bridge.vETH back to these currencies. The advantages of using Bridge.vETH for conversions include that it is MEV-resistant, has no smart contract risks due to protocol-level security, and has low fees (max. 0.05%). It's a great option for anyone looking to convert assets within the Verus ecosystem!"], "AI Assistant", "", "N/A", [["What is the Dai Savings Rate, and how does it benefit holders of Dai in the Verus ecosystem?", "The Dai Savings Rate is a 5% interest rate (subject to change by MakerDAO) that is earned automatically when holding Dai in the DSR (Dai Savings Rate) contract. This benefit is passed through 100% to the DAI reserves of Bridge.vETH, which means that holders of Dai in the Verus ecosystem, including Bridge.vETH, can earn this interest rate.", "| \ud83d\udcc8 Accrued fees       |     Details      |\n| :------------------ | :----------------------------------------- |\n| [**Dai Savings Rate**](https://blog.makerdao.com/an-update-on-the-dai-savings-rate-in-multi-collateral-dai/)| 5% interest (at the time of writing, the rate is subject to change by MakerDAO) is earned automatically when holding Dai in the DSR (Dai Savings Rate) contract. Dai in Bridge.vETH and in the complete Verus ecosystem get this savings rate. The DSR is being passed through 100% to the DAI reserves of Bridge.vETH.|\n| **.vETH subID registrations**| A .vETH subID costs 0.01 vETH worth of Bridge.vETH. When registering the subID the Bridge.vETH is burned, meaning the Bridge.vETH supply decreases. |\n| **Conversion fees**| 50% of the conversion fees go into the reserves of Bridge.vETH: 0.025% when it's a reserve to reserve conversion, 0.0125% when it's a reserve to Bridge.vETH conversion (or vice versa). |\n| **Cross-chain send fees**| A share of the cross-chain send fees go into the reserves of Bridge.vETH. |Bridge.vETH had an initial supply of 100,000. During the preconversion timeframe which lasted 10 days, anyone could add VRSC, ETH, DAI and MKR into its reserves. When the preconversion period ended everyone got their share of the 100,000 Bridge.vETH, distributed by the protocol.The supply of Bridge.vETH is dynamic. The currency gets minted when people convert VRSC, ETH, DAI or MKR to Bridge.vETH, and the currency gets burned when they convert from Bridge.vETH back to VRSC, ETH, DAI or MKR.Converting currencies using Bridge.vETH (or other basket currencies) has many advantages. It is MEV-resistant, has no smart contract risks due to protocol level security and has low fees (max. 0.05%). [More on Verus DeFi here.](/sendcurrency/)See statistics for Bridge.vETH here: [verus.io/eth-bridge](https://verus.io/eth-bridge)", "./raw_text_input_docs/README_eth-bridge.md"], ["What is the cost of registering a.vETH subID, and what happens to the Bridge.vETH used for registration?", "The cost of registering a.vETH subID is 0.01 vETH worth of Bridge.vETH. When registering the subID, the Bridge.vETH is burned, which means the Bridge.vETH supply decreases.", "| \ud83d\udcc8 Accrued fees       |     Details      |\n| :------------------ | :----------------------------------------- |\n| [**Dai Savings Rate**](https://blog.makerdao.com/an-update-on-the-dai-savings-rate-in-multi-collateral-dai/)| 5% interest (at the time of writing, the rate is subject to change by MakerDAO) is earned automatically when holding Dai in the DSR (Dai Savings Rate) contract. Dai in Bridge.vETH and in the complete Verus ecosystem get this savings rate. The DSR is being passed through 100% to the DAI reserves of Bridge.vETH.|\n| **.vETH subID registrations**| A .vETH subID costs 0.01 vETH worth of Bridge.vETH. When registering the subID the Bridge.vETH is burned, meaning the Bridge.vETH supply decreases. |\n| **Conversion fees**| 50% of the conversion fees go into the reserves of Bridge.vETH: 0.025% when it's a reserve to reserve conversion, 0.0125% when it's a reserve to Bridge.vETH conversion (or vice versa). |\n| **Cross-chain send fees**| A share of the cross-chain send fees go into the reserves of Bridge.vETH. |Bridge.vETH had an initial supply of 100,000. During the preconversion timeframe which lasted 10 days, anyone could add VRSC, ETH, DAI and MKR into its reserves. When the preconversion period ended everyone got their share of the 100,000 Bridge.vETH, distributed by the protocol.The supply of Bridge.vETH is dynamic. The currency gets minted when people convert VRSC, ETH, DAI or MKR to Bridge.vETH, and the currency gets burned when they convert from Bridge.vETH back to VRSC, ETH, DAI or MKR.Converting currencies using Bridge.vETH (or other basket currencies) has many advantages. It is MEV-resistant, has no smart contract risks due to protocol level security and has low fees (max. 0.05%). [More on Verus DeFi here.](/sendcurrency/)See statistics for Bridge.vETH here: [verus.io/eth-bridge](https://verus.io/eth-bridge)", "./raw_text_input_docs/README_eth-bridge.md"], ["How are conversion fees distributed in the Verus ecosystem, and what is the purpose of these fees?", "50% of the conversion fees go into the reserves of Bridge.vETH. The fees are 0.025% for reserve to reserve conversions and 0.0125% for reserve to Bridge.vETH conversions (or vice versa). These fees help to support the Bridge.vETH ecosystem and contribute to its reserves.", "| \ud83d\udcc8 Accrued fees       |     Details      |\n| :------------------ | :----------------------------------------- |\n| [**Dai Savings Rate**](https://blog.makerdao.com/an-update-on-the-dai-savings-rate-in-multi-collateral-dai/)| 5% interest (at the time of writing, the rate is subject to change by MakerDAO) is earned automatically when holding Dai in the DSR (Dai Savings Rate) contract. Dai in Bridge.vETH and in the complete Verus ecosystem get this savings rate. The DSR is being passed through 100% to the DAI reserves of Bridge.vETH.|\n| **.vETH subID registrations**| A .vETH subID costs 0.01 vETH worth of Bridge.vETH. When registering the subID the Bridge.vETH is burned, meaning the Bridge.vETH supply decreases. |\n| **Conversion fees**| 50% of the conversion fees go into the reserves of Bridge.vETH: 0.025% when it's a reserve to reserve conversion, 0.0125% when it's a reserve to Bridge.vETH conversion (or vice versa). |\n| **Cross-chain send fees**| A share of the cross-chain send fees go into the reserves of Bridge.vETH. |Bridge.vETH had an initial supply of 100,000. During the preconversion timeframe which lasted 10 days, anyone could add VRSC, ETH, DAI and MKR into its reserves. When the preconversion period ended everyone got their share of the 100,000 Bridge.vETH, distributed by the protocol.The supply of Bridge.vETH is dynamic. The currency gets minted when people convert VRSC, ETH, DAI or MKR to Bridge.vETH, and the currency gets burned when they convert from Bridge.vETH back to VRSC, ETH, DAI or MKR.Converting currencies using Bridge.vETH (or other basket currencies) has many advantages. It is MEV-resistant, has no smart contract risks due to protocol level security and has low fees (max. 0.05%). [More on Verus DeFi here.](/sendcurrency/)See statistics for Bridge.vETH here: [verus.io/eth-bridge](https://verus.io/eth-bridge)", "./raw_text_input_docs/README_eth-bridge.md"], ["How is the supply of Bridge.vETH maintained, and what are the advantages of using Bridge.vETH for conversions?", "The supply of Bridge.vETH is dynamic and is increased when people convert VRSC, ETH, DAI, or MKR to Bridge.vETH, and decreased when they convert from Bridge.vETH back to these currencies. The advantages of using Bridge.vETH for conversions include that it is MEV-resistant, has no smart contract risks due to protocol-level security, and has low fees (max. 0.05%).", "| \ud83d\udcc8 Accrued fees       |     Details      |\n| :------------------ | :----------------------------------------- |\n| [**Dai Savings Rate**](https://blog.makerdao.com/an-update-on-the-dai-savings-rate-in-multi-collateral-dai/)| 5% interest (at the time of writing, the rate is subject to change by MakerDAO) is earned automatically when holding Dai in the DSR (Dai Savings Rate) contract. Dai in Bridge.vETH and in the complete Verus ecosystem get this savings rate. The DSR is being passed through 100% to the DAI reserves of Bridge.vETH.|\n| **.vETH subID registrations**| A .vETH subID costs 0.01 vETH worth of Bridge.vETH. When registering the subID the Bridge.vETH is burned, meaning the Bridge.vETH supply decreases. |\n| **Conversion fees**| 50% of the conversion fees go into the reserves of Bridge.vETH: 0.025% when it's a reserve to reserve conversion, 0.0125% when it's a reserve to Bridge.vETH conversion (or vice versa). |\n| **Cross-chain send fees**| A share of the cross-chain send fees go into the reserves of Bridge.vETH. |Bridge.vETH had an initial supply of 100,000. During the preconversion timeframe which lasted 10 days, anyone could add VRSC, ETH, DAI and MKR into its reserves. When the preconversion period ended everyone got their share of the 100,000 Bridge.vETH, distributed by the protocol.The supply of Bridge.vETH is dynamic. The currency gets minted when people convert VRSC, ETH, DAI or MKR to Bridge.vETH, and the currency gets burned when they convert from Bridge.vETH back to VRSC, ETH, DAI or MKR.Converting currencies using Bridge.vETH (or other basket currencies) has many advantages. It is MEV-resistant, has no smart contract risks due to protocol level security and has low fees (max. 0.05%). [More on Verus DeFi here.](/sendcurrency/)See statistics for Bridge.vETH here: [verus.io/eth-bridge](https://verus.io/eth-bridge)", "./raw_text_input_docs/README_eth-bridge.md"]]], [["User:: I'm trying to create a new currency on the Verus network, but I'm not sure about the purpose of the `definecurrency` command. Can you help me out?", "AI Assistant:: The `definecurrency` command is used to define a new currency on the Verus network. It allows users to specify the properties of the currency, such as its name, options, currencies it can be converted to, initial supply, and more. This command is essential for creating a new currency that can be used on the Verus network.", "User:: That makes sense. I was also wondering about the `idregistrationfees` parameter in the `definecurrency` command. What's its purpose?", "AI Assistant:: The `idregistrationfees` parameter specifies the fee required to register a subID. This fee is paid in the currency being defined and goes to the rootID. So, if you're creating a new currency, you can set the fee for registering subIDs, and that fee will be paid to the rootID, which is the main ID controlling the currency.", "User:: I see. And what about the `idreferrallevels` parameter? How does that work?", "AI Assistant:: The `idreferrallevels` parameter specifies the number of levels of referrals used when registering subIDs. It can be set to a value between 0 and 5, with a default value of 3. This parameter determines how the subID registration fees are distributed among the referrers. So, if you set it to 3, for example, the fees will be distributed among the referrer, the referrer's referrer, and the referrer's referrer's referrer.", "User:: Got it. One more question. I've heard of centralized simple token currencies and basket currencies in Verus. What's the difference between them?", "AI Assistant:: A centralized simple token currency is a type of currency where the owner of the rootID has full control over minting and burning tokens. In contrast, a basket currency is a type of currency that can be converted to other currencies and has a reserve of funds. The main difference lies in the level of decentralization and control over the currency. With a centralized simple token currency, the owner has full control, whereas a basket currency is more decentralized and has a built-in reserve of funds. Does that help clarify the difference?"], "AI Assistant", "", "N/A", [["What is the purpose of the `definecurrency` command in Verus?", "The `definecurrency` command is used to define a new currency on the Verus network. It allows users to specify the properties of the currency, such as its name, options, currencies it can be converted to, initial supply, and more.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"InternetCommunity\", \n \"options\":41, \n \"currencies\":[\"vrsctest\"],\n \"initialcontributions\":[25],\n \"initialsupply\":5000, \n \"idregistrationfees\":1\n}'\n```\n\u261d\ufe0f The is a basket currency called InternetCommunity with subID referrals enabled. The launcher of the currency wanted to make initial contributions to its reserves. There needs to be 225.0002 VRSCTEST in the rootID at the moment of broadcasting the currency to the network (currency launch fee + initial contributions + txfees). The initial supply of 5000 went to the rootID (if there weren\u2019t any more preconverters). The base fee to register a subID is 1 InternetCommunity.### **\"idreferrallevels\"**\n![image-referralsID](/images/referralsID2.png)\nUse this parameter to change the levels of referrals used when registering subIDs. The image above shows the division and distribution of subID registration fees, depending on the chosen level. Minimum is 0 levels, maximum is 5. The default is `3` levels.To enable referrals, add `\"options\":8` to the currency definition.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"PremiumAccess\", \n \"options\":40, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":2000}],\n \"idregistrationfees\":300,\n \"idreferrallevels\":1\n}'\n```\n\u261d\ufe0f This is a centralized simple token currency called PremiumAccess. The owner of the rootID can mint and burn tokens at will. It has referrals enabled. When the currency is launched 2000 PremiumAccess go to the Klaus@ VerusID. It costs a 300 PremiumAccess fee to register a subID. These fees go to the rootID because it is a centralized token currency. When someone registers a subID using a referral they pay 200 of which 100 goes to the referred subID, and 100 to the rootID.", "./raw_text_input_docs/launch-currency.md"], ["What is the purpose of the `idregistrationfees` parameter in the `definecurrency` command?", "The `idregistrationfees` parameter specifies the fee required to register a subID. This fee is paid in the currency being defined and goes to the rootID.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"InternetCommunity\", \n \"options\":41, \n \"currencies\":[\"vrsctest\"],\n \"initialcontributions\":[25],\n \"initialsupply\":5000, \n \"idregistrationfees\":1\n}'\n```\n\u261d\ufe0f The is a basket currency called InternetCommunity with subID referrals enabled. The launcher of the currency wanted to make initial contributions to its reserves. There needs to be 225.0002 VRSCTEST in the rootID at the moment of broadcasting the currency to the network (currency launch fee + initial contributions + txfees). The initial supply of 5000 went to the rootID (if there weren\u2019t any more preconverters). The base fee to register a subID is 1 InternetCommunity.### **\"idreferrallevels\"**\n![image-referralsID](/images/referralsID2.png)\nUse this parameter to change the levels of referrals used when registering subIDs. The image above shows the division and distribution of subID registration fees, depending on the chosen level. Minimum is 0 levels, maximum is 5. The default is `3` levels.To enable referrals, add `\"options\":8` to the currency definition.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"PremiumAccess\", \n \"options\":40, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":2000}],\n \"idregistrationfees\":300,\n \"idreferrallevels\":1\n}'\n```\n\u261d\ufe0f This is a centralized simple token currency called PremiumAccess. The owner of the rootID can mint and burn tokens at will. It has referrals enabled. When the currency is launched 2000 PremiumAccess go to the Klaus@ VerusID. It costs a 300 PremiumAccess fee to register a subID. These fees go to the rootID because it is a centralized token currency. When someone registers a subID using a referral they pay 200 of which 100 goes to the referred subID, and 100 to the rootID.", "./raw_text_input_docs/launch-currency.md"], ["What does the `idreferrallevels` parameter do in the `definecurrency` command?", "The `idreferrallevels` parameter specifies the number of levels of referrals used when registering subIDs. It can be set to a value between 0 and 5, with a default value of 3. This parameter determines how the subID registration fees are distributed among the referrers.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"InternetCommunity\", \n \"options\":41, \n \"currencies\":[\"vrsctest\"],\n \"initialcontributions\":[25],\n \"initialsupply\":5000, \n \"idregistrationfees\":1\n}'\n```\n\u261d\ufe0f The is a basket currency called InternetCommunity with subID referrals enabled. The launcher of the currency wanted to make initial contributions to its reserves. There needs to be 225.0002 VRSCTEST in the rootID at the moment of broadcasting the currency to the network (currency launch fee + initial contributions + txfees). The initial supply of 5000 went to the rootID (if there weren\u2019t any more preconverters). The base fee to register a subID is 1 InternetCommunity.### **\"idreferrallevels\"**\n![image-referralsID](/images/referralsID2.png)\nUse this parameter to change the levels of referrals used when registering subIDs. The image above shows the division and distribution of subID registration fees, depending on the chosen level. Minimum is 0 levels, maximum is 5. The default is `3` levels.To enable referrals, add `\"options\":8` to the currency definition.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"PremiumAccess\", \n \"options\":40, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":2000}],\n \"idregistrationfees\":300,\n \"idreferrallevels\":1\n}'\n```\n\u261d\ufe0f This is a centralized simple token currency called PremiumAccess. The owner of the rootID can mint and burn tokens at will. It has referrals enabled. When the currency is launched 2000 PremiumAccess go to the Klaus@ VerusID. It costs a 300 PremiumAccess fee to register a subID. These fees go to the rootID because it is a centralized token currency. When someone registers a subID using a referral they pay 200 of which 100 goes to the referred subID, and 100 to the rootID.", "./raw_text_input_docs/launch-currency.md"], ["What is the difference between a centralized simple token currency and a basket currency in Verus?", "A centralized simple token currency is a type of currency where the owner of the rootID has full control over minting and burning tokens. In contrast, a basket currency is a type of currency that can be converted to other currencies and has a reserve of funds. The main difference lies in the level of decentralization and control over the currency.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"InternetCommunity\", \n \"options\":41, \n \"currencies\":[\"vrsctest\"],\n \"initialcontributions\":[25],\n \"initialsupply\":5000, \n \"idregistrationfees\":1\n}'\n```\n\u261d\ufe0f The is a basket currency called InternetCommunity with subID referrals enabled. The launcher of the currency wanted to make initial contributions to its reserves. There needs to be 225.0002 VRSCTEST in the rootID at the moment of broadcasting the currency to the network (currency launch fee + initial contributions + txfees). The initial supply of 5000 went to the rootID (if there weren\u2019t any more preconverters). The base fee to register a subID is 1 InternetCommunity.### **\"idreferrallevels\"**\n![image-referralsID](/images/referralsID2.png)\nUse this parameter to change the levels of referrals used when registering subIDs. The image above shows the division and distribution of subID registration fees, depending on the chosen level. Minimum is 0 levels, maximum is 5. The default is `3` levels.To enable referrals, add `\"options\":8` to the currency definition.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"PremiumAccess\", \n \"options\":40, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":2000}],\n \"idregistrationfees\":300,\n \"idreferrallevels\":1\n}'\n```\n\u261d\ufe0f This is a centralized simple token currency called PremiumAccess. The owner of the rootID can mint and burn tokens at will. It has referrals enabled. When the currency is launched 2000 PremiumAccess go to the Klaus@ VerusID. It costs a 300 PremiumAccess fee to register a subID. These fees go to the rootID because it is a centralized token currency. When someone registers a subID using a referral they pay 200 of which 100 goes to the referred subID, and 100 to the rootID.", "./raw_text_input_docs/launch-currency.md"]]], [["User:: I've been hearing about the Verus-Ethereum Bridge, but I'm not really sure what it is or how it works. Can you explain it to me?", "AI Assistant:: The Verus-Ethereum Bridge is a trustless and non-custodial bridge that allows for the secure transfer and conversion of cryptocurrencies between Verus and Ethereum. It doesn't require users to trust a third party with their funds, and no single entity has control over the assets being transferred. This bridge stands out because it avoids common security issues found in other cryptocurrency bridges by using the decentralized network of miners and stakers to verify and account for funds crossing the bridge.", "User:: That sounds interesting. What are the key benefits of using the Verus-Ethereum Bridge?", "AI Assistant:: The Verus-Ethereum Bridge is trustless and non-custodial, meaning that users don't need to trust a third party with their funds, and no single entity has control over the assets being transferred. This ensures a high level of security and control for users when transferring cryptocurrencies between Verus and Ethereum.", "User:: That sounds great. How can I access the Verus-Ethereum Bridge?", "AI Assistant:: You can access the Verus-Ethereum Bridge through MetaMask or WalletConnect at [https://eth.verusbridge.io](https://eth.verusbridge.io), or by downloading the Verus Mobile app for iOS or Android."], "AI Assistant", "", "N/A", [["What is the Verus-Ethereum Bridge, and how does it facilitate cryptocurrency transfers?", "The Verus-Ethereum Bridge is a trustless and non-custodial bridge that allows for the secure transfer and conversion of cryptocurrencies between Verus and Ethereum. It doesn't require users to trust a third party with their funds, and no single entity has control over the assets being transferred. This bridge stands out because it avoids common security issues found in other cryptocurrency bridges by using the decentralized network of miners and stakers to verify and account for funds crossing the bridge.", "# What is the Verus-Ethereum Bridge\nThe Verus-Ethereum Bridge (fully operational since Oct 20, 2023) allows for the secure transfer and conversion of cryptocurrencies between Verus and Ethereum. It's **trustless** and **non-custodial**, meaning it doesn't require users to trust a third party with their funds, and **no single entity has control over the assets being transferred**.The Bridge stands out because it avoids common security issues found in other cryptocurrency bridges by using the decentralized network of miners and stakers to verify and account for funds crossing the bridge.\ud83d\udc49 Access the Verus-Ethereum Bridge [with MetaMask or WalletConnect](https://eth.verusbridge.io), or download Verus Mobile for [iOS](https://apps.apple.com/en/app/verus-mobile/id6447361908) and [Android](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US).## What can the Verus-Ethereum Bridge do\nThe trustless and non-custodial Verus-Ethereum Bridge can be used for the following things:", "./raw_text_input_docs/README_eth-bridge.md"], ["What are the key benefits of using the Verus-Ethereum Bridge?", "The Verus-Ethereum Bridge is trustless and non-custodial, meaning that users don't need to trust a third party with their funds, and no single entity has control over the assets being transferred. This ensures a high level of security and control for users when transferring cryptocurrencies between Verus and Ethereum.", "# What is the Verus-Ethereum Bridge\nThe Verus-Ethereum Bridge (fully operational since Oct 20, 2023) allows for the secure transfer and conversion of cryptocurrencies between Verus and Ethereum. It's **trustless** and **non-custodial**, meaning it doesn't require users to trust a third party with their funds, and **no single entity has control over the assets being transferred**.The Bridge stands out because it avoids common security issues found in other cryptocurrency bridges by using the decentralized network of miners and stakers to verify and account for funds crossing the bridge.\ud83d\udc49 Access the Verus-Ethereum Bridge [with MetaMask or WalletConnect](https://eth.verusbridge.io), or download Verus Mobile for [iOS](https://apps.apple.com/en/app/verus-mobile/id6447361908) and [Android](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US).## What can the Verus-Ethereum Bridge do\nThe trustless and non-custodial Verus-Ethereum Bridge can be used for the following things:", "./raw_text_input_docs/README_eth-bridge.md"], ["How can I access the Verus-Ethereum Bridge?", "You can access the Verus-Ethereum Bridge through MetaMask or WalletConnect at [https://eth.verusbridge.io](https://eth.verusbridge.io), or by downloading the Verus Mobile app for iOS or Android.", "# What is the Verus-Ethereum Bridge\nThe Verus-Ethereum Bridge (fully operational since Oct 20, 2023) allows for the secure transfer and conversion of cryptocurrencies between Verus and Ethereum. It's **trustless** and **non-custodial**, meaning it doesn't require users to trust a third party with their funds, and **no single entity has control over the assets being transferred**.The Bridge stands out because it avoids common security issues found in other cryptocurrency bridges by using the decentralized network of miners and stakers to verify and account for funds crossing the bridge.\ud83d\udc49 Access the Verus-Ethereum Bridge [with MetaMask or WalletConnect](https://eth.verusbridge.io), or download Verus Mobile for [iOS](https://apps.apple.com/en/app/verus-mobile/id6447361908) and [Android](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US).## What can the Verus-Ethereum Bridge do\nThe trustless and non-custodial Verus-Ethereum Bridge can be used for the following things:", "./raw_text_input_docs/README_eth-bridge.md"]]], [["User:: I'm trying to learn more about creating currencies on Verus. I came across the \"nativecurrencyid\" parameter in a currency definition. What is it used for, and what does it include?", "AI Assistant:: The \"nativecurrencyid\" parameter is used for mapped ERC-20 tokens, and it includes the Ethereum contract address for the ERC-20 token. This allows for easy integration with existing tokens on the Ethereum blockchain. Do you have any more questions about creating currencies on Verus?", "User:: Before I start creating a currency, I want to make sure I do it right. What should I do before launching a currency or token on Verus or any other PBaaS-chain?", "AI Assistant:: It is highly recommended to try out the currency or token on the Verus Testnet first before launching it on the mainnet. This will allow you to test and refine your currency definition without risking any real assets. It's always a good idea to test before going live!", "User:: Okay, got it! Now, how do I launch a currency using a currency definition with the command-line interface?", "AI Assistant:: To launch a currency, you need to use the `definecurrency` command with your currency definition, which will give you a HEX value as output. Then, you need to use the `sendrawtransaction` command with the HEX value to launch the currency. This will broadcast your currency definition to the network and start the launch process.", "User:: What happens after I launch a currency, and how long does it take for the currency to be fully launched?", "AI Assistant:: After launching a currency, the funds from the rootID are taken, and it takes a minimum of 20 blocks (or startblock) for the currency to be fully launched, if all preconversion goals are met. This allows the network to validate and confirm the launch of your new currency.", "User:: After the currency is launched, how can I lookup information about it?", "AI Assistant:: You can use the `getcurrency` command with the currency name to lookup information about a currency after it has been launched. This will give you details about the currency, such as its current status, parameters, and other relevant information."], "AI Assistant", "", "N/A", [["What is the \"nativecurrencyid\" parameter used for in a currency definition, and what does it include?", "The \"nativecurrencyid\" parameter is used for mapped ERC-20 tokens, and it includes the Ethereum contract address for the ERC-20 token.", "### **\"nativecurrencyid\"**\nUse this parameter for mapped ERC-20 tokens. The parameter includes the Ethereum contract address for the ERC-20. [Read more](/currencies/mapping-1:1-eth)\n\n::: warning Need help setting up a currency launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::\n\n## How to launch\nNow you know how to create a currency definition with all its options and parameters. Next up: how to actually use the definition to launch a currency.\n\nHere we use the command-line interface. If you want to use the built-in terminal from Verus Desktop, just replace ``./verus -chain=VRSCTEST`` with ``run``.\n\n::: tip Use Verus Testnet first! \ud83d\udc77\nBefore launching your currency or token on Verus (or any other PBaaS-chain), it is highly recommended to try it out on testnet first. \n:::\n\nLet's use this example definition to launch the currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\",\n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Influencer@\":100}]\n}'\n```\n\nEntering the above command into the command-line interface wallet gives a `HEX` value as output. Take that HEX and do the following command below. \u26a0\ufe0f IMPORTANT: make sure there are enough funds in the rootID for the currency fee (200.0002 VRSC) and the initial contribution (when in parameters).\n\n``` json\n./verus -chain=VRSCTEST sendrawtransaction \"HEX\"\n```\n\nAfter doing the command above the currency has started, the funds from the rootID are taken, and it takes a minimum of 20 blocks (or startblock) to actually launch it (and if all preconversion goals are met).\n\nDuring the preconversion time frame and after the launch you can lookup all kinds of information on the currency with the following command:\n\n``` json\n./verus -chain=VRSCTEST getcurrency \"MyBrand\"\n```", "./raw_text_input_docs/launch-currency.md"], ["What should I do before launching a currency or token on Verus or any other PBaaS-chain?", "It is highly recommended to try out the currency or token on the Verus Testnet first before launching it on the mainnet.", "### **\"nativecurrencyid\"**\nUse this parameter for mapped ERC-20 tokens. The parameter includes the Ethereum contract address for the ERC-20. [Read more](/currencies/mapping-1:1-eth)\n\n::: warning Need help setting up a currency launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::\n\n## How to launch\nNow you know how to create a currency definition with all its options and parameters. Next up: how to actually use the definition to launch a currency.\n\nHere we use the command-line interface. If you want to use the built-in terminal from Verus Desktop, just replace ``./verus -chain=VRSCTEST`` with ``run``.\n\n::: tip Use Verus Testnet first! \ud83d\udc77\nBefore launching your currency or token on Verus (or any other PBaaS-chain), it is highly recommended to try it out on testnet first. \n:::\n\nLet's use this example definition to launch the currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\",\n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Influencer@\":100}]\n}'\n```\n\nEntering the above command into the command-line interface wallet gives a `HEX` value as output. Take that HEX and do the following command below. \u26a0\ufe0f IMPORTANT: make sure there are enough funds in the rootID for the currency fee (200.0002 VRSC) and the initial contribution (when in parameters).\n\n``` json\n./verus -chain=VRSCTEST sendrawtransaction \"HEX\"\n```\n\nAfter doing the command above the currency has started, the funds from the rootID are taken, and it takes a minimum of 20 blocks (or startblock) to actually launch it (and if all preconversion goals are met).\n\nDuring the preconversion time frame and after the launch you can lookup all kinds of information on the currency with the following command:\n\n``` json\n./verus -chain=VRSCTEST getcurrency \"MyBrand\"\n```", "./raw_text_input_docs/launch-currency.md"], ["How do I launch a currency using a currency definition with the command-line interface?", "To launch a currency, you need to use the `definecurrency` command with your currency definition, which will give you a HEX value as output. Then, you need to use the `sendrawtransaction` command with the HEX value to launch the currency.", "### **\"nativecurrencyid\"**\nUse this parameter for mapped ERC-20 tokens. The parameter includes the Ethereum contract address for the ERC-20. [Read more](/currencies/mapping-1:1-eth)\n\n::: warning Need help setting up a currency launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::\n\n## How to launch\nNow you know how to create a currency definition with all its options and parameters. Next up: how to actually use the definition to launch a currency.\n\nHere we use the command-line interface. If you want to use the built-in terminal from Verus Desktop, just replace ``./verus -chain=VRSCTEST`` with ``run``.\n\n::: tip Use Verus Testnet first! \ud83d\udc77\nBefore launching your currency or token on Verus (or any other PBaaS-chain), it is highly recommended to try it out on testnet first. \n:::\n\nLet's use this example definition to launch the currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\",\n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Influencer@\":100}]\n}'\n```\n\nEntering the above command into the command-line interface wallet gives a `HEX` value as output. Take that HEX and do the following command below. \u26a0\ufe0f IMPORTANT: make sure there are enough funds in the rootID for the currency fee (200.0002 VRSC) and the initial contribution (when in parameters).\n\n``` json\n./verus -chain=VRSCTEST sendrawtransaction \"HEX\"\n```\n\nAfter doing the command above the currency has started, the funds from the rootID are taken, and it takes a minimum of 20 blocks (or startblock) to actually launch it (and if all preconversion goals are met).\n\nDuring the preconversion time frame and after the launch you can lookup all kinds of information on the currency with the following command:\n\n``` json\n./verus -chain=VRSCTEST getcurrency \"MyBrand\"\n```", "./raw_text_input_docs/launch-currency.md"], ["What happens after I launch a currency, and how long does it take for the currency to be fully launched?", "After launching a currency, the funds from the rootID are taken, and it takes a minimum of 20 blocks (or startblock) for the currency to be fully launched, if all preconversion goals are met.", "### **\"nativecurrencyid\"**\nUse this parameter for mapped ERC-20 tokens. The parameter includes the Ethereum contract address for the ERC-20. [Read more](/currencies/mapping-1:1-eth)\n\n::: warning Need help setting up a currency launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::\n\n## How to launch\nNow you know how to create a currency definition with all its options and parameters. Next up: how to actually use the definition to launch a currency.\n\nHere we use the command-line interface. If you want to use the built-in terminal from Verus Desktop, just replace ``./verus -chain=VRSCTEST`` with ``run``.\n\n::: tip Use Verus Testnet first! \ud83d\udc77\nBefore launching your currency or token on Verus (or any other PBaaS-chain), it is highly recommended to try it out on testnet first. \n:::\n\nLet's use this example definition to launch the currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\",\n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Influencer@\":100}]\n}'\n```\n\nEntering the above command into the command-line interface wallet gives a `HEX` value as output. Take that HEX and do the following command below. \u26a0\ufe0f IMPORTANT: make sure there are enough funds in the rootID for the currency fee (200.0002 VRSC) and the initial contribution (when in parameters).\n\n``` json\n./verus -chain=VRSCTEST sendrawtransaction \"HEX\"\n```\n\nAfter doing the command above the currency has started, the funds from the rootID are taken, and it takes a minimum of 20 blocks (or startblock) to actually launch it (and if all preconversion goals are met).\n\nDuring the preconversion time frame and after the launch you can lookup all kinds of information on the currency with the following command:\n\n``` json\n./verus -chain=VRSCTEST getcurrency \"MyBrand\"\n```", "./raw_text_input_docs/launch-currency.md"], ["How can I lookup information about a currency after it has been launched?", "You can use the `getcurrency` command with the currency name to lookup information about a currency after it has been launched.", "### **\"nativecurrencyid\"**\nUse this parameter for mapped ERC-20 tokens. The parameter includes the Ethereum contract address for the ERC-20. [Read more](/currencies/mapping-1:1-eth)\n\n::: warning Need help setting up a currency launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::\n\n## How to launch\nNow you know how to create a currency definition with all its options and parameters. Next up: how to actually use the definition to launch a currency.\n\nHere we use the command-line interface. If you want to use the built-in terminal from Verus Desktop, just replace ``./verus -chain=VRSCTEST`` with ``run``.\n\n::: tip Use Verus Testnet first! \ud83d\udc77\nBefore launching your currency or token on Verus (or any other PBaaS-chain), it is highly recommended to try it out on testnet first. \n:::\n\nLet's use this example definition to launch the currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\",\n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Influencer@\":100}]\n}'\n```\n\nEntering the above command into the command-line interface wallet gives a `HEX` value as output. Take that HEX and do the following command below. \u26a0\ufe0f IMPORTANT: make sure there are enough funds in the rootID for the currency fee (200.0002 VRSC) and the initial contribution (when in parameters).\n\n``` json\n./verus -chain=VRSCTEST sendrawtransaction \"HEX\"\n```\n\nAfter doing the command above the currency has started, the funds from the rootID are taken, and it takes a minimum of 20 blocks (or startblock) to actually launch it (and if all preconversion goals are met).\n\nDuring the preconversion time frame and after the launch you can lookup all kinds of information on the currency with the following command:\n\n``` json\n./verus -chain=VRSCTEST getcurrency \"MyBrand\"\n```", "./raw_text_input_docs/launch-currency.md"]]], [["User:: I've been reading about Verus and I'm interested in learning more about its consensus algorithm. What is Verus Proof of Power (VerusPoP), and how does it work?", "AI Assistant:: Verus Proof of Power (VerusPoP) is a hybrid consensus algorithm that combines both Proof of Work (PoW) and Proof of Stake (PoS) to validate blocks on the Verus blockchain. It uses a statistical function to ensure that 50% of all blocks are validated by miners (PoW) and the other 50% by stakers (PoS). This hybrid approach provides a unique balance between the two validation methods.\n\nDo you have any further questions about VerusPoP or its implementation?", "User:: That's interesting. What is the advantage of VerusPoP in terms of security and attack resistance?", "AI Assistant:: The VerusPoP consensus algorithm provides strong attack resistance because a successful attack would require more than 50% of the validation power, which is known as \"Chain Power\". This means that an attacker would need to control over 50% of both the network's hashpower and its coin supply, making it extremely difficult to launch a 51% attack. This added security makes Verus a more reliable and trustworthy network.\n\nWould you like to know more about the technical aspects of VerusPoP or its implementation?", "User:: I've heard that VerusHash is a key component of VerusPoP. What is VerusHash, and what makes it unique?", "AI Assistant:: VerusHash is a hash function specifically designed for the VerusPoP consensus algorithm. It is a CPU-friendly long input hash function that uses the quantum-secure Haraka512 V2 algorithm as its core compression algorithm. VerusHash is unique in that it allows modern CPUs and GPUs to compete on an economically comparable level, making it the fastest known cryptocurrency hash algorithm available. This makes it an essential part of the VerusPoP consensus algorithm.\n\nDo you have any more questions about VerusHash or its role in VerusPoP?", "User:: Finally, what is the benefit of VerusPoP in terms of decentralization and network support?", "AI Assistant:: VerusPoP provides a decentralizing effect on the network by incentivizing holders to keep nodes online to support the network. This ensures that the network remains decentralized and that there is no single point of failure. Even if there is a change in the network's hashrate, the PoW/PoS ratio remains the same at 50/50%, maintaining the balance between miners and stakers. This balance is essential to the health and security of the Verus network.\n\nI hope that answers all your questions about VerusPoP! Let me know if you have any more."], "AI Assistant", "", "N/A", [["What is Verus Proof of Power (VerusPoP), and how does it work?", "Verus Proof of Power (VerusPoP) is a hybrid consensus algorithm that combines both Proof of Work (PoW) and Proof of Stake (PoS) to validate blocks on the Verus blockchain. It uses a statistical function to ensure that 50% of all blocks are validated by miners (PoW) and the other 50% by stakers (PoS).", "# Verus Proof of Power\nVerusPoP is a 50% proof-of-work, 50% proof-of-stake consensus algorithm.\n[More information on the Verus miner and staker ecosystem](/economy/).## Hybrid Consensus\nVerus Proof of Power, or VerusPoP, is a hybrid consensus algorithm which uses a statistical function that combines Proof of Work (PoW) and Proof of Stake (PoS) to validate each block by either PoW or PoS, while averaging to a target percentage of blocks being validated by each form of proof.In short, it a unique consensus mechanism with 50% of all blocks validated by miners, and the other 50% by stakers.## Attack Resistant\nTo successfully attack the Verus blockchain, more than 50% of the validation power is needed, called ``Chain Power``. A 51% attack would require a combined value of over 50% of both the chain\u2019s hashpower and its coin supply. [For technical information on VerusPoP read the whitepaper](https://verus.io/docs/VerusPoP.pdf).VerusPoP provides a decentralizing effect on the network, incentivizing holders to keep nodes online to support the network. Even if a change in network hashrate happens, the PoW/PoS ratio stays the same: 50/50%.## VerusHash 2.2\n[From the VerusPoP whitepaper](https://verus.io/docs/VerusPoP.pdf):\"VerusHash is specifically developed to deliver a competitive advantage for CPUs with GPUs. It is an exceedingly CPU-friendly long input hash function that uses the quantum-secure, short input Haraka512 V2 as its core compression algorithm. The result is the fastest known cryptocurrency hash algorithm available to modern CPUs and the only hash algorithm which enables today\u2019s CPUs and GPUs to compete on an economically comparable level.", "./raw_text_input_docs/verus-proof-of-power.md"], ["What is the advantage of VerusPoP in terms of security and attack resistance?", "The VerusPoP consensus algorithm provides strong attack resistance because a successful attack would require more than 50% of the validation power, which is known as \"Chain Power\". This means that an attacker would need to control over 50% of both the network's hashpower and its coin supply, making it extremely difficult to launch a 51% attack.", "# Verus Proof of Power\nVerusPoP is a 50% proof-of-work, 50% proof-of-stake consensus algorithm.\n[More information on the Verus miner and staker ecosystem](/economy/).## Hybrid Consensus\nVerus Proof of Power, or VerusPoP, is a hybrid consensus algorithm which uses a statistical function that combines Proof of Work (PoW) and Proof of Stake (PoS) to validate each block by either PoW or PoS, while averaging to a target percentage of blocks being validated by each form of proof.In short, it a unique consensus mechanism with 50% of all blocks validated by miners, and the other 50% by stakers.## Attack Resistant\nTo successfully attack the Verus blockchain, more than 50% of the validation power is needed, called ``Chain Power``. A 51% attack would require a combined value of over 50% of both the chain\u2019s hashpower and its coin supply. [For technical information on VerusPoP read the whitepaper](https://verus.io/docs/VerusPoP.pdf).VerusPoP provides a decentralizing effect on the network, incentivizing holders to keep nodes online to support the network. Even if a change in network hashrate happens, the PoW/PoS ratio stays the same: 50/50%.## VerusHash 2.2\n[From the VerusPoP whitepaper](https://verus.io/docs/VerusPoP.pdf):\"VerusHash is specifically developed to deliver a competitive advantage for CPUs with GPUs. It is an exceedingly CPU-friendly long input hash function that uses the quantum-secure, short input Haraka512 V2 as its core compression algorithm. The result is the fastest known cryptocurrency hash algorithm available to modern CPUs and the only hash algorithm which enables today\u2019s CPUs and GPUs to compete on an economically comparable level.", "./raw_text_input_docs/verus-proof-of-power.md"], ["What is VerusHash, and what makes it unique?", "VerusHash is a hash function specifically designed for the VerusPoP consensus algorithm. It is a CPU-friendly long input hash function that uses the quantum-secure Haraka512 V2 algorithm as its core compression algorithm. VerusHash is unique in that it allows modern CPUs and GPUs to compete on an economically comparable level, making it the fastest known cryptocurrency hash algorithm available.", "# Verus Proof of Power\nVerusPoP is a 50% proof-of-work, 50% proof-of-stake consensus algorithm.\n[More information on the Verus miner and staker ecosystem](/economy/).## Hybrid Consensus\nVerus Proof of Power, or VerusPoP, is a hybrid consensus algorithm which uses a statistical function that combines Proof of Work (PoW) and Proof of Stake (PoS) to validate each block by either PoW or PoS, while averaging to a target percentage of blocks being validated by each form of proof.In short, it a unique consensus mechanism with 50% of all blocks validated by miners, and the other 50% by stakers.## Attack Resistant\nTo successfully attack the Verus blockchain, more than 50% of the validation power is needed, called ``Chain Power``. A 51% attack would require a combined value of over 50% of both the chain\u2019s hashpower and its coin supply. [For technical information on VerusPoP read the whitepaper](https://verus.io/docs/VerusPoP.pdf).VerusPoP provides a decentralizing effect on the network, incentivizing holders to keep nodes online to support the network. Even if a change in network hashrate happens, the PoW/PoS ratio stays the same: 50/50%.## VerusHash 2.2\n[From the VerusPoP whitepaper](https://verus.io/docs/VerusPoP.pdf):\"VerusHash is specifically developed to deliver a competitive advantage for CPUs with GPUs. It is an exceedingly CPU-friendly long input hash function that uses the quantum-secure, short input Haraka512 V2 as its core compression algorithm. The result is the fastest known cryptocurrency hash algorithm available to modern CPUs and the only hash algorithm which enables today\u2019s CPUs and GPUs to compete on an economically comparable level.", "./raw_text_input_docs/verus-proof-of-power.md"], ["What is the benefit of VerusPoP in terms of decentralization and network support?", "VerusPoP provides a decentralizing effect on the network by incentivizing holders to keep nodes online to support the network. This ensures that the network remains decentralized and that there is no single point of failure. Even if there is a change in the network's hashrate, the PoW/PoS ratio remains the same at 50/50%, maintaining the balance between miners and stakers.", "# Verus Proof of Power\nVerusPoP is a 50% proof-of-work, 50% proof-of-stake consensus algorithm.\n[More information on the Verus miner and staker ecosystem](/economy/).## Hybrid Consensus\nVerus Proof of Power, or VerusPoP, is a hybrid consensus algorithm which uses a statistical function that combines Proof of Work (PoW) and Proof of Stake (PoS) to validate each block by either PoW or PoS, while averaging to a target percentage of blocks being validated by each form of proof.In short, it a unique consensus mechanism with 50% of all blocks validated by miners, and the other 50% by stakers.## Attack Resistant\nTo successfully attack the Verus blockchain, more than 50% of the validation power is needed, called ``Chain Power``. A 51% attack would require a combined value of over 50% of both the chain\u2019s hashpower and its coin supply. [For technical information on VerusPoP read the whitepaper](https://verus.io/docs/VerusPoP.pdf).VerusPoP provides a decentralizing effect on the network, incentivizing holders to keep nodes online to support the network. Even if a change in network hashrate happens, the PoW/PoS ratio stays the same: 50/50%.## VerusHash 2.2\n[From the VerusPoP whitepaper](https://verus.io/docs/VerusPoP.pdf):\"VerusHash is specifically developed to deliver a competitive advantage for CPUs with GPUs. It is an exceedingly CPU-friendly long input hash function that uses the quantum-secure, short input Haraka512 V2 as its core compression algorithm. The result is the fastest known cryptocurrency hash algorithm available to modern CPUs and the only hash algorithm which enables today\u2019s CPUs and GPUs to compete on an economically comparable level.", "./raw_text_input_docs/verus-proof-of-power.md"]]], [["User:: I've heard about the VerusID login feature, but I'm not really sure what it does. Can you tell me more?", "AI Assistant:: The VerusID login feature allows users to log in to websites and services while controlling how, when, and with whom their personal data is shared. This means that users have full control over their personal data and can choose what information to share and with whom. It's a great way to maintain privacy and security while still being able to access the services you need.", "User:: That sounds really interesting. Can you walk me through how the VerusID login process works?", "AI Assistant:: The VerusID login process involves the following steps:\n\n1. The user scans a QR code on the website they want to log in to.\n2. The Verus Mobile app verifies the request from the website and asks the user to reveal some identity data.\n3. The user confirms the source of the request and trusts the website.\n4. The user's phone posts a reply to the website's server in the background, which causes an immediate login and private sharing of the data.\n\nIt's a pretty straightforward process, and it allows users to maintain control over their personal data while still being able to access the services they need.", "User:: That sounds great! How can I try out the VerusID login feature?", "AI Assistant:: You can try out the VerusID login feature by testing the VerusID login demo on the Verus website. You can also download the Verus Mobile app from the Google Play Store or App Store to use the feature on your mobile device. Just follow the prompts to set up your VerusID and start using the login feature to access websites and services. Let me know if you have any other questions or need further assistance!"], "AI Assistant", "", "N/A", [["What is the purpose of the VerusID login feature?", "The VerusID login feature allows users to log in to websites and services while controlling how, when, and with whom their personal data is shared. This means that users have full control over their personal data and can choose what information to share and with whom.", "# VerusID SSID Login\n\n::: tip VerusID Login Demo\nTest the VerusID login with Verus Mobile [here](https://verus.io/verusid-login-demo)\n:::\n\n### Login to websites and services\nLogin with VerusID on supported websites and services. Users control how, when, and with whom their personal data is shared. Users control their personal data fully.\n\n![image-verusid-login](/images/verusidlogin1.png)\n\nThese are the steps:\n1. **User Scans QR Code**: The user scans a QR code if they want to proceed to login. If the user has a valid attestation the website respects, it can be used on login.\n\n2. **Mobile App Verification and Data Request**: Once Verus Mobile ([Google Play](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US), [App Store](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US)) scans the QR code the user can verify the request from the site. In this case it will ask the user to reveal some identity data. The user can confirm the source of the request of data by verifying, and then trusting.\n\n3. **Login and Data Sharing**: At the website the user will be logged in using a reply the phone posts to the websites server in the background. This causes an immediate login and\nsharing of the data privately.", "./raw_text_input_docs/login.md"], ["How does the VerusID login process work?", "The VerusID login process involves the following steps:\n\n1. The user scans a QR code on the website they want to log in to.\n2. The Verus Mobile app verifies the request from the website and asks the user to reveal some identity data.\n3. The user confirms the source of the request and trusts the website.\n4. The user's phone posts a reply to the website's server in the background, which causes an immediate login and private sharing of the data.", "# VerusID SSID Login\n\n::: tip VerusID Login Demo\nTest the VerusID login with Verus Mobile [here](https://verus.io/verusid-login-demo)\n:::\n\n### Login to websites and services\nLogin with VerusID on supported websites and services. Users control how, when, and with whom their personal data is shared. Users control their personal data fully.\n\n![image-verusid-login](/images/verusidlogin1.png)\n\nThese are the steps:\n1. **User Scans QR Code**: The user scans a QR code if they want to proceed to login. If the user has a valid attestation the website respects, it can be used on login.\n\n2. **Mobile App Verification and Data Request**: Once Verus Mobile ([Google Play](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US), [App Store](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US)) scans the QR code the user can verify the request from the site. In this case it will ask the user to reveal some identity data. The user can confirm the source of the request of data by verifying, and then trusting.\n\n3. **Login and Data Sharing**: At the website the user will be logged in using a reply the phone posts to the websites server in the background. This causes an immediate login and\nsharing of the data privately.", "./raw_text_input_docs/login.md"], ["How can I try out the VerusID login feature?", "You can try out the VerusID login feature by testing the VerusID login demo on the Verus website. You can also download the Verus Mobile app from the Google Play Store or App Store to use the feature on your mobile device.", "# VerusID SSID Login\n\n::: tip VerusID Login Demo\nTest the VerusID login with Verus Mobile [here](https://verus.io/verusid-login-demo)\n:::\n\n### Login to websites and services\nLogin with VerusID on supported websites and services. Users control how, when, and with whom their personal data is shared. Users control their personal data fully.\n\n![image-verusid-login](/images/verusidlogin1.png)\n\nThese are the steps:\n1. **User Scans QR Code**: The user scans a QR code if they want to proceed to login. If the user has a valid attestation the website respects, it can be used on login.\n\n2. **Mobile App Verification and Data Request**: Once Verus Mobile ([Google Play](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US), [App Store](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US)) scans the QR code the user can verify the request from the site. In this case it will ask the user to reveal some identity data. The user can confirm the source of the request of data by verifying, and then trusting.\n\n3. **Login and Data Sharing**: At the website the user will be logged in using a reply the phone posts to the websites server in the background. This causes an immediate login and\nsharing of the data privately.", "./raw_text_input_docs/login.md"]]], [["User:: I've been learning about VerusIDs and I was wondering, what is the purpose of VerusID signatures?", "AI Assistant:: VerusID signatures are used to create unforgable and verifiable signatures for files, hashes, and messages. These signatures can be verified for free using the Verus protocol. This provides a secure way to authenticate and verify the integrity of digital data. Do you have any further questions about VerusID signatures or their use cases?", "User:: No, that makes sense. Actually, I was thinking about another feature of VerusIDs - multisig. What is the benefit of using VerusID multisig?", "AI Assistant:: The benefit of using VerusID multisig is that multiple organizations or people can manage a single VerusID, allowing for shared spending or signing ability. This can be useful in a variety of scenarios, such as joint ownership of assets, corporate treasury management, or even decentralized governance models. By requiring multiple parties to agree on transactions or actions, VerusID multisig provides an additional layer of security and accountability. Does that help clarify the benefits of multisig?"], "AI Assistant", "", "N/A", [["What is the purpose of VerusID signatures?", "VerusID signatures are used to create unforgable and verifiable signatures for files, hashes, and messages. These signatures can be verified for free using the Verus protocol.", "## Signatures\nCreate unforgable, verifiable signatures with VerusID. Sign files, hashes and messages. Use the protocol to verify those signatures for free.\n\n## Multisig\nMultiple VerusIDs can have spending or signing ability of one VerusID. This means that multiple organizations or people can manage a VerusID.\n\n## Messages\nSend private messages to VerusIDs.", "./raw_text_input_docs/README_addresses.md"], ["What is the benefit of using VerusID multisig?", "The benefit of using VerusID multisig is that multiple organizations or people can manage a single VerusID, allowing for shared spending or signing ability.", "## Signatures\nCreate unforgable, verifiable signatures with VerusID. Sign files, hashes and messages. Use the protocol to verify those signatures for free.\n\n## Multisig\nMultiple VerusIDs can have spending or signing ability of one VerusID. This means that multiple organizations or people can manage a VerusID.\n\n## Messages\nSend private messages to VerusIDs.", "./raw_text_input_docs/README_addresses.md"]]], [["User:: I've been trying to understand the Transfer Destination functionality in Verus, but I'm not entirely sure what it's for. Can you explain the primary purpose of Transfer Destination in Verus?", "AI Assistant:: The core functionality of Transfer Destination in Verus revolves around the ability to serialize and deserialize destination information, ensuring that destination data can be efficiently transmitted across networks or stored, while maintaining integrity and compatibility across different implementations.", "User:: That makes sense. What are the key components involved in the serialization process of Transfer Destination in Verus?", "AI Assistant:: The key components involved in the serialization process of Transfer Destination in Verus are:\n\n1. **Type**: A numerical value indicating the destination type, serialized directly as part of the destination data, which includes flags.\n2. **Destination Bytes**: The specific bytes associated with the destination, which may represent an address, identifier, or other relevant data, depending on the destination type.\n3. **Gateway ID & Gateway Code**: Optional components used for gateway destinations, serialized when present to include external system identifiers.\n4. **Fees**: Associated fees, if applicable, serialized to ensure the correct processing of transactions, particularly for complex or cross-chain operations.\n5. **Auxiliary Destinations**: An optional list of additional Transfer Destination constructs, serialized to support nested or multi-part transactions.", "User:: That's really helpful, thanks! I was also wondering, what's the importance of standardization in the serialization and deserialization mechanisms of Transfer Destination in Verus?", "AI Assistant:: The serialization and deserialization mechanisms must adhere to a standardized format to ensure interoperability. Implementations in different programming languages should focus on accurately reflecting the structure and logic outlined, ensuring that Transfer Destination constructs are universally compatible, regardless of the underlying platform or language used.", "User:: That makes sense. Finally, what's the significance of the Transfer Destination functionality in Verus?", "AI Assistant:: The Transfer Destination functionality in Verus is significant because it enables the efficient transmission and storage of destination data, while maintaining integrity and compatibility across different implementations. This functionality is crucial for ensuring the correct processing of transactions, particularly for complex or cross-chain operations."], "AI Assistant", "", "N/A", [["What is the primary purpose of the Transfer Destination functionality in Verus?", "The core functionality of Transfer Destination in Verus revolves around the ability to serialize and deserialize destination information, ensuring that destination data can be efficiently transmitted across networks or stored, while maintaining integrity and compatibility across different implementations.", "The core functionality of Transfer Destination revolves around the ability to serialize and deserialize destination information. This process ensures that destination data can be efficiently transmitted across networks or stored, maintaining integrity and compatibility across different implementations.### Key Components in Serialization![image-transfer-destination-bytes](/images/transfer-destination-bytes.svg)- **Type**: A numerical value indicating the destination type, serialized directly as part of the destination data. Includes flags.\n- **Destination Bytes**: The specific bytes associated with the destination, which may represent an address, identifier, or other relevant data, depending on the destination type.\n- **Gateway ID & Gateway Code**: Optional components used for gateway destinations, serialized when present to include external system identifiers.\n- **Fees**: Associated fees, if applicable, serialized to ensure the correct processing of transactions, particularly for complex or cross-chain operations.\n- **Auxiliary Destinations**: An optional list of additional Transfer Destination constructs, serialized to support nested or multi-part transactions.### ConsiderationsThe serialization and deserialization mechanisms must adhere to a standardized format to ensure interoperability. Implementations in different programming languages should focus on accurately reflecting the structure and logic outlined, ensuring that Transfer Destination constructs are universally compatible, regardless of the underlying platform or language used.## Application and Significance", "./raw_text_input_docs/transfer-destination.md"], ["What are the key components involved in the serialization process of Transfer Destination in Verus?", "The key components involved in the serialization process of Transfer Destination in Verus are:\n\n1. **Type**: A numerical value indicating the destination type, serialized directly as part of the destination data, which includes flags.\n2. **Destination Bytes**: The specific bytes associated with the destination, which may represent an address, identifier, or other relevant data, depending on the destination type.\n3. **Gateway ID & Gateway Code**: Optional components used for gateway destinations, serialized when present to include external system identifiers.\n4. **Fees**: Associated fees, if applicable, serialized to ensure the correct processing of transactions, particularly for complex or cross-chain operations.\n5. **Auxiliary Destinations**: An optional list of additional Transfer Destination constructs, serialized to support nested or multi-part transactions.", "The core functionality of Transfer Destination revolves around the ability to serialize and deserialize destination information. This process ensures that destination data can be efficiently transmitted across networks or stored, maintaining integrity and compatibility across different implementations.### Key Components in Serialization![image-transfer-destination-bytes](/images/transfer-destination-bytes.svg)- **Type**: A numerical value indicating the destination type, serialized directly as part of the destination data. Includes flags.\n- **Destination Bytes**: The specific bytes associated with the destination, which may represent an address, identifier, or other relevant data, depending on the destination type.\n- **Gateway ID & Gateway Code**: Optional components used for gateway destinations, serialized when present to include external system identifiers.\n- **Fees**: Associated fees, if applicable, serialized to ensure the correct processing of transactions, particularly for complex or cross-chain operations.\n- **Auxiliary Destinations**: An optional list of additional Transfer Destination constructs, serialized to support nested or multi-part transactions.### ConsiderationsThe serialization and deserialization mechanisms must adhere to a standardized format to ensure interoperability. Implementations in different programming languages should focus on accurately reflecting the structure and logic outlined, ensuring that Transfer Destination constructs are universally compatible, regardless of the underlying platform or language used.## Application and Significance", "./raw_text_input_docs/transfer-destination.md"], ["What is the importance of standardization in the serialization and deserialization mechanisms of Transfer Destination in Verus?", "The serialization and deserialization mechanisms must adhere to a standardized format to ensure interoperability. Implementations in different programming languages should focus on accurately reflecting the structure and logic outlined, ensuring that Transfer Destination constructs are universally compatible, regardless of the underlying platform or language used.", "The core functionality of Transfer Destination revolves around the ability to serialize and deserialize destination information. This process ensures that destination data can be efficiently transmitted across networks or stored, maintaining integrity and compatibility across different implementations.### Key Components in Serialization![image-transfer-destination-bytes](/images/transfer-destination-bytes.svg)- **Type**: A numerical value indicating the destination type, serialized directly as part of the destination data. Includes flags.\n- **Destination Bytes**: The specific bytes associated with the destination, which may represent an address, identifier, or other relevant data, depending on the destination type.\n- **Gateway ID & Gateway Code**: Optional components used for gateway destinations, serialized when present to include external system identifiers.\n- **Fees**: Associated fees, if applicable, serialized to ensure the correct processing of transactions, particularly for complex or cross-chain operations.\n- **Auxiliary Destinations**: An optional list of additional Transfer Destination constructs, serialized to support nested or multi-part transactions.### ConsiderationsThe serialization and deserialization mechanisms must adhere to a standardized format to ensure interoperability. Implementations in different programming languages should focus on accurately reflecting the structure and logic outlined, ensuring that Transfer Destination constructs are universally compatible, regardless of the underlying platform or language used.## Application and Significance", "./raw_text_input_docs/transfer-destination.md"], ["What is the significance of the Transfer Destination functionality in Verus?", "The Transfer Destination functionality in Verus is significant because it enables the efficient transmission and storage of destination data, while maintaining integrity and compatibility across different implementations. This functionality is crucial for ensuring the correct processing of transactions, particularly for complex or cross-chain operations.", "The core functionality of Transfer Destination revolves around the ability to serialize and deserialize destination information. This process ensures that destination data can be efficiently transmitted across networks or stored, maintaining integrity and compatibility across different implementations.### Key Components in Serialization![image-transfer-destination-bytes](/images/transfer-destination-bytes.svg)- **Type**: A numerical value indicating the destination type, serialized directly as part of the destination data. Includes flags.\n- **Destination Bytes**: The specific bytes associated with the destination, which may represent an address, identifier, or other relevant data, depending on the destination type.\n- **Gateway ID & Gateway Code**: Optional components used for gateway destinations, serialized when present to include external system identifiers.\n- **Fees**: Associated fees, if applicable, serialized to ensure the correct processing of transactions, particularly for complex or cross-chain operations.\n- **Auxiliary Destinations**: An optional list of additional Transfer Destination constructs, serialized to support nested or multi-part transactions.### ConsiderationsThe serialization and deserialization mechanisms must adhere to a standardized format to ensure interoperability. Implementations in different programming languages should focus on accurately reflecting the structure and logic outlined, ensuring that Transfer Destination constructs are universally compatible, regardless of the underlying platform or language used.## Application and Significance", "./raw_text_input_docs/transfer-destination.md"]]], [["User:: I've been looking into Verus DeFi and I was wondering, what are the benefits of Verus DeFi compared to EVM-like account-based systems?", "AI Assistant:: Verus DeFi has several advantages. It is fair, cheap, and has no rent-seekers. It is also MEV-free, meaning it is resistant to front-running, back-running, and sandwich attacks. Additionally, it does not have the problems associated with EVM-like account-based systems. This makes Verus DeFi a more secure and equitable option for decentralized finance.", "User:: That sounds great. I've also been wondering about centralized currencies in Verus. What are the benefits of a centralized version of a currency in Verus, and how does it relate to the rootID?", "AI Assistant:: When a centralized version of a currency is created in Verus, the owner of the rootID can mint currencies into existence, automatically lowering the reserve ratio, or burn currencies, automatically raising the reserve ratio. This allows for more control over the currency and its reserve ratio. The rootID is essentially the master ID that has control over the currency, and this control is what enables the owner to make these changes to the reserve ratio. This level of control can be beneficial for certain use cases, such as stablecoins or other centralized currencies."], "AI Assistant", "", "N/A", [["What are the benefits of Verus DeFi compared to EVM-like account-based systems?", "Verus DeFi is fair, cheap, and has no rent-seekers. It is MEV-free, meaning it is resistant to front-running, back-running, and sandwich attacks. Additionally, it does not have the problems associated with EVM-like account-based systems.", "When a centralized version of this currency is created, the owner of the rootID can mint currencies into existence, while automatically lowering the reserve ratio. Or they can burn currencies and automatically raise the reserve ratio. Anyone can also just burn the currency at will without raising the reserve ratio.The conversion fees are incredibly low, 0.025% when converting to and from a basket currency, and 0.05% when converting from reserve to reserve currency. These fees go directly to the worldwide miners and stakers of the protocol, and/or they are accrued into the reserves making the basket currency worth more.| Conversion type | Fee | Fee goes to |\n| :-----| :------ | :-------- |\n| Basket currency \u2194\ufe0f reserve | 0.025% | 0.0125% added to reserves of the basket currency, 0.0125% to the block reward for miners and stakers | \n| Reserve \u2194\ufe0f reserve | 0.05% | 0.025% added to reserves of the basket currency, 0.025% to the block reward for miners and stakers |Because all currency conversions are solved simultaneously inside a block, giving all participants the same price, the protocol is MEV-free (no front-running, back-running, sandwich attacks etc.). The protocol doesn\u2019t have any of the problems EVM-like account-based systems have. Verus DeFi is fair, cheap and has no rent-seekers.Every(!) currency and token on the Verus network (also mapped ERC-20s!), can be used as reserves for basket currencies. As you might start to understand now \u2014 basket currencies are unique currencies that can not be found anywhere else and offer an enormous amount of opportunities for value creation.", "./raw_text_input_docs/README_currencies.md"], ["What are the benefits of a centralized version of a currency in Verus, and how does it relate to the rootID?", "When a centralized version of a currency is created in Verus, the owner of the rootID can mint currencies into existence, automatically lowering the reserve ratio, or burn currencies, automatically raising the reserve ratio. This allows for more control over the currency and its reserve ratio.", "When a centralized version of this currency is created, the owner of the rootID can mint currencies into existence, while automatically lowering the reserve ratio. Or they can burn currencies and automatically raise the reserve ratio. Anyone can also just burn the currency at will without raising the reserve ratio.The conversion fees are incredibly low, 0.025% when converting to and from a basket currency, and 0.05% when converting from reserve to reserve currency. These fees go directly to the worldwide miners and stakers of the protocol, and/or they are accrued into the reserves making the basket currency worth more.| Conversion type | Fee | Fee goes to |\n| :-----| :------ | :-------- |\n| Basket currency \u2194\ufe0f reserve | 0.025% | 0.0125% added to reserves of the basket currency, 0.0125% to the block reward for miners and stakers | \n| Reserve \u2194\ufe0f reserve | 0.05% | 0.025% added to reserves of the basket currency, 0.025% to the block reward for miners and stakers |Because all currency conversions are solved simultaneously inside a block, giving all participants the same price, the protocol is MEV-free (no front-running, back-running, sandwich attacks etc.). The protocol doesn\u2019t have any of the problems EVM-like account-based systems have. Verus DeFi is fair, cheap and has no rent-seekers.Every(!) currency and token on the Verus network (also mapped ERC-20s!), can be used as reserves for basket currencies. As you might start to understand now \u2014 basket currencies are unique currencies that can not be found anywhere else and offer an enormous amount of opportunities for value creation.", "./raw_text_input_docs/README_currencies.md"]]], [["User:: Hi, I've heard great things about Verus and I'm curious about launching currencies on the platform. What are the advantages of launching currencies on Verus compared to EVM-like protocols?", "AI Assistant:: Launching currencies on Verus is a great choice. Compared to EVM-like protocols, Verus offers several advantages. Launching currencies on Verus is better, faster, cheaper, and more secure than on EVM-like protocols. Plus, no coding is involved in the process. This makes it more accessible to a wider range of users.", "User:: That sounds really interesting. What types of currencies can be launched with the Verus Protocol?", "AI Assistant:: With the Verus Protocol, you can launch two types of currencies: basket currencies (like liquidity pools) and simple token currencies. Both types can be issued in a decentralized or centralized manner with minting and burning capabilities.", "User:: I've also heard about subIDs on Verus. Can you explain what they are and how they differ from VerusIDs?", "AI Assistant:: SubIDs on Verus are powerful objects that are similar to VerusIDs, but they cannot be used to launch blockchains or currencies. They are created from a launched currency and have similar properties to VerusIDs.", "User:: Another thing I'm curious about is basket currencies on Verus. How do they function, and what's their purpose?", "AI Assistant:: Basket currencies on Verus function like automated market makers (AMMs) and have reserves. They allow users to convert between different currencies or tokens on the Verus network, including bridged currencies. The basket currency supply is dynamic and depends on the amount converted to or from the basket currency.", "User:: I'd like to know more about basket currencies. What is the reserve ratio or weight of a basket currency, and how does it affect the currency's volatility?", "AI Assistant:: The reserve ratio or weight of a basket currency is the percentage of its reserves that back the currency. A lower reserve ratio means the currency is more volatile when users convert into or out of the basket currency. The value of the basket currency is directly linked to its reserves and reserve ratio. This is an important factor to consider when working with basket currencies on Verus."], "AI Assistant", "", "N/A", [["What are the advantages of launching currencies on Verus compared to EVM-like protocols?", "Launching currencies on Verus is better, faster, cheaper, and more secure than on EVM-like protocols. Additionally, no coding is involved in the process.", "# Introduction\nLaunching currencies on Verus, and any other PBaaS-chain (Public Blockchains as a Service), is better, faster, cheaper and more secure than any EVM-like protocol out there. There is no coding involved.There are two types of currencies that can be launched with the Verus Protocol. Basket currencies (e.g. liquidity pools) and simple token currencies. Both can be issued decentralized, or centralized with minting and burning capabilities.When a currency is launched, subIDs can be created from it. SubIDs are powerful objects on Verus (and other PBaaS-blockchains). They are exactly the same as [VerusIDs](/verusid/), yet can not launch blockchains or currencies.## Basket currencies (e.g. liquidity pools)\n![image-basket-currencies](/images/currencies-reserves.png)Basket currencies function like automated market makers (AMMs), they have reserves. A reserve can be any currency or token on the Verus network (also bridged). Have a look at the simplified image. If anyone has currency X or Y, they can convert to the basket currency, or convert from reserve to reserve. If anyone has the basket currency, they can go to currency X or Y. A basket currency can have 1 and up to 10 currencies in its reserves.The basket currency supply is dynamic, depending on how much is converted to the basket currency (supply minted), or back to its reserve(s) (supply burned).A basket currency can be 100% backed by its reserves, 5%, or anything in between. This is called the reserve ratio, or the weight. The lower the reserve ratio, the more volatile the currency is when people are converting into or out of the basket currency. The value of the basket currency is directly linked to what is in the reserves and what the reserve ratio is.", "./raw_text_input_docs/README_currencies.md"], ["What are the two types of currencies that can be launched with the Verus Protocol?", "The two types of currencies that can be launched with the Verus Protocol are basket currencies (e.g. liquidity pools) and simple token currencies. Both types can be issued in a decentralized or centralized manner with minting and burning capabilities.", "# Introduction\nLaunching currencies on Verus, and any other PBaaS-chain (Public Blockchains as a Service), is better, faster, cheaper and more secure than any EVM-like protocol out there. There is no coding involved.There are two types of currencies that can be launched with the Verus Protocol. Basket currencies (e.g. liquidity pools) and simple token currencies. Both can be issued decentralized, or centralized with minting and burning capabilities.When a currency is launched, subIDs can be created from it. SubIDs are powerful objects on Verus (and other PBaaS-blockchains). They are exactly the same as [VerusIDs](/verusid/), yet can not launch blockchains or currencies.## Basket currencies (e.g. liquidity pools)\n![image-basket-currencies](/images/currencies-reserves.png)Basket currencies function like automated market makers (AMMs), they have reserves. A reserve can be any currency or token on the Verus network (also bridged). Have a look at the simplified image. If anyone has currency X or Y, they can convert to the basket currency, or convert from reserve to reserve. If anyone has the basket currency, they can go to currency X or Y. A basket currency can have 1 and up to 10 currencies in its reserves.The basket currency supply is dynamic, depending on how much is converted to the basket currency (supply minted), or back to its reserve(s) (supply burned).A basket currency can be 100% backed by its reserves, 5%, or anything in between. This is called the reserve ratio, or the weight. The lower the reserve ratio, the more volatile the currency is when people are converting into or out of the basket currency. The value of the basket currency is directly linked to what is in the reserves and what the reserve ratio is.", "./raw_text_input_docs/README_currencies.md"], ["What are subIDs on Verus, and how do they differ from VerusIDs?", "SubIDs on Verus are powerful objects that are similar to VerusIDs, but they cannot be used to launch blockchains or currencies. They are created from a launched currency and have similar properties to VerusIDs.", "# Introduction\nLaunching currencies on Verus, and any other PBaaS-chain (Public Blockchains as a Service), is better, faster, cheaper and more secure than any EVM-like protocol out there. There is no coding involved.There are two types of currencies that can be launched with the Verus Protocol. Basket currencies (e.g. liquidity pools) and simple token currencies. Both can be issued decentralized, or centralized with minting and burning capabilities.When a currency is launched, subIDs can be created from it. SubIDs are powerful objects on Verus (and other PBaaS-blockchains). They are exactly the same as [VerusIDs](/verusid/), yet can not launch blockchains or currencies.## Basket currencies (e.g. liquidity pools)\n![image-basket-currencies](/images/currencies-reserves.png)Basket currencies function like automated market makers (AMMs), they have reserves. A reserve can be any currency or token on the Verus network (also bridged). Have a look at the simplified image. If anyone has currency X or Y, they can convert to the basket currency, or convert from reserve to reserve. If anyone has the basket currency, they can go to currency X or Y. A basket currency can have 1 and up to 10 currencies in its reserves.The basket currency supply is dynamic, depending on how much is converted to the basket currency (supply minted), or back to its reserve(s) (supply burned).A basket currency can be 100% backed by its reserves, 5%, or anything in between. This is called the reserve ratio, or the weight. The lower the reserve ratio, the more volatile the currency is when people are converting into or out of the basket currency. The value of the basket currency is directly linked to what is in the reserves and what the reserve ratio is.", "./raw_text_input_docs/README_currencies.md"], ["How do basket currencies on Verus function, and what is their purpose?", "Basket currencies on Verus function like automated market makers (AMMs) and have reserves. They allow users to convert between different currencies or tokens on the Verus network, including bridged currencies. The basket currency supply is dynamic and depends on the amount converted to or from the basket currency.", "# Introduction\nLaunching currencies on Verus, and any other PBaaS-chain (Public Blockchains as a Service), is better, faster, cheaper and more secure than any EVM-like protocol out there. There is no coding involved.There are two types of currencies that can be launched with the Verus Protocol. Basket currencies (e.g. liquidity pools) and simple token currencies. Both can be issued decentralized, or centralized with minting and burning capabilities.When a currency is launched, subIDs can be created from it. SubIDs are powerful objects on Verus (and other PBaaS-blockchains). They are exactly the same as [VerusIDs](/verusid/), yet can not launch blockchains or currencies.## Basket currencies (e.g. liquidity pools)\n![image-basket-currencies](/images/currencies-reserves.png)Basket currencies function like automated market makers (AMMs), they have reserves. A reserve can be any currency or token on the Verus network (also bridged). Have a look at the simplified image. If anyone has currency X or Y, they can convert to the basket currency, or convert from reserve to reserve. If anyone has the basket currency, they can go to currency X or Y. A basket currency can have 1 and up to 10 currencies in its reserves.The basket currency supply is dynamic, depending on how much is converted to the basket currency (supply minted), or back to its reserve(s) (supply burned).A basket currency can be 100% backed by its reserves, 5%, or anything in between. This is called the reserve ratio, or the weight. The lower the reserve ratio, the more volatile the currency is when people are converting into or out of the basket currency. The value of the basket currency is directly linked to what is in the reserves and what the reserve ratio is.", "./raw_text_input_docs/README_currencies.md"], ["What is the reserve ratio or weight of a basket currency, and how does it affect the currency's volatility?", "The reserve ratio or weight of a basket currency is the percentage of its reserves that back the currency. A lower reserve ratio means the currency is more volatile when users convert into or out of the basket currency. The value of the basket currency is directly linked to its reserves and reserve ratio.", "# Introduction\nLaunching currencies on Verus, and any other PBaaS-chain (Public Blockchains as a Service), is better, faster, cheaper and more secure than any EVM-like protocol out there. There is no coding involved.There are two types of currencies that can be launched with the Verus Protocol. Basket currencies (e.g. liquidity pools) and simple token currencies. Both can be issued decentralized, or centralized with minting and burning capabilities.When a currency is launched, subIDs can be created from it. SubIDs are powerful objects on Verus (and other PBaaS-blockchains). They are exactly the same as [VerusIDs](/verusid/), yet can not launch blockchains or currencies.## Basket currencies (e.g. liquidity pools)\n![image-basket-currencies](/images/currencies-reserves.png)Basket currencies function like automated market makers (AMMs), they have reserves. A reserve can be any currency or token on the Verus network (also bridged). Have a look at the simplified image. If anyone has currency X or Y, they can convert to the basket currency, or convert from reserve to reserve. If anyone has the basket currency, they can go to currency X or Y. A basket currency can have 1 and up to 10 currencies in its reserves.The basket currency supply is dynamic, depending on how much is converted to the basket currency (supply minted), or back to its reserve(s) (supply burned).A basket currency can be 100% backed by its reserves, 5%, or anything in between. This is called the reserve ratio, or the weight. The lower the reserve ratio, the more volatile the currency is when people are converting into or out of the basket currency. The value of the basket currency is directly linked to what is in the reserves and what the reserve ratio is.", "./raw_text_input_docs/README_currencies.md"]]], [["User:: I'm interested in using VerusIDs for commerce, but I want to make sure I can do it privately and without needing an escrow. How can I use VerusIDs to engage in private and escrow-free commerce?", "AI Assistant:: VerusIDs can be used to create a private and escrow-free way to engage in commerce. You can create a VerusID with a contract that gives access to a specific asset or service, and then create a transaction to pay for the VerusID. The buyer can execute the transaction, and once it's signed by all parties, the VerusID is transferred to the buyer, giving them access to the asset or service. This can be done without posting the offer on the blockchain until the transaction is agreed upon and signed. Does that make sense? Would you like to know more about how to implement this?", "User:: That sounds interesting. I'd like to know more about the API calls available for creating and managing offers on the Verus Marketplace. Can you tell me about those?", "AI Assistant:: There are five API calls available for creating and managing offers on the Verus Marketplace:\n\n1. `makeoffer`: Define what you offer and for what, including funds, VerusIDs, or other currencies, and what you want in return.\n2. `takeoffer`: Take a specific offer in exchange for its request.\n3. `getoffers`: Specify which VerusID or currency you want to see offers for, and it returns all offers (buy and sell) in all currencies, sorted by highest to lowest price.\n4. `closeoffers`: Close expired or unexpired offers that you opened with `makeoffer`.\n5. `listopenoffers`: List all offers that you have opened with `makeoffer`.\n\nThese API calls allow you to create, manage, and interact with offers on the Verus Marketplace in a flexible and customizable way. Do you have any specific questions about how to use these API calls?", "User:: That's really helpful. I'm also concerned about privacy when using VerusIDs for transactions. How can I ensure privacy when using VerusIDs for transactions?", "AI Assistant:: You can attach a \"z-address\" to a VerusID, which is a private address that cannot be checked on the public blockchain. This allows you to keep your transactions private and secure. By using z-addresses, you can ensure that your transactions are not publicly visible, giving you an additional layer of privacy and security. Does that answer your question about privacy?"], "AI Assistant", "", "N/A", [["How can I use VerusIDs to engage in private and escrow-free commerce?", "VerusIDs can be used to create a private and escrow-free way to engage in commerce. You can create a VerusID with a contract that gives access to a specific asset or service, and then create a transaction to pay for the VerusID. The buyer can execute the transaction, and once it's signed by all parties, the VerusID is transferred to the buyer, giving them access to the asset or service. This can be done without posting the offer on the blockchain until the transaction is agreed upon and signed.", "In addition to advertising worldwide on the blockchain to buy or sell VerusIDs, you can also make an exchange with the Marketplace without ever posting the offer on the blockchain until it is agreed and signed by all parties. Combine that with zero knowledge transactions, and it's a great way to transact worldwide, escrow-free in private.:::tip Use Case Example\nA business sells subscriptions for exclusive content. They make VerusIDs with contracts that give access to the exclusive content. They now create a transaction that would pay for the VerusID. They give the transaction to the buyer who then executes it. The buyer now owns the VerusID that gives access to the exclusive content.\n:::Now imagine how you can do this for a VerusID that can be any kind of asset. A new way for everyone to engage in peer-to-peer, escrow-free commerce has arrived.### RPC APIs\n| API | What it does | \n| :- |:-----|\n| makeoffer | define what you offer and for what. What you offer can be funds, VerusIDs, or when PBaaS goes live even other currencies. What you want in return can also be funds, VerusIDs or currencies. In exchange for what you offer, you also define what VerusID or how much you want for it and in what currency | \n| takeoffer | take a specific offer in exchange for its request | \n| getoffers | specify which VerusID or currency you want to see offers for or on offer, and it returns all offers (buy and sell) in all currencies, sorted by highest to lowest price | \n| closeoffers | close expired or unexpired offers which you opened with makeoffer |\n| listopenoffers | list all offers that you have opened with makeoffer |## Privacy\nA VerusID can contain a pointer to a ``z-address``. These are private addresses that can not be checked on the public blockchain. Attach any z-address to a VerusID.", "./raw_text_input_docs/README_addresses.md"], ["What are the different types of API calls available for creating and managing offers on the Verus Marketplace?", "There are five API calls available for creating and managing offers on the Verus Marketplace:\n\n1. `makeoffer`: Define what you offer and for what, including funds, VerusIDs, or other currencies, and what you want in return.\n2. `takeoffer`: Take a specific offer in exchange for its request.\n3. `getoffers`: Specify which VerusID or currency you want to see offers for, and it returns all offers (buy and sell) in all currencies, sorted by highest to lowest price.\n4. `closeoffers`: Close expired or unexpired offers that you opened with `makeoffer`.\n5. `listopenoffers`: List all offers that you have opened with `makeoffer`.", "In addition to advertising worldwide on the blockchain to buy or sell VerusIDs, you can also make an exchange with the Marketplace without ever posting the offer on the blockchain until it is agreed and signed by all parties. Combine that with zero knowledge transactions, and it's a great way to transact worldwide, escrow-free in private.:::tip Use Case Example\nA business sells subscriptions for exclusive content. They make VerusIDs with contracts that give access to the exclusive content. They now create a transaction that would pay for the VerusID. They give the transaction to the buyer who then executes it. The buyer now owns the VerusID that gives access to the exclusive content.\n:::Now imagine how you can do this for a VerusID that can be any kind of asset. A new way for everyone to engage in peer-to-peer, escrow-free commerce has arrived.### RPC APIs\n| API | What it does | \n| :- |:-----|\n| makeoffer | define what you offer and for what. What you offer can be funds, VerusIDs, or when PBaaS goes live even other currencies. What you want in return can also be funds, VerusIDs or currencies. In exchange for what you offer, you also define what VerusID or how much you want for it and in what currency | \n| takeoffer | take a specific offer in exchange for its request | \n| getoffers | specify which VerusID or currency you want to see offers for or on offer, and it returns all offers (buy and sell) in all currencies, sorted by highest to lowest price | \n| closeoffers | close expired or unexpired offers which you opened with makeoffer |\n| listopenoffers | list all offers that you have opened with makeoffer |## Privacy\nA VerusID can contain a pointer to a ``z-address``. These are private addresses that can not be checked on the public blockchain. Attach any z-address to a VerusID.", "./raw_text_input_docs/README_addresses.md"], ["How can I ensure privacy when using VerusIDs for transactions?", "You can attach a \"z-address\" to a VerusID, which is a private address that cannot be checked on the public blockchain. This allows you to keep your transactions private and secure.", "In addition to advertising worldwide on the blockchain to buy or sell VerusIDs, you can also make an exchange with the Marketplace without ever posting the offer on the blockchain until it is agreed and signed by all parties. Combine that with zero knowledge transactions, and it's a great way to transact worldwide, escrow-free in private.:::tip Use Case Example\nA business sells subscriptions for exclusive content. They make VerusIDs with contracts that give access to the exclusive content. They now create a transaction that would pay for the VerusID. They give the transaction to the buyer who then executes it. The buyer now owns the VerusID that gives access to the exclusive content.\n:::Now imagine how you can do this for a VerusID that can be any kind of asset. A new way for everyone to engage in peer-to-peer, escrow-free commerce has arrived.### RPC APIs\n| API | What it does | \n| :- |:-----|\n| makeoffer | define what you offer and for what. What you offer can be funds, VerusIDs, or when PBaaS goes live even other currencies. What you want in return can also be funds, VerusIDs or currencies. In exchange for what you offer, you also define what VerusID or how much you want for it and in what currency | \n| takeoffer | take a specific offer in exchange for its request | \n| getoffers | specify which VerusID or currency you want to see offers for or on offer, and it returns all offers (buy and sell) in all currencies, sorted by highest to lowest price | \n| closeoffers | close expired or unexpired offers which you opened with makeoffer |\n| listopenoffers | list all offers that you have opened with makeoffer |## Privacy\nA VerusID can contain a pointer to a ``z-address``. These are private addresses that can not be checked on the public blockchain. Attach any z-address to a VerusID.", "./raw_text_input_docs/README_addresses.md"]]], [["User:: I'm trying to define a new currency on Verus, and I'm a bit unclear about some of the parameters. Can you explain the purpose of the preconversion period?", "AI Assistant:: The preconversion period is a time frame during which users can convert their existing Verus currencies into the new currency being defined. During this period, users must convert at least the minimum amount specified in the `minpreconversion` parameter to participate in the currency launch. This allows users to be part of the new currency from the start and helps ensure a successful launch.", "User:: That makes sense. How does the `minpreconversion` parameter work?", "AI Assistant:: The `minpreconversion` parameter specifies the minimum amount of Verus currency that must be converted into the new currency during the preconversion period. If this minimum amount is not met, the currency will not launch, and all preconversions will be refunded. Additionally, there is a 0.025% fee taken when preconverting, which should be considered when setting the minimum amount.", "User:: Got it. What about the `maxpreconversion` parameter? How does that work?", "AI Assistant:: The `maxpreconversion` parameter sets a maximum amount of preconversions that can be made during the preconversion period. Any amount converted above this maximum will be automatically refunded after the currency is launched. This helps prevent excessive conversions and ensures a smooth launch process.", "User:: I see. What's the purpose of the `initialcontributions` parameter?", "AI Assistant:: The `initialcontributions` parameter allows the rootID to contribute some or all of the minimum preconversions directly as part of the currency definition. This can be used to make an initial contribution to either the reserves when it's a basket currency or to the rootID when it's a simple token currency.", "User:: That's helpful. Can you explain the difference between a simple token currency and a basket currency?", "AI Assistant:: A simple token currency has an `options` parameter set to 32, whereas a basket currency has an `options` parameter set to 33. The main difference is that a basket currency has reserves, and the `initialcontributions` parameter is used to contribute to these reserves, whereas a simple token currency does not have reserves, and the `initialcontributions` parameter is used to contribute to the rootID."], "AI Assistant", "", "N/A", [["What is the purpose of the preconversion period when defining a new currency on Verus?", "The preconversion period is a time frame during which users can convert their existing Verus currencies into the new currency being defined. During this period, users must convert at least the minimum amount specified in the `minpreconversion` parameter to participate in the currency launch.", "There is a 0.025% fee taken when preconverting. Take this into consideration when trying to meet the minimum amount of preconversions.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CompanyX\",\n \"options\":32,\n \"currencies\":[\"vrsctest\"],\n \"conversions\":[2],\n \"minpreconversion\":[500]\n}'\n```\n\u261d\ufe0f This simple token currency is called CompanyX. During the preconversion time frame people need to convert at least 500 VRSCTEST to the rootID. In exchange for that they receive 250 CompanyX, or more when more is converted. If this minimum amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back.### **\"maxpreconversion\"**\nUse this parameter to set a maximum amount of preconversions. During the preconversion time frame the amount set can not be exceeded. Everything above this amount will be automatically refunded after the currency is launched.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CoinCommunity\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"maxpreconversion\":[100], \n \"initialsupply\":100\n}'\n```\n\u261d\ufe0f This is a basket currency called CoinCommunity. During the preconversion time frame people can convert VRSCTEST into its reserves for 100 CoinCommunity in return. During the preconversion time frame there can not be more than 100 VRSCTEST converted into its reserves. Whatever is preconverted more will be returned.### **\"initialcontributions\"**\nThe rootID can contribute some or all of the minimum preconversions directly as part of the currency definition. Use this parameter to make an initial contribution to either the reserves when it\u2019s a basket currency (`options:33`), or to the rootID when it\u2019s a simple token currency (`options:32`).", "./raw_text_input_docs/launch-currency.md"], ["How does the `minpreconversion` parameter work when defining a new currency on Verus?", "The `minpreconversion` parameter specifies the minimum amount of Verus currency that must be converted into the new currency during the preconversion period. If this minimum amount is not met, the currency will not launch, and all preconversions will be refunded. Additionally, there is a 0.025% fee taken when preconverting, which should be considered when setting the minimum amount.", "There is a 0.025% fee taken when preconverting. Take this into consideration when trying to meet the minimum amount of preconversions.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CompanyX\",\n \"options\":32,\n \"currencies\":[\"vrsctest\"],\n \"conversions\":[2],\n \"minpreconversion\":[500]\n}'\n```\n\u261d\ufe0f This simple token currency is called CompanyX. During the preconversion time frame people need to convert at least 500 VRSCTEST to the rootID. In exchange for that they receive 250 CompanyX, or more when more is converted. If this minimum amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back.### **\"maxpreconversion\"**\nUse this parameter to set a maximum amount of preconversions. During the preconversion time frame the amount set can not be exceeded. Everything above this amount will be automatically refunded after the currency is launched.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CoinCommunity\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"maxpreconversion\":[100], \n \"initialsupply\":100\n}'\n```\n\u261d\ufe0f This is a basket currency called CoinCommunity. During the preconversion time frame people can convert VRSCTEST into its reserves for 100 CoinCommunity in return. During the preconversion time frame there can not be more than 100 VRSCTEST converted into its reserves. Whatever is preconverted more will be returned.### **\"initialcontributions\"**\nThe rootID can contribute some or all of the minimum preconversions directly as part of the currency definition. Use this parameter to make an initial contribution to either the reserves when it\u2019s a basket currency (`options:33`), or to the rootID when it\u2019s a simple token currency (`options:32`).", "./raw_text_input_docs/launch-currency.md"], ["What is the purpose of the `maxpreconversion` parameter when defining a new currency on Verus?", "The `maxpreconversion` parameter sets a maximum amount of preconversions that can be made during the preconversion period. Any amount converted above this maximum will be automatically refunded after the currency is launched.", "There is a 0.025% fee taken when preconverting. Take this into consideration when trying to meet the minimum amount of preconversions.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CompanyX\",\n \"options\":32,\n \"currencies\":[\"vrsctest\"],\n \"conversions\":[2],\n \"minpreconversion\":[500]\n}'\n```\n\u261d\ufe0f This simple token currency is called CompanyX. During the preconversion time frame people need to convert at least 500 VRSCTEST to the rootID. In exchange for that they receive 250 CompanyX, or more when more is converted. If this minimum amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back.### **\"maxpreconversion\"**\nUse this parameter to set a maximum amount of preconversions. During the preconversion time frame the amount set can not be exceeded. Everything above this amount will be automatically refunded after the currency is launched.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CoinCommunity\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"maxpreconversion\":[100], \n \"initialsupply\":100\n}'\n```\n\u261d\ufe0f This is a basket currency called CoinCommunity. During the preconversion time frame people can convert VRSCTEST into its reserves for 100 CoinCommunity in return. During the preconversion time frame there can not be more than 100 VRSCTEST converted into its reserves. Whatever is preconverted more will be returned.### **\"initialcontributions\"**\nThe rootID can contribute some or all of the minimum preconversions directly as part of the currency definition. Use this parameter to make an initial contribution to either the reserves when it\u2019s a basket currency (`options:33`), or to the rootID when it\u2019s a simple token currency (`options:32`).", "./raw_text_input_docs/launch-currency.md"], ["How does the `initialcontributions` parameter work when defining a new currency on Verus?", "The `initialcontributions` parameter allows the rootID to contribute some or all of the minimum preconversions directly as part of the currency definition. This can be used to make an initial contribution to either the reserves when it's a basket currency or to the rootID when it's a simple token currency.", "There is a 0.025% fee taken when preconverting. Take this into consideration when trying to meet the minimum amount of preconversions.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CompanyX\",\n \"options\":32,\n \"currencies\":[\"vrsctest\"],\n \"conversions\":[2],\n \"minpreconversion\":[500]\n}'\n```\n\u261d\ufe0f This simple token currency is called CompanyX. During the preconversion time frame people need to convert at least 500 VRSCTEST to the rootID. In exchange for that they receive 250 CompanyX, or more when more is converted. If this minimum amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back.### **\"maxpreconversion\"**\nUse this parameter to set a maximum amount of preconversions. During the preconversion time frame the amount set can not be exceeded. Everything above this amount will be automatically refunded after the currency is launched.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CoinCommunity\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"maxpreconversion\":[100], \n \"initialsupply\":100\n}'\n```\n\u261d\ufe0f This is a basket currency called CoinCommunity. During the preconversion time frame people can convert VRSCTEST into its reserves for 100 CoinCommunity in return. During the preconversion time frame there can not be more than 100 VRSCTEST converted into its reserves. Whatever is preconverted more will be returned.### **\"initialcontributions\"**\nThe rootID can contribute some or all of the minimum preconversions directly as part of the currency definition. Use this parameter to make an initial contribution to either the reserves when it\u2019s a basket currency (`options:33`), or to the rootID when it\u2019s a simple token currency (`options:32`).", "./raw_text_input_docs/launch-currency.md"], ["What is the difference between a simple token currency and a basket currency when defining a new currency on Verus?", "A simple token currency has an `options` parameter set to 32, whereas a basket currency has an `options` parameter set to 33. The main difference is that a basket currency has reserves, and the `initialcontributions` parameter is used to contribute to these reserves, whereas a simple token currency does not have reserves, and the `initialcontributions` parameter is used to contribute to the rootID.", "There is a 0.025% fee taken when preconverting. Take this into consideration when trying to meet the minimum amount of preconversions.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CompanyX\",\n \"options\":32,\n \"currencies\":[\"vrsctest\"],\n \"conversions\":[2],\n \"minpreconversion\":[500]\n}'\n```\n\u261d\ufe0f This simple token currency is called CompanyX. During the preconversion time frame people need to convert at least 500 VRSCTEST to the rootID. In exchange for that they receive 250 CompanyX, or more when more is converted. If this minimum amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back.### **\"maxpreconversion\"**\nUse this parameter to set a maximum amount of preconversions. During the preconversion time frame the amount set can not be exceeded. Everything above this amount will be automatically refunded after the currency is launched.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CoinCommunity\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"maxpreconversion\":[100], \n \"initialsupply\":100\n}'\n```\n\u261d\ufe0f This is a basket currency called CoinCommunity. During the preconversion time frame people can convert VRSCTEST into its reserves for 100 CoinCommunity in return. During the preconversion time frame there can not be more than 100 VRSCTEST converted into its reserves. Whatever is preconverted more will be returned.### **\"initialcontributions\"**\nThe rootID can contribute some or all of the minimum preconversions directly as part of the currency definition. Use this parameter to make an initial contribution to either the reserves when it\u2019s a basket currency (`options:33`), or to the rootID when it\u2019s a simple token currency (`options:32`).", "./raw_text_input_docs/launch-currency.md"]]], [["User:: I've been trying to understand the different types of addresses in Verus, but I'm still a bit confused. Can you help me out? What are the two main types of addresses in Verus, and why is it important to understand their differences?", "AI Assistant:: I'd be happy to clarify. In Verus, there are two main types of addresses: public and private. Understanding the distinctions between public and private addresses is crucial for making informed decisions about transaction privacy. Public addresses are visible on the blockchain, while private addresses are confidential. This difference has significant implications for how you choose to manage your digital assets.", "User:: That makes sense. Can you tell me more about public addresses in Verus? What types of public addresses exist?", "AI Assistant:: Public addresses in Verus are addresses that can be used to send and receive funds, and their transactions are visible on blockchain explorers. There are three types of public addresses: R-addresses, VerusIDs, and i-addresses. R-addresses are derived from a private key, VerusIDs are public friendly-name cryptocurrency addresses controlled by a primary address (which is a R-address), and i-addresses are derived from a VerusID. Do you have any questions about these types of addresses?", "User:: No, that helps clarify things. What about private addresses? What's a z-address in Verus, and how does it differ from public addresses?", "AI Assistant:: A z-address is a private cryptocurrency address derived from a private key. Only the person with the private key can spend and see its balance, or provide visibility into the balance through a \"viewing key\". Unlike public addresses, balances and transactions associated with private z-addresses are confidential and do not appear on the blockchain or any explorer. This provides an additional layer of privacy for users who want to keep their transactions and balances private.", "User:: That makes sense. Can a VerusID be used to send coins to a private address, and if so, how?", "AI Assistant:: Yes, a VerusID can contain a pointer to a z-address. You can send coins to \"VerusID@:private\" to send coins to a private z-address associated with that VerusID. This allows you to send coins to a private address using a public-friendly name, while still maintaining the privacy benefits of a z-address."], "AI Assistant", "", "N/A", [["What are the two main types of addresses in Verus, and why is it important to understand their differences?", "In Verus, there are two main types of addresses: public and private. Understanding the distinctions between public and private addresses is crucial for making informed decisions about transaction privacy.", "# Introduction\nIn Verus, there are two kinds of addresses: **public** and **private**. This doc guides you through understanding these address types and how they're involved in transactions.Understanding the distinctions between public and private addresses in the Verus ecosystem is crucial for making informed decisions about transaction privacy.## Public addresses\nYou can use the following public address types to send and receive funds.| Address type | Details | \n| :-----| :------ | \n| **R-address** | A R-address is a public cryptocurrency address derived from a private key. The private key is essential for accessing and controlling the R-address.| \n| [**VerusID@**](/verusid/) | A VerusID is a public friendly-name cryptocurrency address. It is controlled by a primary address, which is a R-address.| \n| **i-address** | An i-address is a public cryptocurrency address derived from a VerusID.|Public addresses and their transactions are visible on blockchain explorers because they're recorded on the public ledger, unlike private z-addresses.## Private addresses\nYou can use the following private address type for confidential exchange of funds and data.| Address type | Details | \n| :-----| :------ | \n| **z-address** | A z-address is a private cryptocurrency address derived from a private key. The private key is essential for accessing and controlling the z-address. Only the person who has the private key can spend and see its balance. Or provide visibility in the balance through a ``viewing key``. |Balances and transactions associated with private addresses are confidential. They do not appear on the blockchain or any explorer.\u2139\ufe0f A VerusID can contain a pointer to a z-address. You can then send coins to ``VerusID@:private``.", "./raw_text_input_docs/README.md"], ["What are public addresses in Verus, and what types of public addresses exist?", "Public addresses in Verus are addresses that can be used to send and receive funds, and their transactions are visible on blockchain explorers. There are three types of public addresses: R-addresses, VerusIDs, and i-addresses. R-addresses are derived from a private key, VerusIDs are public friendly-name cryptocurrency addresses controlled by a primary address (which is a R-address), and i-addresses are derived from a VerusID.", "# Introduction\nIn Verus, there are two kinds of addresses: **public** and **private**. This doc guides you through understanding these address types and how they're involved in transactions.Understanding the distinctions between public and private addresses in the Verus ecosystem is crucial for making informed decisions about transaction privacy.## Public addresses\nYou can use the following public address types to send and receive funds.| Address type | Details | \n| :-----| :------ | \n| **R-address** | A R-address is a public cryptocurrency address derived from a private key. The private key is essential for accessing and controlling the R-address.| \n| [**VerusID@**](/verusid/) | A VerusID is a public friendly-name cryptocurrency address. It is controlled by a primary address, which is a R-address.| \n| **i-address** | An i-address is a public cryptocurrency address derived from a VerusID.|Public addresses and their transactions are visible on blockchain explorers because they're recorded on the public ledger, unlike private z-addresses.## Private addresses\nYou can use the following private address type for confidential exchange of funds and data.| Address type | Details | \n| :-----| :------ | \n| **z-address** | A z-address is a private cryptocurrency address derived from a private key. The private key is essential for accessing and controlling the z-address. Only the person who has the private key can spend and see its balance. Or provide visibility in the balance through a ``viewing key``. |Balances and transactions associated with private addresses are confidential. They do not appear on the blockchain or any explorer.\u2139\ufe0f A VerusID can contain a pointer to a z-address. You can then send coins to ``VerusID@:private``.", "./raw_text_input_docs/README.md"], ["What is a z-address in Verus, and how does it differ from public addresses?", "A z-address is a private cryptocurrency address derived from a private key. Only the person with the private key can spend and see its balance, or provide visibility into the balance through a \"viewing key\". Unlike public addresses, balances and transactions associated with private z-addresses are confidential and do not appear on the blockchain or any explorer.", "# Introduction\nIn Verus, there are two kinds of addresses: **public** and **private**. This doc guides you through understanding these address types and how they're involved in transactions.Understanding the distinctions between public and private addresses in the Verus ecosystem is crucial for making informed decisions about transaction privacy.## Public addresses\nYou can use the following public address types to send and receive funds.| Address type | Details | \n| :-----| :------ | \n| **R-address** | A R-address is a public cryptocurrency address derived from a private key. The private key is essential for accessing and controlling the R-address.| \n| [**VerusID@**](/verusid/) | A VerusID is a public friendly-name cryptocurrency address. It is controlled by a primary address, which is a R-address.| \n| **i-address** | An i-address is a public cryptocurrency address derived from a VerusID.|Public addresses and their transactions are visible on blockchain explorers because they're recorded on the public ledger, unlike private z-addresses.## Private addresses\nYou can use the following private address type for confidential exchange of funds and data.| Address type | Details | \n| :-----| :------ | \n| **z-address** | A z-address is a private cryptocurrency address derived from a private key. The private key is essential for accessing and controlling the z-address. Only the person who has the private key can spend and see its balance. Or provide visibility in the balance through a ``viewing key``. |Balances and transactions associated with private addresses are confidential. They do not appear on the blockchain or any explorer.\u2139\ufe0f A VerusID can contain a pointer to a z-address. You can then send coins to ``VerusID@:private``.", "./raw_text_input_docs/README.md"], ["Can a VerusID be used to send coins to a private address, and if so, how?", "Yes, a VerusID can contain a pointer to a z-address. You can send coins to \"VerusID@:private\" to send coins to a private z-address associated with that VerusID.", "# Introduction\nIn Verus, there are two kinds of addresses: **public** and **private**. This doc guides you through understanding these address types and how they're involved in transactions.Understanding the distinctions between public and private addresses in the Verus ecosystem is crucial for making informed decisions about transaction privacy.## Public addresses\nYou can use the following public address types to send and receive funds.| Address type | Details | \n| :-----| :------ | \n| **R-address** | A R-address is a public cryptocurrency address derived from a private key. The private key is essential for accessing and controlling the R-address.| \n| [**VerusID@**](/verusid/) | A VerusID is a public friendly-name cryptocurrency address. It is controlled by a primary address, which is a R-address.| \n| **i-address** | An i-address is a public cryptocurrency address derived from a VerusID.|Public addresses and their transactions are visible on blockchain explorers because they're recorded on the public ledger, unlike private z-addresses.## Private addresses\nYou can use the following private address type for confidential exchange of funds and data.| Address type | Details | \n| :-----| :------ | \n| **z-address** | A z-address is a private cryptocurrency address derived from a private key. The private key is essential for accessing and controlling the z-address. Only the person who has the private key can spend and see its balance. Or provide visibility in the balance through a ``viewing key``. |Balances and transactions associated with private addresses are confidential. They do not appear on the blockchain or any explorer.\u2139\ufe0f A VerusID can contain a pointer to a z-address. You can then send coins to ``VerusID@:private``.", "./raw_text_input_docs/README.md"]]], [["User:: I've been reading about the VDXF type system, and I'm trying to understand its goals and purpose. Can you help me out? What is the main goal of the VDXF type system?", "AI Assistant:: The main goal of the VDXF type system is to provide a model for recognizing an unlimited number of user-defined data types, using a standard human-readable format for definition and encoding of the type specifier, which is then hashed to produce collision-free, 20-byte keys. It's a powerful system that allows for a lot of flexibility and customization.", "User:: That's really interesting. What is the purpose of VDXF's type specification, then?", "AI Assistant:: The purpose of VDXF's type specification is to enable applications to locate, recognize types of, parse, and decode any form of application or system-specific data. It's a way to standardize and organize data types, making it easier for different systems and applications to communicate and work together.", "User:: Are there any restrictions on defining new fundamental data types in VDXF?", "AI Assistant:: While it is recommended that new fundamental data types not be defined unless necessary, there is no enforcement of this recommendation at the consensus protocol layer, leaving it as an open-ended option for those needing new data type definitions for efficient application development. So, while it's not encouraged to create new data types willy-nilly, there's no technical restriction on doing so.", "User:: I've also been reading about namespaces for type definitions in VDXF. How do those relate to VerusID?", "AI Assistant:: Namespaces for type definitions in VDXF are equivalent to VerusIDs, which are a protocol first implemented on the Verus Blockchain. This means that a unique namespace can be based on a VerusID, registered on the Verus blockchain network, making it a recognized namespace.", "User:: That's cool. Can namespaces for type definitions in VDXF be based on IDs registered on other blockchains?", "AI Assistant:: Yes, namespaces for type definitions in VDXF can be based on IDs registered on any blockchain or uniquely named system that becomes recognized via a consensus-based bridge on the Verus network. So, while VerusID is the original and native implementation, VDXF is designed to be more widely compatible and adaptable."], "AI Assistant", "", "N/A", [["What is the main goal of the VDXF type system?", "The main goal of the VDXF type system is to provide a model for recognizing an unlimited number of user-defined data types, using a standard human-readable format for definition and encoding of the type specifier, which is then hashed to produce collision-free, 20-byte keys.", "## Definition of VDXF typesVDXF is not a strongly opinionated or highly specified type description specification, and, instead, focuses on a model for recognizing an unlimited number of user defined data types, using a standard human readable format for definition and encoding of the type specifier, which is hashed, using the VDXF specification and standard methodology, to produce collision-free, 20 byte keys, which can be associated with retrieveable content hashes and location qualifiers that enable applications to locate, recognize types of, parse, and decode any form of application or system specific data. VDXF specifies some basic type formats, as necessary to enable initial applications, but leaves further specifications of applicaiton specific data formats, of which there may be an unlimited number, as an open-ended option for those needing new data type definitions for efficient application development. It is recommended that new fundamental data types not be defined unless necessary, but adherence to such recommendation is not enforced at the consensus protocol layer.## Namespace for Type Definitions - VerusIDNamespaces for type definitions are equivalent to VerusIDs, a protocol first implemented on the Verus Blockchain, and also one that can support IDs registered on any blockchain or uniquely named system that becomes recognized via a consensus-based bridge on the Verus network. Currently, to be recognized as a unique namespace, the easiest way is to base it on a VerusID, registered on the Verus blockchain network.", "./raw_text_input_docs/README_vdxf.md"], ["What is the purpose of VDXF's type specification?", "The purpose of VDXF's type specification is to enable applications to locate, recognize types of, parse, and decode any form of application or system-specific data.", "## Definition of VDXF typesVDXF is not a strongly opinionated or highly specified type description specification, and, instead, focuses on a model for recognizing an unlimited number of user defined data types, using a standard human readable format for definition and encoding of the type specifier, which is hashed, using the VDXF specification and standard methodology, to produce collision-free, 20 byte keys, which can be associated with retrieveable content hashes and location qualifiers that enable applications to locate, recognize types of, parse, and decode any form of application or system specific data. VDXF specifies some basic type formats, as necessary to enable initial applications, but leaves further specifications of applicaiton specific data formats, of which there may be an unlimited number, as an open-ended option for those needing new data type definitions for efficient application development. It is recommended that new fundamental data types not be defined unless necessary, but adherence to such recommendation is not enforced at the consensus protocol layer.## Namespace for Type Definitions - VerusIDNamespaces for type definitions are equivalent to VerusIDs, a protocol first implemented on the Verus Blockchain, and also one that can support IDs registered on any blockchain or uniquely named system that becomes recognized via a consensus-based bridge on the Verus network. Currently, to be recognized as a unique namespace, the easiest way is to base it on a VerusID, registered on the Verus blockchain network.", "./raw_text_input_docs/README_vdxf.md"], ["Are there any restrictions on defining new fundamental data types in VDXF?", "While it is recommended that new fundamental data types not be defined unless necessary, there is no enforcement of this recommendation at the consensus protocol layer, leaving it as an open-ended option for those needing new data type definitions for efficient application development.", "## Definition of VDXF typesVDXF is not a strongly opinionated or highly specified type description specification, and, instead, focuses on a model for recognizing an unlimited number of user defined data types, using a standard human readable format for definition and encoding of the type specifier, which is hashed, using the VDXF specification and standard methodology, to produce collision-free, 20 byte keys, which can be associated with retrieveable content hashes and location qualifiers that enable applications to locate, recognize types of, parse, and decode any form of application or system specific data. VDXF specifies some basic type formats, as necessary to enable initial applications, but leaves further specifications of applicaiton specific data formats, of which there may be an unlimited number, as an open-ended option for those needing new data type definitions for efficient application development. It is recommended that new fundamental data types not be defined unless necessary, but adherence to such recommendation is not enforced at the consensus protocol layer.## Namespace for Type Definitions - VerusIDNamespaces for type definitions are equivalent to VerusIDs, a protocol first implemented on the Verus Blockchain, and also one that can support IDs registered on any blockchain or uniquely named system that becomes recognized via a consensus-based bridge on the Verus network. Currently, to be recognized as a unique namespace, the easiest way is to base it on a VerusID, registered on the Verus blockchain network.", "./raw_text_input_docs/README_vdxf.md"], ["What is the relationship between VerusID and namespaces for type definitions in VDXF?", "Namespaces for type definitions in VDXF are equivalent to VerusIDs, which are a protocol first implemented on the Verus Blockchain. This means that a unique namespace can be based on a VerusID, registered on the Verus blockchain network, making it a recognized namespace.", "## Definition of VDXF typesVDXF is not a strongly opinionated or highly specified type description specification, and, instead, focuses on a model for recognizing an unlimited number of user defined data types, using a standard human readable format for definition and encoding of the type specifier, which is hashed, using the VDXF specification and standard methodology, to produce collision-free, 20 byte keys, which can be associated with retrieveable content hashes and location qualifiers that enable applications to locate, recognize types of, parse, and decode any form of application or system specific data. VDXF specifies some basic type formats, as necessary to enable initial applications, but leaves further specifications of applicaiton specific data formats, of which there may be an unlimited number, as an open-ended option for those needing new data type definitions for efficient application development. It is recommended that new fundamental data types not be defined unless necessary, but adherence to such recommendation is not enforced at the consensus protocol layer.## Namespace for Type Definitions - VerusIDNamespaces for type definitions are equivalent to VerusIDs, a protocol first implemented on the Verus Blockchain, and also one that can support IDs registered on any blockchain or uniquely named system that becomes recognized via a consensus-based bridge on the Verus network. Currently, to be recognized as a unique namespace, the easiest way is to base it on a VerusID, registered on the Verus blockchain network.", "./raw_text_input_docs/README_vdxf.md"], ["Can namespaces for type definitions in VDXF be based on IDs registered on other blockchains?", "Yes, namespaces for type definitions in VDXF can be based on IDs registered on any blockchain or uniquely named system that becomes recognized via a consensus-based bridge on the Verus network.", "## Definition of VDXF typesVDXF is not a strongly opinionated or highly specified type description specification, and, instead, focuses on a model for recognizing an unlimited number of user defined data types, using a standard human readable format for definition and encoding of the type specifier, which is hashed, using the VDXF specification and standard methodology, to produce collision-free, 20 byte keys, which can be associated with retrieveable content hashes and location qualifiers that enable applications to locate, recognize types of, parse, and decode any form of application or system specific data. VDXF specifies some basic type formats, as necessary to enable initial applications, but leaves further specifications of applicaiton specific data formats, of which there may be an unlimited number, as an open-ended option for those needing new data type definitions for efficient application development. It is recommended that new fundamental data types not be defined unless necessary, but adherence to such recommendation is not enforced at the consensus protocol layer.## Namespace for Type Definitions - VerusIDNamespaces for type definitions are equivalent to VerusIDs, a protocol first implemented on the Verus Blockchain, and also one that can support IDs registered on any blockchain or uniquely named system that becomes recognized via a consensus-based bridge on the Verus network. Currently, to be recognized as a unique namespace, the easiest way is to base it on a VerusID, registered on the Verus blockchain network.", "./raw_text_input_docs/README_vdxf.md"]]], [["User:: Hey, I'm interested in bridging from Ethereum to Verus using Verus Mobile. Can you walk me through the process?", "AI Assistant:: To bridge from Ethereum to Verus using Verus Mobile, I recommend following the instructions outlined in the article \"How to participate in the Verus Ethereum Bridge Launch\" on Medium. Specifically, please follow the steps outlined in the article, excluding the part on preconverting. This should guide you through the process smoothly. Do you have any questions about the instructions or the bridging process in general?"], "AI Assistant", "", "N/A", [["How can I bridge from Ethereum to Verus using Verus Mobile?", "To bridge from Ethereum to Verus using Verus Mobile, please refer to the instructions provided in the article \"How to participate in the Verus Ethereum Bridge Launch\" on Medium. Specifically, follow the steps outlined in the article, excluding the part on preconverting.", "# How to bridge from Ethereum to Verus\n\n## Verus Mobile\nPlease read the first parts of [this article](https://medium.com/veruscoin/how-to-participate-in-the-verus-ethereum-bridge-launch-73aeeae1c76a). You can skip the part on preconverting.\n\n## MetaMask\nPlease read the first parts of [this article](https://medium.com/veruscoin/how-to-participate-in-the-verus-ethereum-bridge-launch-73aeeae1c76a). You can skip the part on preconverting.", "./raw_text_input_docs/ethereum-to-verus.md"]]], [["User:: Hey, I'm interested in mining Verus, but I'm not sure what my options are. What are the differences between solo mining and pool mining in Verus?", "AI Assistant:: The main differences between solo mining and pool mining in Verus are:\n\n* In solo mining, you mine through Verus Desktop and receive full block rewards, but it may take a while to win a block depending on your hashrate. No additional software is needed to get started.\n* In pool mining, you participate in a pool to receive regular rewards. You'll need to set up a few things before you can start.\n\nWould you like to know more about the advantages and disadvantages of each option?", "User:: Yes, that would be helpful. What are the advantages and disadvantages of solo mining versus pool mining in Verus?", "AI Assistant:: Here's a breakdown of the advantages and disadvantages of each:\n\n* Solo Mining:\n+ Advantage: Receive full block rewards\n+ Disadvantage: May take a while to win a block, no regular rewards\n* Pool Mining:\n+ Advantage: Receive regular rewards\n+ Disadvantage: Need to set up additional software, don't receive full block rewards\n\nNow that you know the pros and cons, you might be wondering what devices are suitable for mining Verus...", "User:: Actually, yes! What devices are suitable for mining Verus, and what are their profitability indications?", "AI Assistant:: Here's a list of suitable devices for mining Verus, along with their profitability indications:\n\n* CPU (processor): high profitability indication\n* GPU (graphics card): medium profitability indication\n* Mobile Phone: high profitability indication\n* ARM (not RP4): high profitability indication\n* FPGA: not possible\n* ASIC: not possible\n\nIf you're still unsure, you might want to check out some hashrate comparisons for different devices to help you decide which one to use...", "User:: That's a great idea! Where can I find hashrate comparisons for different devices to help me decide which one to use for mining Verus?", "AI Assistant:: You can find hashrate comparisons for different devices on the Community Reported Hashrates spreadsheet. It's a great resource to get an idea of which device is best for you.\n\nFinally, if you decide to use a CPU for mining, you'll need some mining software. Do you know which one to use?", "User:: No, I don't. What mining software can I use to mine Verus with a CPU (processor)?", "AI Assistant:: One mining software you can use to mine Verus with a CPU (processor) is CCminer. It's a popular choice among miners and is easy to set up."], "AI Assistant", "", "N/A", [["What are the differences between solo mining and pool mining in Verus?", "The main differences between solo mining and pool mining in Verus are:\n\n* In solo mining, you mine through Verus Desktop and receive full block rewards, but it may take a while to win a block depending on your hashrate. No additional software is needed to get started.\n* In pool mining, you participate in a pool to receive regular rewards. You'll need to set up a few things before you can start.", "---\nsidebarDepth: 2\n---# Mining## Solo vs Pool Mining### Solo MiningMine solo through Verus Desktop to receive full block rewards. Depending on hashrate it may take a while before winning a block. No additional software is needed to get started.### Pool MiningParticipate in pool mining to receive regular rewards. You will need to set up a few things before you can start.---Quick Comparison\n| | Solo mining | Pool mining |\n| -----------------------: | :--: | :----------: |\n| **Full Node** | yes | no |\n| **Regular Rewards** | no | yes |\n| **Setup Difficulty** | easy | intermediate |## Suitable DevicesMine Verus with various devices. Profitability **indication** means the electricity usage vs hashrate.| Device       |     Profitability Indication      |\n| :------------------ | :-----------------------------------------: |\n| CPU (processor)   |  <span style=\"color:green\">high</span>  |\n| GPU (graphics card) | <span style=\"color:orange\">medium</span>  |\n| Mobile Phone    |  <span style=\"color:green\">high</span>  |\n| ARM (not RP4)    |  <span style=\"color:green\">high</span>  |\n| FPGA        | <span style=\"color:red\">not possible</span> |\n| ASIC        | <span style=\"color:red\">not possible</span> |::: tip Hashrate Comparison\nCompare hashrates from different devices. See [Community Reported Hashrates](https://docs.google.com/spreadsheets/d/1RrSYJDV0Mjj3X-myMC3aQDGkcipivxHsD7ZxJ3r5f_A/edit#gid=10943314)\n:::## Mining Software\n::: warning Need help with mining? \u26cf\ufe0f\n[Go to the Verus Discord #mining channel. The community is happy to assist!](https://www.verus.io/discord). \n:::\n### \ud83d\udda5\ufe0f CPUSoftware to mine with a CPU (processor).#### CCminer", "./raw_text_input_docs/start-mining.md"], ["What are the advantages and disadvantages of solo mining versus pool mining in Verus?", "The advantages and disadvantages of solo mining versus pool mining in Verus are:\n\n* Solo Mining:\n\t+ Advantage: Receive full block rewards\n\t+ Disadvantage: May take a while to win a block, no regular rewards\n* Pool Mining:\n\t+ Advantage: Receive regular rewards\n\t+ Disadvantage: Need to set up additional software, don't receive full block rewards", "---\nsidebarDepth: 2\n---# Mining## Solo vs Pool Mining### Solo MiningMine solo through Verus Desktop to receive full block rewards. Depending on hashrate it may take a while before winning a block. No additional software is needed to get started.### Pool MiningParticipate in pool mining to receive regular rewards. You will need to set up a few things before you can start.---Quick Comparison\n| | Solo mining | Pool mining |\n| -----------------------: | :--: | :----------: |\n| **Full Node** | yes | no |\n| **Regular Rewards** | no | yes |\n| **Setup Difficulty** | easy | intermediate |## Suitable DevicesMine Verus with various devices. Profitability **indication** means the electricity usage vs hashrate.| Device       |     Profitability Indication      |\n| :------------------ | :-----------------------------------------: |\n| CPU (processor)   |  <span style=\"color:green\">high</span>  |\n| GPU (graphics card) | <span style=\"color:orange\">medium</span>  |\n| Mobile Phone    |  <span style=\"color:green\">high</span>  |\n| ARM (not RP4)    |  <span style=\"color:green\">high</span>  |\n| FPGA        | <span style=\"color:red\">not possible</span> |\n| ASIC        | <span style=\"color:red\">not possible</span> |::: tip Hashrate Comparison\nCompare hashrates from different devices. See [Community Reported Hashrates](https://docs.google.com/spreadsheets/d/1RrSYJDV0Mjj3X-myMC3aQDGkcipivxHsD7ZxJ3r5f_A/edit#gid=10943314)\n:::## Mining Software\n::: warning Need help with mining? \u26cf\ufe0f\n[Go to the Verus Discord #mining channel. The community is happy to assist!](https://www.verus.io/discord). \n:::\n### \ud83d\udda5\ufe0f CPUSoftware to mine with a CPU (processor).#### CCminer", "./raw_text_input_docs/start-mining.md"], ["What devices are suitable for mining Verus, and what are their profitability indications?", "The suitable devices for mining Verus are:\n\n* CPU (processor): high profitability indication\n* GPU (graphics card): medium profitability indication\n* Mobile Phone: high profitability indication\n* ARM (not RP4): high profitability indication\n* FPGA: not possible\n* ASIC: not possible", "---\nsidebarDepth: 2\n---# Mining## Solo vs Pool Mining### Solo MiningMine solo through Verus Desktop to receive full block rewards. Depending on hashrate it may take a while before winning a block. No additional software is needed to get started.### Pool MiningParticipate in pool mining to receive regular rewards. You will need to set up a few things before you can start.---Quick Comparison\n| | Solo mining | Pool mining |\n| -----------------------: | :--: | :----------: |\n| **Full Node** | yes | no |\n| **Regular Rewards** | no | yes |\n| **Setup Difficulty** | easy | intermediate |## Suitable DevicesMine Verus with various devices. Profitability **indication** means the electricity usage vs hashrate.| Device       |     Profitability Indication      |\n| :------------------ | :-----------------------------------------: |\n| CPU (processor)   |  <span style=\"color:green\">high</span>  |\n| GPU (graphics card) | <span style=\"color:orange\">medium</span>  |\n| Mobile Phone    |  <span style=\"color:green\">high</span>  |\n| ARM (not RP4)    |  <span style=\"color:green\">high</span>  |\n| FPGA        | <span style=\"color:red\">not possible</span> |\n| ASIC        | <span style=\"color:red\">not possible</span> |::: tip Hashrate Comparison\nCompare hashrates from different devices. See [Community Reported Hashrates](https://docs.google.com/spreadsheets/d/1RrSYJDV0Mjj3X-myMC3aQDGkcipivxHsD7ZxJ3r5f_A/edit#gid=10943314)\n:::## Mining Software\n::: warning Need help with mining? \u26cf\ufe0f\n[Go to the Verus Discord #mining channel. The community is happy to assist!](https://www.verus.io/discord). \n:::\n### \ud83d\udda5\ufe0f CPUSoftware to mine with a CPU (processor).#### CCminer", "./raw_text_input_docs/start-mining.md"], ["Where can I find hashrate comparisons for different devices to help me decide which one to use for mining Verus?", "You can find hashrate comparisons for different devices on the Community Reported Hashrates spreadsheet.", "---\nsidebarDepth: 2\n---# Mining## Solo vs Pool Mining### Solo MiningMine solo through Verus Desktop to receive full block rewards. Depending on hashrate it may take a while before winning a block. No additional software is needed to get started.### Pool MiningParticipate in pool mining to receive regular rewards. You will need to set up a few things before you can start.---Quick Comparison\n| | Solo mining | Pool mining |\n| -----------------------: | :--: | :----------: |\n| **Full Node** | yes | no |\n| **Regular Rewards** | no | yes |\n| **Setup Difficulty** | easy | intermediate |## Suitable DevicesMine Verus with various devices. Profitability **indication** means the electricity usage vs hashrate.| Device       |     Profitability Indication      |\n| :------------------ | :-----------------------------------------: |\n| CPU (processor)   |  <span style=\"color:green\">high</span>  |\n| GPU (graphics card) | <span style=\"color:orange\">medium</span>  |\n| Mobile Phone    |  <span style=\"color:green\">high</span>  |\n| ARM (not RP4)    |  <span style=\"color:green\">high</span>  |\n| FPGA        | <span style=\"color:red\">not possible</span> |\n| ASIC        | <span style=\"color:red\">not possible</span> |::: tip Hashrate Comparison\nCompare hashrates from different devices. See [Community Reported Hashrates](https://docs.google.com/spreadsheets/d/1RrSYJDV0Mjj3X-myMC3aQDGkcipivxHsD7ZxJ3r5f_A/edit#gid=10943314)\n:::## Mining Software\n::: warning Need help with mining? \u26cf\ufe0f\n[Go to the Verus Discord #mining channel. The community is happy to assist!](https://www.verus.io/discord). \n:::\n### \ud83d\udda5\ufe0f CPUSoftware to mine with a CPU (processor).#### CCminer", "./raw_text_input_docs/start-mining.md"], ["What mining software can I use to mine Verus with a CPU (processor)?", "One mining software you can use to mine Verus with a CPU (processor) is CCminer.", "---\nsidebarDepth: 2\n---# Mining## Solo vs Pool Mining### Solo MiningMine solo through Verus Desktop to receive full block rewards. Depending on hashrate it may take a while before winning a block. No additional software is needed to get started.### Pool MiningParticipate in pool mining to receive regular rewards. You will need to set up a few things before you can start.---Quick Comparison\n| | Solo mining | Pool mining |\n| -----------------------: | :--: | :----------: |\n| **Full Node** | yes | no |\n| **Regular Rewards** | no | yes |\n| **Setup Difficulty** | easy | intermediate |## Suitable DevicesMine Verus with various devices. Profitability **indication** means the electricity usage vs hashrate.| Device       |     Profitability Indication      |\n| :------------------ | :-----------------------------------------: |\n| CPU (processor)   |  <span style=\"color:green\">high</span>  |\n| GPU (graphics card) | <span style=\"color:orange\">medium</span>  |\n| Mobile Phone    |  <span style=\"color:green\">high</span>  |\n| ARM (not RP4)    |  <span style=\"color:green\">high</span>  |\n| FPGA        | <span style=\"color:red\">not possible</span> |\n| ASIC        | <span style=\"color:red\">not possible</span> |::: tip Hashrate Comparison\nCompare hashrates from different devices. See [Community Reported Hashrates](https://docs.google.com/spreadsheets/d/1RrSYJDV0Mjj3X-myMC3aQDGkcipivxHsD7ZxJ3r5f_A/edit#gid=10943314)\n:::## Mining Software\n::: warning Need help with mining? \u26cf\ufe0f\n[Go to the Verus Discord #mining channel. The community is happy to assist!](https://www.verus.io/discord). \n:::\n### \ud83d\udda5\ufe0f CPUSoftware to mine with a CPU (processor).#### CCminer", "./raw_text_input_docs/start-mining.md"]]], [["User:: I've been looking into the Verus-Ethereum Bridge, and I was wondering, what types of conversions are supported by it?", "AI Assistant:: The Verus-Ethereum Bridge supports conversions between VRSC, ETH (vETH), DAI (DAI.vETH), and MKR (MKR.vETH) in any direction (on/to Verus and Ethereum), as well as conversions to and from the Bridge.vETH currency. Do you have any other questions about the bridge or its functionality?", "User:: That's helpful to know. Let's say I want to launch a new currency on Verus that is equivalent to an ERC-20 token. How can I do that?", "AI Assistant:: You can launch a new currency on Verus that is 1:1 mapped to any ERC-20 token by following the process outlined in the Verus documentation. This allows you to create a new currency on Verus that is pegged to the value of an existing ERC-20 token. Would you like me to point you to the relevant documentation or provide more information on the process?", "User:: Okay, got it. And what if I want to export a currency from Verus to Ethereum? Is that possible, and if so, how?", "AI Assistant:: Yes, you can export a launched currency (simple tokens, basket currencies) from Verus to Ethereum as an ERC-20 token. This process is explained in the Verus documentation. I can provide more information on the steps involved if you'd like.", "User:: I've seen mention of the Bridge.vETH currency. What's the purpose of that?", "AI Assistant:: The Bridge.vETH currency is a 100% backed currency with reserves in VRSC, ETH, DAI, and MKR. Its purpose is to simplify the bridging of assets between Verus and Ethereum by seamlessly converting fees. It's an important component of the Verus-Ethereum Bridge, making it easier to move assets between the two platforms.", "User:: Lastly, what makes the Verus-Ethereum Bridge secure?", "AI Assistant:: The Verus-Ethereum Bridge is secure because assets are never in anyone's custody. Instead, the bridge relies on the cooperation between block producers (worldwide miners and stakers), community notary witnesses, the Bridgekeeper software, and the Ethereum smart contract to verify and prove assets at each step of cross-chain transactions. This decentralized approach, combined with consensus rules and safeguards, prevents hacks and ensures the security of the bridge."], "AI Assistant", "", "N/A", [["What types of conversions are supported by the Verus-Ethereum Bridge?", "The Verus-Ethereum Bridge supports conversions between VRSC, ETH (vETH), DAI (DAI.vETH), and MKR (MKR.vETH) in any direction (on/to Verus and Ethereum), as well as conversions to and from the Bridge.vETH currency.", "| What       |     Details      |\n| :------------------ | :----------------------------------------- |\n| **Conversions**| Convert VRSC, ETH (vETH), DAI (DAI.vETH) & MKR (MKR.vETH) with each other into any direction (on/to Verus & Ethereum), or to and from the Bridge.vETH currency.|\n| **Launch mapped currencies**| Launch currencies on Verus that are 1:1 mapped to any ERC-20. [Learn how](/currencies/mapping-1:1-eth.html)|\n| **Export currencies as ERC-20**| Export any launched currency (simple tokens, basket currencies) on Verus as an ERC-20. [Learn how](/currencies/export-to-eth.html)|\n| **Cross-chain sends**| Send any tokens, basket currencies (e.g. liquidity pools), mapped currencies etc. that are exported to Ethereum across the bridge.|\n| **Export tokenized ID control**| Export a tokenized VerusID to Ethereum as ERC-721.|\n| **Map VerusID to Ethereum NFT**| Launch a tokenized ID with a mapping of an Ethereum ERC-721 or ERC-1155.|Then there is the bridge currency Bridge.vETH, a 100% backed currency with 4 currencies in its reserves (VRSC, ETH, DAI, MKR). The Bridge.vETH currency function is to make the bridging of assets simple. From wherever you send it converts the fees that you need seamlessly. [More on Bridge.vETH below.](/eth-bridge/#bridge-veth-currency)## What makes the Verus-Ethereum Bridge secure\nThe Verus-Ethereum Bridge is different because the assets are never in anyone\u2019s custody. This is done through the seamless cooperation between the block producers (worldwide miners and stakers), community notary witnesses, [the Bridgekeeper software](https://github.com/VerusCoin/Verusbridgekeeper) and the [Ethereum smart contract](https://etherscan.io/address/0x71518580f36FeCEFfE0721F06bA4703218cD7F63). At each step during cross-chain transactions the assets are verified and proven by consensus rules, with safeguards in place to prevent hacks.", "./raw_text_input_docs/README_eth-bridge.md"], ["How can I launch a new currency on Verus that is equivalent to an ERC-20 token?", "You can launch a new currency on Verus that is 1:1 mapped to any ERC-20 token by following the process outlined in the Verus documentation. This allows you to create a new currency on Verus that is pegged to the value of an existing ERC-20 token.", "| What       |     Details      |\n| :------------------ | :----------------------------------------- |\n| **Conversions**| Convert VRSC, ETH (vETH), DAI (DAI.vETH) & MKR (MKR.vETH) with each other into any direction (on/to Verus & Ethereum), or to and from the Bridge.vETH currency.|\n| **Launch mapped currencies**| Launch currencies on Verus that are 1:1 mapped to any ERC-20. [Learn how](/currencies/mapping-1:1-eth.html)|\n| **Export currencies as ERC-20**| Export any launched currency (simple tokens, basket currencies) on Verus as an ERC-20. [Learn how](/currencies/export-to-eth.html)|\n| **Cross-chain sends**| Send any tokens, basket currencies (e.g. liquidity pools), mapped currencies etc. that are exported to Ethereum across the bridge.|\n| **Export tokenized ID control**| Export a tokenized VerusID to Ethereum as ERC-721.|\n| **Map VerusID to Ethereum NFT**| Launch a tokenized ID with a mapping of an Ethereum ERC-721 or ERC-1155.|Then there is the bridge currency Bridge.vETH, a 100% backed currency with 4 currencies in its reserves (VRSC, ETH, DAI, MKR). The Bridge.vETH currency function is to make the bridging of assets simple. From wherever you send it converts the fees that you need seamlessly. [More on Bridge.vETH below.](/eth-bridge/#bridge-veth-currency)## What makes the Verus-Ethereum Bridge secure\nThe Verus-Ethereum Bridge is different because the assets are never in anyone\u2019s custody. This is done through the seamless cooperation between the block producers (worldwide miners and stakers), community notary witnesses, [the Bridgekeeper software](https://github.com/VerusCoin/Verusbridgekeeper) and the [Ethereum smart contract](https://etherscan.io/address/0x71518580f36FeCEFfE0721F06bA4703218cD7F63). At each step during cross-chain transactions the assets are verified and proven by consensus rules, with safeguards in place to prevent hacks.", "./raw_text_input_docs/README_eth-bridge.md"], ["Can I export a currency from Verus to Ethereum, and if so, how?", "Yes, you can export a launched currency (simple tokens, basket currencies) from Verus to Ethereum as an ERC-20 token. This process is explained in the Verus documentation.", "| What       |     Details      |\n| :------------------ | :----------------------------------------- |\n| **Conversions**| Convert VRSC, ETH (vETH), DAI (DAI.vETH) & MKR (MKR.vETH) with each other into any direction (on/to Verus & Ethereum), or to and from the Bridge.vETH currency.|\n| **Launch mapped currencies**| Launch currencies on Verus that are 1:1 mapped to any ERC-20. [Learn how](/currencies/mapping-1:1-eth.html)|\n| **Export currencies as ERC-20**| Export any launched currency (simple tokens, basket currencies) on Verus as an ERC-20. [Learn how](/currencies/export-to-eth.html)|\n| **Cross-chain sends**| Send any tokens, basket currencies (e.g. liquidity pools), mapped currencies etc. that are exported to Ethereum across the bridge.|\n| **Export tokenized ID control**| Export a tokenized VerusID to Ethereum as ERC-721.|\n| **Map VerusID to Ethereum NFT**| Launch a tokenized ID with a mapping of an Ethereum ERC-721 or ERC-1155.|Then there is the bridge currency Bridge.vETH, a 100% backed currency with 4 currencies in its reserves (VRSC, ETH, DAI, MKR). The Bridge.vETH currency function is to make the bridging of assets simple. From wherever you send it converts the fees that you need seamlessly. [More on Bridge.vETH below.](/eth-bridge/#bridge-veth-currency)## What makes the Verus-Ethereum Bridge secure\nThe Verus-Ethereum Bridge is different because the assets are never in anyone\u2019s custody. This is done through the seamless cooperation between the block producers (worldwide miners and stakers), community notary witnesses, [the Bridgekeeper software](https://github.com/VerusCoin/Verusbridgekeeper) and the [Ethereum smart contract](https://etherscan.io/address/0x71518580f36FeCEFfE0721F06bA4703218cD7F63). At each step during cross-chain transactions the assets are verified and proven by consensus rules, with safeguards in place to prevent hacks.", "./raw_text_input_docs/README_eth-bridge.md"], ["What is the purpose of the Bridge.vETH currency?", "The Bridge.vETH currency is a 100% backed currency with reserves in VRSC, ETH, DAI, and MKR. Its purpose is to simplify the bridging of assets between Verus and Ethereum by seamlessly converting fees.", "| What       |     Details      |\n| :------------------ | :----------------------------------------- |\n| **Conversions**| Convert VRSC, ETH (vETH), DAI (DAI.vETH) & MKR (MKR.vETH) with each other into any direction (on/to Verus & Ethereum), or to and from the Bridge.vETH currency.|\n| **Launch mapped currencies**| Launch currencies on Verus that are 1:1 mapped to any ERC-20. [Learn how](/currencies/mapping-1:1-eth.html)|\n| **Export currencies as ERC-20**| Export any launched currency (simple tokens, basket currencies) on Verus as an ERC-20. [Learn how](/currencies/export-to-eth.html)|\n| **Cross-chain sends**| Send any tokens, basket currencies (e.g. liquidity pools), mapped currencies etc. that are exported to Ethereum across the bridge.|\n| **Export tokenized ID control**| Export a tokenized VerusID to Ethereum as ERC-721.|\n| **Map VerusID to Ethereum NFT**| Launch a tokenized ID with a mapping of an Ethereum ERC-721 or ERC-1155.|Then there is the bridge currency Bridge.vETH, a 100% backed currency with 4 currencies in its reserves (VRSC, ETH, DAI, MKR). The Bridge.vETH currency function is to make the bridging of assets simple. From wherever you send it converts the fees that you need seamlessly. [More on Bridge.vETH below.](/eth-bridge/#bridge-veth-currency)## What makes the Verus-Ethereum Bridge secure\nThe Verus-Ethereum Bridge is different because the assets are never in anyone\u2019s custody. This is done through the seamless cooperation between the block producers (worldwide miners and stakers), community notary witnesses, [the Bridgekeeper software](https://github.com/VerusCoin/Verusbridgekeeper) and the [Ethereum smart contract](https://etherscan.io/address/0x71518580f36FeCEFfE0721F06bA4703218cD7F63). At each step during cross-chain transactions the assets are verified and proven by consensus rules, with safeguards in place to prevent hacks.", "./raw_text_input_docs/README_eth-bridge.md"], ["What makes the Verus-Ethereum Bridge secure?", "The Verus-Ethereum Bridge is secure because assets are never in anyone's custody. Instead, the bridge relies on the cooperation between block producers (worldwide miners and stakers), community notary witnesses, the Bridgekeeper software, and the Ethereum smart contract to verify and prove assets at each step of cross-chain transactions. This decentralized approach, combined with consensus rules and safeguards, prevents hacks and ensures the security of the bridge.", "| What       |     Details      |\n| :------------------ | :----------------------------------------- |\n| **Conversions**| Convert VRSC, ETH (vETH), DAI (DAI.vETH) & MKR (MKR.vETH) with each other into any direction (on/to Verus & Ethereum), or to and from the Bridge.vETH currency.|\n| **Launch mapped currencies**| Launch currencies on Verus that are 1:1 mapped to any ERC-20. [Learn how](/currencies/mapping-1:1-eth.html)|\n| **Export currencies as ERC-20**| Export any launched currency (simple tokens, basket currencies) on Verus as an ERC-20. [Learn how](/currencies/export-to-eth.html)|\n| **Cross-chain sends**| Send any tokens, basket currencies (e.g. liquidity pools), mapped currencies etc. that are exported to Ethereum across the bridge.|\n| **Export tokenized ID control**| Export a tokenized VerusID to Ethereum as ERC-721.|\n| **Map VerusID to Ethereum NFT**| Launch a tokenized ID with a mapping of an Ethereum ERC-721 or ERC-1155.|Then there is the bridge currency Bridge.vETH, a 100% backed currency with 4 currencies in its reserves (VRSC, ETH, DAI, MKR). The Bridge.vETH currency function is to make the bridging of assets simple. From wherever you send it converts the fees that you need seamlessly. [More on Bridge.vETH below.](/eth-bridge/#bridge-veth-currency)## What makes the Verus-Ethereum Bridge secure\nThe Verus-Ethereum Bridge is different because the assets are never in anyone\u2019s custody. This is done through the seamless cooperation between the block producers (worldwide miners and stakers), community notary witnesses, [the Bridgekeeper software](https://github.com/VerusCoin/Verusbridgekeeper) and the [Ethereum smart contract](https://etherscan.io/address/0x71518580f36FeCEFfE0721F06bA4703218cD7F63). At each step during cross-chain transactions the assets are verified and proven by consensus rules, with safeguards in place to prevent hacks.", "./raw_text_input_docs/README_eth-bridge.md"]]], [["User:: I've been hearing about VerusPay Invoices and I'm not entirely sure what they're for. Can you tell me what the purpose of the VerusPay Invoice specification is?", "AI Assistant:: The VerusPay Invoice specification is designed to provide a standardized format for creating, managing, and interpreting invoices across the Verus blockchain ecosystem and beyond. It aims to ensure interoperability, security, and ease of use, making it a valuable tool for developers, merchants, and users within the Verus network and beyond.", "User:: That makes sense. What are the core components of a VerusPay Invoice?", "AI Assistant:: The core components of a VerusPay Invoice include:\n\n1. **System ID**: The ID system the invoice is signed on, if signed by a VerusID.\n2. **Signing ID**: The address of the VerusID that signed the invoice, if signed by a VerusID.\n3. **Signature**: The signature of the invoice, if signed by a VerusID.\n4. **Details**: The VerusPay InvoiceDetails sub-component, which covers aspects such as payment amount, destination, and currency.\n5. **Version**: Manages the invoice format version, facilitating future updates and backward compatibility.\n\nThese components work together to provide a secure and standardized way of creating and managing invoices.", "User:: What's the purpose of the VerusPay InvoiceDetails component?", "AI Assistant:: The VerusPay InvoiceDetails component provides specific transaction-related data, such as payment amount, destination, and currency, and is embedded within the VerusPay Invoice. This component is essential for ensuring that the necessary information is included in the invoice.", "User:: And what about the Version component? Why is that important?", "AI Assistant:: The Version component is important because it manages the invoice format version, allowing for future updates and ensuring backward compatibility through version flags and checks. This ensures that invoices remain compatible and usable even as the specification evolves. It's a crucial component for ensuring that VerusPay Invoices remain functional and secure over time."], "AI Assistant", "", "N/A", [["What is the purpose of the VerusPay Invoice specification?", "The VerusPay Invoice specification is designed to provide a standardized format for creating, managing, and interpreting invoices across the Verus blockchain ecosystem and beyond. It aims to ensure interoperability, security, and ease of use, making it a valuable tool for developers, merchants, and users within the Verus network and beyond.", "# Invoice SpecificationThe VerusPay Invoice specification, introduced in VerusPay v3, outlines a standardized format for creating, managing, and interpreting invoices across the Verus blockchain ecosystem and beyond. It is designed to be universally implementable across various programming languages, focusing primarily on the serialization and deserialization processes to ensure interoperability and consistency. VerusPay invoices provide a robust framework for blockchain invoice management, emphasizing interoperability, security, and ease of use. Their design facilitates a seamless payment experience across different blockchain ecosystems, making it a valuable tool for developers, merchants, and users within the Verus network and beyond.## Core ComponentsThe VerusPay Invoice construct is central to this specification, encapsulating all necessary information for a comprehensive invoice system, including:- **System ID**: If the invoice is signed by a VerusID, this is the ID system it is signed on.\n- **Signing ID**: If the invoice is signed by a VerusID, this is the address of the VerusID that signed it.\n- **Signature**: If the invoice is signed by a VerusID, this is the signature.\n- **Details**: Incorporates detailed transaction information through the VerusPay InvoiceDetails sub-component, covering aspects such as the payment amount, destination, and currency.\n- **Version**: Manages the invoice format version, facilitating future updates and backward compatibility through version flags and checks.### VerusPay InvoiceDetailsEmbedded within the VerusPay Invoice, the VerusPay InvoiceDetails component provides specific transaction-related data:", "./raw_text_input_docs/invoices.md"], ["What are the core components of a VerusPay Invoice?", "The core components of a VerusPay Invoice include:\n\n1. **System ID**: The ID system the invoice is signed on, if signed by a VerusID.\n2. **Signing ID**: The address of the VerusID that signed the invoice, if signed by a VerusID.\n3. **Signature**: The signature of the invoice, if signed by a VerusID.\n4. **Details**: The VerusPay InvoiceDetails sub-component, which covers aspects such as payment amount, destination, and currency.\n5. **Version**: Manages the invoice format version, facilitating future updates and backward compatibility.", "# Invoice SpecificationThe VerusPay Invoice specification, introduced in VerusPay v3, outlines a standardized format for creating, managing, and interpreting invoices across the Verus blockchain ecosystem and beyond. It is designed to be universally implementable across various programming languages, focusing primarily on the serialization and deserialization processes to ensure interoperability and consistency. VerusPay invoices provide a robust framework for blockchain invoice management, emphasizing interoperability, security, and ease of use. Their design facilitates a seamless payment experience across different blockchain ecosystems, making it a valuable tool for developers, merchants, and users within the Verus network and beyond.## Core ComponentsThe VerusPay Invoice construct is central to this specification, encapsulating all necessary information for a comprehensive invoice system, including:- **System ID**: If the invoice is signed by a VerusID, this is the ID system it is signed on.\n- **Signing ID**: If the invoice is signed by a VerusID, this is the address of the VerusID that signed it.\n- **Signature**: If the invoice is signed by a VerusID, this is the signature.\n- **Details**: Incorporates detailed transaction information through the VerusPay InvoiceDetails sub-component, covering aspects such as the payment amount, destination, and currency.\n- **Version**: Manages the invoice format version, facilitating future updates and backward compatibility through version flags and checks.### VerusPay InvoiceDetailsEmbedded within the VerusPay Invoice, the VerusPay InvoiceDetails component provides specific transaction-related data:", "./raw_text_input_docs/invoices.md"], ["What is the purpose of the VerusPay InvoiceDetails component?", "The VerusPay InvoiceDetails component provides specific transaction-related data, such as payment amount, destination, and currency, and is embedded within the VerusPay Invoice.", "# Invoice SpecificationThe VerusPay Invoice specification, introduced in VerusPay v3, outlines a standardized format for creating, managing, and interpreting invoices across the Verus blockchain ecosystem and beyond. It is designed to be universally implementable across various programming languages, focusing primarily on the serialization and deserialization processes to ensure interoperability and consistency. VerusPay invoices provide a robust framework for blockchain invoice management, emphasizing interoperability, security, and ease of use. Their design facilitates a seamless payment experience across different blockchain ecosystems, making it a valuable tool for developers, merchants, and users within the Verus network and beyond.## Core ComponentsThe VerusPay Invoice construct is central to this specification, encapsulating all necessary information for a comprehensive invoice system, including:- **System ID**: If the invoice is signed by a VerusID, this is the ID system it is signed on.\n- **Signing ID**: If the invoice is signed by a VerusID, this is the address of the VerusID that signed it.\n- **Signature**: If the invoice is signed by a VerusID, this is the signature.\n- **Details**: Incorporates detailed transaction information through the VerusPay InvoiceDetails sub-component, covering aspects such as the payment amount, destination, and currency.\n- **Version**: Manages the invoice format version, facilitating future updates and backward compatibility through version flags and checks.### VerusPay InvoiceDetailsEmbedded within the VerusPay Invoice, the VerusPay InvoiceDetails component provides specific transaction-related data:", "./raw_text_input_docs/invoices.md"], ["Why is the Version component important in a VerusPay Invoice?", "The Version component is important because it manages the invoice format version, allowing for future updates and ensuring backward compatibility through version flags and checks. This ensures that invoices remain compatible and usable even as the specification evolves.", "# Invoice SpecificationThe VerusPay Invoice specification, introduced in VerusPay v3, outlines a standardized format for creating, managing, and interpreting invoices across the Verus blockchain ecosystem and beyond. It is designed to be universally implementable across various programming languages, focusing primarily on the serialization and deserialization processes to ensure interoperability and consistency. VerusPay invoices provide a robust framework for blockchain invoice management, emphasizing interoperability, security, and ease of use. Their design facilitates a seamless payment experience across different blockchain ecosystems, making it a valuable tool for developers, merchants, and users within the Verus network and beyond.## Core ComponentsThe VerusPay Invoice construct is central to this specification, encapsulating all necessary information for a comprehensive invoice system, including:- **System ID**: If the invoice is signed by a VerusID, this is the ID system it is signed on.\n- **Signing ID**: If the invoice is signed by a VerusID, this is the address of the VerusID that signed it.\n- **Signature**: If the invoice is signed by a VerusID, this is the signature.\n- **Details**: Incorporates detailed transaction information through the VerusPay InvoiceDetails sub-component, covering aspects such as the payment amount, destination, and currency.\n- **Version**: Manages the invoice format version, facilitating future updates and backward compatibility through version flags and checks.### VerusPay InvoiceDetailsEmbedded within the VerusPay Invoice, the VerusPay InvoiceDetails component provides specific transaction-related data:", "./raw_text_input_docs/invoices.md"]]], [["User:: Hey, I've got a question about the Verus-Ethereum Bridge. What happens if the gas fees for crossing the bridge increase after I've paid for a bridge crossing, and how can I get a refund?", "AI Assistant:: If the gas fees for crossing the Verus-Ethereum Bridge increase after you've paid for a bridge crossing, you may be eligible for a refund. To claim this refund, please follow the specific steps for your scenario. Would you like me to walk you through the steps for Ethereum to Ethereum and Verus to Ethereum transactions?", "User:: Yes, please, I'd like to know how to claim refunds for an Ethereum to Ethereum transaction on the Verus-Ethereum Bridge.", "AI Assistant:: To claim refunds for an Ethereum to Ethereum transaction, you need to export your Ethereum private key from the wallet you used for the conversion (e.g., MetaMask), then import it into a Verus wallet. You can do this using Verus Mobile or Verus Desktop. Once you've imported the private key, you can add the currency you want to get back and claim your refund. Would you like me to explain how to import an Ethereum private key into Verus Mobile or Verus Desktop?", "User:: Yes, please explain how to import an Ethereum private key into Verus Mobile to claim a refund.", "AI Assistant:: To import an Ethereum private key into Verus Mobile, you need to:\n\n1. Download and install Verus Mobile from the Play Store or App Store.\n2. Create a new profile by choosing a username and password.\n3. Select \"import wallet\" and then \"Enter key/seed\".\n4. Enter the Ethereum private key.\n5. Add the currency you want to get back by clicking the plus-button corner-right and selecting \"Add PBaaS currency\".\n\nLet me know if you have any questions or need further clarification!", "User:: What if I want to use Verus Desktop instead?", "AI Assistant:: To import an Ethereum private key into Verus Desktop, you need to:\n\n1. Go to \"Settings\" (gear-icon top right) and then \"Coin Settings\".\n2. Select the Verus blockchain and type the following command:\n\n```json\nrun importprivkey \"ETH_PRIVATE_KEY\" \"\" true\n```\n\nNote that Verus Desktop will not show any progress on the import, and it will take some time for the process to finish in the background.", "User:: I have another question. How do I claim refunds for a Verus to Ethereum transaction on the Verus-Ethereum Bridge?", "AI Assistant:: To claim refunds for a Verus to Ethereum transaction, you need to use the refund address you specified when bridging from Verus to Ethereum using Verus Desktop. You can use this refund address on the Bridge website to claim the funds back."], "AI Assistant", "", "N/A", [["What happens if the gas fees for crossing the Verus-Ethereum Bridge increase after I've paid for a bridge crossing, and how can I get a refund?", "If the gas fees for crossing the Verus-Ethereum Bridge increase after you've paid for a bridge crossing, you may be eligible for a refund. To claim this refund, please follow these steps: [insert steps for Ethereum to Ethereum and Verus to Ethereum scenarios].", "# Claim refunds on the Verus-Ethereum Bridge\nCrossing the bridge costs Ethereum gas fees. Gas fees can swing in price quite dramatically in a short period of time. It can happen that when you pay for a bridge crossing the gas fees jumped up higher than what you paid for the crossing, resulting in a refund. Learn here how you can claim your refunds back.\n\n## Ethereum to Ethereum\nWhen using the Bridge website and making a conversion that goes from Ethereum to Verus and back to Ethereum, you have signed a message that created a refund address based on your Ethereum wallet's private key.\n\nThese are the steps to claim refunds when you did an Ethereum to Ethereum transaction:\n\n### Verus Mobile\n1. Export your Ethereum private key from the wallet you did the conversion with (probably MetaMask)\n2. Import that private key into a Verus wallet. The easiest way to do that is with Verus Mobile. \n- Download Verus Mobile on the Play Store or App Store\n- Add a new profile (choose username and password)\n- Choose \"import wallet\"\n- Choose \"Enter key/seed\"\n- Enter the Ethereum private key here\n- Add the currency you want to get back (click the plus-button corner-right, \"Add PBaaS currency\" and choose the one for you)\n\n### Verus Desktop\nIf you are running native mode (full node) Verus Desktop then you can import the Ethereum's private key in this way:\n\nGo to ``Settings (gear-icon top right)``, then ``Coin Settings``, then select the Verus blockchain and type the following:\n\n```json\nrun importprivkey \"ETH_PRIVATE_KEY\" \"\" true\n```\n\n::: warning Important!\nVerus Desktop will not show any progress on the import. It will take some time for the process to finish in the background.\n:::\n\n## Verus to Ethereum\nWhen bridging with Verus Desktop from the Verus blockchain to the Ethereum blockchain you had to fill in a refund address.\n\nOn the Bridge website you can use that refund address to claim the funds back.", "./raw_text_input_docs/refunds.md"], ["How do I claim refunds for an Ethereum to Ethereum transaction on the Verus-Ethereum Bridge?", "To claim refunds for an Ethereum to Ethereum transaction, you need to export your Ethereum private key from the wallet you used for the conversion (e.g., MetaMask), then import it into a Verus wallet. You can do this using Verus Mobile or Verus Desktop. Once you've imported the private key, you can add the currency you want to get back and claim your refund.", "# Claim refunds on the Verus-Ethereum Bridge\nCrossing the bridge costs Ethereum gas fees. Gas fees can swing in price quite dramatically in a short period of time. It can happen that when you pay for a bridge crossing the gas fees jumped up higher than what you paid for the crossing, resulting in a refund. Learn here how you can claim your refunds back.\n\n## Ethereum to Ethereum\nWhen using the Bridge website and making a conversion that goes from Ethereum to Verus and back to Ethereum, you have signed a message that created a refund address based on your Ethereum wallet's private key.\n\nThese are the steps to claim refunds when you did an Ethereum to Ethereum transaction:\n\n### Verus Mobile\n1. Export your Ethereum private key from the wallet you did the conversion with (probably MetaMask)\n2. Import that private key into a Verus wallet. The easiest way to do that is with Verus Mobile. \n- Download Verus Mobile on the Play Store or App Store\n- Add a new profile (choose username and password)\n- Choose \"import wallet\"\n- Choose \"Enter key/seed\"\n- Enter the Ethereum private key here\n- Add the currency you want to get back (click the plus-button corner-right, \"Add PBaaS currency\" and choose the one for you)\n\n### Verus Desktop\nIf you are running native mode (full node) Verus Desktop then you can import the Ethereum's private key in this way:\n\nGo to ``Settings (gear-icon top right)``, then ``Coin Settings``, then select the Verus blockchain and type the following:\n\n```json\nrun importprivkey \"ETH_PRIVATE_KEY\" \"\" true\n```\n\n::: warning Important!\nVerus Desktop will not show any progress on the import. It will take some time for the process to finish in the background.\n:::\n\n## Verus to Ethereum\nWhen bridging with Verus Desktop from the Verus blockchain to the Ethereum blockchain you had to fill in a refund address.\n\nOn the Bridge website you can use that refund address to claim the funds back.", "./raw_text_input_docs/refunds.md"], ["How do I import an Ethereum private key into Verus Mobile to claim a refund?", "To import an Ethereum private key into Verus Mobile, you need to:\n\n1. Download and install Verus Mobile from the Play Store or App Store.\n2. Create a new profile by choosing a username and password.\n3. Select \"import wallet\" and then \"Enter key/seed\".\n4. Enter the Ethereum private key.\n5. Add the currency you want to get back by clicking the plus-button corner-right and selecting \"Add PBaaS currency\".", "# Claim refunds on the Verus-Ethereum Bridge\nCrossing the bridge costs Ethereum gas fees. Gas fees can swing in price quite dramatically in a short period of time. It can happen that when you pay for a bridge crossing the gas fees jumped up higher than what you paid for the crossing, resulting in a refund. Learn here how you can claim your refunds back.\n\n## Ethereum to Ethereum\nWhen using the Bridge website and making a conversion that goes from Ethereum to Verus and back to Ethereum, you have signed a message that created a refund address based on your Ethereum wallet's private key.\n\nThese are the steps to claim refunds when you did an Ethereum to Ethereum transaction:\n\n### Verus Mobile\n1. Export your Ethereum private key from the wallet you did the conversion with (probably MetaMask)\n2. Import that private key into a Verus wallet. The easiest way to do that is with Verus Mobile. \n- Download Verus Mobile on the Play Store or App Store\n- Add a new profile (choose username and password)\n- Choose \"import wallet\"\n- Choose \"Enter key/seed\"\n- Enter the Ethereum private key here\n- Add the currency you want to get back (click the plus-button corner-right, \"Add PBaaS currency\" and choose the one for you)\n\n### Verus Desktop\nIf you are running native mode (full node) Verus Desktop then you can import the Ethereum's private key in this way:\n\nGo to ``Settings (gear-icon top right)``, then ``Coin Settings``, then select the Verus blockchain and type the following:\n\n```json\nrun importprivkey \"ETH_PRIVATE_KEY\" \"\" true\n```\n\n::: warning Important!\nVerus Desktop will not show any progress on the import. It will take some time for the process to finish in the background.\n:::\n\n## Verus to Ethereum\nWhen bridging with Verus Desktop from the Verus blockchain to the Ethereum blockchain you had to fill in a refund address.\n\nOn the Bridge website you can use that refund address to claim the funds back.", "./raw_text_input_docs/refunds.md"], ["How do I import an Ethereum private key into Verus Desktop to claim a refund?", "To import an Ethereum private key into Verus Desktop, you need to:\n\n1. Go to \"Settings\" (gear-icon top right) and then \"Coin Settings\".\n2. Select the Verus blockchain and type the following command:\n\n```json\nrun importprivkey \"ETH_PRIVATE_KEY\" \"\" true\n```\n\nNote that Verus Desktop will not show any progress on the import, and it will take some time for the process to finish in the background.", "# Claim refunds on the Verus-Ethereum Bridge\nCrossing the bridge costs Ethereum gas fees. Gas fees can swing in price quite dramatically in a short period of time. It can happen that when you pay for a bridge crossing the gas fees jumped up higher than what you paid for the crossing, resulting in a refund. Learn here how you can claim your refunds back.\n\n## Ethereum to Ethereum\nWhen using the Bridge website and making a conversion that goes from Ethereum to Verus and back to Ethereum, you have signed a message that created a refund address based on your Ethereum wallet's private key.\n\nThese are the steps to claim refunds when you did an Ethereum to Ethereum transaction:\n\n### Verus Mobile\n1. Export your Ethereum private key from the wallet you did the conversion with (probably MetaMask)\n2. Import that private key into a Verus wallet. The easiest way to do that is with Verus Mobile. \n- Download Verus Mobile on the Play Store or App Store\n- Add a new profile (choose username and password)\n- Choose \"import wallet\"\n- Choose \"Enter key/seed\"\n- Enter the Ethereum private key here\n- Add the currency you want to get back (click the plus-button corner-right, \"Add PBaaS currency\" and choose the one for you)\n\n### Verus Desktop\nIf you are running native mode (full node) Verus Desktop then you can import the Ethereum's private key in this way:\n\nGo to ``Settings (gear-icon top right)``, then ``Coin Settings``, then select the Verus blockchain and type the following:\n\n```json\nrun importprivkey \"ETH_PRIVATE_KEY\" \"\" true\n```\n\n::: warning Important!\nVerus Desktop will not show any progress on the import. It will take some time for the process to finish in the background.\n:::\n\n## Verus to Ethereum\nWhen bridging with Verus Desktop from the Verus blockchain to the Ethereum blockchain you had to fill in a refund address.\n\nOn the Bridge website you can use that refund address to claim the funds back.", "./raw_text_input_docs/refunds.md"], ["How do I claim refunds for a Verus to Ethereum transaction on the Verus-Ethereum Bridge?", "To claim refunds for a Verus to Ethereum transaction, you need to use the refund address you specified when bridging from Verus to Ethereum using Verus Desktop. You can use this refund address on the Bridge website to claim the funds back.", "# Claim refunds on the Verus-Ethereum Bridge\nCrossing the bridge costs Ethereum gas fees. Gas fees can swing in price quite dramatically in a short period of time. It can happen that when you pay for a bridge crossing the gas fees jumped up higher than what you paid for the crossing, resulting in a refund. Learn here how you can claim your refunds back.\n\n## Ethereum to Ethereum\nWhen using the Bridge website and making a conversion that goes from Ethereum to Verus and back to Ethereum, you have signed a message that created a refund address based on your Ethereum wallet's private key.\n\nThese are the steps to claim refunds when you did an Ethereum to Ethereum transaction:\n\n### Verus Mobile\n1. Export your Ethereum private key from the wallet you did the conversion with (probably MetaMask)\n2. Import that private key into a Verus wallet. The easiest way to do that is with Verus Mobile. \n- Download Verus Mobile on the Play Store or App Store\n- Add a new profile (choose username and password)\n- Choose \"import wallet\"\n- Choose \"Enter key/seed\"\n- Enter the Ethereum private key here\n- Add the currency you want to get back (click the plus-button corner-right, \"Add PBaaS currency\" and choose the one for you)\n\n### Verus Desktop\nIf you are running native mode (full node) Verus Desktop then you can import the Ethereum's private key in this way:\n\nGo to ``Settings (gear-icon top right)``, then ``Coin Settings``, then select the Verus blockchain and type the following:\n\n```json\nrun importprivkey \"ETH_PRIVATE_KEY\" \"\" true\n```\n\n::: warning Important!\nVerus Desktop will not show any progress on the import. It will take some time for the process to finish in the background.\n:::\n\n## Verus to Ethereum\nWhen bridging with Verus Desktop from the Verus blockchain to the Ethereum blockchain you had to fill in a refund address.\n\nOn the Bridge website you can use that refund address to claim the funds back.", "./raw_text_input_docs/refunds.md"]]], [["User:: Hey, I've heard of Haraka512 V2 and VerusHash, but I'm not really sure what they are or how they relate to each other. Can you explain?", "AI Assistant:: Haraka512 V2 is a short input hash designed to consume one chunk of 512 bits and produce 256 bits of a hash result. VerusHash is built on top of Haraka512 V2 and takes any length of input to produce a 256-bit hash result, unique to VerusHash, providing the same security guarantees as Haraka512 V2.", "User:: That's really interesting! I've heard that VerusHash provides some strong security guarantees. Can you tell me more about those?", "AI Assistant:: VerusHash provides 256-bit security against classical computing attacks and 128-bit security against quantum computers for pre-image and second pre-image attacks. This means that VerusHash is highly resistant to attacks from both classical and quantum computers.", "User:: I'm curious about the inner workings of VerusHash. How does it work, and what's its relationship to the Haraka512 V2 core?", "AI Assistant:: VerusHash can be understood by separating the digest from the core. The Haraka512 V2 core is an abstract digest function that takes 512 bits (64 bytes) of input and produces 256 bits (32 bytes) of output. VerusHash builds on this core to take any length of input and produce a 256-bit hash result.", "User:: Moving on to Verus' staking algorithm, I've heard that it solves some major issues in other PoS systems. Can you tell me more about that?", "AI Assistant:: The two major theoretical issues that Verus' staking algorithm solves are \"Nothing at Stake\" and \"Weak Subjectivity\". These issues are solved by leveraging Verus' smart transaction capabilities to remove any incentive to attempt cheating, making it a losing proposition."], "AI Assistant", "", "N/A", [["What is Haraka512 V2 and how does it relate to VerusHash?", "Haraka512 V2 is a short input hash designed to consume one chunk of 512 bits and produce 256 bits of a hash result. VerusHash is built on top of Haraka512 V2 and takes any length of input to produce a 256-bit hash result, unique to VerusHash, providing the same security guarantees as Haraka512 V2.", "Haraka512 V2 is designed as a short input hash to exclusively consume one chunk of 512 bits and produce 256 bits of a hash result. Utilizing Haraka512 V2 VerusHash takes any length of input and produces a 256 bit hash result, unique to VerusHash, that also provides the same security guarantees as Haraka512 V2. This makes VerusHash 256 bit secure for classical computing attacks and 128 bit secure against quantum computers for pre-image and second pre-image attacks.\n\nTo understand the VerusHash algorithm it helps to first separate the digest from the core. We then consider the Haraka512 V2 core as an abstract digest function that takes 512 bits (64 bytes) of input and produces 256 bits (32 bytes) of output. Given such a digest function, referred to as haraka512256, the most concise implementation of VerusHash, in any language to-date, is the following Python code for the VerusHash hash digest as follows:\"\n\n``` py\n# verus_hash\n    def verus_hash(msg):\n      buf = [0] * 64\n      length = len(msg)\n      for i in range(0, length, 32):\n        clen = min(32, length - i)\n        buf[32:64] = [b for b in msg[i:i + clen]] + [0] * (32 - clen)\n        buf[0:32] = haraka512256(buf)\n      return bytes(buf[0:32])\n```\n\n## PoS Problems Solved\nVerus\u2019 staking algorithm solves the two major theoretical issues undermining other PoS systems, ``Nothing at Stake`` and ``Weak Subjectivity`` by leveraging its smart transaction capabilities to remove any incentive to attempt cheating, making it a losing proposition. [Read: How Verus Solved Proof of Stake\u2019s Two Biggest Problems: Nothing at Stake and Weak Subjectivity](https://medium.com/veruscoin/how-verus-solved-nothing-at-stake-and-weak-subjectivity-proof-of-stake-problems-b4dd6a85086e)", "./raw_text_input_docs/verus-proof-of-power.md"], ["What security guarantees does VerusHash provide against classical computing attacks and quantum computers?", "VerusHash provides 256-bit security against classical computing attacks and 128-bit security against quantum computers for pre-image and second pre-image attacks.", "Haraka512 V2 is designed as a short input hash to exclusively consume one chunk of 512 bits and produce 256 bits of a hash result. Utilizing Haraka512 V2 VerusHash takes any length of input and produces a 256 bit hash result, unique to VerusHash, that also provides the same security guarantees as Haraka512 V2. This makes VerusHash 256 bit secure for classical computing attacks and 128 bit secure against quantum computers for pre-image and second pre-image attacks.\n\nTo understand the VerusHash algorithm it helps to first separate the digest from the core. We then consider the Haraka512 V2 core as an abstract digest function that takes 512 bits (64 bytes) of input and produces 256 bits (32 bytes) of output. Given such a digest function, referred to as haraka512256, the most concise implementation of VerusHash, in any language to-date, is the following Python code for the VerusHash hash digest as follows:\"\n\n``` py\n# verus_hash\n    def verus_hash(msg):\n      buf = [0] * 64\n      length = len(msg)\n      for i in range(0, length, 32):\n        clen = min(32, length - i)\n        buf[32:64] = [b for b in msg[i:i + clen]] + [0] * (32 - clen)\n        buf[0:32] = haraka512256(buf)\n      return bytes(buf[0:32])\n```\n\n## PoS Problems Solved\nVerus\u2019 staking algorithm solves the two major theoretical issues undermining other PoS systems, ``Nothing at Stake`` and ``Weak Subjectivity`` by leveraging its smart transaction capabilities to remove any incentive to attempt cheating, making it a losing proposition. [Read: How Verus Solved Proof of Stake\u2019s Two Biggest Problems: Nothing at Stake and Weak Subjectivity](https://medium.com/veruscoin/how-verus-solved-nothing-at-stake-and-weak-subjectivity-proof-of-stake-problems-b4dd6a85086e)", "./raw_text_input_docs/verus-proof-of-power.md"], ["How does VerusHash work, and what is its relationship to the Haraka512 V2 core?", "VerusHash can be understood by separating the digest from the core. The Haraka512 V2 core is an abstract digest function that takes 512 bits (64 bytes) of input and produces 256 bits (32 bytes) of output. VerusHash builds on this core to take any length of input and produce a 256-bit hash result.", "Haraka512 V2 is designed as a short input hash to exclusively consume one chunk of 512 bits and produce 256 bits of a hash result. Utilizing Haraka512 V2 VerusHash takes any length of input and produces a 256 bit hash result, unique to VerusHash, that also provides the same security guarantees as Haraka512 V2. This makes VerusHash 256 bit secure for classical computing attacks and 128 bit secure against quantum computers for pre-image and second pre-image attacks.\n\nTo understand the VerusHash algorithm it helps to first separate the digest from the core. We then consider the Haraka512 V2 core as an abstract digest function that takes 512 bits (64 bytes) of input and produces 256 bits (32 bytes) of output. Given such a digest function, referred to as haraka512256, the most concise implementation of VerusHash, in any language to-date, is the following Python code for the VerusHash hash digest as follows:\"\n\n``` py\n# verus_hash\n    def verus_hash(msg):\n      buf = [0] * 64\n      length = len(msg)\n      for i in range(0, length, 32):\n        clen = min(32, length - i)\n        buf[32:64] = [b for b in msg[i:i + clen]] + [0] * (32 - clen)\n        buf[0:32] = haraka512256(buf)\n      return bytes(buf[0:32])\n```\n\n## PoS Problems Solved\nVerus\u2019 staking algorithm solves the two major theoretical issues undermining other PoS systems, ``Nothing at Stake`` and ``Weak Subjectivity`` by leveraging its smart transaction capabilities to remove any incentive to attempt cheating, making it a losing proposition. [Read: How Verus Solved Proof of Stake\u2019s Two Biggest Problems: Nothing at Stake and Weak Subjectivity](https://medium.com/veruscoin/how-verus-solved-nothing-at-stake-and-weak-subjectivity-proof-of-stake-problems-b4dd6a85086e)", "./raw_text_input_docs/verus-proof-of-power.md"], ["What are the two major theoretical issues that Verus' staking algorithm solves in other PoS systems?", "The two major theoretical issues that Verus' staking algorithm solves are \"Nothing at Stake\" and \"Weak Subjectivity\". These issues are solved by leveraging Verus' smart transaction capabilities to remove any incentive to attempt cheating, making it a losing proposition.", "Haraka512 V2 is designed as a short input hash to exclusively consume one chunk of 512 bits and produce 256 bits of a hash result. Utilizing Haraka512 V2 VerusHash takes any length of input and produces a 256 bit hash result, unique to VerusHash, that also provides the same security guarantees as Haraka512 V2. This makes VerusHash 256 bit secure for classical computing attacks and 128 bit secure against quantum computers for pre-image and second pre-image attacks.\n\nTo understand the VerusHash algorithm it helps to first separate the digest from the core. We then consider the Haraka512 V2 core as an abstract digest function that takes 512 bits (64 bytes) of input and produces 256 bits (32 bytes) of output. Given such a digest function, referred to as haraka512256, the most concise implementation of VerusHash, in any language to-date, is the following Python code for the VerusHash hash digest as follows:\"\n\n``` py\n# verus_hash\n    def verus_hash(msg):\n      buf = [0] * 64\n      length = len(msg)\n      for i in range(0, length, 32):\n        clen = min(32, length - i)\n        buf[32:64] = [b for b in msg[i:i + clen]] + [0] * (32 - clen)\n        buf[0:32] = haraka512256(buf)\n      return bytes(buf[0:32])\n```\n\n## PoS Problems Solved\nVerus\u2019 staking algorithm solves the two major theoretical issues undermining other PoS systems, ``Nothing at Stake`` and ``Weak Subjectivity`` by leveraging its smart transaction capabilities to remove any incentive to attempt cheating, making it a losing proposition. [Read: How Verus Solved Proof of Stake\u2019s Two Biggest Problems: Nothing at Stake and Weak Subjectivity](https://medium.com/veruscoin/how-verus-solved-nothing-at-stake-and-weak-subjectivity-proof-of-stake-problems-b4dd6a85086e)", "./raw_text_input_docs/verus-proof-of-power.md"]]], [["User:: Hi, I'm trying to understand more about the Verus blockchain network. Can you tell me about the Transfer Destination construct? What's its purpose?", "AI Assistant:: The Transfer Destination construct is a universal component used within the Verus blockchain network to define destinations within blockchain operations comprehensively. It is crucial for specifying the end points in a variety of blockchain transactions and supports a wide array of destination types to accommodate diverse blockchain functionalities and cross-chain interactions. Does that make sense?", "User:: That makes sense. What information does the Transfer Destination construct encapsulate?", "AI Assistant:: The Transfer Destination construct encapsulates key information necessary for blockchain transactions, including the destination type, destination-specific bytes, gateway information, and associated fees. This information is essential for ensuring that transactions are processed correctly and efficiently within the Verus network.", "User:: That's helpful. What types of destinations are supported by the Transfer Destination construct?", "AI Assistant:: The Transfer Destination construct supports various destination types, each serving specific purposes. It's designed to be flexible and accommodate different use cases, whether it's for simple transactions or more complex cross-chain interactions. Would you like me to elaborate on the specific types of destinations supported?"], "AI Assistant", "", "N/A", [["What is the purpose of the Transfer Destination construct in the Verus blockchain network?", "The Transfer Destination construct is a universal component used within the Verus blockchain network to define destinations within blockchain operations comprehensively. It is crucial for specifying the end points in a variety of blockchain transactions and supports a wide array of destination types to accommodate diverse blockchain functionalities and cross-chain interactions.", "# Transfer DestinationThe Transfer Destination construct is a universal component used within the Verus blockchain network, designed to define destinations within blockchain operations comprehensively. This construct is crucial for specifying the end points in a variety of blockchain transactions, supporting a wide array of destination types to accommodate diverse blockchain functionalities and cross-chain interactions.## Core ConceptsTransfer Destination encapsulates key information necessary for blockchain transactions, including the destination type, destination-specific bytes, gateway information, and associated fees. It supports a flexible architecture for defining complex transaction paths, enhancing the blockchain's capability to handle sophisticated and multi-layered operations.### Destination TypesThe Transfer Destination construct supports various destination types, each serving specific purposes:", "./raw_text_input_docs/transfer-destination.md"], ["What information does the Transfer Destination construct encapsulate?", "The Transfer Destination construct encapsulates key information necessary for blockchain transactions, including the destination type, destination-specific bytes, gateway information, and associated fees.", "# Transfer DestinationThe Transfer Destination construct is a universal component used within the Verus blockchain network, designed to define destinations within blockchain operations comprehensively. This construct is crucial for specifying the end points in a variety of blockchain transactions, supporting a wide array of destination types to accommodate diverse blockchain functionalities and cross-chain interactions.## Core ConceptsTransfer Destination encapsulates key information necessary for blockchain transactions, including the destination type, destination-specific bytes, gateway information, and associated fees. It supports a flexible architecture for defining complex transaction paths, enhancing the blockchain's capability to handle sophisticated and multi-layered operations.### Destination TypesThe Transfer Destination construct supports various destination types, each serving specific purposes:", "./raw_text_input_docs/transfer-destination.md"], ["What types of destinations are supported by the Transfer Destination construct?", "The Transfer Destination construct supports various destination types, each serving specific purposes.", "# Transfer DestinationThe Transfer Destination construct is a universal component used within the Verus blockchain network, designed to define destinations within blockchain operations comprehensively. This construct is crucial for specifying the end points in a variety of blockchain transactions, supporting a wide array of destination types to accommodate diverse blockchain functionalities and cross-chain interactions.## Core ConceptsTransfer Destination encapsulates key information necessary for blockchain transactions, including the destination type, destination-specific bytes, gateway information, and associated fees. It supports a flexible architecture for defining complex transaction paths, enhancing the blockchain's capability to handle sophisticated and multi-layered operations.### Destination TypesThe Transfer Destination construct supports various destination types, each serving specific purposes:", "./raw_text_input_docs/transfer-destination.md"]]], [["User:: I'm curious about multisig VerusIDs. How many signatures can a multisig VerusID require, and what are some examples of possible configurations?", "AI Assistant:: A multisig VerusID can require up to 13 out of 25 signatures. This allows for a high degree of customizability and flexibility in terms of the number of signatures required to authorize a transaction.\n\nSome possible configurations include: 13 of 25 signatures, which would require a majority of the designated signers to agree; 13 of 13 signatures, which would require all of the designated signers to agree; 1 of 25 signatures, which would allow any one of the designated signers to authorize a transaction; and 1 of 1 signature (which is equivalent to a regular non-multisig wallet), which would not require any additional signatures at all.\n\nThese are just a few examples, but the possibilities are endless, and the specific configuration will depend on the needs and preferences of the user or organization creating the multisig VerusID."], "AI Assistant", "", "N/A", [["How many signatures can a multisig VerusID require, and what are some examples of possible configurations?", "A multisig VerusID can require up to 13 out of 25 signatures. Some possible configurations include: 13 of 25 signatures, 13 of 13 signatures, 1 of 25 signatures, and 1 of 1 signature (which is equivalent to a regular non-multisig wallet).", "# Set up multisig for VerusID\nWith multisig, you can set up a wallet that requires multiple signatures to send a transaction.\n\nFor example, you could set up a wallet that requires two out of three possible signatures before a transaction can be sent.\n\nA multisig VerusID can be up to **13 of 25 signatures**. It can also be 13 of 13; 1 of 25; and of course 1 of 1.", "./raw_text_input_docs/multisig-tutorial.md"]]], [["User:: I'm trying to create a new currency on the Verus network using the command line. Can you walk me through the process?", "AI Assistant:: To define a new currency on the Verus network, you can use the `definecurrency` command with the following format:\n\n```\n./verus -chain=VRSCTEST definecurrency '{\n\"name\":\"MyUSDC\",\n\"options\":32,\n\"systemid\":\"veth\",\n\"parent\":\"vrsctest\",\n\"launchsystemid\":\"vrsctest\",\n\"nativecurrencyid\":{\n\"type\":9,\n\"address\":\"0x98339D8C260052B7ad81c28c16C0b98420f2B46a\"\n},\n\"initialsupply\":0,\n\"proofprotocol\":3\n}'\n```\n\nThis command defines a new currency called \"MyUSDC\" with specific properties such as its name, options, system ID, parent chain, and native currency ID. Do you have any questions about this command or its parameters?", "User:: No, I think I understand that. But what do I do with the HEX returned after defining a new currency?", "AI Assistant:: After defining a new currency, you will receive a HEX code as a response. You need to use this HEX code to launch the currency on the network by running the following command:\n\n```\n./verus -chain=VRSCTEST sendrawtransaction \"HEX\"\n```\n\nReplace \"HEX\" with the actual HEX code you received. This will launch the currency on the network, and you will need to wait a few blocks for it to become available. Does that make sense?"], "AI Assistant", "", "N/A", [["How do I define a new currency on the Verus network using the command line?", "To define a new currency on the Verus network, you can use the `definecurrency` command with the following format:\n\n```\n./verus -chain=VRSCTEST definecurrency '{\n  \"name\":\"MyUSDC\", \n  \"options\":32, \n  \"systemid\":\"veth\", \n  \"parent\":\"vrsctest\", \n  \"launchsystemid\":\"vrsctest\", \n  \"nativecurrencyid\":{\n    \"type\":9, \n    \"address\":\"0x98339D8C260052B7ad81c28c16C0b98420f2B46a\"\n  }, \n  \"initialsupply\":0, \n  \"proofprotocol\":3\n}'\n```\n\nThis command defines a new currency called \"MyUSDC\" with specific properties such as its name, options, system ID, parent chain, and native currency ID.", "``` json\n./verus -chain=VRSCTEST definecurrency '{\n  \"name\":\"MyUSDC\", \n  \"options\":32, \n  \"systemid\":\"veth\", \n  \"parent\":\"vrsctest\", \n  \"launchsystemid\":\"vrsctest\", \n  \"nativecurrencyid\":{\n    \"type\":9, \n    \"address\":\"0x98339D8C260052B7ad81c28c16C0b98420f2B46a\"\n  }, \n  \"initialsupply\":0, \n  \"proofprotocol\":3\n}'\n```\n\nAfter we put in the command, we get returned a HEX. We use this HEX to launch the currency on the network. Use the command below to launch the currency:\n\n``` json\n./verus -chain=VRSCTEST sendrawtransaction \"HEX\"\n```\n\nNow we have to wait a few blocks for the currency to be available on the network.\n\n### Export to Ethereum\nThe last step is to export the currency to Ethereum so we can see it there too. [\ud83d\udc49 Read it here](/currencies/export-to-eth/)", "./raw_text_input_docs/mapping-1:1-eth.md"], ["What do I do with the HEX returned after defining a new currency?", "After defining a new currency, you will receive a HEX code as a response. You need to use this HEX code to launch the currency on the network by running the following command:\n\n```\n./verus -chain=VRSCTEST sendrawtransaction \"HEX\"\n```\n\nThis will launch the currency on the network, and you will need to wait a few blocks for it to become available.", "``` json\n./verus -chain=VRSCTEST definecurrency '{\n  \"name\":\"MyUSDC\", \n  \"options\":32, \n  \"systemid\":\"veth\", \n  \"parent\":\"vrsctest\", \n  \"launchsystemid\":\"vrsctest\", \n  \"nativecurrencyid\":{\n    \"type\":9, \n    \"address\":\"0x98339D8C260052B7ad81c28c16C0b98420f2B46a\"\n  }, \n  \"initialsupply\":0, \n  \"proofprotocol\":3\n}'\n```\n\nAfter we put in the command, we get returned a HEX. We use this HEX to launch the currency on the network. Use the command below to launch the currency:\n\n``` json\n./verus -chain=VRSCTEST sendrawtransaction \"HEX\"\n```\n\nNow we have to wait a few blocks for the currency to be available on the network.\n\n### Export to Ethereum\nThe last step is to export the currency to Ethereum so we can see it there too. [\ud83d\udc49 Read it here](/currencies/export-to-eth/)", "./raw_text_input_docs/mapping-1:1-eth.md"]]], [["User:: I'm new to Verus and I'm trying to understand what VerusIDs are all about. Can you explain what VerusIDs are, and what can they be bound to?", "AI Assistant:: VerusIDs are digital identities that can be bound to various things, including individuals, other VerusIDs, content, data, and provable information. They can also hold funds and serve as personal profiles, corporate websites, or government portals. They're really versatile and can be used in many different ways.", "User:: That's interesting. What makes VerusIDs more than just identities or NFTs?", "AI Assistant:: VerusIDs are more than just identities or NFTs because they can hold funds, be revoked and recovered, set time locks, and be controlled by multiple identities. They also allow for signing and verifying data, files, and messages, and have added privacy features through z-addresses. They're really powerful and offer a lot of functionality.", "User:: I've heard that VerusIDs are important for creating PBaaS-chains, tokens, and currencies on the Verus blockchain. Can you explain the significance of a VerusID in this context?", "AI Assistant:: A VerusID is necessary to create PBaaS-chains, tokens, and currencies on the Verus blockchain. The name assigned to the VerusID is also the name of the PBaaS-chain, token, or currency. Additionally, each PBaaS-chain has standard VerusID support, and creators of these chains can assign the costs of identities themselves, which will be paid in the native coin of the PBaaS-chain. So, VerusIDs are a fundamental building block for creating new blockchain-based assets and ecosystems.", "User:: That makes sense. Can I choose a friendly name for my VerusID, and are there any restrictions on the characters I can use?", "AI Assistant:: Yes, each VerusID can have an easy-to-remember name chosen by the user. And, all characters from all character sets are available to create a VerusID, except for a few restricted characters (/ : *? \" < > | @.). So, you can choose a name that's easy for you to remember and that fits your needs.", "User:: Finally, how do VerusIDs support worldwide adoption?", "AI Assistant:: VerusIDs support worldwide adoption by allowing users to create identities with characters from all character sets, making it easier for people from different regions and languages to create and use VerusIDs. This means that people from all over the world can easily create and use VerusIDs, regardless of their language or region."], "AI Assistant", "", "N/A", [["What are VerusIDs, and what can they be bound to?", "VerusIDs are digital identities that can be bound to various things, including individuals, other VerusIDs, content, data, and provable information. They can also hold funds and serve as personal profiles, corporate websites, or government portals.", "VerusIDs can be anything you want. They can be bound digitally to many things. They can be bound to you, or other VerusIDs they have authority or ownership of. They can be bound to an unlimited amount of content, data, and provable information, both public and private. Including provable contracts and rights that can be bound to ownership of the VerusID itself.VerusIDs can hold funds. They can be personal profiles, corporate websites, or government portals. VerusIDs are much more than identities or today's NFTs. They are owned assets of all kinds on the Verus blockchain.A VerusID can be revoked and recovered, set (time)locks and can be controlled by any number of identities. Sign and verify data, files and messages. VerusID has privacy through added z-addresses and can send and receive messages. Identities can communicate in standardized ways through the novel [Verus Data Exchange Format (VDXF)](/vdxf/README).## Real Estate\nA VerusID is **premium** real estate on the Verus blockchain. To create PBaaS-chains, tokens and currencies on the Verus blockchain, a VerusID is necessary. The name you assign to the VerusID is also the name of the PBaaS-chain, token or currency.Each PBaaS-chain has standard VerusID support and creators of these chains can assign the costs of identites themselves. The costs will then be paid in the native coin of the PBaaS-chain.## Friendly Name\nEach VerusID can have an easy to remember name, chosen by the user. It has never been easier to send and receive funds.::: tip Supporting Worldwide Adoption\nAll characters from **all character sets** (except ``/`` ``:`` ``*`` ``?`` ``\"`` ``<`` ``>`` ``|`` ``@`` ``.`` ) are available to create a VerusID.\n:::", "./raw_text_input_docs/README_addresses.md"], ["What makes VerusIDs more than just identities or NFTs?", "VerusIDs are more than just identities or NFTs because they can hold funds, be revoked and recovered, set time locks, and be controlled by multiple identities. They also allow for signing and verifying data, files, and messages, and have added privacy features through z-addresses.", "VerusIDs can be anything you want. They can be bound digitally to many things. They can be bound to you, or other VerusIDs they have authority or ownership of. They can be bound to an unlimited amount of content, data, and provable information, both public and private. Including provable contracts and rights that can be bound to ownership of the VerusID itself.VerusIDs can hold funds. They can be personal profiles, corporate websites, or government portals. VerusIDs are much more than identities or today's NFTs. They are owned assets of all kinds on the Verus blockchain.A VerusID can be revoked and recovered, set (time)locks and can be controlled by any number of identities. Sign and verify data, files and messages. VerusID has privacy through added z-addresses and can send and receive messages. Identities can communicate in standardized ways through the novel [Verus Data Exchange Format (VDXF)](/vdxf/README).## Real Estate\nA VerusID is **premium** real estate on the Verus blockchain. To create PBaaS-chains, tokens and currencies on the Verus blockchain, a VerusID is necessary. The name you assign to the VerusID is also the name of the PBaaS-chain, token or currency.Each PBaaS-chain has standard VerusID support and creators of these chains can assign the costs of identites themselves. The costs will then be paid in the native coin of the PBaaS-chain.## Friendly Name\nEach VerusID can have an easy to remember name, chosen by the user. It has never been easier to send and receive funds.::: tip Supporting Worldwide Adoption\nAll characters from **all character sets** (except ``/`` ``:`` ``*`` ``?`` ``\"`` ``<`` ``>`` ``|`` ``@`` ``.`` ) are available to create a VerusID.\n:::", "./raw_text_input_docs/README_addresses.md"], ["What is the significance of a VerusID in creating PBaaS-chains, tokens, and currencies on the Verus blockchain?", "A VerusID is necessary to create PBaaS-chains, tokens, and currencies on the Verus blockchain. The name assigned to the VerusID is also the name of the PBaaS-chain, token, or currency. Additionally, each PBaaS-chain has standard VerusID support, and creators of these chains can assign the costs of identities themselves, which will be paid in the native coin of the PBaaS-chain.", "VerusIDs can be anything you want. They can be bound digitally to many things. They can be bound to you, or other VerusIDs they have authority or ownership of. They can be bound to an unlimited amount of content, data, and provable information, both public and private. Including provable contracts and rights that can be bound to ownership of the VerusID itself.VerusIDs can hold funds. They can be personal profiles, corporate websites, or government portals. VerusIDs are much more than identities or today's NFTs. They are owned assets of all kinds on the Verus blockchain.A VerusID can be revoked and recovered, set (time)locks and can be controlled by any number of identities. Sign and verify data, files and messages. VerusID has privacy through added z-addresses and can send and receive messages. Identities can communicate in standardized ways through the novel [Verus Data Exchange Format (VDXF)](/vdxf/README).## Real Estate\nA VerusID is **premium** real estate on the Verus blockchain. To create PBaaS-chains, tokens and currencies on the Verus blockchain, a VerusID is necessary. The name you assign to the VerusID is also the name of the PBaaS-chain, token or currency.Each PBaaS-chain has standard VerusID support and creators of these chains can assign the costs of identites themselves. The costs will then be paid in the native coin of the PBaaS-chain.## Friendly Name\nEach VerusID can have an easy to remember name, chosen by the user. It has never been easier to send and receive funds.::: tip Supporting Worldwide Adoption\nAll characters from **all character sets** (except ``/`` ``:`` ``*`` ``?`` ``\"`` ``<`` ``>`` ``|`` ``@`` ``.`` ) are available to create a VerusID.\n:::", "./raw_text_input_docs/README_addresses.md"], ["Can I choose a friendly name for my VerusID, and are there any restrictions on the characters I can use?", "Yes, each VerusID can have an easy-to-remember name chosen by the user. Additionally, all characters from all character sets are available to create a VerusID, except for a few restricted characters (/ : *? \" < > | @.).", "VerusIDs can be anything you want. They can be bound digitally to many things. They can be bound to you, or other VerusIDs they have authority or ownership of. They can be bound to an unlimited amount of content, data, and provable information, both public and private. Including provable contracts and rights that can be bound to ownership of the VerusID itself.VerusIDs can hold funds. They can be personal profiles, corporate websites, or government portals. VerusIDs are much more than identities or today's NFTs. They are owned assets of all kinds on the Verus blockchain.A VerusID can be revoked and recovered, set (time)locks and can be controlled by any number of identities. Sign and verify data, files and messages. VerusID has privacy through added z-addresses and can send and receive messages. Identities can communicate in standardized ways through the novel [Verus Data Exchange Format (VDXF)](/vdxf/README).## Real Estate\nA VerusID is **premium** real estate on the Verus blockchain. To create PBaaS-chains, tokens and currencies on the Verus blockchain, a VerusID is necessary. The name you assign to the VerusID is also the name of the PBaaS-chain, token or currency.Each PBaaS-chain has standard VerusID support and creators of these chains can assign the costs of identites themselves. The costs will then be paid in the native coin of the PBaaS-chain.## Friendly Name\nEach VerusID can have an easy to remember name, chosen by the user. It has never been easier to send and receive funds.::: tip Supporting Worldwide Adoption\nAll characters from **all character sets** (except ``/`` ``:`` ``*`` ``?`` ``\"`` ``<`` ``>`` ``|`` ``@`` ``.`` ) are available to create a VerusID.\n:::", "./raw_text_input_docs/README_addresses.md"], ["How do VerusIDs support worldwide adoption?", "VerusIDs support worldwide adoption by allowing users to create identities with characters from all character sets, making it easier for people from different regions and languages to create and use VerusIDs.", "VerusIDs can be anything you want. They can be bound digitally to many things. They can be bound to you, or other VerusIDs they have authority or ownership of. They can be bound to an unlimited amount of content, data, and provable information, both public and private. Including provable contracts and rights that can be bound to ownership of the VerusID itself.VerusIDs can hold funds. They can be personal profiles, corporate websites, or government portals. VerusIDs are much more than identities or today's NFTs. They are owned assets of all kinds on the Verus blockchain.A VerusID can be revoked and recovered, set (time)locks and can be controlled by any number of identities. Sign and verify data, files and messages. VerusID has privacy through added z-addresses and can send and receive messages. Identities can communicate in standardized ways through the novel [Verus Data Exchange Format (VDXF)](/vdxf/README).## Real Estate\nA VerusID is **premium** real estate on the Verus blockchain. To create PBaaS-chains, tokens and currencies on the Verus blockchain, a VerusID is necessary. The name you assign to the VerusID is also the name of the PBaaS-chain, token or currency.Each PBaaS-chain has standard VerusID support and creators of these chains can assign the costs of identites themselves. The costs will then be paid in the native coin of the PBaaS-chain.## Friendly Name\nEach VerusID can have an easy to remember name, chosen by the user. It has never been easier to send and receive funds.::: tip Supporting Worldwide Adoption\nAll characters from **all character sets** (except ``/`` ``:`` ``*`` ``?`` ``\"`` ``<`` ``>`` ``|`` ``@`` ``.`` ) are available to create a VerusID.\n:::", "./raw_text_input_docs/README_addresses.md"]]], [["User:: Hey, I need some help with unlocking in Verus. What do I need to know to request an unlock?", "AI Assistant:: To request an unlock in Verus, you need to know the current block height of the blockchain. That's the key piece of information you'll need to provide.", "User:: Okay, got it. So how do I specify the block height when requesting an unlock?", "AI Assistant:: When requesting an unlock, you can specify the block height under \"unlockatblock\" by filling in the current block height minus 1. Alternatively, you can fill in 0 to immediately request an unlock. Just to clarify, if you want to unlock at the current block height, you'd set \"unlockatblock\" to the current height minus 1.", "User:: Alright, that makes sense. How can I request an unlock in Verus using the command line interface?", "AI Assistant:: You can request an unlock in Verus by running the `setidentitytimelock` command with the appropriate parameters. For example:\n```\nrun setidentitytimelock \"myid@\"\n'{\n\"unlockatblock\":0\n}'\n```\nThis command requests an unlock for the identity \"myid@\" at the current block height (by setting \"unlockatblock\" to 0). Just replace \"myid@\" with your actual identity, and you're good to go! Do you have any more questions about unlocking in Verus?"], "AI Assistant", "", "N/A", [["What do I need to know to request an unlock in Verus?", "To request an unlock in Verus, you need to know the current block height of the blockchain.", "To request an unlock you need to know the blockheight of the blockchain. Under ``unlockatblock`` you can fill in whatever the current blockheight is minus 1. So if the blockheight is at 1,000,000 you can fill in ``999999`` or just ``0`` (recommended) to immediately request an unlock.\n\n``` json\nrun setidentitytimelock \"myid@\" \n'{\n  \"unlockatblock\":0\n}'\n```\n\nYou can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs.", "./raw_text_input_docs/setup-vault-v2.md"], ["How do I specify the block height when requesting an unlock in Verus?", "When requesting an unlock, you can specify the block height under \"unlockatblock\" by filling in the current block height minus 1. Alternatively, you can fill in 0 to immediately request an unlock.", "To request an unlock you need to know the blockheight of the blockchain. Under ``unlockatblock`` you can fill in whatever the current blockheight is minus 1. So if the blockheight is at 1,000,000 you can fill in ``999999`` or just ``0`` (recommended) to immediately request an unlock.\n\n``` json\nrun setidentitytimelock \"myid@\" \n'{\n  \"unlockatblock\":0\n}'\n```\n\nYou can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs.", "./raw_text_input_docs/setup-vault-v2.md"], ["How can I request an unlock in Verus using the command line interface?", "You can request an unlock in Verus by running the `setidentitytimelock` command with the appropriate parameters. For example:\n```\nrun setidentitytimelock \"myid@\" \n'{\n  \"unlockatblock\":0\n}'\n```\nThis command requests an unlock for the identity \"myid@\" at the current block height (by setting \"unlockatblock\" to 0).", "To request an unlock you need to know the blockheight of the blockchain. Under ``unlockatblock`` you can fill in whatever the current blockheight is minus 1. So if the blockheight is at 1,000,000 you can fill in ``999999`` or just ``0`` (recommended) to immediately request an unlock.\n\n``` json\nrun setidentitytimelock \"myid@\" \n'{\n  \"unlockatblock\":0\n}'\n```\n\nYou can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs.", "./raw_text_input_docs/setup-vault-v2.md"]]], [["User:: I'm trying to learn more about the Verus protocol. Can you tell me what are the key characteristics of Verus as a decentralized public blockchain?", "AI Assistant:: Verus is open, borderless, public, neutral, and censorship-resistant. Anyone can participate and contribute, regardless of who they are or where they come from. Does that help? Do you have any other questions about Verus?", "User:: That sounds really interesting. How can I participate in the Verus Protocol?", "AI Assistant:: Anyone can start mining and staking the Verus Protocol. Mobile phones and ARMs (e.g. Orange Pi 5) are energy-efficient devices to mine Verus with. To stake, there are no minimum requirements or locking of funds. It's pretty easy to get started!", "User:: I've heard that Verus had a fair launch. What does that mean exactly?", "AI Assistant:: Verus had a fair launch, meaning that everyone had, and still has, equal opportunity to collect its currency through mining and staking. This is characterized by the absence of an ICO, founder or developer fees/tax, premine, commercial interests, and rent-seeking behavior. It's a truly community-driven project.", "User:: How did the team announce the launch of the Verus blockchain?", "AI Assistant:: The launch of the Verus blockchain was announced on the Bitcointalk.org forum 15 minutes before the first block could be mined. It was a pretty low-key affair, but it's been growing ever since.", "User:: Finally, where can I see the distribution of Verus coins?", "AI Assistant:: You can take a look at the rich list to see the coin distribution. It's all transparent and publicly available."], "AI Assistant", "", "N/A", [["What are the key characteristics of Verus as a decentralized public blockchain?", "Verus is open, borderless, public, neutral, and censorship-resistant. Anyone can participate and contribute, regardless of who they are or where they come from.", "## Decentralized & community-built\nVerus is a decentralized public blockchain, a community driven project in the true spirit of Bitcoin. Anyone can participate and contribute, no matter who you are or where you come from. Verus is:\n* **Open**\n* **Borderless**\n* **Public**\n* **Neutral**\n* **Censorship resistant**\n\nAnyone can start mining and staking the Verus Protocol. Mobile phones and ARMs (e.g. Orange Pi 5) are the most energy efficient devices to mine Verus (and 22 other PBaaS-chains) with. To stake there are no minimum requirements or locking of funds.\n\nThere is no company behind Verus, it is community-built. All protocol fees go to the block producers of the network (the miners and stakers).\n\nThese characteristics that anyone can participate in the Verus Protocol makes it one of the most decentralized networks worldwide.\n\n## Fair launch\nVerus had a fair launch, meaning that everyone had, and still has equal opportunity to collect its currency through mining and staking. For Verus this means:\n* **No ICO has been held**\n* **No founder or developer fees/tax**\n* **No premine**\n* **No commercial interests**\n* **No rent-seeking behavior**\n\nThe launch of the Verus blockchain was announced on the Bitcointalk.org forum [See post](https://bitcointalk.org/index.php?topic=4070404.0) 15 minutes before the first block could be mined.\n\n::: tip Rich List\n[Take a look at the richlist to see coin distribution.](https://dexstats.info/richlist.php?asset=VRSC) \n:::", "./raw_text_input_docs/README_overview.md"], ["How can I participate in the Verus Protocol?", "Anyone can start mining and staking the Verus Protocol. Mobile phones and ARMs (e.g. Orange Pi 5) are energy-efficient devices to mine Verus with. To stake, there are no minimum requirements or locking of funds.", "## Decentralized & community-built\nVerus is a decentralized public blockchain, a community driven project in the true spirit of Bitcoin. Anyone can participate and contribute, no matter who you are or where you come from. Verus is:\n* **Open**\n* **Borderless**\n* **Public**\n* **Neutral**\n* **Censorship resistant**\n\nAnyone can start mining and staking the Verus Protocol. Mobile phones and ARMs (e.g. Orange Pi 5) are the most energy efficient devices to mine Verus (and 22 other PBaaS-chains) with. To stake there are no minimum requirements or locking of funds.\n\nThere is no company behind Verus, it is community-built. All protocol fees go to the block producers of the network (the miners and stakers).\n\nThese characteristics that anyone can participate in the Verus Protocol makes it one of the most decentralized networks worldwide.\n\n## Fair launch\nVerus had a fair launch, meaning that everyone had, and still has equal opportunity to collect its currency through mining and staking. For Verus this means:\n* **No ICO has been held**\n* **No founder or developer fees/tax**\n* **No premine**\n* **No commercial interests**\n* **No rent-seeking behavior**\n\nThe launch of the Verus blockchain was announced on the Bitcointalk.org forum [See post](https://bitcointalk.org/index.php?topic=4070404.0) 15 minutes before the first block could be mined.\n\n::: tip Rich List\n[Take a look at the richlist to see coin distribution.](https://dexstats.info/richlist.php?asset=VRSC) \n:::", "./raw_text_input_docs/README_overview.md"], ["What does it mean that Verus had a fair launch?", "Verus had a fair launch, meaning that everyone had, and still has, equal opportunity to collect its currency through mining and staking. This is characterized by the absence of an ICO, founder or developer fees/tax, premine, commercial interests, and rent-seeking behavior.", "## Decentralized & community-built\nVerus is a decentralized public blockchain, a community driven project in the true spirit of Bitcoin. Anyone can participate and contribute, no matter who you are or where you come from. Verus is:\n* **Open**\n* **Borderless**\n* **Public**\n* **Neutral**\n* **Censorship resistant**\n\nAnyone can start mining and staking the Verus Protocol. Mobile phones and ARMs (e.g. Orange Pi 5) are the most energy efficient devices to mine Verus (and 22 other PBaaS-chains) with. To stake there are no minimum requirements or locking of funds.\n\nThere is no company behind Verus, it is community-built. All protocol fees go to the block producers of the network (the miners and stakers).\n\nThese characteristics that anyone can participate in the Verus Protocol makes it one of the most decentralized networks worldwide.\n\n## Fair launch\nVerus had a fair launch, meaning that everyone had, and still has equal opportunity to collect its currency through mining and staking. For Verus this means:\n* **No ICO has been held**\n* **No founder or developer fees/tax**\n* **No premine**\n* **No commercial interests**\n* **No rent-seeking behavior**\n\nThe launch of the Verus blockchain was announced on the Bitcointalk.org forum [See post](https://bitcointalk.org/index.php?topic=4070404.0) 15 minutes before the first block could be mined.\n\n::: tip Rich List\n[Take a look at the richlist to see coin distribution.](https://dexstats.info/richlist.php?asset=VRSC) \n:::", "./raw_text_input_docs/README_overview.md"], ["How was the launch of the Verus blockchain announced?", "The launch of the Verus blockchain was announced on the Bitcointalk.org forum 15 minutes before the first block could be mined.", "## Decentralized & community-built\nVerus is a decentralized public blockchain, a community driven project in the true spirit of Bitcoin. Anyone can participate and contribute, no matter who you are or where you come from. Verus is:\n* **Open**\n* **Borderless**\n* **Public**\n* **Neutral**\n* **Censorship resistant**\n\nAnyone can start mining and staking the Verus Protocol. Mobile phones and ARMs (e.g. Orange Pi 5) are the most energy efficient devices to mine Verus (and 22 other PBaaS-chains) with. To stake there are no minimum requirements or locking of funds.\n\nThere is no company behind Verus, it is community-built. All protocol fees go to the block producers of the network (the miners and stakers).\n\nThese characteristics that anyone can participate in the Verus Protocol makes it one of the most decentralized networks worldwide.\n\n## Fair launch\nVerus had a fair launch, meaning that everyone had, and still has equal opportunity to collect its currency through mining and staking. For Verus this means:\n* **No ICO has been held**\n* **No founder or developer fees/tax**\n* **No premine**\n* **No commercial interests**\n* **No rent-seeking behavior**\n\nThe launch of the Verus blockchain was announced on the Bitcointalk.org forum [See post](https://bitcointalk.org/index.php?topic=4070404.0) 15 minutes before the first block could be mined.\n\n::: tip Rich List\n[Take a look at the richlist to see coin distribution.](https://dexstats.info/richlist.php?asset=VRSC) \n:::", "./raw_text_input_docs/README_overview.md"], ["Where can I see the distribution of Verus coins?", "You can take a look at the rich list to see the coin distribution.", "## Decentralized & community-built\nVerus is a decentralized public blockchain, a community driven project in the true spirit of Bitcoin. Anyone can participate and contribute, no matter who you are or where you come from. Verus is:\n* **Open**\n* **Borderless**\n* **Public**\n* **Neutral**\n* **Censorship resistant**\n\nAnyone can start mining and staking the Verus Protocol. Mobile phones and ARMs (e.g. Orange Pi 5) are the most energy efficient devices to mine Verus (and 22 other PBaaS-chains) with. To stake there are no minimum requirements or locking of funds.\n\nThere is no company behind Verus, it is community-built. All protocol fees go to the block producers of the network (the miners and stakers).\n\nThese characteristics that anyone can participate in the Verus Protocol makes it one of the most decentralized networks worldwide.\n\n## Fair launch\nVerus had a fair launch, meaning that everyone had, and still has equal opportunity to collect its currency through mining and staking. For Verus this means:\n* **No ICO has been held**\n* **No founder or developer fees/tax**\n* **No premine**\n* **No commercial interests**\n* **No rent-seeking behavior**\n\nThe launch of the Verus blockchain was announced on the Bitcointalk.org forum [See post](https://bitcointalk.org/index.php?topic=4070404.0) 15 minutes before the first block could be mined.\n\n::: tip Rich List\n[Take a look at the richlist to see coin distribution.](https://dexstats.info/richlist.php?asset=VRSC) \n:::", "./raw_text_input_docs/README_overview.md"]]], [["User:: Hi, I'm new to the world of blockchain and cryptocurrency. Can you tell me more about Verus? What is it, and what are its main features?", "AI Assistant:: Verus is an open-source, decentralized blockchain protocol that uses both proof-of-work and proof-of-stake as its consensus mechanism. It offers rent-free blockchain tools for creators and organizations to build products, services, and systems. Verus is a multichain protocol that focuses on scalability, security, and decentralization, and can scale to meet global demand. It is also 51% hash attack resistant and community-built, with all coins in circulation being fairly mined and staked.", "User:: That sounds really interesting. I've heard of Public Blockchains as a Service (PBaaS) in relation to Verus. Can you explain what that is?", "AI Assistant:: Public Blockchains as a Service (PBaaS) is a feature of the Verus protocol that allows anyone to launch scalable, fully interoperable, customizable, and independent blockchains for public or private use. This enables the creation of tokens, basket currencies, and liquidity pools on top of these blockchains for various use cases. PBaaS also provides protocol-level built-in DeFi and smart launch options.", "User:: I've also heard of VerusID. What's the significance of that in the Verus multichain protocol?", "AI Assistant:: VerusID is a protocol-level self-sovereign digital identity and namespace that is at the center of the Verus multichain protocol. It provides builders, communities, businesses, and organizations with tools that have never been seen before, enabling them to create and manage their own digital identities and namespaces.", "User:: That sounds really powerful. What's the benefit of using the Verus protocol for deploying blockchains and tokens?", "AI Assistant:: The Verus protocol allows for low-cost, rapid, and easy deployment of blockchains, tokens, liquidity pools, identities, and more, without requiring coding knowledge. This is achieved through simple API commands, which saves money on expensive blockchain developers and infrastructure."], "AI Assistant", "", "N/A", [["What is Verus, and what are its main features?", "Verus is an open-source, decentralized blockchain protocol that uses both proof-of-work and proof-of-stake as its consensus mechanism. It offers rent-free blockchain tools for creators and organizations to build products, services, and systems. Verus is a multichain protocol that focuses on scalability, security, and decentralization, and can scale to meet global demand. It is also 51% hash attack resistant and community-built, with all coins in circulation being fairly mined and staked.", "# Introduction to VerusWelcome to the Verus documentation. Here you find all mainnet and testnet protocol features and implementations. The documentation will be updated continuously.## Open-source, rent-free, scalable public infrastructure\nVerus is an open-source, [fairly launched](/overview/#fair-launch), decentralized blockchain protocol with proof-of-work and proof-of-stake as its consensus mechanism. It offers rent-free blockchain tools for creators and organizations to build products, services and systems.Verus is a multichain protocol with strong focus on scalability, security and decentralization. It can scale to world demand, is proven 51% hash attack resistant and is community built - all coins in circulation are fairly mined and staked.With Public Blockchains as a Service (PBaaS) anyone can launch scalable, fully interoperable, customizable and independent blockchains for public or private use. Launch tokens & basket currencies (e.g. liquidity pools) on top of blockchains for any use case. Get funding and create markets with protocol level built-in DeFi and smart launch options.Protocol-level self-sovereign digital identities and namespaces ([VerusID](/verusid/)) are at the center of the Verus multichain protocol. Giving builders, communities, businesses and organizations tools never before seen.Everything happening on the Verus multichain protocol has aligned incentives with the [miners and stakers](/economy/) of the worldwide network. This makes it one of the most secure protocols with opportunities to earn.## Low-cost, rapid & easy deployment\nLaunch blockchains, tokens, liquidity pools, identities and much more without any coding needed, just simple API commands. Save money on expensive blockchain (Solidity) developers & infrastructure with the rent-free Verus Protocol.", "./raw_text_input_docs/README_overview.md"], ["What is Public Blockchains as a Service (PBaaS), and how does it relate to Verus?", "Public Blockchains as a Service (PBaaS) is a feature of the Verus protocol that allows anyone to launch scalable, fully interoperable, customizable, and independent blockchains for public or private use. This enables the creation of tokens, basket currencies, and liquidity pools on top of these blockchains for various use cases. PBaaS also provides protocol-level built-in DeFi and smart launch options.", "# Introduction to VerusWelcome to the Verus documentation. Here you find all mainnet and testnet protocol features and implementations. The documentation will be updated continuously.## Open-source, rent-free, scalable public infrastructure\nVerus is an open-source, [fairly launched](/overview/#fair-launch), decentralized blockchain protocol with proof-of-work and proof-of-stake as its consensus mechanism. It offers rent-free blockchain tools for creators and organizations to build products, services and systems.Verus is a multichain protocol with strong focus on scalability, security and decentralization. It can scale to world demand, is proven 51% hash attack resistant and is community built - all coins in circulation are fairly mined and staked.With Public Blockchains as a Service (PBaaS) anyone can launch scalable, fully interoperable, customizable and independent blockchains for public or private use. Launch tokens & basket currencies (e.g. liquidity pools) on top of blockchains for any use case. Get funding and create markets with protocol level built-in DeFi and smart launch options.Protocol-level self-sovereign digital identities and namespaces ([VerusID](/verusid/)) are at the center of the Verus multichain protocol. Giving builders, communities, businesses and organizations tools never before seen.Everything happening on the Verus multichain protocol has aligned incentives with the [miners and stakers](/economy/) of the worldwide network. This makes it one of the most secure protocols with opportunities to earn.## Low-cost, rapid & easy deployment\nLaunch blockchains, tokens, liquidity pools, identities and much more without any coding needed, just simple API commands. Save money on expensive blockchain (Solidity) developers & infrastructure with the rent-free Verus Protocol.", "./raw_text_input_docs/README_overview.md"], ["What is the significance of VerusID in the Verus multichain protocol?", "VerusID is a protocol-level self-sovereign digital identity and namespace that is at the center of the Verus multichain protocol. It provides builders, communities, businesses, and organizations with tools that have never been seen before, enabling them to create and manage their own digital identities and namespaces.", "# Introduction to VerusWelcome to the Verus documentation. Here you find all mainnet and testnet protocol features and implementations. The documentation will be updated continuously.## Open-source, rent-free, scalable public infrastructure\nVerus is an open-source, [fairly launched](/overview/#fair-launch), decentralized blockchain protocol with proof-of-work and proof-of-stake as its consensus mechanism. It offers rent-free blockchain tools for creators and organizations to build products, services and systems.Verus is a multichain protocol with strong focus on scalability, security and decentralization. It can scale to world demand, is proven 51% hash attack resistant and is community built - all coins in circulation are fairly mined and staked.With Public Blockchains as a Service (PBaaS) anyone can launch scalable, fully interoperable, customizable and independent blockchains for public or private use. Launch tokens & basket currencies (e.g. liquidity pools) on top of blockchains for any use case. Get funding and create markets with protocol level built-in DeFi and smart launch options.Protocol-level self-sovereign digital identities and namespaces ([VerusID](/verusid/)) are at the center of the Verus multichain protocol. Giving builders, communities, businesses and organizations tools never before seen.Everything happening on the Verus multichain protocol has aligned incentives with the [miners and stakers](/economy/) of the worldwide network. This makes it one of the most secure protocols with opportunities to earn.## Low-cost, rapid & easy deployment\nLaunch blockchains, tokens, liquidity pools, identities and much more without any coding needed, just simple API commands. Save money on expensive blockchain (Solidity) developers & infrastructure with the rent-free Verus Protocol.", "./raw_text_input_docs/README_overview.md"], ["What is the benefit of using the Verus protocol for deploying blockchains and tokens?", "The Verus protocol allows for low-cost, rapid, and easy deployment of blockchains, tokens, liquidity pools, identities, and more, without requiring coding knowledge. This is achieved through simple API commands, which saves money on expensive blockchain developers and infrastructure.", "# Introduction to VerusWelcome to the Verus documentation. Here you find all mainnet and testnet protocol features and implementations. The documentation will be updated continuously.## Open-source, rent-free, scalable public infrastructure\nVerus is an open-source, [fairly launched](/overview/#fair-launch), decentralized blockchain protocol with proof-of-work and proof-of-stake as its consensus mechanism. It offers rent-free blockchain tools for creators and organizations to build products, services and systems.Verus is a multichain protocol with strong focus on scalability, security and decentralization. It can scale to world demand, is proven 51% hash attack resistant and is community built - all coins in circulation are fairly mined and staked.With Public Blockchains as a Service (PBaaS) anyone can launch scalable, fully interoperable, customizable and independent blockchains for public or private use. Launch tokens & basket currencies (e.g. liquidity pools) on top of blockchains for any use case. Get funding and create markets with protocol level built-in DeFi and smart launch options.Protocol-level self-sovereign digital identities and namespaces ([VerusID](/verusid/)) are at the center of the Verus multichain protocol. Giving builders, communities, businesses and organizations tools never before seen.Everything happening on the Verus multichain protocol has aligned incentives with the [miners and stakers](/economy/) of the worldwide network. This makes it one of the most secure protocols with opportunities to earn.## Low-cost, rapid & easy deployment\nLaunch blockchains, tokens, liquidity pools, identities and much more without any coding needed, just simple API commands. Save money on expensive blockchain (Solidity) developers & infrastructure with the rent-free Verus Protocol.", "./raw_text_input_docs/README_overview.md"]]], [["User:: I've been learning about Verus, and I came across something called \"destination types\" in Verus. Can you tell me more about them?", "AI Assistant:: In Verus, there are several destination types, each representing a specific type of destination for transactions or data. These include:\n\n* **DEST_INVALID (0)**: An invalid or unspecified destination type, used as a default or error state.\n* **DEST_PK (1)**: A public key destination, typically used for transactions directly to a public key.\n* **DEST_PKH (2)**: A public key hash destination, common in many blockchain platforms for sending transactions to a hashed version of a public key.\n* **DEST_SH (3)**: A script hash destination, used for transactions that should be processed by a specific script, enabling smart contracts or complex spending conditions.\n* **DEST_ID (4)**: A VerusID destination.\n* **DEST_FULLID (5)**: (no description provided)\n* **DEST_REGISTERCURRENCY (6)**: (no description provided)\n* **DEST_QUANTUM (7)**: Used for quantum-resistant addresses.\n* **DEST_NESTEDTRANSFER (8)**: (no description provided)\n* **DEST_ETH (9)**: Specifies an Ethereum account as the destination, facilitating cross-chain transactions with Ethereum.\n* **DEST_ETHNFT (10)**: Indicates a destination for an Ethereum-compatible Non-Fungible Token (NFT), enabling the mapping of NFTs across different blockchain systems.\n* **DEST_RAW (11)**: Represents a raw data destination, allowing for arbitrary data to be included as a destination, offering maximum flexibility.\n\nThese destination types allow for various transaction scenarios and interactions within the Verus ecosystem. Do you have any further questions about destination types or Verus in general?", "User:: Actually, yes, I do. What are flags in the context of Transfer Destination in Verus, and how are they used?", "AI Assistant:: In the context of Transfer Destination in Verus, flags are additional attributes that can be added to a destination to indicate specific properties or behaviors. Two flags are mentioned:\n\n* **FLAG_DEST_AUX (64)**: Indicates the presence of auxiliary destinations, allowing for the specification of additional destinations within a single Transfer Destination construct.\n* **FLAG_DEST_GATEWAY (128)**: Specifies that the destination is associated with a gateway, relevant for cross-chain transactions or interactions with external systems.\n\nThese flags can be used to provide additional context or functionality to a destination, enabling more complex and flexible transactions. They allow for greater customization and control over transaction flows within the Verus ecosystem. Does that help clarify the role of flags in Verus?"], "AI Assistant", "", "N/A", [["What are the different types of destination types in Verus, and what do they represent?", "In Verus, there are several destination types, each representing a specific type of destination for transactions or data. These include:\n\n* **DEST_INVALID (0)**: An invalid or unspecified destination type, used as a default or error state.\n* **DEST_PK (1)**: A public key destination, typically used for transactions directly to a public key.\n* **DEST_PKH (2)**: A public key hash destination, common in many blockchain platforms for sending transactions to a hashed version of a public key.\n* **DEST_SH (3)**: A script hash destination, used for transactions that should be processed by a specific script, enabling smart contracts or complex spending conditions.\n* **DEST_ID (4)**: A VerusID destination.\n* **DEST_FULLID (5)**: (no description provided)\n* **DEST_REGISTERCURRENCY (6)**: (no description provided)\n* **DEST_QUANTUM (7)**: Used for quantum-resistant addresses.\n* **DEST_NESTEDTRANSFER (8)**: (no description provided)\n* **DEST_ETH (9)**: Specifies an Ethereum account as the destination, facilitating cross-chain transactions with Ethereum.\n* **DEST_ETHNFT (10)**: Indicates a destination for an Ethereum-compatible Non-Fungible Token (NFT), enabling the mapping of NFTs across different blockchain systems.\n* **DEST_RAW (11)**: Represents a raw data destination, allowing for arbitrary data to be included as a destination, offering maximum flexibility.", "- **DEST_INVALID (0)**: Represents an invalid or unspecified destination type, used as a default or error state.\n- **DEST_PK (1)**: Indicates a public key destination, typically used for transactions directly to a public key.\n- **DEST_PKH (2)**: Stands for a public key hash destination, common in many blockchain platforms for sending transactions to a hashed version of a public key (e.g. an r-address).\n- **DEST_SH (3)**: Represents a script hash destination, used for transactions that should be processed by a specific script, enabling smart contracts or complex spending conditions.\n- **DEST_ID (4)**: Identifies a [**VerusID**](/verusid/) destination.\n- **DEST_FULLID (5)**:\n- **DEST_REGISTERCURRENCY (6)**:\n- **DEST_QUANTUM (7)**: Used for quantum-resistant addresses.\n- **DEST_NESTEDTRANSFER (8)**:\n- **DEST_ETH (9)**: Specifies an Ethereum account as the destination, facilitating cross-chain transactions with Ethereum.\n- **DEST_ETHNFT (10)**: Indicates a destination for an Ethereum-compatible Non-Fungible Token (NFT), enabling the mapping of NFTs across different blockchain systems.\n- **DEST_RAW (11)**: Represents a raw data destination, allowing for arbitrary data to be included as a destination, offering maximum flexibility.### FlagsTransfer Destination also supports the use of flags to indicate additional attributes of a destination:- **FLAG_DEST_AUX (64)**: Indicates the presence of auxiliary destinations, allowing for the specification of additional destinations within a single Transfer Destination construct.\n- **FLAG_DEST_GATEWAY (128)**: Specifies that the destination is associated with a gateway, relevant for cross-chain transactions or interactions with external systems.## Serialization and Deserialization Process", "./raw_text_input_docs/transfer-destination.md"], ["What are flags in the context of Transfer Destination in Verus, and how are they used?", "In the context of Transfer Destination in Verus, flags are additional attributes that can be added to a destination to indicate specific properties or behaviors. Two flags are mentioned:\n\n* **FLAG_DEST_AUX (64)**: Indicates the presence of auxiliary destinations, allowing for the specification of additional destinations within a single Transfer Destination construct.\n* **FLAG_DEST_GATEWAY (128)**: Specifies that the destination is associated with a gateway, relevant for cross-chain transactions or interactions with external systems.\n\nThese flags can be used to provide additional context or functionality to a destination, enabling more complex and flexible transactions.", "- **DEST_INVALID (0)**: Represents an invalid or unspecified destination type, used as a default or error state.\n- **DEST_PK (1)**: Indicates a public key destination, typically used for transactions directly to a public key.\n- **DEST_PKH (2)**: Stands for a public key hash destination, common in many blockchain platforms for sending transactions to a hashed version of a public key (e.g. an r-address).\n- **DEST_SH (3)**: Represents a script hash destination, used for transactions that should be processed by a specific script, enabling smart contracts or complex spending conditions.\n- **DEST_ID (4)**: Identifies a [**VerusID**](/verusid/) destination.\n- **DEST_FULLID (5)**:\n- **DEST_REGISTERCURRENCY (6)**:\n- **DEST_QUANTUM (7)**: Used for quantum-resistant addresses.\n- **DEST_NESTEDTRANSFER (8)**:\n- **DEST_ETH (9)**: Specifies an Ethereum account as the destination, facilitating cross-chain transactions with Ethereum.\n- **DEST_ETHNFT (10)**: Indicates a destination for an Ethereum-compatible Non-Fungible Token (NFT), enabling the mapping of NFTs across different blockchain systems.\n- **DEST_RAW (11)**: Represents a raw data destination, allowing for arbitrary data to be included as a destination, offering maximum flexibility.### FlagsTransfer Destination also supports the use of flags to indicate additional attributes of a destination:- **FLAG_DEST_AUX (64)**: Indicates the presence of auxiliary destinations, allowing for the specification of additional destinations within a single Transfer Destination construct.\n- **FLAG_DEST_GATEWAY (128)**: Specifies that the destination is associated with a gateway, relevant for cross-chain transactions or interactions with external systems.## Serialization and Deserialization Process", "./raw_text_input_docs/transfer-destination.md"]]], [["User:: Hey, I've been reading about Verus and I came across something called VDXF. What is the Verus Data eXchange Format (VDXF)?", "AI Assistant:: The Verus Data eXchange Format (VDXF) is a system for defining data types that can consist of structured or unstructured data, along with associated content or keys. It provides a fully interoperable system for exchanging information across different systems and programming languages. Would you like to know more about VDXF?", "User:: Yeah, that sounds interesting. What is the purpose of the VDXF object?", "AI Assistant:: The VDXF object is a structured data representation of the Verus Data eXchange Format, designed to facilitate the exchange of information across different systems and programming languages. It encapsulates data in a serialized byte format, making it interoperable and easy to transmit or store.", "User:: That makes sense. How does VDXF enable application developers to define and use data types?", "AI Assistant:: VDXF enables application developers to define globally unique data types and publish references to them. These data types can refer to structured or unstructured data that can be located unambiguously via a URL, which provides both location and decoding information. This allows applications to use the data, in whole or in part, while remaining compatible with the parts they understand.", "User:: What are VDXF type keys, and how are they used?", "AI Assistant:: VDXF type keys are globally unique identifiers, defined as human-readable names along with a specification of how to define and convert unlimited length, human-readable type names into collision-free 20-byte IDs. These IDs can be used as type keys associated with content or location values in various forms of data records.", "User:: How does VDXF facilitate interoperability across decentralized applications?", "AI Assistant:: VDXF facilitates interoperability across decentralized applications by providing a standardized format for exchanging data. This allows different applications to understand and use the data, even if they don't understand the entire data structure. The use of globally unique type keys and URLs to locate and decode data enables applications to work together seamlessly, even if they are developed independently. Does that help clarify things?"], "AI Assistant", "", "N/A", [["What is the Verus Data eXchange Format (VDXF)?", "The Verus Data eXchange Format (VDXF) is a system for defining data types that can consist of structured or unstructured data, along with associated content or keys. It provides a fully interoperable system for exchanging information across different systems and programming languages.", "# Verus Data eXchange Format (VDXF)The Verus Data Exchange Format provides a fully interoperable system for defining data types that may consist of structured or or unstructured data and associated content or keys that may be used to retrieve such data from centralized or decentralized storage for use in and across centralized or decentralized applications.The Verus Data eXchange Format (VDXF) object is a structured data representation of the Verus Data eXchange Format, designed to facilitate the exchange of information across different systems and programming languages. It encapsulates data in a serialized byte format, making it interoperable and easy to transmit or store. This document outlines the structure and functionality of a VDXF object, focusing on its serialized form rather than the methods used to manipulate it in any specific programming language.## OverviewThe Verus Data Exchange Format enables application developers to define globally unique data types and publish references to the same, which may refer to structured or unstructured data that can be located unambiguously via an URL, which implicitly provides both location and decoding information, enabling applications to use such data, in whole or in part, if they know how, or even ignore parts of the data, while remaining compatible with those parts they understand. VDXF typee keys are globally unique identifiers, which are defined as human readable names along with a specification of how to define and convert unlimited length, human readable type names into collison-free 20 byte IDs, which can be used as type keys associated with content or location values in various forms of data records. These data records, which may have application specific structures or no structure at all, besides length form the basis of an interoperable data exchange format across decentralized applications.", "./raw_text_input_docs/README_vdxf.md"], ["What is the purpose of the VDXF object?", "The VDXF object is a structured data representation of the Verus Data eXchange Format, designed to facilitate the exchange of information across different systems and programming languages. It encapsulates data in a serialized byte format, making it interoperable and easy to transmit or store.", "# Verus Data eXchange Format (VDXF)The Verus Data Exchange Format provides a fully interoperable system for defining data types that may consist of structured or or unstructured data and associated content or keys that may be used to retrieve such data from centralized or decentralized storage for use in and across centralized or decentralized applications.The Verus Data eXchange Format (VDXF) object is a structured data representation of the Verus Data eXchange Format, designed to facilitate the exchange of information across different systems and programming languages. It encapsulates data in a serialized byte format, making it interoperable and easy to transmit or store. This document outlines the structure and functionality of a VDXF object, focusing on its serialized form rather than the methods used to manipulate it in any specific programming language.## OverviewThe Verus Data Exchange Format enables application developers to define globally unique data types and publish references to the same, which may refer to structured or unstructured data that can be located unambiguously via an URL, which implicitly provides both location and decoding information, enabling applications to use such data, in whole or in part, if they know how, or even ignore parts of the data, while remaining compatible with those parts they understand. VDXF typee keys are globally unique identifiers, which are defined as human readable names along with a specification of how to define and convert unlimited length, human readable type names into collison-free 20 byte IDs, which can be used as type keys associated with content or location values in various forms of data records. These data records, which may have application specific structures or no structure at all, besides length form the basis of an interoperable data exchange format across decentralized applications.", "./raw_text_input_docs/README_vdxf.md"], ["How does VDXF enable application developers to define and use data types?", "VDXF enables application developers to define globally unique data types and publish references to them. These data types can refer to structured or unstructured data that can be located unambiguously via a URL, which provides both location and decoding information. This allows applications to use the data, in whole or in part, while remaining compatible with the parts they understand.", "# Verus Data eXchange Format (VDXF)The Verus Data Exchange Format provides a fully interoperable system for defining data types that may consist of structured or or unstructured data and associated content or keys that may be used to retrieve such data from centralized or decentralized storage for use in and across centralized or decentralized applications.The Verus Data eXchange Format (VDXF) object is a structured data representation of the Verus Data eXchange Format, designed to facilitate the exchange of information across different systems and programming languages. It encapsulates data in a serialized byte format, making it interoperable and easy to transmit or store. This document outlines the structure and functionality of a VDXF object, focusing on its serialized form rather than the methods used to manipulate it in any specific programming language.## OverviewThe Verus Data Exchange Format enables application developers to define globally unique data types and publish references to the same, which may refer to structured or unstructured data that can be located unambiguously via an URL, which implicitly provides both location and decoding information, enabling applications to use such data, in whole or in part, if they know how, or even ignore parts of the data, while remaining compatible with those parts they understand. VDXF typee keys are globally unique identifiers, which are defined as human readable names along with a specification of how to define and convert unlimited length, human readable type names into collison-free 20 byte IDs, which can be used as type keys associated with content or location values in various forms of data records. These data records, which may have application specific structures or no structure at all, besides length form the basis of an interoperable data exchange format across decentralized applications.", "./raw_text_input_docs/README_vdxf.md"], ["What are VDXF type keys, and how are they used?", "VDXF type keys are globally unique identifiers, defined as human-readable names along with a specification of how to define and convert unlimited length, human-readable type names into collision-free 20-byte IDs. These IDs can be used as type keys associated with content or location values in various forms of data records.", "# Verus Data eXchange Format (VDXF)The Verus Data Exchange Format provides a fully interoperable system for defining data types that may consist of structured or or unstructured data and associated content or keys that may be used to retrieve such data from centralized or decentralized storage for use in and across centralized or decentralized applications.The Verus Data eXchange Format (VDXF) object is a structured data representation of the Verus Data eXchange Format, designed to facilitate the exchange of information across different systems and programming languages. It encapsulates data in a serialized byte format, making it interoperable and easy to transmit or store. This document outlines the structure and functionality of a VDXF object, focusing on its serialized form rather than the methods used to manipulate it in any specific programming language.## OverviewThe Verus Data Exchange Format enables application developers to define globally unique data types and publish references to the same, which may refer to structured or unstructured data that can be located unambiguously via an URL, which implicitly provides both location and decoding information, enabling applications to use such data, in whole or in part, if they know how, or even ignore parts of the data, while remaining compatible with those parts they understand. VDXF typee keys are globally unique identifiers, which are defined as human readable names along with a specification of how to define and convert unlimited length, human readable type names into collison-free 20 byte IDs, which can be used as type keys associated with content or location values in various forms of data records. These data records, which may have application specific structures or no structure at all, besides length form the basis of an interoperable data exchange format across decentralized applications.", "./raw_text_input_docs/README_vdxf.md"], ["How does VDXF facilitate interoperability across decentralized applications?", "VDXF facilitates interoperability across decentralized applications by providing a standardized format for exchanging data. This allows different applications to understand and use the data, even if they don't understand the entire data structure. The use of globally unique type keys and URLs to locate and decode data enables applications to work together seamlessly, even if they are developed independently.", "# Verus Data eXchange Format (VDXF)The Verus Data Exchange Format provides a fully interoperable system for defining data types that may consist of structured or or unstructured data and associated content or keys that may be used to retrieve such data from centralized or decentralized storage for use in and across centralized or decentralized applications.The Verus Data eXchange Format (VDXF) object is a structured data representation of the Verus Data eXchange Format, designed to facilitate the exchange of information across different systems and programming languages. It encapsulates data in a serialized byte format, making it interoperable and easy to transmit or store. This document outlines the structure and functionality of a VDXF object, focusing on its serialized form rather than the methods used to manipulate it in any specific programming language.## OverviewThe Verus Data Exchange Format enables application developers to define globally unique data types and publish references to the same, which may refer to structured or unstructured data that can be located unambiguously via an URL, which implicitly provides both location and decoding information, enabling applications to use such data, in whole or in part, if they know how, or even ignore parts of the data, while remaining compatible with those parts they understand. VDXF typee keys are globally unique identifiers, which are defined as human readable names along with a specification of how to define and convert unlimited length, human readable type names into collison-free 20 byte IDs, which can be used as type keys associated with content or location values in various forms of data records. These data records, which may have application specific structures or no structure at all, besides length form the basis of an interoperable data exchange format across decentralized applications.", "./raw_text_input_docs/README_vdxf.md"]]], [["User:: Hey there, I've been playing around with Verus Desktop and I noticed something called Verus Vault. What is it, and what can I do with it?", "AI Assistant:: Verus Vault is a feature in Verus Desktop that allows you to lock funds in your VerusID. When funds are locked in the Vault, they cannot be spent anymore and are restricted to the VerusID. However, you can still stake and receive coins. There are two types of locks: TimeLock and DelayLock. Would you like to know more about those?", "User:: Yes, that sounds interesting. What are the two types of locks available in Verus Vault, and how do they work?", "AI Assistant:: The two types of locks available in Verus Vault are TimeLock and DelayLock. A TimeLock locks the funds and unlocks them until a predetermined number of blocks have passed. A DelayLock locks the funds and unlocks them with a delay, requiring an unlock request and a predetermined number of blocks to pass before the funds can be spent again. Do you have a specific use case in mind for these locks, or would you like to know more about how to set them up?", "User:: I think I understand the concepts. How can I set up a TimeLock on a VerusID using Verus Desktop?", "AI Assistant:: To set up a TimeLock on a VerusID using Verus Desktop, you need to access the command-line interface in Verus Desktop. Go to \"Settings\" (the cogwheel top right corner), then select \"Coin Settings\". Here, you can fill in the commands to set up your Vault. For a TimeLock, you need to know the block height of the blockchain and specify the number of blocks you want to lock your VerusID for. Have you tried setting up a TimeLock before, or would you like more guidance on the process?", "User:: I think I can handle the setup. But before I do, are there any considerations I should keep in mind when locking funds for a long period of time using Verus Vault?", "AI Assistant:: When locking funds for a long period of time using Verus Vault, it's best to take an average block time of 62 seconds into account. Additionally, you should be aware that there are variables that make it difficult to predict an exact time, such as leap years. Over the long term, there are an average of 1394.5484 blocks per day. It's essential to plan carefully and consider these factors to ensure you're locking your funds for the desired amount of time."], "AI Assistant", "", "N/A", [["What is Verus Vault and what can I do with it in Verus Desktop?", "Verus Vault is a feature in Verus Desktop that allows you to lock funds in your VerusID. When funds are locked in the Vault, they cannot be spent anymore and are restricted to the VerusID. However, you can still stake and receive coins. There are two types of locks: TimeLock and DelayLock.", "# Set up Verus Vault in Verus Desktop (flags)\n![image-vaulteasy](/images/lockfunds.png)\nVerus Vault is not yet accessible with clickable interfaces. You can still set up Vault in Verus Desktop. Here's how.What do you need:\n- Latest version Verus Desktop\n- VerusID (on the Verus mainchain, or when PBaaS is live on any other chain)With Verus Vault you can lock funds in your VerusID. When your funds are locked in the Vault you can not spend them anymore, they cannot leave the VerusID. You can still always continue to stake and receive coins.You can lock a VerusID in two different ways that cannot be circumvented by anyone, except the ``revocation and recovery authorities`` together.| Lock type | How it works | \n| - |:-----|:-----|\n| TimeLock | Locks the funds and unlocks until a predetermined number of blocks have passed. | \n| DelayLock | Locks the funds and unlocks with a delay. Funds can not be spent until an unlock has been requested + a predetermined number of blocks have passed. |### Get Started\nWe need to access the commandline interface in Verus Desktop. Go to ``settings`` (the cogwheel top right corner), then select ``Coin Settings``. Here we can fill in the commands to set up your Vault.## Vault with TimeLock\n![image-timelock](/images/timeock.png)\nNow let's put a Timelock on a VerusID. For a TimeLock you need to know the blockheight of the blockchain. Let's say the blockchain's blockheight is at ``1,000,000`` blocks. You want to lock your VerusID for 1 year. 1 year is ``508994`` blocks.::: warning Long-Term Locking\n**For long-term locking it's best to take an average block time of 62 seconds. Yet there are some variables that make it difficult to predict an exact time, leap years for example. Over long-term there are an average of 1394.5484 blocks per day.**\n:::", "./raw_text_input_docs/setup-vault.md"], ["What are the two types of locks available in Verus Vault, and how do they work?", "The two types of locks available in Verus Vault are TimeLock and DelayLock. A TimeLock locks the funds and unlocks them until a predetermined number of blocks have passed. A DelayLock locks the funds and unlocks them with a delay, requiring an unlock request and a predetermined number of blocks to pass before the funds can be spent again.", "# Set up Verus Vault in Verus Desktop (flags)\n![image-vaulteasy](/images/lockfunds.png)\nVerus Vault is not yet accessible with clickable interfaces. You can still set up Vault in Verus Desktop. Here's how.What do you need:\n- Latest version Verus Desktop\n- VerusID (on the Verus mainchain, or when PBaaS is live on any other chain)With Verus Vault you can lock funds in your VerusID. When your funds are locked in the Vault you can not spend them anymore, they cannot leave the VerusID. You can still always continue to stake and receive coins.You can lock a VerusID in two different ways that cannot be circumvented by anyone, except the ``revocation and recovery authorities`` together.| Lock type | How it works | \n| - |:-----|:-----|\n| TimeLock | Locks the funds and unlocks until a predetermined number of blocks have passed. | \n| DelayLock | Locks the funds and unlocks with a delay. Funds can not be spent until an unlock has been requested + a predetermined number of blocks have passed. |### Get Started\nWe need to access the commandline interface in Verus Desktop. Go to ``settings`` (the cogwheel top right corner), then select ``Coin Settings``. Here we can fill in the commands to set up your Vault.## Vault with TimeLock\n![image-timelock](/images/timeock.png)\nNow let's put a Timelock on a VerusID. For a TimeLock you need to know the blockheight of the blockchain. Let's say the blockchain's blockheight is at ``1,000,000`` blocks. You want to lock your VerusID for 1 year. 1 year is ``508994`` blocks.::: warning Long-Term Locking\n**For long-term locking it's best to take an average block time of 62 seconds. Yet there are some variables that make it difficult to predict an exact time, leap years for example. Over long-term there are an average of 1394.5484 blocks per day.**\n:::", "./raw_text_input_docs/setup-vault.md"], ["How can I set up a TimeLock on a VerusID using Verus Desktop?", "To set up a TimeLock on a VerusID using Verus Desktop, you need to access the command-line interface in Verus Desktop. Go to \"Settings\" (the cogwheel top right corner), then select \"Coin Settings\". Here, you can fill in the commands to set up your Vault. For a TimeLock, you need to know the block height of the blockchain and specify the number of blocks you want to lock your VerusID for.", "# Set up Verus Vault in Verus Desktop (flags)\n![image-vaulteasy](/images/lockfunds.png)\nVerus Vault is not yet accessible with clickable interfaces. You can still set up Vault in Verus Desktop. Here's how.What do you need:\n- Latest version Verus Desktop\n- VerusID (on the Verus mainchain, or when PBaaS is live on any other chain)With Verus Vault you can lock funds in your VerusID. When your funds are locked in the Vault you can not spend them anymore, they cannot leave the VerusID. You can still always continue to stake and receive coins.You can lock a VerusID in two different ways that cannot be circumvented by anyone, except the ``revocation and recovery authorities`` together.| Lock type | How it works | \n| - |:-----|:-----|\n| TimeLock | Locks the funds and unlocks until a predetermined number of blocks have passed. | \n| DelayLock | Locks the funds and unlocks with a delay. Funds can not be spent until an unlock has been requested + a predetermined number of blocks have passed. |### Get Started\nWe need to access the commandline interface in Verus Desktop. Go to ``settings`` (the cogwheel top right corner), then select ``Coin Settings``. Here we can fill in the commands to set up your Vault.## Vault with TimeLock\n![image-timelock](/images/timeock.png)\nNow let's put a Timelock on a VerusID. For a TimeLock you need to know the blockheight of the blockchain. Let's say the blockchain's blockheight is at ``1,000,000`` blocks. You want to lock your VerusID for 1 year. 1 year is ``508994`` blocks.::: warning Long-Term Locking\n**For long-term locking it's best to take an average block time of 62 seconds. Yet there are some variables that make it difficult to predict an exact time, leap years for example. Over long-term there are an average of 1394.5484 blocks per day.**\n:::", "./raw_text_input_docs/setup-vault.md"], ["What should I consider when locking funds for a long period of time using Verus Vault?", "When locking funds for a long period of time using Verus Vault, it's best to take an average block time of 62 seconds into account. Additionally, you should be aware that there are variables that make it difficult to predict an exact time, such as leap years. Over the long term, there are an average of 1394.5484 blocks per day.", "# Set up Verus Vault in Verus Desktop (flags)\n![image-vaulteasy](/images/lockfunds.png)\nVerus Vault is not yet accessible with clickable interfaces. You can still set up Vault in Verus Desktop. Here's how.What do you need:\n- Latest version Verus Desktop\n- VerusID (on the Verus mainchain, or when PBaaS is live on any other chain)With Verus Vault you can lock funds in your VerusID. When your funds are locked in the Vault you can not spend them anymore, they cannot leave the VerusID. You can still always continue to stake and receive coins.You can lock a VerusID in two different ways that cannot be circumvented by anyone, except the ``revocation and recovery authorities`` together.| Lock type | How it works | \n| - |:-----|:-----|\n| TimeLock | Locks the funds and unlocks until a predetermined number of blocks have passed. | \n| DelayLock | Locks the funds and unlocks with a delay. Funds can not be spent until an unlock has been requested + a predetermined number of blocks have passed. |### Get Started\nWe need to access the commandline interface in Verus Desktop. Go to ``settings`` (the cogwheel top right corner), then select ``Coin Settings``. Here we can fill in the commands to set up your Vault.## Vault with TimeLock\n![image-timelock](/images/timeock.png)\nNow let's put a Timelock on a VerusID. For a TimeLock you need to know the blockheight of the blockchain. Let's say the blockchain's blockheight is at ``1,000,000`` blocks. You want to lock your VerusID for 1 year. 1 year is ``508994`` blocks.::: warning Long-Term Locking\n**For long-term locking it's best to take an average block time of 62 seconds. Yet there are some variables that make it difficult to predict an exact time, leap years for example. Over long-term there are an average of 1394.5484 blocks per day.**\n:::", "./raw_text_input_docs/setup-vault.md"]]], [["User:: I'm interested in registering a VerusID or subID. What's the first step in doing so, and what's the cost associated with it?", "AI Assistant:: The first step in registering a VerusID or subID is to commit a name, which costs a transaction fee of 0.0001. This is done using the `registernamecommitment` command. Do you have any questions about this step or would you like to know more about the command?", "User:: Yes, actually. How do I commit a VerusID name using the command line, and what information do I need to provide?", "AI Assistant:: To commit a VerusID name, you can use the following command:\n```\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\"\n```\nYou need to provide your desired ID name, the R address associated with it, and an optional referral ID. Make sure to replace \"YOUR_ID_NAME\", \"YOUR_R_ADDRESS\", and \"REFERRAL_ID[OPTIONAL]\" with your actual information.", "User:: What's the purpose of the output from the `registernamecommitment` command, and what do I need to do with it?", "AI Assistant:: The output from the `registernamecommitment` command is used to register the VerusID or subID. You need to take the output and add it to the registration process according to the provided instructions. It's an important step in completing the registration of your VerusID or subID.", "User:: I also want to know about registering a subID. How does it differ from registering a VerusID, and what additional information is required?", "AI Assistant:: Registering a subID differs from registering a VerusID in that it requires an additional currency name parameter when committing the subID name. The command to commit a subID name is similar to the one for committing a VerusID name, but with the added currency name parameter:\n```\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\" \"CURRENCY_NAME\"\n```\nThe registration process for a subID is the same as for a VerusID. You just need to provide the additional currency name information."], "AI Assistant", "", "N/A", [["What is the first step in registering a VerusID or subID, and what is the cost associated with it?", "The first step in registering a VerusID or subID is to commit a name, which costs a transaction fee of 0.0001. This is done using the `registernamecommitment` command.", "# Register VerusID / subID\n\nRegister a VerusID or subID. First a name needs to be committed, this costs a transaction fee (0.0001), after a block has passed the VerusID or subID can be registered.\n\n### VerusID name commitment\nCommit a VerusID name by using the following command below. If no referral is available leave it empty.\n\n``` json\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\"\n```\n\nUsing the command above gives an output. Take that output and add the highlighted lines from below:\n\n### VerusID registration\n\n``` json{11-16}\n./verus -chain=VRSCTEST registeridentity '{\n \"txid\": \"2a614ae147a8abcb870eb45d5ddbfc1e1d283b942a5e77340d0d268c7fd47260\",\n \"namereservation\": {\n  \"version\": 1,\n  \"name\": \"test-id\",\n  \"parent\": \"iJhCezBExJHvtyH3fGhNnt2NhU4Ztkf2yq\",\n  \"salt\": \"bf5b76bb38cefd2bec266bdcc2f2f37cb321c9aab103e4aa802fdef90224a2f7\",\n  \"referral\": \"\",\n  \"nameid\": \"iMGMwQhtnaVwdrzev9uMspuNyQbYhCJEmU\"\n }, \n  \"identity\":{\n    \"name\":\"YOUR_ID_NAME\",\n    \"primaryaddresses\":[\"R_ADDRESS_CHOSEN_WITH_NAME_COMMITMENT\"],\n    \"minimumsignatures\":1,\n    \"revocationauthority\":[\"CHOOSE_I_ADDRESS\"],\n    \"recoveryauthority\":[\"CHOOSE_I_ADDRESS\"]}\n}'\n```\n\n### SubID name commitment\nCommit a subID name by using the following command below (it is almost the same as doing a VerusID name commitment, except currency name is added.)\n\n``` json\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\" \"CURRENCY_NAME\"\n```\n\n### SubID registration\nThe same as with VerusID registration.", "./raw_text_input_docs/verusid-create.md"], ["How do I commit a VerusID name using the command line, and what information do I need to provide?", "To commit a VerusID name, you can use the following command:\n```\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\"\n```\nYou need to provide your desired ID name, the R address associated with it, and an optional referral ID.", "# Register VerusID / subID\n\nRegister a VerusID or subID. First a name needs to be committed, this costs a transaction fee (0.0001), after a block has passed the VerusID or subID can be registered.\n\n### VerusID name commitment\nCommit a VerusID name by using the following command below. If no referral is available leave it empty.\n\n``` json\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\"\n```\n\nUsing the command above gives an output. Take that output and add the highlighted lines from below:\n\n### VerusID registration\n\n``` json{11-16}\n./verus -chain=VRSCTEST registeridentity '{\n \"txid\": \"2a614ae147a8abcb870eb45d5ddbfc1e1d283b942a5e77340d0d268c7fd47260\",\n \"namereservation\": {\n  \"version\": 1,\n  \"name\": \"test-id\",\n  \"parent\": \"iJhCezBExJHvtyH3fGhNnt2NhU4Ztkf2yq\",\n  \"salt\": \"bf5b76bb38cefd2bec266bdcc2f2f37cb321c9aab103e4aa802fdef90224a2f7\",\n  \"referral\": \"\",\n  \"nameid\": \"iMGMwQhtnaVwdrzev9uMspuNyQbYhCJEmU\"\n }, \n  \"identity\":{\n    \"name\":\"YOUR_ID_NAME\",\n    \"primaryaddresses\":[\"R_ADDRESS_CHOSEN_WITH_NAME_COMMITMENT\"],\n    \"minimumsignatures\":1,\n    \"revocationauthority\":[\"CHOOSE_I_ADDRESS\"],\n    \"recoveryauthority\":[\"CHOOSE_I_ADDRESS\"]}\n}'\n```\n\n### SubID name commitment\nCommit a subID name by using the following command below (it is almost the same as doing a VerusID name commitment, except currency name is added.)\n\n``` json\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\" \"CURRENCY_NAME\"\n```\n\n### SubID registration\nThe same as with VerusID registration.", "./raw_text_input_docs/verusid-create.md"], ["What is the purpose of the output from the `registernamecommitment` command, and what do I need to do with it?", "The output from the `registernamecommitment` command is used to register the VerusID or subID. You need to take the output and add it to the registration process according to the provided instructions.", "# Register VerusID / subID\n\nRegister a VerusID or subID. First a name needs to be committed, this costs a transaction fee (0.0001), after a block has passed the VerusID or subID can be registered.\n\n### VerusID name commitment\nCommit a VerusID name by using the following command below. If no referral is available leave it empty.\n\n``` json\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\"\n```\n\nUsing the command above gives an output. Take that output and add the highlighted lines from below:\n\n### VerusID registration\n\n``` json{11-16}\n./verus -chain=VRSCTEST registeridentity '{\n \"txid\": \"2a614ae147a8abcb870eb45d5ddbfc1e1d283b942a5e77340d0d268c7fd47260\",\n \"namereservation\": {\n  \"version\": 1,\n  \"name\": \"test-id\",\n  \"parent\": \"iJhCezBExJHvtyH3fGhNnt2NhU4Ztkf2yq\",\n  \"salt\": \"bf5b76bb38cefd2bec266bdcc2f2f37cb321c9aab103e4aa802fdef90224a2f7\",\n  \"referral\": \"\",\n  \"nameid\": \"iMGMwQhtnaVwdrzev9uMspuNyQbYhCJEmU\"\n }, \n  \"identity\":{\n    \"name\":\"YOUR_ID_NAME\",\n    \"primaryaddresses\":[\"R_ADDRESS_CHOSEN_WITH_NAME_COMMITMENT\"],\n    \"minimumsignatures\":1,\n    \"revocationauthority\":[\"CHOOSE_I_ADDRESS\"],\n    \"recoveryauthority\":[\"CHOOSE_I_ADDRESS\"]}\n}'\n```\n\n### SubID name commitment\nCommit a subID name by using the following command below (it is almost the same as doing a VerusID name commitment, except currency name is added.)\n\n``` json\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\" \"CURRENCY_NAME\"\n```\n\n### SubID registration\nThe same as with VerusID registration.", "./raw_text_input_docs/verusid-create.md"], ["How does registering a subID differ from registering a VerusID, and what additional information is required?", "Registering a subID differs from registering a VerusID in that it requires an additional currency name parameter when committing the subID name. The command to commit a subID name is similar to the one for committing a VerusID name, but with the added currency name parameter:\n```\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\" \"CURRENCY_NAME\"\n```\nThe registration process for a subID is the same as for a VerusID.", "# Register VerusID / subID\n\nRegister a VerusID or subID. First a name needs to be committed, this costs a transaction fee (0.0001), after a block has passed the VerusID or subID can be registered.\n\n### VerusID name commitment\nCommit a VerusID name by using the following command below. If no referral is available leave it empty.\n\n``` json\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\"\n```\n\nUsing the command above gives an output. Take that output and add the highlighted lines from below:\n\n### VerusID registration\n\n``` json{11-16}\n./verus -chain=VRSCTEST registeridentity '{\n \"txid\": \"2a614ae147a8abcb870eb45d5ddbfc1e1d283b942a5e77340d0d268c7fd47260\",\n \"namereservation\": {\n  \"version\": 1,\n  \"name\": \"test-id\",\n  \"parent\": \"iJhCezBExJHvtyH3fGhNnt2NhU4Ztkf2yq\",\n  \"salt\": \"bf5b76bb38cefd2bec266bdcc2f2f37cb321c9aab103e4aa802fdef90224a2f7\",\n  \"referral\": \"\",\n  \"nameid\": \"iMGMwQhtnaVwdrzev9uMspuNyQbYhCJEmU\"\n }, \n  \"identity\":{\n    \"name\":\"YOUR_ID_NAME\",\n    \"primaryaddresses\":[\"R_ADDRESS_CHOSEN_WITH_NAME_COMMITMENT\"],\n    \"minimumsignatures\":1,\n    \"revocationauthority\":[\"CHOOSE_I_ADDRESS\"],\n    \"recoveryauthority\":[\"CHOOSE_I_ADDRESS\"]}\n}'\n```\n\n### SubID name commitment\nCommit a subID name by using the following command below (it is almost the same as doing a VerusID name commitment, except currency name is added.)\n\n``` json\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\" \"CURRENCY_NAME\"\n```\n\n### SubID registration\nThe same as with VerusID registration.", "./raw_text_input_docs/verusid-create.md"]]], [["User:: I'd like to know more about how PBaaS chains work with the Verus daemon. Can you explain that to me?", "AI Assistant:: All PBaaS chains run from the same Verus daemon. Projects can join the Verus community to improve the daemon, which provides a complete, multi-currency, VerusID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network. Would you like to know more about PBaaS chains or the Verus daemon?", "User:: Actually, I'd like to ask about something else. What is a basket currency in the context of Verus DeFi protocol?", "AI Assistant:: In the Verus DeFi protocol, a basket currency is a currency defined by a VerusID owner with one or more reserves backing the currency at a fractional percentage ranging from 5% to 100%. This enables the creation of fractional currency baskets. Do you have any further questions about basket currencies or the DeFi protocol?", "User:: That's interesting. How does the Verus DeFi protocol address miner extracted value (MEV) and front-running?", "AI Assistant:: The Verus DeFi protocol addresses MEV and front-running by ensuring that all currency conversions using a particular basket currency, and mined into one block, are solved and priced simultaneously. This provides fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities. Does that make sense?", "User:: Yes, thanks for explaining. What is a bridge converter in the context of Verus?", "AI Assistant:: A bridge converter is a fully decentralized or centralized liquidity pool that is launched as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other 100% asset-backed or partially asset-backed basket currencies, but are bound to the launch of the new blockchain, run on the new blockchain, and earn fees through cross-chain fee conversions or general use of the liquidity pool, with no rent going back to the Verus blockchain. Do you have any further questions about bridge converters?", "User:: And how do bridge converters interact with the Verus blockchain?", "AI Assistant:: Bridge converters provide seamless connectivity to the Verus blockchain, allowing for cross-chain interactions and fee conversions, but operate independently on the new blockchain, with all fees earned going to the new blockchain, and no rent going back to the Verus blockchain. Is there anything else you'd like to know about bridge converters or the Verus ecosystem?"], "AI Assistant", "", "N/A", [["How do PBaaS chains relate to the Verus daemon?", "All PBaaS chains run from the same Verus daemon. Projects can join the Verus community to improve the daemon, which provides a complete, multi-currency, VerusID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.", "All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, VerusID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.## DeFi liquidity pools and fractional currency baskets\nAny VerusID owner may define basket currencies, with one or more reserves backing the currency, at a fractional percentage ranging from 5% to 100% backing.The Verus DeFi protocol ensures that all currency conversions that use a particular basket currency, and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi basket currencies directly into the consensus and cross-chain bridge protocols.## Bridge converter launches\nLaunch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain.Bridge converter currencies have the same flexibility as other 100% asset backed or partially asset backed basket currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross-chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.", "./raw_text_input_docs/README_blockchains.md"], ["What is a basket currency in the context of Verus DeFi protocol?", "In the Verus DeFi protocol, a basket currency is a currency defined by a VerusID owner with one or more reserves backing the currency at a fractional percentage ranging from 5% to 100%. This enables the creation of fractional currency baskets.", "All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, VerusID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.## DeFi liquidity pools and fractional currency baskets\nAny VerusID owner may define basket currencies, with one or more reserves backing the currency, at a fractional percentage ranging from 5% to 100% backing.The Verus DeFi protocol ensures that all currency conversions that use a particular basket currency, and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi basket currencies directly into the consensus and cross-chain bridge protocols.## Bridge converter launches\nLaunch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain.Bridge converter currencies have the same flexibility as other 100% asset backed or partially asset backed basket currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross-chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.", "./raw_text_input_docs/README_blockchains.md"], ["How does the Verus DeFi protocol address miner extracted value (MEV) and front-running?", "The Verus DeFi protocol addresses MEV and front-running by ensuring that all currency conversions using a particular basket currency, and mined into one block, are solved and priced simultaneously. This provides fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities.", "All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, VerusID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.## DeFi liquidity pools and fractional currency baskets\nAny VerusID owner may define basket currencies, with one or more reserves backing the currency, at a fractional percentage ranging from 5% to 100% backing.The Verus DeFi protocol ensures that all currency conversions that use a particular basket currency, and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi basket currencies directly into the consensus and cross-chain bridge protocols.## Bridge converter launches\nLaunch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain.Bridge converter currencies have the same flexibility as other 100% asset backed or partially asset backed basket currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross-chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.", "./raw_text_input_docs/README_blockchains.md"], ["What is a bridge converter in the context of Verus?", "A bridge converter is a fully decentralized or centralized liquidity pool that is launched as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other 100% asset-backed or partially asset-backed basket currencies, but are bound to the launch of the new blockchain, run on the new blockchain, and earn fees through cross-chain fee conversions or general use of the liquidity pool, with no rent going back to the Verus blockchain.", "All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, VerusID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.## DeFi liquidity pools and fractional currency baskets\nAny VerusID owner may define basket currencies, with one or more reserves backing the currency, at a fractional percentage ranging from 5% to 100% backing.The Verus DeFi protocol ensures that all currency conversions that use a particular basket currency, and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi basket currencies directly into the consensus and cross-chain bridge protocols.## Bridge converter launches\nLaunch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain.Bridge converter currencies have the same flexibility as other 100% asset backed or partially asset backed basket currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross-chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.", "./raw_text_input_docs/README_blockchains.md"], ["How do bridge converters interact with the Verus blockchain?", "Bridge converters provide seamless connectivity to the Verus blockchain, allowing for cross-chain interactions and fee conversions, but operate independently on the new blockchain, with all fees earned going to the new blockchain, and no rent going back to the Verus blockchain.", "All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, VerusID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.## DeFi liquidity pools and fractional currency baskets\nAny VerusID owner may define basket currencies, with one or more reserves backing the currency, at a fractional percentage ranging from 5% to 100% backing.The Verus DeFi protocol ensures that all currency conversions that use a particular basket currency, and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi basket currencies directly into the consensus and cross-chain bridge protocols.## Bridge converter launches\nLaunch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain.Bridge converter currencies have the same flexibility as other 100% asset backed or partially asset backed basket currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross-chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.", "./raw_text_input_docs/README_blockchains.md"]]], [["User:: Hey, I'm interested in learning more about currencies in Verus. What is a basket currency in Verus, and how is it defined?", "AI Assistant:: A basket currency in Verus is a type of currency that can be created by combining multiple currencies. It is defined using the `definecurrency` command with specific parameters, such as `name`, `options`, `currencies`, `minpreconversion`, and `initialsupply`. The `currencies` parameter specifies the currencies that make up the basket, while `minpreconversion` specifies the minimum amount of each currency required to launch the basket currency.", "User:: That's interesting. I've also seen the `conversions` parameter mentioned when defining a currency in Verus. What is its purpose?", "AI Assistant:: The `conversions` parameter is used to set the preconversion price when launching a simple token currency. It specifies how much of the new currency will be received for each unit of the underlying currency (e.g. VRSCTEST) converted during the preconversion time frame.", "User:: I see. And what happens if the minimum preconversion amount is not met when launching a currency in Verus?", "AI Assistant:: If the minimum preconversion amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back, minus the transaction and conversion fees. This is a safety mechanism to ensure that there is sufficient interest and investment in the new currency before it is launched.", "User:: That makes sense. Can you tell me more about the `minpreconversion` parameter and how it works in Verus?", "AI Assistant:: The `minpreconversion` parameter sets a minimum amount of preconversions required for a currency to launch. It works with both basket currencies and simple token currencies. If the minimum amount is not met, the currency will not launch, and all preconverters will receive their funds back, minus fees. This parameter ensures that there is sufficient interest and investment in the new currency before it is launched."], "AI Assistant", "", "N/A", [["What is a basket currency in Verus, and how is it defined?", "A basket currency in Verus is a type of currency that can be created by combining multiple currencies. It is defined using the `definecurrency` command with specific parameters, such as `name`, `options`, `currencies`, `minpreconversion`, and `initialsupply`. The `currencies` parameter specifies the currencies that make up the basket, while `minpreconversion` specifies the minimum amount of each currency required to launch the basket currency.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CommunityX\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"MyBrand\",\"InfluencerCoin\"], \n \"minpreconversion\":[10,50,10],\n \"initialsupply\":100\n}'\n```\n\u261d\ufe0f A basket currency called CommunityX. It needs to get a minimum of 10 VRSCTEST, 50 MyBrand and 10 InfluencerCoin into its reserves within the preconversion time frame to be launched. The initial supply of 100 CommunityX will be distributed among the preconverters.### **\"conversions\"**\nUse this parameter when launching a simple token currency. Together with `\"currencies\"`, it can be used as a funding mechanism for the rootID. This parameter is for the preconversion price. So when doing `\"conversions\":[0.1]`, it means that for every VRSC the preconverter receives 10 CURRENCY after launch. The converted VRSC goes into the rootID.People can preconvert to this currency within the preconversion time frame. Define a `\"startblock\"`, or let the default and minimum time frame play out, which is 20 blocks.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CoolBrand\",\n \"options\":32,\n \"currencies\":[\"vrsctest\"],\n \"conversions\":[0.1],\n \"minpreconversion\":[1000]\n}'\n```\n\u261d\ufe0f This simple token currency is called CoolBrand. During the preconversion time frame people need to convert 1000 VRSCTEST to the rootID. In exchange for that they receive 10.000 CoolBrand. If this minimum amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back.### **\"minpreconversion\"**\nUse this parameter to set a minimum amount of preconversions. The minimum amount of preconversions needs to be met or the currency will not launch and everyone gets their conversions returned, minus the transaction and conversion fees. It works both with basket currencies and simple token currencies.", "./raw_text_input_docs/launch-currency.md"], ["What is the purpose of the `conversions` parameter when defining a currency in Verus?", "The `conversions` parameter is used to set the preconversion price when launching a simple token currency. It specifies how much of the new currency will be received for each unit of the underlying currency (e.g. VRSCTEST) converted during the preconversion time frame.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CommunityX\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"MyBrand\",\"InfluencerCoin\"], \n \"minpreconversion\":[10,50,10],\n \"initialsupply\":100\n}'\n```\n\u261d\ufe0f A basket currency called CommunityX. It needs to get a minimum of 10 VRSCTEST, 50 MyBrand and 10 InfluencerCoin into its reserves within the preconversion time frame to be launched. The initial supply of 100 CommunityX will be distributed among the preconverters.### **\"conversions\"**\nUse this parameter when launching a simple token currency. Together with `\"currencies\"`, it can be used as a funding mechanism for the rootID. This parameter is for the preconversion price. So when doing `\"conversions\":[0.1]`, it means that for every VRSC the preconverter receives 10 CURRENCY after launch. The converted VRSC goes into the rootID.People can preconvert to this currency within the preconversion time frame. Define a `\"startblock\"`, or let the default and minimum time frame play out, which is 20 blocks.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CoolBrand\",\n \"options\":32,\n \"currencies\":[\"vrsctest\"],\n \"conversions\":[0.1],\n \"minpreconversion\":[1000]\n}'\n```\n\u261d\ufe0f This simple token currency is called CoolBrand. During the preconversion time frame people need to convert 1000 VRSCTEST to the rootID. In exchange for that they receive 10.000 CoolBrand. If this minimum amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back.### **\"minpreconversion\"**\nUse this parameter to set a minimum amount of preconversions. The minimum amount of preconversions needs to be met or the currency will not launch and everyone gets their conversions returned, minus the transaction and conversion fees. It works both with basket currencies and simple token currencies.", "./raw_text_input_docs/launch-currency.md"], ["What happens if the minimum preconversion amount is not met when launching a currency in Verus?", "If the minimum preconversion amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back, minus the transaction and conversion fees. This is a safety mechanism to ensure that there is sufficient interest and investment in the new currency before it is launched.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CommunityX\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"MyBrand\",\"InfluencerCoin\"], \n \"minpreconversion\":[10,50,10],\n \"initialsupply\":100\n}'\n```\n\u261d\ufe0f A basket currency called CommunityX. It needs to get a minimum of 10 VRSCTEST, 50 MyBrand and 10 InfluencerCoin into its reserves within the preconversion time frame to be launched. The initial supply of 100 CommunityX will be distributed among the preconverters.### **\"conversions\"**\nUse this parameter when launching a simple token currency. Together with `\"currencies\"`, it can be used as a funding mechanism for the rootID. This parameter is for the preconversion price. So when doing `\"conversions\":[0.1]`, it means that for every VRSC the preconverter receives 10 CURRENCY after launch. The converted VRSC goes into the rootID.People can preconvert to this currency within the preconversion time frame. Define a `\"startblock\"`, or let the default and minimum time frame play out, which is 20 blocks.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CoolBrand\",\n \"options\":32,\n \"currencies\":[\"vrsctest\"],\n \"conversions\":[0.1],\n \"minpreconversion\":[1000]\n}'\n```\n\u261d\ufe0f This simple token currency is called CoolBrand. During the preconversion time frame people need to convert 1000 VRSCTEST to the rootID. In exchange for that they receive 10.000 CoolBrand. If this minimum amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back.### **\"minpreconversion\"**\nUse this parameter to set a minimum amount of preconversions. The minimum amount of preconversions needs to be met or the currency will not launch and everyone gets their conversions returned, minus the transaction and conversion fees. It works both with basket currencies and simple token currencies.", "./raw_text_input_docs/launch-currency.md"], ["How does the `minpreconversion` parameter work in Verus, and what is its purpose?", "The `minpreconversion` parameter sets a minimum amount of preconversions required for a currency to launch. It works with both basket currencies and simple token currencies. If the minimum amount is not met, the currency will not launch, and all preconverters will receive their funds back, minus fees. This parameter ensures that there is sufficient interest and investment in the new currency before it is launched.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CommunityX\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"MyBrand\",\"InfluencerCoin\"], \n \"minpreconversion\":[10,50,10],\n \"initialsupply\":100\n}'\n```\n\u261d\ufe0f A basket currency called CommunityX. It needs to get a minimum of 10 VRSCTEST, 50 MyBrand and 10 InfluencerCoin into its reserves within the preconversion time frame to be launched. The initial supply of 100 CommunityX will be distributed among the preconverters.### **\"conversions\"**\nUse this parameter when launching a simple token currency. Together with `\"currencies\"`, it can be used as a funding mechanism for the rootID. This parameter is for the preconversion price. So when doing `\"conversions\":[0.1]`, it means that for every VRSC the preconverter receives 10 CURRENCY after launch. The converted VRSC goes into the rootID.People can preconvert to this currency within the preconversion time frame. Define a `\"startblock\"`, or let the default and minimum time frame play out, which is 20 blocks.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CoolBrand\",\n \"options\":32,\n \"currencies\":[\"vrsctest\"],\n \"conversions\":[0.1],\n \"minpreconversion\":[1000]\n}'\n```\n\u261d\ufe0f This simple token currency is called CoolBrand. During the preconversion time frame people need to convert 1000 VRSCTEST to the rootID. In exchange for that they receive 10.000 CoolBrand. If this minimum amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back.### **\"minpreconversion\"**\nUse this parameter to set a minimum amount of preconversions. The minimum amount of preconversions needs to be met or the currency will not launch and everyone gets their conversions returned, minus the transaction and conversion fees. It works both with basket currencies and simple token currencies.", "./raw_text_input_docs/launch-currency.md"]]], [["User:: I've been looking into the Verus ecosystem and I'm curious about the Transfer Destination component. What is its purpose?", "AI Assistant:: The Transfer Destination component is a foundational tool for blockchain developers that enables the definition of flexible, interoperable, and sophisticated transaction pathways. It facilitates a wide range of blockchain operations, from simple transfers to complex cross-chain and multi-step transactions, making it an essential tool in the development of decentralized applications and systems. It's a really powerful component that opens up a lot of possibilities for developers.", "User:: That sounds interesting. What kind of transactions can be performed using the Transfer Destination component?", "AI Assistant:: The Transfer Destination component allows for a wide range of blockchain operations, including simple transfers, complex cross-chain transactions, and multi-step transactions. It's designed to be very flexible and adaptable, so developers can use it to create complex transaction scenarios that meet their specific needs.", "User:: Where can I find examples of the Transfer Destination component's implementation in the Verus ecosystem?", "AI Assistant:: The Transfer Destination component is implemented in several codebases across the Verus ecosystem. You can find examples of its implementation in the VerusCoin core GitHub repository, where it's implemented as CTransferDestination, and in the verus-typescript-primitives utility library, where it's implemented as TransferDestination. If you're interested in learning more about how it's used, I'd recommend checking out those repositories and exploring the code. Do you have any other questions about the Transfer Destination component or its implementation?"], "AI Assistant", "", "N/A", [["What is the purpose of the Transfer Destination component in the Verus ecosystem?", "The Transfer Destination component is a foundational tool for blockchain developers that enables the definition of flexible, interoperable, and sophisticated transaction pathways. It facilitates a wide range of blockchain operations, from simple transfers to complex cross-chain and multi-step transactions, making it an essential tool in the development of decentralized applications and systems.", "Transfer Destination is a foundational component for blockchain developers, enabling the definition of flexible, interoperable, and sophisticated transaction pathways. Its design facilitates a wide range of blockchain operations, from simple transfers to complex cross-chain and multi-step transactions, making it an essential tool in the development of decentralized applications and systems.\n\n## Implementation Examples\n\nThe Transfer Destination construct is implemented in a number of codebases accross the Verus ecosystem:\n\n- [The VerusCoin core GitHub repository (as CTransferDestination)](https://github.com/VerusCoin/VerusCoin/blob/master/src/pbaas/crosschainrpc.h)\n- [The verus-typescript-primitives utility library (as TransferDestination)](https://github.com/VerusCoin/verus-typescript-primitives/blob/master/src/pbaas/TransferDestination.ts)", "./raw_text_input_docs/transfer-destination.md"], ["What kind of transactions can be performed using the Transfer Destination component?", "The Transfer Destination component allows for a wide range of blockchain operations, including simple transfers, complex cross-chain transactions, and multi-step transactions.", "Transfer Destination is a foundational component for blockchain developers, enabling the definition of flexible, interoperable, and sophisticated transaction pathways. Its design facilitates a wide range of blockchain operations, from simple transfers to complex cross-chain and multi-step transactions, making it an essential tool in the development of decentralized applications and systems.\n\n## Implementation Examples\n\nThe Transfer Destination construct is implemented in a number of codebases accross the Verus ecosystem:\n\n- [The VerusCoin core GitHub repository (as CTransferDestination)](https://github.com/VerusCoin/VerusCoin/blob/master/src/pbaas/crosschainrpc.h)\n- [The verus-typescript-primitives utility library (as TransferDestination)](https://github.com/VerusCoin/verus-typescript-primitives/blob/master/src/pbaas/TransferDestination.ts)", "./raw_text_input_docs/transfer-destination.md"], ["Where can I find examples of the Transfer Destination component's implementation in the Verus ecosystem?", "The Transfer Destination component is implemented in several codebases across the Verus ecosystem, including the VerusCoin core GitHub repository (as CTransferDestination) and the verus-typescript-primitives utility library (as TransferDestination).", "Transfer Destination is a foundational component for blockchain developers, enabling the definition of flexible, interoperable, and sophisticated transaction pathways. Its design facilitates a wide range of blockchain operations, from simple transfers to complex cross-chain and multi-step transactions, making it an essential tool in the development of decentralized applications and systems.\n\n## Implementation Examples\n\nThe Transfer Destination construct is implemented in a number of codebases accross the Verus ecosystem:\n\n- [The VerusCoin core GitHub repository (as CTransferDestination)](https://github.com/VerusCoin/VerusCoin/blob/master/src/pbaas/crosschainrpc.h)\n- [The verus-typescript-primitives utility library (as TransferDestination)](https://github.com/VerusCoin/verus-typescript-primitives/blob/master/src/pbaas/TransferDestination.ts)", "./raw_text_input_docs/transfer-destination.md"]]], [["User:: I have some questions about VerusIDs. When creating a VerusID, what is the purpose of assigning a RevokeID and a RecoveryID?", "AI Assistant:: When creating a VerusID, users can assign a RevokeID and a RecoveryID to their VerusID. These assigned identities are also VerusIDs and can be used to control the VerusID's funds. The RevokeID can be used to revoke the VerusID, effectively freezing its funds, while the RecoveryID can be used to recover the VerusID and restore access to its funds.", "User:: That's really interesting. What happens when a VerusID is revoked?", "AI Assistant:: When a VerusID is revoked, its funds can no longer be spent. This is a security measure to prevent unauthorized access to the VerusID's funds.", "User:: And what about recovery? What happens when a VerusID is recovered?", "AI Assistant:: When a VerusID is recovered, all of its assets are restored to a new address, and the funds and UTXOs can be spent again.", "User:: I've also heard about the Verus Vault. What is it, and how does it work?", "AI Assistant:: The Verus Vault is a unique feature that allows users to add an extra layer of security to their VerusID. It allows users to set locks or timelocks on their VerusID, which prevents funds from being spent until the lock or timelock is removed. There are three stages to the Vault: locked until a predetermined number of blocks have passed, locked with a delay, and unlocked. Even when a VerusID is locked or timelocked, it can still receive, hold, and stake funds, and can still be used for signing.", "User:: That's really cool. But I have one more question. Can a locked or timelocked VerusID still be revoked and recovered?", "AI Assistant:: Yes, even when a VerusID is locked or timelocked, it can still be revoked and recovered. The Vault adds an extra layer of security, but it doesn't restrict the ability to revoke or recover the VerusID."], "AI Assistant", "", "N/A", [["What is the purpose of assigning a RevokeID and a RecoveryID when creating a VerusID?", "When creating a VerusID, users can assign a RevokeID and a RecoveryID to their VerusID. These assigned identities are also VerusIDs and can be used to control the VerusID's funds. The RevokeID can be used to revoke the VerusID, effectively freezing its funds, while the RecoveryID can be used to recover the VerusID and restore access to its funds.", "When creating a VerusID users can assign a ``RevokeID`` and a ``RecoveryID`` to their VerusID. They can be the same identities, different ones or appointed ``self``. These assigned identities are also VerusIDs and thus must be purchased.| Action | Outcome |\n| :----------------------- | :-- | \n| Revoking | Funds can not be spent anymore | \n| Recovering | Recover all assets to a new address. Funds and UTXOs can be spent again |::: danger Be Careful\nDon't assign a ``RecoveryID`` to ``self`` when the ``RevokeID`` is assigned to another identity. This way when you revoke an identity, you can not recover it anymore.\n:::## Verus Vault\nThe Verus Vault for identities is a unique feature to create extra security. Set locks or timelocks to safeguard funds on a VerusID. Locked identities can not spend funds.### How it Works\nThere are three stages the Vault can be set to. When the vault is locked it can not spend funds.| Action | Outcome |\n| :----------------------- | :-- | \n| Locked until x blocks | Funds can not be spent, until a predetermined number of blocks have passed | \n| Locked with delay | Funds can not be spent, until an unlock has been requested + predetermined number of blocks have passed | \n| Unlocked | Funds can be spent |When a VerusID is locked or timelocked, it can still receive, hold and stake funds. It can also still be used for signing.[Learn here how to set up Verus Vault in Verus Desktop](/guides/setup-vault-v2/)::: warning Revoking Locked VerusID\nEven when a VerusID is locked, it can still be [revoked and recovered](/verusid/specifications#revoke-recover/). \n:::### Vault Use Case Examples", "./raw_text_input_docs/README_addresses.md"], ["What happens when a VerusID is revoked?", "When a VerusID is revoked, its funds can no longer be spent. This is a security measure to prevent unauthorized access to the VerusID's funds.", "When creating a VerusID users can assign a ``RevokeID`` and a ``RecoveryID`` to their VerusID. They can be the same identities, different ones or appointed ``self``. These assigned identities are also VerusIDs and thus must be purchased.| Action | Outcome |\n| :----------------------- | :-- | \n| Revoking | Funds can not be spent anymore | \n| Recovering | Recover all assets to a new address. Funds and UTXOs can be spent again |::: danger Be Careful\nDon't assign a ``RecoveryID`` to ``self`` when the ``RevokeID`` is assigned to another identity. This way when you revoke an identity, you can not recover it anymore.\n:::## Verus Vault\nThe Verus Vault for identities is a unique feature to create extra security. Set locks or timelocks to safeguard funds on a VerusID. Locked identities can not spend funds.### How it Works\nThere are three stages the Vault can be set to. When the vault is locked it can not spend funds.| Action | Outcome |\n| :----------------------- | :-- | \n| Locked until x blocks | Funds can not be spent, until a predetermined number of blocks have passed | \n| Locked with delay | Funds can not be spent, until an unlock has been requested + predetermined number of blocks have passed | \n| Unlocked | Funds can be spent |When a VerusID is locked or timelocked, it can still receive, hold and stake funds. It can also still be used for signing.[Learn here how to set up Verus Vault in Verus Desktop](/guides/setup-vault-v2/)::: warning Revoking Locked VerusID\nEven when a VerusID is locked, it can still be [revoked and recovered](/verusid/specifications#revoke-recover/). \n:::### Vault Use Case Examples", "./raw_text_input_docs/README_addresses.md"], ["What happens when a VerusID is recovered?", "When a VerusID is recovered, all of its assets are restored to a new address, and the funds and UTXOs can be spent again.", "When creating a VerusID users can assign a ``RevokeID`` and a ``RecoveryID`` to their VerusID. They can be the same identities, different ones or appointed ``self``. These assigned identities are also VerusIDs and thus must be purchased.| Action | Outcome |\n| :----------------------- | :-- | \n| Revoking | Funds can not be spent anymore | \n| Recovering | Recover all assets to a new address. Funds and UTXOs can be spent again |::: danger Be Careful\nDon't assign a ``RecoveryID`` to ``self`` when the ``RevokeID`` is assigned to another identity. This way when you revoke an identity, you can not recover it anymore.\n:::## Verus Vault\nThe Verus Vault for identities is a unique feature to create extra security. Set locks or timelocks to safeguard funds on a VerusID. Locked identities can not spend funds.### How it Works\nThere are three stages the Vault can be set to. When the vault is locked it can not spend funds.| Action | Outcome |\n| :----------------------- | :-- | \n| Locked until x blocks | Funds can not be spent, until a predetermined number of blocks have passed | \n| Locked with delay | Funds can not be spent, until an unlock has been requested + predetermined number of blocks have passed | \n| Unlocked | Funds can be spent |When a VerusID is locked or timelocked, it can still receive, hold and stake funds. It can also still be used for signing.[Learn here how to set up Verus Vault in Verus Desktop](/guides/setup-vault-v2/)::: warning Revoking Locked VerusID\nEven when a VerusID is locked, it can still be [revoked and recovered](/verusid/specifications#revoke-recover/). \n:::### Vault Use Case Examples", "./raw_text_input_docs/README_addresses.md"], ["What is the Verus Vault, and how does it work?", "The Verus Vault is a unique feature that allows users to add an extra layer of security to their VerusID. It allows users to set locks or timelocks on their VerusID, which prevents funds from being spent until the lock or timelock is removed. There are three stages to the Vault: locked until a predetermined number of blocks have passed, locked with a delay, and unlocked. Even when a VerusID is locked or timelocked, it can still receive, hold, and stake funds, and can still be used for signing.", "When creating a VerusID users can assign a ``RevokeID`` and a ``RecoveryID`` to their VerusID. They can be the same identities, different ones or appointed ``self``. These assigned identities are also VerusIDs and thus must be purchased.| Action | Outcome |\n| :----------------------- | :-- | \n| Revoking | Funds can not be spent anymore | \n| Recovering | Recover all assets to a new address. Funds and UTXOs can be spent again |::: danger Be Careful\nDon't assign a ``RecoveryID`` to ``self`` when the ``RevokeID`` is assigned to another identity. This way when you revoke an identity, you can not recover it anymore.\n:::## Verus Vault\nThe Verus Vault for identities is a unique feature to create extra security. Set locks or timelocks to safeguard funds on a VerusID. Locked identities can not spend funds.### How it Works\nThere are three stages the Vault can be set to. When the vault is locked it can not spend funds.| Action | Outcome |\n| :----------------------- | :-- | \n| Locked until x blocks | Funds can not be spent, until a predetermined number of blocks have passed | \n| Locked with delay | Funds can not be spent, until an unlock has been requested + predetermined number of blocks have passed | \n| Unlocked | Funds can be spent |When a VerusID is locked or timelocked, it can still receive, hold and stake funds. It can also still be used for signing.[Learn here how to set up Verus Vault in Verus Desktop](/guides/setup-vault-v2/)::: warning Revoking Locked VerusID\nEven when a VerusID is locked, it can still be [revoked and recovered](/verusid/specifications#revoke-recover/). \n:::### Vault Use Case Examples", "./raw_text_input_docs/README_addresses.md"], ["Can a locked or timelocked VerusID still be revoked and recovered?", "Yes, even when a VerusID is locked or timelocked, it can still be revoked and recovered.", "When creating a VerusID users can assign a ``RevokeID`` and a ``RecoveryID`` to their VerusID. They can be the same identities, different ones or appointed ``self``. These assigned identities are also VerusIDs and thus must be purchased.| Action | Outcome |\n| :----------------------- | :-- | \n| Revoking | Funds can not be spent anymore | \n| Recovering | Recover all assets to a new address. Funds and UTXOs can be spent again |::: danger Be Careful\nDon't assign a ``RecoveryID`` to ``self`` when the ``RevokeID`` is assigned to another identity. This way when you revoke an identity, you can not recover it anymore.\n:::## Verus Vault\nThe Verus Vault for identities is a unique feature to create extra security. Set locks or timelocks to safeguard funds on a VerusID. Locked identities can not spend funds.### How it Works\nThere are three stages the Vault can be set to. When the vault is locked it can not spend funds.| Action | Outcome |\n| :----------------------- | :-- | \n| Locked until x blocks | Funds can not be spent, until a predetermined number of blocks have passed | \n| Locked with delay | Funds can not be spent, until an unlock has been requested + predetermined number of blocks have passed | \n| Unlocked | Funds can be spent |When a VerusID is locked or timelocked, it can still receive, hold and stake funds. It can also still be used for signing.[Learn here how to set up Verus Vault in Verus Desktop](/guides/setup-vault-v2/)::: warning Revoking Locked VerusID\nEven when a VerusID is locked, it can still be [revoked and recovered](/verusid/specifications#revoke-recover/). \n:::### Vault Use Case Examples", "./raw_text_input_docs/README_addresses.md"]]], [["User:: Hey, I'm trying to learn more about Verus and its features. Can you tell me, what is a basket currency in Verus, and how is it created?", "AI Assistant:: A basket currency in Verus is a type of currency that allows people to preconvert other currencies (like VRSCTEST) into its reserves in return for the new currency. It's created using the `definecurrency` command with specific options, such as `options:33`, which specifies that it's a basket currency. The `currencies` option defines the currencies that can be preconverted, and the `initialsupply` option sets the total amount of the new currency that will be distributed.", "User:: That helps, thanks! I was also wondering about the \"prelaunchcarveout\" parameter when defining a basket currency. What's its purpose?", "AI Assistant:: The \"prelaunchcarveout\" parameter is used to specify a percentage of the reserves that will be taken out and given to the rootID when the currency is launched. This lowers the reserve ratio by the specified percentage.", "User:: Got it! What about the \"prelaunchdiscount\" parameter? How does that work?", "AI Assistant:: The \"prelaunchdiscount\" parameter is used to give people a discount during the preconversion time frame. After the currency is launched, the conversion price will be higher, depending on the discount percentage. The reserve ratio will also be lowered by the discounted percentage.", "User:: I see. And one more question about basket currencies: how do I change the weights of the reserves in a basket currency?", "AI Assistant:: You can change the weights of the reserves in a basket currency using the \"weights\" parameter when defining the currency. The total of all weights must equal 1, and each weight must be at least 0.1, since there can't be more than 10 reserve currencies in a basket currency. Does that make sense?"], "AI Assistant", "", "N/A", [["What is a basket currency in Verus, and how is it created?", "A basket currency in Verus is a type of currency that allows people to preconvert other currencies (like VRSCTEST) into its reserves in return for the new currency. It's created using the `definecurrency` command with specific options, such as `options:33`, which specifies that it's a basket currency. The `currencies` option defines the currencies that can be preconverted, and the `initialsupply` option sets the total amount of the new currency that will be distributed.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"BusinessBrand\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"initialsupply\":100, \n \"prelaunchcarveout\":0.1\n}'\n```\n\u261d\ufe0f This is a basket currency called BusinessBrand. People can preconvert VRSCTEST into its reserves in return for 100 BusinessBrand distributed among them. When the currency is launched, 10% VRSCTEST is taken out of the reserves, into the rootID. This lowers the reserve ratio by 10%.### **\"prelaunchdiscount\"**\nOnly works with basket currencies (`options:33`). Use this to give people a discount during the preconversion time frame. After the preconversion time frame and the currency is launched, the conversion price will be higher, depending on what percentage the discount was.When using this parameter, after the currency is launched, the reserve ratio will be lowered by the discounted percentage.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"DiscountBrand\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"initialsupply\":100, \n \"prelaunchdiscount\":0.5\n}'\n```\n\u261d\ufe0f This is a basket currency called DiscountBrand. People can preconvert VRSCTEST into its reserves in return for 100 DiscountBrand distributed among them. Immediately after the launch of the currency, when people want to convert, the price is 50% higher. Also, the reserve ratio is 50% lower because of the prelaunchdiscount.### **\"weights\"**\nOnly works with basket currencies (`options:33`). Use this to change the respective weights of the reserves in a basket currency. The total of all weights must equal 1. With a minimum of 0.1, since there can\u2019t be more than 10 reserve currencies in a basket currency.", "./raw_text_input_docs/launch-currency.md"], ["What is the purpose of the \"prelaunchcarveout\" parameter when defining a basket currency in Verus?", "The \"prelaunchcarveout\" parameter is used to specify a percentage of the reserves that will be taken out and given to the rootID when the currency is launched. This lowers the reserve ratio by the specified percentage.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"BusinessBrand\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"initialsupply\":100, \n \"prelaunchcarveout\":0.1\n}'\n```\n\u261d\ufe0f This is a basket currency called BusinessBrand. People can preconvert VRSCTEST into its reserves in return for 100 BusinessBrand distributed among them. When the currency is launched, 10% VRSCTEST is taken out of the reserves, into the rootID. This lowers the reserve ratio by 10%.### **\"prelaunchdiscount\"**\nOnly works with basket currencies (`options:33`). Use this to give people a discount during the preconversion time frame. After the preconversion time frame and the currency is launched, the conversion price will be higher, depending on what percentage the discount was.When using this parameter, after the currency is launched, the reserve ratio will be lowered by the discounted percentage.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"DiscountBrand\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"initialsupply\":100, \n \"prelaunchdiscount\":0.5\n}'\n```\n\u261d\ufe0f This is a basket currency called DiscountBrand. People can preconvert VRSCTEST into its reserves in return for 100 DiscountBrand distributed among them. Immediately after the launch of the currency, when people want to convert, the price is 50% higher. Also, the reserve ratio is 50% lower because of the prelaunchdiscount.### **\"weights\"**\nOnly works with basket currencies (`options:33`). Use this to change the respective weights of the reserves in a basket currency. The total of all weights must equal 1. With a minimum of 0.1, since there can\u2019t be more than 10 reserve currencies in a basket currency.", "./raw_text_input_docs/launch-currency.md"], ["What is the \"prelaunchdiscount\" parameter used for when defining a basket currency in Verus?", "The \"prelaunchdiscount\" parameter is used to give people a discount during the preconversion time frame. After the currency is launched, the conversion price will be higher, depending on the discount percentage. The reserve ratio will also be lowered by the discounted percentage.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"BusinessBrand\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"initialsupply\":100, \n \"prelaunchcarveout\":0.1\n}'\n```\n\u261d\ufe0f This is a basket currency called BusinessBrand. People can preconvert VRSCTEST into its reserves in return for 100 BusinessBrand distributed among them. When the currency is launched, 10% VRSCTEST is taken out of the reserves, into the rootID. This lowers the reserve ratio by 10%.### **\"prelaunchdiscount\"**\nOnly works with basket currencies (`options:33`). Use this to give people a discount during the preconversion time frame. After the preconversion time frame and the currency is launched, the conversion price will be higher, depending on what percentage the discount was.When using this parameter, after the currency is launched, the reserve ratio will be lowered by the discounted percentage.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"DiscountBrand\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"initialsupply\":100, \n \"prelaunchdiscount\":0.5\n}'\n```\n\u261d\ufe0f This is a basket currency called DiscountBrand. People can preconvert VRSCTEST into its reserves in return for 100 DiscountBrand distributed among them. Immediately after the launch of the currency, when people want to convert, the price is 50% higher. Also, the reserve ratio is 50% lower because of the prelaunchdiscount.### **\"weights\"**\nOnly works with basket currencies (`options:33`). Use this to change the respective weights of the reserves in a basket currency. The total of all weights must equal 1. With a minimum of 0.1, since there can\u2019t be more than 10 reserve currencies in a basket currency.", "./raw_text_input_docs/launch-currency.md"], ["How do I change the weights of the reserves in a basket currency in Verus?", "You can change the weights of the reserves in a basket currency using the \"weights\" parameter when defining the currency. The total of all weights must equal 1, and each weight must be at least 0.1, since there can't be more than 10 reserve currencies in a basket currency.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"BusinessBrand\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"initialsupply\":100, \n \"prelaunchcarveout\":0.1\n}'\n```\n\u261d\ufe0f This is a basket currency called BusinessBrand. People can preconvert VRSCTEST into its reserves in return for 100 BusinessBrand distributed among them. When the currency is launched, 10% VRSCTEST is taken out of the reserves, into the rootID. This lowers the reserve ratio by 10%.### **\"prelaunchdiscount\"**\nOnly works with basket currencies (`options:33`). Use this to give people a discount during the preconversion time frame. After the preconversion time frame and the currency is launched, the conversion price will be higher, depending on what percentage the discount was.When using this parameter, after the currency is launched, the reserve ratio will be lowered by the discounted percentage.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"DiscountBrand\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"initialsupply\":100, \n \"prelaunchdiscount\":0.5\n}'\n```\n\u261d\ufe0f This is a basket currency called DiscountBrand. People can preconvert VRSCTEST into its reserves in return for 100 DiscountBrand distributed among them. Immediately after the launch of the currency, when people want to convert, the price is 50% higher. Also, the reserve ratio is 50% lower because of the prelaunchdiscount.### **\"weights\"**\nOnly works with basket currencies (`options:33`). Use this to change the respective weights of the reserves in a basket currency. The total of all weights must equal 1. With a minimum of 0.1, since there can\u2019t be more than 10 reserve currencies in a basket currency.", "./raw_text_input_docs/launch-currency.md"]]], [["User:: I've been reading about the Verus-Ethereum Bridge, and I'm not entirely sure what a notarization is in this context. Can you explain?", "AI Assistant:: In the context of the Verus-Ethereum Bridge, a notarization is a digital receipt created by block producers (miners and stakers) every 10 blocks when there is traffic over the bridge. This digital receipt contains information such as the stateroot, blockheight, blockhash, and gas price for Ethereum, and is agreed upon by the block producers before being mined into the Verus blockchain.", "User:: That helps clarify things. But what is the purpose of these notarizations in the Verus-Ethereum Bridge?", "AI Assistant:: The purpose of notarizations is to provide a provable and decentralized way of handling cross-chain communication between Verus and Ethereum. Notarizations serve as digital receipts that contain information about the state of the Verus and Ethereum blockchains, allowing for secure and trustless communication between the two chains.", "User:: That makes sense. But what about security? How does the Verus-Ethereum Bridge protect against malicious notary witnesses or stolen keys?", "AI Assistant:: The Verus-Ethereum Bridge is designed to be secure against malicious notary witnesses or stolen keys. To mount a successful attack on the bridge, a majority of witnesses would need to collude, fake block producers with more combined hash and stake power than the publicly validated Verus blockchain would need to be created, and developers would need to create an alternate protocol for the shadow chain. This is a highly unlikely scenario, and the bridge provides a way to defend against it."], "AI Assistant", "", "N/A", [["What is a notarization in the context of the Verus-Ethereum Bridge?", "In the context of the Verus-Ethereum Bridge, a notarization is a digital receipt created by block producers (miners and stakers) every 10 blocks when there is traffic over the bridge. This digital receipt contains information such as the stateroot, blockheight, blockhash, and gas price for Ethereum, and is agreed upon by the block producers before being mined into the Verus blockchain.", "Every 10 blocks the block producers create a notarization (when there is traffic over the bridge). They create these digital receipts for both Verus and Ethereum. The digital receipts, called \u201cnotarizations\", contain, among other things: the \u201cstateroot\u201d ([Merkle Mountain Range](https://www.investopedia.com/terms/m/merkle-root-cryptocurrency.asp) for Verus, [Merkle Patricia Trie](https://ethereum.org/en/developers/docs/data-structures-and-encoding/patricia-merkle-trie/) for Ethereum), the blockheight, blockhash and the gas price for Ethereum. The notarizations have to be agreed to by the block producers (miners and stakers) and are then mined into the Verus blockchain.\ud83d\udc49 [Read more here](https://medium.com/veruscoin/verus-internet-protocol-vip-provable-decentralized-cross-chain-communication-8d9414a429c5?source=rss----4869a79d7e7f---4) on how the Verus Protocol handles cross-chain communication (PBaaS-chains and more) in a decentralized and provable way.### Safeguards against bridge hacks\nThreats caused by malicious notary witnesses, or stolen keys to drain funds are not viable against the Verus-Ethereum Bridge. To successfully mount an attack on the bridge, if a majority of witnesses were colluding or got their private keys stolen the following would need to happen:- Colluding, malicious witnesses.\n- Fake block producers with more combined hash and stake power than the publicly validated Verus blockchain. [\ud83d\udc49 Verus Paper: A Provable Hybrid Solution to 51% Hash Attacks](https://verus.io/papers/VerusPoP.pdf)\n- Developers helping them by creating an alternate protocol for the shadow chain.These requirements are very close to the requirements of attacking any blockchain. The bridge even provides a way to defend against such an unlikely scenario.", "./raw_text_input_docs/README_eth-bridge.md"], ["What is the purpose of notarizations in the Verus-Ethereum Bridge?", "The purpose of notarizations is to provide a provable and decentralized way of handling cross-chain communication between Verus and Ethereum. Notarizations serve as digital receipts that contain information about the state of the Verus and Ethereum blockchains, allowing for secure and trustless communication between the two chains.", "Every 10 blocks the block producers create a notarization (when there is traffic over the bridge). They create these digital receipts for both Verus and Ethereum. The digital receipts, called \u201cnotarizations\", contain, among other things: the \u201cstateroot\u201d ([Merkle Mountain Range](https://www.investopedia.com/terms/m/merkle-root-cryptocurrency.asp) for Verus, [Merkle Patricia Trie](https://ethereum.org/en/developers/docs/data-structures-and-encoding/patricia-merkle-trie/) for Ethereum), the blockheight, blockhash and the gas price for Ethereum. The notarizations have to be agreed to by the block producers (miners and stakers) and are then mined into the Verus blockchain.\ud83d\udc49 [Read more here](https://medium.com/veruscoin/verus-internet-protocol-vip-provable-decentralized-cross-chain-communication-8d9414a429c5?source=rss----4869a79d7e7f---4) on how the Verus Protocol handles cross-chain communication (PBaaS-chains and more) in a decentralized and provable way.### Safeguards against bridge hacks\nThreats caused by malicious notary witnesses, or stolen keys to drain funds are not viable against the Verus-Ethereum Bridge. To successfully mount an attack on the bridge, if a majority of witnesses were colluding or got their private keys stolen the following would need to happen:- Colluding, malicious witnesses.\n- Fake block producers with more combined hash and stake power than the publicly validated Verus blockchain. [\ud83d\udc49 Verus Paper: A Provable Hybrid Solution to 51% Hash Attacks](https://verus.io/papers/VerusPoP.pdf)\n- Developers helping them by creating an alternate protocol for the shadow chain.These requirements are very close to the requirements of attacking any blockchain. The bridge even provides a way to defend against such an unlikely scenario.", "./raw_text_input_docs/README_eth-bridge.md"], ["How does the Verus-Ethereum Bridge protect against malicious notary witnesses or stolen keys?", "The Verus-Ethereum Bridge is designed to be secure against malicious notary witnesses or stolen keys. To mount a successful attack on the bridge, a majority of witnesses would need to collude, fake block producers with more combined hash and stake power than the publicly validated Verus blockchain would need to be created, and developers would need to create an alternate protocol for the shadow chain. This is a highly unlikely scenario, and the bridge provides a way to defend against it.", "Every 10 blocks the block producers create a notarization (when there is traffic over the bridge). They create these digital receipts for both Verus and Ethereum. The digital receipts, called \u201cnotarizations\", contain, among other things: the \u201cstateroot\u201d ([Merkle Mountain Range](https://www.investopedia.com/terms/m/merkle-root-cryptocurrency.asp) for Verus, [Merkle Patricia Trie](https://ethereum.org/en/developers/docs/data-structures-and-encoding/patricia-merkle-trie/) for Ethereum), the blockheight, blockhash and the gas price for Ethereum. The notarizations have to be agreed to by the block producers (miners and stakers) and are then mined into the Verus blockchain.\ud83d\udc49 [Read more here](https://medium.com/veruscoin/verus-internet-protocol-vip-provable-decentralized-cross-chain-communication-8d9414a429c5?source=rss----4869a79d7e7f---4) on how the Verus Protocol handles cross-chain communication (PBaaS-chains and more) in a decentralized and provable way.### Safeguards against bridge hacks\nThreats caused by malicious notary witnesses, or stolen keys to drain funds are not viable against the Verus-Ethereum Bridge. To successfully mount an attack on the bridge, if a majority of witnesses were colluding or got their private keys stolen the following would need to happen:- Colluding, malicious witnesses.\n- Fake block producers with more combined hash and stake power than the publicly validated Verus blockchain. [\ud83d\udc49 Verus Paper: A Provable Hybrid Solution to 51% Hash Attacks](https://verus.io/papers/VerusPoP.pdf)\n- Developers helping them by creating an alternate protocol for the shadow chain.These requirements are very close to the requirements of attacking any blockchain. The bridge even provides a way to defend against such an unlikely scenario.", "./raw_text_input_docs/README_eth-bridge.md"]]], [["User:: I've got a few questions about using the Verus command line. How can I convert VRSCTEST to a PBaaS-chain using the Verus command line?", "AI Assistant:: To convert VRSCTEST to a PBaaS-chain, you can use the `sendcurrency` command with the following format:\n\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n\"amount\":10,\n\"convertto\":\"PBaaSChain\",\n\"exportto\":\"Bridge.PBaaSChain\",\n\"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\nThis command will convert 10 VRSCTEST units from the specified address to PBaaSChain units, using the Bridge.PBaaSChain gateway. Do you have any further questions about this process?", "User:: That helps, thanks. How can I convert PBaaS-chain units back to VRSCTEST units using the Verus command line?", "AI Assistant:: To convert PBaaS-chain units back to VRSCTEST units, you can use the `sendcurrency` command with the following format:\n\n```\n./verus -chain=PBaaSChain sendcurrency \"*\" '[{\n\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n\"amount\":10,\n\"convertto\":\"VRSCTEST\",\n\"exportto\":\"VRSCTEST\",\n\"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\nThis command will convert 10 PBaaSChain units from the specified address back to VRSCTEST units, using the Bridge.PBaaSChain gateway. Do you have any more questions about this process?", "User:: Actually, I do. How can I send VRSCTEST units from one address to another using the Verus command line?", "AI Assistant:: To send VRSCTEST units from one address to another, you can use the `sendcurrency` command with the following format:\n\n```\n./verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\n\"currency\":\"vrsctest\",\n\"address\":\"alice@\",\n\"amount\":10\n}]'\n```\n\nThis command will send 10 VRSCTEST units from the address \"bob@\" to the address \"alice@\". Do you have any more questions about sending VRSCTEST units?", "User:: How can I send VRSCTEST units from all private wallet funds to multiple recipients using the Verus command line?", "AI Assistant:: To send VRSCTEST units from all private wallet funds to multiple recipients, you can use the `sendcurrency` command with the following format:\n\n```\n./verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\n\"currency\":\"vrsctest\",\n\"address\":\"alice@:private\",\n\"amount\":10\n},\n{\n\"currency\":\"VRSCTEST\",\n\"address\":\"bob@:private\",\n\"amount\":10\n}]'\n```\n\nThis command will send 10 VRSCTEST units from all private wallet funds to each of the addresses \"alice@:private\" and \"bob@:private\". Do you have any more questions about this process?", "User:: How can I send VRSCTEST units cross-chain to a PBaaSChain using the Verus command line?", "AI Assistant:: To send VRSCTEST units cross-chain to a PBaaSChain, you can use the `sendcurrency` command with the following format:\n\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n\"amount\":10,\n\"exportto\":\"Bridge.PBaaSChain\"\n}]'\n```\n\nThis command will send 10 VRSCTEST units from the specified address to the PBaaSChain, using the Bridge.PBaaSChain gateway. Do you have any more questions about cross-chain transactions?"], "AI Assistant", "", "N/A", [["How can I convert VRSCTEST to a PBaaS-chain using the Verus command line?", "To convert VRSCTEST to a PBaaS-chain, you can use the `sendcurrency` command with the following format:\n\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"convertto\":\"PBaaSChain\",\n  \"exportto\":\"Bridge.PBaaSChain\",\n  \"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\nThis command will convert 10 VRSCTEST units from the specified address to PBaaSChain units, using the Bridge.PBaaSChain gateway.", "### Converting VRSCTEST cross-chain to PBaaS-chain\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"convertto\":\"PBaaSChain\",\n  \"exportto\":\"Bridge.PBaaSChain\",\n  \"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\n### Converting PBaaS-chain to VRSCTEST\n``` json\n./verus -chain=PBaaSChain sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"convertto\":\"VRSCTEST\",\n  \"exportto\":\"VRSCTEST\",\n  \"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\n## Sending\nSending VRSCTEST from a single address (bob@) to a single recipient (alice@):\n``` json\n./verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\n  \"currency\":\"vrsctest\",\n  \"address\":\"alice@\",\n  \"amount\":10\n}]'\n```\n\nSending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\n  \"currency\":\"vrsctest\",\n  \"address\":\"alice@:private\",\n  \"amount\":10\n},\n{\n  \"currency\":\"VRSCTEST\",\n  \"address\":\"bob@:private\",\n  \"amount\":10\n}]'\n```\n\nSending VRSCTEST cross-chain to PBaaSChain:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"exportto\":\"Bridge.PBaaSChain\"\n}]'\n```", "./raw_text_input_docs/sendcurrency-examples.md"], ["How can I convert PBaaS-chain units back to VRSCTEST units using the Verus command line?", "To convert PBaaS-chain units back to VRSCTEST units, you can use the `sendcurrency` command with the following format:\n\n```\n./verus -chain=PBaaSChain sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"convertto\":\"VRSCTEST\",\n  \"exportto\":\"VRSCTEST\",\n  \"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\nThis command will convert 10 PBaaSChain units from the specified address back to VRSCTEST units, using the Bridge.PBaaSChain gateway.", "### Converting VRSCTEST cross-chain to PBaaS-chain\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"convertto\":\"PBaaSChain\",\n  \"exportto\":\"Bridge.PBaaSChain\",\n  \"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\n### Converting PBaaS-chain to VRSCTEST\n``` json\n./verus -chain=PBaaSChain sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"convertto\":\"VRSCTEST\",\n  \"exportto\":\"VRSCTEST\",\n  \"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\n## Sending\nSending VRSCTEST from a single address (bob@) to a single recipient (alice@):\n``` json\n./verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\n  \"currency\":\"vrsctest\",\n  \"address\":\"alice@\",\n  \"amount\":10\n}]'\n```\n\nSending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\n  \"currency\":\"vrsctest\",\n  \"address\":\"alice@:private\",\n  \"amount\":10\n},\n{\n  \"currency\":\"VRSCTEST\",\n  \"address\":\"bob@:private\",\n  \"amount\":10\n}]'\n```\n\nSending VRSCTEST cross-chain to PBaaSChain:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"exportto\":\"Bridge.PBaaSChain\"\n}]'\n```", "./raw_text_input_docs/sendcurrency-examples.md"], ["How can I send VRSCTEST units from one address to another using the Verus command line?", "To send VRSCTEST units from one address to another, you can use the `sendcurrency` command with the following format:\n\n```\n./verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\n  \"currency\":\"vrsctest\",\n  \"address\":\"alice@\",\n  \"amount\":10\n}]'\n```\n\nThis command will send 10 VRSCTEST units from the address \"bob@\" to the address \"alice@\".", "### Converting VRSCTEST cross-chain to PBaaS-chain\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"convertto\":\"PBaaSChain\",\n  \"exportto\":\"Bridge.PBaaSChain\",\n  \"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\n### Converting PBaaS-chain to VRSCTEST\n``` json\n./verus -chain=PBaaSChain sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"convertto\":\"VRSCTEST\",\n  \"exportto\":\"VRSCTEST\",\n  \"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\n## Sending\nSending VRSCTEST from a single address (bob@) to a single recipient (alice@):\n``` json\n./verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\n  \"currency\":\"vrsctest\",\n  \"address\":\"alice@\",\n  \"amount\":10\n}]'\n```\n\nSending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\n  \"currency\":\"vrsctest\",\n  \"address\":\"alice@:private\",\n  \"amount\":10\n},\n{\n  \"currency\":\"VRSCTEST\",\n  \"address\":\"bob@:private\",\n  \"amount\":10\n}]'\n```\n\nSending VRSCTEST cross-chain to PBaaSChain:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"exportto\":\"Bridge.PBaaSChain\"\n}]'\n```", "./raw_text_input_docs/sendcurrency-examples.md"], ["How can I send VRSCTEST units from all private wallet funds to multiple recipients using the Verus command line?", "To send VRSCTEST units from all private wallet funds to multiple recipients, you can use the `sendcurrency` command with the following format:\n\n```\n./verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\n  \"currency\":\"vrsctest\",\n  \"address\":\"alice@:private\",\n  \"amount\":10\n},\n{\n  \"currency\":\"VRSCTEST\",\n  \"address\":\"bob@:private\",\n  \"amount\":10\n}]'\n```\n\nThis command will send 10 VRSCTEST units from all private wallet funds to each of the addresses \"alice@:private\" and \"bob@:private\".", "### Converting VRSCTEST cross-chain to PBaaS-chain\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"convertto\":\"PBaaSChain\",\n  \"exportto\":\"Bridge.PBaaSChain\",\n  \"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\n### Converting PBaaS-chain to VRSCTEST\n``` json\n./verus -chain=PBaaSChain sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"convertto\":\"VRSCTEST\",\n  \"exportto\":\"VRSCTEST\",\n  \"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\n## Sending\nSending VRSCTEST from a single address (bob@) to a single recipient (alice@):\n``` json\n./verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\n  \"currency\":\"vrsctest\",\n  \"address\":\"alice@\",\n  \"amount\":10\n}]'\n```\n\nSending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\n  \"currency\":\"vrsctest\",\n  \"address\":\"alice@:private\",\n  \"amount\":10\n},\n{\n  \"currency\":\"VRSCTEST\",\n  \"address\":\"bob@:private\",\n  \"amount\":10\n}]'\n```\n\nSending VRSCTEST cross-chain to PBaaSChain:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"exportto\":\"Bridge.PBaaSChain\"\n}]'\n```", "./raw_text_input_docs/sendcurrency-examples.md"], ["How can I send VRSCTEST units cross-chain to a PBaaSChain using the Verus command line?", "To send VRSCTEST units cross-chain to a PBaaSChain, you can use the `sendcurrency` command with the following format:\n\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"exportto\":\"Bridge.PBaaSChain\"\n}]'\n```\n\nThis command will send 10 VRSCTEST units from the specified address to the PBaaSChain, using the Bridge.PBaaSChain gateway.", "### Converting VRSCTEST cross-chain to PBaaS-chain\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"convertto\":\"PBaaSChain\",\n  \"exportto\":\"Bridge.PBaaSChain\",\n  \"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\n### Converting PBaaS-chain to VRSCTEST\n``` json\n./verus -chain=PBaaSChain sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"convertto\":\"VRSCTEST\",\n  \"exportto\":\"VRSCTEST\",\n  \"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\n## Sending\nSending VRSCTEST from a single address (bob@) to a single recipient (alice@):\n``` json\n./verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\n  \"currency\":\"vrsctest\",\n  \"address\":\"alice@\",\n  \"amount\":10\n}]'\n```\n\nSending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\n  \"currency\":\"vrsctest\",\n  \"address\":\"alice@:private\",\n  \"amount\":10\n},\n{\n  \"currency\":\"VRSCTEST\",\n  \"address\":\"bob@:private\",\n  \"amount\":10\n}]'\n```\n\nSending VRSCTEST cross-chain to PBaaSChain:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"exportto\":\"Bridge.PBaaSChain\"\n}]'\n```", "./raw_text_input_docs/sendcurrency-examples.md"]]], [["User:: I've been learning about Verus and I'm curious about its token currencies. What are simple token currencies in Verus, and what are their characteristics?", "AI Assistant:: Simple token currencies in Verus are currencies without reserves. They can be either decentralized, with a static supply, or centralized, where the owner of the rootID can mint new tokens and anyone can burn them. These currencies can support various use cases, including being mapped to Ethereum ERC-20s, and can be used as reserves in basket currencies.", "User:: That's interesting. I've also heard about the Verus-Ethereum Bridge. How does it work, and what are its benefits?", "AI Assistant:: The Verus-Ethereum Bridge is a non-custodial bridge that allows currencies and tokens to be sent between Verus and Ethereum. It ensures that tokens and currencies are never in anyone's custody and are proven and verified by consensus rules. This bridge enables the export of any Verus currency or token to Ethereum as an ERC-20, and also allows existing ERC-20 tokens to be mapped one-to-one as Verus currencies, taking advantage of Verus' L1 features.", "User:: That sounds amazing. What is the significance of the Verus-Ethereum Bridge in terms of token compatibility?", "AI Assistant:: The Verus-Ethereum Bridge allows for seamless compatibility between Verus and Ethereum tokens. Any Verus currency or token can be exported to Ethereum as an ERC-20, and any existing ERC-20 token can be mapped to a Verus currency, allowing them to coexist and interact on both platforms.", "User:: Going back to simple token currencies, can they be used as reserves in basket currencies?", "AI Assistant:: Yes, simple token currencies in Verus can be used as reserves in basket currencies. This adds flexibility and functionality to the use cases supported by simple token currencies."], "AI Assistant", "", "N/A", [["What are simple token currencies in Verus, and what are their characteristics?", "Simple token currencies in Verus are currencies without reserves. They can be either decentralized, with a static supply, or centralized, where the owner of the rootID can mint new tokens and anyone can burn them. These currencies can support various use cases, including being mapped to Ethereum ERC-20s, and can be used as reserves in basket currencies.", "## Simple token currencies\nSimple token currencies and are just currencies without any reserves. They are not as exciting as the basket currencies, yet still offer much value. With all the parameters that can be added, subIDs created and decentralized crowdfund mechanisms, these currencies can support a lot of use cases that are difficult to do with alternative protocols.The supply of this type of currency is static when it\u2019s a decentralized version. When it\u2019s a centralized version, the owner of the rootID can mint tokens into existence, and anyone can burn them.This option is also used to create currencies that are mapped to Ethereum ERC-20s. Which means you can send those ERC-20s over to Verus, or from Verus to the ERC-20. This is made possible with the non-custodial Verus-Ethereum Bridge. You can read more about it here.And of course, a simple token currency can be one of the reserves in a basket currency.## Ethereum ERC-20 \nThe Verus-Ethereum Bridge makes it possible for currencies and tokens to be send over to Ethereum, and back to Verus. It is a true non-custodial bridge. All tokens and currencies flowing over the bridge are never in anyone\u2019s custody, and are proven and verified by consensus rules. [Everything on the Verus-Ethereum Bridge here.](/eth-bridge/)Any currency and token, on Verus or any other PBaaS-blockchain, can be exported to Ethereum as an ERC-20. They can then be used in the Ethereum ecosystem.Also, any already existing ERC-20 token can be mapped one-to-one as a Verus currency. Meaning any ERC-20 token can live on the Verus blockchain (or any other PBaaS-chain) and take advantage of all the L1 features.", "./raw_text_input_docs/README_currencies.md"], ["How does the Verus-Ethereum Bridge work, and what are its benefits?", "The Verus-Ethereum Bridge is a non-custodial bridge that allows currencies and tokens to be sent between Verus and Ethereum. It ensures that tokens and currencies are never in anyone's custody and are proven and verified by consensus rules. This bridge enables the export of any Verus currency or token to Ethereum as an ERC-20, and also allows existing ERC-20 tokens to be mapped one-to-one as Verus currencies, taking advantage of Verus' L1 features.", "## Simple token currencies\nSimple token currencies and are just currencies without any reserves. They are not as exciting as the basket currencies, yet still offer much value. With all the parameters that can be added, subIDs created and decentralized crowdfund mechanisms, these currencies can support a lot of use cases that are difficult to do with alternative protocols.The supply of this type of currency is static when it\u2019s a decentralized version. When it\u2019s a centralized version, the owner of the rootID can mint tokens into existence, and anyone can burn them.This option is also used to create currencies that are mapped to Ethereum ERC-20s. Which means you can send those ERC-20s over to Verus, or from Verus to the ERC-20. This is made possible with the non-custodial Verus-Ethereum Bridge. You can read more about it here.And of course, a simple token currency can be one of the reserves in a basket currency.## Ethereum ERC-20 \nThe Verus-Ethereum Bridge makes it possible for currencies and tokens to be send over to Ethereum, and back to Verus. It is a true non-custodial bridge. All tokens and currencies flowing over the bridge are never in anyone\u2019s custody, and are proven and verified by consensus rules. [Everything on the Verus-Ethereum Bridge here.](/eth-bridge/)Any currency and token, on Verus or any other PBaaS-blockchain, can be exported to Ethereum as an ERC-20. They can then be used in the Ethereum ecosystem.Also, any already existing ERC-20 token can be mapped one-to-one as a Verus currency. Meaning any ERC-20 token can live on the Verus blockchain (or any other PBaaS-chain) and take advantage of all the L1 features.", "./raw_text_input_docs/README_currencies.md"], ["What is the significance of the Verus-Ethereum Bridge in terms of token compatibility?", "The Verus-Ethereum Bridge allows for seamless compatibility between Verus and Ethereum tokens. Any Verus currency or token can be exported to Ethereum as an ERC-20, and any existing ERC-20 token can be mapped to a Verus currency, allowing them to coexist and interact on both platforms.", "## Simple token currencies\nSimple token currencies and are just currencies without any reserves. They are not as exciting as the basket currencies, yet still offer much value. With all the parameters that can be added, subIDs created and decentralized crowdfund mechanisms, these currencies can support a lot of use cases that are difficult to do with alternative protocols.The supply of this type of currency is static when it\u2019s a decentralized version. When it\u2019s a centralized version, the owner of the rootID can mint tokens into existence, and anyone can burn them.This option is also used to create currencies that are mapped to Ethereum ERC-20s. Which means you can send those ERC-20s over to Verus, or from Verus to the ERC-20. This is made possible with the non-custodial Verus-Ethereum Bridge. You can read more about it here.And of course, a simple token currency can be one of the reserves in a basket currency.## Ethereum ERC-20 \nThe Verus-Ethereum Bridge makes it possible for currencies and tokens to be send over to Ethereum, and back to Verus. It is a true non-custodial bridge. All tokens and currencies flowing over the bridge are never in anyone\u2019s custody, and are proven and verified by consensus rules. [Everything on the Verus-Ethereum Bridge here.](/eth-bridge/)Any currency and token, on Verus or any other PBaaS-blockchain, can be exported to Ethereum as an ERC-20. They can then be used in the Ethereum ecosystem.Also, any already existing ERC-20 token can be mapped one-to-one as a Verus currency. Meaning any ERC-20 token can live on the Verus blockchain (or any other PBaaS-chain) and take advantage of all the L1 features.", "./raw_text_input_docs/README_currencies.md"], ["Can simple token currencies in Verus be used as reserves in basket currencies?", "Yes, simple token currencies in Verus can be used as reserves in basket currencies. This adds flexibility and functionality to the use cases supported by simple token currencies.", "## Simple token currencies\nSimple token currencies and are just currencies without any reserves. They are not as exciting as the basket currencies, yet still offer much value. With all the parameters that can be added, subIDs created and decentralized crowdfund mechanisms, these currencies can support a lot of use cases that are difficult to do with alternative protocols.The supply of this type of currency is static when it\u2019s a decentralized version. When it\u2019s a centralized version, the owner of the rootID can mint tokens into existence, and anyone can burn them.This option is also used to create currencies that are mapped to Ethereum ERC-20s. Which means you can send those ERC-20s over to Verus, or from Verus to the ERC-20. This is made possible with the non-custodial Verus-Ethereum Bridge. You can read more about it here.And of course, a simple token currency can be one of the reserves in a basket currency.## Ethereum ERC-20 \nThe Verus-Ethereum Bridge makes it possible for currencies and tokens to be send over to Ethereum, and back to Verus. It is a true non-custodial bridge. All tokens and currencies flowing over the bridge are never in anyone\u2019s custody, and are proven and verified by consensus rules. [Everything on the Verus-Ethereum Bridge here.](/eth-bridge/)Any currency and token, on Verus or any other PBaaS-blockchain, can be exported to Ethereum as an ERC-20. They can then be used in the Ethereum ecosystem.Also, any already existing ERC-20 token can be mapped one-to-one as a Verus currency. Meaning any ERC-20 token can live on the Verus blockchain (or any other PBaaS-chain) and take advantage of all the L1 features.", "./raw_text_input_docs/README_currencies.md"]]], [["User:: I'm trying to understand the limits of Verus. What is the recommended absolute limit for all currency supplies in Verus?", "AI Assistant:: The recommended absolute limit for all currency supplies in Verus is 10 billion (-1 SATOSHI) with 8 decimal places (9999999999.99999999). This limit applies to all currency supplies, including those with conversions and extended tail emissions for blockchains. Does that make sense?", "User:: I'm also trying to understand the components of a PBaaS blockchain definition in Verus. Can you walk me through them?", "AI Assistant:: When defining a PBaaS blockchain in Verus, the components include:\n\n1. `name`: The name of the chain.\n2. `options`: An integer value, in this case set to 264.\n3. `currencies`: An array of currencies that the chain's native currency can be converted into.\n4. `conversions`: An array defining the conversion ratios between the chain's native currency and each currency on the chain.\n5. `eras`: An array defining the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle.\n6. `notaries`: An array of VerusIDs that will serve as notaries on the chain.\n7. `minnotariesconfirm`: An integer for the minimum number of notaries needed to confirm a block.\n8. `nodes`: An array describing the network addresses of the nodes on the chain, as well as their IDs.\n9. `gatewayconvertername`: The name of the bridge converter.\n10. `gatewayconverterissuance`: The initial issuance of the bridge converter's native token.\n\nAdditionally, the bridge definition has its own components:\n\n1. `currencies`: An array of currency tickers that the bridge supports (including the native coins of the chains being bridged).\n2. `initialcontributions`: An array specifying the initial liquidity for each currency in the bridge.\n3. `initialsupply`: The initial supply for the bridge's native token.\n\nI hope that helps! Do you have any further questions about PBaaS blockchain definitions in Verus?"], "AI Assistant", "", "N/A", [["What is the recommended absolute limit for all currency supplies in Verus?", "The recommended absolute limit for all currency supplies in Verus is 10 billion (-1 SATOSHI) with 8 decimal places (9999999999.99999999). This limit applies to all currency supplies, including those with conversions and extended tail emissions for blockchains.", "::: danger Limit for all currency supplies (10 billion)\n10 billion (-1 SATOSHI) with 8 decimal places (9999999999.99999999) is now the recommended absolute limit for all currency supplies, including over time with conversions and extended tail emissions for blockchains.\n:::### Blockchain 1``` json\n./verus -chain=VRSCTEST definecurrency '{\n  \"name\":\"PBaaSChain\",\n  \"options\":264,\n  \"currencies\":[\"VRSCTEST\"],\n  \"conversions\":[1],\n  \"eras\":[\n    {\n      \"reward\":1200000000,\n      \"decay\":0,\n      \"halving\":0,\n      \"eraend\":0\n    }\n  ],\n  \"notaries\":[\n    \"Notary1@\",\n    \"Notary2@\",\n    \"Notary3@\"\n  ],\n  \"minnotariesconfirm\":2,\n  \"nodes\":[\n    {\n      \"networkaddress\":\"111.111.111.111:10000\",\n      \"nodeidentity\":\"Node1@\"\n    },\n    {\n      \"networkaddress\":\"111.111.111.112:10000\",\n      \"nodeidentity\":\"Node2@\"\n    }\n  ],\n  \"gatewayconvertername\":\"Bridge\",\n  \"gatewayconverterissuance\":1000000\n  }' \n  '{\n    \"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\n    \"initialcontributions\":[371747.20398827,0,1000000],\n    \"initialsupply\":3000000\n  }'\n```### Blockchain 2", "./raw_text_input_docs/define-pbaas.md"], ["What are the components of a PBaaS blockchain definition in Verus?", "When defining a PBaaS blockchain in Verus, the components include:\n\n1. `name`: The name of the chain.\n2. `options`: An integer value, in this case set to 264.\n3. `currencies`: An array of currencies that the chain's native currency can be converted into.\n4. `conversions`: An array defining the conversion ratios between the chain's native currency and each currency on the chain.\n5. `eras`: An array defining the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle.\n6. `notaries`: An array of VerusIDs that will serve as notaries on the chain.\n7. `minnotariesconfirm`: An integer for the minimum number of notaries needed to confirm a block.\n8. `nodes`: An array describing the network addresses of the nodes on the chain, as well as their IDs.\n9. `gatewayconvertername`: The name of the bridge converter.\n10. `gatewayconverterissuance`: The initial issuance of the bridge converter's native token.\n\nAdditionally, the bridge definition has its own components:\n\n1. `currencies`: An array of currency tickers that the bridge supports (including the native coins of the chains being bridged).\n2. `initialcontributions`: An array specifying the initial liquidity for each currency in the bridge.\n3. `initialsupply`: The initial supply for the bridge's native token.", "::: danger Limit for all currency supplies (10 billion)\n10 billion (-1 SATOSHI) with 8 decimal places (9999999999.99999999) is now the recommended absolute limit for all currency supplies, including over time with conversions and extended tail emissions for blockchains.\n:::### Blockchain 1``` json\n./verus -chain=VRSCTEST definecurrency '{\n  \"name\":\"PBaaSChain\",\n  \"options\":264,\n  \"currencies\":[\"VRSCTEST\"],\n  \"conversions\":[1],\n  \"eras\":[\n    {\n      \"reward\":1200000000,\n      \"decay\":0,\n      \"halving\":0,\n      \"eraend\":0\n    }\n  ],\n  \"notaries\":[\n    \"Notary1@\",\n    \"Notary2@\",\n    \"Notary3@\"\n  ],\n  \"minnotariesconfirm\":2,\n  \"nodes\":[\n    {\n      \"networkaddress\":\"111.111.111.111:10000\",\n      \"nodeidentity\":\"Node1@\"\n    },\n    {\n      \"networkaddress\":\"111.111.111.112:10000\",\n      \"nodeidentity\":\"Node2@\"\n    }\n  ],\n  \"gatewayconvertername\":\"Bridge\",\n  \"gatewayconverterissuance\":1000000\n  }' \n  '{\n    \"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\n    \"initialcontributions\":[371747.20398827,0,1000000],\n    \"initialsupply\":3000000\n  }'\n```### Blockchain 2", "./raw_text_input_docs/define-pbaas.md"]]], [["User:: I'm trying to understand more about VerusPay Invoices and how they're used. Can you tell me, what is the purpose of standardizing the serialization and deserialization of VerusPay Invoices and VerusPay InvoiceDetails?", "AI Assistant:: The purpose of standardizing the serialization and deserialization of VerusPay Invoices and VerusPay InvoiceDetails is to enable efficient transmission and storage of invoices across different systems and languages without loss of fidelity or meaning. By standardizing the way invoices are serialized and deserialized, we can ensure that invoices can be accurately and reliably transmitted and stored, regardless of the system or language being used.", "User:: That makes sense. I'm also curious about how to package a VerusPay Invoice into a deeplink or QR code readable by wallets like Verus Mobile. Can you walk me through that process?", "AI Assistant:: To package a VerusPay Invoice into a deeplink or QR code, you need to serialize the invoice without its 20-byte VDXF key, format the bytes into a base64url string, and then create a deeplink URL in the following format:\n\n`[vrsc::applications.wallet VDXF ID]://x-callback-url/[veruspay.vrsc::invoice VDXF ID]/[VerusPay invoice bytes in base64url format]`\n\nThis will create a deeplink or QR code that can be scanned by a VerusPay supporting wallet application, such as Verus Mobile.", "User:: And what's the purpose of packaging a VerusPay Invoice into a deeplink or QR code in the first place?", "AI Assistant:: The purpose of packaging a VerusPay Invoice into a deeplink or QR code is to allow it to be scanned by a VerusPay supporting wallet application, or linked to by an application or service to trigger an invoice request. By packaging the invoice in this way, you can easily share it with others, or use it to initiate a payment request. It's a convenient and efficient way to transmit and process invoices."], "AI Assistant", "", "N/A", [["What is the purpose of standardizing the serialization and deserialization of VerusPay Invoices and VerusPay InvoiceDetails?", "The purpose of standardizing the serialization and deserialization of VerusPay Invoices and VerusPay InvoiceDetails is to enable efficient transmission and storage of invoices across different systems and languages without loss of fidelity or meaning.", "The specification emphasizes a standardized approach to converting the VerusPay Invoice and VerusPay InvoiceDetails into a binary format (serialization) and back (deserialization) to enable efficient transmission and storage. This process ensures that invoices can be shared, processed, and stored across different systems and languages without loss of fidelity or meaning.\n\n### Packaging into Deeplinks and QR Codes\n\nTo package a VerusPay Invoice into a deeplink or QR code readable by wallets like [Verus Mobile](https://github.com/VerusCoin/Verus-Mobile), the invoice must be serialized using the method described above, without its 20-byte [VDXF](/vdxf/) key included, and then its bytes formatted into a base64url string. Then, a deeplink URL can be created as follows:\n\n```[vrsc::applications.wallet VDXF ID]://x-callback-url/[veruspay.vrsc::invoice VDXF ID]/[VerusPay invoice bytes in base64url format]```\n\nIn practice, this creates URLs such as `i5jtwbp6zymeay9llnraglgjqgdrffsau4://x-callback-url/iEETy7La3FTN2Sd2hNRgepek5S8x8eeUeQ/AzABpJ-uxwACFAAtMxHDi_0hkJLSrvRJgEvos77-pu-eojVjXjKBJP80KdufnpG2Ti0`, which can then be packaged into a QR code and scanned by a VerusPay supporting wallet application, or linked to by an application or service to trigger an invoice request.", "./raw_text_input_docs/invoices.md"], ["How do I package a VerusPay Invoice into a deeplink or QR code readable by wallets like Verus Mobile?", "To package a VerusPay Invoice into a deeplink or QR code, you need to serialize the invoice without its 20-byte VDXF key, format the bytes into a base64url string, and then create a deeplink URL in the following format:\n\n`[vrsc::applications.wallet VDXF ID]://x-callback-url/[veruspay.vrsc::invoice VDXF ID]/[VerusPay invoice bytes in base64url format]`", "The specification emphasizes a standardized approach to converting the VerusPay Invoice and VerusPay InvoiceDetails into a binary format (serialization) and back (deserialization) to enable efficient transmission and storage. This process ensures that invoices can be shared, processed, and stored across different systems and languages without loss of fidelity or meaning.\n\n### Packaging into Deeplinks and QR Codes\n\nTo package a VerusPay Invoice into a deeplink or QR code readable by wallets like [Verus Mobile](https://github.com/VerusCoin/Verus-Mobile), the invoice must be serialized using the method described above, without its 20-byte [VDXF](/vdxf/) key included, and then its bytes formatted into a base64url string. Then, a deeplink URL can be created as follows:\n\n```[vrsc::applications.wallet VDXF ID]://x-callback-url/[veruspay.vrsc::invoice VDXF ID]/[VerusPay invoice bytes in base64url format]```\n\nIn practice, this creates URLs such as `i5jtwbp6zymeay9llnraglgjqgdrffsau4://x-callback-url/iEETy7La3FTN2Sd2hNRgepek5S8x8eeUeQ/AzABpJ-uxwACFAAtMxHDi_0hkJLSrvRJgEvos77-pu-eojVjXjKBJP80KdufnpG2Ti0`, which can then be packaged into a QR code and scanned by a VerusPay supporting wallet application, or linked to by an application or service to trigger an invoice request.", "./raw_text_input_docs/invoices.md"], ["What is the purpose of packaging a VerusPay Invoice into a deeplink or QR code?", "The purpose of packaging a VerusPay Invoice into a deeplink or QR code is to allow it to be scanned by a VerusPay supporting wallet application, or linked to by an application or service to trigger an invoice request.", "The specification emphasizes a standardized approach to converting the VerusPay Invoice and VerusPay InvoiceDetails into a binary format (serialization) and back (deserialization) to enable efficient transmission and storage. This process ensures that invoices can be shared, processed, and stored across different systems and languages without loss of fidelity or meaning.\n\n### Packaging into Deeplinks and QR Codes\n\nTo package a VerusPay Invoice into a deeplink or QR code readable by wallets like [Verus Mobile](https://github.com/VerusCoin/Verus-Mobile), the invoice must be serialized using the method described above, without its 20-byte [VDXF](/vdxf/) key included, and then its bytes formatted into a base64url string. Then, a deeplink URL can be created as follows:\n\n```[vrsc::applications.wallet VDXF ID]://x-callback-url/[veruspay.vrsc::invoice VDXF ID]/[VerusPay invoice bytes in base64url format]```\n\nIn practice, this creates URLs such as `i5jtwbp6zymeay9llnraglgjqgdrffsau4://x-callback-url/iEETy7La3FTN2Sd2hNRgepek5S8x8eeUeQ/AzABpJ-uxwACFAAtMxHDi_0hkJLSrvRJgEvos77-pu-eojVjXjKBJP80KdufnpG2Ti0`, which can then be packaged into a QR code and scanned by a VerusPay supporting wallet application, or linked to by an application or service to trigger an invoice request.", "./raw_text_input_docs/invoices.md"]]], [["User:: Hey, I'm having trouble understanding how to set up a new blockchain with Verus. Can you help me with that? Specifically, what's the purpose of the `definecurrency` command?", "AI Assistant:: The `definecurrency` command is used to define a new currency or blockchain in Verus. Some of its key parameters include:\n\n* `name`: the name of the new currency or blockchain\n* `options`: an integer value that configures various properties of the currency or blockchain\n* `currencies`: a list of currencies that can be converted to the new currency\n* `preallocations`: an array of allocations of the new currency to specific addresses\n* `conversions`: a list of conversion ratios between the new currency and other currencies\n* `eras`: an array of block reward, decay, halving, and era end settings for the blockchain\n* `blocktime`: the time (in seconds) between blocks on the blockchain\n* `idregistrationfees`: the fee for registering an ID on the blockchain\n* `notaries`: a list of notary addresses that will validate transactions on the blockchain\n* `startblock`: the block number at which the new blockchain will start\n* `minnotariesconfirm`: the minimum number of notaries required to confirm a block\n* `nodes`: an array of node addresses and identities on the blockchain\n* `gatewayconvertername` and `gatewayconverterissuance`: settings for the bridge converter that allows funds to be moved on and off the blockchain\n\nDo you have any specific questions about these parameters, or would you like more information on how to use the `definecurrency` command?", "User:: Actually, I was wondering about the second JSON object that's passed to the `definecurrency` command. What's its purpose, and what are some of its key parameters?", "AI Assistant:: The second JSON object passed to the `definecurrency` command defines the bridge converter settings for the new blockchain. Some of its key parameters include:\n\n* `currencies`: a list of currencies supported by the bridge converter\n* `initialcontributions`: an array of initial liquidity contributions for each currency\n* `initialsupply`: the initial supply of the bridge converter's native token\n\nThis object configures the bridge converter, which allows for the exchange of assets between different blockchains. Does that make sense?", "User:: Yeah, that helps. But I'm still having trouble setting up my blockchain launch. Where can I get help with that?", "AI Assistant:: Don't worry, I'm here to help! If you need more assistance, you can visit the Verus Discord #pbaas-development channel, where the community is happy to help with setting up blockchain launches. You can ask your questions there, and someone will be able to guide you through the process."], "AI Assistant", "", "N/A", [["What is the purpose of the `definecurrency` command in Verus, and what are some of its key parameters?", "The `definecurrency` command is used to define a new currency or blockchain in Verus. Some of its key parameters include:\n\n* `name`: the name of the new currency or blockchain\n* `options`: an integer value that configures various properties of the currency or blockchain\n* `currencies`: a list of currencies that can be converted to the new currency\n* `preallocations`: an array of allocations of the new currency to specific addresses\n* `conversions`: a list of conversion ratios between the new currency and other currencies\n* `eras`: an array of block reward, decay, halving, and era end settings for the blockchain\n* `blocktime`: the time (in seconds) between blocks on the blockchain\n* `idregistrationfees`: the fee for registering an ID on the blockchain\n* `notaries`: a list of notary addresses that will validate transactions on the blockchain\n* `startblock`: the block number at which the new blockchain will start\n* `minnotariesconfirm`: the minimum number of notaries required to confirm a block\n* `nodes`: an array of node addresses and identities on the blockchain\n* `gatewayconvertername` and `gatewayconverterissuance`: settings for the bridge converter that allows funds to be moved on and off the blockchain", "``` json\n./verus -chain=vrsctest definecurrency '{\n  \"name\":\"v2\",\n  \"options\":264,\n  \"currencies\":[\"vrsctest\"],\n  \"preallocations\":[\n    {\n      \"allnotary1@\":800000\n    }\n  ],\n  \"conversions\":[1],\n  \"eras\":[\n    {\n      \"reward\":76800000000,\n      \"decay\":0,\n      \"halving\":525000,\n      \"eraend\":0\n    }\n  ],\n  \"blocktime\":10,\n  \"idregistrationfees\":25,\n  \"notaries\":[\n    \"allnotary1@\",\n    \"allnotary2@\",\n    \"allnotary3@\"\n    ],\n  \"startblock\":9500,\n  \"minnotariesconfirm\":2,\n  \"nodes\":[\n    {\n      \"networkaddress\":\"45.76.168.133:20022\",\n      \"nodeidentity\": \"allnotary1@\"\n    },\n    {\n      \"networkaddress\":\"149.28.95.28:20022\",\n      \"nodeidentity\":\"allnotary2@\"\n    },\n    {\n      \"networkaddress\":\"45.63.58.171:20022\",\n      \"nodeidentity\":\"allnotary3@\"\n    }\n  ],\n  \"gatewayconvertername\":\"Bridge\",\n  \"gatewayconverterissuance\":800000\n  }' \n  '{\n    \"currencies\":[\"VRSCTEST\",\"v2\"],\n    \"initialcontributions\":[2500,0],\n    \"initialsupply\":800000\n  }'\n```\n\n::: warning Need help setting up a blockchain launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::", "./raw_text_input_docs/define-pbaas.md"], ["What is the purpose of the second JSON object passed to the `definecurrency` command, and what are some of its key parameters?", "The second JSON object passed to the `definecurrency` command defines the bridge converter settings for the new blockchain. Some of its key parameters include:\n\n* `currencies`: a list of currencies supported by the bridge converter\n* `initialcontributions`: an array of initial liquidity contributions for each currency\n* `initialsupply`: the initial supply of the bridge converter's native token", "``` json\n./verus -chain=vrsctest definecurrency '{\n  \"name\":\"v2\",\n  \"options\":264,\n  \"currencies\":[\"vrsctest\"],\n  \"preallocations\":[\n    {\n      \"allnotary1@\":800000\n    }\n  ],\n  \"conversions\":[1],\n  \"eras\":[\n    {\n      \"reward\":76800000000,\n      \"decay\":0,\n      \"halving\":525000,\n      \"eraend\":0\n    }\n  ],\n  \"blocktime\":10,\n  \"idregistrationfees\":25,\n  \"notaries\":[\n    \"allnotary1@\",\n    \"allnotary2@\",\n    \"allnotary3@\"\n    ],\n  \"startblock\":9500,\n  \"minnotariesconfirm\":2,\n  \"nodes\":[\n    {\n      \"networkaddress\":\"45.76.168.133:20022\",\n      \"nodeidentity\": \"allnotary1@\"\n    },\n    {\n      \"networkaddress\":\"149.28.95.28:20022\",\n      \"nodeidentity\":\"allnotary2@\"\n    },\n    {\n      \"networkaddress\":\"45.63.58.171:20022\",\n      \"nodeidentity\":\"allnotary3@\"\n    }\n  ],\n  \"gatewayconvertername\":\"Bridge\",\n  \"gatewayconverterissuance\":800000\n  }' \n  '{\n    \"currencies\":[\"VRSCTEST\",\"v2\"],\n    \"initialcontributions\":[2500,0],\n    \"initialsupply\":800000\n  }'\n```\n\n::: warning Need help setting up a blockchain launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::", "./raw_text_input_docs/define-pbaas.md"], ["Where can I get help if I'm having trouble setting up a blockchain launch with Verus?", "You can get help with setting up a blockchain launch by visiting the Verus Discord #pbaas-development channel, where the community is happy to assist.", "``` json\n./verus -chain=vrsctest definecurrency '{\n  \"name\":\"v2\",\n  \"options\":264,\n  \"currencies\":[\"vrsctest\"],\n  \"preallocations\":[\n    {\n      \"allnotary1@\":800000\n    }\n  ],\n  \"conversions\":[1],\n  \"eras\":[\n    {\n      \"reward\":76800000000,\n      \"decay\":0,\n      \"halving\":525000,\n      \"eraend\":0\n    }\n  ],\n  \"blocktime\":10,\n  \"idregistrationfees\":25,\n  \"notaries\":[\n    \"allnotary1@\",\n    \"allnotary2@\",\n    \"allnotary3@\"\n    ],\n  \"startblock\":9500,\n  \"minnotariesconfirm\":2,\n  \"nodes\":[\n    {\n      \"networkaddress\":\"45.76.168.133:20022\",\n      \"nodeidentity\": \"allnotary1@\"\n    },\n    {\n      \"networkaddress\":\"149.28.95.28:20022\",\n      \"nodeidentity\":\"allnotary2@\"\n    },\n    {\n      \"networkaddress\":\"45.63.58.171:20022\",\n      \"nodeidentity\":\"allnotary3@\"\n    }\n  ],\n  \"gatewayconvertername\":\"Bridge\",\n  \"gatewayconverterissuance\":800000\n  }' \n  '{\n    \"currencies\":[\"VRSCTEST\",\"v2\"],\n    \"initialcontributions\":[2500,0],\n    \"initialsupply\":800000\n  }'\n```\n\n::: warning Need help setting up a blockchain launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::", "./raw_text_input_docs/define-pbaas.md"]]], [["User:: I'm trying to understand the Verus CLI wallet better. Can you explain what it is and how it differs from Verus Desktop?", "AI Assistant:: The Verus CLI (command-line-interface) wallet is an alternative to Verus Desktop, which allows users to interact with the Verus blockchain through the terminal. This means that instead of using a graphical user interface, users can use command-line commands to perform actions on the blockchain. It's a great option for those who prefer a more technical and customizable experience.", "User:: That makes sense. I've seen the `verusd` command being used. What's its purpose in Verus CLI?", "AI Assistant:: The `verusd` command is used to start the Verus blockchain. The `d` in `verusd` stands for daemon, which is a program that runs as a background process. It's a crucial command to get started with Verus CLI.", "User:: I've seen some variations of the `verusd` command. What's the difference between running `./verusd` and `./verusd -chain=VRSCTEST`?", "AI Assistant:: Running `./verusd` starts the main Verus blockchain, while running `./verusd -chain=VRSCTEST` starts the testnet blockchain. The `-chain=VRSCTEST` flag specifies that you want to use the testnet chain instead of the main chain. So, if you want to test out Verus without affecting the main blockchain, you would use the testnet chain.", "User:: What about the `fetch-params` command? What's its purpose, and when should I use it?", "AI Assistant:: The `fetch-params` command is used to download the zcash parameters needed to get started with Verus. You should run it before using `verusd` when setting up a new system. It's an essential step to ensure that your Verus CLI is properly configured.", "User:: One more question. I've noticed that downloading the blockchain can take a while. Is there a way to speed up the process?", "AI Assistant:: Yes, there is! You can speed up the process of downloading the blockchain by running the `fetch-bootstrap` command, which allows you to bootstrap the blockchain. This can significantly reduce the time it takes to download the blockchain, making it a great option for those who want to get started with Verus CLI quickly."], "AI Assistant", "", "N/A", [["What is the Verus CLI wallet, and how does it differ from Verus Desktop?", "The Verus CLI (command-line-interface) wallet is an alternative to Verus Desktop, which allows users to interact with the Verus blockchain through the terminal. This means that instead of using a graphical user interface, users can use command-line commands to perform actions on the blockchain.", "# Setup verus-cli\n\n### [Download verus-cli for Windows, macOS and Linux](https://verus.io/wallet/)\n\nThe CLI (command-line-interface) wallet is an alternative to Verus Desktop, and is used through the terminal.\n\nIn the packaged file you find ``verusd``, ``verus``, ``fetch-bootstrap``, ``fetch-params`` and accompanying text files to [verify](https://verus.io/signatures) signatures.\n\nRun ``verusd`` to start the blockchain. The ``d`` stands for daemon. A daemon is a program that runs as a background process.\n\nRun ``verus`` to interact with the blockchain.\n\n::: warning New System \nRun ``fetch-params`` before using ``verusd`` when you are running a new system. It downloads the zcash parameters needed to get started.\n:::\n\n::: tip Bootstrap Blockchain\nDownloading the blockchain can take up a long time, to speed it up you can bootstrap the blockchain. Run ``fetch-bootstrap``.\n:::\n\nExtract the packaged file on your computer, preferably where you can find it back easily.\n\n## Use Commands\nIn your terminal, go into the directory where you extracted verus-cli.\n\n### Start Verus Blockchain\n\n``` \n./verusd\n```\n\n### Start Testnet Blockchain\n``` \n./verusd -chain=VRSCTEST\n```", "./raw_text_input_docs/setup-cli.md"], ["What is the purpose of the `verusd` command in Verus CLI?", "The `verusd` command is used to start the Verus blockchain. The `d` in `verusd` stands for daemon, which is a program that runs as a background process.", "# Setup verus-cli\n\n### [Download verus-cli for Windows, macOS and Linux](https://verus.io/wallet/)\n\nThe CLI (command-line-interface) wallet is an alternative to Verus Desktop, and is used through the terminal.\n\nIn the packaged file you find ``verusd``, ``verus``, ``fetch-bootstrap``, ``fetch-params`` and accompanying text files to [verify](https://verus.io/signatures) signatures.\n\nRun ``verusd`` to start the blockchain. The ``d`` stands for daemon. A daemon is a program that runs as a background process.\n\nRun ``verus`` to interact with the blockchain.\n\n::: warning New System \nRun ``fetch-params`` before using ``verusd`` when you are running a new system. It downloads the zcash parameters needed to get started.\n:::\n\n::: tip Bootstrap Blockchain\nDownloading the blockchain can take up a long time, to speed it up you can bootstrap the blockchain. Run ``fetch-bootstrap``.\n:::\n\nExtract the packaged file on your computer, preferably where you can find it back easily.\n\n## Use Commands\nIn your terminal, go into the directory where you extracted verus-cli.\n\n### Start Verus Blockchain\n\n``` \n./verusd\n```\n\n### Start Testnet Blockchain\n``` \n./verusd -chain=VRSCTEST\n```", "./raw_text_input_docs/setup-cli.md"], ["What is the difference between running `./verusd` and `./verusd -chain=VRSCTEST`?", "Running `./verusd` starts the main Verus blockchain, while running `./verusd -chain=VRSCTEST` starts the testnet blockchain. The `-chain=VRSCTEST` flag specifies that you want to use the testnet chain instead of the main chain.", "# Setup verus-cli\n\n### [Download verus-cli for Windows, macOS and Linux](https://verus.io/wallet/)\n\nThe CLI (command-line-interface) wallet is an alternative to Verus Desktop, and is used through the terminal.\n\nIn the packaged file you find ``verusd``, ``verus``, ``fetch-bootstrap``, ``fetch-params`` and accompanying text files to [verify](https://verus.io/signatures) signatures.\n\nRun ``verusd`` to start the blockchain. The ``d`` stands for daemon. A daemon is a program that runs as a background process.\n\nRun ``verus`` to interact with the blockchain.\n\n::: warning New System \nRun ``fetch-params`` before using ``verusd`` when you are running a new system. It downloads the zcash parameters needed to get started.\n:::\n\n::: tip Bootstrap Blockchain\nDownloading the blockchain can take up a long time, to speed it up you can bootstrap the blockchain. Run ``fetch-bootstrap``.\n:::\n\nExtract the packaged file on your computer, preferably where you can find it back easily.\n\n## Use Commands\nIn your terminal, go into the directory where you extracted verus-cli.\n\n### Start Verus Blockchain\n\n``` \n./verusd\n```\n\n### Start Testnet Blockchain\n``` \n./verusd -chain=VRSCTEST\n```", "./raw_text_input_docs/setup-cli.md"], ["What is the purpose of the `fetch-params` command in Verus CLI, and when should it be used?", "The `fetch-params` command is used to download the zcash parameters needed to get started with Verus. It should be run before using `verusd` when setting up a new system.", "# Setup verus-cli\n\n### [Download verus-cli for Windows, macOS and Linux](https://verus.io/wallet/)\n\nThe CLI (command-line-interface) wallet is an alternative to Verus Desktop, and is used through the terminal.\n\nIn the packaged file you find ``verusd``, ``verus``, ``fetch-bootstrap``, ``fetch-params`` and accompanying text files to [verify](https://verus.io/signatures) signatures.\n\nRun ``verusd`` to start the blockchain. The ``d`` stands for daemon. A daemon is a program that runs as a background process.\n\nRun ``verus`` to interact with the blockchain.\n\n::: warning New System \nRun ``fetch-params`` before using ``verusd`` when you are running a new system. It downloads the zcash parameters needed to get started.\n:::\n\n::: tip Bootstrap Blockchain\nDownloading the blockchain can take up a long time, to speed it up you can bootstrap the blockchain. Run ``fetch-bootstrap``.\n:::\n\nExtract the packaged file on your computer, preferably where you can find it back easily.\n\n## Use Commands\nIn your terminal, go into the directory where you extracted verus-cli.\n\n### Start Verus Blockchain\n\n``` \n./verusd\n```\n\n### Start Testnet Blockchain\n``` \n./verusd -chain=VRSCTEST\n```", "./raw_text_input_docs/setup-cli.md"], ["How can I speed up the process of downloading the blockchain in Verus CLI?", "You can speed up the process of downloading the blockchain by running the `fetch-bootstrap` command, which allows you to bootstrap the blockchain. This can significantly reduce the time it takes to download the blockchain.", "# Setup verus-cli\n\n### [Download verus-cli for Windows, macOS and Linux](https://verus.io/wallet/)\n\nThe CLI (command-line-interface) wallet is an alternative to Verus Desktop, and is used through the terminal.\n\nIn the packaged file you find ``verusd``, ``verus``, ``fetch-bootstrap``, ``fetch-params`` and accompanying text files to [verify](https://verus.io/signatures) signatures.\n\nRun ``verusd`` to start the blockchain. The ``d`` stands for daemon. A daemon is a program that runs as a background process.\n\nRun ``verus`` to interact with the blockchain.\n\n::: warning New System \nRun ``fetch-params`` before using ``verusd`` when you are running a new system. It downloads the zcash parameters needed to get started.\n:::\n\n::: tip Bootstrap Blockchain\nDownloading the blockchain can take up a long time, to speed it up you can bootstrap the blockchain. Run ``fetch-bootstrap``.\n:::\n\nExtract the packaged file on your computer, preferably where you can find it back easily.\n\n## Use Commands\nIn your terminal, go into the directory where you extracted verus-cli.\n\n### Start Verus Blockchain\n\n``` \n./verusd\n```\n\n### Start Testnet Blockchain\n``` \n./verusd -chain=VRSCTEST\n```", "./raw_text_input_docs/setup-cli.md"]]], [["User:: Hey, I'm interested in learning more about VerusID. Can you tell me what it is and its significance in the Verus Protocol?", "AI Assistant:: VerusID is the first decentralized and self-sovereign identity of its kind, serving as the permanent namespace for the Verus Protocol. It's a building block for creating Web3 Dapps and allows individuals to have complete autonomy both online and offline. This is a fundamental component of the Verus ecosystem, and I'm happy to explain more about it.", "User:: That sounds fascinating. What are some of the key features of VerusID?", "AI Assistant:: VerusID has several key features, including:\n\n1. A permanent namespace for the Verus Protocol that can be registered by anyone.\n2. Functionality as a self-sovereign identity, empowering individuals with complete autonomy.\n3. Ability to launch fully interconnected, customizable, independent, and secure blockchains without coding.\n4. Capability to launch powerful currencies and tokens, including basket currencies (DeFi AMMs).\n5. Use as a controlled public storage system to publish and store data with multiple levels of nesting.\n6. Revocation and recovery authorities, allowing for autonomous revocation of access and recovery of assets and data.\n7. Friendly name address functionality, enabling sending, receiving, and holding assets.\n8. Integration with Verus Vault for theft-proof security.\n9. Participation in a peer-to-peer decentralized marketplace for VerusIDs, currencies, and tokens.\n10. Enhanced privacy features, allowing for anonymous sending and receiving of native assets.\n11. Creation of unforgable, verifiable signatures.\n\nThese features make VerusID a powerful tool for individuals and developers alike.", "User:: That's impressive. What kind of data can be stored and published using VerusID and VDXF?", "AI Assistant:: Using VerusID and VDXF, individuals can publish and store data with multiple levels of nesting, effectively creating a controlled public storage system. This allows for flexible and secure data management. You can think of it as a decentralized, autonomous, and secure way to store and share data."], "AI Assistant", "", "N/A", [["What is VerusID, and what is its significance in the Verus Protocol?", "VerusID is the first decentralized and self-sovereign identity of its kind, serving as the permanent namespace for the Verus Protocol. It's a building block for creating Web3 Dapps and allows individuals to have complete autonomy both online and offline.", "# IntroductionVerusID is the first decentralized and self-sovereign identity of its kind, the permanent namespace for the Verus Protocol, and the building block to create Web3 Dapps.## Feature List| Feature | Details | \n| :-----| :------ | \n| **Namespace** | VerusID is the permanent namespace for the Verus Protocol and can be registered by anyone. | \n| **Self-sovereign identity** | VerusID can function as a self-sovereign identity for anyone in the world, empowering individuals with complete autonomy both online and offline. |\n| [**Blockchain launches**](/blockchains/) | With the VerusID namespace anyone can launch fully interconnected, customizable, independent and secure blockchains, without any coding needed (just simple commands). | \n| [**Currency & token launches**](/currencies/) | With the VerusID namespace anyone can launch powerful currencies and tokens, including basket currencies (DeFi AMMs). |\n| [**Publish & store data**](/vdxf/README) | Use VerusID and VDXF as a controlled public storage system. Publish and store data with multiple levels of nesting. | \n| [**Revoking & recovering**](/verusid/#revoke-recover) | Each VerusID has revocation and recovery authorities (which are also VerusIDs). Autonomously revoke access to a VerusID, and recover all assets and data on a VerusID. | \n| [**Friendly name address**](/verusid/#friendly-name) | A VerusID is a friendly name address that can send, receive and hold assets. | \n| [**Verus Vault**](/verusid/#verus-vault) | Enable theft-proof Verus Vault. Set locks or timelocks to secure assets on a VerusID. | \n| [**Marketplace**](/verusid/#marketplace) | Peer-to-peer decentralized marketplace for VerusIDs and currencies and tokens. | \n| **Privacy** | Point a private address to a VerusID. Send and receive native assets with full anonimity. | \n| **Signatures** | Create unforgable, verifiable signatures with VerusID. Sign fi", "./raw_text_input_docs/README_addresses.md"], ["What are some of the key features of VerusID?", "VerusID has several key features, including:\n\n1. A permanent namespace for the Verus Protocol that can be registered by anyone.\n2. Functionality as a self-sovereign identity, empowering individuals with complete autonomy.\n3. Ability to launch fully interconnected, customizable, independent, and secure blockchains without coding.\n4. Capability to launch powerful currencies and tokens, including basket currencies (DeFi AMMs).\n5. Use as a controlled public storage system to publish and store data with multiple levels of nesting.\n6. Revocation and recovery authorities, allowing for autonomous revocation of access and recovery of assets and data.\n7. Friendly name address functionality, enabling sending, receiving, and holding assets.\n8. Integration with Verus Vault for theft-proof security.\n9. Participation in a peer-to-peer decentralized marketplace for VerusIDs, currencies, and tokens.\n10. Enhanced privacy features, allowing for anonymous sending and receiving of native assets.\n11. Creation of unforgable, verifiable signatures.", "# IntroductionVerusID is the first decentralized and self-sovereign identity of its kind, the permanent namespace for the Verus Protocol, and the building block to create Web3 Dapps.## Feature List| Feature | Details | \n| :-----| :------ | \n| **Namespace** | VerusID is the permanent namespace for the Verus Protocol and can be registered by anyone. | \n| **Self-sovereign identity** | VerusID can function as a self-sovereign identity for anyone in the world, empowering individuals with complete autonomy both online and offline. |\n| [**Blockchain launches**](/blockchains/) | With the VerusID namespace anyone can launch fully interconnected, customizable, independent and secure blockchains, without any coding needed (just simple commands). | \n| [**Currency & token launches**](/currencies/) | With the VerusID namespace anyone can launch powerful currencies and tokens, including basket currencies (DeFi AMMs). |\n| [**Publish & store data**](/vdxf/README) | Use VerusID and VDXF as a controlled public storage system. Publish and store data with multiple levels of nesting. | \n| [**Revoking & recovering**](/verusid/#revoke-recover) | Each VerusID has revocation and recovery authorities (which are also VerusIDs). Autonomously revoke access to a VerusID, and recover all assets and data on a VerusID. | \n| [**Friendly name address**](/verusid/#friendly-name) | A VerusID is a friendly name address that can send, receive and hold assets. | \n| [**Verus Vault**](/verusid/#verus-vault) | Enable theft-proof Verus Vault. Set locks or timelocks to secure assets on a VerusID. | \n| [**Marketplace**](/verusid/#marketplace) | Peer-to-peer decentralized marketplace for VerusIDs and currencies and tokens. | \n| **Privacy** | Point a private address to a VerusID. Send and receive native assets with full anonimity. | \n| **Signatures** | Create unforgable, verifiable signatures with VerusID. Sign fi", "./raw_text_input_docs/README_addresses.md"], ["What kind of data can be stored and published using VerusID and VDXF?", "Using VerusID and VDXF, individuals can publish and store data with multiple levels of nesting, effectively creating a controlled public storage system. This allows for flexible and secure data management.", "# IntroductionVerusID is the first decentralized and self-sovereign identity of its kind, the permanent namespace for the Verus Protocol, and the building block to create Web3 Dapps.## Feature List| Feature | Details | \n| :-----| :------ | \n| **Namespace** | VerusID is the permanent namespace for the Verus Protocol and can be registered by anyone. | \n| **Self-sovereign identity** | VerusID can function as a self-sovereign identity for anyone in the world, empowering individuals with complete autonomy both online and offline. |\n| [**Blockchain launches**](/blockchains/) | With the VerusID namespace anyone can launch fully interconnected, customizable, independent and secure blockchains, without any coding needed (just simple commands). | \n| [**Currency & token launches**](/currencies/) | With the VerusID namespace anyone can launch powerful currencies and tokens, including basket currencies (DeFi AMMs). |\n| [**Publish & store data**](/vdxf/README) | Use VerusID and VDXF as a controlled public storage system. Publish and store data with multiple levels of nesting. | \n| [**Revoking & recovering**](/verusid/#revoke-recover) | Each VerusID has revocation and recovery authorities (which are also VerusIDs). Autonomously revoke access to a VerusID, and recover all assets and data on a VerusID. | \n| [**Friendly name address**](/verusid/#friendly-name) | A VerusID is a friendly name address that can send, receive and hold assets. | \n| [**Verus Vault**](/verusid/#verus-vault) | Enable theft-proof Verus Vault. Set locks or timelocks to secure assets on a VerusID. | \n| [**Marketplace**](/verusid/#marketplace) | Peer-to-peer decentralized marketplace for VerusIDs and currencies and tokens. | \n| **Privacy** | Point a private address to a VerusID. Send and receive native assets with full anonimity. | \n| **Signatures** | Create unforgable, verifiable signatures with VerusID. Sign fi", "./raw_text_input_docs/README_addresses.md"]]], [["User:: I'm trying to set up my hot wallet device to receive diverted staking rewards in Verus. Can you walk me through the process?", "AI Assistant:: To set up your hot wallet device, you need to lookup the pubkey for the address where you want your won stakes to arrive. You can do this by going to the Wallet tab, clicking Receive under Transparent Balance, clicking the three dots next to the address you want to use, and then clicking Copy public key. Save this pubkey somewhere, as you'll need it later. Do you have any questions about this step?", "User:: No, I think I got it. Now, how do I configure my staking device to divert staking rewards to my hot wallet device in Verus?", "AI Assistant:: To configure your staking device, go to Settings, select Profile Settings, and then select Verus under Custom native mode launch options. Add the following launch options:\n\n1. `minetolocalwallet=0`\n2. `pubkey=<your_hot_wallet_pubkey>`\n\nReplace `<your_hot_wallet_pubkey>` with the pubkey you copied from your hot wallet device. Click Save Changes and then restart your wallet. Your stakes will now be diverted to your hot wallet. Do you have any questions about this step?", "User:: Actually, yes. Why is it important to save changes and restart your wallet after configuring staking reward diversion in Verus?", "AI Assistant:: Saving changes and restarting your wallet is crucial to ensure that the new configuration takes effect. If you don't save changes and restart your wallet, your stakes will not be diverted to your hot wallet device. It's a simple but important step to make sure everything works as intended. If you've followed the steps correctly, you should now be set up to receive diverted staking rewards in Verus. Do you have any more questions or need further assistance?"], "AI Assistant", "", "N/A", [["How do I set up my hot wallet device to receive diverted staking rewards in Verus?", "To set up your hot wallet device, you need to lookup the pubkey for the address where you want your won stakes to arrive. You can do this by going to the Wallet tab, clicking Receive under Transparent Balance, clicking the three dots next to the address you want to use, and then clicking Copy public key. Save this pubkey somewhere, as you'll need it later.", "# Divert staking rewards to different wallet\n![image-divert](/images/divert-stakes.png)\nIf you are staking with funds on a VerusID, and that VerusID is locked with Vault, yet you want to spend your won stakes, this might be for you. Let's explain how you can divert your won stakes to a different wallet with Verus Desktop.\n\nWe have two devices with two different wallets:\n- Your staking device\n- Your hot wallet device\n\n### Hot wallet\nThe hot wallet is the device you want your stakes to arrive on. On the hot wallet we need to lookup the ``pubkey`` for the address you want your won stakes to arrive.\n\nGo to the ``Wallet-tab``, click ``receive`` under Transparent Balance. Then click the three-dots next to the address you want to use. Click ``Copy public key`` as seen in the image below. Paste and save this somewhere, we will need it later.\n\n![image-pubkey](/images/copy-pubkey.png)\n\n### Staking device\nThis device is staking happily, and your funds are secured with the Vault ([read here how to set up](/guides/setup-vault/)). Let's make sure your won stakes are sent to your hot wallet device.\n\nGo to ``settings`` (the cogwheel top right corner), then select ``Profile Settings`` (default). Here you see the option ``Custom native mode launch options``. Select ``Verus``.\n\nFirst copy and paste the code from below into the textfield and click ``Add launch option``.\n\n```\nminetolocalwallet=0\n```\n\nNext, copy and paste the code below. Change ``xxx`` to the ``public key`` we have from the hot wallet. Click ``Add launch option``.\n```\npubkey=xxx\n```\n\nAt last, click the ``Save Changes`` button. **Don't forget this step!** Now close the wallet and open it again. Congratulations, your stakes will now be diverted to your hot wallet.", "./raw_text_input_docs/divert-rewards.md"], ["How do I configure my staking device to divert staking rewards to my hot wallet device in Verus?", "To configure your staking device, go to Settings, select Profile Settings, and then select Verus under Custom native mode launch options. Add the following launch options:\n\n1. `minetolocalwallet=0`\n2. `pubkey=<your_hot_wallet_pubkey>`\n\nReplace `<your_hot_wallet_pubkey>` with the pubkey you copied from your hot wallet device. Click Save Changes and then restart your wallet. Your stakes will now be diverted to your hot wallet.", "# Divert staking rewards to different wallet\n![image-divert](/images/divert-stakes.png)\nIf you are staking with funds on a VerusID, and that VerusID is locked with Vault, yet you want to spend your won stakes, this might be for you. Let's explain how you can divert your won stakes to a different wallet with Verus Desktop.\n\nWe have two devices with two different wallets:\n- Your staking device\n- Your hot wallet device\n\n### Hot wallet\nThe hot wallet is the device you want your stakes to arrive on. On the hot wallet we need to lookup the ``pubkey`` for the address you want your won stakes to arrive.\n\nGo to the ``Wallet-tab``, click ``receive`` under Transparent Balance. Then click the three-dots next to the address you want to use. Click ``Copy public key`` as seen in the image below. Paste and save this somewhere, we will need it later.\n\n![image-pubkey](/images/copy-pubkey.png)\n\n### Staking device\nThis device is staking happily, and your funds are secured with the Vault ([read here how to set up](/guides/setup-vault/)). Let's make sure your won stakes are sent to your hot wallet device.\n\nGo to ``settings`` (the cogwheel top right corner), then select ``Profile Settings`` (default). Here you see the option ``Custom native mode launch options``. Select ``Verus``.\n\nFirst copy and paste the code from below into the textfield and click ``Add launch option``.\n\n```\nminetolocalwallet=0\n```\n\nNext, copy and paste the code below. Change ``xxx`` to the ``public key`` we have from the hot wallet. Click ``Add launch option``.\n```\npubkey=xxx\n```\n\nAt last, click the ``Save Changes`` button. **Don't forget this step!** Now close the wallet and open it again. Congratulations, your stakes will now be diverted to your hot wallet.", "./raw_text_input_docs/divert-rewards.md"], ["Why is it important to save changes and restart your wallet after configuring staking reward diversion in Verus?", "Saving changes and restarting your wallet is crucial to ensure that the new configuration takes effect. If you don't save changes and restart your wallet, your stakes will not be diverted to your hot wallet device.", "# Divert staking rewards to different wallet\n![image-divert](/images/divert-stakes.png)\nIf you are staking with funds on a VerusID, and that VerusID is locked with Vault, yet you want to spend your won stakes, this might be for you. Let's explain how you can divert your won stakes to a different wallet with Verus Desktop.\n\nWe have two devices with two different wallets:\n- Your staking device\n- Your hot wallet device\n\n### Hot wallet\nThe hot wallet is the device you want your stakes to arrive on. On the hot wallet we need to lookup the ``pubkey`` for the address you want your won stakes to arrive.\n\nGo to the ``Wallet-tab``, click ``receive`` under Transparent Balance. Then click the three-dots next to the address you want to use. Click ``Copy public key`` as seen in the image below. Paste and save this somewhere, we will need it later.\n\n![image-pubkey](/images/copy-pubkey.png)\n\n### Staking device\nThis device is staking happily, and your funds are secured with the Vault ([read here how to set up](/guides/setup-vault/)). Let's make sure your won stakes are sent to your hot wallet device.\n\nGo to ``settings`` (the cogwheel top right corner), then select ``Profile Settings`` (default). Here you see the option ``Custom native mode launch options``. Select ``Verus``.\n\nFirst copy and paste the code from below into the textfield and click ``Add launch option``.\n\n```\nminetolocalwallet=0\n```\n\nNext, copy and paste the code below. Change ``xxx`` to the ``public key`` we have from the hot wallet. Click ``Add launch option``.\n```\npubkey=xxx\n```\n\nAt last, click the ``Save Changes`` button. **Don't forget this step!** Now close the wallet and open it again. Congratulations, your stakes will now be diverted to your hot wallet.", "./raw_text_input_docs/divert-rewards.md"]]], [["User:: Hey, I've been hearing a lot about Verus and its potential for blockchain and token launches. What are some benefits of using Verus for these kinds of projects?", "AI Assistant:: Verus offers several benefits for blockchain and token launches, including no programming needed, low protocol fees, and the ability to create use case specific blockchains and currencies. This makes it an attractive option for projects looking for a flexible and cost-effective solution.", "User:: That sounds interesting. I've also been wondering about scalability. How does Verus achieve scalability?", "AI Assistant:: Verus achieves practically unlimited scalability through its Public Blockchains as a Service (PBaaS), which enables the provisioning of an unlimited number of independent, interoperable, and interconnected L1 blockchains. This allows for a high transactions-per-second (TPS) rate, with a single PBaaS chain capable of reaching between 75 and 800 TPS, and a network of several thousand chains having a total bandwidth of 1 million+ TPS.", "User:: Security is also a major concern for me. What makes Verus secure?", "AI Assistant:: Verus is secure because it is 51% hash attack resistant through its Verus Proof of Power consensus algorithm. Additionally, all functionality is found in the consensus layer (L1), making the protocol secure for developers and users, and eliminating smart contract risks.", "User:: I've also heard that Verus has an interoperability feature. What's the benefit of that?", "AI Assistant:: Verus enables a world where all blockchains can communicate with each other, allowing for seamless interaction between different blockchains. This is achieved through its Public Blockchains as a Service (PBaaS), which makes all PBaaS-chains interoperable and interconnected. Verus also connects to Ethereum in a trustless and non-custodial way.", "User:: That sounds really powerful. How does Verus facilitate cross-chain communication?", "AI Assistant:: Verus facilitates cross-chain communication through its Verus Internet Protocol (VIP), which enables provable, decentralized communication between different blockchains. Additionally, the Verus-Ethereum Bridge allows for trustless and non-custodial interaction between Verus and Ethereum. This enables a high degree of flexibility and interoperability between different blockchain ecosystems."], "AI Assistant", "", "N/A", [["What are some benefits of using Verus for blockchain and token launches?", "Verus offers several benefits for blockchain and token launches, including no programming needed, low protocol fees, and the ability to create use case specific blockchains and currencies.", "* **No programming needed for [blockchain](/blockchains/), [token and currency launches](/currencies/)**\n* **Low protocol fees**## Scalability\nVerus achieves practically unlimited scalability through its [Public Blockchains as a Service](/blockchains/). Verus PBaaS enables the provisioning of an unlimited number of independent, interoperable and interconnected L1 blockchains, which inherit all Verus L1 features.Verus' scale out TPS (transactions-per-second) is better than what other blockchains have today. A single PBaaS chain can reach between 75 and 800 TPS depending on blocktime; a network of several thousand chains would have a total bandwidth of 1 million+ TPS. But there is no maximum TPS metric because such a thing does not exist on an open fractal network like Verus.* **Create use case specific blockchains and currencies** \n* **Move activity between chains to avoid congestion**## Security\nVerus and its PBaaS-blockchains are 51% hash attack resistant. All functionality can be found in the consensus layer (L1), making the protocol secure for developers and users. No smart contract risks \u2014 Verus uses smart transactions, not smart contracts.* **51% hash attack resistant through [Verus Proof of Power](/overview/verus-proof-of-power/)**\n* Read: [Verus Smart Transactions vs. Smart Contracts](https://medium.com/veruscoin/verus-smart-transactions-vs-smart-contracts-f98079c00ed0)## Interoperability\nVerus enables a world where all blockchains communicate with each other. All PBaaS-chains are interoperable and interconnected. Verus and all PBaaS-chains are now also connected to Ethereum, in a trustless and non-custodial way.* Read: [Verus Internet Protocol (VIP) \u2014 Provable, Decentralized Cross-chain Communication](https://medium.com/veruscoin/verus-internet-protocol-vip-provable-decentralized-cross-chain-communication-8d9414a429c5)\n* [Verus-Ethereum Bridge](/eth-bridge/)", "./raw_text_input_docs/README_overview.md"], ["How does Verus achieve scalability?", "Verus achieves practically unlimited scalability through its Public Blockchains as a Service (PBaaS), which enables the provisioning of an unlimited number of independent, interoperable, and interconnected L1 blockchains. This allows for a high transactions-per-second (TPS) rate, with a single PBaaS chain capable of reaching between 75 and 800 TPS, and a network of several thousand chains having a total bandwidth of 1 million+ TPS.", "* **No programming needed for [blockchain](/blockchains/), [token and currency launches](/currencies/)**\n* **Low protocol fees**## Scalability\nVerus achieves practically unlimited scalability through its [Public Blockchains as a Service](/blockchains/). Verus PBaaS enables the provisioning of an unlimited number of independent, interoperable and interconnected L1 blockchains, which inherit all Verus L1 features.Verus' scale out TPS (transactions-per-second) is better than what other blockchains have today. A single PBaaS chain can reach between 75 and 800 TPS depending on blocktime; a network of several thousand chains would have a total bandwidth of 1 million+ TPS. But there is no maximum TPS metric because such a thing does not exist on an open fractal network like Verus.* **Create use case specific blockchains and currencies** \n* **Move activity between chains to avoid congestion**## Security\nVerus and its PBaaS-blockchains are 51% hash attack resistant. All functionality can be found in the consensus layer (L1), making the protocol secure for developers and users. No smart contract risks \u2014 Verus uses smart transactions, not smart contracts.* **51% hash attack resistant through [Verus Proof of Power](/overview/verus-proof-of-power/)**\n* Read: [Verus Smart Transactions vs. Smart Contracts](https://medium.com/veruscoin/verus-smart-transactions-vs-smart-contracts-f98079c00ed0)## Interoperability\nVerus enables a world where all blockchains communicate with each other. All PBaaS-chains are interoperable and interconnected. Verus and all PBaaS-chains are now also connected to Ethereum, in a trustless and non-custodial way.* Read: [Verus Internet Protocol (VIP) \u2014 Provable, Decentralized Cross-chain Communication](https://medium.com/veruscoin/verus-internet-protocol-vip-provable-decentralized-cross-chain-communication-8d9414a429c5)\n* [Verus-Ethereum Bridge](/eth-bridge/)", "./raw_text_input_docs/README_overview.md"], ["What makes Verus secure?", "Verus is secure because it is 51% hash attack resistant through its Verus Proof of Power consensus algorithm. Additionally, all functionality is found in the consensus layer (L1), making the protocol secure for developers and users, and eliminating smart contract risks.", "* **No programming needed for [blockchain](/blockchains/), [token and currency launches](/currencies/)**\n* **Low protocol fees**## Scalability\nVerus achieves practically unlimited scalability through its [Public Blockchains as a Service](/blockchains/). Verus PBaaS enables the provisioning of an unlimited number of independent, interoperable and interconnected L1 blockchains, which inherit all Verus L1 features.Verus' scale out TPS (transactions-per-second) is better than what other blockchains have today. A single PBaaS chain can reach between 75 and 800 TPS depending on blocktime; a network of several thousand chains would have a total bandwidth of 1 million+ TPS. But there is no maximum TPS metric because such a thing does not exist on an open fractal network like Verus.* **Create use case specific blockchains and currencies** \n* **Move activity between chains to avoid congestion**## Security\nVerus and its PBaaS-blockchains are 51% hash attack resistant. All functionality can be found in the consensus layer (L1), making the protocol secure for developers and users. No smart contract risks \u2014 Verus uses smart transactions, not smart contracts.* **51% hash attack resistant through [Verus Proof of Power](/overview/verus-proof-of-power/)**\n* Read: [Verus Smart Transactions vs. Smart Contracts](https://medium.com/veruscoin/verus-smart-transactions-vs-smart-contracts-f98079c00ed0)## Interoperability\nVerus enables a world where all blockchains communicate with each other. All PBaaS-chains are interoperable and interconnected. Verus and all PBaaS-chains are now also connected to Ethereum, in a trustless and non-custodial way.* Read: [Verus Internet Protocol (VIP) \u2014 Provable, Decentralized Cross-chain Communication](https://medium.com/veruscoin/verus-internet-protocol-vip-provable-decentralized-cross-chain-communication-8d9414a429c5)\n* [Verus-Ethereum Bridge](/eth-bridge/)", "./raw_text_input_docs/README_overview.md"], ["What is the benefit of Verus' interoperability feature?", "Verus enables a world where all blockchains can communicate with each other, allowing for seamless interaction between different blockchains. This is achieved through its Public Blockchains as a Service (PBaaS), which makes all PBaaS-chains interoperable and interconnected. Verus also connects to Ethereum in a trustless and non-custodial way.", "* **No programming needed for [blockchain](/blockchains/), [token and currency launches](/currencies/)**\n* **Low protocol fees**## Scalability\nVerus achieves practically unlimited scalability through its [Public Blockchains as a Service](/blockchains/). Verus PBaaS enables the provisioning of an unlimited number of independent, interoperable and interconnected L1 blockchains, which inherit all Verus L1 features.Verus' scale out TPS (transactions-per-second) is better than what other blockchains have today. A single PBaaS chain can reach between 75 and 800 TPS depending on blocktime; a network of several thousand chains would have a total bandwidth of 1 million+ TPS. But there is no maximum TPS metric because such a thing does not exist on an open fractal network like Verus.* **Create use case specific blockchains and currencies** \n* **Move activity between chains to avoid congestion**## Security\nVerus and its PBaaS-blockchains are 51% hash attack resistant. All functionality can be found in the consensus layer (L1), making the protocol secure for developers and users. No smart contract risks \u2014 Verus uses smart transactions, not smart contracts.* **51% hash attack resistant through [Verus Proof of Power](/overview/verus-proof-of-power/)**\n* Read: [Verus Smart Transactions vs. Smart Contracts](https://medium.com/veruscoin/verus-smart-transactions-vs-smart-contracts-f98079c00ed0)## Interoperability\nVerus enables a world where all blockchains communicate with each other. All PBaaS-chains are interoperable and interconnected. Verus and all PBaaS-chains are now also connected to Ethereum, in a trustless and non-custodial way.* Read: [Verus Internet Protocol (VIP) \u2014 Provable, Decentralized Cross-chain Communication](https://medium.com/veruscoin/verus-internet-protocol-vip-provable-decentralized-cross-chain-communication-8d9414a429c5)\n* [Verus-Ethereum Bridge](/eth-bridge/)", "./raw_text_input_docs/README_overview.md"], ["How does Verus facilitate cross-chain communication?", "Verus facilitates cross-chain communication through its Verus Internet Protocol (VIP), which enables provable, decentralized communication between different blockchains. Additionally, the Verus-Ethereum Bridge allows for trustless and non-custodial interaction between Verus and Ethereum.", "* **No programming needed for [blockchain](/blockchains/), [token and currency launches](/currencies/)**\n* **Low protocol fees**## Scalability\nVerus achieves practically unlimited scalability through its [Public Blockchains as a Service](/blockchains/). Verus PBaaS enables the provisioning of an unlimited number of independent, interoperable and interconnected L1 blockchains, which inherit all Verus L1 features.Verus' scale out TPS (transactions-per-second) is better than what other blockchains have today. A single PBaaS chain can reach between 75 and 800 TPS depending on blocktime; a network of several thousand chains would have a total bandwidth of 1 million+ TPS. But there is no maximum TPS metric because such a thing does not exist on an open fractal network like Verus.* **Create use case specific blockchains and currencies** \n* **Move activity between chains to avoid congestion**## Security\nVerus and its PBaaS-blockchains are 51% hash attack resistant. All functionality can be found in the consensus layer (L1), making the protocol secure for developers and users. No smart contract risks \u2014 Verus uses smart transactions, not smart contracts.* **51% hash attack resistant through [Verus Proof of Power](/overview/verus-proof-of-power/)**\n* Read: [Verus Smart Transactions vs. Smart Contracts](https://medium.com/veruscoin/verus-smart-transactions-vs-smart-contracts-f98079c00ed0)## Interoperability\nVerus enables a world where all blockchains communicate with each other. All PBaaS-chains are interoperable and interconnected. Verus and all PBaaS-chains are now also connected to Ethereum, in a trustless and non-custodial way.* Read: [Verus Internet Protocol (VIP) \u2014 Provable, Decentralized Cross-chain Communication](https://medium.com/veruscoin/verus-internet-protocol-vip-provable-decentralized-cross-chain-communication-8d9414a429c5)\n* [Verus-Ethereum Bridge](/eth-bridge/)", "./raw_text_input_docs/README_overview.md"]]], [["User:: I'm trying to use Verus Desktop, and I need some help with locking a VerusID. How can I lock a VerusID for a specific period of time using the command line interface of Verus Desktop?", "AI Assistant:: To lock a VerusID for a specific period of time, you can use the `setidentitytimelock` command with the `unlockatblock` option. For example, to lock an ID for approximately 1 year, you can use the following command:\n\n```\nrun setidentitytimelock \"myid@\"\n'{\n\"unlockatblock\":1508994\n}'\n```\n\nReplace `\"myid@\"` with your own VerusID. This will lock the ID for a specified number of blocks, which can be calculated based on the average block time.", "User:: That's helpful, thanks! I've also heard of something called a DelayLock on a VerusID. Can you tell me what that is and how I can set it up?", "AI Assistant:: A DelayLock is a feature on Verus that allows you to lock a VerusID and specify a predetermined number of blocks that must pass before the funds can be spent again. To set up a DelayLock, you can use the `setidentitytimelock` command with the `setunlockdelay` option. For example, to set a DelayLock of 1 week (10,080 blocks), you can use the following command:\n\n```\nrun setidentitytimelock \"myid@\"\n'{\n\"setunlockdelay\":10080\n}'\n```\n\nReplace `\"myid@\"` with your own VerusID. This will set a DelayLock on the ID, preventing the funds from being spent until the specified number of blocks has passed.", "User:: What happens when I request an unlock on a VerusID with a DelayLock?", "AI Assistant:: When you request an unlock on a VerusID with a DelayLock, you will have to wait for the predetermined number of blocks to pass before you can spend the funds again. During this time, the funds are locked and cannot be spent. Once the specified number of blocks has passed, the DelayLock will be lifted, and you'll be able to access the funds again."], "AI Assistant", "", "N/A", [["How can I lock a VerusID for a specific period of time using the command line interface of Verus Desktop?", "To lock a VerusID for a specific period of time, you can use the `setidentitytimelock` command with the `unlockatblock` option. For example, to lock an ID for approximately 1 year, you can use the following command:\n\n```\nrun setidentitytimelock \"myid@\" \n'{\n  \"unlockatblock\":1508994\n}'\n```\n\nReplace `\"myid@\"` with your own VerusID.", "- Under ``unlockatblock`` you put ``1508994``\n- Change ``myid@`` with your own VerusIDSo in our example your VerusID is locked for approximately for 1 year. After that period of time the funds can be spent again.``` json\nrun setidentitytimelock \"myid@\" \n'{\n  \"unlockatblock\":1508994\n}'\n```You can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs.:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::## Vault with DelayLock\n![image-delaylock](/images/delaylock.png)\nNow let's put a DelayLock on a VerusID. This means that you lock the identity, and when you request the identity to be unlocked, a predetermined number of blocks have to pass before you can actually spend the funds again.### Set the DelayLock\nLet's say you want to put a DelayLock of 1 week. 1 week is ``10,080`` blocks (1440x7). This will lock the identity, and when you request an unlock, it takes 1 week (or 10,080 blocks) before the funds can be spent again.- Under ``setunlockdelay`` you put ``10080``\n- Change ``myid@`` with your own VerusID``` json\nrun setidentitytimelock \"myid@\" \n'{\n  \"setunlockdelay\":10080\n}'\n```You can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs.:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::### Request an unlock\nAbove you locked a VerusID with a DelayLock. Now let's request an unlock. When an unlock has been requested you have to wait the predetermined number of blocks before you can spend the funds again.", "./raw_text_input_docs/setup-vault-v2.md"], ["What is a DelayLock on a VerusID, and how can I set it up?", "A DelayLock is a feature on Verus that allows you to lock a VerusID and specify a predetermined number of blocks that must pass before the funds can be spent again. To set up a DelayLock, you can use the `setidentitytimelock` command with the `setunlockdelay` option. For example, to set a DelayLock of 1 week (10,080 blocks), you can use the following command:\n\n```\nrun setidentitytimelock \"myid@\" \n'{\n  \"setunlockdelay\":10080\n}'\n```\n\nReplace `\"myid@\"` with your own VerusID.", "- Under ``unlockatblock`` you put ``1508994``\n- Change ``myid@`` with your own VerusIDSo in our example your VerusID is locked for approximately for 1 year. After that period of time the funds can be spent again.``` json\nrun setidentitytimelock \"myid@\" \n'{\n  \"unlockatblock\":1508994\n}'\n```You can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs.:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::## Vault with DelayLock\n![image-delaylock](/images/delaylock.png)\nNow let's put a DelayLock on a VerusID. This means that you lock the identity, and when you request the identity to be unlocked, a predetermined number of blocks have to pass before you can actually spend the funds again.### Set the DelayLock\nLet's say you want to put a DelayLock of 1 week. 1 week is ``10,080`` blocks (1440x7). This will lock the identity, and when you request an unlock, it takes 1 week (or 10,080 blocks) before the funds can be spent again.- Under ``setunlockdelay`` you put ``10080``\n- Change ``myid@`` with your own VerusID``` json\nrun setidentitytimelock \"myid@\" \n'{\n  \"setunlockdelay\":10080\n}'\n```You can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs.:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::### Request an unlock\nAbove you locked a VerusID with a DelayLock. Now let's request an unlock. When an unlock has been requested you have to wait the predetermined number of blocks before you can spend the funds again.", "./raw_text_input_docs/setup-vault-v2.md"], ["What happens when I request an unlock on a VerusID with a DelayLock?", "When you request an unlock on a VerusID with a DelayLock, you will have to wait for the predetermined number of blocks to pass before you can spend the funds again. During this time, the funds are locked and cannot be spent.", "- Under ``unlockatblock`` you put ``1508994``\n- Change ``myid@`` with your own VerusIDSo in our example your VerusID is locked for approximately for 1 year. After that period of time the funds can be spent again.``` json\nrun setidentitytimelock \"myid@\" \n'{\n  \"unlockatblock\":1508994\n}'\n```You can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs.:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::## Vault with DelayLock\n![image-delaylock](/images/delaylock.png)\nNow let's put a DelayLock on a VerusID. This means that you lock the identity, and when you request the identity to be unlocked, a predetermined number of blocks have to pass before you can actually spend the funds again.### Set the DelayLock\nLet's say you want to put a DelayLock of 1 week. 1 week is ``10,080`` blocks (1440x7). This will lock the identity, and when you request an unlock, it takes 1 week (or 10,080 blocks) before the funds can be spent again.- Under ``setunlockdelay`` you put ``10080``\n- Change ``myid@`` with your own VerusID``` json\nrun setidentitytimelock \"myid@\" \n'{\n  \"setunlockdelay\":10080\n}'\n```You can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs.:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::### Request an unlock\nAbove you locked a VerusID with a DelayLock. Now let's request an unlock. When an unlock has been requested you have to wait the predetermined number of blocks before you can spend the funds again.", "./raw_text_input_docs/setup-vault-v2.md"]]], [["User:: Hi, I'm interested in learning more about the network economy in Verus. Can you tell me about the key characteristics of it?", "AI Assistant:: Verus is a rent-free blockchain protocol with a decentralized economy. Costs for services are distributed to miners and stakers, and there are no developer fees or rent-seeking profiteers. This means that the community is rewarded for their contributions to the network, rather than a central authority. Would you like to know more about how mining and staking work in Verus?", "User:: That sounds really interesting. What is the mining algorithm used in Verus, and what are its benefits?", "AI Assistant:: VerusHash 2.2 is the mining algorithm used in Verus. It is designed to equalize mining fairness across hardware classes, allowing anyone to start mining with consumer-grade hardware. This means that you don't need expensive specialized equipment to start mining Verus, making it more accessible to everyone. Does that make sense?", "User:: That's great to hear. How easy is it to start mining Verus, and what are the requirements?", "AI Assistant:: Mining Verus is made easy for starters, as they can start directly from within Verus Desktop without any additional software requirements. No specialized mining equipment is necessary, and anyone can start mining with consumer-grade hardware. You can literally start mining with the computer you're using right now! Would you like to know more about other mining features in Verus?", "User:: Yes, please. What is merge mining in Verus, and what are its benefits?", "AI Assistant:: Merge mining in Verus allows miners to mine up to 22 PBaaS-chains simultaneously without losing any of their original hashing power. This feature will be available when PBaaS goes live on mainnet. It's a game-changer for miners, as it allows them to maximize their rewards while still contributing to the security of the network.", "User:: That sounds amazing. What are the requirements to start staking Verus, and what are the benefits?", "AI Assistant:: Anyone can start staking Verus with even the smallest amount possible (e.g., 0.00000001 VRSC). Verus has a powerful and fair staking system, with no threshold required and no registrations necessary. This means that everyone can participate in staking and earn rewards, regardless of the amount they hold.", "User:: What is the purpose of block rewards in Verus, and how are they distributed?", "AI Assistant:: Block rewards are earned by miners and stakers for their efforts to keep the network secure. They are distributed to miners and stakers as a reward for their contributions to the network. This incentivizes people to participate in mining and staking, which in turn helps to secure the network and keep it running smoothly."], "AI Assistant", "", "N/A", [["What are the key characteristics of the network economy in Verus?", "Verus is a rent-free blockchain protocol with a decentralized economy. Costs for services are distributed to miners and stakers, and there are no developer fees or rent-seeking profiteers.", "# Network Economy\nVerus is a rent-free blockchain protocol that has a decentralized economy. Costs for services paid to the protocol are distributed to the miners and stakers. There are no developer fees, and no rent-seeking profiteers.## Mining Ecosystem\nVerus has a naturally decentralized miner ecosystem. VerusHash 2.2 is the mining algorithm that is specifically developed for Verus. The algorithm equalizes mining fairness across hardware classes.To mine Verus no specialized mining equipment is necessary. Anyone can start mining with consumer-grade hardware. Mining is made especially easy for starters, since they can start directly from within Verus Desktop, without any additional software requirements. [Start mining](/economy/start-mining.html).### Merge Mining\nAdditionally, when PBaaS goes live on mainnet, miners can choose to mine up to 22 PBaaS-chains simultaneously, without losing any of their original hashing power.## Staking Ecosystem\nAnyone can start staking Verus, even with the smallest amount possible, e.g. `0.00000001 VRSC`. Although it could take many years before you win a block with such a tiny amount.Verus has a powerful and fair staking system. No threshold required and no registrations necessary. [Start staking](/economy/start-staking.html).## Block Rewards\nMiners and stakers are rewarded for their efforts to keep the network secure. They earn block rewards. The Verus block reward emission schedule:", "./raw_text_input_docs/README_economy.md"], ["What is the mining algorithm used in Verus, and what are its benefits?", "VerusHash 2.2 is the mining algorithm used in Verus. It is designed to equalize mining fairness across hardware classes, allowing anyone to start mining with consumer-grade hardware.", "# Network Economy\nVerus is a rent-free blockchain protocol that has a decentralized economy. Costs for services paid to the protocol are distributed to the miners and stakers. There are no developer fees, and no rent-seeking profiteers.## Mining Ecosystem\nVerus has a naturally decentralized miner ecosystem. VerusHash 2.2 is the mining algorithm that is specifically developed for Verus. The algorithm equalizes mining fairness across hardware classes.To mine Verus no specialized mining equipment is necessary. Anyone can start mining with consumer-grade hardware. Mining is made especially easy for starters, since they can start directly from within Verus Desktop, without any additional software requirements. [Start mining](/economy/start-mining.html).### Merge Mining\nAdditionally, when PBaaS goes live on mainnet, miners can choose to mine up to 22 PBaaS-chains simultaneously, without losing any of their original hashing power.## Staking Ecosystem\nAnyone can start staking Verus, even with the smallest amount possible, e.g. `0.00000001 VRSC`. Although it could take many years before you win a block with such a tiny amount.Verus has a powerful and fair staking system. No threshold required and no registrations necessary. [Start staking](/economy/start-staking.html).## Block Rewards\nMiners and stakers are rewarded for their efforts to keep the network secure. They earn block rewards. The Verus block reward emission schedule:", "./raw_text_input_docs/README_economy.md"], ["How easy is it to start mining Verus, and what are the requirements?", "Mining Verus is made easy for starters, as they can start directly from within Verus Desktop without any additional software requirements. No specialized mining equipment is necessary, and anyone can start mining with consumer-grade hardware.", "# Network Economy\nVerus is a rent-free blockchain protocol that has a decentralized economy. Costs for services paid to the protocol are distributed to the miners and stakers. There are no developer fees, and no rent-seeking profiteers.## Mining Ecosystem\nVerus has a naturally decentralized miner ecosystem. VerusHash 2.2 is the mining algorithm that is specifically developed for Verus. The algorithm equalizes mining fairness across hardware classes.To mine Verus no specialized mining equipment is necessary. Anyone can start mining with consumer-grade hardware. Mining is made especially easy for starters, since they can start directly from within Verus Desktop, without any additional software requirements. [Start mining](/economy/start-mining.html).### Merge Mining\nAdditionally, when PBaaS goes live on mainnet, miners can choose to mine up to 22 PBaaS-chains simultaneously, without losing any of their original hashing power.## Staking Ecosystem\nAnyone can start staking Verus, even with the smallest amount possible, e.g. `0.00000001 VRSC`. Although it could take many years before you win a block with such a tiny amount.Verus has a powerful and fair staking system. No threshold required and no registrations necessary. [Start staking](/economy/start-staking.html).## Block Rewards\nMiners and stakers are rewarded for their efforts to keep the network secure. They earn block rewards. The Verus block reward emission schedule:", "./raw_text_input_docs/README_economy.md"], ["What is merge mining in Verus, and what are its benefits?", "Merge mining in Verus allows miners to mine up to 22 PBaaS-chains simultaneously without losing any of their original hashing power. This feature will be available when PBaaS goes live on mainnet.", "# Network Economy\nVerus is a rent-free blockchain protocol that has a decentralized economy. Costs for services paid to the protocol are distributed to the miners and stakers. There are no developer fees, and no rent-seeking profiteers.## Mining Ecosystem\nVerus has a naturally decentralized miner ecosystem. VerusHash 2.2 is the mining algorithm that is specifically developed for Verus. The algorithm equalizes mining fairness across hardware classes.To mine Verus no specialized mining equipment is necessary. Anyone can start mining with consumer-grade hardware. Mining is made especially easy for starters, since they can start directly from within Verus Desktop, without any additional software requirements. [Start mining](/economy/start-mining.html).### Merge Mining\nAdditionally, when PBaaS goes live on mainnet, miners can choose to mine up to 22 PBaaS-chains simultaneously, without losing any of their original hashing power.## Staking Ecosystem\nAnyone can start staking Verus, even with the smallest amount possible, e.g. `0.00000001 VRSC`. Although it could take many years before you win a block with such a tiny amount.Verus has a powerful and fair staking system. No threshold required and no registrations necessary. [Start staking](/economy/start-staking.html).## Block Rewards\nMiners and stakers are rewarded for their efforts to keep the network secure. They earn block rewards. The Verus block reward emission schedule:", "./raw_text_input_docs/README_economy.md"], ["What are the requirements to start staking Verus, and what are the benefits?", "Anyone can start staking Verus with even the smallest amount possible (e.g., 0.00000001 VRSC). Verus has a powerful and fair staking system, with no threshold required and no registrations necessary.", "# Network Economy\nVerus is a rent-free blockchain protocol that has a decentralized economy. Costs for services paid to the protocol are distributed to the miners and stakers. There are no developer fees, and no rent-seeking profiteers.## Mining Ecosystem\nVerus has a naturally decentralized miner ecosystem. VerusHash 2.2 is the mining algorithm that is specifically developed for Verus. The algorithm equalizes mining fairness across hardware classes.To mine Verus no specialized mining equipment is necessary. Anyone can start mining with consumer-grade hardware. Mining is made especially easy for starters, since they can start directly from within Verus Desktop, without any additional software requirements. [Start mining](/economy/start-mining.html).### Merge Mining\nAdditionally, when PBaaS goes live on mainnet, miners can choose to mine up to 22 PBaaS-chains simultaneously, without losing any of their original hashing power.## Staking Ecosystem\nAnyone can start staking Verus, even with the smallest amount possible, e.g. `0.00000001 VRSC`. Although it could take many years before you win a block with such a tiny amount.Verus has a powerful and fair staking system. No threshold required and no registrations necessary. [Start staking](/economy/start-staking.html).## Block Rewards\nMiners and stakers are rewarded for their efforts to keep the network secure. They earn block rewards. The Verus block reward emission schedule:", "./raw_text_input_docs/README_economy.md"], ["What is the purpose of block rewards in Verus, and how are they distributed?", "Block rewards are earned by miners and stakers for their efforts to keep the network secure. They are distributed to miners and stakers as a reward for their contributions to the network.", "# Network Economy\nVerus is a rent-free blockchain protocol that has a decentralized economy. Costs for services paid to the protocol are distributed to the miners and stakers. There are no developer fees, and no rent-seeking profiteers.## Mining Ecosystem\nVerus has a naturally decentralized miner ecosystem. VerusHash 2.2 is the mining algorithm that is specifically developed for Verus. The algorithm equalizes mining fairness across hardware classes.To mine Verus no specialized mining equipment is necessary. Anyone can start mining with consumer-grade hardware. Mining is made especially easy for starters, since they can start directly from within Verus Desktop, without any additional software requirements. [Start mining](/economy/start-mining.html).### Merge Mining\nAdditionally, when PBaaS goes live on mainnet, miners can choose to mine up to 22 PBaaS-chains simultaneously, without losing any of their original hashing power.## Staking Ecosystem\nAnyone can start staking Verus, even with the smallest amount possible, e.g. `0.00000001 VRSC`. Although it could take many years before you win a block with such a tiny amount.Verus has a powerful and fair staking system. No threshold required and no registrations necessary. [Start staking](/economy/start-staking.html).## Block Rewards\nMiners and stakers are rewarded for their efforts to keep the network secure. They earn block rewards. The Verus block reward emission schedule:", "./raw_text_input_docs/README_economy.md"]]], [["User:: Hey there, I need some help with updating my VerusID using the command line interface of Verus Desktop. How do I update my VerusID with a timelock?", "AI Assistant:: To update your VerusID with a timelock, you can use the `updateidentity` command with a JSON object that specifies the timelock duration, name, primary address, minimum signatures, flags, and other settings. Here's an example:\n```\nrun updateidentity\n'{\n\"name\":\"youridentityname\",\n\"minimumsignatures\":1,\n\"primaryaddresses\":[\"primary-address-comes-here\"],\n\"flags\":0,\n\"timelock\":1534360\n}'\n```\nYou can copy and paste this code snippet into the command line interface of Verus Desktop and edit the necessary inputs for your needs. Do you have any questions about this process or what the `timelock` setting does?", "User:: Actually, yes. What is the purpose of the `timelock` setting when updating a VerusID?", "AI Assistant:: The `timelock` setting specifies the duration for which the VerusID will be locked. During this time, the funds associated with the ID cannot be spent. For example, if you set `timelock` to `1508994`, the ID will be locked for approximately 1 year. After that period, the funds can be spent again. This can be useful for security or other purposes where you want to restrict access to your funds for a certain period of time.", "User:: I see. I've heard of something called a DelayLock. What's the difference between a DelayLock and a regular timelock?", "AI Assistant:: A DelayLock is a type of timelock that locks a VerusID and requires a predetermined number of blocks to pass before the ID can be unlocked and the funds can be spent again. Unlike a regular timelock, which locks the ID for a fixed duration, a DelayLock allows you to request an unlock, but the actual unlocking process is delayed by a specified number of blocks. For example, you can set a DelayLock of 1 week, which means that 10,080 blocks (or approximately 1 week) must pass before the funds can be spent again.", "User:: That makes sense. One last question: Can I revoke and recover a locked VerusID?", "AI Assistant:: Yes, you can always revoke and recover a locked VerusID. Even if your ID is locked, you can still revoke it and recover the funds associated with it. This is one of the benefits of using VerusIDs - you have full control over your digital identity and assets, even in cases where you've set up additional security measures like timelocks or DelayLocks."], "AI Assistant", "", "N/A", [["How do I update my VerusID with a timelock using the command line interface of Verus Desktop?", "To update your VerusID with a timelock, you can use the `updateidentity` command with a JSON object that specifies the timelock duration, name, primary address, minimum signatures, flags, and other settings. Here's an example:\n```\nrun updateidentity \n'{\n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":0,\n  \"timelock\":1534360\n}'\n```\nYou can copy and paste this code snippet into the command line interface of Verus Desktop and edit the necessary inputs for your needs.", "- Under ``timelock`` you put ``1508994``\n- Under ``name`` you put your VerusID name without ``@``\n- Under ``primaryaddress`` you put the R-address which is the primary address of your VerusID (you can find this address in the 'VerusID'-tab, open your VerusID and click `ID Info')So in our example your VerusID is locked for approximately for 1 year. After that period of time the funds can be spent again.``` json\nrun updateidentity \n'{\n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":0,\n  \"timelock\":1534360\n}'\n```You can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs. In the code snippet are the minimum requirements to update your VerusID with a lock.:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::## Vault with DelayLock\n![image-delaylock](/images/delaylock.png)\nNow let's put a DelayLock on a VerusID. This means that you lock the identity, and when you request the identity to be unlocked, a predetermined number of blocks have to pass before you can actually spend the funds again.### Set the DelayLock\nLet's say you want to put a Delaylock of 1 week. 1 week is ``10,080`` blocks (1440x7). This will lock the identity, and when you requested an unlock, it takes 1 week (or 10,080 blocks) before the funds can be spent again.- Under ``timelock`` you put ``10080``\n- Under ``name`` you put your VerusID name without ``@``\n- Under ``primaryaddress`` you put the R-address which is the primary address of your VerusID (you can find this address in the 'VerusID'-tab, open your VerusID and click `ID Info')", "./raw_text_input_docs/setup-vault.md"], ["What is the purpose of the `timelock` setting when updating a VerusID?", "The `timelock` setting specifies the duration for which the VerusID will be locked. During this time, the funds associated with the ID cannot be spent. For example, if you set `timelock` to `1508994`, the ID will be locked for approximately 1 year. After that period, the funds can be spent again.", "- Under ``timelock`` you put ``1508994``\n- Under ``name`` you put your VerusID name without ``@``\n- Under ``primaryaddress`` you put the R-address which is the primary address of your VerusID (you can find this address in the 'VerusID'-tab, open your VerusID and click `ID Info')So in our example your VerusID is locked for approximately for 1 year. After that period of time the funds can be spent again.``` json\nrun updateidentity \n'{\n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":0,\n  \"timelock\":1534360\n}'\n```You can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs. In the code snippet are the minimum requirements to update your VerusID with a lock.:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::## Vault with DelayLock\n![image-delaylock](/images/delaylock.png)\nNow let's put a DelayLock on a VerusID. This means that you lock the identity, and when you request the identity to be unlocked, a predetermined number of blocks have to pass before you can actually spend the funds again.### Set the DelayLock\nLet's say you want to put a Delaylock of 1 week. 1 week is ``10,080`` blocks (1440x7). This will lock the identity, and when you requested an unlock, it takes 1 week (or 10,080 blocks) before the funds can be spent again.- Under ``timelock`` you put ``10080``\n- Under ``name`` you put your VerusID name without ``@``\n- Under ``primaryaddress`` you put the R-address which is the primary address of your VerusID (you can find this address in the 'VerusID'-tab, open your VerusID and click `ID Info')", "./raw_text_input_docs/setup-vault.md"], ["What is a DelayLock, and how does it differ from a regular timelock?", "A DelayLock is a type of timelock that locks a VerusID and requires a predetermined number of blocks to pass before the ID can be unlocked and the funds can be spent again. Unlike a regular timelock, which locks the ID for a fixed duration, a DelayLock allows you to request an unlock, but the actual unlocking process is delayed by a specified number of blocks. For example, you can set a DelayLock of 1 week, which means that 10,080 blocks (or approximately 1 week) must pass before the funds can be spent again.", "- Under ``timelock`` you put ``1508994``\n- Under ``name`` you put your VerusID name without ``@``\n- Under ``primaryaddress`` you put the R-address which is the primary address of your VerusID (you can find this address in the 'VerusID'-tab, open your VerusID and click `ID Info')So in our example your VerusID is locked for approximately for 1 year. After that period of time the funds can be spent again.``` json\nrun updateidentity \n'{\n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":0,\n  \"timelock\":1534360\n}'\n```You can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs. In the code snippet are the minimum requirements to update your VerusID with a lock.:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::## Vault with DelayLock\n![image-delaylock](/images/delaylock.png)\nNow let's put a DelayLock on a VerusID. This means that you lock the identity, and when you request the identity to be unlocked, a predetermined number of blocks have to pass before you can actually spend the funds again.### Set the DelayLock\nLet's say you want to put a Delaylock of 1 week. 1 week is ``10,080`` blocks (1440x7). This will lock the identity, and when you requested an unlock, it takes 1 week (or 10,080 blocks) before the funds can be spent again.- Under ``timelock`` you put ``10080``\n- Under ``name`` you put your VerusID name without ``@``\n- Under ``primaryaddress`` you put the R-address which is the primary address of your VerusID (you can find this address in the 'VerusID'-tab, open your VerusID and click `ID Info')", "./raw_text_input_docs/setup-vault.md"], ["Can I revoke and recover a locked VerusID?", "Yes, you can always revoke and recover a locked VerusID.", "- Under ``timelock`` you put ``1508994``\n- Under ``name`` you put your VerusID name without ``@``\n- Under ``primaryaddress`` you put the R-address which is the primary address of your VerusID (you can find this address in the 'VerusID'-tab, open your VerusID and click `ID Info')So in our example your VerusID is locked for approximately for 1 year. After that period of time the funds can be spent again.``` json\nrun updateidentity \n'{\n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":0,\n  \"timelock\":1534360\n}'\n```You can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs. In the code snippet are the minimum requirements to update your VerusID with a lock.:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::## Vault with DelayLock\n![image-delaylock](/images/delaylock.png)\nNow let's put a DelayLock on a VerusID. This means that you lock the identity, and when you request the identity to be unlocked, a predetermined number of blocks have to pass before you can actually spend the funds again.### Set the DelayLock\nLet's say you want to put a Delaylock of 1 week. 1 week is ``10,080`` blocks (1440x7). This will lock the identity, and when you requested an unlock, it takes 1 week (or 10,080 blocks) before the funds can be spent again.- Under ``timelock`` you put ``10080``\n- Under ``name`` you put your VerusID name without ``@``\n- Under ``primaryaddress`` you put the R-address which is the primary address of your VerusID (you can find this address in the 'VerusID'-tab, open your VerusID and click `ID Info')", "./raw_text_input_docs/setup-vault.md"]]], [["User:: I've learned a lot about VerusIDs, but I'm still curious about how to get started. How can I get a Verus address?", "AI Assistant:: Getting a Verus address is easy! You can get a Verus address by downloading and using either Verus Mobile or Verus Desktop. Verus Mobile is available on the App Store and Play Store, while Verus Desktop can be downloaded for Windows, macOS, Linux, or Linux ARM from the Verus website. Once you have either Verus Mobile or Verus Desktop, you can create your own Verus address and start exploring the world of Verus!", "User:: That's great, I think I'll try Verus Mobile first. What are some of the features of Verus Mobile?", "AI Assistant:: Verus Mobile is a powerful tool. One of its key features is that it allows you to bridge from Ethereum to Verus (or vice versa) within the application. This makes it easy to move assets between the two networks. Additionally, Verus Mobile enables MEV-resistant and low-cost conversions, which are part of Verus DeFi. This means you can take advantage of DeFi features like decentralized finance and trading without breaking the bank. Overall, Verus Mobile is a great way to get started with Verus and explore its many features."], "AI Assistant", "", "N/A", [["How can I get a Verus address?", "You can get a Verus address by downloading and using either Verus Mobile or Verus Desktop. Verus Mobile is available on the App Store and Play Store, while Verus Desktop can be downloaded for Windows, macOS, Linux, or Linux ARM from the Verus website.", "# Get a Verus address\nThere are a few ways to get a Verus address on desktop and on mobile.\n\n## Verus Mobile\nDownload Verus Mobile from the [App Store](https://apps.apple.com/en/app/verus-mobile/id6447361908) or [Play Store](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US)\n\nUse Verus Mobile to bridge from Ethereum to Verus (or vice versa) all within the application. And use it for MEV-resistant and low-cost conversions: [more on Verus DeFi](/sendcurrency)\n\n## Verus Desktop\nDownload Verus Desktop for Windows, macOS, Linux or Linux ARM [here](https://verus.io/wallet).\n\nRun a full node (native mode) to experience all protocol features.", "./raw_text_input_docs/getwallet.md"], ["What are some of the features of Verus Mobile?", "Verus Mobile allows you to bridge from Ethereum to Verus (or vice versa) within the application. It also enables MEV-resistant and low-cost conversions, which are part of Verus DeFi.", "# Get a Verus address\nThere are a few ways to get a Verus address on desktop and on mobile.\n\n## Verus Mobile\nDownload Verus Mobile from the [App Store](https://apps.apple.com/en/app/verus-mobile/id6447361908) or [Play Store](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US)\n\nUse Verus Mobile to bridge from Ethereum to Verus (or vice versa) all within the application. And use it for MEV-resistant and low-cost conversions: [more on Verus DeFi](/sendcurrency)\n\n## Verus Desktop\nDownload Verus Desktop for Windows, macOS, Linux or Linux ARM [here](https://verus.io/wallet).\n\nRun a full node (native mode) to experience all protocol features.", "./raw_text_input_docs/getwallet.md"]]], [["User:: Hey, I'm trying to define a PBaaS blockchain and I'm not sure about the `options` parameter. What's its purpose?", "AI Assistant:: The `options` parameter is used to combine various settings for different use cases when defining a PBaaS blockchain. It allows you to customize the behavior of your blockchain by setting specific flags, such as enabling fractional reserve conversions, permissionless ID creation, or restricting the chain to a single currency. This way, you can tailor your blockchain to fit your specific needs.", "User:: That makes sense. I've seen two options, OPTION_ID_ISSUANCE and OPTION_ID_STAKING. What's the difference between them?", "AI Assistant:: OPTION_ID_ISSUANCE determines whether IDs can be created permissionlessly or only by the controlling ID, whereas OPTION_ID_STAKING determines whether all IDs on the chain stake equally or based on their value. So, these two options control different aspects of how IDs interact with your blockchain.", "User:: I've also seen OPTION_GATEWAY and OPTION_GATEWAY_CONVERTER. What do they do?", "AI Assistant:: OPTION_GATEWAY indicates that the chain routes external currencies, while OPTION_GATEWAY_CONVERTER specifies that the chain is a default converter and will publish prices for a specific PBaaS gateway. These options are related to how your blockchain interacts with other currencies and gateways.", "User:: I'd like to create a blockchain with a specific name. What do I need to do?", "AI Assistant:: To create a blockchain of a specific name, you need a VerusID of the same name. The controller of this VerusID is the only one who can create a blockchain of that name, and they can only do so once. So, make sure you have the right VerusID before trying to create your blockchain.", "User:: What if I need help setting up my blockchain launch?", "AI Assistant:: You can get help setting up a blockchain launch by joining the Verus Discord #pbaas-development channel, where the community is happy to assist. Don't hesitate to reach out if you need guidance or have any questions."], "AI Assistant", "", "N/A", [["What is the purpose of the `options` parameter when defining a PBaaS blockchain?", "The `options` parameter is used to combine various settings for different use cases when defining a PBaaS blockchain. It allows you to customize the behavior of your blockchain by setting specific flags, such as enabling fractional reserve conversions, permissionless ID creation, or restricting the chain to a single currency.", "# Defining a PBaaS-blockchain::: warning Information here is not complete. Need help setting up a blockchain launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord) \n:::There are many options to choose from when defining your blockchain. Combine them in the ``options`` parameter for different use cases.| # | Options | Details |\n| - |:-----|:-----|\n| 1 | OPTION_FRACTIONAL | Allows reserve conversion using base calculations when set |\n| 2 | OPTION_ID_ISSUANCE | Clear is permissionless, if set, IDs may only be created by controlling ID |\n| 4 | OPTION_ID_STAKING | All IDs on chain stake equally, rather than value-based staking |\n| 8 | OPTION_ID_REFERRALS | If set, this chain supports referrals |\n| 16 | OPTION_ID_REFERRALREQUIRED | If set, this chain requires referrals |\n| 32 | OPTION_TOKEN | If set, this is a token, not a native currency |\n| 64 | OPTION_SINGLECURRENCY | For PBaaS chains or gateways to potentially restrict to single currency |\n| 128 | OPTION_GATEWAY | If set, this routes external currencies |\n| 256 | OPTION_PBAAS | This is a PBaaS chain definition|\n| 512 | OPTION_GATEWAY_CONVERTER | This means that for a specific PBaaS gateway, this is the default converter and will publish prices |\n| 1024 | OPTION_GATEWAY_NAMECONTROLLER | When not set on a gateway, top level ID and currency registration happen on launch chain |\n| 2048 | OPTION_NFT_TOKEN | Single satoshi NFT token, tokenizes control over the root ID |## VerusID Namespace\nTo create a blockchain of a specific name, you need a VerusID of the same name. The controller of this VerusID is the only one who can create a blockchain of that name, and they can only do so once.## Examples of blockchain launches", "./raw_text_input_docs/define-pbaas.md"], ["What is the difference between OPTION_ID_ISSUANCE and OPTION_ID_STAKING when defining a PBaaS blockchain?", "OPTION_ID_ISSUANCE determines whether IDs can be created permissionlessly or only by the controlling ID, whereas OPTION_ID_STAKING determines whether all IDs on the chain stake equally or based on their value.", "# Defining a PBaaS-blockchain::: warning Information here is not complete. Need help setting up a blockchain launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord) \n:::There are many options to choose from when defining your blockchain. Combine them in the ``options`` parameter for different use cases.| # | Options | Details |\n| - |:-----|:-----|\n| 1 | OPTION_FRACTIONAL | Allows reserve conversion using base calculations when set |\n| 2 | OPTION_ID_ISSUANCE | Clear is permissionless, if set, IDs may only be created by controlling ID |\n| 4 | OPTION_ID_STAKING | All IDs on chain stake equally, rather than value-based staking |\n| 8 | OPTION_ID_REFERRALS | If set, this chain supports referrals |\n| 16 | OPTION_ID_REFERRALREQUIRED | If set, this chain requires referrals |\n| 32 | OPTION_TOKEN | If set, this is a token, not a native currency |\n| 64 | OPTION_SINGLECURRENCY | For PBaaS chains or gateways to potentially restrict to single currency |\n| 128 | OPTION_GATEWAY | If set, this routes external currencies |\n| 256 | OPTION_PBAAS | This is a PBaaS chain definition|\n| 512 | OPTION_GATEWAY_CONVERTER | This means that for a specific PBaaS gateway, this is the default converter and will publish prices |\n| 1024 | OPTION_GATEWAY_NAMECONTROLLER | When not set on a gateway, top level ID and currency registration happen on launch chain |\n| 2048 | OPTION_NFT_TOKEN | Single satoshi NFT token, tokenizes control over the root ID |## VerusID Namespace\nTo create a blockchain of a specific name, you need a VerusID of the same name. The controller of this VerusID is the only one who can create a blockchain of that name, and they can only do so once.## Examples of blockchain launches", "./raw_text_input_docs/define-pbaas.md"], ["What is the purpose of the OPTION_GATEWAY and OPTION_GATEWAY_CONVERTER options when defining a PBaaS blockchain?", "OPTION_GATEWAY indicates that the chain routes external currencies, while OPTION_GATEWAY_CONVERTER specifies that the chain is a default converter and will publish prices for a specific PBaaS gateway.", "# Defining a PBaaS-blockchain::: warning Information here is not complete. Need help setting up a blockchain launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord) \n:::There are many options to choose from when defining your blockchain. Combine them in the ``options`` parameter for different use cases.| # | Options | Details |\n| - |:-----|:-----|\n| 1 | OPTION_FRACTIONAL | Allows reserve conversion using base calculations when set |\n| 2 | OPTION_ID_ISSUANCE | Clear is permissionless, if set, IDs may only be created by controlling ID |\n| 4 | OPTION_ID_STAKING | All IDs on chain stake equally, rather than value-based staking |\n| 8 | OPTION_ID_REFERRALS | If set, this chain supports referrals |\n| 16 | OPTION_ID_REFERRALREQUIRED | If set, this chain requires referrals |\n| 32 | OPTION_TOKEN | If set, this is a token, not a native currency |\n| 64 | OPTION_SINGLECURRENCY | For PBaaS chains or gateways to potentially restrict to single currency |\n| 128 | OPTION_GATEWAY | If set, this routes external currencies |\n| 256 | OPTION_PBAAS | This is a PBaaS chain definition|\n| 512 | OPTION_GATEWAY_CONVERTER | This means that for a specific PBaaS gateway, this is the default converter and will publish prices |\n| 1024 | OPTION_GATEWAY_NAMECONTROLLER | When not set on a gateway, top level ID and currency registration happen on launch chain |\n| 2048 | OPTION_NFT_TOKEN | Single satoshi NFT token, tokenizes control over the root ID |## VerusID Namespace\nTo create a blockchain of a specific name, you need a VerusID of the same name. The controller of this VerusID is the only one who can create a blockchain of that name, and they can only do so once.## Examples of blockchain launches", "./raw_text_input_docs/define-pbaas.md"], ["What is required to create a blockchain of a specific name in Verus?", "To create a blockchain of a specific name, you need a VerusID of the same name. The controller of this VerusID is the only one who can create a blockchain of that name, and they can only do so once.", "# Defining a PBaaS-blockchain::: warning Information here is not complete. Need help setting up a blockchain launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord) \n:::There are many options to choose from when defining your blockchain. Combine them in the ``options`` parameter for different use cases.| # | Options | Details |\n| - |:-----|:-----|\n| 1 | OPTION_FRACTIONAL | Allows reserve conversion using base calculations when set |\n| 2 | OPTION_ID_ISSUANCE | Clear is permissionless, if set, IDs may only be created by controlling ID |\n| 4 | OPTION_ID_STAKING | All IDs on chain stake equally, rather than value-based staking |\n| 8 | OPTION_ID_REFERRALS | If set, this chain supports referrals |\n| 16 | OPTION_ID_REFERRALREQUIRED | If set, this chain requires referrals |\n| 32 | OPTION_TOKEN | If set, this is a token, not a native currency |\n| 64 | OPTION_SINGLECURRENCY | For PBaaS chains or gateways to potentially restrict to single currency |\n| 128 | OPTION_GATEWAY | If set, this routes external currencies |\n| 256 | OPTION_PBAAS | This is a PBaaS chain definition|\n| 512 | OPTION_GATEWAY_CONVERTER | This means that for a specific PBaaS gateway, this is the default converter and will publish prices |\n| 1024 | OPTION_GATEWAY_NAMECONTROLLER | When not set on a gateway, top level ID and currency registration happen on launch chain |\n| 2048 | OPTION_NFT_TOKEN | Single satoshi NFT token, tokenizes control over the root ID |## VerusID Namespace\nTo create a blockchain of a specific name, you need a VerusID of the same name. The controller of this VerusID is the only one who can create a blockchain of that name, and they can only do so once.## Examples of blockchain launches", "./raw_text_input_docs/define-pbaas.md"], ["Where can I get help setting up a blockchain launch if I need it?", "You can get help setting up a blockchain launch by joining the Verus Discord #pbaas-development channel, where the community is happy to assist.", "# Defining a PBaaS-blockchain::: warning Information here is not complete. Need help setting up a blockchain launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord) \n:::There are many options to choose from when defining your blockchain. Combine them in the ``options`` parameter for different use cases.| # | Options | Details |\n| - |:-----|:-----|\n| 1 | OPTION_FRACTIONAL | Allows reserve conversion using base calculations when set |\n| 2 | OPTION_ID_ISSUANCE | Clear is permissionless, if set, IDs may only be created by controlling ID |\n| 4 | OPTION_ID_STAKING | All IDs on chain stake equally, rather than value-based staking |\n| 8 | OPTION_ID_REFERRALS | If set, this chain supports referrals |\n| 16 | OPTION_ID_REFERRALREQUIRED | If set, this chain requires referrals |\n| 32 | OPTION_TOKEN | If set, this is a token, not a native currency |\n| 64 | OPTION_SINGLECURRENCY | For PBaaS chains or gateways to potentially restrict to single currency |\n| 128 | OPTION_GATEWAY | If set, this routes external currencies |\n| 256 | OPTION_PBAAS | This is a PBaaS chain definition|\n| 512 | OPTION_GATEWAY_CONVERTER | This means that for a specific PBaaS gateway, this is the default converter and will publish prices |\n| 1024 | OPTION_GATEWAY_NAMECONTROLLER | When not set on a gateway, top level ID and currency registration happen on launch chain |\n| 2048 | OPTION_NFT_TOKEN | Single satoshi NFT token, tokenizes control over the root ID |## VerusID Namespace\nTo create a blockchain of a specific name, you need a VerusID of the same name. The controller of this VerusID is the only one who can create a blockchain of that name, and they can only do so once.## Examples of blockchain launches", "./raw_text_input_docs/define-pbaas.md"]]], [["User:: I'm interested in learning more about the security of Verus, specifically in regards to notarizations. How do notary witnesses ensure the security of notarizations in Verus?", "AI Assistant:: Notary witnesses in Verus play a crucial role in ensuring the security of notarizations. They monitor notarizations and have the ability to auto-revoke their identities using the VerusID protocol if they were to sign for something they do not agree with. This prevents stolen key attacks, making notaries extremely hard targets to compromise. Does that make sense? Do you have any more questions about notary witnesses or notarizations in Verus?", "User:: Actually, I do. I've heard of something called Bridge.vETH. What is Bridge.vETH, and what is its purpose in Verus?", "AI Assistant:: Bridge.vETH is a 100% backed currency in Verus, backed by a reserve of four currencies: VRSC, ETH, DAI, and MKR. Its purpose is to simplify the bridging of assets by seamlessly converting fees when sending assets across the bridge. This allows for a more streamlined and efficient experience when moving assets between different blockchains. Do you have any more questions about Bridge.vETH or its role in Verus?", "User:: I do, actually. How does the value of Bridge.vETH change over time?", "AI Assistant:: The value of Bridge.vETH increases relative to its reserves when fees or interest are added to the reserves without new Bridge.vETH being minted. This means that the value of Bridge.vETH is directly tied to the value of its underlying reserves. So, as the reserves grow, the value of Bridge.vETH increases, providing a stable and reliable store of value. Does that help clarify how Bridge.vETH works?"], "AI Assistant", "", "N/A", [["How do notary witnesses ensure the security of notarizations in Verus?", "Notary witnesses in Verus monitor notarizations and have the ability to auto-revoke their identities using the VerusID protocol if they were to sign for something they do not agree with. This prevents stolen key attacks, making notaries extremely hard targets to compromise.", "The notary witnesses are also monitoring notarizations, and if they were to sign for something that they themselves do not agree with, they can auto-revoke their identities, using the VerusID protocol, which cannot be stopped by an attacker unless they have stolen both the keys for the notary ID and those for its revocation ID as well. This serves as a prevention for stolen key attacks, ensuring that notaries are extremely hard targets to compromise.## Bridge.vETH currency\nBridge.vETH is a 100% backed currency with 4 currencies in its reserves (VRSC, ETH, DAI, MKR), [read more on basket currencies](/currencies/). The Bridge.vETH currency function is to make the bridging of assets simple. From wherever side on the bridge you send it converts the fees that you need seamlessly.The value of Bridge.vETH increases relative to reserves when fees or interest are added to the reserves without there being new Bridge.vETH minted.", "./raw_text_input_docs/README_eth-bridge.md"], ["What is Bridge.vETH, and what is its purpose in Verus?", "Bridge.vETH is a 100% backed currency in Verus, backed by a reserve of four currencies: VRSC, ETH, DAI, and MKR. Its purpose is to simplify the bridging of assets by seamlessly converting fees when sending assets across the bridge.", "The notary witnesses are also monitoring notarizations, and if they were to sign for something that they themselves do not agree with, they can auto-revoke their identities, using the VerusID protocol, which cannot be stopped by an attacker unless they have stolen both the keys for the notary ID and those for its revocation ID as well. This serves as a prevention for stolen key attacks, ensuring that notaries are extremely hard targets to compromise.## Bridge.vETH currency\nBridge.vETH is a 100% backed currency with 4 currencies in its reserves (VRSC, ETH, DAI, MKR), [read more on basket currencies](/currencies/). The Bridge.vETH currency function is to make the bridging of assets simple. From wherever side on the bridge you send it converts the fees that you need seamlessly.The value of Bridge.vETH increases relative to reserves when fees or interest are added to the reserves without there being new Bridge.vETH minted.", "./raw_text_input_docs/README_eth-bridge.md"], ["How does the value of Bridge.vETH change over time?", "The value of Bridge.vETH increases relative to its reserves when fees or interest are added to the reserves without new Bridge.vETH being minted. This means that the value of Bridge.vETH is directly tied to the value of its underlying reserves.", "The notary witnesses are also monitoring notarizations, and if they were to sign for something that they themselves do not agree with, they can auto-revoke their identities, using the VerusID protocol, which cannot be stopped by an attacker unless they have stolen both the keys for the notary ID and those for its revocation ID as well. This serves as a prevention for stolen key attacks, ensuring that notaries are extremely hard targets to compromise.## Bridge.vETH currency\nBridge.vETH is a 100% backed currency with 4 currencies in its reserves (VRSC, ETH, DAI, MKR), [read more on basket currencies](/currencies/). The Bridge.vETH currency function is to make the bridging of assets simple. From wherever side on the bridge you send it converts the fees that you need seamlessly.The value of Bridge.vETH increases relative to reserves when fees or interest are added to the reserves without there being new Bridge.vETH minted.", "./raw_text_input_docs/README_eth-bridge.md"]]], [["User:: Hey, I want to create a VerusID on the Verus blockchain. What's the base cost of doing so?", "AI Assistant:: The base cost of creating a VerusID on the Verus blockchain is 100 VRSC.", "User:: That sounds a bit pricey. Is there any way I can reduce the cost?", "AI Assistant:: You can reduce the cost of creating a VerusID on the Verus blockchain by using a referral. The cost with a referral used is 80 VRSC.", "User:: That's a bit more manageable. What's the purpose of the referral system in Verus, anyway?", "AI Assistant:: The referral system in Verus is designed to reward users with identities. For each VerusID created, the referral identity receives 20 VRSC. The referral system goes three levels down, which means you can receive 60 VRSC with each VerusID creation if you own three identities stringed together through referrals.", "User:: That's a great incentive! Now, I'm curious - what's the structure of a VerusID, exactly?", "AI Assistant:: A VerusID consists of several components, including:\n\n1. **VerusID Name**: a unique namespace and human-readable cryptocurrency address.\n2. **Primary Address**: the owner of the VerusID, which contains the private key and can contain more than one VerusID.\n3. **Identity Address**: the identifier of the VerusID, next to the name.\n4. **Private Address**: an optional attached private z-address.\n5. **Revocation Authority**: the identity address that can revoke the VerusID.\n6. **Recovery Authority**: the identity address that can recover the VerusID.\n7. **Contentmap**: VDXF key/value data.\n\nI hope that helps you understand the structure of a VerusID! Let me know if you have any more questions."], "AI Assistant", "", "N/A", [["What is the base cost of creating a VerusID on the Verus blockchain?", "The base cost of creating a VerusID on the Verus blockchain is 100 VRSC.", "## Costs\n**On the Verus blockchain** a VerusID costs 100 VRSC. These costs can be discounted with referrals. All costs paid are going to the [miners and stakers of the ecosystem](/economy/) and to the referrals if used.| | VerusID Cost |\n| :----------------------- | --: | \n| **Base cost** | 100 VRSC | \n| **Cost with referral used** | 80 VRSC |### Referrals\nA referral system is implemented to reward users with identities. For each VerusID a user creates, the referral identity receives 20 VRSC. The referral system goes three levels down.If one owns three identities that are stringed together through its referrals, one can receive 60 VRSC with each VerusID creation. This way an identity only has to cost 20 VRSC.::: tip Support the Verus Vision\nUse ``Verus Coin Foundation@`` when creating a VerusID on the Verus blockchain. All proceeds will go to the further development of the Verus vision.\n:::## Structure\nAn example of a VerusID:\n| Structure | Information |\n| :----------------------- | :--------------------- | \n| **VerusID Name** | The name is a unique namespace and human readable cryptocurrency address. | \n| **Primary Address** | The primary address is the owner of the VerusID, as it contains the private key. It can contain more than one VerusID. | \n| **Identity Address** | The identity address is, next to the name, the identifier of the VerusID. | \n| **Private Address** | An optional attached private z-address | \n| **Revocation Authority** | The identity address that can revoke the VerusID | \n| **Recovery Authority** | The identity address that can recover the VerusID | \n| **Contentmap** | VDXF key/value data |", "./raw_text_input_docs/README_addresses.md"], ["How can I reduce the cost of creating a VerusID on the Verus blockchain?", "You can reduce the cost of creating a VerusID on the Verus blockchain by using a referral. The cost with a referral used is 80 VRSC.", "## Costs\n**On the Verus blockchain** a VerusID costs 100 VRSC. These costs can be discounted with referrals. All costs paid are going to the [miners and stakers of the ecosystem](/economy/) and to the referrals if used.| | VerusID Cost |\n| :----------------------- | --: | \n| **Base cost** | 100 VRSC | \n| **Cost with referral used** | 80 VRSC |### Referrals\nA referral system is implemented to reward users with identities. For each VerusID a user creates, the referral identity receives 20 VRSC. The referral system goes three levels down.If one owns three identities that are stringed together through its referrals, one can receive 60 VRSC with each VerusID creation. This way an identity only has to cost 20 VRSC.::: tip Support the Verus Vision\nUse ``Verus Coin Foundation@`` when creating a VerusID on the Verus blockchain. All proceeds will go to the further development of the Verus vision.\n:::## Structure\nAn example of a VerusID:\n| Structure | Information |\n| :----------------------- | :--------------------- | \n| **VerusID Name** | The name is a unique namespace and human readable cryptocurrency address. | \n| **Primary Address** | The primary address is the owner of the VerusID, as it contains the private key. It can contain more than one VerusID. | \n| **Identity Address** | The identity address is, next to the name, the identifier of the VerusID. | \n| **Private Address** | An optional attached private z-address | \n| **Revocation Authority** | The identity address that can revoke the VerusID | \n| **Recovery Authority** | The identity address that can recover the VerusID | \n| **Contentmap** | VDXF key/value data |", "./raw_text_input_docs/README_addresses.md"], ["What is the purpose of the referral system in Verus?", "The referral system in Verus is designed to reward users with identities. For each VerusID created, the referral identity receives 20 VRSC. The referral system goes three levels down, which means you can receive 60 VRSC with each VerusID creation if you own three identities stringed together through referrals.", "## Costs\n**On the Verus blockchain** a VerusID costs 100 VRSC. These costs can be discounted with referrals. All costs paid are going to the [miners and stakers of the ecosystem](/economy/) and to the referrals if used.| | VerusID Cost |\n| :----------------------- | --: | \n| **Base cost** | 100 VRSC | \n| **Cost with referral used** | 80 VRSC |### Referrals\nA referral system is implemented to reward users with identities. For each VerusID a user creates, the referral identity receives 20 VRSC. The referral system goes three levels down.If one owns three identities that are stringed together through its referrals, one can receive 60 VRSC with each VerusID creation. This way an identity only has to cost 20 VRSC.::: tip Support the Verus Vision\nUse ``Verus Coin Foundation@`` when creating a VerusID on the Verus blockchain. All proceeds will go to the further development of the Verus vision.\n:::## Structure\nAn example of a VerusID:\n| Structure | Information |\n| :----------------------- | :--------------------- | \n| **VerusID Name** | The name is a unique namespace and human readable cryptocurrency address. | \n| **Primary Address** | The primary address is the owner of the VerusID, as it contains the private key. It can contain more than one VerusID. | \n| **Identity Address** | The identity address is, next to the name, the identifier of the VerusID. | \n| **Private Address** | An optional attached private z-address | \n| **Revocation Authority** | The identity address that can revoke the VerusID | \n| **Recovery Authority** | The identity address that can recover the VerusID | \n| **Contentmap** | VDXF key/value data |", "./raw_text_input_docs/README_addresses.md"], ["What is the structure of a VerusID?", "A VerusID consists of several components, including:\n\n1. **VerusID Name**: a unique namespace and human-readable cryptocurrency address.\n2. **Primary Address**: the owner of the VerusID, which contains the private key and can contain more than one VerusID.\n3. **Identity Address**: the identifier of the VerusID, next to the name.\n4. **Private Address**: an optional attached private z-address.\n5. **Revocation Authority**: the identity address that can revoke the VerusID.\n6. **Recovery Authority**: the identity address that can recover the VerusID.\n7. **Contentmap**: VDXF key/value data.", "## Costs\n**On the Verus blockchain** a VerusID costs 100 VRSC. These costs can be discounted with referrals. All costs paid are going to the [miners and stakers of the ecosystem](/economy/) and to the referrals if used.| | VerusID Cost |\n| :----------------------- | --: | \n| **Base cost** | 100 VRSC | \n| **Cost with referral used** | 80 VRSC |### Referrals\nA referral system is implemented to reward users with identities. For each VerusID a user creates, the referral identity receives 20 VRSC. The referral system goes three levels down.If one owns three identities that are stringed together through its referrals, one can receive 60 VRSC with each VerusID creation. This way an identity only has to cost 20 VRSC.::: tip Support the Verus Vision\nUse ``Verus Coin Foundation@`` when creating a VerusID on the Verus blockchain. All proceeds will go to the further development of the Verus vision.\n:::## Structure\nAn example of a VerusID:\n| Structure | Information |\n| :----------------------- | :--------------------- | \n| **VerusID Name** | The name is a unique namespace and human readable cryptocurrency address. | \n| **Primary Address** | The primary address is the owner of the VerusID, as it contains the private key. It can contain more than one VerusID. | \n| **Identity Address** | The identity address is, next to the name, the identifier of the VerusID. | \n| **Private Address** | An optional attached private z-address | \n| **Revocation Authority** | The identity address that can revoke the VerusID | \n| **Recovery Authority** | The identity address that can recover the VerusID | \n| **Contentmap** | VDXF key/value data |", "./raw_text_input_docs/README_addresses.md"]]], [["User:: I have a few questions about Verus and its transactions. What kind of currencies can be held in a z-address?", "AI Assistant:: Only native blockchain currencies can be held in a z-address. Simple token currencies or basket currencies cannot be held in a z-address.", "User:: That's helpful to know. What information is visible in a public-to-public transaction?", "AI Assistant:: In a public-to-public transaction, both the sender's address and the amount sent are visible, as well as the recipient's address(es) and received amount(s).", "User:: What's the difference between a public-to-private transaction and a private-to-public transaction in terms of visibility?", "AI Assistant:: In a public-to-private transaction, the sender's address and the amount sent are visible, but the recipient's address(es) and received amount(s) are not visible. In a private-to-public transaction, the sender's address and the amount sent are not visible, but the recipient's address(es) and received amount(s) are visible.", "User:: Is it still possible to correlate transactions between public and private addresses based on transaction patterns?", "AI Assistant:: Yes, it is still possible to correlate transactions by time and amounts between public and private addresses, potentially linking two public addresses based on transaction patterns.", "User:: What information is visible in a private-to-private transaction?", "AI Assistant:: In a private-to-private transaction, neither the sender's address and the amount sent nor the recipient's address(es) and received amount(s) are visible."], "AI Assistant", "", "N/A", [["What kind of currencies can be held in a z-address?", "Only native blockchain currencies can be held in a z-address. Simple token currencies or basket currencies cannot be held in a z-address.", "::: warning Only native currencies\nZ-addresses can only contain the native blockchain currency. Simple token currencies or basket currencies can **not** be held in a z-address.\n:::\n\n# Transaction scenarios\n\n## Public-to-public\n``VerusID@``, ``R-address``, or ``i-address`` \u27a1\ufe0f ``VerusID@``, ``R-address``, or ``i-address``\n\n- Sender's address and the amount sent are visible \n- Recipient's address(es) and received amount(s) are visible\n   \n## Public-to-private\n``VerusID@``, ``R-address``, or ``i-address`` \u27a1\ufe0f ``z-address`` or ``VerusID@:private``\n\n- Sender's address and the amount sent are visible\n- Recipient's address(es) and received amount(s) are **not** visible\n\n*Note: Correlating transactions by time and amounts between public and private addresses is still possible, potentially linking two public addresses based on transaction patterns.*\n\n## Private-to-public\n``z-address`` \u27a1\ufe0f ``VerusID@``, ``R-address``, or ``i-address``\n\n- Sender's address and the amount sent are **not** visible \n- Recipient's address(es) and received amount(s) are visible\n\n*Note: Like public-to-private transactions, there remains a possibility of correlating transactions based on timing and value, potentially linking two public addresses.*\n\n## Private-to-private\n``z-address`` \u27a1\ufe0f ``z-address`` or ``VerusID@:private``\n\n- Sender's address and the amount sent are **not** visible \n- Recipient's address(es) and received amount(s) are **not** visible", "./raw_text_input_docs/README.md"], ["What information is visible in a public-to-public transaction?", "In a public-to-public transaction, both the sender's address and the amount sent are visible, as well as the recipient's address(es) and received amount(s).", "::: warning Only native currencies\nZ-addresses can only contain the native blockchain currency. Simple token currencies or basket currencies can **not** be held in a z-address.\n:::\n\n# Transaction scenarios\n\n## Public-to-public\n``VerusID@``, ``R-address``, or ``i-address`` \u27a1\ufe0f ``VerusID@``, ``R-address``, or ``i-address``\n\n- Sender's address and the amount sent are visible \n- Recipient's address(es) and received amount(s) are visible\n   \n## Public-to-private\n``VerusID@``, ``R-address``, or ``i-address`` \u27a1\ufe0f ``z-address`` or ``VerusID@:private``\n\n- Sender's address and the amount sent are visible\n- Recipient's address(es) and received amount(s) are **not** visible\n\n*Note: Correlating transactions by time and amounts between public and private addresses is still possible, potentially linking two public addresses based on transaction patterns.*\n\n## Private-to-public\n``z-address`` \u27a1\ufe0f ``VerusID@``, ``R-address``, or ``i-address``\n\n- Sender's address and the amount sent are **not** visible \n- Recipient's address(es) and received amount(s) are visible\n\n*Note: Like public-to-private transactions, there remains a possibility of correlating transactions based on timing and value, potentially linking two public addresses.*\n\n## Private-to-private\n``z-address`` \u27a1\ufe0f ``z-address`` or ``VerusID@:private``\n\n- Sender's address and the amount sent are **not** visible \n- Recipient's address(es) and received amount(s) are **not** visible", "./raw_text_input_docs/README.md"], ["What is the difference between a public-to-private transaction and a private-to-public transaction in terms of visibility?", "In a public-to-private transaction, the sender's address and the amount sent are visible, but the recipient's address(es) and received amount(s) are not visible. In a private-to-public transaction, the sender's address and the amount sent are not visible, but the recipient's address(es) and received amount(s) are visible.", "::: warning Only native currencies\nZ-addresses can only contain the native blockchain currency. Simple token currencies or basket currencies can **not** be held in a z-address.\n:::\n\n# Transaction scenarios\n\n## Public-to-public\n``VerusID@``, ``R-address``, or ``i-address`` \u27a1\ufe0f ``VerusID@``, ``R-address``, or ``i-address``\n\n- Sender's address and the amount sent are visible \n- Recipient's address(es) and received amount(s) are visible\n   \n## Public-to-private\n``VerusID@``, ``R-address``, or ``i-address`` \u27a1\ufe0f ``z-address`` or ``VerusID@:private``\n\n- Sender's address and the amount sent are visible\n- Recipient's address(es) and received amount(s) are **not** visible\n\n*Note: Correlating transactions by time and amounts between public and private addresses is still possible, potentially linking two public addresses based on transaction patterns.*\n\n## Private-to-public\n``z-address`` \u27a1\ufe0f ``VerusID@``, ``R-address``, or ``i-address``\n\n- Sender's address and the amount sent are **not** visible \n- Recipient's address(es) and received amount(s) are visible\n\n*Note: Like public-to-private transactions, there remains a possibility of correlating transactions based on timing and value, potentially linking two public addresses.*\n\n## Private-to-private\n``z-address`` \u27a1\ufe0f ``z-address`` or ``VerusID@:private``\n\n- Sender's address and the amount sent are **not** visible \n- Recipient's address(es) and received amount(s) are **not** visible", "./raw_text_input_docs/README.md"], ["Is it possible to correlate transactions between public and private addresses based on transaction patterns?", "Yes, it is still possible to correlate transactions by time and amounts between public and private addresses, potentially linking two public addresses based on transaction patterns.", "::: warning Only native currencies\nZ-addresses can only contain the native blockchain currency. Simple token currencies or basket currencies can **not** be held in a z-address.\n:::\n\n# Transaction scenarios\n\n## Public-to-public\n``VerusID@``, ``R-address``, or ``i-address`` \u27a1\ufe0f ``VerusID@``, ``R-address``, or ``i-address``\n\n- Sender's address and the amount sent are visible \n- Recipient's address(es) and received amount(s) are visible\n   \n## Public-to-private\n``VerusID@``, ``R-address``, or ``i-address`` \u27a1\ufe0f ``z-address`` or ``VerusID@:private``\n\n- Sender's address and the amount sent are visible\n- Recipient's address(es) and received amount(s) are **not** visible\n\n*Note: Correlating transactions by time and amounts between public and private addresses is still possible, potentially linking two public addresses based on transaction patterns.*\n\n## Private-to-public\n``z-address`` \u27a1\ufe0f ``VerusID@``, ``R-address``, or ``i-address``\n\n- Sender's address and the amount sent are **not** visible \n- Recipient's address(es) and received amount(s) are visible\n\n*Note: Like public-to-private transactions, there remains a possibility of correlating transactions based on timing and value, potentially linking two public addresses.*\n\n## Private-to-private\n``z-address`` \u27a1\ufe0f ``z-address`` or ``VerusID@:private``\n\n- Sender's address and the amount sent are **not** visible \n- Recipient's address(es) and received amount(s) are **not** visible", "./raw_text_input_docs/README.md"], ["What information is visible in a private-to-private transaction?", "In a private-to-private transaction, neither the sender's address and the amount sent nor the recipient's address(es) and received amount(s) are visible.", "::: warning Only native currencies\nZ-addresses can only contain the native blockchain currency. Simple token currencies or basket currencies can **not** be held in a z-address.\n:::\n\n# Transaction scenarios\n\n## Public-to-public\n``VerusID@``, ``R-address``, or ``i-address`` \u27a1\ufe0f ``VerusID@``, ``R-address``, or ``i-address``\n\n- Sender's address and the amount sent are visible \n- Recipient's address(es) and received amount(s) are visible\n   \n## Public-to-private\n``VerusID@``, ``R-address``, or ``i-address`` \u27a1\ufe0f ``z-address`` or ``VerusID@:private``\n\n- Sender's address and the amount sent are visible\n- Recipient's address(es) and received amount(s) are **not** visible\n\n*Note: Correlating transactions by time and amounts between public and private addresses is still possible, potentially linking two public addresses based on transaction patterns.*\n\n## Private-to-public\n``z-address`` \u27a1\ufe0f ``VerusID@``, ``R-address``, or ``i-address``\n\n- Sender's address and the amount sent are **not** visible \n- Recipient's address(es) and received amount(s) are visible\n\n*Note: Like public-to-private transactions, there remains a possibility of correlating transactions based on timing and value, potentially linking two public addresses.*\n\n## Private-to-private\n``z-address`` \u27a1\ufe0f ``z-address`` or ``VerusID@:private``\n\n- Sender's address and the amount sent are **not** visible \n- Recipient's address(es) and received amount(s) are **not** visible", "./raw_text_input_docs/README.md"]]], [["User:: I'm trying to understand more about invoices in Verus. Can you break down the different components of an invoice?", "AI Assistant:: An invoice in Verus consists of several components. Here's a breakdown:\n\n1. **Flags**: Configurable flag bits for invoice options.\n2. **Amount**: The payment amount specified in the invoice.\n3. **Destination**: Details about the payment destination, utilizing the TransferDestination construct for flexibility across different types of destinations.\n4. **Requested Currency ID**: The identifier for the currency in which the payment is requested.\n5. **Expiry Height**: Optionally specifies a Verus blockchain height after which the invoice is considered expired.\n6. **Max Estimated Slippage**: Defines the acceptable slippage for currency conversions, if applicable.\n7. **Accepted Systems**: Lists blockchain systems or platforms accepted for payment other than VRSC/VRSCTEST.\n\nDo you have any questions about these components or would you like me to elaborate on any of them?", "User:: Yes, actually, I'd love to know more about the **Flags** component. What's its purpose?", "AI Assistant:: The **Flags** component in a Verus invoice is used to specify configurable flag bits for invoice options. This allows for customization of the invoice to accommodate different use cases and requirements. It provides a way to fine-tune the invoice to suit specific needs.\n\nWould you like to know more about any other component, or is there something else I can help you with?", "User:: That makes sense. What about the **Expiry Height** component? What's its significance?", "AI Assistant:: The **Expiry Height** component in a Verus invoice specifies a Verus blockchain height after which the invoice is considered expired. This means that the invoice will no longer be valid for payment after the specified blockchain height is reached. It's a way to set a time limit or a deadline for the invoice to be paid.\n\nDo you have any other questions about the components, or would you like to know more about how invoices work in Verus?", "User:: Another component that caught my attention is **Max Estimated Slippage**. How does it affect currency conversions?", "AI Assistant:: The **Max Estimated Slippage** component of a Verus invoice defines the acceptable slippage for currency conversions, if applicable. This means that the invoice specifies the maximum percentage of slippage allowed during currency conversions, denoted as a satoshi representation of a percentage in decimal format (between 0 and 1). It's a way to control the exchange rate margin when converting between different currencies.\n\nDo you have any more questions about invoices in Verus, or is there something else I can help you with?"], "AI Assistant", "", "N/A", [["What are the different components of an invoice in Verus?", "An invoice in Verus consists of several components, including:\n1. **Flags**: Configurable flag bits for invoice options.\n2. **Amount**: The payment amount specified in the invoice.\n3. **Destination**: Details about the payment destination, utilizing the TransferDestination construct for flexibility across different types of destinations.\n4. **Requested Currency ID**: The identifier for the currency in which the payment is requested.\n5. **Expiry Height**: Optionally specifies a Verus blockchain height after which the invoice is considered expired.\n6. **Max Estimated Slippage**: Defines the acceptable slippage for currency conversions, if applicable.\n7. **Accepted Systems**: Lists blockchain systems or platforms accepted for payment other than VRSC/VRSCTEST.", "- **Flags**: Configurable flag bits for invoice options.\n- **Amount**: The payment amount specified in the invoice.\n- **Destination**: Details about the payment destination, utilizing the [TransferDestination](/addresses/transfer-destination) construct for flexibility across different types of destinations.\n- **Requested Currency ID**: The identifier for the currency in which the payment is requested.\n- **Expiry Height**: Optionally specifies a Verus blockchain height after which the invoice is considered expired.\n- **Max Estimated Slippage**: Defines the acceptable slippage for currency conversions, if applicable. Denoted as a satoshi representation of a percentage in decimal format (between 0 and 1).\n- **Accepted Systems**: Lists blockchain systems or platforms accepted for payment other than VRSC/VRSCTEST.#### Flags", "./raw_text_input_docs/invoices.md"], ["What is the purpose of the **Flags** component in a Verus invoice?", "The **Flags** component in a Verus invoice is used to specify configurable flag bits for invoice options. This allows for customization of the invoice to accommodate different use cases and requirements.", "- **Flags**: Configurable flag bits for invoice options.\n- **Amount**: The payment amount specified in the invoice.\n- **Destination**: Details about the payment destination, utilizing the [TransferDestination](/addresses/transfer-destination) construct for flexibility across different types of destinations.\n- **Requested Currency ID**: The identifier for the currency in which the payment is requested.\n- **Expiry Height**: Optionally specifies a Verus blockchain height after which the invoice is considered expired.\n- **Max Estimated Slippage**: Defines the acceptable slippage for currency conversions, if applicable. Denoted as a satoshi representation of a percentage in decimal format (between 0 and 1).\n- **Accepted Systems**: Lists blockchain systems or platforms accepted for payment other than VRSC/VRSCTEST.#### Flags", "./raw_text_input_docs/invoices.md"], ["What is the significance of the **Expiry Height** component in a Verus invoice?", "The **Expiry Height** component in a Verus invoice specifies a Verus blockchain height after which the invoice is considered expired. This means that the invoice will no longer be valid for payment after the specified blockchain height is reached.", "- **Flags**: Configurable flag bits for invoice options.\n- **Amount**: The payment amount specified in the invoice.\n- **Destination**: Details about the payment destination, utilizing the [TransferDestination](/addresses/transfer-destination) construct for flexibility across different types of destinations.\n- **Requested Currency ID**: The identifier for the currency in which the payment is requested.\n- **Expiry Height**: Optionally specifies a Verus blockchain height after which the invoice is considered expired.\n- **Max Estimated Slippage**: Defines the acceptable slippage for currency conversions, if applicable. Denoted as a satoshi representation of a percentage in decimal format (between 0 and 1).\n- **Accepted Systems**: Lists blockchain systems or platforms accepted for payment other than VRSC/VRSCTEST.#### Flags", "./raw_text_input_docs/invoices.md"], ["How does the **Max Estimated Slippage** component of a Verus invoice affect currency conversions?", "The **Max Estimated Slippage** component of a Verus invoice defines the acceptable slippage for currency conversions, if applicable. This means that the invoice specifies the maximum percentage of slippage allowed during currency conversions, denoted as a satoshi representation of a percentage in decimal format (between 0 and 1).", "- **Flags**: Configurable flag bits for invoice options.\n- **Amount**: The payment amount specified in the invoice.\n- **Destination**: Details about the payment destination, utilizing the [TransferDestination](/addresses/transfer-destination) construct for flexibility across different types of destinations.\n- **Requested Currency ID**: The identifier for the currency in which the payment is requested.\n- **Expiry Height**: Optionally specifies a Verus blockchain height after which the invoice is considered expired.\n- **Max Estimated Slippage**: Defines the acceptable slippage for currency conversions, if applicable. Denoted as a satoshi representation of a percentage in decimal format (between 0 and 1).\n- **Accepted Systems**: Lists blockchain systems or platforms accepted for payment other than VRSC/VRSCTEST.#### Flags", "./raw_text_input_docs/invoices.md"]]], [["User:: I'm trying to learn more about the Verus coin, can you help me? When was the Verus coin launched?", "AI Assistant:: The Verus coin was launched on 21 May 2018.", "User:: Okay, that's good to know. What's the ticker symbol for the Verus coin?", "AI Assistant:: The ticker symbol for the Verus coin is VRSC.", "User:: I'm curious about the technical aspects of the Verus blockchain. How often are blocks added to the Verus blockchain on average?", "AI Assistant:: On average, blocks are added to the Verus blockchain every 1 minute.", "User:: That's pretty fast. What's the default transaction fee on the Verus network?", "AI Assistant:: The default transaction fee on the Verus network is 0.0001 VRSC.", "User:: What's the maximum total supply of Verus coins?", "AI Assistant:: The maximum total supply of Verus coins is 83,540,184 VRSC.", "User:: I'm interested in the underlying technology of the Verus network. What consensus algorithm does the Verus network use?", "AI Assistant:: The Verus network uses the Verus Proof of Power consensus algorithm.", "User:: And what hash algorithm is used by the Verus network?", "AI Assistant:: The Verus network uses the VerusHash 2.2 hash algorithm.", "User:: I've heard that Verus has some advanced privacy features. What privacy technology does the Verus network utilize?", "AI Assistant:: The Verus network utilizes Zcash Sapling privacy technology."], "AI Assistant", "", "N/A", [["When was the Verus coin launched?", "The Verus coin was launched on 21 May 2018.", "# Coin Overview\n\n| | |\n| -----------------------: | :-- | \n| **Launch Date** | 21 May 2018 | \n| **Coin Ticker** | VRSC | \n| **Average Block Time** | 1 minute | \n| **Transaction Fee** | 0.0001 VRSC | \n| **Max Supply** | 83,540,184 VRSC | \n| **Consensus Algorithm** | [Verus Proof of Power](/overview/verus-proof-of-power/) | \n| **Hash Algorithm** | [VerusHash 2.2](/overview/verus-proof-of-power.md#verushash-2-2) | \n| **Privacy** | Zcash Sapling |", "./raw_text_input_docs/coin.md"], ["What is the ticker symbol for the Verus coin?", "The ticker symbol for the Verus coin is VRSC.", "# Coin Overview\n\n| | |\n| -----------------------: | :-- | \n| **Launch Date** | 21 May 2018 | \n| **Coin Ticker** | VRSC | \n| **Average Block Time** | 1 minute | \n| **Transaction Fee** | 0.0001 VRSC | \n| **Max Supply** | 83,540,184 VRSC | \n| **Consensus Algorithm** | [Verus Proof of Power](/overview/verus-proof-of-power/) | \n| **Hash Algorithm** | [VerusHash 2.2](/overview/verus-proof-of-power.md#verushash-2-2) | \n| **Privacy** | Zcash Sapling |", "./raw_text_input_docs/coin.md"], ["How often are blocks added to the Verus blockchain on average?", "On average, blocks are added to the Verus blockchain every 1 minute.", "# Coin Overview\n\n| | |\n| -----------------------: | :-- | \n| **Launch Date** | 21 May 2018 | \n| **Coin Ticker** | VRSC | \n| **Average Block Time** | 1 minute | \n| **Transaction Fee** | 0.0001 VRSC | \n| **Max Supply** | 83,540,184 VRSC | \n| **Consensus Algorithm** | [Verus Proof of Power](/overview/verus-proof-of-power/) | \n| **Hash Algorithm** | [VerusHash 2.2](/overview/verus-proof-of-power.md#verushash-2-2) | \n| **Privacy** | Zcash Sapling |", "./raw_text_input_docs/coin.md"], ["What is the default transaction fee on the Verus network?", "The default transaction fee on the Verus network is 0.0001 VRSC.", "# Coin Overview\n\n| | |\n| -----------------------: | :-- | \n| **Launch Date** | 21 May 2018 | \n| **Coin Ticker** | VRSC | \n| **Average Block Time** | 1 minute | \n| **Transaction Fee** | 0.0001 VRSC | \n| **Max Supply** | 83,540,184 VRSC | \n| **Consensus Algorithm** | [Verus Proof of Power](/overview/verus-proof-of-power/) | \n| **Hash Algorithm** | [VerusHash 2.2](/overview/verus-proof-of-power.md#verushash-2-2) | \n| **Privacy** | Zcash Sapling |", "./raw_text_input_docs/coin.md"], ["What is the maximum total supply of Verus coins?", "The maximum total supply of Verus coins is 83,540,184 VRSC.", "# Coin Overview\n\n| | |\n| -----------------------: | :-- | \n| **Launch Date** | 21 May 2018 | \n| **Coin Ticker** | VRSC | \n| **Average Block Time** | 1 minute | \n| **Transaction Fee** | 0.0001 VRSC | \n| **Max Supply** | 83,540,184 VRSC | \n| **Consensus Algorithm** | [Verus Proof of Power](/overview/verus-proof-of-power/) | \n| **Hash Algorithm** | [VerusHash 2.2](/overview/verus-proof-of-power.md#verushash-2-2) | \n| **Privacy** | Zcash Sapling |", "./raw_text_input_docs/coin.md"], ["What consensus algorithm does the Verus network use?", "The Verus network uses the Verus Proof of Power consensus algorithm.", "# Coin Overview\n\n| | |\n| -----------------------: | :-- | \n| **Launch Date** | 21 May 2018 | \n| **Coin Ticker** | VRSC | \n| **Average Block Time** | 1 minute | \n| **Transaction Fee** | 0.0001 VRSC | \n| **Max Supply** | 83,540,184 VRSC | \n| **Consensus Algorithm** | [Verus Proof of Power](/overview/verus-proof-of-power/) | \n| **Hash Algorithm** | [VerusHash 2.2](/overview/verus-proof-of-power.md#verushash-2-2) | \n| **Privacy** | Zcash Sapling |", "./raw_text_input_docs/coin.md"], ["What hash algorithm is used by the Verus network?", "The Verus network uses the VerusHash 2.2 hash algorithm.", "# Coin Overview\n\n| | |\n| -----------------------: | :-- | \n| **Launch Date** | 21 May 2018 | \n| **Coin Ticker** | VRSC | \n| **Average Block Time** | 1 minute | \n| **Transaction Fee** | 0.0001 VRSC | \n| **Max Supply** | 83,540,184 VRSC | \n| **Consensus Algorithm** | [Verus Proof of Power](/overview/verus-proof-of-power/) | \n| **Hash Algorithm** | [VerusHash 2.2](/overview/verus-proof-of-power.md#verushash-2-2) | \n| **Privacy** | Zcash Sapling |", "./raw_text_input_docs/coin.md"], ["What privacy technology does the Verus network utilize?", "The Verus network utilizes Zcash Sapling privacy technology.", "# Coin Overview\n\n| | |\n| -----------------------: | :-- | \n| **Launch Date** | 21 May 2018 | \n| **Coin Ticker** | VRSC | \n| **Average Block Time** | 1 minute | \n| **Transaction Fee** | 0.0001 VRSC | \n| **Max Supply** | 83,540,184 VRSC | \n| **Consensus Algorithm** | [Verus Proof of Power](/overview/verus-proof-of-power/) | \n| **Hash Algorithm** | [VerusHash 2.2](/overview/verus-proof-of-power.md#verushash-2-2) | \n| **Privacy** | Zcash Sapling |", "./raw_text_input_docs/coin.md"]]]]