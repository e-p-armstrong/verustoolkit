[
    [
        [
            "How does Verus's Stake Guard system prevent cheating and ensure the security of staking rewards?",
            "Verus's Stake Guard system is a security mechanism that prevents cheating and ensures the security of staking rewards. Here's how it works:\n\nWhen a staker tries to spend their block reward, the Stake Guard Crypto Condition script evaluates the spend transaction for two conditions:\n\n**Condition a:** Is the spend being signed by the Public Key which staked it? In other words, is the staker trying to spend their own reward? If so, the public key is automatically passed to Stake Guard, which compares it to the public key in the metadata of the stake transaction on the blockchain. If they match, Stake Guard signs it as normal, and the staker receives their reward.\n\n**Condition b:** Is proof presented in the OP_RETURN that this is a cheater's block reward? In other words, is someone trying to spend a reward that doesn't belong to them? If so, Stake Guard verifies that the cheat transaction proof has been submitted in the OP_RETURN. This proof is generated by a Cheat Hunter, who finds and packs up the data bits from the duplicate stake transaction.\n\nStake Guard then evaluates and confirms that the proof is indeed a verifiable cheated transaction. It does this by comparing the matching UTXOs of the legitimate and cheated staking transactions, their respective previous block heights, and their respective block heights at the time they were generated. This is another case of validating signatures to cryptographically verify that the stake transaction was properly signed, meaning proof of cheating cannot be forged.\n\nIf Stake Guard confirms the cheating, the reward is taken away from the cheater and made available to anyone who sees it and spends it at block maturity. This ensures that cheating is not rewarded and that staking rewards are secure.\n\nOverall, Verus's Stake Guard system provides an additional layer of security to prevent cheating and ensure the integrity of the staking rewards process.",
            "k for any such cheat attempts and tuck them away to take at that cheat transactions maturity. Also important to note: UTXO can only be spent once, so there\u2019s no risk of double spending at this point. And the cheater\u2019s one valid block reward is able to be taken by anyone who sees it and spends it at block maturity.\nAfter 100 blocks when any block reward is spent, it passes through the Stake Guard Crypto Condition script which evaluates the spend transaction for 1 of 2 things:\nCondition a \u2014 Is this spend being signed by the Public Key which staked it?\nCondition b \u2014 Is proof presented in the OP_RETURN that this is a cheater\u2019s block reward?\n Result\u2014 Depending on one of the two conditions being met, Stake Guard will validate or reject the spend.\nCondition a: if a normal staker is trying to shield their stake reward, their public key is being passed automatically to Stake Guard which compares it to the public key in the meta data of the stake transaction on the blockchain. They match, so it signs it as normal and the staker has their reward.\nCondition b: if the public key of the spender does NOT match the original staker public key, Stake Guard verifies that the cheat transaction proof has been submitted in the OP_RETURN.\nThe proof of a cheated transaction, the data bits packed up from that duplicate stake transaction which the Cheat Hunter found, is passed in an OP_RETURN and the Stake Guard CC evaluates and confirms that it is indeed a verifiable cheated transaction. It does this by comparing the matching UTXOs of the legitimate and cheated staking transactions, their respective previous block heights, and their respective block heights at the time they were generated. In fact, this is another case of validating signatures to cryptographically verify that the stake transaction was properly signed, meaning proof of cheating cannot be forged.\nIf Stake Guard confirms the che",
            "./raw_text_input_medium/How Verus Solved Nothing at Stake and Weak Subjectivity Proof of Stake Problems-2018-10-28 02:09:22"
        ]
    ],
    "will",
    "be",
    "replaced",
    "7dbe8d43-400e-4c82-b91e-ee93bce5688e"
]