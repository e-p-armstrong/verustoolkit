[
    [
        [
            "How does the Verus VIP protocol protect against malicious attacks on its blockchain network, and what are some of the key security features that enable this protection?",
            "The Verus VIP protocol is designed to provide robust security features to protect its blockchain network against malicious attacks. One of the key ways it does this is by requiring multiple layers of validation and confirmation for notarizations. \n\nFirstly, the protocol ensures that every notarization on any chain is first made public and given a period of time before confirmation. This allows for any potential issues or discrepancies to be identified and addressed before the notarization is confirmed. \n\nSecondly, the protocol requires notarizations to be agreed to by validators and then signed by all notaries on either the earned or the accepted chain. This adds an additional layer of security, as notarizations must be verified by multiple parties before they can be confirmed.\n\nThirdly, the protocol allows for notaries to auto-revoke their own identities if they suspect that their keys have been stolen. This prevents stolen key attacks from causing significant damage to the network.\n\nFourthly, the protocol enables chain oracle controllers to monitor for discrepancies between soon to be confirmed notarizations and chains that they monitor. If any discrepancies are detected, the oracle notification network can be used to pause cross-chain transactions, providing an additional line of defense for each chain on the network.\n\nFinally, the protocol provides for revocation of all VerusIDs, including notary IDs, even those used for Ethereum protocol bridges. This ensures that the network can respond quickly and effectively in the event of a security breach.\n\nOverall, the Verus VIP protocol provides a robust and multi-layered security framework that protects its blockchain network against a wide range of potential attacks.",
            "re combined hash + stake power than the publicly validated chain making earned notarizations\nDevelopers helping them by creating an alternate protocol for the shadow chain\nWhile you may recognize these requirements as very close to the requirements of attacking any blockchain, the Verus VIP protocol provides a way to even defend against such an unlikely scenario. VIP provides for revocation of all VerusIDs, including notary IDs, even those that are used for Ethereum protocol bridges. Furthermore, each PBaaS chain, including Verus, has a network agreed multisig chain oracle that can separately pause cross-chain notarizations or transactions temporarily, which also can be overridden by network validators.\nTo enable yet another layer of safeguards, the Verus VIP protocol does not confirm any notarization that has first been agreed to by validators, then agreed to and signed by all notaries on either the earned or the accepted chain, until a second such notarization confirms the first. This ensures that every notarization on any chain is first made public, given a period of time before confirmation, and finally, if nothing stops it, confirmed.\nMeanwhile, with basic monitoring by witnesses to see if their own identities have signed for anything they do not actually agree with, meaning their keys were stolen, notaries can auto-revoke their own identities and prevent stolen key attacks from being anything more than an inconvenience. Additional monitoring by chain oracle controllers to look for clear discrepancies between soon to be confirmed notarizations and chains that they monitor can also use the oracle notification network to pause cross-chain transactions, providing yet another line of defense for each chain on the network.\nWhile there are numerous capabilities and safeguards built into the Verus VIP protocol beyond those described in this document, by separating the p",
            "./raw_text_input_medium/Verus Internet Protocol (VIP)\u200a\u2014\u200aProvable, Decentralized Cross-chain Communication-2023-08-24 10:11:22"
        ]
    ],
    "will",
    "be",
    "replaced",
    "f725185e-0b3a-480a-b6b6-97319e6dd053"
]