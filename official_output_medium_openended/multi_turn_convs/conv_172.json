[
    "## Conversation that answers the provided questions:\n**User:**\nHi, I'm new to Verus and I'm trying to launch a currency on the platform. Can you walk me through the steps involved in launching a currency using either Verus Desktop or the command-line interface?\n\n**AI Assistant:**\nLaunching a currency on Verus involves several steps, which can be performed using either Verus Desktop or the command-line interface. Here's a detailed guide on how to do it:\n\n**Step 1: Define the Currency**\nThe first step is to define the currency using the `definecurrency` command. This command takes a JSON object as an argument, which specifies the properties of the currency. The JSON object should contain the following fields:\n* `name`: The name of the currency.\n* `options`: An integer that specifies the options for the currency.\n* `proofprotocol`: The proof protocol to use for the currency.\n* `preallocations`: An array of preallocations, which specify the initial distribution of the currency.\n\nHere's an example of how to define a currency using Verus Desktop:\n```\nrun definecurrency '{\n \"name\":\"MyBrand\",\n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\nAnd here's an example of how to define a currency using the command-line interface:\n```\n./verus -chain=VRSCTEST definecurrency \u2018{\n \"name\":\"MyBrand\",\n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\n**Step 2: Get the HEX**\nAfter defining the currency, you will receive a HEX string as output. This HEX string is a large array of letters and numbers that represents the currency definition.\n\n**Step 3: Broadcast the Currency**\nTo start the currency, you need to broadcast the currency definition to the blockchain using the `sendrawtransaction` command. This command takes the HEX string as an argument.\n\nHere's an example of how to broadcast the currency using Verus Desktop:\n```\nrun sendrawtransaction \"HEX\"\n```\nAnd here's an example of how to broadcast the currency using the command-line interface:\n```\n./verus -chain=VRSCTEST sendrawtransaction \"HEX\"\n```\n**Step 4: Wait for Launch**\nAfter broadcasting the currency, it will take a minimum of 20 blocks for the currency to launch. During this time, the funds from the root ID will be taken and distributed to the miners and stakers.\n\n**Step 5: Get Currency Information**\nOnce the currency has launched, you can use the `getcurrency` command to retrieve information about the currency.\n\nHere's an example of how to get currency information using Verus Desktop:\n```\nrun getcurrency\n```\nNote that it's highly recommended to launch currencies on the testnet first before going to mainnet. This allows you to test the currency and ensure that everything works as expected before launching it on the mainnet.\n\nDo you have any further questions about launching a currency on Verus, or would you like more information on any of these steps?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "How do I launch a currency on Verus using either Verus Desktop or the command-line interface, and what are the key steps involved in this process?",
            "Launching a currency on Verus involves several steps, which can be performed using either Verus Desktop or the command-line interface. Here's a detailed guide on how to do it:\n\n**Step 1: Define the Currency**\nThe first step is to define the currency using the `definecurrency` command. This command takes a JSON object as an argument, which specifies the properties of the currency. The JSON object should contain the following fields:\n* `name`: The name of the currency.\n* `options`: An integer that specifies the options for the currency.\n* `proofprotocol`: The proof protocol to use for the currency.\n* `preallocations`: An array of preallocations, which specify the initial distribution of the currency.\n\nHere's an example of how to define a currency using Verus Desktop:\n```\nrun definecurrency '{\n \"name\":\"MyBrand\",\n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\nAnd here's an example of how to define a currency using the command-line interface:\n```\n./verus -chain=VRSCTEST definecurrency \u2018{\n \"name\":\"MyBrand\",\n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\n**Step 2: Get the HEX**\nAfter defining the currency, you will receive a HEX string as output. This HEX string is a large array of letters and numbers that represents the currency definition.\n\n**Step 3: Broadcast the Currency**\nTo start the currency, you need to broadcast the currency definition to the blockchain using the `sendrawtransaction` command. This command takes the HEX string as an argument.\n\nHere's an example of how to broadcast the currency using Verus Desktop:\n```\nrun sendrawtransaction \"HEX\"\n```\nAnd here's an example of how to broadcast the currency using the command-line interface:\n```\n./verus -chain=VRSCTEST sendrawtransaction \"HEX\"\n```\n**Step 4: Wait for Launch**\nAfter broadcasting the currency, it will take a minimum of 20 blocks for the currency to launch. During this time, the funds from the root ID will be taken and distributed to the miners and stakers.\n\n**Step 5: Get Currency Information**\nOnce the currency has launched, you can use the `getcurrency` command to retrieve information about the currency.\n\nHere's an example of how to get currency information using Verus Desktop:\n```\nrun getcurrency\n```\nNote that it's highly recommended to launch currencies on the testnet first before going to mainnet. This allows you to test the currency and ensure that everything works as expected before launching it on the mainnet.",
            "Let\u2019s use one and see how it is launched.\nFirst of all let\u2019s see the difference between launching with Verus Desktop and the command-line interface. Verus testnet is used for testing purposes.\n\u26a0\ufe0f It is highly recommended to launch currencies on testnet first before going to mainnet! \u26a0\ufe0f\nVerus Desktop: go to \u201cSettings\u201d (cogwheel top-right) -> \u201cCoin Settings\u201d. There you see an input field.\nHere you can run commands in Verus Desktop\nTo use the input field and launch a currency on Verus Desktop (see run before the command):\nrun definecurrency '{\n \"name\":\"MyBrand\",\n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}\u2019\nCommand-line interface: (this is for testnet, when on mainnet omit -chain=VRSCTEST or for any other PBaaS-chain, just edit VRSCTEST)\n./verus -chain=VRSCTEST definecurrency \u2018{\n \"name\":\"MyBrand\",\n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\nNow, after doing these commands in either Verus Desktop or the command-line interface you get a HEX returned. It\u2019s a very large array of letters and numbers. We need to use this HEX to broadcast the currency to the blockchain. Only then will the currency really start and the funds taken (distributed to the miners and stakers) for the launch.\nUsing the HEX\nTo start the currency use these commands:\nVerus Desktop:\nrun sendrawtransaction \"HEX\"\nCommand-line interface: (this is for testnet, when on mainnet omit -chain=VRSCTEST or for any other PBaaS-chain, just edit VRSCTEST)\n./verus -chain=VRSCTEST sendrawtransaction \"HEX\"\nAfter doing these commands the currency has started, the funds from the rootID are taken, and it takes a minimum of 20 blocks to actually launch it (and if all preconversion goals are met).\nCurrency information\nDuring the preconversion time frame and after the launch you can lookup all kinds of information on the currency.\nVerus Desktop:\nrun getcurrency ",
            "./raw_text_input_medium/Ultimate Guide for Launching Currencies on Verus-2024-03-14 14:07:08"
        ]
    ]
]