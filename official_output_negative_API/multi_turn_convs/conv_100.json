[
    "## Conversation that answers the provided questions:\n**User:**\nI'm having some issues with locked transaction outputs. Can you explain why the `lockunspent` command permanently locks or unlocks transaction outputs?\n\n**AI Assistant:**\nActually, that's a misconception. The `lockunspent` command does not permanently lock or unlock transaction outputs. Locks are stored in memory only and are cleared when a node stops or fails. This means that any locked outputs will be available for spending again when the node restarts.\n\n**User:**\nOh, I see. So how do I use the `lockunspent` command to permanently lock a transaction output?\n\n**AI Assistant:**\nYou can't use the `lockunspent` command to permanently lock a transaction output. As I mentioned earlier, locks are stored in memory only and are cleared when a node stops or fails. If you want to temporarily lock a transaction output, you can use the `lockunspent` command with `unlock=false`, but it will not be permanent.\n\n**User:**\nThat's good to know. What happens to the locked transaction outputs when a node restarts?\n\n**AI Assistant:**\nWhen a node restarts, the locked transaction outputs are cleared. This means that any outputs that were previously locked will be available for spending again after the node restarts. So, if you need to keep the outputs locked, you'll need to re-lock them after the node restarts.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "Can you explain why the `lockunspent` command permanently locks or unlocks transaction outputs?",
            "The `lockunspent` command does not permanently lock or unlock transaction outputs. Locks are stored in memory only and are cleared when a node stops or fails. This means that any locked outputs will be available for spending again when the node restarts.",
            "lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...]\n\nUpdates list of temporarily unspendable outputs.\nTemporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\nA locked transaction output will not be chosen by automatic coin selection, when spending VRSC.\nLocks are stored in memory only. Nodes start with zero locked outputs, and the locked output list\nis always cleared (by virtue of process exit) when a node stops or fails.\nAlso see the listunspent call\n\nArguments:\n1. unlock      (boolean, required) Whether to unlock (true) or lock (false) the specified transactions\n2. \"transactions\" (string, required) A json array of objects. Each object the txid (string) vout (numeric)\n   [      (json array of json objects)\n    {\n     \"txid\":\"id\",  (string) The transaction id\n     \"vout\": n     (numeric) The output number\n    }\n    ,...\n   ]\n\nResult:\ntrue|false  (boolean) Whether the command was successful or not\n\nExamples:\n\nList the unspent transactions\n> verus listunspent\n\nLock an unspent transaction\n> verus lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"\n\nList the locked transactions\n> verus listlockunspent\n\nUnlock the transaction again\n> verus lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/lockunspent"
        ],
        [
            "How do I use the `lockunspent` command to permanently lock a transaction output?",
            "You can't use the `lockunspent` command to permanently lock a transaction output. As mentioned earlier, locks are stored in memory only and are cleared when a node stops or fails. If you want to temporarily lock a transaction output, you can use the `lockunspent` command with `unlock=false`, but it will not be permanent.",
            "lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...]\n\nUpdates list of temporarily unspendable outputs.\nTemporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\nA locked transaction output will not be chosen by automatic coin selection, when spending VRSC.\nLocks are stored in memory only. Nodes start with zero locked outputs, and the locked output list\nis always cleared (by virtue of process exit) when a node stops or fails.\nAlso see the listunspent call\n\nArguments:\n1. unlock      (boolean, required) Whether to unlock (true) or lock (false) the specified transactions\n2. \"transactions\" (string, required) A json array of objects. Each object the txid (string) vout (numeric)\n   [      (json array of json objects)\n    {\n     \"txid\":\"id\",  (string) The transaction id\n     \"vout\": n     (numeric) The output number\n    }\n    ,...\n   ]\n\nResult:\ntrue|false  (boolean) Whether the command was successful or not\n\nExamples:\n\nList the unspent transactions\n> verus listunspent\n\nLock an unspent transaction\n> verus lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"\n\nList the locked transactions\n> verus listlockunspent\n\nUnlock the transaction again\n> verus lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/lockunspent"
        ],
        [
            "What happens to the locked transaction outputs when a node restarts?",
            "When a node restarts, the locked transaction outputs are cleared. This means that any outputs that were previously locked will be available for spending again after the node restarts.",
            "lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...]\n\nUpdates list of temporarily unspendable outputs.\nTemporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\nA locked transaction output will not be chosen by automatic coin selection, when spending VRSC.\nLocks are stored in memory only. Nodes start with zero locked outputs, and the locked output list\nis always cleared (by virtue of process exit) when a node stops or fails.\nAlso see the listunspent call\n\nArguments:\n1. unlock      (boolean, required) Whether to unlock (true) or lock (false) the specified transactions\n2. \"transactions\" (string, required) A json array of objects. Each object the txid (string) vout (numeric)\n   [      (json array of json objects)\n    {\n     \"txid\":\"id\",  (string) The transaction id\n     \"vout\": n     (numeric) The output number\n    }\n    ,...\n   ]\n\nResult:\ntrue|false  (boolean) Whether the command was successful or not\n\nExamples:\n\nList the unspent transactions\n> verus listunspent\n\nLock an unspent transaction\n> verus lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"\n\nList the locked transactions\n> verus listlockunspent\n\nUnlock the transaction again\n> verus lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/lockunspent"
        ]
    ]
]