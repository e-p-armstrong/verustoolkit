[
    [
        [
            "How does Verus prevent frontrunning, and what is the concept of \"fill-or-kill\" transactions?",
            "Verus eliminates intra-block frontrunning and prevents sophisticated front-runners that may attempt multi-block mining control by using transaction expiration. Additionally, \"fill-or-kill\" transactions can be used to prevent frontrunning entirely. This means that if a transaction is not filled at the desired price, it will be killed, preventing frontrunners from taking advantage of the transaction.",
            " Thus, Verus eliminates intra-block frontrunning, and using transaction expiration, even sophisticated front-runners that may attempt multi-block mining control can be prevented entirely using \u201cfill-or-kill\u201d transactions.\nThe parallel processing system also leads to reduced slippage for users in almost all circumstances. In all automated market makers, the price offered changes due to interaction with the system. Put simply, if I sell ETH for ERC20, my interaction will push down the price of ETH, and I will get less ERC20 than is indicated by the price existing immediately before my transaction. The larger the size of my transaction, the more slippage I will see. In a system that solves all transactions in parallel, including all \u201cbuys\u201d and all \u201csells\u201d, slippage is reduced because in solving the price for a block, the protocol will first \u201ccancel out\u201d (in the mathematical sense) all the buys and sells until one of them is zero. Then, in the above example, if purchases of ETH exceed sales of ETH (in the block in which I transact), then the price, from my perspective will have improved from that existing immediately prior to my transaction \u2014 the direct opposite of slippage. In a robustly-used system, it should be true that overall slippage experienced by users will be significantly lower than in a serial-based system.\nImproved Benefits for Users\nA significant benefit, covered extensively already, is that users (converters) can expect to receive the fairest, best price without any needed sophistication, trading algorithms, bots, superior infrastructure investment, and the like. In a \u201cpool\u201d that is fairly large (compared to my trading size) and regularly transacted, I can simply issue a sendcurrency command, and transact at market, with a calm and confidence that is rare in other serial-based heavily-gamed markets.\nIn fact, because of parallel processing, and the fact that",
            "./raw_text_input_medium/Verus\u200a\u2014\u200aSuperior DeFi for Community Driven Liquidity-2020-10-16 16:08:12"
        ],
        [
            "How does Verus's parallel processing system reduce slippage for users?",
            "Verus's parallel processing system reduces slippage for users by solving all transactions in parallel, including all \"buys\" and all \"sells\". This means that the protocol will first \"cancel out\" (in the mathematical sense) all the buys and sells until one of them is zero, resulting in reduced slippage. In a robustly-used system, overall slippage experienced by users will be significantly lower than in a serial-based system.",
            " Thus, Verus eliminates intra-block frontrunning, and using transaction expiration, even sophisticated front-runners that may attempt multi-block mining control can be prevented entirely using \u201cfill-or-kill\u201d transactions.\nThe parallel processing system also leads to reduced slippage for users in almost all circumstances. In all automated market makers, the price offered changes due to interaction with the system. Put simply, if I sell ETH for ERC20, my interaction will push down the price of ETH, and I will get less ERC20 than is indicated by the price existing immediately before my transaction. The larger the size of my transaction, the more slippage I will see. In a system that solves all transactions in parallel, including all \u201cbuys\u201d and all \u201csells\u201d, slippage is reduced because in solving the price for a block, the protocol will first \u201ccancel out\u201d (in the mathematical sense) all the buys and sells until one of them is zero. Then, in the above example, if purchases of ETH exceed sales of ETH (in the block in which I transact), then the price, from my perspective will have improved from that existing immediately prior to my transaction \u2014 the direct opposite of slippage. In a robustly-used system, it should be true that overall slippage experienced by users will be significantly lower than in a serial-based system.\nImproved Benefits for Users\nA significant benefit, covered extensively already, is that users (converters) can expect to receive the fairest, best price without any needed sophistication, trading algorithms, bots, superior infrastructure investment, and the like. In a \u201cpool\u201d that is fairly large (compared to my trading size) and regularly transacted, I can simply issue a sendcurrency command, and transact at market, with a calm and confidence that is rare in other serial-based heavily-gamed markets.\nIn fact, because of parallel processing, and the fact that",
            "./raw_text_input_medium/Verus\u200a\u2014\u200aSuperior DeFi for Community Driven Liquidity-2020-10-16 16:08:12"
        ],
        [
            "What benefit do users receive from Verus's parallel processing system and fair market pricing?",
            "Users can expect to receive the fairest, best price without needing sophistication, trading algorithms, bots, or superior infrastructure investment. In a large and regularly transacted \"pool\", users can simply issue a sendcurrency command and transact at market with confidence, knowing they will receive a fair price.",
            " Thus, Verus eliminates intra-block frontrunning, and using transaction expiration, even sophisticated front-runners that may attempt multi-block mining control can be prevented entirely using \u201cfill-or-kill\u201d transactions.\nThe parallel processing system also leads to reduced slippage for users in almost all circumstances. In all automated market makers, the price offered changes due to interaction with the system. Put simply, if I sell ETH for ERC20, my interaction will push down the price of ETH, and I will get less ERC20 than is indicated by the price existing immediately before my transaction. The larger the size of my transaction, the more slippage I will see. In a system that solves all transactions in parallel, including all \u201cbuys\u201d and all \u201csells\u201d, slippage is reduced because in solving the price for a block, the protocol will first \u201ccancel out\u201d (in the mathematical sense) all the buys and sells until one of them is zero. Then, in the above example, if purchases of ETH exceed sales of ETH (in the block in which I transact), then the price, from my perspective will have improved from that existing immediately prior to my transaction \u2014 the direct opposite of slippage. In a robustly-used system, it should be true that overall slippage experienced by users will be significantly lower than in a serial-based system.\nImproved Benefits for Users\nA significant benefit, covered extensively already, is that users (converters) can expect to receive the fairest, best price without any needed sophistication, trading algorithms, bots, superior infrastructure investment, and the like. In a \u201cpool\u201d that is fairly large (compared to my trading size) and regularly transacted, I can simply issue a sendcurrency command, and transact at market, with a calm and confidence that is rare in other serial-based heavily-gamed markets.\nIn fact, because of parallel processing, and the fact that",
            "./raw_text_input_medium/Verus\u200a\u2014\u200aSuperior DeFi for Community Driven Liquidity-2020-10-16 16:08:12"
        ]
    ],
    "will",
    "be",
    "replaced",
    "cdd51521-284a-44ed-9529-c632d43366ab"
]