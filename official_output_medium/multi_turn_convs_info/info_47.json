[
    [
        [
            "What can I use the Verus Protocol for, and what kind of applications can I build with it?",
            "The Verus Protocol allows you to use, create, sell, and provision permanent IDs for various applications, including secure login, KYC, commerce, and provable data at scale. You can build applications, organizations, and businesses on top of the protocol, and use it to provision IDs, manage user state, launch currencies, and create fully interoperable, independent, customizable worldwide blockchains.",
            "or more blockchains. Use, create, sell, and provision your application\u2019s permanent IDs for secure login, KYC, commerce, and provable data at scale, all on the rent-free, credibly neutral and fully decentralized Internet of Value.\nBuilders of applications, organizations, and businesses can use the Verus Protocol to provision IDs, manage and interact with users and user state at any scale, launch currencies (e.g. tokens, liquidity baskets [see docs]), even fully interoperable, independent, customizable worldwide blockchains with their own economics and fee structure, while sharing mining and economic power across the entire Verus Protocol network of unlimited PBaaS chains. All currencies, whether native currencies of a new blockchain, easily created and minted tokens, or MEV-resistant liquidity baskets are easy to launch and access with the protocol on Verus or any connected PBaaS chain. All of them, from the moment they are launched can be exported to Ethereum as ERC20s [see docs] or ERC721 currencies or any chain across the Verus ecosystem. All currencies on the network, including tokens, cross-chain currencies, and even liquidity baskets and their supplies are secured by miners and stakers according to protocol rules. On other blockchain networks, this level of security is applied to single native currencies, on Verus, all currencies on a chain are primitives known to and accounted for by the protocol, eliminating entire classes of smart contract risks that result when every contract reinvents a new way to account for its currency but has no systemic control.\nWith Verus, currencies are compatible with ERC20s. Verus applications can leverage, but do not require Solidity developers or VM-based programming. Additionally all ERC-20s can be permissionlessly bridged over from Ethereum to Verus [see docs], giving users and application builders the freedom to switch seamless",
            "./raw_text_input_medium/Consensus 2024\u200a\u2014\u200aVerus Showcases Fully Completed PBaaS Blockchain Technology-2024-03-24 14:13:05"
        ],
        [
            "What kind of currencies can I launch on the Verus Protocol, and how are they secured?",
            "On the Verus Protocol, you can launch various types of currencies, including native currencies of a new blockchain, tokens, liquidity baskets, and more. All of these currencies are secured by miners and stakers according to protocol rules, providing a high level of security. Additionally, all currencies on the network are primitives known to and accounted for by the protocol, eliminating entire classes of smart contract risks.",
            "or more blockchains. Use, create, sell, and provision your application\u2019s permanent IDs for secure login, KYC, commerce, and provable data at scale, all on the rent-free, credibly neutral and fully decentralized Internet of Value.\nBuilders of applications, organizations, and businesses can use the Verus Protocol to provision IDs, manage and interact with users and user state at any scale, launch currencies (e.g. tokens, liquidity baskets [see docs]), even fully interoperable, independent, customizable worldwide blockchains with their own economics and fee structure, while sharing mining and economic power across the entire Verus Protocol network of unlimited PBaaS chains. All currencies, whether native currencies of a new blockchain, easily created and minted tokens, or MEV-resistant liquidity baskets are easy to launch and access with the protocol on Verus or any connected PBaaS chain. All of them, from the moment they are launched can be exported to Ethereum as ERC20s [see docs] or ERC721 currencies or any chain across the Verus ecosystem. All currencies on the network, including tokens, cross-chain currencies, and even liquidity baskets and their supplies are secured by miners and stakers according to protocol rules. On other blockchain networks, this level of security is applied to single native currencies, on Verus, all currencies on a chain are primitives known to and accounted for by the protocol, eliminating entire classes of smart contract risks that result when every contract reinvents a new way to account for its currency but has no systemic control.\nWith Verus, currencies are compatible with ERC20s. Verus applications can leverage, but do not require Solidity developers or VM-based programming. Additionally all ERC-20s can be permissionlessly bridged over from Ethereum to Verus [see docs], giving users and application builders the freedom to switch seamless",
            "./raw_text_input_medium/Consensus 2024\u200a\u2014\u200aVerus Showcases Fully Completed PBaaS Blockchain Technology-2024-03-24 14:13:05"
        ],
        [
            "Are currencies on the Verus Protocol compatible with other blockchain networks, such as Ethereum?",
            "Yes, currencies on the Verus Protocol are compatible with ERC20s, and can be easily exported to Ethereum as ERC20s or ERC721 currencies. Additionally, all ERC-20s can be permissionlessly bridged over from Ethereum to Verus, giving users and application builders the freedom to switch seamlessly between networks.",
            "or more blockchains. Use, create, sell, and provision your application\u2019s permanent IDs for secure login, KYC, commerce, and provable data at scale, all on the rent-free, credibly neutral and fully decentralized Internet of Value.\nBuilders of applications, organizations, and businesses can use the Verus Protocol to provision IDs, manage and interact with users and user state at any scale, launch currencies (e.g. tokens, liquidity baskets [see docs]), even fully interoperable, independent, customizable worldwide blockchains with their own economics and fee structure, while sharing mining and economic power across the entire Verus Protocol network of unlimited PBaaS chains. All currencies, whether native currencies of a new blockchain, easily created and minted tokens, or MEV-resistant liquidity baskets are easy to launch and access with the protocol on Verus or any connected PBaaS chain. All of them, from the moment they are launched can be exported to Ethereum as ERC20s [see docs] or ERC721 currencies or any chain across the Verus ecosystem. All currencies on the network, including tokens, cross-chain currencies, and even liquidity baskets and their supplies are secured by miners and stakers according to protocol rules. On other blockchain networks, this level of security is applied to single native currencies, on Verus, all currencies on a chain are primitives known to and accounted for by the protocol, eliminating entire classes of smart contract risks that result when every contract reinvents a new way to account for its currency but has no systemic control.\nWith Verus, currencies are compatible with ERC20s. Verus applications can leverage, but do not require Solidity developers or VM-based programming. Additionally all ERC-20s can be permissionlessly bridged over from Ethereum to Verus [see docs], giving users and application builders the freedom to switch seamless",
            "./raw_text_input_medium/Consensus 2024\u200a\u2014\u200aVerus Showcases Fully Completed PBaaS Blockchain Technology-2024-03-24 14:13:05"
        ],
        [
            "Do I need to have Solidity developers or VM-based programming expertise to build applications on the Verus Protocol?",
            "No, you do not need to have Solidity developers or VM-based programming expertise to build applications on the Verus Protocol. While Verus applications can leverage these technologies, they are not required.",
            "or more blockchains. Use, create, sell, and provision your application\u2019s permanent IDs for secure login, KYC, commerce, and provable data at scale, all on the rent-free, credibly neutral and fully decentralized Internet of Value.\nBuilders of applications, organizations, and businesses can use the Verus Protocol to provision IDs, manage and interact with users and user state at any scale, launch currencies (e.g. tokens, liquidity baskets [see docs]), even fully interoperable, independent, customizable worldwide blockchains with their own economics and fee structure, while sharing mining and economic power across the entire Verus Protocol network of unlimited PBaaS chains. All currencies, whether native currencies of a new blockchain, easily created and minted tokens, or MEV-resistant liquidity baskets are easy to launch and access with the protocol on Verus or any connected PBaaS chain. All of them, from the moment they are launched can be exported to Ethereum as ERC20s [see docs] or ERC721 currencies or any chain across the Verus ecosystem. All currencies on the network, including tokens, cross-chain currencies, and even liquidity baskets and their supplies are secured by miners and stakers according to protocol rules. On other blockchain networks, this level of security is applied to single native currencies, on Verus, all currencies on a chain are primitives known to and accounted for by the protocol, eliminating entire classes of smart contract risks that result when every contract reinvents a new way to account for its currency but has no systemic control.\nWith Verus, currencies are compatible with ERC20s. Verus applications can leverage, but do not require Solidity developers or VM-based programming. Additionally all ERC-20s can be permissionlessly bridged over from Ethereum to Verus [see docs], giving users and application builders the freedom to switch seamless",
            "./raw_text_input_medium/Consensus 2024\u200a\u2014\u200aVerus Showcases Fully Completed PBaaS Blockchain Technology-2024-03-24 14:13:05"
        ]
    ],
    "will",
    "be",
    "replaced",
    "890c6b44-4115-4f49-900b-83ef10d60a7b"
]