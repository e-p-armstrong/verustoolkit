[
    [
        [
            "What kind of information can I expect to get from the `getinfo` command?",
            "The `getinfo` command returns a JSON object with various information about the Verus server, including the server version, protocol version, daemon version, notarization information, block count, time offset, connection count, difficulty, and more. This information can be useful for troubleshooting, monitoring, or understanding the current state of the Verus server.",
            "## Control ### `getinfo` Returns an object containing various state info. #### Result: ```json {  \"version\": xxxxx,      (numeric) the server version  \"protocolversion\": xxxxx,  (numeric) the protocol version  \"VRSCversion\": \"xxxxx\",   (string) the daemon version  \"notarized\": xxxxx,     (numeric) most recent notarization block  \"prevMoMheight\": xxxxx,   (numeric) previous notarization block  \"notarizedhash\": \"hash\",  (hash) notarization hash  \"notarizedtxid\": \"hash\",  (hash) notarization txid  \"notarizedtxid_height\": \"mempool\",  \"KMDnotarized_height\": n,  (numeric)  \"notarized_confirms\": n,  (numeric)  \"blocks\": xxxxxx,      (numeric) the current number of blocks processed in the server  \"timeoffset\": xxxxx,    (numeric) the time offset  \"tiptime\": xxxxx,      (numeric) the time of the tip of the chain  \"connections\": xxxxx,    (numeric) the number of connections  \"proxy\": \"host:port\",   (string, optional) the proxy used by the server  \"difficulty\": xxxxxx,    (numeric) the current difficulty  \"testnet\": true|false,   (boolean) if the server is using testnet or not\"keypoololdest\": xxxxxx,  (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool  \"keypoolsize\": xxxx,    (numeric) how many new keys are pre-generated  \"paytxfee\": x.xxxx,     (numeric) the transaction fee set in VRSC/kB  \"tls_established\": x,    (numeric) amount of TLS connections established  \"tls_verified\": x,     (numeric) amount of verified TLS connections established  \"relayfee\": x.xxxx,     (numeric) minimum relay fee for non-free transactions in VRSC/kB  \"errors\": \"...\"       (string) any error messages  \"CCid\": x,  \"name\": \"xxxxx\",      (string) The name of chain  \"p2pport\": xxxxx,      (numeric) number of the P2P port  \"rpcport\": xxxxx,      (numeric) number of the RPC port  \"magic\": xxxxx,       (numeric) chain magic number of the chain  ...             More chain definition specific parameters, which ones depends on the chain. } ``` Examples: ```bash > verus getinfo > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `help ( \"command\" )` List all commands, or get help for a specified command.#### Arguments: ``` 1. \"command\"   (string, optional) The command to get help on ``` #### Result: ``` \"text\"   (string) The help text ```### `stop` Stop Verus server.## Crosschain",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `getinfo` command in Verus?",
            "The `getinfo` command returns an object containing various state information about the Verus server, such as the server version, protocol version, daemon version, notarization information, block count, time offset, connection count, difficulty, and more.",
            "## Control ### `getinfo` Returns an object containing various state info. #### Result: ```json {  \"version\": xxxxx,      (numeric) the server version  \"protocolversion\": xxxxx,  (numeric) the protocol version  \"VRSCversion\": \"xxxxx\",   (string) the daemon version  \"notarized\": xxxxx,     (numeric) most recent notarization block  \"prevMoMheight\": xxxxx,   (numeric) previous notarization block  \"notarizedhash\": \"hash\",  (hash) notarization hash  \"notarizedtxid\": \"hash\",  (hash) notarization txid  \"notarizedtxid_height\": \"mempool\",  \"KMDnotarized_height\": n,  (numeric)  \"notarized_confirms\": n,  (numeric)  \"blocks\": xxxxxx,      (numeric) the current number of blocks processed in the server  \"timeoffset\": xxxxx,    (numeric) the time offset  \"tiptime\": xxxxx,      (numeric) the time of the tip of the chain  \"connections\": xxxxx,    (numeric) the number of connections  \"proxy\": \"host:port\",   (string, optional) the proxy used by the server  \"difficulty\": xxxxxx,    (numeric) the current difficulty  \"testnet\": true|false,   (boolean) if the server is using testnet or not\"keypoololdest\": xxxxxx,  (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool  \"keypoolsize\": xxxx,    (numeric) how many new keys are pre-generated  \"paytxfee\": x.xxxx,     (numeric) the transaction fee set in VRSC/kB  \"tls_established\": x,    (numeric) amount of TLS connections established  \"tls_verified\": x,     (numeric) amount of verified TLS connections established  \"relayfee\": x.xxxx,     (numeric) minimum relay fee for non-free transactions in VRSC/kB  \"errors\": \"...\"       (string) any error messages  \"CCid\": x,  \"name\": \"xxxxx\",      (string) The name of chain  \"p2pport\": xxxxx,      (numeric) number of the P2P port  \"rpcport\": xxxxx,      (numeric) number of the RPC port  \"magic\": xxxxx,       (numeric) chain magic number of the chain  ...             More chain definition specific parameters, which ones depends on the chain. } ``` Examples: ```bash > verus getinfo > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `help ( \"command\" )` List all commands, or get help for a specified command.#### Arguments: ``` 1. \"command\"   (string, optional) The command to get help on ``` #### Result: ``` \"text\"   (string) The help text ```### `stop` Stop Verus server.## Crosschain",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `stop` command in Verus?",
            "The `stop` command stops the Verus server.",
            "## Control ### `getinfo` Returns an object containing various state info. #### Result: ```json {  \"version\": xxxxx,      (numeric) the server version  \"protocolversion\": xxxxx,  (numeric) the protocol version  \"VRSCversion\": \"xxxxx\",   (string) the daemon version  \"notarized\": xxxxx,     (numeric) most recent notarization block  \"prevMoMheight\": xxxxx,   (numeric) previous notarization block  \"notarizedhash\": \"hash\",  (hash) notarization hash  \"notarizedtxid\": \"hash\",  (hash) notarization txid  \"notarizedtxid_height\": \"mempool\",  \"KMDnotarized_height\": n,  (numeric)  \"notarized_confirms\": n,  (numeric)  \"blocks\": xxxxxx,      (numeric) the current number of blocks processed in the server  \"timeoffset\": xxxxx,    (numeric) the time offset  \"tiptime\": xxxxx,      (numeric) the time of the tip of the chain  \"connections\": xxxxx,    (numeric) the number of connections  \"proxy\": \"host:port\",   (string, optional) the proxy used by the server  \"difficulty\": xxxxxx,    (numeric) the current difficulty  \"testnet\": true|false,   (boolean) if the server is using testnet or not\"keypoololdest\": xxxxxx,  (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool  \"keypoolsize\": xxxx,    (numeric) how many new keys are pre-generated  \"paytxfee\": x.xxxx,     (numeric) the transaction fee set in VRSC/kB  \"tls_established\": x,    (numeric) amount of TLS connections established  \"tls_verified\": x,     (numeric) amount of verified TLS connections established  \"relayfee\": x.xxxx,     (numeric) minimum relay fee for non-free transactions in VRSC/kB  \"errors\": \"...\"       (string) any error messages  \"CCid\": x,  \"name\": \"xxxxx\",      (string) The name of chain  \"p2pport\": xxxxx,      (numeric) number of the P2P port  \"rpcport\": xxxxx,      (numeric) number of the RPC port  \"magic\": xxxxx,       (numeric) chain magic number of the chain  ...             More chain definition specific parameters, which ones depends on the chain. } ``` Examples: ```bash > verus getinfo > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `help ( \"command\" )` List all commands, or get help for a specified command.#### Arguments: ``` 1. \"command\"   (string, optional) The command to get help on ``` #### Result: ``` \"text\"   (string) The help text ```### `stop` Stop Verus server.## Crosschain",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How can I use the `help` command to get information about a specific command?",
            "You can use the `help` command by running `verus help \"command\"` in the command line, where `\"command\"` is the name of the command you want to get help for. This will display the help text for the specified command.",
            "## Control ### `getinfo` Returns an object containing various state info. #### Result: ```json {  \"version\": xxxxx,      (numeric) the server version  \"protocolversion\": xxxxx,  (numeric) the protocol version  \"VRSCversion\": \"xxxxx\",   (string) the daemon version  \"notarized\": xxxxx,     (numeric) most recent notarization block  \"prevMoMheight\": xxxxx,   (numeric) previous notarization block  \"notarizedhash\": \"hash\",  (hash) notarization hash  \"notarizedtxid\": \"hash\",  (hash) notarization txid  \"notarizedtxid_height\": \"mempool\",  \"KMDnotarized_height\": n,  (numeric)  \"notarized_confirms\": n,  (numeric)  \"blocks\": xxxxxx,      (numeric) the current number of blocks processed in the server  \"timeoffset\": xxxxx,    (numeric) the time offset  \"tiptime\": xxxxx,      (numeric) the time of the tip of the chain  \"connections\": xxxxx,    (numeric) the number of connections  \"proxy\": \"host:port\",   (string, optional) the proxy used by the server  \"difficulty\": xxxxxx,    (numeric) the current difficulty  \"testnet\": true|false,   (boolean) if the server is using testnet or not\"keypoololdest\": xxxxxx,  (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool  \"keypoolsize\": xxxx,    (numeric) how many new keys are pre-generated  \"paytxfee\": x.xxxx,     (numeric) the transaction fee set in VRSC/kB  \"tls_established\": x,    (numeric) amount of TLS connections established  \"tls_verified\": x,     (numeric) amount of verified TLS connections established  \"relayfee\": x.xxxx,     (numeric) minimum relay fee for non-free transactions in VRSC/kB  \"errors\": \"...\"       (string) any error messages  \"CCid\": x,  \"name\": \"xxxxx\",      (string) The name of chain  \"p2pport\": xxxxx,      (numeric) number of the P2P port  \"rpcport\": xxxxx,      (numeric) number of the RPC port  \"magic\": xxxxx,       (numeric) chain magic number of the chain  ...             More chain definition specific parameters, which ones depends on the chain. } ``` Examples: ```bash > verus getinfo > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `help ( \"command\" )` List all commands, or get help for a specified command.#### Arguments: ``` 1. \"command\"   (string, optional) The command to get help on ``` #### Result: ``` \"text\"   (string) The help text ```### `stop` Stop Verus server.## Crosschain",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `help` command in Verus?",
            "The `help` command lists all available commands or provides help for a specified command. You can use it to learn more about the available commands and their usage.",
            "## Control ### `getinfo` Returns an object containing various state info. #### Result: ```json {  \"version\": xxxxx,      (numeric) the server version  \"protocolversion\": xxxxx,  (numeric) the protocol version  \"VRSCversion\": \"xxxxx\",   (string) the daemon version  \"notarized\": xxxxx,     (numeric) most recent notarization block  \"prevMoMheight\": xxxxx,   (numeric) previous notarization block  \"notarizedhash\": \"hash\",  (hash) notarization hash  \"notarizedtxid\": \"hash\",  (hash) notarization txid  \"notarizedtxid_height\": \"mempool\",  \"KMDnotarized_height\": n,  (numeric)  \"notarized_confirms\": n,  (numeric)  \"blocks\": xxxxxx,      (numeric) the current number of blocks processed in the server  \"timeoffset\": xxxxx,    (numeric) the time offset  \"tiptime\": xxxxx,      (numeric) the time of the tip of the chain  \"connections\": xxxxx,    (numeric) the number of connections  \"proxy\": \"host:port\",   (string, optional) the proxy used by the server  \"difficulty\": xxxxxx,    (numeric) the current difficulty  \"testnet\": true|false,   (boolean) if the server is using testnet or not\"keypoololdest\": xxxxxx,  (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool  \"keypoolsize\": xxxx,    (numeric) how many new keys are pre-generated  \"paytxfee\": x.xxxx,     (numeric) the transaction fee set in VRSC/kB  \"tls_established\": x,    (numeric) amount of TLS connections established  \"tls_verified\": x,     (numeric) amount of verified TLS connections established  \"relayfee\": x.xxxx,     (numeric) minimum relay fee for non-free transactions in VRSC/kB  \"errors\": \"...\"       (string) any error messages  \"CCid\": x,  \"name\": \"xxxxx\",      (string) The name of chain  \"p2pport\": xxxxx,      (numeric) number of the P2P port  \"rpcport\": xxxxx,      (numeric) number of the RPC port  \"magic\": xxxxx,       (numeric) chain magic number of the chain  ...             More chain definition specific parameters, which ones depends on the chain. } ``` Examples: ```bash > verus getinfo > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `help ( \"command\" )` List all commands, or get help for a specified command.#### Arguments: ``` 1. \"command\"   (string, optional) The command to get help on ``` #### Result: ``` \"text\"   (string) The help text ```### `stop` Stop Verus server.## Crosschain",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How can I use the `getinfo` command to get information about the Verus server?",
            "You can use the `getinfo` command by running `verus getinfo` in the command line or by sending a JSON-RPC request to the Verus server with the method `getinfo` and an empty parameter list.",
            "## Control ### `getinfo` Returns an object containing various state info. #### Result: ```json {  \"version\": xxxxx,      (numeric) the server version  \"protocolversion\": xxxxx,  (numeric) the protocol version  \"VRSCversion\": \"xxxxx\",   (string) the daemon version  \"notarized\": xxxxx,     (numeric) most recent notarization block  \"prevMoMheight\": xxxxx,   (numeric) previous notarization block  \"notarizedhash\": \"hash\",  (hash) notarization hash  \"notarizedtxid\": \"hash\",  (hash) notarization txid  \"notarizedtxid_height\": \"mempool\",  \"KMDnotarized_height\": n,  (numeric)  \"notarized_confirms\": n,  (numeric)  \"blocks\": xxxxxx,      (numeric) the current number of blocks processed in the server  \"timeoffset\": xxxxx,    (numeric) the time offset  \"tiptime\": xxxxx,      (numeric) the time of the tip of the chain  \"connections\": xxxxx,    (numeric) the number of connections  \"proxy\": \"host:port\",   (string, optional) the proxy used by the server  \"difficulty\": xxxxxx,    (numeric) the current difficulty  \"testnet\": true|false,   (boolean) if the server is using testnet or not\"keypoololdest\": xxxxxx,  (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool  \"keypoolsize\": xxxx,    (numeric) how many new keys are pre-generated  \"paytxfee\": x.xxxx,     (numeric) the transaction fee set in VRSC/kB  \"tls_established\": x,    (numeric) amount of TLS connections established  \"tls_verified\": x,     (numeric) amount of verified TLS connections established  \"relayfee\": x.xxxx,     (numeric) minimum relay fee for non-free transactions in VRSC/kB  \"errors\": \"...\"       (string) any error messages  \"CCid\": x,  \"name\": \"xxxxx\",      (string) The name of chain  \"p2pport\": xxxxx,      (numeric) number of the P2P port  \"rpcport\": xxxxx,      (numeric) number of the RPC port  \"magic\": xxxxx,       (numeric) chain magic number of the chain  ...             More chain definition specific parameters, which ones depends on the chain. } ``` Examples: ```bash > verus getinfo > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `help ( \"command\" )` List all commands, or get help for a specified command.#### Arguments: ``` 1. \"command\"   (string, optional) The command to get help on ``` #### Result: ``` \"text\"   (string) The help text ```### `stop` Stop Verus server.## Crosschain",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "36f60920-ca25-4634-9c5a-5556a665a673"
]