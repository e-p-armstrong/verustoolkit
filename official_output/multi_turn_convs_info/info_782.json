[
    [
        [
            "What is the purpose of the `getidentitieswithaddress` method in Verus?",
            "The `getidentitieswithaddress` method returns all identities that contain a specified address in its primary addresses. It can also filter the results by block height range and whether the identity is spent or unspent.",
            "Set the generation on with a limit of one processor ```bash > verus setgenerate true 1 ``` Turn minting/staking on ```bash > verus setgenerate true 0 ``` Check the setting ```bash > verus getgenerate ``` Turn off generation and minting ```bash > verus setgenerate false ``` Using json rpc ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setgenerate\", \"params\": [true, 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Identity### `getidentitieswithaddress '{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}'`#### Arguments: ```json {   \"address\":\"validaddress\"   (string, required) returns all identities that contain the specified address in its primary addresses   \"fromheight\":n        (number, optional, default=0) Search for qualified identities modified from this height forward only   \"toheight\":n         (number, optional, default=0) Search for qualified identities only up until this height (0 == no limit)   \"unspent\":bool        (bool, optional, default=false) if true, this will only return active ID UTXOs as of the current block height } ``` #### Result: ```json [                 (array) array of matching identities  {identityobject},        (object) identity with additional member \"txout\" with txhash and output index  ... ] ``` ####Examples: ```bash > verus getidentitieswithaddress '{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentitieswithaddress\", \"params\": ['{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getidentitieswithrecovery '{\"identityid\":\"idori-address\", \"fromheight\":height, \"toheight\":height, \"unspent\":false}'`",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How can I turn off generation and minting using the Verus command line?",
            "You can turn off generation and minting using the following command:\n```\nverus setgenerate false\n```",
            "Set the generation on with a limit of one processor ```bash > verus setgenerate true 1 ``` Turn minting/staking on ```bash > verus setgenerate true 0 ``` Check the setting ```bash > verus getgenerate ``` Turn off generation and minting ```bash > verus setgenerate false ``` Using json rpc ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setgenerate\", \"params\": [true, 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Identity### `getidentitieswithaddress '{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}'`#### Arguments: ```json {   \"address\":\"validaddress\"   (string, required) returns all identities that contain the specified address in its primary addresses   \"fromheight\":n        (number, optional, default=0) Search for qualified identities modified from this height forward only   \"toheight\":n         (number, optional, default=0) Search for qualified identities only up until this height (0 == no limit)   \"unspent\":bool        (bool, optional, default=false) if true, this will only return active ID UTXOs as of the current block height } ``` #### Result: ```json [                 (array) array of matching identities  {identityobject},        (object) identity with additional member \"txout\" with txhash and output index  ... ] ``` ####Examples: ```bash > verus getidentitieswithaddress '{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentitieswithaddress\", \"params\": ['{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getidentitieswithrecovery '{\"identityid\":\"idori-address\", \"fromheight\":height, \"toheight\":height, \"unspent\":false}'`",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the format of the result returned by the `getidentitieswithaddress` method in Verus?",
            "The result is an array of objects, where each object represents an identity that matches the search criteria. The object includes the identity's details and an additional `txout` member with the transaction hash and output index.",
            "Set the generation on with a limit of one processor ```bash > verus setgenerate true 1 ``` Turn minting/staking on ```bash > verus setgenerate true 0 ``` Check the setting ```bash > verus getgenerate ``` Turn off generation and minting ```bash > verus setgenerate false ``` Using json rpc ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setgenerate\", \"params\": [true, 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Identity### `getidentitieswithaddress '{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}'`#### Arguments: ```json {   \"address\":\"validaddress\"   (string, required) returns all identities that contain the specified address in its primary addresses   \"fromheight\":n        (number, optional, default=0) Search for qualified identities modified from this height forward only   \"toheight\":n         (number, optional, default=0) Search for qualified identities only up until this height (0 == no limit)   \"unspent\":bool        (bool, optional, default=false) if true, this will only return active ID UTXOs as of the current block height } ``` #### Result: ```json [                 (array) array of matching identities  {identityobject},        (object) identity with additional member \"txout\" with txhash and output index  ... ] ``` ####Examples: ```bash > verus getidentitieswithaddress '{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentitieswithaddress\", \"params\": ['{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getidentitieswithrecovery '{\"identityid\":\"idori-address\", \"fromheight\":height, \"toheight\":height, \"unspent\":false}'`",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What are the required and optional arguments for the `getidentitieswithaddress` method in Verus?",
            "The required argument is the `address` parameter, which is a string representing the valid primary address to search for. The optional arguments are:\n\n* `fromheight`: a number representing the block height to start searching from (default is 0)\n* `toheight`: a number representing the block height to stop searching at (default is 0)\n* `unspent`: a boolean indicating whether to only return active ID UTXOs as of the current block height (default is false)",
            "Set the generation on with a limit of one processor ```bash > verus setgenerate true 1 ``` Turn minting/staking on ```bash > verus setgenerate true 0 ``` Check the setting ```bash > verus getgenerate ``` Turn off generation and minting ```bash > verus setgenerate false ``` Using json rpc ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setgenerate\", \"params\": [true, 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Identity### `getidentitieswithaddress '{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}'`#### Arguments: ```json {   \"address\":\"validaddress\"   (string, required) returns all identities that contain the specified address in its primary addresses   \"fromheight\":n        (number, optional, default=0) Search for qualified identities modified from this height forward only   \"toheight\":n         (number, optional, default=0) Search for qualified identities only up until this height (0 == no limit)   \"unspent\":bool        (bool, optional, default=false) if true, this will only return active ID UTXOs as of the current block height } ``` #### Result: ```json [                 (array) array of matching identities  {identityobject},        (object) identity with additional member \"txout\" with txhash and output index  ... ] ``` ####Examples: ```bash > verus getidentitieswithaddress '{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentitieswithaddress\", \"params\": ['{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getidentitieswithrecovery '{\"identityid\":\"idori-address\", \"fromheight\":height, \"toheight\":height, \"unspent\":false}'`",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How can I check the current generation and minting setting using the Verus command line?",
            "You can check the current generation and minting setting using the following command:\n```\nverus getgenerate\n```",
            "Set the generation on with a limit of one processor ```bash > verus setgenerate true 1 ``` Turn minting/staking on ```bash > verus setgenerate true 0 ``` Check the setting ```bash > verus getgenerate ``` Turn off generation and minting ```bash > verus setgenerate false ``` Using json rpc ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setgenerate\", \"params\": [true, 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Identity### `getidentitieswithaddress '{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}'`#### Arguments: ```json {   \"address\":\"validaddress\"   (string, required) returns all identities that contain the specified address in its primary addresses   \"fromheight\":n        (number, optional, default=0) Search for qualified identities modified from this height forward only   \"toheight\":n         (number, optional, default=0) Search for qualified identities only up until this height (0 == no limit)   \"unspent\":bool        (bool, optional, default=false) if true, this will only return active ID UTXOs as of the current block height } ``` #### Result: ```json [                 (array) array of matching identities  {identityobject},        (object) identity with additional member \"txout\" with txhash and output index  ... ] ``` ####Examples: ```bash > verus getidentitieswithaddress '{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentitieswithaddress\", \"params\": ['{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getidentitieswithrecovery '{\"identityid\":\"idori-address\", \"fromheight\":height, \"toheight\":height, \"unspent\":false}'`",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How can I turn on generation and minting using the Verus command line?",
            "You can turn on generation and minting using the following command:\n```\nverus setgenerate true 0\n```",
            "Set the generation on with a limit of one processor ```bash > verus setgenerate true 1 ``` Turn minting/staking on ```bash > verus setgenerate true 0 ``` Check the setting ```bash > verus getgenerate ``` Turn off generation and minting ```bash > verus setgenerate false ``` Using json rpc ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setgenerate\", \"params\": [true, 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Identity### `getidentitieswithaddress '{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}'`#### Arguments: ```json {   \"address\":\"validaddress\"   (string, required) returns all identities that contain the specified address in its primary addresses   \"fromheight\":n        (number, optional, default=0) Search for qualified identities modified from this height forward only   \"toheight\":n         (number, optional, default=0) Search for qualified identities only up until this height (0 == no limit)   \"unspent\":bool        (bool, optional, default=false) if true, this will only return active ID UTXOs as of the current block height } ``` #### Result: ```json [                 (array) array of matching identities  {identityobject},        (object) identity with additional member \"txout\" with txhash and output index  ... ] ``` ####Examples: ```bash > verus getidentitieswithaddress '{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentitieswithaddress\", \"params\": ['{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getidentitieswithrecovery '{\"identityid\":\"idori-address\", \"fromheight\":height, \"toheight\":height, \"unspent\":false}'`",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "21624e71-0485-4de1-a258-b364c885c1e0"
]