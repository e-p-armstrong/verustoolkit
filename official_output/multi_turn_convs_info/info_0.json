[
    [
        [
            "What is the \"currencyidhex\" field in a currency definition, and how can it be used with the `getcurrency` API?",
            "The \"currencyidhex\" field is a string that represents the hex representation of a currency ID. This field can be used with the `getcurrency` API by passing \"hex:currencyidhex\" as an argument.",
            "s the ID behind the currency  \"currencyidhex\" : \"hex\",        (string) hex representation of currency ID, getcurrency API supports \"hex:currencyidhex\"  \"parent\" : \"i-address\",        (string) parent blockchain ID  \"systemid\" : \"i-address\",       (string) system on which this currency is considered to run  \"launchsystemid\" : \"i-address\",    (string) system from which this currency was launched  \"notarizationprotocol\" : n       (int) protocol number that determines variations in cross-chain or bridged notarizations  \"proofprotocol\" : n          (int) protocol number that determines variations in cross-chain or bridged proofs  \"startblock\" : n,           (int) block # on this chain, which must be notarized into block one of the chain  \"endblock\" : n,            (int) block # after which, this chain's useful life is considered to be over  \"currencies\" : \"[\"i-address\", ...]\",  (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket  \"weights\" : \"[n, ...]\",        (numberarray) relative currency weights (only returned for a liquidity basket)  \"conversions\" : \"[n, ...]\",      (numberarray) pre-launch conversion rates for non-fractional currencies  \"minpreconversion\" : \"[n, ...]\",    (numberarray) minimum amounts required in pre-conversions for currency to launch  \"currencies\" : \"[\"i-address\", ...]\",  (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket  \"currencynames\" : \"{\"i-address\":\"fullname\",...}\", (obj) i-addresses mapped to fully qualified names of all sub-currencies  \"initialsupply\" : n,          (number) initial currency supply for fractional currencies before preallocation or issuance  \"prelaunchcarveout\" : n,        (number) pre-launch percentage of proceeds for fractional currency sent to launching ID  \"preallocations\" : \"[{\"i-address\":n}, ...]\", (objarray) VerusIDs and amounts for pre-allocation at launch  \"initialcontributions\" : \"[n, ...]\",  (numberarray) amounts of pre-conversions reserved for launching ID  \"idregistrationfees\" : n,       (number) base cost of IDs for this currency namespace in this currency  \"idreferrallevels\" : n,        (int) levels of ID referrals (only for native PBaaS chains and IDs)  \"idimportfees\" : n,          (number) fees required to import an ID to this system (only for native PBaaS chains and IDs)  \"eras\" : \"[obj, ...]\",         (objarray) different chain phases of rewards and convertibility  {   \"reward\" : \"[n, ...]\",        (int) reward start for each era",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What do the \"initialsupply\", \"prelaunchcarveout\", and \"preallocations\" fields represent in a currency definition?",
            "The \"initialsupply\" field represents the initial currency supply for fractional currencies before preallocation or issuance. The \"prelaunchcarveout\" field represents the pre-launch percentage of proceeds for fractional currency sent to the launching ID. The \"preallocations\" field is an array of objects that represents the VerusIDs and amounts for pre-allocation at launch.",
            "s the ID behind the currency  \"currencyidhex\" : \"hex\",        (string) hex representation of currency ID, getcurrency API supports \"hex:currencyidhex\"  \"parent\" : \"i-address\",        (string) parent blockchain ID  \"systemid\" : \"i-address\",       (string) system on which this currency is considered to run  \"launchsystemid\" : \"i-address\",    (string) system from which this currency was launched  \"notarizationprotocol\" : n       (int) protocol number that determines variations in cross-chain or bridged notarizations  \"proofprotocol\" : n          (int) protocol number that determines variations in cross-chain or bridged proofs  \"startblock\" : n,           (int) block # on this chain, which must be notarized into block one of the chain  \"endblock\" : n,            (int) block # after which, this chain's useful life is considered to be over  \"currencies\" : \"[\"i-address\", ...]\",  (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket  \"weights\" : \"[n, ...]\",        (numberarray) relative currency weights (only returned for a liquidity basket)  \"conversions\" : \"[n, ...]\",      (numberarray) pre-launch conversion rates for non-fractional currencies  \"minpreconversion\" : \"[n, ...]\",    (numberarray) minimum amounts required in pre-conversions for currency to launch  \"currencies\" : \"[\"i-address\", ...]\",  (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket  \"currencynames\" : \"{\"i-address\":\"fullname\",...}\", (obj) i-addresses mapped to fully qualified names of all sub-currencies  \"initialsupply\" : n,          (number) initial currency supply for fractional currencies before preallocation or issuance  \"prelaunchcarveout\" : n,        (number) pre-launch percentage of proceeds for fractional currency sent to launching ID  \"preallocations\" : \"[{\"i-address\":n}, ...]\", (objarray) VerusIDs and amounts for pre-allocation at launch  \"initialcontributions\" : \"[n, ...]\",  (numberarray) amounts of pre-conversions reserved for launching ID  \"idregistrationfees\" : n,       (number) base cost of IDs for this currency namespace in this currency  \"idreferrallevels\" : n,        (int) levels of ID referrals (only for native PBaaS chains and IDs)  \"idimportfees\" : n,          (number) fees required to import an ID to this system (only for native PBaaS chains and IDs)  \"eras\" : \"[obj, ...]\",         (objarray) different chain phases of rewards and convertibility  {   \"reward\" : \"[n, ...]\",        (int) reward start for each era",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What do the \"idregistrationfees\", \"idreferrallevels\", and \"idimportfees\" fields represent in a currency definition?",
            "The \"idregistrationfees\" field represents the base cost of IDs for this currency namespace in this currency. The \"idreferrallevels\" field represents the levels of ID referrals, and is only applicable for native PBaaS chains and IDs. The \"idimportfees\" field represents the fees required to import an ID to this system, and is only applicable for native PBaaS chains and IDs.",
            "s the ID behind the currency  \"currencyidhex\" : \"hex\",        (string) hex representation of currency ID, getcurrency API supports \"hex:currencyidhex\"  \"parent\" : \"i-address\",        (string) parent blockchain ID  \"systemid\" : \"i-address\",       (string) system on which this currency is considered to run  \"launchsystemid\" : \"i-address\",    (string) system from which this currency was launched  \"notarizationprotocol\" : n       (int) protocol number that determines variations in cross-chain or bridged notarizations  \"proofprotocol\" : n          (int) protocol number that determines variations in cross-chain or bridged proofs  \"startblock\" : n,           (int) block # on this chain, which must be notarized into block one of the chain  \"endblock\" : n,            (int) block # after which, this chain's useful life is considered to be over  \"currencies\" : \"[\"i-address\", ...]\",  (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket  \"weights\" : \"[n, ...]\",        (numberarray) relative currency weights (only returned for a liquidity basket)  \"conversions\" : \"[n, ...]\",      (numberarray) pre-launch conversion rates for non-fractional currencies  \"minpreconversion\" : \"[n, ...]\",    (numberarray) minimum amounts required in pre-conversions for currency to launch  \"currencies\" : \"[\"i-address\", ...]\",  (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket  \"currencynames\" : \"{\"i-address\":\"fullname\",...}\", (obj) i-addresses mapped to fully qualified names of all sub-currencies  \"initialsupply\" : n,          (number) initial currency supply for fractional currencies before preallocation or issuance  \"prelaunchcarveout\" : n,        (number) pre-launch percentage of proceeds for fractional currency sent to launching ID  \"preallocations\" : \"[{\"i-address\":n}, ...]\", (objarray) VerusIDs and amounts for pre-allocation at launch  \"initialcontributions\" : \"[n, ...]\",  (numberarray) amounts of pre-conversions reserved for launching ID  \"idregistrationfees\" : n,       (number) base cost of IDs for this currency namespace in this currency  \"idreferrallevels\" : n,        (int) levels of ID referrals (only for native PBaaS chains and IDs)  \"idimportfees\" : n,          (number) fees required to import an ID to this system (only for native PBaaS chains and IDs)  \"eras\" : \"[obj, ...]\",         (objarray) different chain phases of rewards and convertibility  {   \"reward\" : \"[n, ...]\",        (int) reward start for each era",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What do the \"eras\" field represent in a currency definition?",
            "The \"eras\" field is an array of objects that represents different chain phases of rewards and convertibility. Each object in the array contains a \"reward\" field that specifies the reward start for each era.",
            "s the ID behind the currency  \"currencyidhex\" : \"hex\",        (string) hex representation of currency ID, getcurrency API supports \"hex:currencyidhex\"  \"parent\" : \"i-address\",        (string) parent blockchain ID  \"systemid\" : \"i-address\",       (string) system on which this currency is considered to run  \"launchsystemid\" : \"i-address\",    (string) system from which this currency was launched  \"notarizationprotocol\" : n       (int) protocol number that determines variations in cross-chain or bridged notarizations  \"proofprotocol\" : n          (int) protocol number that determines variations in cross-chain or bridged proofs  \"startblock\" : n,           (int) block # on this chain, which must be notarized into block one of the chain  \"endblock\" : n,            (int) block # after which, this chain's useful life is considered to be over  \"currencies\" : \"[\"i-address\", ...]\",  (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket  \"weights\" : \"[n, ...]\",        (numberarray) relative currency weights (only returned for a liquidity basket)  \"conversions\" : \"[n, ...]\",      (numberarray) pre-launch conversion rates for non-fractional currencies  \"minpreconversion\" : \"[n, ...]\",    (numberarray) minimum amounts required in pre-conversions for currency to launch  \"currencies\" : \"[\"i-address\", ...]\",  (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket  \"currencynames\" : \"{\"i-address\":\"fullname\",...}\", (obj) i-addresses mapped to fully qualified names of all sub-currencies  \"initialsupply\" : n,          (number) initial currency supply for fractional currencies before preallocation or issuance  \"prelaunchcarveout\" : n,        (number) pre-launch percentage of proceeds for fractional currency sent to launching ID  \"preallocations\" : \"[{\"i-address\":n}, ...]\", (objarray) VerusIDs and amounts for pre-allocation at launch  \"initialcontributions\" : \"[n, ...]\",  (numberarray) amounts of pre-conversions reserved for launching ID  \"idregistrationfees\" : n,       (number) base cost of IDs for this currency namespace in this currency  \"idreferrallevels\" : n,        (int) levels of ID referrals (only for native PBaaS chains and IDs)  \"idimportfees\" : n,          (number) fees required to import an ID to this system (only for native PBaaS chains and IDs)  \"eras\" : \"[obj, ...]\",         (objarray) different chain phases of rewards and convertibility  {   \"reward\" : \"[n, ...]\",        (int) reward start for each era",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the \"currencynames\" field in a currency definition?",
            "The \"currencynames\" field is an object that maps i-addresses to fully qualified names of all sub-currencies.",
            "s the ID behind the currency  \"currencyidhex\" : \"hex\",        (string) hex representation of currency ID, getcurrency API supports \"hex:currencyidhex\"  \"parent\" : \"i-address\",        (string) parent blockchain ID  \"systemid\" : \"i-address\",       (string) system on which this currency is considered to run  \"launchsystemid\" : \"i-address\",    (string) system from which this currency was launched  \"notarizationprotocol\" : n       (int) protocol number that determines variations in cross-chain or bridged notarizations  \"proofprotocol\" : n          (int) protocol number that determines variations in cross-chain or bridged proofs  \"startblock\" : n,           (int) block # on this chain, which must be notarized into block one of the chain  \"endblock\" : n,            (int) block # after which, this chain's useful life is considered to be over  \"currencies\" : \"[\"i-address\", ...]\",  (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket  \"weights\" : \"[n, ...]\",        (numberarray) relative currency weights (only returned for a liquidity basket)  \"conversions\" : \"[n, ...]\",      (numberarray) pre-launch conversion rates for non-fractional currencies  \"minpreconversion\" : \"[n, ...]\",    (numberarray) minimum amounts required in pre-conversions for currency to launch  \"currencies\" : \"[\"i-address\", ...]\",  (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket  \"currencynames\" : \"{\"i-address\":\"fullname\",...}\", (obj) i-addresses mapped to fully qualified names of all sub-currencies  \"initialsupply\" : n,          (number) initial currency supply for fractional currencies before preallocation or issuance  \"prelaunchcarveout\" : n,        (number) pre-launch percentage of proceeds for fractional currency sent to launching ID  \"preallocations\" : \"[{\"i-address\":n}, ...]\", (objarray) VerusIDs and amounts for pre-allocation at launch  \"initialcontributions\" : \"[n, ...]\",  (numberarray) amounts of pre-conversions reserved for launching ID  \"idregistrationfees\" : n,       (number) base cost of IDs for this currency namespace in this currency  \"idreferrallevels\" : n,        (int) levels of ID referrals (only for native PBaaS chains and IDs)  \"idimportfees\" : n,          (number) fees required to import an ID to this system (only for native PBaaS chains and IDs)  \"eras\" : \"[obj, ...]\",         (objarray) different chain phases of rewards and convertibility  {   \"reward\" : \"[n, ...]\",        (int) reward start for each era",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What do the \"startblock\" and \"endblock\" fields represent in a currency definition?",
            "The \"startblock\" field represents the block number on the current chain that must be notarized into block one of the chain, while the \"endblock\" field represents the block number after which the chain's useful life is considered to be over.",
            "s the ID behind the currency  \"currencyidhex\" : \"hex\",        (string) hex representation of currency ID, getcurrency API supports \"hex:currencyidhex\"  \"parent\" : \"i-address\",        (string) parent blockchain ID  \"systemid\" : \"i-address\",       (string) system on which this currency is considered to run  \"launchsystemid\" : \"i-address\",    (string) system from which this currency was launched  \"notarizationprotocol\" : n       (int) protocol number that determines variations in cross-chain or bridged notarizations  \"proofprotocol\" : n          (int) protocol number that determines variations in cross-chain or bridged proofs  \"startblock\" : n,           (int) block # on this chain, which must be notarized into block one of the chain  \"endblock\" : n,            (int) block # after which, this chain's useful life is considered to be over  \"currencies\" : \"[\"i-address\", ...]\",  (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket  \"weights\" : \"[n, ...]\",        (numberarray) relative currency weights (only returned for a liquidity basket)  \"conversions\" : \"[n, ...]\",      (numberarray) pre-launch conversion rates for non-fractional currencies  \"minpreconversion\" : \"[n, ...]\",    (numberarray) minimum amounts required in pre-conversions for currency to launch  \"currencies\" : \"[\"i-address\", ...]\",  (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket  \"currencynames\" : \"{\"i-address\":\"fullname\",...}\", (obj) i-addresses mapped to fully qualified names of all sub-currencies  \"initialsupply\" : n,          (number) initial currency supply for fractional currencies before preallocation or issuance  \"prelaunchcarveout\" : n,        (number) pre-launch percentage of proceeds for fractional currency sent to launching ID  \"preallocations\" : \"[{\"i-address\":n}, ...]\", (objarray) VerusIDs and amounts for pre-allocation at launch  \"initialcontributions\" : \"[n, ...]\",  (numberarray) amounts of pre-conversions reserved for launching ID  \"idregistrationfees\" : n,       (number) base cost of IDs for this currency namespace in this currency  \"idreferrallevels\" : n,        (int) levels of ID referrals (only for native PBaaS chains and IDs)  \"idimportfees\" : n,          (number) fees required to import an ID to this system (only for native PBaaS chains and IDs)  \"eras\" : \"[obj, ...]\",         (objarray) different chain phases of rewards and convertibility  {   \"reward\" : \"[n, ...]\",        (int) reward start for each era",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the \"currencies\" and \"weights\" fields in a currency definition?",
            "The \"currencies\" field is an array of strings that lists the currencies that can be converted to this currency at launch or make up a liquidity basket. The \"weights\" field is an array of numbers that represents the relative currency weights, and is only returned for a liquidity basket.",
            "s the ID behind the currency  \"currencyidhex\" : \"hex\",        (string) hex representation of currency ID, getcurrency API supports \"hex:currencyidhex\"  \"parent\" : \"i-address\",        (string) parent blockchain ID  \"systemid\" : \"i-address\",       (string) system on which this currency is considered to run  \"launchsystemid\" : \"i-address\",    (string) system from which this currency was launched  \"notarizationprotocol\" : n       (int) protocol number that determines variations in cross-chain or bridged notarizations  \"proofprotocol\" : n          (int) protocol number that determines variations in cross-chain or bridged proofs  \"startblock\" : n,           (int) block # on this chain, which must be notarized into block one of the chain  \"endblock\" : n,            (int) block # after which, this chain's useful life is considered to be over  \"currencies\" : \"[\"i-address\", ...]\",  (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket  \"weights\" : \"[n, ...]\",        (numberarray) relative currency weights (only returned for a liquidity basket)  \"conversions\" : \"[n, ...]\",      (numberarray) pre-launch conversion rates for non-fractional currencies  \"minpreconversion\" : \"[n, ...]\",    (numberarray) minimum amounts required in pre-conversions for currency to launch  \"currencies\" : \"[\"i-address\", ...]\",  (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket  \"currencynames\" : \"{\"i-address\":\"fullname\",...}\", (obj) i-addresses mapped to fully qualified names of all sub-currencies  \"initialsupply\" : n,          (number) initial currency supply for fractional currencies before preallocation or issuance  \"prelaunchcarveout\" : n,        (number) pre-launch percentage of proceeds for fractional currency sent to launching ID  \"preallocations\" : \"[{\"i-address\":n}, ...]\", (objarray) VerusIDs and amounts for pre-allocation at launch  \"initialcontributions\" : \"[n, ...]\",  (numberarray) amounts of pre-conversions reserved for launching ID  \"idregistrationfees\" : n,       (number) base cost of IDs for this currency namespace in this currency  \"idreferrallevels\" : n,        (int) levels of ID referrals (only for native PBaaS chains and IDs)  \"idimportfees\" : n,          (number) fees required to import an ID to this system (only for native PBaaS chains and IDs)  \"eras\" : \"[obj, ...]\",         (objarray) different chain phases of rewards and convertibility  {   \"reward\" : \"[n, ...]\",        (int) reward start for each era",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "fe8113f7-10ff-4988-be11-c0debb6a37e1"
]