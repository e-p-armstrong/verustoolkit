[
    [
        [
            "How do I reset my Verus testnet?",
            "To reset your Verus testnet, follow these steps:\n\n1. Close Verus and ensure no testnet daemon is running.\n2. Delete the following directories:\n\t* Linux: `~/.Komodo/vrsctest` and `~/.verustest`.\n\t* Mac OS: `~/Library/Application Support/Komodo/vrsctest` and `~/Library/Application Support/VerusTest`.\n\t* Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\` and `%AppData%\\Roaming\\VerusTest`, or `%AppData%\\Komodo\\vrsctest\\` and `%AppData%\\Roaming\\VerusTest`.\n3. Restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest, and re-add verustest native).",
            "A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.## Testnet Reset To reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.Komodo/vrsctest`, `~/.verustest` - Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest` - Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`## Exporting an ID to a PBaaS chain  ```  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'  ```## Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ```  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>  ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ```  verus signrawtransaction <raw_hex_transaction>  ``` After the last necessary signature is applied, broadcast on the network using:  ```  verus sendrawtransaction <raw_hex_signed_transaction>  ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How can I export an ID to a PBaaS chain using the command line and Verus?",
            "You can export an ID to a PBaaS chain using the `sendcurrency` command with the following format:\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```",
            "A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.## Testnet Reset To reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.Komodo/vrsctest`, `~/.verustest` - Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest` - Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`## Exporting an ID to a PBaaS chain  ```  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'  ```## Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ```  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>  ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ```  verus signrawtransaction <raw_hex_transaction>  ``` After the last necessary signature is applied, broadcast on the network using:  ```  verus sendrawtransaction <raw_hex_signed_transaction>  ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I sign transactions from multi-signature IDs on both testnet and mainnet?",
            "To sign transactions from multi-signature IDs, follow these steps:\n\n1. Create a transaction and get the raw transaction data:\n```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\n2. Take the raw hex transaction data to each additional wallet(s) containing the additional signing addresses/IDs:\n```\nverus signrawtransaction <raw_hex_transaction>\n```\n3. After the last necessary signature is applied, broadcast the transaction on the network using:\n```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```",
            "A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.## Testnet Reset To reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.Komodo/vrsctest`, `~/.verustest` - Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest` - Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`## Exporting an ID to a PBaaS chain  ```  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'  ```## Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ```  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>  ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ```  verus signrawtransaction <raw_hex_transaction>  ``` After the last necessary signature is applied, broadcast on the network using:  ```  verus sendrawtransaction <raw_hex_signed_transaction>  ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is the purpose of a locked VerusID, and how does it provide protection against unauthorized access?",
            "A locked VerusID provides an additional layer of security against unauthorized access by requiring a predetermined unlock time before funds can be spent or accessed. During this time, the revocation and recovery authority identities can revoke and recover the ID if an unauthorized unlock occurs, preventing theft or loss of funds. This feature protects against the \"5 dollar wrench attack\" and provides a decentralized solution for fund recovery.",
            "A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.## Testnet Reset To reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.Komodo/vrsctest`, `~/.verustest` - Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest` - Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`## Exporting an ID to a PBaaS chain  ```  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'  ```## Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ```  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>  ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ```  verus signrawtransaction <raw_hex_transaction>  ``` After the last necessary signature is applied, broadcast on the network using:  ```  verus sendrawtransaction <raw_hex_signed_transaction>  ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are some of the additional features and use cases of Verus Vault, beyond just protecting and recovering funds?",
            "Verus Vault not only protects and recovers funds but also provides security for IDs and NFTs. It also enables time locks for various purposes, such as vesting schedules, trusts, and inheritance. This feature set allows users to preserve their blockchain wealth and assets across generations.",
            "A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.## Testnet Reset To reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.Komodo/vrsctest`, `~/.verustest` - Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest` - Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`## Exporting an ID to a PBaaS chain  ```  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'  ```## Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ```  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>  ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ```  verus signrawtransaction <raw_hex_transaction>  ``` After the last necessary signature is applied, broadcast on the network using:  ```  verus sendrawtransaction <raw_hex_signed_transaction>  ```",
            "./raw_txt_input/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "8d748296-5d80-4e59-8a51-9bb86d16686f"
]