[
    "What is the purpose of the `lockunspent` command in Verus?",
    "The `lockunspent` command is used to temporarily lock or unlock specific transaction outputs, making them unavailable or available for automatic coin selection when spending VRSC. Locks are stored in memory only and are cleared when the node stops or fails.",
    "#### Arguments: 1. minconf     (numeric, optional, default=1) The minimum confirmations to filter 2. maxconf     (numeric, optional, default=9999999) The maximum confirmations to filter 3. \"addresses \"  (string) A json array of VRSC addresses to filter ```json   [    \"address\"   (string) VRSC address    ,...   ] ``` 4. includeshared  (bool, optional, default=false) Include outputs that can also be spent by others Result ```json [          (array of json object)  {   \"txid\" : \"txid\",     (string) the transaction id   \"vout\" : n,        (numeric) the vout value   \"generated\" : true|false (boolean) true if txout is a coinbase transaction output   \"address\" : \"address\",  (string) the Zcash address   \"account\" : \"account\",  (string) DEPRECATED. The associated account, or \"\" for the default account   \"scriptPubKey\" : \"key\",  (string) the script key   \"amount\" : x.xxx,     (numeric) the transaction amount in VRSC   \"confirmations\" : n,   (numeric) The number of confirmations   \"redeemScript\" : n    (string) The redeemScript if scriptPubKey is P2SH   \"spendable\" : xxx     (bool) Whether we have the private keys to spend this output  }  ,... ] ```Examples ```bash > verus listunspent > verus listunspent 6 9999999 \"[\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\",\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\"]\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999 \"[\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\",\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...]` Updates list of temporarily unspendable outputs. Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs. A locked transaction output will not be chosen by automatic coin selection, when spending VRSC. Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list is always cleared (by virtue of process exit) when a node stops or fails. Also see the listunspent call#### Arguments: 1. unlock      (boolean, required) Whether to unlock (true) or lock (false) the specified transactions 2. \"transactions\" (string, required) A json array of objects. Each object the txid (string) vout (numeric) ```json   [      (json array of json objects)    {     \"txid\":\"id\",  (string) The transaction id     \"vout\": n     (numeric) The output number    }    ,...   ] ``` #### Result: true|false  (boolean) Whether the command was successful or notExamples:",
    "./raw_txt_input/clifaq-02_verus_commands.md"
]