[
    "What information does the `getpeerinfo` command provide about connected peers in Verus?",
    "The `getpeerinfo` command provides detailed information about connected peers, including:\n\n* Peer index (`id`)\n* IP address and port (`addr`)\n* Local address (`addrlocal`)\n* Services offered (`services`)\n* Time of last send and receive (`lastsend` and `lastrecv`)\n* Total bytes sent and received (`bytessent` and `bytesrecv`)\n* Connection time (`conntime`)\n* Time offset (`timeoffset`)\n* Ping time and wait (`pingtime` and `pingwait`)\n* Peer version and string version (`version` and `subver`)\n* Inbound or outbound connection (`inbound`)\n* Starting block height (`startingheight`)\n* Ban score (`banscore`)\n* Last common header and block (`synced_headers` and `synced_blocks`)\n* Heights of blocks currently being asked from the peer (`inflight`)",
    "#### Result: ```json [  {   \"id\": n,            (numeric) Peer index   \"addr\":\"host:port\",      (string) The ip address and port of the peer   \"addrlocal\":\"ip:port\",     (string) local address   \"services\":\"xxxxxxxxxxxxxxxx\", (string) The services offered   \"lastsend\": ttt,        (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send   \"lastrecv\": ttt,        (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive   \"bytessent\": n,        (numeric) The total bytes sent   \"bytesrecv\": n,        (numeric) The total bytes received   \"conntime\": ttt,        (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)   \"timeoffset\": ttt,       (numeric) The time offset in seconds   \"pingtime\": n,         (numeric) ping time   \"pingwait\": n,         (numeric) ping wait   \"version\": v,         (numeric) The peer version, such as 170002   \"subver\": \"/MagicBean:x.y.z[-v]/\", (string) The string version   \"inbound\": true|false,     (boolean) Inbound (true) or Outbound (false)   \"startingheight\": n,      (numeric) The starting height (block) of the peer   \"banscore\": n,         (numeric) The ban score   \"synced_headers\": n,      (numeric) The last header we have in common with this peer   \"synced_blocks\": n,      (numeric) The last block we have in common with this peer   \"inflight\": [    n,             (numeric) The heights of blocks we're currently asking from this peer    ...   ]  }  ,... ] ``` Examples: ```bash > verus getpeerinfo > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `listbanned` List all banned IPs/Subnets.Examples: ```bash > verus listbanned > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `ping` Requests that a ping be sent to all other nodes, to measure ping time. Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds. Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.Examples: ```bash > verus ping > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"ping\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```",
    "./raw_txt_input/clifaq-02_verus_commands.md"
]