[
    "How do I sign transactions from multi-signature IDs on both testnet and mainnet using Verus?",
    "To sign transactions from multi-signature IDs on both testnet and mainnet using Verus, you need to:\n\n1. Create a transaction and get the raw transaction data using `sendcurrency` and `z_getoperationstatus`.\n2. Take the raw hex transaction data to each additional wallet containing the additional signing addresses/IDs and sign it using `signrawtransaction`.\n3. After the last necessary signature is applied, broadcast the transaction on the network using `sendrawtransaction`.\n\nThis process ensures that the transaction is properly signed by all required parties before it is broadcast to the network.",
    "#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```### Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ``` verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]' verus z_getoperationstatus <operation_id_returned_by_sendcurrency> ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ``` verus signrawtransaction <raw_hex_transaction> ``` After the last necessary signature is applied, broadcast on the network using:  ``` verus sendrawtransaction <raw_hex_signed_transaction> ```",
    "./raw_txt_input/release_notes.md"
]