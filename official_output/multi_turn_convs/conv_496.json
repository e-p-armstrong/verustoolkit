[
    "## Conversation that answers the provided questions:\n**AI Assistant:**\nHey! I'm here to help with any questions you have about Verus. What's on your mind today?\n\n**User:**\nI'm trying to figure out some commands in Verus. How can I use the `getpendingtransfers` command to retrieve pending transfers for a particular chain?\n\n**AI Assistant:**\nYou can use the `getpendingtransfers` command to retrieve pending transfers for a particular chain by specifying the chain name as the argument. For example:\n```bash\nverus getpendingtransfers \"chainname\"\n```\nThis will give you a JSON object with the pending transfers for the specified chain. Do you have any other questions about this command or any others?\n\n**User:**\nYeah, actually. How can I use the `getnotarizationproofs` command to retrieve notary evidence challenges for a particular chain?\n\n**AI Assistant:**\nYou can use the `getnotarizationproofs` command to retrieve notary evidence challenges for a particular chain by specifying the challenge requests for that chain as the argument. For example:\n```bash\nverus getnotarizationproofs '[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n},...]'\n```\nThis will give you the notary evidence challenges for the specified chain. Let me know if you have any other questions!\n\n**User:**\nWhat is the purpose of the `getreservedeposits` command in Verus?\n\n**AI Assistant:**\nThe `getreservedeposits` command is used to retrieve all deposits under the control of a specified currency or chain. It takes the full name or i-ID of the controlling currency as its argument and returns a JSON object with the reserved deposits. This command can be useful for tracking deposits across different chains or currencies.\n\n**User:**\nWhat is the purpose of the `getpendingtransfers` command in Verus?\n\n**AI Assistant:**\nThe `getpendingtransfers` command is used to retrieve all pending transfers for a particular chain that have not yet been aggregated into an export. It takes an optional chain name as its argument and returns a JSON object with the pending transfers. This command can be useful for tracking transfers that are still pending on a particular chain.\n\n**User:**\nHow can I use the `getreservedeposits` command to retrieve reserved deposits for a particular currency?\n\n**AI Assistant:**\nYou can use the `getreservedeposits` command to retrieve reserved deposits for a particular currency by specifying the full name or i-ID of the controlling currency as the argument. For example:\n```bash\nverus getreservedeposits \"currencyname\"\n```\nThis will give you a JSON object with the reserved deposits for the specified currency. Let me know if you have any other questions!",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "How can I use the `getpendingtransfers` command to retrieve pending transfers for a particular chain?",
            "You can use the `getpendingtransfers` command to retrieve pending transfers for a particular chain by specifying the chain name as the argument. For example:\n```bash\nverus getpendingtransfers \"chainname\"\n```",
            "#### Arguments:  \"challengerequests\"      (array, required) one or more challenge requests for unconfirmed notarizations on a bridged system ```json [  {   \"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\",   \"evidence\":{CNotaryEvidence},   \"entropyhash\":\"hex\",   \"proveheight\":n,   \"atheight\":n  },  {\"type\":\"vrsc::evidence.primaryproof\" || \"iKDesmiEkEjDG61nQSZJSGhWvC8x8xA578\",    \"priornotarizationref\":{CUTXORef} || \"priorroot\":{CProofRoot  },  \"challengeroots\":  [   {    \"indexkey\":{object},    \"proofroot\":{CProofRoot}   },  ...  ],  \"evidence\":{CNotaryEvidence},  \"entropyhash\":\"hex\",  \"confirmnotarization\":{newnotarization}, |  \"confirmroot\":{CPRoofRoot}},  \"fromheight\":n,  \"toheight\":n},  ... ] ``` #### Results: ```json {\"evidence\":[{CNotaryEvidence}, ...]  (array) notary evidence challenges, including proofs for challenges requested ``` #### Examples: ```bash > verus getnotarizationproofs '[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationproofs\", \"params\": [[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getpendingtransfers \"chainname\"` Returns all pending transfers for a particular chain that have not yet been aggregated into an export. #### Arguments: ``` 1. \"chainname\"           (string, optional) name of the chain to look for. no parameter returns current chain in daemon. ``` #### Result: ```json  {  } ``` Examples: ```bash > verus getpendingtransfers \"chainname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpendingtransfers\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getreservedeposits \"currencyname\"` Returns all deposits under control of the specified currency or chain. If the currency is of an external system or chain, all deposits will be under the control of that system or chain only, not its independent currencies.#### Arguments: 1. \"currencyname\"    (string, optional) full name or i-ID of controlling currency#### Result: ```json  {  } ``` Examples: ```bash > verus getreservedeposits \"currencyname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreservedeposits\", \"params\": [\"currencyname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How can I use the `getnotarizationproofs` command to retrieve notary evidence challenges for a particular chain?",
            "You can use the `getnotarizationproofs` command to retrieve notary evidence challenges for a particular chain by specifying the challenge requests for that chain as the argument. For example:\n```bash\nverus getnotarizationproofs '[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n},...]'\n```",
            "#### Arguments:  \"challengerequests\"      (array, required) one or more challenge requests for unconfirmed notarizations on a bridged system ```json [  {   \"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\",   \"evidence\":{CNotaryEvidence},   \"entropyhash\":\"hex\",   \"proveheight\":n,   \"atheight\":n  },  {\"type\":\"vrsc::evidence.primaryproof\" || \"iKDesmiEkEjDG61nQSZJSGhWvC8x8xA578\",    \"priornotarizationref\":{CUTXORef} || \"priorroot\":{CProofRoot  },  \"challengeroots\":  [   {    \"indexkey\":{object},    \"proofroot\":{CProofRoot}   },  ...  ],  \"evidence\":{CNotaryEvidence},  \"entropyhash\":\"hex\",  \"confirmnotarization\":{newnotarization}, |  \"confirmroot\":{CPRoofRoot}},  \"fromheight\":n,  \"toheight\":n},  ... ] ``` #### Results: ```json {\"evidence\":[{CNotaryEvidence}, ...]  (array) notary evidence challenges, including proofs for challenges requested ``` #### Examples: ```bash > verus getnotarizationproofs '[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationproofs\", \"params\": [[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getpendingtransfers \"chainname\"` Returns all pending transfers for a particular chain that have not yet been aggregated into an export. #### Arguments: ``` 1. \"chainname\"           (string, optional) name of the chain to look for. no parameter returns current chain in daemon. ``` #### Result: ```json  {  } ``` Examples: ```bash > verus getpendingtransfers \"chainname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpendingtransfers\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getreservedeposits \"currencyname\"` Returns all deposits under control of the specified currency or chain. If the currency is of an external system or chain, all deposits will be under the control of that system or chain only, not its independent currencies.#### Arguments: 1. \"currencyname\"    (string, optional) full name or i-ID of controlling currency#### Result: ```json  {  } ``` Examples: ```bash > verus getreservedeposits \"currencyname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreservedeposits\", \"params\": [\"currencyname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `getreservedeposits` command in Verus?",
            "The `getreservedeposits` command is used to retrieve all deposits under the control of a specified currency or chain. It takes the full name or i-ID of the controlling currency as its argument and returns a JSON object with the reserved deposits.",
            "#### Arguments:  \"challengerequests\"      (array, required) one or more challenge requests for unconfirmed notarizations on a bridged system ```json [  {   \"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\",   \"evidence\":{CNotaryEvidence},   \"entropyhash\":\"hex\",   \"proveheight\":n,   \"atheight\":n  },  {\"type\":\"vrsc::evidence.primaryproof\" || \"iKDesmiEkEjDG61nQSZJSGhWvC8x8xA578\",    \"priornotarizationref\":{CUTXORef} || \"priorroot\":{CProofRoot  },  \"challengeroots\":  [   {    \"indexkey\":{object},    \"proofroot\":{CProofRoot}   },  ...  ],  \"evidence\":{CNotaryEvidence},  \"entropyhash\":\"hex\",  \"confirmnotarization\":{newnotarization}, |  \"confirmroot\":{CPRoofRoot}},  \"fromheight\":n,  \"toheight\":n},  ... ] ``` #### Results: ```json {\"evidence\":[{CNotaryEvidence}, ...]  (array) notary evidence challenges, including proofs for challenges requested ``` #### Examples: ```bash > verus getnotarizationproofs '[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationproofs\", \"params\": [[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getpendingtransfers \"chainname\"` Returns all pending transfers for a particular chain that have not yet been aggregated into an export. #### Arguments: ``` 1. \"chainname\"           (string, optional) name of the chain to look for. no parameter returns current chain in daemon. ``` #### Result: ```json  {  } ``` Examples: ```bash > verus getpendingtransfers \"chainname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpendingtransfers\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getreservedeposits \"currencyname\"` Returns all deposits under control of the specified currency or chain. If the currency is of an external system or chain, all deposits will be under the control of that system or chain only, not its independent currencies.#### Arguments: 1. \"currencyname\"    (string, optional) full name or i-ID of controlling currency#### Result: ```json  {  } ``` Examples: ```bash > verus getreservedeposits \"currencyname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreservedeposits\", \"params\": [\"currencyname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `getpendingtransfers` command in Verus?",
            "The `getpendingtransfers` command is used to retrieve all pending transfers for a particular chain that have not yet been aggregated into an export. It takes an optional chain name as its argument and returns a JSON object with the pending transfers.",
            "#### Arguments:  \"challengerequests\"      (array, required) one or more challenge requests for unconfirmed notarizations on a bridged system ```json [  {   \"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\",   \"evidence\":{CNotaryEvidence},   \"entropyhash\":\"hex\",   \"proveheight\":n,   \"atheight\":n  },  {\"type\":\"vrsc::evidence.primaryproof\" || \"iKDesmiEkEjDG61nQSZJSGhWvC8x8xA578\",    \"priornotarizationref\":{CUTXORef} || \"priorroot\":{CProofRoot  },  \"challengeroots\":  [   {    \"indexkey\":{object},    \"proofroot\":{CProofRoot}   },  ...  ],  \"evidence\":{CNotaryEvidence},  \"entropyhash\":\"hex\",  \"confirmnotarization\":{newnotarization}, |  \"confirmroot\":{CPRoofRoot}},  \"fromheight\":n,  \"toheight\":n},  ... ] ``` #### Results: ```json {\"evidence\":[{CNotaryEvidence}, ...]  (array) notary evidence challenges, including proofs for challenges requested ``` #### Examples: ```bash > verus getnotarizationproofs '[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationproofs\", \"params\": [[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getpendingtransfers \"chainname\"` Returns all pending transfers for a particular chain that have not yet been aggregated into an export. #### Arguments: ``` 1. \"chainname\"           (string, optional) name of the chain to look for. no parameter returns current chain in daemon. ``` #### Result: ```json  {  } ``` Examples: ```bash > verus getpendingtransfers \"chainname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpendingtransfers\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getreservedeposits \"currencyname\"` Returns all deposits under control of the specified currency or chain. If the currency is of an external system or chain, all deposits will be under the control of that system or chain only, not its independent currencies.#### Arguments: 1. \"currencyname\"    (string, optional) full name or i-ID of controlling currency#### Result: ```json  {  } ``` Examples: ```bash > verus getreservedeposits \"currencyname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreservedeposits\", \"params\": [\"currencyname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How can I use the `getreservedeposits` command to retrieve reserved deposits for a particular currency?",
            "You can use the `getreservedeposits` command to retrieve reserved deposits for a particular currency by specifying the full name or i-ID of the controlling currency as the argument. For example:\n```bash\nverus getreservedeposits \"currencyname\"\n```",
            "#### Arguments:  \"challengerequests\"      (array, required) one or more challenge requests for unconfirmed notarizations on a bridged system ```json [  {   \"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\",   \"evidence\":{CNotaryEvidence},   \"entropyhash\":\"hex\",   \"proveheight\":n,   \"atheight\":n  },  {\"type\":\"vrsc::evidence.primaryproof\" || \"iKDesmiEkEjDG61nQSZJSGhWvC8x8xA578\",    \"priornotarizationref\":{CUTXORef} || \"priorroot\":{CProofRoot  },  \"challengeroots\":  [   {    \"indexkey\":{object},    \"proofroot\":{CProofRoot}   },  ...  ],  \"evidence\":{CNotaryEvidence},  \"entropyhash\":\"hex\",  \"confirmnotarization\":{newnotarization}, |  \"confirmroot\":{CPRoofRoot}},  \"fromheight\":n,  \"toheight\":n},  ... ] ``` #### Results: ```json {\"evidence\":[{CNotaryEvidence}, ...]  (array) notary evidence challenges, including proofs for challenges requested ``` #### Examples: ```bash > verus getnotarizationproofs '[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationproofs\", \"params\": [[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getpendingtransfers \"chainname\"` Returns all pending transfers for a particular chain that have not yet been aggregated into an export. #### Arguments: ``` 1. \"chainname\"           (string, optional) name of the chain to look for. no parameter returns current chain in daemon. ``` #### Result: ```json  {  } ``` Examples: ```bash > verus getpendingtransfers \"chainname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpendingtransfers\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getreservedeposits \"currencyname\"` Returns all deposits under control of the specified currency or chain. If the currency is of an external system or chain, all deposits will be under the control of that system or chain only, not its independent currencies.#### Arguments: 1. \"currencyname\"    (string, optional) full name or i-ID of controlling currency#### Result: ```json  {  } ``` Examples: ```bash > verus getreservedeposits \"currencyname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreservedeposits\", \"params\": [\"currencyname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ]
]