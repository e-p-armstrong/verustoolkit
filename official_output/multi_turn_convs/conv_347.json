[
    "## Conversation that answers the provided questions:\n**AI Assistant:**\nHi! Are you exploring the features of Verus? Do you have any questions about its capabilities?\n\n**User:**\nYeah, actually, I do. What are the limitations of multi-currency in Verus that I should be aware of?\n\n**AI Assistant:**\nThere are two limitations of multi-currency in Verus that you should be aware of:\n\n1. You cannot create a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. This is not recommended and may cause problems whenever an i-address or name is used.\n2. In the GUI, if a currency is already supported in Verus Desktop (e.g. BTC or ETH), you will not be able to use the same named currencies as a PBaaS chain. This limitation is considered errata for the testnet release and will not be a limitation before mainnet availability.\n\nDo you have any further questions about multi-currency in Verus?\n\n**User:**\nActually, yes, I do. How do I define a PBaaS blockchain using Verus?\n\n**AI Assistant:**\nTo define a PBaaS blockchain using Verus, you need to create a JSON object with the following properties:\n```\n{\n  \"name\": \"PBaaSChain\",\n  \"options\": 330,\n  \"currencies\": [ \"VRSCTEST\" ],\n  \"conversions\": [ 1 ],\n  \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ],\n  \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\" ],\n  \"minnotariesconfirm\": 2,\n  \"nodes\": [ \n    { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" },\n    { \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" }\n  ],\n  \"gatewayconvertername\": \"Bridge\",\n  \"gatewayconverterissuance\": 1000000\n}\n```\nThen, you need to pass this definition to the `definecurrency` command:\n```\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,...}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\nDoes that make sense?\n\n**User:**\nActually, one more thing. Why is it not recommended to create an ID with an i-address as its name in Verus?\n\n**AI Assistant:**\nIt is not recommended to create an ID with an i-address as its name in Verus because it may cause problems whenever an i-address or name is used. This is because using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What are the limitations of multi-currency in Verus that I should be aware of?",
            "There are two limitations of multi-currency in Verus that you should be aware of:\n\n1. You cannot create a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. This is not recommended and may cause problems whenever an i-address or name is used.\n2. In the GUI, if a currency is already supported in Verus Desktop (e.g. BTC or ETH), you will not be able to use the same named currencies as a PBaaS chain. This limitation is considered errata for the testnet release and will not be a limitation before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I define a PBaaS blockchain using Verus?",
            "To define a PBaaS blockchain using Verus, you need to create a JSON object with the following properties:\n```\n{\n  \"name\": \"PBaaSChain\",\n  \"options\": 330,\n  \"currencies\": [ \"VRSCTEST\" ],\n  \"conversions\": [ 1 ],\n  \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ],\n  \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\" ],\n  \"minnotariesconfirm\": 2,\n  \"nodes\": [ \n    { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" },\n    { \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" }\n  ],\n  \"gatewayconvertername\": \"Bridge\",\n  \"gatewayconverterissuance\": 1000000\n}\n```\nThen, you need to pass this definition to the `definecurrency` command:\n```\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,...}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "Why is it not recommended to create an ID with an i-address as its name in Verus?",
            "It is not recommended to create an ID with an i-address as its name in Verus because it may cause problems whenever an i-address or name is used. This is because using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ]
    ]
]