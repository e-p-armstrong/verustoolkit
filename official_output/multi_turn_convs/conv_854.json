[
    "## Conversation that answers the provided questions:\n**AI Assistant:**\nHi there! I'm happy to help with your Verus-related questions. What's on your mind today?\n\n**User:**\nI'm interested in creating a multi-currency in Verus, but I want to know if there are any limitations I should be aware of.\n\n**AI Assistant:**\nYes, there are a couple of limitations to keep in mind when creating a multi-currency in Verus. Firstly, you should not create an ID with an i-address as its name, as this can cause problems when referring to the ID or currency. This is because an i-address is calculated based on a name registration, and using it as a name can lead to confusion.\n\nSecondly, in the Verus Desktop GUI, if a currency is already supported, such as BTC or ETH, you cannot use the same name for a PBaaS chain. This limitation is considered errata for the testnet release and will be resolved before mainnet availability.\n\nAre you planning to create a PBaaS blockchain? I can help you with that as well!\n\n**User:**\nActually, yes! I'd like to know more about defining a PBaaS blockchain. What is the purpose of the `definecurrency` command in Verus, and how is it used to define a PBaaS blockchain?\n\n**AI Assistant:**\nThe `definecurrency` command is used to define a new currency or blockchain in Verus. In the case of a PBaaS blockchain, it is used to define the properties of the blockchain, such as its name, options, currencies, conversions, eras, notaries, nodes, and gateway converter.\n\nThe command takes two JSON objects as arguments: one for the blockchain definition and another for the bridge definition defaults. This allows you to customize your PBaaS blockchain to fit your specific needs.\n\nIf you need help with the syntax or have more questions about defining a PBaaS blockchain, feel free to ask!",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What are some limitations to be aware of when creating a multi-currency in Verus?",
            "There are two limitations to be aware of:\n\n1. **Using an i-address as an ID name**: You should not create an ID with an i-address as its name, as this can cause problems when referring to the ID or currency. This is because an i-address is calculated based on a name registration, and using it as a name can lead to confusion.\n2. **Currency name conflicts in the Verus Desktop GUI**: In the Verus Desktop GUI, if a currency is already supported, such as BTC or ETH, you cannot use the same name for a PBaaS chain. This limitation is considered errata for the testnet release and will be resolved before mainnet availability.",
            "### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\",  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# Disclaimer",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is the purpose of the `definecurrency` command in Verus, and how is it used to define a PBaaS blockchain?",
            "The `definecurrency` command is used to define a new currency or blockchain in Verus. In the case of a PBaaS blockchain, it is used to define the properties of the blockchain, such as its name, options, currencies, conversions, eras, notaries, nodes, and gateway converter. The command takes two JSON objects as arguments: one for the blockchain definition and another for the bridge definition defaults.",
            "### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\",  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# Disclaimer",
            "./raw_txt_input/release_notes.md"
        ]
    ]
]