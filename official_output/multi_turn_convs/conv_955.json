[
    "## Conversation that answers the provided questions:\n**AI Assistant:**\nHello! I'm here to help with any questions you might have about Verus. What's on your mind today?\n\n**User:**\nI'm thinking of creating a multi-currency PBaaS blockchain with Verus. What limitations should I be aware of?\n\n**AI Assistant:**\nWhen creating a multi-currency PBaaS blockchain with Verus, there are two limitations to keep in mind:\n\n1. You cannot create a currency from an ID that has a properly encoded i-address as its actual name. This is because using an i-address as a currency name can cause problems when referring to the currency or identity.\n2. In the Verus Desktop GUI, if a currency is already supported, such as BTC or ETH, you cannot use the same name for a PBaaS chain. This limitation will be resolved before mainnet availability.\n\nNote that these limitations are specific to the testnet release and may not apply to future releases. Do you have any other questions about creating a multi-currency PBaaS blockchain with Verus?\n\n**User:**\nActually, yes. What information is required to define a PBaaS blockchain with Verus?\n\n**AI Assistant:**\nTo define a PBaaS blockchain with Verus, you need to provide a JSON object with the following information:\n\n* `name`: the name of the blockchain\n* `options`: an integer specifying the blockchain's options\n* `currencies`: an array of currency tickers that the blockchain's native currency can be converted to\n* `conversions`: an array of conversion ratios between the blockchain's native currency and each currency on the chain\n* `eras`: an array of objects specifying the block reward, reward decay, halving, and end of each era in the blockchain's lifecycle\n* `notaries`: an array of VerusIDs that will serve as notaries on the chain\n* `minnotariesconfirm`: an integer specifying the minimum number of notaries needed to confirm a block\n* `nodes`: an array of objects specifying the network addresses and identities of the nodes on the chain\n* `gatewayconvertername`: the name of the bridge converter\n* `gatewayconverterissuance`: the initial issuance of the bridge converter's native token\n\nAdditionally, you need to provide a second JSON object with overridable defaults for the bridge, including the currencies supported by the bridge, initial contributions, and initial supply. Does this help?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What limitations should I be aware of when creating a multi-currency PBaaS blockchain with Verus?",
            "There are two limitations to be aware of when creating a multi-currency PBaaS blockchain with Verus:\n\n1. You cannot create a currency from an ID that has a properly encoded i-address as its actual name. This is because using an i-address as a currency name can cause problems when referring to the currency or identity.\n2. In the Verus Desktop GUI, if a currency is already supported, such as BTC or ETH, you cannot use the same name for a PBaaS chain. This limitation will be resolved before mainnet availability.\n\nNote that these limitations are specific to the testnet release and may not apply to future releases.",
            "### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\",  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# Disclaimer",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What information is required to define a PBaaS blockchain with Verus?",
            "To define a PBaaS blockchain with Verus, you need to provide a JSON object with the following information:\n\n* `name`: the name of the blockchain\n* `options`: an integer specifying the blockchain's options\n* `currencies`: an array of currency tickers that the blockchain's native currency can be converted to\n* `conversions`: an array of conversion ratios between the blockchain's native currency and each currency on the chain\n* `eras`: an array of objects specifying the block reward, reward decay, halving, and end of each era in the blockchain's lifecycle\n* `notaries`: an array of VerusIDs that will serve as notaries on the chain\n* `minnotariesconfirm`: an integer specifying the minimum number of notaries needed to confirm a block\n* `nodes`: an array of objects specifying the network addresses and identities of the nodes on the chain\n* `gatewayconvertername`: the name of the bridge converter\n* `gatewayconverterissuance`: the initial issuance of the bridge converter's native token\n\nAdditionally, you need to provide a second JSON object with overridable defaults for the bridge, including the currencies supported by the bridge, initial contributions, and initial supply.",
            "### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\",  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# Disclaimer",
            "./raw_txt_input/release_notes.md"
        ]
    ]
]