[
    "## Conversation that answers the provided questions:\n**AI Assistant:**\nHi there! I'm happy to help with any Verus-related questions you might have. What's on your mind today?\n\n**User:**\nI'm working with VerusIDs and I was wondering, why is it not recommended to create an ID with an i-address as its name?\n\n**AI Assistant:**\nIt is not recommended to create an ID with an i-address as its name because it can cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. This is because an i-address is meant to be a calculated ID based on a name registration, not an actual name. Using an i-address as a name can lead to confusion and errors.\n\n**User:**\nThat's good to know. I'm also working with multi-currency on Verus. What are some limitations I should be aware of?\n\n**AI Assistant:**\nThere are two limitations to be aware of when working with multi-currency on Verus: \n\n1. You cannot create a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. This can cause problems when referring to the currency or identity, and it is not supported for creating currencies.\n\n2. (GUI only) If a currency is already supported in the Verus Desktop, such as BTC or ETH, you cannot use the same name for a PBaaS chain. This limitation will be resolved before mainnet availability.\n\n**User:**\nThanks for the heads up. I'm also interested in defining a PBaaS blockchain using Verus. Can you walk me through the process?\n\n**AI Assistant:**\nYou can define a PBaaS blockchain by creating a JSON object with the necessary properties and then passing it to the `definecurrency` command. The JSON object should include the following properties:\n\n* `name`: The name of the PBaaS chain.\n* `options`: An integer that configures various options for the chain.\n* `currencies`: An array of currencies that the chain's native currency can be converted into.\n* `conversions`: An array that defines the conversion ratios between the chain's native currency and each currency on the chain.\n* `eras`: An array that defines the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle.\n* `notaries`: An array of VerusIDs that will serve as notaries on the chain.\n* `minnotariesconfirm`: The minimum number of notaries needed to confirm a block.\n* `nodes`: An array of objects that describe the network addresses and IDs of the nodes on the chain.\n* `gatewayconvertername`: The name of the bridge that will be used to move funds on and off the PBaaS chain.\n* `gatewayconverterissuance`: The initial supply of the bridge's native token.\n\nHere is an example of a JSON object that defines a PBaaS blockchain:\n```json\n{\n  \"name\": \"PBaaSChain\",\n  \"options\": 330,\n  \"currencies\": [ \"VRSCTEST\" ],\n  \"conversions\": [ 1 ],\n  \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ],\n  \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\" ],\n  \"minnotariesconfirm\": 2,\n  \"nodes\": [ \n    { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" },\n    { \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" }\n  ],\n  \"gatewayconvertername\": \"Bridge\",\n  \"gatewayconverterissuance\": 1000000\n}\n```\nYou can then pass this JSON object to the `definecurrency` command along with the bridge definition defaults to create the PBaaS chain.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "Why is it not recommended to create an ID with an i-address as its name?",
            "It is not recommended to create an ID with an i-address as its name because it can cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. This is because an i-address is meant to be a calculated ID based on a name registration, not an actual name. Using an i-address as a name can lead to confusion and errors.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are some limitations to be aware of when working with multi-currency on Verus?",
            "There are two limitations to be aware of when working with multi-currency on Verus:\n\n1. You cannot create a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. This can cause problems when referring to the currency or identity, and it is not supported for creating currencies.\n2. (GUI only) If a currency is already supported in the Verus Desktop, such as BTC or ETH, you cannot use the same name for a PBaaS chain. This limitation will be resolved before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I define a PBaaS blockchain using Verus?",
            "You can define a PBaaS blockchain by creating a JSON object with the necessary properties and then passing it to the `definecurrency` command. The JSON object should include the following properties:\n\n* `name`: The name of the PBaaS chain.\n* `options`: An integer that configures various options for the chain.\n* `currencies`: An array of currencies that the chain's native currency can be converted into.\n* `conversions`: An array that defines the conversion ratios between the chain's native currency and each currency on the chain.\n* `eras`: An array that defines the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle.\n* `notaries`: An array of VerusIDs that will serve as notaries on the chain.\n* `minnotariesconfirm`: The minimum number of notaries needed to confirm a block.\n* `nodes`: An array of objects that describe the network addresses and IDs of the nodes on the chain.\n* `gatewayconvertername`: The name of the bridge that will be used to move funds on and off the PBaaS chain.\n* `gatewayconverterissuance`: The initial supply of the bridge's native token.\n\nHere is an example of a JSON object that defines a PBaaS blockchain:\n```json\n{\n  \"name\": \"PBaaSChain\",\n  \"options\": 330,\n  \"currencies\": [ \"VRSCTEST\" ],\n  \"conversions\": [ 1 ],\n  \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ],\n  \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\" ],\n  \"minnotariesconfirm\": 2,\n  \"nodes\": [ \n    { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" },\n    { \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" }\n  ],\n  \"gatewayconvertername\": \"Bridge\",\n  \"gatewayconverterissuance\": 1000000\n}\n```\nYou can then pass this JSON object to the `definecurrency` command along with the bridge definition defaults to create the PBaaS chain.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ]
    ]
]