[
    [
        [
            "What is the purpose of the `signdata` command in Verus?",
            "The `signdata` command in Verus generates a hash of the provided data, returns the hash, and signs it with the specified parameters. This allows for the creation of a digital signature that can be used to verify the authenticity and integrity of the data.",
            "signdata '{\"address\":\"i-address or friendly name to sign with (t-address will result in simple signature w/indicated hash and prefix, nothing else)\",      \"prefixstring\":\"extra string that is hashed during signature and must be supplied for verification\",       \"filename\":\"filepath/filename\" |       \"message\":\"any message\" |       \"vdxfdata\":\"vdxf encoded data\" |       \"messagehex\":\"hexdata\" |       \"messagebase64\":\"base64data\" |       \"datahash\":\"256bithex\" |       \"mmrdata\":[{\"filename | serializedhex | serializedbase64 | vdxfdata | message | datahash\":\"str\"} | \"strdata\"],       \"mmrsalt\":[array of \"salt\" to match the mmrdata],       \"mmrhash\":\"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\",       \"priormmr\":\"[array of mmr hashes prior to this data and optional prior tx reference for rev-linked MMR data]\",      \"vdxfkeys\":[\"vdxfkey i-address\", ...],      \"vdxfkeynames\":[\"vdxfkeyname, object for getvdxfid API, or friendly name ID -- no i-addresses\", ...],      \"boundhashes\":[\"hexhash\", ...],      \"hashtype\": \"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\",      \"encrypttoaddress\": \"sapling address\",       granularly encrypt all data, either all decryptable with viewing key or parts using unique, SSKs      \"createmmr\":\"bool\",                 if true, 1 or more objects will be put into a merkle mountain range and the root signed      \"signature\":\"currentsig\"}'Generates a hash (SHA256 default if \"hashtype\" not specified) of the data, returns the hash, and signs it with parameters specified",
            "./raw_text_input_api_text/signdata"
        ],
        [
            "What are the different types of data that can be signed using the `signdata` command?",
            "The `signdata` command can be used to sign various types of data, including:\n\n1. Files ( specified by `filename` )\n2. Messages ( specified by `message` )\n3. VDXF encoded data ( specified by `vdxfdata` )\n4. Hex data ( specified by `messagehex` )\n5. Base64 data ( specified by `messagebase64` )\n6. 256-bit hex data ( specified by `datahash` )\n7. MMR data ( specified by `mmrdata` )",
            "signdata '{\"address\":\"i-address or friendly name to sign with (t-address will result in simple signature w/indicated hash and prefix, nothing else)\",      \"prefixstring\":\"extra string that is hashed during signature and must be supplied for verification\",       \"filename\":\"filepath/filename\" |       \"message\":\"any message\" |       \"vdxfdata\":\"vdxf encoded data\" |       \"messagehex\":\"hexdata\" |       \"messagebase64\":\"base64data\" |       \"datahash\":\"256bithex\" |       \"mmrdata\":[{\"filename | serializedhex | serializedbase64 | vdxfdata | message | datahash\":\"str\"} | \"strdata\"],       \"mmrsalt\":[array of \"salt\" to match the mmrdata],       \"mmrhash\":\"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\",       \"priormmr\":\"[array of mmr hashes prior to this data and optional prior tx reference for rev-linked MMR data]\",      \"vdxfkeys\":[\"vdxfkey i-address\", ...],      \"vdxfkeynames\":[\"vdxfkeyname, object for getvdxfid API, or friendly name ID -- no i-addresses\", ...],      \"boundhashes\":[\"hexhash\", ...],      \"hashtype\": \"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\",      \"encrypttoaddress\": \"sapling address\",       granularly encrypt all data, either all decryptable with viewing key or parts using unique, SSKs      \"createmmr\":\"bool\",                 if true, 1 or more objects will be put into a merkle mountain range and the root signed      \"signature\":\"currentsig\"}'Generates a hash (SHA256 default if \"hashtype\" not specified) of the data, returns the hash, and signs it with parameters specified",
            "./raw_text_input_api_text/signdata"
        ],
        [
            "What is the purpose of the `prefixstring` parameter in the `signdata` command?",
            "The `prefixstring` parameter in the `signdata` command is an extra string that is hashed during the signing process and must be supplied for verification. This adds an additional layer of security to the digital signature.",
            "signdata '{\"address\":\"i-address or friendly name to sign with (t-address will result in simple signature w/indicated hash and prefix, nothing else)\",      \"prefixstring\":\"extra string that is hashed during signature and must be supplied for verification\",       \"filename\":\"filepath/filename\" |       \"message\":\"any message\" |       \"vdxfdata\":\"vdxf encoded data\" |       \"messagehex\":\"hexdata\" |       \"messagebase64\":\"base64data\" |       \"datahash\":\"256bithex\" |       \"mmrdata\":[{\"filename | serializedhex | serializedbase64 | vdxfdata | message | datahash\":\"str\"} | \"strdata\"],       \"mmrsalt\":[array of \"salt\" to match the mmrdata],       \"mmrhash\":\"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\",       \"priormmr\":\"[array of mmr hashes prior to this data and optional prior tx reference for rev-linked MMR data]\",      \"vdxfkeys\":[\"vdxfkey i-address\", ...],      \"vdxfkeynames\":[\"vdxfkeyname, object for getvdxfid API, or friendly name ID -- no i-addresses\", ...],      \"boundhashes\":[\"hexhash\", ...],      \"hashtype\": \"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\",      \"encrypttoaddress\": \"sapling address\",       granularly encrypt all data, either all decryptable with viewing key or parts using unique, SSKs      \"createmmr\":\"bool\",                 if true, 1 or more objects will be put into a merkle mountain range and the root signed      \"signature\":\"currentsig\"}'Generates a hash (SHA256 default if \"hashtype\" not specified) of the data, returns the hash, and signs it with parameters specified",
            "./raw_text_input_api_text/signdata"
        ],
        [
            "How can I specify the type of hash function to use with the `signdata` command?",
            "You can specify the type of hash function to use with the `signdata` command by using the `hashtype` parameter. The available options are:\n\n1. `sha256`\n2. `sha256D`\n3. `blake2b`\n4. `keccak256`\n\nIf `hashtype` is not specified, the default hash function used is `sha256`.",
            "signdata '{\"address\":\"i-address or friendly name to sign with (t-address will result in simple signature w/indicated hash and prefix, nothing else)\",      \"prefixstring\":\"extra string that is hashed during signature and must be supplied for verification\",       \"filename\":\"filepath/filename\" |       \"message\":\"any message\" |       \"vdxfdata\":\"vdxf encoded data\" |       \"messagehex\":\"hexdata\" |       \"messagebase64\":\"base64data\" |       \"datahash\":\"256bithex\" |       \"mmrdata\":[{\"filename | serializedhex | serializedbase64 | vdxfdata | message | datahash\":\"str\"} | \"strdata\"],       \"mmrsalt\":[array of \"salt\" to match the mmrdata],       \"mmrhash\":\"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\",       \"priormmr\":\"[array of mmr hashes prior to this data and optional prior tx reference for rev-linked MMR data]\",      \"vdxfkeys\":[\"vdxfkey i-address\", ...],      \"vdxfkeynames\":[\"vdxfkeyname, object for getvdxfid API, or friendly name ID -- no i-addresses\", ...],      \"boundhashes\":[\"hexhash\", ...],      \"hashtype\": \"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\",      \"encrypttoaddress\": \"sapling address\",       granularly encrypt all data, either all decryptable with viewing key or parts using unique, SSKs      \"createmmr\":\"bool\",                 if true, 1 or more objects will be put into a merkle mountain range and the root signed      \"signature\":\"currentsig\"}'Generates a hash (SHA256 default if \"hashtype\" not specified) of the data, returns the hash, and signs it with parameters specified",
            "./raw_text_input_api_text/signdata"
        ],
        [
            "What is the purpose of the `encrypttoaddress` parameter in the `signdata` command?",
            "The `encrypttoaddress` parameter in the `signdata` command allows you to granularly encrypt all data, either making all data decryptable with a viewing key or encrypting parts using unique, SSKs (Sapling Spend Keys). This adds an additional layer of privacy and security to the signed data.",
            "signdata '{\"address\":\"i-address or friendly name to sign with (t-address will result in simple signature w/indicated hash and prefix, nothing else)\",      \"prefixstring\":\"extra string that is hashed during signature and must be supplied for verification\",       \"filename\":\"filepath/filename\" |       \"message\":\"any message\" |       \"vdxfdata\":\"vdxf encoded data\" |       \"messagehex\":\"hexdata\" |       \"messagebase64\":\"base64data\" |       \"datahash\":\"256bithex\" |       \"mmrdata\":[{\"filename | serializedhex | serializedbase64 | vdxfdata | message | datahash\":\"str\"} | \"strdata\"],       \"mmrsalt\":[array of \"salt\" to match the mmrdata],       \"mmrhash\":\"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\",       \"priormmr\":\"[array of mmr hashes prior to this data and optional prior tx reference for rev-linked MMR data]\",      \"vdxfkeys\":[\"vdxfkey i-address\", ...],      \"vdxfkeynames\":[\"vdxfkeyname, object for getvdxfid API, or friendly name ID -- no i-addresses\", ...],      \"boundhashes\":[\"hexhash\", ...],      \"hashtype\": \"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\",      \"encrypttoaddress\": \"sapling address\",       granularly encrypt all data, either all decryptable with viewing key or parts using unique, SSKs      \"createmmr\":\"bool\",                 if true, 1 or more objects will be put into a merkle mountain range and the root signed      \"signature\":\"currentsig\"}'Generates a hash (SHA256 default if \"hashtype\" not specified) of the data, returns the hash, and signs it with parameters specified",
            "./raw_text_input_api_text/signdata"
        ]
    ],
    "will",
    "be",
    "replaced",
    "5381b46b-44b9-4731-9af0-357dfb0b636d"
]