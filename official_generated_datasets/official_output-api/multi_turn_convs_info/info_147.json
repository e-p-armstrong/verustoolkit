[
    [
        [
            "What is the purpose of the `getnetworksolps` command in Verus?",
            "The `getnetworksolps` command returns the estimated network solutions per second based on the last n blocks.",
            "getnetworksolps ( blocks height ) Returns the estimated network solutions per second based on the last n blocks. Pass in [blocks] to override # of blocks, -1 specifies over difficulty averaging window. Pass in [height] to estimate the network speed at the time when a certain block was found. Arguments: 1. blocks   (numeric, optional, default=120) The number of blocks, or -1 for blocks over difficulty averaging window. 2. height   (numeric, optional, default=-1) To estimate at the time of the given height. Result: x       (numeric) Solutions per second estimated Examples: > verus getnetworksolps > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworksolps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/getnetworksolps"
        ],
        [
            "How can I use the `getnetworksolps` command to estimate the network speed at a specific block height?",
            "You can use the `getnetworksolps` command by passing the block height as the second argument. For example: `verus getnetworksolps 120 1000` will estimate the network speed at the time when block 1000 was found, based on the last 120 blocks.",
            "getnetworksolps ( blocks height ) Returns the estimated network solutions per second based on the last n blocks. Pass in [blocks] to override # of blocks, -1 specifies over difficulty averaging window. Pass in [height] to estimate the network speed at the time when a certain block was found. Arguments: 1. blocks   (numeric, optional, default=120) The number of blocks, or -1 for blocks over difficulty averaging window. 2. height   (numeric, optional, default=-1) To estimate at the time of the given height. Result: x       (numeric) Solutions per second estimated Examples: > verus getnetworksolps > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworksolps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/getnetworksolps"
        ],
        [
            "What is the default number of blocks used by the `getnetworksolps` command to estimate the network solutions per second?",
            "The default number of blocks used by the `getnetworksolps` command is 120. However, you can override this by passing a different value as the first argument.",
            "getnetworksolps ( blocks height ) Returns the estimated network solutions per second based on the last n blocks. Pass in [blocks] to override # of blocks, -1 specifies over difficulty averaging window. Pass in [height] to estimate the network speed at the time when a certain block was found. Arguments: 1. blocks   (numeric, optional, default=120) The number of blocks, or -1 for blocks over difficulty averaging window. 2. height   (numeric, optional, default=-1) To estimate at the time of the given height. Result: x       (numeric) Solutions per second estimated Examples: > verus getnetworksolps > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworksolps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/getnetworksolps"
        ],
        [
            "What happens if I pass -1 as the first argument to the `getnetworksolps` command?",
            "If you pass -1 as the first argument to the `getnetworksolps` command, it will use blocks over the difficulty averaging window to estimate the network solutions per second.",
            "getnetworksolps ( blocks height ) Returns the estimated network solutions per second based on the last n blocks. Pass in [blocks] to override # of blocks, -1 specifies over difficulty averaging window. Pass in [height] to estimate the network speed at the time when a certain block was found. Arguments: 1. blocks   (numeric, optional, default=120) The number of blocks, or -1 for blocks over difficulty averaging window. 2. height   (numeric, optional, default=-1) To estimate at the time of the given height. Result: x       (numeric) Solutions per second estimated Examples: > verus getnetworksolps > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworksolps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/getnetworksolps"
        ],
        [
            "How can I use the `getnetworksolps` command with the Verus JSON-RPC API?",
            "You can use the `getnetworksolps` command with the Verus JSON-RPC API by sending a POST request to the Verus JSON-RPC API endpoint with the following JSON data: `{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworksolps\", \"params\": [] }`. For example: `curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworksolps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/`.",
            "getnetworksolps ( blocks height ) Returns the estimated network solutions per second based on the last n blocks. Pass in [blocks] to override # of blocks, -1 specifies over difficulty averaging window. Pass in [height] to estimate the network speed at the time when a certain block was found. Arguments: 1. blocks   (numeric, optional, default=120) The number of blocks, or -1 for blocks over difficulty averaging window. 2. height   (numeric, optional, default=-1) To estimate at the time of the given height. Result: x       (numeric) Solutions per second estimated Examples: > verus getnetworksolps > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworksolps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/getnetworksolps"
        ]
    ],
    "will",
    "be",
    "replaced",
    "8e92dc93-6037-4891-90da-9bb537027263"
]