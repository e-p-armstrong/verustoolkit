[
    [
        [
            "What does the `getnetworkinfo` command do in Verus?",
            "The `getnetworkinfo` command returns an object containing various state information regarding P2P networking in Verus. This includes information about the server version, protocol version, services offered, time offset, connections, networks, relay fee, local addresses, and warnings.",
            "getnetworkinfo Returns an object containing various state info regarding P2P networking. Result: {  \"version\": xxxxx,           (numeric) the server version  \"subversion\": \"/MagicBean:x.y.z[-v]/\",   (string) the server subversion string  \"protocolversion\": xxxxx,       (numeric) the protocol version  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network  \"timeoffset\": xxxxx,          (numeric) the time offset  \"connections\": xxxxx,         (numeric) the number of connections  \"networks\": [             (array) information per network  {   \"name\": \"xxx\",           (string) network (ipv4, ipv6 or onion)   \"limited\": true|false,        (boolean) is the network limited using -onlynet?   \"reachable\": true|false,       (boolean) is the network reachable?   \"proxy\": \"host:port\"        (string) the proxy that is used for this network, or empty if none  }  ,...  ],  \"relayfee\": x.xxxxxxxx,        (numeric) minimum relay fee for non-free transactions in VRSC/kB  \"localaddresses\": [          (array) list of local addresses  {   \"address\": \"xxxx\",         (string) network address   \"port\": xxx,             (numeric) network port   \"score\": xxx             (numeric) relative score  }  ,...  ]  \"warnings\": \"...\"          (string) any network warnings (such as alert messages) } Examples: > verus getnetworkinfo > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/getnetworkinfo"
        ],
        [
            "What kind of information can I expect to see in the result of the `getnetworkinfo` command?",
            "The result of the `getnetworkinfo` command is an object containing various information about the P2P network. This includes:\n\n* Server version and subversion\n* Protocol version\n* Services offered to the network\n* Time offset\n* Number of connections\n* Information about each network (name, limited, reachable, and proxy)\n* Minimum relay fee for non-free transactions\n* List of local addresses with their scores\n* Any network warnings or alert messages",
            "getnetworkinfo Returns an object containing various state info regarding P2P networking. Result: {  \"version\": xxxxx,           (numeric) the server version  \"subversion\": \"/MagicBean:x.y.z[-v]/\",   (string) the server subversion string  \"protocolversion\": xxxxx,       (numeric) the protocol version  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network  \"timeoffset\": xxxxx,          (numeric) the time offset  \"connections\": xxxxx,         (numeric) the number of connections  \"networks\": [             (array) information per network  {   \"name\": \"xxx\",           (string) network (ipv4, ipv6 or onion)   \"limited\": true|false,        (boolean) is the network limited using -onlynet?   \"reachable\": true|false,       (boolean) is the network reachable?   \"proxy\": \"host:port\"        (string) the proxy that is used for this network, or empty if none  }  ,...  ],  \"relayfee\": x.xxxxxxxx,        (numeric) minimum relay fee for non-free transactions in VRSC/kB  \"localaddresses\": [          (array) list of local addresses  {   \"address\": \"xxxx\",         (string) network address   \"port\": xxx,             (numeric) network port   \"score\": xxx             (numeric) relative score  }  ,...  ]  \"warnings\": \"...\"          (string) any network warnings (such as alert messages) } Examples: > verus getnetworkinfo > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/getnetworkinfo"
        ],
        [
            "How can I use the `getnetworkinfo` command in Verus?",
            "You can use the `getnetworkinfo` command in Verus by running it directly in the Verus CLI or by using a JSON-RPC request. Here are some examples:\n\n* Using the Verus CLI: `verus getnetworkinfo`\n* Using a JSON-RPC request: `curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/`",
            "getnetworkinfo Returns an object containing various state info regarding P2P networking. Result: {  \"version\": xxxxx,           (numeric) the server version  \"subversion\": \"/MagicBean:x.y.z[-v]/\",   (string) the server subversion string  \"protocolversion\": xxxxx,       (numeric) the protocol version  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network  \"timeoffset\": xxxxx,          (numeric) the time offset  \"connections\": xxxxx,         (numeric) the number of connections  \"networks\": [             (array) information per network  {   \"name\": \"xxx\",           (string) network (ipv4, ipv6 or onion)   \"limited\": true|false,        (boolean) is the network limited using -onlynet?   \"reachable\": true|false,       (boolean) is the network reachable?   \"proxy\": \"host:port\"        (string) the proxy that is used for this network, or empty if none  }  ,...  ],  \"relayfee\": x.xxxxxxxx,        (numeric) minimum relay fee for non-free transactions in VRSC/kB  \"localaddresses\": [          (array) list of local addresses  {   \"address\": \"xxxx\",         (string) network address   \"port\": xxx,             (numeric) network port   \"score\": xxx             (numeric) relative score  }  ,...  ]  \"warnings\": \"...\"          (string) any network warnings (such as alert messages) } Examples: > verus getnetworkinfo > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/getnetworkinfo"
        ],
        [
            "What does the `localservices` field in the `getnetworkinfo` result indicate?",
            "The `localservices` field in the `getnetworkinfo` result indicates the services that the Verus node offers to the network.",
            "getnetworkinfo Returns an object containing various state info regarding P2P networking. Result: {  \"version\": xxxxx,           (numeric) the server version  \"subversion\": \"/MagicBean:x.y.z[-v]/\",   (string) the server subversion string  \"protocolversion\": xxxxx,       (numeric) the protocol version  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network  \"timeoffset\": xxxxx,          (numeric) the time offset  \"connections\": xxxxx,         (numeric) the number of connections  \"networks\": [             (array) information per network  {   \"name\": \"xxx\",           (string) network (ipv4, ipv6 or onion)   \"limited\": true|false,        (boolean) is the network limited using -onlynet?   \"reachable\": true|false,       (boolean) is the network reachable?   \"proxy\": \"host:port\"        (string) the proxy that is used for this network, or empty if none  }  ,...  ],  \"relayfee\": x.xxxxxxxx,        (numeric) minimum relay fee for non-free transactions in VRSC/kB  \"localaddresses\": [          (array) list of local addresses  {   \"address\": \"xxxx\",         (string) network address   \"port\": xxx,             (numeric) network port   \"score\": xxx             (numeric) relative score  }  ,...  ]  \"warnings\": \"...\"          (string) any network warnings (such as alert messages) } Examples: > verus getnetworkinfo > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/getnetworkinfo"
        ]
    ],
    "will",
    "be",
    "replaced",
    "17317ad4-af8a-41db-8bc9-29c60e38bde0"
]