[
    "How can I use the `decryptdata` command in Verus?",
    "You can use the `decryptdata` command in Verus by running the command with the required and optional arguments, like this:\n```\nverus decryptdata '{encrypteddatadescriptor}'\n```\nAlternatively, you can use the JSON RPC interface to call the `decryptdata` method, like this:\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decryptdata\", \"params\": ['{encrypteddatadescriptor}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
    "decryptdata '{          \"datadescriptor\": {},          \"evk\":\"Optional Sapling extended full viewing key\",          \"ivk\":\"Optional hex incoming viewing key\",          \"txid\":\"hex\",          \"retrieve\": bool        } Decrypts a vdxf data descriptor, which is typically encrypted to a z-address. If the viewing key is present, it is decrypted, and any nested encryptions are attempted as well. If either the viewing key or the ssk are correct, the object will be returned with as much decryption as possible completed. If no decryption is possible, this function returns an error. Arguments: {   \"datadescriptor\": {}                      (object, required) Encrypted data descriptor to decrypt, uses wallet keys included in descriptor   \"evk\":\"Sapling extended full viewing key\"           (evk, optional) if known, an extended viewing key to use for decoding that may not be in the descriptor   \"ivk\":\"Sapling incoming viewing key hex\"            (ivk, optional) if known, an incoming viewing key to use for decoding   \"txid\":\"hex\",                         (txid, optional) if data is from a tx and retrieve is true, this may be needed when the data is on the same tx as the link   \"retrieve\": bool                        (bool, optional) Defaults to false. If true and the data passed is an encrypted or unencrypted reference                                              on this chain, it retrieves the data from its reference and decrypts if it can } Result: Examples: Encrypt data > verus signdata '{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}' Decrypt data > verus decryptdata '{encrypteddatadescriptor}' As json rpc > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signdata\", \"params\": ['{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
    "./raw_text_input_api_text/decryptdata"
]