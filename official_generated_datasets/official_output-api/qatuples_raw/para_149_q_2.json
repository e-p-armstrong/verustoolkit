[
    "What information does the `validateaddress` command return about a valid address?",
    "If the address is valid, the `validateaddress` command returns a JSON object with the following properties:\n\n* `address`: The Verus or PBaaS address being validated.\n* `scriptPubKey`: The hex encoded scriptPubKey generated by the address.\n* `ismine`: A boolean indicating whether the address belongs to the user or not.\n* `isscript`: A boolean indicating whether the key is a script or not.\n* `pubkey`: The hex value of the raw public key.\n* `iscompressed`: A boolean indicating whether the address is compressed or not.\n* `account`: The account associated with the address (DEPRECATED).",
    "validateaddress \"address\" Return information about the given transparent address. Arguments: 1. \"address\"   (string, required) The transparent address to validate Result: {  \"isvalid\" : true|false,     (boolean) If the address is valid or not. If not, this is the only property returned.  \"address\" : \"verusaddress\",  (string) The Verus or PBaaS address to be validated  \"scriptPubKey\" : \"hex\",    (string) The hex encoded scriptPubKey generated by the address  \"ismine\" : true|false,     (boolean) If the address is yours or not  \"isscript\" : true|false,    (boolean) If the key is a script  \"pubkey\" : \"publickeyhex\",  (string) The hex value of the raw public key  \"iscompressed\" : true|false,  (boolean) If the address is compressed  \"account\" : \"account\"     (string) DEPRECATED. The account associated with the address, \"\" is the default account } Examples: > verus validateaddress \"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
    "./raw_text_input_api_text/validateaddress"
]