[
    [
        [
            "What is the purpose of the `idreferrallevels` parameter when defining a currency in Verus?",
            "The `idreferrallevels` parameter is used to change the levels of referrals used when registering subIDs. It determines how the subID registration fees are divided and distributed among the referrers. The minimum number of levels is 0, and the maximum is 5, with a default of 3 levels.",
            "### **\"idreferrallevels\"** ![image-referralsID](/images/referralsID2.png) Use this parameter to change the levels of referrals used when registering subIDs. The image above shows the division and distribution of subID registration fees, depending on the chosen level. Minimum is 0 levels, maximum is 5. The default is `3` levels.To enable referrals, add `\"options\":8` to the currency definition.Example currency: ``` json ./verus -chain=VRSCTEST definecurrency '{  \"name\":\"PremiumAccess\",  \"options\":40,  \"proofprotocol\":2,  \"preallocations\":[{\"Klaus@\":2000}],  \"idregistrationfees\":300,  \"idreferrallevels\":1 }' ``` \u261d\ufe0f This is a centralized simple token currency called PremiumAccess. The owner of the rootID can mint and burn tokens at will. It has referrals enabled. When the currency is launched 2000 PremiumAccess go to the Klaus@ VerusID. It costs a 300 PremiumAccess fee to register a subID. These fees go to the rootID because it is a centralized token currency. When someone registers a subID using a referral they pay 200 of which 100 goes to the referred subID, and 100 to the rootID.### **\"nativecurrencyid\"** Use this parameter for mapped ERC-20 tokens. The parameter includes the Ethereum contract address for the ERC-20. [Read more](/currencies/mapping-1:1-eth)::: warning Need help setting up a currency launch? \ud83e\udd14 [Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord) :::## How to launch Now you know how to create a currency definition with all its options and parameters. Next up: how to actually use the definition to launch a currency.Here we use the command-line interface. If you want to use the built-in terminal from Verus Desktop, just replace ``./verus -chain=VRSCTEST`` with ``run``.::: tip Use Verus Testnet first! \ud83d\udc77 Before launching your currency or token on Verus (or any other PBaaS-chain), it is highly recommended to try it out on testnet first. :::Let's use this example definition to launch the currency: ``` json ./verus -chain=VRSCTEST definecurrency '{  \"name\":\"MyBrand\",  \"options\":32,  \"proofprotocol\":2,  \"preallocations\":[{\"Influencer@\":100}] }' ```",
            "./raw_text_input_docs/launch-currency.md"
        ],
        [
            "How do I enable referrals when defining a currency in Verus?",
            "To enable referrals, you need to add `\"options\":8` to the currency definition. This will allow referrals to be used when registering subIDs.",
            "### **\"idreferrallevels\"** ![image-referralsID](/images/referralsID2.png) Use this parameter to change the levels of referrals used when registering subIDs. The image above shows the division and distribution of subID registration fees, depending on the chosen level. Minimum is 0 levels, maximum is 5. The default is `3` levels.To enable referrals, add `\"options\":8` to the currency definition.Example currency: ``` json ./verus -chain=VRSCTEST definecurrency '{  \"name\":\"PremiumAccess\",  \"options\":40,  \"proofprotocol\":2,  \"preallocations\":[{\"Klaus@\":2000}],  \"idregistrationfees\":300,  \"idreferrallevels\":1 }' ``` \u261d\ufe0f This is a centralized simple token currency called PremiumAccess. The owner of the rootID can mint and burn tokens at will. It has referrals enabled. When the currency is launched 2000 PremiumAccess go to the Klaus@ VerusID. It costs a 300 PremiumAccess fee to register a subID. These fees go to the rootID because it is a centralized token currency. When someone registers a subID using a referral they pay 200 of which 100 goes to the referred subID, and 100 to the rootID.### **\"nativecurrencyid\"** Use this parameter for mapped ERC-20 tokens. The parameter includes the Ethereum contract address for the ERC-20. [Read more](/currencies/mapping-1:1-eth)::: warning Need help setting up a currency launch? \ud83e\udd14 [Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord) :::## How to launch Now you know how to create a currency definition with all its options and parameters. Next up: how to actually use the definition to launch a currency.Here we use the command-line interface. If you want to use the built-in terminal from Verus Desktop, just replace ``./verus -chain=VRSCTEST`` with ``run``.::: tip Use Verus Testnet first! \ud83d\udc77 Before launching your currency or token on Verus (or any other PBaaS-chain), it is highly recommended to try it out on testnet first. :::Let's use this example definition to launch the currency: ``` json ./verus -chain=VRSCTEST definecurrency '{  \"name\":\"MyBrand\",  \"options\":32,  \"proofprotocol\":2,  \"preallocations\":[{\"Influencer@\":100}] }' ```",
            "./raw_text_input_docs/launch-currency.md"
        ],
        [
            "What happens to the subID registration fees in a centralized token currency like PremiumAccess?",
            "In a centralized token currency like PremiumAccess, the subID registration fees go to the rootID. This is because the currency is controlled by a central authority, which in this case is the owner of the rootID.",
            "### **\"idreferrallevels\"** ![image-referralsID](/images/referralsID2.png) Use this parameter to change the levels of referrals used when registering subIDs. The image above shows the division and distribution of subID registration fees, depending on the chosen level. Minimum is 0 levels, maximum is 5. The default is `3` levels.To enable referrals, add `\"options\":8` to the currency definition.Example currency: ``` json ./verus -chain=VRSCTEST definecurrency '{  \"name\":\"PremiumAccess\",  \"options\":40,  \"proofprotocol\":2,  \"preallocations\":[{\"Klaus@\":2000}],  \"idregistrationfees\":300,  \"idreferrallevels\":1 }' ``` \u261d\ufe0f This is a centralized simple token currency called PremiumAccess. The owner of the rootID can mint and burn tokens at will. It has referrals enabled. When the currency is launched 2000 PremiumAccess go to the Klaus@ VerusID. It costs a 300 PremiumAccess fee to register a subID. These fees go to the rootID because it is a centralized token currency. When someone registers a subID using a referral they pay 200 of which 100 goes to the referred subID, and 100 to the rootID.### **\"nativecurrencyid\"** Use this parameter for mapped ERC-20 tokens. The parameter includes the Ethereum contract address for the ERC-20. [Read more](/currencies/mapping-1:1-eth)::: warning Need help setting up a currency launch? \ud83e\udd14 [Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord) :::## How to launch Now you know how to create a currency definition with all its options and parameters. Next up: how to actually use the definition to launch a currency.Here we use the command-line interface. If you want to use the built-in terminal from Verus Desktop, just replace ``./verus -chain=VRSCTEST`` with ``run``.::: tip Use Verus Testnet first! \ud83d\udc77 Before launching your currency or token on Verus (or any other PBaaS-chain), it is highly recommended to try it out on testnet first. :::Let's use this example definition to launch the currency: ``` json ./verus -chain=VRSCTEST definecurrency '{  \"name\":\"MyBrand\",  \"options\":32,  \"proofprotocol\":2,  \"preallocations\":[{\"Influencer@\":100}] }' ```",
            "./raw_text_input_docs/launch-currency.md"
        ],
        [
            "What is the purpose of the `nativecurrencyid` parameter when defining a currency in Verus?",
            "The `nativecurrencyid` parameter is used for mapped ERC-20 tokens. It includes the Ethereum contract address for the ERC-20 token.",
            "### **\"idreferrallevels\"** ![image-referralsID](/images/referralsID2.png) Use this parameter to change the levels of referrals used when registering subIDs. The image above shows the division and distribution of subID registration fees, depending on the chosen level. Minimum is 0 levels, maximum is 5. The default is `3` levels.To enable referrals, add `\"options\":8` to the currency definition.Example currency: ``` json ./verus -chain=VRSCTEST definecurrency '{  \"name\":\"PremiumAccess\",  \"options\":40,  \"proofprotocol\":2,  \"preallocations\":[{\"Klaus@\":2000}],  \"idregistrationfees\":300,  \"idreferrallevels\":1 }' ``` \u261d\ufe0f This is a centralized simple token currency called PremiumAccess. The owner of the rootID can mint and burn tokens at will. It has referrals enabled. When the currency is launched 2000 PremiumAccess go to the Klaus@ VerusID. It costs a 300 PremiumAccess fee to register a subID. These fees go to the rootID because it is a centralized token currency. When someone registers a subID using a referral they pay 200 of which 100 goes to the referred subID, and 100 to the rootID.### **\"nativecurrencyid\"** Use this parameter for mapped ERC-20 tokens. The parameter includes the Ethereum contract address for the ERC-20. [Read more](/currencies/mapping-1:1-eth)::: warning Need help setting up a currency launch? \ud83e\udd14 [Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord) :::## How to launch Now you know how to create a currency definition with all its options and parameters. Next up: how to actually use the definition to launch a currency.Here we use the command-line interface. If you want to use the built-in terminal from Verus Desktop, just replace ``./verus -chain=VRSCTEST`` with ``run``.::: tip Use Verus Testnet first! \ud83d\udc77 Before launching your currency or token on Verus (or any other PBaaS-chain), it is highly recommended to try it out on testnet first. :::Let's use this example definition to launch the currency: ``` json ./verus -chain=VRSCTEST definecurrency '{  \"name\":\"MyBrand\",  \"options\":32,  \"proofprotocol\":2,  \"preallocations\":[{\"Influencer@\":100}] }' ```",
            "./raw_text_input_docs/launch-currency.md"
        ],
        [
            "How do I launch a currency using the command-line interface in Verus?",
            "To launch a currency, you need to use the `definecurrency` command and provide the currency definition as a JSON object. For example:\n```\n./verus -chain=VRSCTEST definecurrency '{  \"name\":\"MyBrand\",  \"options\":32,  \"proofprotocol\":2,  \"preallocations\":[{\"Influencer@\":100}] }'\n```",
            "### **\"idreferrallevels\"** ![image-referralsID](/images/referralsID2.png) Use this parameter to change the levels of referrals used when registering subIDs. The image above shows the division and distribution of subID registration fees, depending on the chosen level. Minimum is 0 levels, maximum is 5. The default is `3` levels.To enable referrals, add `\"options\":8` to the currency definition.Example currency: ``` json ./verus -chain=VRSCTEST definecurrency '{  \"name\":\"PremiumAccess\",  \"options\":40,  \"proofprotocol\":2,  \"preallocations\":[{\"Klaus@\":2000}],  \"idregistrationfees\":300,  \"idreferrallevels\":1 }' ``` \u261d\ufe0f This is a centralized simple token currency called PremiumAccess. The owner of the rootID can mint and burn tokens at will. It has referrals enabled. When the currency is launched 2000 PremiumAccess go to the Klaus@ VerusID. It costs a 300 PremiumAccess fee to register a subID. These fees go to the rootID because it is a centralized token currency. When someone registers a subID using a referral they pay 200 of which 100 goes to the referred subID, and 100 to the rootID.### **\"nativecurrencyid\"** Use this parameter for mapped ERC-20 tokens. The parameter includes the Ethereum contract address for the ERC-20. [Read more](/currencies/mapping-1:1-eth)::: warning Need help setting up a currency launch? \ud83e\udd14 [Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord) :::## How to launch Now you know how to create a currency definition with all its options and parameters. Next up: how to actually use the definition to launch a currency.Here we use the command-line interface. If you want to use the built-in terminal from Verus Desktop, just replace ``./verus -chain=VRSCTEST`` with ``run``.::: tip Use Verus Testnet first! \ud83d\udc77 Before launching your currency or token on Verus (or any other PBaaS-chain), it is highly recommended to try it out on testnet first. :::Let's use this example definition to launch the currency: ``` json ./verus -chain=VRSCTEST definecurrency '{  \"name\":\"MyBrand\",  \"options\":32,  \"proofprotocol\":2,  \"preallocations\":[{\"Influencer@\":100}] }' ```",
            "./raw_text_input_docs/launch-currency.md"
        ],
        [
            "Is it recommended to test a currency on the testnet before launching it on the mainnet?",
            "Yes, it is highly recommended to test a currency on the testnet before launching it on the mainnet. This allows you to try out your currency definition and ensure that everything works as expected before launching it on the mainnet.",
            "### **\"idreferrallevels\"** ![image-referralsID](/images/referralsID2.png) Use this parameter to change the levels of referrals used when registering subIDs. The image above shows the division and distribution of subID registration fees, depending on the chosen level. Minimum is 0 levels, maximum is 5. The default is `3` levels.To enable referrals, add `\"options\":8` to the currency definition.Example currency: ``` json ./verus -chain=VRSCTEST definecurrency '{  \"name\":\"PremiumAccess\",  \"options\":40,  \"proofprotocol\":2,  \"preallocations\":[{\"Klaus@\":2000}],  \"idregistrationfees\":300,  \"idreferrallevels\":1 }' ``` \u261d\ufe0f This is a centralized simple token currency called PremiumAccess. The owner of the rootID can mint and burn tokens at will. It has referrals enabled. When the currency is launched 2000 PremiumAccess go to the Klaus@ VerusID. It costs a 300 PremiumAccess fee to register a subID. These fees go to the rootID because it is a centralized token currency. When someone registers a subID using a referral they pay 200 of which 100 goes to the referred subID, and 100 to the rootID.### **\"nativecurrencyid\"** Use this parameter for mapped ERC-20 tokens. The parameter includes the Ethereum contract address for the ERC-20. [Read more](/currencies/mapping-1:1-eth)::: warning Need help setting up a currency launch? \ud83e\udd14 [Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord) :::## How to launch Now you know how to create a currency definition with all its options and parameters. Next up: how to actually use the definition to launch a currency.Here we use the command-line interface. If you want to use the built-in terminal from Verus Desktop, just replace ``./verus -chain=VRSCTEST`` with ``run``.::: tip Use Verus Testnet first! \ud83d\udc77 Before launching your currency or token on Verus (or any other PBaaS-chain), it is highly recommended to try it out on testnet first. :::Let's use this example definition to launch the currency: ``` json ./verus -chain=VRSCTEST definecurrency '{  \"name\":\"MyBrand\",  \"options\":32,  \"proofprotocol\":2,  \"preallocations\":[{\"Influencer@\":100}] }' ```",
            "./raw_text_input_docs/launch-currency.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "4a865d16-970a-4c83-9517-8e52af5f4837"
]