[
    "What is the purpose of the `walletpassphrase` command?",
    "The `walletpassphrase` command is used to set the passphrase to use the wallet, such as for signing or sending VRSC. After setting the passphrase, you can perform operations that require private keys.",
    "#### Result: \"path\"      (string) The full path of the destination fileExamples: ```bash > verus dumpwallet \"test\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `encryptwallet \"passphrase\"` WARNING: encryptwallet is disabled. To enable it, restart verusd with the `-experimentalfeatures` and `-developerencryptwallet` commandline options, or add these two lines to the VRSC.conf file: ``` experimentalfeatures=1 developerencryptwallet=1 ``` Encrypts the wallet with 'passphrase'. This is for first time encryption. After this, any calls that interact with private keys such as sending or signing will require the passphrase to be set prior the making these calls. Use the walletpassphrase call for this, and then walletlock call. If the wallet is already encrypted, use the walletpassphrasechange call. Note that this will shutdown the server.#### Arguments: 1. \"passphrase\"  (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long. Examples:Encrypt you wallet ```bash > verus encryptwallet \"my pass phrase\" ``` Now set the passphrase to use the wallet, such as for signing or sending VRSC ```bash > verus walletpassphrase \"my pass phrase\" ``` Now we can so something like sign ```bash > verus signmessage \"VRSC_address\" \"test message\" ``` Now lock the wallet again by removing the passphrase ```bash > verus walletlock ``` As a json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"encryptwallet\", \"params\": [\"my pass phrase\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getaccount \"VRSC_address\"` DEPRECATED. Returns the account associated with the given address.#### Arguments: 1. \"VRSC_address\" (string, required) The VRSC address for account lookup.#### Result: \"accountname\"    (string) the account addressExamples: ```bash > verus getaccount \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccount\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getaccountaddress \"account\"` DEPRECATED. Returns the current VRSC address for receiving payments to this account.#### Arguments: 1. \"account\"    (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.#### Result: \"VRSC_address\"  (string) The account VRSC address",
    "./raw_txt_input/clifaq-02_verus_commands.md"
]