[
    "How can I dump the private key corresponding to a transparent address in Verus?",
    "You can dump the private key corresponding to a transparent address in Verus using the `dumpprivkey` command. This command takes the transparent address as an argument and returns the private key as a string.",
    "#### Arguments: `json object` ```json {  \"datadescriptor\": {}                      (object, required) Encrypted data descriptor to decrypt, uses wallet keys included in descriptor  \"evk\":\"Sapling extended full viewing key\"           (evk, optional) if known, an extended viewing key to use for decoding that may not be in the descriptor  \"ivk\":\"Sapling incoming viewing key hex\"            (ivk, optional) if known, an incoming viewing key to use for decoding  \"txid\":\"hex\",                         (txid, optional) if data is from a tx and retrieve is true, this may be needed when the data is on the same tx as the link  \"retrieve\": bool                        (bool, optional) Defaults to false. If true and the data passed is an encrypted or unencrypted reference                                             on this chain, it retrieves the data from its reference and decrypts if it can } ``` #### Result:#### Examples: Encrypt data ```bash > verus signdata '{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'``` Decrypt data ```bash > verus decryptdata '{encrypteddatadescriptor}' ``` As json rpc ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signdata\", \"params\": ['{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `dumpprivkey \"t-addr\"` Reveals the private key corresponding to 't-addr'. Then the importprivkey can be used with this output#### Arguments: 1. \"t-addr\"  (string, required) The transparent address for the private key#### Result: \"key\"     (string) The private keyExamples: ```bash > verus dumpprivkey \"myaddress\" > verus importprivkey \"mykey\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `dumpwallet \"filename\" (omitemptytaddresses)` Dumps taddr wallet keys in a human-readable format. Overwriting an existing file is not permitted.#### Arguments: 1. \"filename\"      (string, required) The filename, saved in folder set by verusd -exportdir option 2. \"omitemptytaddresses\" (boolean, optional) Defaults to false. If true, export only addresses with indexed UTXOs or that control IDs in the wallet (do not use this option without being sure that all addresses of interest are included)",
    "./raw_txt_input/clifaq-02_verus_commands.md"
]