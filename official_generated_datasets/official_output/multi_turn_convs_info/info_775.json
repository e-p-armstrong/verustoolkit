[
    [
        [
            "What does the `getgenerate` method return?",
            "The `getgenerate` method returns a JSON object with three properties: `staking`, `generate`, and `numthreads`. `staking` and `generate` are boolean values that indicate whether staking and mining are on or off, respectively. `numthreads` is a numeric value that represents the processor limit for mining.",
            "WARNING: z_validatepaymentdisclosure is disabled. To enable it, restart verusd with the `-experimentalfeatures` and `-paymentdisclosure` commandline options, or add these two lines to the zcash.conf file: ``` experimentalfeatures=1 paymentdisclosure=1 ``` #### Arguments: ``` 1. \"paymentdisclosure\"   (string, required) Hex data string, with \"zpd:\" prefix. ``` Examples: ```bash > verus z_validatepaymentdisclosure \"zpd:706462ff004c561a0447ba2ec51184e6c204...\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_validatepaymentdisclosure\", \"params\": [\"zpd:706462ff004c561a0447ba2ec51184e6c204...\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Generating ### `generate numblocks` Mine blocks immediately (before the RPC call returns)Note: this function can only be used on the regtest network#### Arguments: ``` 1. numblocks  (numeric) How many blocks are generated immediately. ``` ### Result: ```json [ blockhashes ]   (array) hashes of blocks generated ``` Examples:Generate 11 blocks ```bash > verus generate 11 ```### `getgenerate` Return if the server is set to mine and/or mint coins or not. The default is false. It is set with the command line argument `-gen` (or `VRSC.conf` setting `gen`) and `-mint` It can also be set with the `setgenerate` call.Result ```json {  \"staking\": true|false   (boolean) If staking is on or off (see setgenerate)  \"generate\": true|false   (boolean) If mining is on or off (see setgenerate)  \"numthreads\": n      (numeric) The processor limit for mining. (see setgenerate) } ``` ####Examples: ```bash > verus getgenerate > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getgenerate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `setgenerate generate ( genproclimit )` Set 'generate' true to turn either mining/generation or minting/staking on and false to turn both off. Mining is limited to 'genproclimit' processors, -1 is unlimited, setgenerate true with 0 genproclimit turns on staking See the getgenerate call for the current setting.#### Arguments: ``` 1. generate     (boolean, required) Set to true to turn on generation, off to turn off. 2. genproclimit   (numeric, optional) Set processor limit when generation is on. Can be -1 for unlimited, 0 to turn on staking. ``` ####Examples:",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How can I generate blocks immediately using the `generate` method?",
            "To generate blocks immediately, you can use the `generate` method with the number of blocks you want to generate as an argument. For example, to generate 11 blocks, you can use the command `verus generate 11`. Note that this method can only be used on the regtest network.",
            "WARNING: z_validatepaymentdisclosure is disabled. To enable it, restart verusd with the `-experimentalfeatures` and `-paymentdisclosure` commandline options, or add these two lines to the zcash.conf file: ``` experimentalfeatures=1 paymentdisclosure=1 ``` #### Arguments: ``` 1. \"paymentdisclosure\"   (string, required) Hex data string, with \"zpd:\" prefix. ``` Examples: ```bash > verus z_validatepaymentdisclosure \"zpd:706462ff004c561a0447ba2ec51184e6c204...\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_validatepaymentdisclosure\", \"params\": [\"zpd:706462ff004c561a0447ba2ec51184e6c204...\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Generating ### `generate numblocks` Mine blocks immediately (before the RPC call returns)Note: this function can only be used on the regtest network#### Arguments: ``` 1. numblocks  (numeric) How many blocks are generated immediately. ``` ### Result: ```json [ blockhashes ]   (array) hashes of blocks generated ``` Examples:Generate 11 blocks ```bash > verus generate 11 ```### `getgenerate` Return if the server is set to mine and/or mint coins or not. The default is false. It is set with the command line argument `-gen` (or `VRSC.conf` setting `gen`) and `-mint` It can also be set with the `setgenerate` call.Result ```json {  \"staking\": true|false   (boolean) If staking is on or off (see setgenerate)  \"generate\": true|false   (boolean) If mining is on or off (see setgenerate)  \"numthreads\": n      (numeric) The processor limit for mining. (see setgenerate) } ``` ####Examples: ```bash > verus getgenerate > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getgenerate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `setgenerate generate ( genproclimit )` Set 'generate' true to turn either mining/generation or minting/staking on and false to turn both off. Mining is limited to 'genproclimit' processors, -1 is unlimited, setgenerate true with 0 genproclimit turns on staking See the getgenerate call for the current setting.#### Arguments: ``` 1. generate     (boolean, required) Set to true to turn on generation, off to turn off. 2. genproclimit   (numeric, optional) Set processor limit when generation is on. Can be -1 for unlimited, 0 to turn on staking. ``` ####Examples:",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How can I set the generation mode using the `setgenerate` method?",
            "To set the generation mode using the `setgenerate` method, you need to pass two arguments: `generate` and `genproclimit`. `generate` is a boolean value that sets whether generation is on or off, and `genproclimit` is a numeric value that sets the processor limit for mining. For example, to turn on generation with unlimited processors, you can use the command `verus setgenerate true -1`.",
            "WARNING: z_validatepaymentdisclosure is disabled. To enable it, restart verusd with the `-experimentalfeatures` and `-paymentdisclosure` commandline options, or add these two lines to the zcash.conf file: ``` experimentalfeatures=1 paymentdisclosure=1 ``` #### Arguments: ``` 1. \"paymentdisclosure\"   (string, required) Hex data string, with \"zpd:\" prefix. ``` Examples: ```bash > verus z_validatepaymentdisclosure \"zpd:706462ff004c561a0447ba2ec51184e6c204...\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_validatepaymentdisclosure\", \"params\": [\"zpd:706462ff004c561a0447ba2ec51184e6c204...\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Generating ### `generate numblocks` Mine blocks immediately (before the RPC call returns)Note: this function can only be used on the regtest network#### Arguments: ``` 1. numblocks  (numeric) How many blocks are generated immediately. ``` ### Result: ```json [ blockhashes ]   (array) hashes of blocks generated ``` Examples:Generate 11 blocks ```bash > verus generate 11 ```### `getgenerate` Return if the server is set to mine and/or mint coins or not. The default is false. It is set with the command line argument `-gen` (or `VRSC.conf` setting `gen`) and `-mint` It can also be set with the `setgenerate` call.Result ```json {  \"staking\": true|false   (boolean) If staking is on or off (see setgenerate)  \"generate\": true|false   (boolean) If mining is on or off (see setgenerate)  \"numthreads\": n      (numeric) The processor limit for mining. (see setgenerate) } ``` ####Examples: ```bash > verus getgenerate > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getgenerate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `setgenerate generate ( genproclimit )` Set 'generate' true to turn either mining/generation or minting/staking on and false to turn both off. Mining is limited to 'genproclimit' processors, -1 is unlimited, setgenerate true with 0 genproclimit turns on staking See the getgenerate call for the current setting.#### Arguments: ``` 1. generate     (boolean, required) Set to true to turn on generation, off to turn off. 2. genproclimit   (numeric, optional) Set processor limit when generation is on. Can be -1 for unlimited, 0 to turn on staking. ``` ####Examples:",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the format of the argument for the `z_validatepaymentdisclosure` method?",
            "The argument for the `z_validatepaymentdisclosure` method is a string, which is a hex data string with a \"zpd:\" prefix.",
            "WARNING: z_validatepaymentdisclosure is disabled. To enable it, restart verusd with the `-experimentalfeatures` and `-paymentdisclosure` commandline options, or add these two lines to the zcash.conf file: ``` experimentalfeatures=1 paymentdisclosure=1 ``` #### Arguments: ``` 1. \"paymentdisclosure\"   (string, required) Hex data string, with \"zpd:\" prefix. ``` Examples: ```bash > verus z_validatepaymentdisclosure \"zpd:706462ff004c561a0447ba2ec51184e6c204...\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_validatepaymentdisclosure\", \"params\": [\"zpd:706462ff004c561a0447ba2ec51184e6c204...\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Generating ### `generate numblocks` Mine blocks immediately (before the RPC call returns)Note: this function can only be used on the regtest network#### Arguments: ``` 1. numblocks  (numeric) How many blocks are generated immediately. ``` ### Result: ```json [ blockhashes ]   (array) hashes of blocks generated ``` Examples:Generate 11 blocks ```bash > verus generate 11 ```### `getgenerate` Return if the server is set to mine and/or mint coins or not. The default is false. It is set with the command line argument `-gen` (or `VRSC.conf` setting `gen`) and `-mint` It can also be set with the `setgenerate` call.Result ```json {  \"staking\": true|false   (boolean) If staking is on or off (see setgenerate)  \"generate\": true|false   (boolean) If mining is on or off (see setgenerate)  \"numthreads\": n      (numeric) The processor limit for mining. (see setgenerate) } ``` ####Examples: ```bash > verus getgenerate > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getgenerate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `setgenerate generate ( genproclimit )` Set 'generate' true to turn either mining/generation or minting/staking on and false to turn both off. Mining is limited to 'genproclimit' processors, -1 is unlimited, setgenerate true with 0 genproclimit turns on staking See the getgenerate call for the current setting.#### Arguments: ``` 1. generate     (boolean, required) Set to true to turn on generation, off to turn off. 2. genproclimit   (numeric, optional) Set processor limit when generation is on. Can be -1 for unlimited, 0 to turn on staking. ``` ####Examples:",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How can I enable the `z_validatepaymentdisclosure` feature in Verus?",
            "To enable the `z_validatepaymentdisclosure` feature, you can either restart `verusd` with the `-experimentalfeatures` and `-paymentdisclosure` command-line options or add the following two lines to the `zcash.conf` file: `experimentalfeatures=1` and `paymentdisclosure=1`.",
            "WARNING: z_validatepaymentdisclosure is disabled. To enable it, restart verusd with the `-experimentalfeatures` and `-paymentdisclosure` commandline options, or add these two lines to the zcash.conf file: ``` experimentalfeatures=1 paymentdisclosure=1 ``` #### Arguments: ``` 1. \"paymentdisclosure\"   (string, required) Hex data string, with \"zpd:\" prefix. ``` Examples: ```bash > verus z_validatepaymentdisclosure \"zpd:706462ff004c561a0447ba2ec51184e6c204...\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_validatepaymentdisclosure\", \"params\": [\"zpd:706462ff004c561a0447ba2ec51184e6c204...\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Generating ### `generate numblocks` Mine blocks immediately (before the RPC call returns)Note: this function can only be used on the regtest network#### Arguments: ``` 1. numblocks  (numeric) How many blocks are generated immediately. ``` ### Result: ```json [ blockhashes ]   (array) hashes of blocks generated ``` Examples:Generate 11 blocks ```bash > verus generate 11 ```### `getgenerate` Return if the server is set to mine and/or mint coins or not. The default is false. It is set with the command line argument `-gen` (or `VRSC.conf` setting `gen`) and `-mint` It can also be set with the `setgenerate` call.Result ```json {  \"staking\": true|false   (boolean) If staking is on or off (see setgenerate)  \"generate\": true|false   (boolean) If mining is on or off (see setgenerate)  \"numthreads\": n      (numeric) The processor limit for mining. (see setgenerate) } ``` ####Examples: ```bash > verus getgenerate > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getgenerate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `setgenerate generate ( genproclimit )` Set 'generate' true to turn either mining/generation or minting/staking on and false to turn both off. Mining is limited to 'genproclimit' processors, -1 is unlimited, setgenerate true with 0 genproclimit turns on staking See the getgenerate call for the current setting.#### Arguments: ``` 1. generate     (boolean, required) Set to true to turn on generation, off to turn off. 2. genproclimit   (numeric, optional) Set processor limit when generation is on. Can be -1 for unlimited, 0 to turn on staking. ``` ####Examples:",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "e966b48e-a335-401d-8957-4d74db068928"
]