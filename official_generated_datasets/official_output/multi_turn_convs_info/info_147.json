[
    [
        [
            "How can I sign transactions from multi-signature IDs in Verus, on both the testnet and mainnet?",
            "To sign transactions from multi-signature IDs, you can follow these steps:\n\n1. Create a transaction and get the raw transaction data using `verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'`.\n2. Get the operation ID returned by `sendcurrency` and use it to get the raw hex transaction data with `verus z_getoperationstatus <operation_id_returned_by_sendcurrency>`.\n3. Take the raw hex transaction data to each additional wallet(s) containing the additional signing addresses/IDs and sign it with `verus signrawtransaction <raw_hex_transaction>`.\n4. After the last necessary signature is applied, broadcast the signed transaction on the network using `verus sendrawtransaction <raw_hex_signed_transaction>`.",
            "## Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ``` verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]' verus z_getoperationstatus <operation_id_returned_by_sendcurrency> ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ``` verus signrawtransaction <raw_hex_transaction> ``` After the last necessary signature is applied, broadcast on the network using:  ``` verus sendrawtransaction <raw_hex_signed_transaction> ```## Tokenizing ID control (next generation NFT): The currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0. ``` verus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}' ```## Creating an identity with a fractional currency as its parent `registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration``` # verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds verus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny ```` Specify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address ``` # verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffunds",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How can I create an identity with a fractional currency as its parent in Verus?",
            "To create an identity with a fractional currency as its parent, you need to use the `registernamecommitment` command with additional positional arguments to specify a currency parent and a funding address. You can use quotes `\"\"` to leave fields blank.\n\nHere's an example of how to create an identity with a parent currency:\n```\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nThen, you need to specify the parent in the identity definition and register the identity using the `registeridentity` command.",
            "## Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ``` verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]' verus z_getoperationstatus <operation_id_returned_by_sendcurrency> ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ``` verus signrawtransaction <raw_hex_transaction> ``` After the last necessary signature is applied, broadcast on the network using:  ``` verus sendrawtransaction <raw_hex_signed_transaction> ```## Tokenizing ID control (next generation NFT): The currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0. ``` verus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}' ```## Creating an identity with a fractional currency as its parent `registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration``` # verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds verus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny ```` Specify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address ``` # verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffunds",
            "./raw_txt_input/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "c03915be-cffa-40bc-afc5-e961f642f4f2"
]