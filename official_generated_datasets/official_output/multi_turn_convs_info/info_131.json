[
    [
        [
            "How do I use the `createrawtransaction` command to create a transaction in Verus?",
            "To use the `createrawtransaction` command, you need to provide three arguments: a JSON array of input transactions, a JSON object with addresses and amounts, and optional locktime and expiry height arguments.\n\nHere's an example of how to create a transaction:\n```\nverus createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":0.01}\"\n```\nThis command creates a transaction spending the output `0` of transaction `myid` and sending `0.01` VRSC to the specified address.\n\nYou can also use the `curl` command to create a transaction:\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"{\\\"address\\\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "### `setban \"ip(/netmask)\" \"add|remove\" (bantime) (absolute)` Attempts add or remove a IP/Subnet from the banned list.#### Arguments: 1. \"ip(/netmask)\" (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip) 2. \"command\"   (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list 3. \"bantime\"   (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument) 4. \"absolute\"   (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)Examples: ```bash > verus setban \"192.168.0.6\" \"add\" 86400 > verus setban \"192.168.0.0/24\" \"add\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\" 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Rawtransactions### `createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,...} ( locktime ) ( expiryheight )` Create a transaction spending the given inputs and sending to the given addresses. Returns hex-encoded raw transaction. Note that the transaction's inputs are not signed, and it is not stored in the wallet or transmitted to the network.#### Arguments: 1. \"transactions\"    (string, required) A json array of json objects ```json   [    {     \"txid\":\"id\",  (string, required) The transaction id     \"vout\":n    (numeric, required) The output number     \"sequence\":n  (numeric, optional) The sequence number    }    ,...   ] ``` 2. \"addresses\"      (string, required) a json object with addresses as keys and amounts as values ```json   {    \"address\": x.xxx  (numeric, required) The key is the Komodo address, the value is the VRSC amount    ,...   } ``` 3. locktime       (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs 4. expiryheight     (numeric, optional, default=nextblockheight+20 (pre-Blossom) or nextblockheight+40 (post-Blossom)) Expiry height of transaction (if Overwinter is active)#### Result: \"transaction\"      (string) hex string of the transactionExamples ```bash > verus createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":0.01}\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"{\\\"address\\\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `createrawtransaction` command in Verus?",
            "The `createrawtransaction` command is used to create a transaction spending the given inputs and sending to the given addresses. The command returns a hex-encoded raw transaction, but it does not sign the transaction's inputs, store it in the wallet, or transmit it to the network.",
            "### `setban \"ip(/netmask)\" \"add|remove\" (bantime) (absolute)` Attempts add or remove a IP/Subnet from the banned list.#### Arguments: 1. \"ip(/netmask)\" (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip) 2. \"command\"   (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list 3. \"bantime\"   (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument) 4. \"absolute\"   (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)Examples: ```bash > verus setban \"192.168.0.6\" \"add\" 86400 > verus setban \"192.168.0.0/24\" \"add\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\" 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Rawtransactions### `createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,...} ( locktime ) ( expiryheight )` Create a transaction spending the given inputs and sending to the given addresses. Returns hex-encoded raw transaction. Note that the transaction's inputs are not signed, and it is not stored in the wallet or transmitted to the network.#### Arguments: 1. \"transactions\"    (string, required) A json array of json objects ```json   [    {     \"txid\":\"id\",  (string, required) The transaction id     \"vout\":n    (numeric, required) The output number     \"sequence\":n  (numeric, optional) The sequence number    }    ,...   ] ``` 2. \"addresses\"      (string, required) a json object with addresses as keys and amounts as values ```json   {    \"address\": x.xxx  (numeric, required) The key is the Komodo address, the value is the VRSC amount    ,...   } ``` 3. locktime       (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs 4. expiryheight     (numeric, optional, default=nextblockheight+20 (pre-Blossom) or nextblockheight+40 (post-Blossom)) Expiry height of transaction (if Overwinter is active)#### Result: \"transaction\"      (string) hex string of the transactionExamples ```bash > verus createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":0.01}\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"{\\\"address\\\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How can I ban or unban an IP address or subnet using the `setban` command in Verus?",
            "You can use the `setban` command to add or remove an IP address or subnet from the banned list. The command takes four arguments: the IP address or subnet, the command to add or remove, an optional ban time, and an optional absolute timestamp.\n\nHere's an example of how to ban an IP address:\n```\nverus setban \"192.168.0.6\" \"add\" 86400\n```\nThis command bans the IP address `192.168.0.6` for 86400 seconds (or 24 hours).\n\nYou can also ban a subnet by specifying the netmask:\n```\nverus setban \"192.168.0.0/24\" \"add\"\n```\nThis command bans the entire subnet `192.168.0.0/24`.\n\nTo unban an IP address or subnet, simply use the `remove` command:\n```\nverus setban \"192.168.0.6\" \"remove\"\n```",
            "### `setban \"ip(/netmask)\" \"add|remove\" (bantime) (absolute)` Attempts add or remove a IP/Subnet from the banned list.#### Arguments: 1. \"ip(/netmask)\" (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip) 2. \"command\"   (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list 3. \"bantime\"   (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument) 4. \"absolute\"   (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)Examples: ```bash > verus setban \"192.168.0.6\" \"add\" 86400 > verus setban \"192.168.0.0/24\" \"add\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\" 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Rawtransactions### `createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,...} ( locktime ) ( expiryheight )` Create a transaction spending the given inputs and sending to the given addresses. Returns hex-encoded raw transaction. Note that the transaction's inputs are not signed, and it is not stored in the wallet or transmitted to the network.#### Arguments: 1. \"transactions\"    (string, required) A json array of json objects ```json   [    {     \"txid\":\"id\",  (string, required) The transaction id     \"vout\":n    (numeric, required) The output number     \"sequence\":n  (numeric, optional) The sequence number    }    ,...   ] ``` 2. \"addresses\"      (string, required) a json object with addresses as keys and amounts as values ```json   {    \"address\": x.xxx  (numeric, required) The key is the Komodo address, the value is the VRSC amount    ,...   } ``` 3. locktime       (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs 4. expiryheight     (numeric, optional, default=nextblockheight+20 (pre-Blossom) or nextblockheight+40 (post-Blossom)) Expiry height of transaction (if Overwinter is active)#### Result: \"transaction\"      (string) hex string of the transactionExamples ```bash > verus createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":0.01}\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"{\\\"address\\\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "9e3a7a89-b581-41a4-9e2b-b247a63e2c1d"
]