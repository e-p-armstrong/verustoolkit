[
    [
        [
            "What does the `getaddednodeinfo` command do, and what are the arguments?",
            "The `getaddednodeinfo` command returns information about the given added node, or all added nodes (note that onetry addnodes are not listed here). If dns is false, only a list of added nodes will be provided, otherwise connected information will also be available.\n\nThe arguments are:\n\n1. `dns` (boolean, required): If false, only a list of added nodes will be provided, otherwise connected information will also be available.\n2. `\"node\"` (string, optional): If provided, return information about this specific node, otherwise all nodes are returned.\n\nExample: `verus getaddednodeinfo true \"192.168.0.6:8233\"`",
            "#### Results: ```json   { rejected: \"reject reason\" } ```  Submission to our chain and PBaaS chains ```json   { blockhash: \"hex\", accepted: true, pbaas_submissions: { \"Quantum\":\"chainID_hex\", ... } } ```  Submission to only PBaaS chains ```json   { blockhash: \"hex\", accepted: \"pbaas\", pbaas_submissions: { \"Quantum\":\"chainID_hex\", ... } } ```#### Examples: ```bash > verus submitmergedblock \"mydata\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitmergedblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Network### `addnode \"node\" \"add|remove|onetry\"` Attempts add or remove a node from the addnode list. Or try a connection to a node once.#### Arguments: 1. \"node\"   (string, required) The node (see getpeerinfo for nodes) 2. \"command\" (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node onceExamples: ```bash > verus addnode \"192.168.0.6:8233\" \"onetry\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8233\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `clearbanned` Clear all banned IPs.Examples: ```bash > verus clearbanned > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `disconnectnode \"node\"` Immediately disconnects from the specified node.#### Arguments: 1. \"node\"   (string, required) The node (see getpeerinfo for nodes)Examples: ```bash > verus disconnectnode \"192.168.0.6:8233\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8233\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getaddednodeinfo dns ( \"node\" )` Returns information about the given added node, or all added nodes (note that onetry addnodes are not listed here) If dns is false, only a list of added nodes will be provided, otherwise connected information will also be available.#### Arguments: 1. dns    (boolean, required) If false, only a list of added nodes will be provided, otherwise connected information will also be available. 2. \"node\"  (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What does the `clearbanned` command do?",
            "The `clearbanned` command clears all banned IPs.",
            "#### Results: ```json   { rejected: \"reject reason\" } ```  Submission to our chain and PBaaS chains ```json   { blockhash: \"hex\", accepted: true, pbaas_submissions: { \"Quantum\":\"chainID_hex\", ... } } ```  Submission to only PBaaS chains ```json   { blockhash: \"hex\", accepted: \"pbaas\", pbaas_submissions: { \"Quantum\":\"chainID_hex\", ... } } ```#### Examples: ```bash > verus submitmergedblock \"mydata\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitmergedblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Network### `addnode \"node\" \"add|remove|onetry\"` Attempts add or remove a node from the addnode list. Or try a connection to a node once.#### Arguments: 1. \"node\"   (string, required) The node (see getpeerinfo for nodes) 2. \"command\" (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node onceExamples: ```bash > verus addnode \"192.168.0.6:8233\" \"onetry\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8233\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `clearbanned` Clear all banned IPs.Examples: ```bash > verus clearbanned > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `disconnectnode \"node\"` Immediately disconnects from the specified node.#### Arguments: 1. \"node\"   (string, required) The node (see getpeerinfo for nodes)Examples: ```bash > verus disconnectnode \"192.168.0.6:8233\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8233\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getaddednodeinfo dns ( \"node\" )` Returns information about the given added node, or all added nodes (note that onetry addnodes are not listed here) If dns is false, only a list of added nodes will be provided, otherwise connected information will also be available.#### Arguments: 1. dns    (boolean, required) If false, only a list of added nodes will be provided, otherwise connected information will also be available. 2. \"node\"  (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How do I disconnect from a specified node using the `disconnectnode` command?",
            "To disconnect from a specified node using the `disconnectnode` command, you need to specify the node. The syntax is:\n\n`disconnectnode \"node\"`\n\nWhere \"node\" is the node (see getpeerinfo for nodes)\n\nExample: `verus disconnectnode \"192.168.0.6:8233\"`",
            "#### Results: ```json   { rejected: \"reject reason\" } ```  Submission to our chain and PBaaS chains ```json   { blockhash: \"hex\", accepted: true, pbaas_submissions: { \"Quantum\":\"chainID_hex\", ... } } ```  Submission to only PBaaS chains ```json   { blockhash: \"hex\", accepted: \"pbaas\", pbaas_submissions: { \"Quantum\":\"chainID_hex\", ... } } ```#### Examples: ```bash > verus submitmergedblock \"mydata\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitmergedblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Network### `addnode \"node\" \"add|remove|onetry\"` Attempts add or remove a node from the addnode list. Or try a connection to a node once.#### Arguments: 1. \"node\"   (string, required) The node (see getpeerinfo for nodes) 2. \"command\" (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node onceExamples: ```bash > verus addnode \"192.168.0.6:8233\" \"onetry\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8233\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `clearbanned` Clear all banned IPs.Examples: ```bash > verus clearbanned > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `disconnectnode \"node\"` Immediately disconnects from the specified node.#### Arguments: 1. \"node\"   (string, required) The node (see getpeerinfo for nodes)Examples: ```bash > verus disconnectnode \"192.168.0.6:8233\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8233\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getaddednodeinfo dns ( \"node\" )` Returns information about the given added node, or all added nodes (note that onetry addnodes are not listed here) If dns is false, only a list of added nodes will be provided, otherwise connected information will also be available.#### Arguments: 1. dns    (boolean, required) If false, only a list of added nodes will be provided, otherwise connected information will also be available. 2. \"node\"  (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What does the `submitmergedblock` command do, and what are the possible results?",
            "The `submitmergedblock` command submits a merged block to our chain and PBaaS chains. There are three possible results:\n\n1. Rejected: `{ rejected: \"reject reason\" }`\n2. Submission to our chain and PBaaS chains: `{ blockhash: \"hex\", accepted: true, pbaas_submissions: { \"Quantum\":\"chainID_hex\",... } }`\n3. Submission to only PBaaS chains: `{ blockhash: \"hex\", accepted: \"pbaas\", pbaas_submissions: { \"Quantum\":\"chainID_hex\",... } }`",
            "#### Results: ```json   { rejected: \"reject reason\" } ```  Submission to our chain and PBaaS chains ```json   { blockhash: \"hex\", accepted: true, pbaas_submissions: { \"Quantum\":\"chainID_hex\", ... } } ```  Submission to only PBaaS chains ```json   { blockhash: \"hex\", accepted: \"pbaas\", pbaas_submissions: { \"Quantum\":\"chainID_hex\", ... } } ```#### Examples: ```bash > verus submitmergedblock \"mydata\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitmergedblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Network### `addnode \"node\" \"add|remove|onetry\"` Attempts add or remove a node from the addnode list. Or try a connection to a node once.#### Arguments: 1. \"node\"   (string, required) The node (see getpeerinfo for nodes) 2. \"command\" (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node onceExamples: ```bash > verus addnode \"192.168.0.6:8233\" \"onetry\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8233\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `clearbanned` Clear all banned IPs.Examples: ```bash > verus clearbanned > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `disconnectnode \"node\"` Immediately disconnects from the specified node.#### Arguments: 1. \"node\"   (string, required) The node (see getpeerinfo for nodes)Examples: ```bash > verus disconnectnode \"192.168.0.6:8233\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8233\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getaddednodeinfo dns ( \"node\" )` Returns information about the given added node, or all added nodes (note that onetry addnodes are not listed here) If dns is false, only a list of added nodes will be provided, otherwise connected information will also be available.#### Arguments: 1. dns    (boolean, required) If false, only a list of added nodes will be provided, otherwise connected information will also be available. 2. \"node\"  (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How do I add or remove a node from the addnode list using the `addnode` command?",
            "To add or remove a node from the addnode list using the `addnode` command, you need to specify the node and the command. The syntax is:\n\n`addnode \"node\" \"command\"`\n\nWhere:\n\n* \"node\" is the node (see getpeerinfo for nodes)\n* \"command\" is either 'add' to add a node to the list, 'emove' to remove a node from the list, or 'onetry' to try a connection to the node once.\n\nExample: `verus addnode \"192.168.0.6:8233\" \"onetry\"`",
            "#### Results: ```json   { rejected: \"reject reason\" } ```  Submission to our chain and PBaaS chains ```json   { blockhash: \"hex\", accepted: true, pbaas_submissions: { \"Quantum\":\"chainID_hex\", ... } } ```  Submission to only PBaaS chains ```json   { blockhash: \"hex\", accepted: \"pbaas\", pbaas_submissions: { \"Quantum\":\"chainID_hex\", ... } } ```#### Examples: ```bash > verus submitmergedblock \"mydata\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitmergedblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Network### `addnode \"node\" \"add|remove|onetry\"` Attempts add or remove a node from the addnode list. Or try a connection to a node once.#### Arguments: 1. \"node\"   (string, required) The node (see getpeerinfo for nodes) 2. \"command\" (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node onceExamples: ```bash > verus addnode \"192.168.0.6:8233\" \"onetry\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8233\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `clearbanned` Clear all banned IPs.Examples: ```bash > verus clearbanned > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `disconnectnode \"node\"` Immediately disconnects from the specified node.#### Arguments: 1. \"node\"   (string, required) The node (see getpeerinfo for nodes)Examples: ```bash > verus disconnectnode \"192.168.0.6:8233\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8233\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getaddednodeinfo dns ( \"node\" )` Returns information about the given added node, or all added nodes (note that onetry addnodes are not listed here) If dns is false, only a list of added nodes will be provided, otherwise connected information will also be available.#### Arguments: 1. dns    (boolean, required) If false, only a list of added nodes will be provided, otherwise connected information will also be available. 2. \"node\"  (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "f4a79251-b275-441d-87c6-2b76572a5289"
]