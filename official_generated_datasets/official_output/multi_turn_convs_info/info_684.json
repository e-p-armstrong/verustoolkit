[
    [
        [
            "What are the arguments for the `getblock` command in Verus?",
            "The `getblock` command in Verus takes two arguments:\n\n1. `\"hash|height\"`: a string representing the block hash or height, which is required.\n2. `verbosity`: an optional numeric argument with a default value of 1. It can be set to 0 for hex-encoded data, 1 for a JSON object, or 2 for a JSON object with transaction data.",
            "#### Arguments: 1. \"hash|height\"     (string, required) The block hash or height 2. verbosity       (numeric, optional, default=1) 0 for hex encoded data, 1 for a json object, and 2 for json object with transaction dataResult (for verbosity = 0): \"data\"       (string) A string that is serialized, hex-encoded data for the block.#### Results (for verbosity = 1): ```json {  \"hash\" : \"hash\",    (string) the block hash (same as provided hash)  \"confirmations\" : n,  (numeric) The number of confirmations, or -1 if the block is not on the main chain  \"size\" : n,      (numeric) The block size  \"height\" : n,     (numeric) The block height or index (same as provided height)  \"version\" : n,     (numeric) The block version  \"merkleroot\" : \"xxxx\", (string) The merkle root  \"finalsaplingroot\" : \"xxxx\", (string) The root of the Sapling commitment tree after applying this block  \"tx\" : [        (array of string) The transaction ids   \"transactionid\"   (string) The transaction id   ,...  ],  \"time\" : ttt,     (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)  \"nonce\" : n,      (numeric) The nonce  \"bits\" : \"1d00ffff\",  (string) The bits  \"difficulty\" : x.xxx, (numeric) The difficulty  \"previousblockhash\" : \"hash\", (string) The hash of the previous block  \"nextblockhash\" : \"hash\"    (string) The hash of the next block } ``` #### Result (for verbosity = 2): ```json {  ...,           Same output as verbosity = 1.  \"tx\" : [        (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result.     ,...  ],  ,...           Same output as verbosity = 1. } ``` Examples: ```bash > verus getblock \"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ > verus getblock 12800 > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [12800] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getblockchaininfo` Returns an object containing various state info regarding block chain processing.Note that when the chain tip is at the last block before a network upgrade activation, consensus.chaintip != consensus.nextblock.#### Result: ```json {  \"chain\": \"xxxx\",      (string) current network name as defined in BIP70 (main, test, regtest)  \"name\": \"xxxx\",       (string) current net",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the result of the `getblock` command when `verbosity` is set to 0?",
            "When `verbosity` is set to 0, the result of the `getblock` command is a string containing serialized, hex-encoded data for the block.",
            "#### Arguments: 1. \"hash|height\"     (string, required) The block hash or height 2. verbosity       (numeric, optional, default=1) 0 for hex encoded data, 1 for a json object, and 2 for json object with transaction dataResult (for verbosity = 0): \"data\"       (string) A string that is serialized, hex-encoded data for the block.#### Results (for verbosity = 1): ```json {  \"hash\" : \"hash\",    (string) the block hash (same as provided hash)  \"confirmations\" : n,  (numeric) The number of confirmations, or -1 if the block is not on the main chain  \"size\" : n,      (numeric) The block size  \"height\" : n,     (numeric) The block height or index (same as provided height)  \"version\" : n,     (numeric) The block version  \"merkleroot\" : \"xxxx\", (string) The merkle root  \"finalsaplingroot\" : \"xxxx\", (string) The root of the Sapling commitment tree after applying this block  \"tx\" : [        (array of string) The transaction ids   \"transactionid\"   (string) The transaction id   ,...  ],  \"time\" : ttt,     (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)  \"nonce\" : n,      (numeric) The nonce  \"bits\" : \"1d00ffff\",  (string) The bits  \"difficulty\" : x.xxx, (numeric) The difficulty  \"previousblockhash\" : \"hash\", (string) The hash of the previous block  \"nextblockhash\" : \"hash\"    (string) The hash of the next block } ``` #### Result (for verbosity = 2): ```json {  ...,           Same output as verbosity = 1.  \"tx\" : [        (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result.     ,...  ],  ,...           Same output as verbosity = 1. } ``` Examples: ```bash > verus getblock \"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ > verus getblock 12800 > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [12800] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getblockchaininfo` Returns an object containing various state info regarding block chain processing.Note that when the chain tip is at the last block before a network upgrade activation, consensus.chaintip != consensus.nextblock.#### Result: ```json {  \"chain\": \"xxxx\",      (string) current network name as defined in BIP70 (main, test, regtest)  \"name\": \"xxxx\",       (string) current net",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `getblockchaininfo` command in Verus?",
            "The `getblockchaininfo` command in Verus returns an object containing various state information regarding block chain processing.",
            "#### Arguments: 1. \"hash|height\"     (string, required) The block hash or height 2. verbosity       (numeric, optional, default=1) 0 for hex encoded data, 1 for a json object, and 2 for json object with transaction dataResult (for verbosity = 0): \"data\"       (string) A string that is serialized, hex-encoded data for the block.#### Results (for verbosity = 1): ```json {  \"hash\" : \"hash\",    (string) the block hash (same as provided hash)  \"confirmations\" : n,  (numeric) The number of confirmations, or -1 if the block is not on the main chain  \"size\" : n,      (numeric) The block size  \"height\" : n,     (numeric) The block height or index (same as provided height)  \"version\" : n,     (numeric) The block version  \"merkleroot\" : \"xxxx\", (string) The merkle root  \"finalsaplingroot\" : \"xxxx\", (string) The root of the Sapling commitment tree after applying this block  \"tx\" : [        (array of string) The transaction ids   \"transactionid\"   (string) The transaction id   ,...  ],  \"time\" : ttt,     (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)  \"nonce\" : n,      (numeric) The nonce  \"bits\" : \"1d00ffff\",  (string) The bits  \"difficulty\" : x.xxx, (numeric) The difficulty  \"previousblockhash\" : \"hash\", (string) The hash of the previous block  \"nextblockhash\" : \"hash\"    (string) The hash of the next block } ``` #### Result (for verbosity = 2): ```json {  ...,           Same output as verbosity = 1.  \"tx\" : [        (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result.     ,...  ],  ,...           Same output as verbosity = 1. } ``` Examples: ```bash > verus getblock \"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ > verus getblock 12800 > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [12800] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getblockchaininfo` Returns an object containing various state info regarding block chain processing.Note that when the chain tip is at the last block before a network upgrade activation, consensus.chaintip != consensus.nextblock.#### Result: ```json {  \"chain\": \"xxxx\",      (string) current network name as defined in BIP70 (main, test, regtest)  \"name\": \"xxxx\",       (string) current net",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What information does the `getblock` command return when `verbosity` is set to 1?",
            "When `verbosity` is set to 1, the `getblock` command returns a JSON object containing various information about the block, including:\n\n* The block hash\n* The number of confirmations\n* The block size\n* The block height or index\n* The block version\n* The merkle root\n* The root of the Sapling commitment tree after applying this block\n* An array of transaction IDs\n* The block time in seconds since epoch (Jan 1 1970 GMT)\n* The nonce\n* The bits\n* The difficulty\n* The hash of the previous block\n* The hash of the next block",
            "#### Arguments: 1. \"hash|height\"     (string, required) The block hash or height 2. verbosity       (numeric, optional, default=1) 0 for hex encoded data, 1 for a json object, and 2 for json object with transaction dataResult (for verbosity = 0): \"data\"       (string) A string that is serialized, hex-encoded data for the block.#### Results (for verbosity = 1): ```json {  \"hash\" : \"hash\",    (string) the block hash (same as provided hash)  \"confirmations\" : n,  (numeric) The number of confirmations, or -1 if the block is not on the main chain  \"size\" : n,      (numeric) The block size  \"height\" : n,     (numeric) The block height or index (same as provided height)  \"version\" : n,     (numeric) The block version  \"merkleroot\" : \"xxxx\", (string) The merkle root  \"finalsaplingroot\" : \"xxxx\", (string) The root of the Sapling commitment tree after applying this block  \"tx\" : [        (array of string) The transaction ids   \"transactionid\"   (string) The transaction id   ,...  ],  \"time\" : ttt,     (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)  \"nonce\" : n,      (numeric) The nonce  \"bits\" : \"1d00ffff\",  (string) The bits  \"difficulty\" : x.xxx, (numeric) The difficulty  \"previousblockhash\" : \"hash\", (string) The hash of the previous block  \"nextblockhash\" : \"hash\"    (string) The hash of the next block } ``` #### Result (for verbosity = 2): ```json {  ...,           Same output as verbosity = 1.  \"tx\" : [        (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result.     ,...  ],  ,...           Same output as verbosity = 1. } ``` Examples: ```bash > verus getblock \"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ > verus getblock 12800 > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [12800] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getblockchaininfo` Returns an object containing various state info regarding block chain processing.Note that when the chain tip is at the last block before a network upgrade activation, consensus.chaintip != consensus.nextblock.#### Result: ```json {  \"chain\": \"xxxx\",      (string) current network name as defined in BIP70 (main, test, regtest)  \"name\": \"xxxx\",       (string) current net",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the difference in the result of the `getblock` command when `verbosity` is set to 2 compared to when it is set to 1?",
            "When `verbosity` is set to 2, the `getblock` command returns a JSON object with the same information as when `verbosity` is set to 1, but the `tx` field is an array of objects containing the transactions in the format of the `getrawtransaction` RPC, instead of just an array of transaction IDs.",
            "#### Arguments: 1. \"hash|height\"     (string, required) The block hash or height 2. verbosity       (numeric, optional, default=1) 0 for hex encoded data, 1 for a json object, and 2 for json object with transaction dataResult (for verbosity = 0): \"data\"       (string) A string that is serialized, hex-encoded data for the block.#### Results (for verbosity = 1): ```json {  \"hash\" : \"hash\",    (string) the block hash (same as provided hash)  \"confirmations\" : n,  (numeric) The number of confirmations, or -1 if the block is not on the main chain  \"size\" : n,      (numeric) The block size  \"height\" : n,     (numeric) The block height or index (same as provided height)  \"version\" : n,     (numeric) The block version  \"merkleroot\" : \"xxxx\", (string) The merkle root  \"finalsaplingroot\" : \"xxxx\", (string) The root of the Sapling commitment tree after applying this block  \"tx\" : [        (array of string) The transaction ids   \"transactionid\"   (string) The transaction id   ,...  ],  \"time\" : ttt,     (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)  \"nonce\" : n,      (numeric) The nonce  \"bits\" : \"1d00ffff\",  (string) The bits  \"difficulty\" : x.xxx, (numeric) The difficulty  \"previousblockhash\" : \"hash\", (string) The hash of the previous block  \"nextblockhash\" : \"hash\"    (string) The hash of the next block } ``` #### Result (for verbosity = 2): ```json {  ...,           Same output as verbosity = 1.  \"tx\" : [        (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result.     ,...  ],  ,...           Same output as verbosity = 1. } ``` Examples: ```bash > verus getblock \"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ > verus getblock 12800 > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [12800] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getblockchaininfo` Returns an object containing various state info regarding block chain processing.Note that when the chain tip is at the last block before a network upgrade activation, consensus.chaintip != consensus.nextblock.#### Result: ```json {  \"chain\": \"xxxx\",      (string) current network name as defined in BIP70 (main, test, regtest)  \"name\": \"xxxx\",       (string) current net",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "f8913662-5b56-4bfe-963c-0ede568b7047"
]