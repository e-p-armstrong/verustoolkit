[
    "What information does the `z_validateaddress` command return about a z address?",
    "The `z_validateaddress` command returns a JSON object with the following information about a z address:\n\n* `isvalid`: a boolean indicating whether the address is valid or not\n* `address`: the z address being validated\n* `type`: a string indicating the type of z address (sprout or sapling)\n* `ismine`: a boolean indicating whether the address is yours or not\n* `payingkey`: the hex value of the paying key (for sprout addresses)\n* `transmissionkey`: the hex value of the transmission key (for sprout addresses)\n* `diversifier`: the hex value of the diversifier (for sapling addresses)\n* `diversifiedtransmissionkey`: the hex value of the diversified transmission key (for sapling addresses)",
    "#### Arguments: 1. \"verusaddress\"   (string, required) The Komodo address to validate#### Result: ```json {  \"isvalid\" : true|false,     (boolean) If the address is valid or not. If not, this is the only property returned.  \"address\" : \"verusaddress\",  (string) The Verus address validated  \"scriptPubKey\" : \"hex\",    (string) The hex encoded scriptPubKey generated by the address  \"ismine\" : true|false,     (boolean) If the address is yours or not  \"isscript\" : true|false,    (boolean) If the key is a script  \"pubkey\" : \"publickeyhex\",  (string) The hex value of the raw public key  \"iscompressed\" : true|false,  (boolean) If the address is compressed  \"account\" : \"account\"     (string) DEPRECATED. The account associated with the address, \"\" is the default account } ``` Examples: ```bash > verus validateaddress \"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `z_validateaddress \"zaddr\"` Return information about the given z address.#### Arguments: 1. \"zaddr\"   (string, required) The z address to validate#### Result: ``` {  \"isvalid\" : true|false,   (boolean) If the address is valid or not. If not, this is the only property returned.  \"address\" : \"zaddr\",     (string) The z address validated  \"type\" : \"xxxx\",       (string) \"sprout\" or \"sapling\"  \"ismine\" : true|false,    (boolean) If the address is yours or not  \"payingkey\" : \"hex\",     (string) [sprout] The hex value of the paying key, a_pk  \"transmissionkey\" : \"hex\",  (string) [sprout] The hex value of the transmission key, pk_enc  \"diversifier\" : \"hex\",    (string) [sapling] The hex value of the diversifier, d  \"diversifiedtransmissionkey\" : \"hex\", (string) [sapling] The hex value of pk_d } ``` Examples: ```bash > verus z_validateaddress \"zcWsmqT4X2V4jgxbgiCzyrAfRT1vi1F4sn7M5Pkh66izzw8Uk7LBGAH3DtcSMJeUb2pi3W4SQF8LMKkU2cUuVP68yAGcomL\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_validateaddress\", \"params\": [\"zcWsmqT4X2V4jgxbgiCzyrAfRT1vi1F4sn7M5Pkh66izzw8Uk7LBGAH3DtcSMJeUb2pi3W4SQF8LMKkU2cUuVP68yAGcomL\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ``` ## VDXF ### `getvdxfid \"vdxfuri\" '{\"vdxfkey\":\"i-address or vdxfkey\", \"uint256\":\"hexstr\", \"indexnum\":0}'` Returns the VDXF key of the URI string. For example \"vrsc::system.currency.export\"",
    "./raw_txt_input/clifaq-02_verus_commands.md"
]