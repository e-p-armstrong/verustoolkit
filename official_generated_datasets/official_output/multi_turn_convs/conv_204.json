[
    "## Conversation that answers the provided questions:\n**AI Assistant:**\nHello! I'm here to help with any questions you might have about Verus. Do you have something on your mind?\n\n**User:**\nYeah, I've been wondering about creating a private blockchain using Verus. What is a PBaaS blockchain, and how can I define one using Verus?\n\n**AI Assistant:**\nA PBaaS (Public Blockchain as a Service) blockchain is a private blockchain that can be created and managed using Verus. To define a PBaaS blockchain, you can use the `definecurrency` command with a JSON object that specifies the properties of the blockchain. The JSON object should include the following properties:\n\n* `name`: The name of the PBaaS chain.\n* `options`: An integer that specifies the options for the chain.\n* `currencies`: An array of currencies that can be converted to and from the chain's native currency.\n* `conversions`: An array of conversion ratios between the chain's native currency and each currency on the chain.\n* `eras`: An array of objects that define the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle.\n* `notaries`: An array of VerusIDs that will serve as notaries on the chain.\n* `minnotariesconfirm`: An integer that specifies the minimum number of notaries needed to confirm a block.\n* `nodes`: An array of objects that describe the network addresses of the nodes on the chain, as well as their IDs.\n* `gatewayconvertername`: The name of the bridge that can be used to move funds on and off the chain.\n* `gatewayconverterissuance`: The initial supply of the bridge's native token.\n\nDo you have any more questions about defining a PBaaS blockchain?\n\n**User:**\nThat's really helpful, thanks! I was also wondering, what are some limitations to be aware of when creating a multi-currency PBaaS chain?\n\n**AI Assistant:**\nThere are two limitations to be aware of when creating a multi-currency PBaaS chain:\n\n1. You cannot create a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. This is because using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration.\n2. (Only applicable to the GUI) If a currency is already supported in the Verus Desktop, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for the testnet release and will not be a limitation before mainnet availability.\n\nKeep these limitations in mind when creating your multi-currency PBaaS chain. If you have any more questions or need further clarification, feel free to ask!",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What is a PBaaS blockchain, and how can I define one using Verus?",
            "A PBaaS (Public Blockchain as a Service) blockchain is a private blockchain that can be created and managed using Verus. To define a PBaaS blockchain, you can use the `definecurrency` command with a JSON object that specifies the properties of the blockchain. The JSON object should include the following properties:\n\n* `name`: The name of the PBaaS chain.\n* `options`: An integer that specifies the options for the chain.\n* `currencies`: An array of currencies that can be converted to and from the chain's native currency.\n* `conversions`: An array of conversion ratios between the chain's native currency and each currency on the chain.\n* `eras`: An array of objects that define the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle.\n* `notaries`: An array of VerusIDs that will serve as notaries on the chain.\n* `minnotariesconfirm`: An integer that specifies the minimum number of notaries needed to confirm a block.\n* `nodes`: An array of objects that describe the network addresses of the nodes on the chain, as well as their IDs.\n* `gatewayconvertername`: The name of the bridge that can be used to move funds on and off the chain.\n* `gatewayconverterissuance`: The initial supply of the bridge's native token.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are some limitations to be aware of when creating a multi-currency PBaaS chain?",
            "There are two limitations to be aware of when creating a multi-currency PBaaS chain:\n\n1. You cannot create a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. This is because using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration.\n2. (Only applicable to the GUI) If a currency is already supported in the Verus Desktop, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for the testnet release and will not be a limitation before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ]
    ]
]