[
    "## Conversation that answers the provided questions:\n**AI Assistant:**\nHello! I'm here to help with any questions you might have about Verus. What would you like to know?\n\n**User:**\nI'm trying to run Verus, but I'm not sure about some of the options. Can you help me out? What's the purpose of the `-onlynet` option when running Verus?\n\n**AI Assistant:**\nThe `-onlynet` option specifies that Verus should only connect to nodes in a specific network, which can be either ipv4, ipv6, or onion. This option allows you to limit the type of connections Verus makes. Do you have any more questions about running Verus?\n\n**User:**\nYeah, what about the `-permitbaremultisig` option? What does it do, and what's the default value?\n\n**AI Assistant:**\nThe `-permitbaremultisig` option allows Verus to relay non-P2SH multisig transactions. The default value is 1, which means that relaying non-P2SH multisig transactions is enabled by default. This option controls how Verus handles certain types of multisig transactions. Do you have any more questions about Verus options?\n\n**User:**\nWhat about the `-peerbloomfilters` option? What does it do, and what's the default value?\n\n**AI Assistant:**\nThe `-peerbloomfilters` option enables support for filtering of blocks and transactions with Bloom filters. The default value is 1, which means that Bloom filter support is enabled by default. This option controls whether Verus uses Bloom filters to optimize its connections with other nodes. Do you have any more questions about Verus options?\n\n**User:**\nWhat does the `-port` option do, and what are the default values?\n\n**AI Assistant:**\nThe `-port` option specifies the port number that Verus listens on for connections. The default values are 7770 for the mainnet and 17770 for the testnet. This option allows you to customize the port number used by Verus. Do you have any more questions about running Verus?\n\n**User:**\nWhat's the purpose of the `-proxy` option?\n\n**AI Assistant:**\nThe `-proxy` option specifies a SOCKS5 proxy that Verus should connect through. This option allows you to use a proxy server to connect to other nodes. Do you have any more questions about Verus options?\n\n**User:**\nWhat about the `-proxyrandomize` option? What does it do, and what's the default value?\n\n**AI Assistant:**\nThe `-proxyrandomize` option enables randomization of credentials for every proxy connection, which allows for Tor stream isolation. The default value is 1, which means that credential randomization is enabled by default. This option controls how Verus uses proxies to connect to other nodes. Do you have any more questions about Verus options?\n\n**User:**\nWhat's the purpose of the `-maxconnections` option, and what's the default value?\n\n**AI Assistant:**\nThe `-maxconnections` option specifies the maximum number of connections to peers that Verus will maintain. The default value is 384. This option controls how many connections Verus makes to other nodes. Do you have any more questions about running Verus?\n\n**User:**\nWhat does the `-onion` option do, and how does it differ from the `-proxy` option?\n\n**AI Assistant:**\nThe `-onion` option allows Verus to use a separate SOCKS5 proxy to reach peers via Tor hidden services. This is different from the `-proxy` option, which connects through a SOCKS5 proxy, but does not necessarily use Tor hidden services. The `-onion` option is specific to using Tor hidden services, while the `-proxy` option is more general. Do you have any more questions about Verus options?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What is the purpose of the `-onlynet` option when running Verus?",
            "The `-onlynet` option specifies that Verus should only connect to nodes in a specific network, which can be either ipv4, ipv6, or onion.",
            "`-maxconnections=<n>`    Maintain at most <n> connections to peers (default: 384)`-maxreceivebuffer=<n>`    Maximum per-connection receive buffer, <n> * 1000 bytes (default: 5000)`-maxsendbuffer=<n>`    Maximum per-connection send buffer, <n> * 1000 bytes (default: 1000)`-onion=<ip:port>`    Use separate SOCKS5 proxy to reach peers via Tor hidden services    (default: -proxy)`-onlynet=<net>`    Only connect to nodes in network <net> (ipv4, ipv6 or onion)`-permitbaremultisig`    Relay non-P2SH multisig (default: 1)`-peerbloomfilters`    Support filtering of blocks and transaction with Bloom filters (default:    1)`-port=<port>`    Listen for connections on <port> (default: 7770 or testnet: 17770)`-proxy=<ip:port>`    Connect through SOCKS5 proxy`-proxyrandomize`    Randomize credentials for every proxy connection. This enables Tor    stream isolation (default: 1)`-seednode=<ip>`    Connect to a node to retrieve peer addresses, and disconnect`-timeout=<n>`    Specify connection timeout in milliseconds (minimum: 1, default: 5000)`-torcontrol=<ip>:<port>`    Tor control port to use if onion listening enabled (default:    127.0.0.1:9051)`-torpassword=<pass>`    Tor control port password (default: empty)`-tlsdisable=<0 or 1>`    Disable TLS connections. (default: 0)`-tlsenforcement=<0 or 1>`    Only connect to TLS compatible peers. (default: 0)`-tlsfallbacknontls=<0 or 1>`    If a TLS connection fails, the next connection attempt of the same peer    (based on IP address) takes place without TLS (default: 1)`-tlsvalidate=<0 or 1>`    Connect to peers only with valid certificates (default: 0)`-tlskeypath=<path>`    Full path to a private key`-tlskeypwd=<password>`    Password for a private key encryption (default: not set, i.e. private    key will be stored unencrypted)`-tlscertpath=<path>`    Full path to a certificate`-tlstrustdir=<path>`    Full path to a trusted certificates directory`-uacomment=<string>`    Set a User Agent to your daemon. (default: disabled/none)    Shows as appended text in the `\"subver\"` string on connected nodes    Using this option has implications on your anonymity!`-whitebind=<addr>`    Bind to given address and whitelist peers connecting to it. Use    [host]:port notation for IPv6`-whitelist=<netmask>`    Whitelist peers connecting from the given netmask or IP address. Can be    specified multiple times. Whitelisted peers cannot be DoS banned and    their transactions are always relayed, even if they are already in the    mempool, useful e.g. for a gateway## Wallet options:",
            "./raw_txt_input/clifaq-01_verusd_options.md"
        ],
        [
            "What does the `-permitbaremultisig` option do when running Verus, and what is the default value?",
            "The `-permitbaremultisig` option allows Verus to relay non-P2SH multisig transactions. The default value is 1, which means that relaying non-P2SH multisig transactions is enabled by default.",
            "`-maxconnections=<n>`    Maintain at most <n> connections to peers (default: 384)`-maxreceivebuffer=<n>`    Maximum per-connection receive buffer, <n> * 1000 bytes (default: 5000)`-maxsendbuffer=<n>`    Maximum per-connection send buffer, <n> * 1000 bytes (default: 1000)`-onion=<ip:port>`    Use separate SOCKS5 proxy to reach peers via Tor hidden services    (default: -proxy)`-onlynet=<net>`    Only connect to nodes in network <net> (ipv4, ipv6 or onion)`-permitbaremultisig`    Relay non-P2SH multisig (default: 1)`-peerbloomfilters`    Support filtering of blocks and transaction with Bloom filters (default:    1)`-port=<port>`    Listen for connections on <port> (default: 7770 or testnet: 17770)`-proxy=<ip:port>`    Connect through SOCKS5 proxy`-proxyrandomize`    Randomize credentials for every proxy connection. This enables Tor    stream isolation (default: 1)`-seednode=<ip>`    Connect to a node to retrieve peer addresses, and disconnect`-timeout=<n>`    Specify connection timeout in milliseconds (minimum: 1, default: 5000)`-torcontrol=<ip>:<port>`    Tor control port to use if onion listening enabled (default:    127.0.0.1:9051)`-torpassword=<pass>`    Tor control port password (default: empty)`-tlsdisable=<0 or 1>`    Disable TLS connections. (default: 0)`-tlsenforcement=<0 or 1>`    Only connect to TLS compatible peers. (default: 0)`-tlsfallbacknontls=<0 or 1>`    If a TLS connection fails, the next connection attempt of the same peer    (based on IP address) takes place without TLS (default: 1)`-tlsvalidate=<0 or 1>`    Connect to peers only with valid certificates (default: 0)`-tlskeypath=<path>`    Full path to a private key`-tlskeypwd=<password>`    Password for a private key encryption (default: not set, i.e. private    key will be stored unencrypted)`-tlscertpath=<path>`    Full path to a certificate`-tlstrustdir=<path>`    Full path to a trusted certificates directory`-uacomment=<string>`    Set a User Agent to your daemon. (default: disabled/none)    Shows as appended text in the `\"subver\"` string on connected nodes    Using this option has implications on your anonymity!`-whitebind=<addr>`    Bind to given address and whitelist peers connecting to it. Use    [host]:port notation for IPv6`-whitelist=<netmask>`    Whitelist peers connecting from the given netmask or IP address. Can be    specified multiple times. Whitelisted peers cannot be DoS banned and    their transactions are always relayed, even if they are already in the    mempool, useful e.g. for a gateway## Wallet options:",
            "./raw_txt_input/clifaq-01_verusd_options.md"
        ],
        [
            "What is the purpose of the `-peerbloomfilters` option when running Verus, and what is the default value?",
            "The `-peerbloomfilters` option enables support for filtering of blocks and transactions with Bloom filters. The default value is 1, which means that Bloom filter support is enabled by default.",
            "`-maxconnections=<n>`    Maintain at most <n> connections to peers (default: 384)`-maxreceivebuffer=<n>`    Maximum per-connection receive buffer, <n> * 1000 bytes (default: 5000)`-maxsendbuffer=<n>`    Maximum per-connection send buffer, <n> * 1000 bytes (default: 1000)`-onion=<ip:port>`    Use separate SOCKS5 proxy to reach peers via Tor hidden services    (default: -proxy)`-onlynet=<net>`    Only connect to nodes in network <net> (ipv4, ipv6 or onion)`-permitbaremultisig`    Relay non-P2SH multisig (default: 1)`-peerbloomfilters`    Support filtering of blocks and transaction with Bloom filters (default:    1)`-port=<port>`    Listen for connections on <port> (default: 7770 or testnet: 17770)`-proxy=<ip:port>`    Connect through SOCKS5 proxy`-proxyrandomize`    Randomize credentials for every proxy connection. This enables Tor    stream isolation (default: 1)`-seednode=<ip>`    Connect to a node to retrieve peer addresses, and disconnect`-timeout=<n>`    Specify connection timeout in milliseconds (minimum: 1, default: 5000)`-torcontrol=<ip>:<port>`    Tor control port to use if onion listening enabled (default:    127.0.0.1:9051)`-torpassword=<pass>`    Tor control port password (default: empty)`-tlsdisable=<0 or 1>`    Disable TLS connections. (default: 0)`-tlsenforcement=<0 or 1>`    Only connect to TLS compatible peers. (default: 0)`-tlsfallbacknontls=<0 or 1>`    If a TLS connection fails, the next connection attempt of the same peer    (based on IP address) takes place without TLS (default: 1)`-tlsvalidate=<0 or 1>`    Connect to peers only with valid certificates (default: 0)`-tlskeypath=<path>`    Full path to a private key`-tlskeypwd=<password>`    Password for a private key encryption (default: not set, i.e. private    key will be stored unencrypted)`-tlscertpath=<path>`    Full path to a certificate`-tlstrustdir=<path>`    Full path to a trusted certificates directory`-uacomment=<string>`    Set a User Agent to your daemon. (default: disabled/none)    Shows as appended text in the `\"subver\"` string on connected nodes    Using this option has implications on your anonymity!`-whitebind=<addr>`    Bind to given address and whitelist peers connecting to it. Use    [host]:port notation for IPv6`-whitelist=<netmask>`    Whitelist peers connecting from the given netmask or IP address. Can be    specified multiple times. Whitelisted peers cannot be DoS banned and    their transactions are always relayed, even if they are already in the    mempool, useful e.g. for a gateway## Wallet options:",
            "./raw_txt_input/clifaq-01_verusd_options.md"
        ],
        [
            "What does the `-port` option do when running Verus, and what are the default values?",
            "The `-port` option specifies the port number that Verus listens on for connections. The default values are 7770 for the mainnet and 17770 for the testnet.",
            "`-maxconnections=<n>`    Maintain at most <n> connections to peers (default: 384)`-maxreceivebuffer=<n>`    Maximum per-connection receive buffer, <n> * 1000 bytes (default: 5000)`-maxsendbuffer=<n>`    Maximum per-connection send buffer, <n> * 1000 bytes (default: 1000)`-onion=<ip:port>`    Use separate SOCKS5 proxy to reach peers via Tor hidden services    (default: -proxy)`-onlynet=<net>`    Only connect to nodes in network <net> (ipv4, ipv6 or onion)`-permitbaremultisig`    Relay non-P2SH multisig (default: 1)`-peerbloomfilters`    Support filtering of blocks and transaction with Bloom filters (default:    1)`-port=<port>`    Listen for connections on <port> (default: 7770 or testnet: 17770)`-proxy=<ip:port>`    Connect through SOCKS5 proxy`-proxyrandomize`    Randomize credentials for every proxy connection. This enables Tor    stream isolation (default: 1)`-seednode=<ip>`    Connect to a node to retrieve peer addresses, and disconnect`-timeout=<n>`    Specify connection timeout in milliseconds (minimum: 1, default: 5000)`-torcontrol=<ip>:<port>`    Tor control port to use if onion listening enabled (default:    127.0.0.1:9051)`-torpassword=<pass>`    Tor control port password (default: empty)`-tlsdisable=<0 or 1>`    Disable TLS connections. (default: 0)`-tlsenforcement=<0 or 1>`    Only connect to TLS compatible peers. (default: 0)`-tlsfallbacknontls=<0 or 1>`    If a TLS connection fails, the next connection attempt of the same peer    (based on IP address) takes place without TLS (default: 1)`-tlsvalidate=<0 or 1>`    Connect to peers only with valid certificates (default: 0)`-tlskeypath=<path>`    Full path to a private key`-tlskeypwd=<password>`    Password for a private key encryption (default: not set, i.e. private    key will be stored unencrypted)`-tlscertpath=<path>`    Full path to a certificate`-tlstrustdir=<path>`    Full path to a trusted certificates directory`-uacomment=<string>`    Set a User Agent to your daemon. (default: disabled/none)    Shows as appended text in the `\"subver\"` string on connected nodes    Using this option has implications on your anonymity!`-whitebind=<addr>`    Bind to given address and whitelist peers connecting to it. Use    [host]:port notation for IPv6`-whitelist=<netmask>`    Whitelist peers connecting from the given netmask or IP address. Can be    specified multiple times. Whitelisted peers cannot be DoS banned and    their transactions are always relayed, even if they are already in the    mempool, useful e.g. for a gateway## Wallet options:",
            "./raw_txt_input/clifaq-01_verusd_options.md"
        ],
        [
            "What is the purpose of the `-proxy` option when running Verus?",
            "The `-proxy` option specifies a SOCKS5 proxy that Verus should connect through.",
            "`-maxconnections=<n>`    Maintain at most <n> connections to peers (default: 384)`-maxreceivebuffer=<n>`    Maximum per-connection receive buffer, <n> * 1000 bytes (default: 5000)`-maxsendbuffer=<n>`    Maximum per-connection send buffer, <n> * 1000 bytes (default: 1000)`-onion=<ip:port>`    Use separate SOCKS5 proxy to reach peers via Tor hidden services    (default: -proxy)`-onlynet=<net>`    Only connect to nodes in network <net> (ipv4, ipv6 or onion)`-permitbaremultisig`    Relay non-P2SH multisig (default: 1)`-peerbloomfilters`    Support filtering of blocks and transaction with Bloom filters (default:    1)`-port=<port>`    Listen for connections on <port> (default: 7770 or testnet: 17770)`-proxy=<ip:port>`    Connect through SOCKS5 proxy`-proxyrandomize`    Randomize credentials for every proxy connection. This enables Tor    stream isolation (default: 1)`-seednode=<ip>`    Connect to a node to retrieve peer addresses, and disconnect`-timeout=<n>`    Specify connection timeout in milliseconds (minimum: 1, default: 5000)`-torcontrol=<ip>:<port>`    Tor control port to use if onion listening enabled (default:    127.0.0.1:9051)`-torpassword=<pass>`    Tor control port password (default: empty)`-tlsdisable=<0 or 1>`    Disable TLS connections. (default: 0)`-tlsenforcement=<0 or 1>`    Only connect to TLS compatible peers. (default: 0)`-tlsfallbacknontls=<0 or 1>`    If a TLS connection fails, the next connection attempt of the same peer    (based on IP address) takes place without TLS (default: 1)`-tlsvalidate=<0 or 1>`    Connect to peers only with valid certificates (default: 0)`-tlskeypath=<path>`    Full path to a private key`-tlskeypwd=<password>`    Password for a private key encryption (default: not set, i.e. private    key will be stored unencrypted)`-tlscertpath=<path>`    Full path to a certificate`-tlstrustdir=<path>`    Full path to a trusted certificates directory`-uacomment=<string>`    Set a User Agent to your daemon. (default: disabled/none)    Shows as appended text in the `\"subver\"` string on connected nodes    Using this option has implications on your anonymity!`-whitebind=<addr>`    Bind to given address and whitelist peers connecting to it. Use    [host]:port notation for IPv6`-whitelist=<netmask>`    Whitelist peers connecting from the given netmask or IP address. Can be    specified multiple times. Whitelisted peers cannot be DoS banned and    their transactions are always relayed, even if they are already in the    mempool, useful e.g. for a gateway## Wallet options:",
            "./raw_txt_input/clifaq-01_verusd_options.md"
        ],
        [
            "What does the `-proxyrandomize` option do when running Verus, and what is the default value?",
            "The `-proxyrandomize` option enables randomization of credentials for every proxy connection, which allows for Tor stream isolation. The default value is 1, which means that credential randomization is enabled by default.",
            "`-maxconnections=<n>`    Maintain at most <n> connections to peers (default: 384)`-maxreceivebuffer=<n>`    Maximum per-connection receive buffer, <n> * 1000 bytes (default: 5000)`-maxsendbuffer=<n>`    Maximum per-connection send buffer, <n> * 1000 bytes (default: 1000)`-onion=<ip:port>`    Use separate SOCKS5 proxy to reach peers via Tor hidden services    (default: -proxy)`-onlynet=<net>`    Only connect to nodes in network <net> (ipv4, ipv6 or onion)`-permitbaremultisig`    Relay non-P2SH multisig (default: 1)`-peerbloomfilters`    Support filtering of blocks and transaction with Bloom filters (default:    1)`-port=<port>`    Listen for connections on <port> (default: 7770 or testnet: 17770)`-proxy=<ip:port>`    Connect through SOCKS5 proxy`-proxyrandomize`    Randomize credentials for every proxy connection. This enables Tor    stream isolation (default: 1)`-seednode=<ip>`    Connect to a node to retrieve peer addresses, and disconnect`-timeout=<n>`    Specify connection timeout in milliseconds (minimum: 1, default: 5000)`-torcontrol=<ip>:<port>`    Tor control port to use if onion listening enabled (default:    127.0.0.1:9051)`-torpassword=<pass>`    Tor control port password (default: empty)`-tlsdisable=<0 or 1>`    Disable TLS connections. (default: 0)`-tlsenforcement=<0 or 1>`    Only connect to TLS compatible peers. (default: 0)`-tlsfallbacknontls=<0 or 1>`    If a TLS connection fails, the next connection attempt of the same peer    (based on IP address) takes place without TLS (default: 1)`-tlsvalidate=<0 or 1>`    Connect to peers only with valid certificates (default: 0)`-tlskeypath=<path>`    Full path to a private key`-tlskeypwd=<password>`    Password for a private key encryption (default: not set, i.e. private    key will be stored unencrypted)`-tlscertpath=<path>`    Full path to a certificate`-tlstrustdir=<path>`    Full path to a trusted certificates directory`-uacomment=<string>`    Set a User Agent to your daemon. (default: disabled/none)    Shows as appended text in the `\"subver\"` string on connected nodes    Using this option has implications on your anonymity!`-whitebind=<addr>`    Bind to given address and whitelist peers connecting to it. Use    [host]:port notation for IPv6`-whitelist=<netmask>`    Whitelist peers connecting from the given netmask or IP address. Can be    specified multiple times. Whitelisted peers cannot be DoS banned and    their transactions are always relayed, even if they are already in the    mempool, useful e.g. for a gateway## Wallet options:",
            "./raw_txt_input/clifaq-01_verusd_options.md"
        ],
        [
            "What is the purpose of the `-maxconnections` option when running Verus, and what is the default value?",
            "The `-maxconnections` option specifies the maximum number of connections to peers that Verus will maintain. The default value is 384.",
            "`-maxconnections=<n>`    Maintain at most <n> connections to peers (default: 384)`-maxreceivebuffer=<n>`    Maximum per-connection receive buffer, <n> * 1000 bytes (default: 5000)`-maxsendbuffer=<n>`    Maximum per-connection send buffer, <n> * 1000 bytes (default: 1000)`-onion=<ip:port>`    Use separate SOCKS5 proxy to reach peers via Tor hidden services    (default: -proxy)`-onlynet=<net>`    Only connect to nodes in network <net> (ipv4, ipv6 or onion)`-permitbaremultisig`    Relay non-P2SH multisig (default: 1)`-peerbloomfilters`    Support filtering of blocks and transaction with Bloom filters (default:    1)`-port=<port>`    Listen for connections on <port> (default: 7770 or testnet: 17770)`-proxy=<ip:port>`    Connect through SOCKS5 proxy`-proxyrandomize`    Randomize credentials for every proxy connection. This enables Tor    stream isolation (default: 1)`-seednode=<ip>`    Connect to a node to retrieve peer addresses, and disconnect`-timeout=<n>`    Specify connection timeout in milliseconds (minimum: 1, default: 5000)`-torcontrol=<ip>:<port>`    Tor control port to use if onion listening enabled (default:    127.0.0.1:9051)`-torpassword=<pass>`    Tor control port password (default: empty)`-tlsdisable=<0 or 1>`    Disable TLS connections. (default: 0)`-tlsenforcement=<0 or 1>`    Only connect to TLS compatible peers. (default: 0)`-tlsfallbacknontls=<0 or 1>`    If a TLS connection fails, the next connection attempt of the same peer    (based on IP address) takes place without TLS (default: 1)`-tlsvalidate=<0 or 1>`    Connect to peers only with valid certificates (default: 0)`-tlskeypath=<path>`    Full path to a private key`-tlskeypwd=<password>`    Password for a private key encryption (default: not set, i.e. private    key will be stored unencrypted)`-tlscertpath=<path>`    Full path to a certificate`-tlstrustdir=<path>`    Full path to a trusted certificates directory`-uacomment=<string>`    Set a User Agent to your daemon. (default: disabled/none)    Shows as appended text in the `\"subver\"` string on connected nodes    Using this option has implications on your anonymity!`-whitebind=<addr>`    Bind to given address and whitelist peers connecting to it. Use    [host]:port notation for IPv6`-whitelist=<netmask>`    Whitelist peers connecting from the given netmask or IP address. Can be    specified multiple times. Whitelisted peers cannot be DoS banned and    their transactions are always relayed, even if they are already in the    mempool, useful e.g. for a gateway## Wallet options:",
            "./raw_txt_input/clifaq-01_verusd_options.md"
        ],
        [
            "What does the `-onion` option do when running Verus, and how does it differ from the `-proxy` option?",
            "The `-onion` option allows Verus to use a separate SOCKS5 proxy to reach peers via Tor hidden services. This is different from the `-proxy` option, which connects through a SOCKS5 proxy, but does not necessarily use Tor hidden services.",
            "`-maxconnections=<n>`    Maintain at most <n> connections to peers (default: 384)`-maxreceivebuffer=<n>`    Maximum per-connection receive buffer, <n> * 1000 bytes (default: 5000)`-maxsendbuffer=<n>`    Maximum per-connection send buffer, <n> * 1000 bytes (default: 1000)`-onion=<ip:port>`    Use separate SOCKS5 proxy to reach peers via Tor hidden services    (default: -proxy)`-onlynet=<net>`    Only connect to nodes in network <net> (ipv4, ipv6 or onion)`-permitbaremultisig`    Relay non-P2SH multisig (default: 1)`-peerbloomfilters`    Support filtering of blocks and transaction with Bloom filters (default:    1)`-port=<port>`    Listen for connections on <port> (default: 7770 or testnet: 17770)`-proxy=<ip:port>`    Connect through SOCKS5 proxy`-proxyrandomize`    Randomize credentials for every proxy connection. This enables Tor    stream isolation (default: 1)`-seednode=<ip>`    Connect to a node to retrieve peer addresses, and disconnect`-timeout=<n>`    Specify connection timeout in milliseconds (minimum: 1, default: 5000)`-torcontrol=<ip>:<port>`    Tor control port to use if onion listening enabled (default:    127.0.0.1:9051)`-torpassword=<pass>`    Tor control port password (default: empty)`-tlsdisable=<0 or 1>`    Disable TLS connections. (default: 0)`-tlsenforcement=<0 or 1>`    Only connect to TLS compatible peers. (default: 0)`-tlsfallbacknontls=<0 or 1>`    If a TLS connection fails, the next connection attempt of the same peer    (based on IP address) takes place without TLS (default: 1)`-tlsvalidate=<0 or 1>`    Connect to peers only with valid certificates (default: 0)`-tlskeypath=<path>`    Full path to a private key`-tlskeypwd=<password>`    Password for a private key encryption (default: not set, i.e. private    key will be stored unencrypted)`-tlscertpath=<path>`    Full path to a certificate`-tlstrustdir=<path>`    Full path to a trusted certificates directory`-uacomment=<string>`    Set a User Agent to your daemon. (default: disabled/none)    Shows as appended text in the `\"subver\"` string on connected nodes    Using this option has implications on your anonymity!`-whitebind=<addr>`    Bind to given address and whitelist peers connecting to it. Use    [host]:port notation for IPv6`-whitelist=<netmask>`    Whitelist peers connecting from the given netmask or IP address. Can be    specified multiple times. Whitelisted peers cannot be DoS banned and    their transactions are always relayed, even if they are already in the    mempool, useful e.g. for a gateway## Wallet options:",
            "./raw_txt_input/clifaq-01_verusd_options.md"
        ]
    ]
]