[
    "## Conversation that answers the provided questions:\n**AI Assistant:**\nHey there! I'm here to help you understand Verus. What's on your mind today?\n\n**User:**\nI'm curious about currencies in Verus. What happens when a currency is launched in Verus, and how are conversion fees handled?\n\n**AI Assistant:**\nWhen a currency is launched in Verus, it is launched 50 blocks after the `definecurrency` transaction is mined, and it requires a minimum amount of VRSCTEST to be preconverted at the specified conversion rate. The mining process earns a 0.025% conversion fee, which is paid in VRSCTEST. Do you have any further questions about currency launches in Verus?\n\n**User:**\nThat's interesting. How do I convert VRSCTEST to a new currency in Verus, and what happens if the currency has not launched yet?\n\n**AI Assistant:**\nTo convert VRSCTEST to a new currency in Verus, you use the `sendcurrency` command with the `convertto` and `preconvert` options. If the currency has not launched yet, the conversion is parked until the currency launches, at which point you will either receive the converted amount or have your VRSCTEST refunded. That's a convenient feature, isn't it?\n\n**User:**\nI'm thinking of creating a new currency. How do I create a new currency that can be converted to with either GOLD or VRSCTEST, and what is the significance of the `proofprotocol` option?\n\n**AI Assistant:**\nTo create a new currency that can be converted to with either GOLD or VRSCTEST, you use the `definecurrency` command with the `currencies` option set to an array including GOLD and VRSCTEST. The `proofprotocol` option specifies the proof protocol for the new currency. If set to 2 (PROOF_CHAINID), the controller of the chain ID can mint new coins. It's an important option to consider when creating a new currency.\n\n**User:**\nThat's helpful. What is the relationship between an ID and a currency in Verus?\n\n**AI Assistant:**\nIn Verus, to create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once. It's a unique aspect of Verus that ties IDs and currencies together.\n\n**User:**\nFinally, how do I define a currency in Verus, and what are the required parameters?\n\n**AI Assistant:**\nTo define a currency in Verus, you use the `definecurrency` command. The required parameters include:\n\n* `name`: The name of the currency.\n* `options`: An integer that specifies the currency's options.\n* `currencies`: An array of currencies that the new currency can be converted to.\n* `conversions`: An array of conversion ratios between the new currency and each currency in the `currencies` array.\n* `minpreconversion`: An array of minimum amounts of each currency in `currencies` required to launch the new currency.\n\nOptional parameters include `preallocations`, which specifies the initial allocation of the new currency to specific IDs. Does that help you get started with defining your own currency in Verus?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What happens when a currency is launched in Verus, and how are conversion fees handled?",
            "When a currency is launched in Verus, it is launched 50 blocks after the `definecurrency` transaction is mined, and it requires a minimum amount of VRSCTEST to be preconverted at the specified conversion rate. The mining process earns a 0.025% conversion fee, which is paid in VRSCTEST.",
            "To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once. So, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@, that I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold. I also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level. First, I could define the currency \"gold\" as follows: ``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}' ``` of course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to initiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch. all of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation in the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches. After it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command: ``` ./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]' ``` that would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back. Assuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I convert VRSCTEST to a new currency in Verus, and what happens if the currency has not launched yet?",
            "To convert VRSCTEST to a new currency in Verus, you use the `sendcurrency` command with the `convertto` and `preconvert` options. If the currency has not launched yet, the conversion is parked until the currency launches, at which point you will either receive the converted amount or have your VRSCTEST refunded.",
            "To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once. So, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@, that I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold. I also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level. First, I could define the currency \"gold\" as follows: ``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}' ``` of course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to initiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch. all of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation in the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches. After it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command: ``` ./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]' ``` that would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back. Assuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I create a new currency that can be converted to with either GOLD or VRSCTEST, and what is the significance of the `proofprotocol` option?",
            "To create a new currency that can be converted to with either GOLD or VRSCTEST, you use the `definecurrency` command with the `currencies` option set to an array including GOLD and VRSCTEST. The `proofprotocol` option specifies the proof protocol for the new currency. If set to 2 (PROOF_CHAINID), the controller of the chain ID can mint new coins.",
            "To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once. So, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@, that I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold. I also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level. First, I could define the currency \"gold\" as follows: ``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}' ``` of course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to initiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch. all of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation in the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches. After it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command: ``` ./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]' ``` that would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back. Assuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is the relationship between an ID and a currency in Verus?",
            "In Verus, to create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.",
            "To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once. So, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@, that I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold. I also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level. First, I could define the currency \"gold\" as follows: ``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}' ``` of course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to initiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch. all of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation in the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches. After it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command: ``` ./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]' ``` that would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back. Assuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I define a currency in Verus, and what are the required parameters?",
            "To define a currency in Verus, you use the `definecurrency` command. The required parameters include:\n\n* `name`: The name of the currency.\n* `options`: An integer that specifies the currency's options.\n* `currencies`: An array of currencies that the new currency can be converted to.\n* `conversions`: An array of conversion ratios between the new currency and each currency in the `currencies` array.\n* `minpreconversion`: An array of minimum amounts of each currency in `currencies` required to launch the new currency.\n\nOptional parameters include `preallocations`, which specifies the initial allocation of the new currency to specific IDs.",
            "To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once. So, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@, that I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold. I also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level. First, I could define the currency \"gold\" as follows: ``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}' ``` of course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to initiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch. all of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation in the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches. After it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command: ``` ./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]' ``` that would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back. Assuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```",
            "./raw_txt_input/release_notes.md"
        ]
    ]
]