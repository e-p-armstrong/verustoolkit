[
    "## Conversation that answers the provided questions:\n**AI Assistant:**\nHello! I'm here to help with any questions you might have about Verus. Please, ask me anything!\n\n**User:**\nI'm trying to use the `getlastimportfrom` command in Verus, but I'm not sure how to use it. Can you help me out?\n\n**AI Assistant:**\nYou can use the `getlastimportfrom` command in Verus by running the command with the system name or ID as an argument, like this:\n```\nverus getlastimportfrom \"systemname\"\n```\nAlternatively, you can use the `curl` command to send a JSON-RPC request to the Verus server, like this:\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlastimportfrom\", \"params\": \"systemname\" }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\nDo you have any other questions about the `getlastimportfrom` command?\n\n**User:**\nThat helps, thanks! What is the result of the `getlastimportfrom` command?\n\n**AI Assistant:**\nThe result of the `getlastimportfrom` command is a JSON object that includes two properties: \"lastimport\" and \"lastconfirmednotarization\", which contain information about the last import and last confirmed notarization from the specified system. Does that make sense?\n\n**User:**\nYeah, that makes sense. I also have a question about the `getinitialcurrencystate` command. What arguments does it take?\n\n**AI Assistant:**\nThe `getinitialcurrencystate` command takes a single required argument, which is the \"name\" or chain ID of the chain to get the export transactions for. Do you have any other questions about the `getinitialcurrencystate` command?\n\n**User:**\nNo, that helps! What does the `getinitialcurrencystate` command do in Verus?\n\n**AI Assistant:**\nThe `getinitialcurrencystate` command in Verus returns the initial currency state for a specified chain or currency. This includes information such as flags for the currency, the currency ID, reserve currencies, initial supply, emitted coins, current supply, and various conversion rates and fees.\n\n**User:**\nThat's helpful. How can I use the `getinitialcurrencystate` command in Verus?\n\n**AI Assistant:**\nYou can use the `getinitialcurrencystate` command in Verus by running the command with the chain name or ID as an argument, like this:\n```\nverus getinitialcurrencystate name\n```\nAlternatively, you can use the `curl` command to send a JSON-RPC request to the Verus server, like this:\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinitialcurrencystate\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\nLet me know if you have any other questions!\n\n**User:**\nNo, that helps! What is the result of the `getinitialcurrencystate` command?\n\n**AI Assistant:**\nThe result of the `getinitialcurrencystate` command is a JSON object that includes various properties related to the initial currency state, such as flags, currency ID, reserve currencies, initial supply, emitted coins, current supply, and various conversion rates and fees.\n\n**User:**\nI have one more question. What arguments does the `getlastimportfrom` command take?\n\n**AI Assistant:**\nThe `getlastimportfrom` command takes a single required argument, which is the \"systemname\" or ID of the system to retrieve the last import from.\n\n**User:**\nAnd what does the `getlastimportfrom` command do in Verus?\n\n**AI Assistant:**\nThe `getlastimportfrom` command in Verus returns the last import from a specific originating system.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "How can I use the `getlastimportfrom` command in Verus?",
            "You can use the `getlastimportfrom` command in Verus by running the command with the system name or ID as an argument, like this:\n```\nverus getlastimportfrom \"systemname\"\n```\nAlternatively, you can use the `curl` command to send a JSON-RPC request to the Verus server, like this:\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlastimportfrom\", \"params\": \"systemname\" }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "#### Arguments: ```  \"name\"          (string, required) name or chain ID of the chain to get the export transactions for ``` #### Result: ```json { \"flags\": n,           (hex) flags for the currency \"currencyid\": \"xxxx\",      (text) i-address of the currency ID \"reservecurrencies\": [  { \t\t \"currencyid\": \"xxxx\",    (text) i-address of the currency ID \t\t \"weight\": n,         (numeric) The weight of this currence \t\t \"reserves\": xxx.xxxxxxxx,  (numeric) The initial amount of this currency in reserve \t\t \"priceinreserve\": n     (numeric) The initial conversion rate of this reserve currency  } ], \"initialsupply\" : xxx.xxxxxxxx, (numeric) The initial supply of this currency \"emitted\" : xxx.xxxxxxx,     (numeric) The currently emitted coins of this currency \"supply\" : xxx.xxxxxxxx,     (numeric) The current supply of this currency \"currencies\": {  \"xxxx\": {           (text) i-address of the currency ID  \t \"reservein\": xxx.xxxxxxxx,    \t \"nativein\": xxx.xxxxxxxx,  \t \"reserveout\": xxx.xxxxxxxx,  \t \"lastconversionprice\": xxx.xxxxxxxx,  \t \"viaconversionprice\": xxx.xxxxxxxx,  \t \"fees\": xxx.xxxxxxxx,  \t \"conversionfees\": xxx.xxxxxxxx,   \"priorweights\": xxx.xxxxxxxx  },{   ...  },  \"primarycurrencyfees\": xxx.xxxxxxx,  \"primarycurrencyconversionfees\": xxx.xxxxxxx,  \"primarycurrencyout\": xxx.xxxxxxx,  \"preconvertedout\": xxx.xxxxxxx } ``` Examples: ```bash > verus getinitialcurrencystate name > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinitialcurrencystate\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getlastimportfrom \"systemname\"` Returns the last import from a specific originating system.#### Arguments: ```  \"systemname\"        (string, required) name or ID of the system to retrieve the last import from ``` #### Result: ```json {  \"lastimport\" :         (object) last import from the indicated system on this chain   {   }  \"lastconfirmednotarization\" :  (object) last confirmed notarization of the indicated system on this chain   {   } } ``` Examples: ```bash > verus getlastimportfrom \"systemname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlastimportfrom\", \"params\": \"systemname\" }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getlaunchinfo \"currencyid\"` Returns the launch notarization data and partial transaction proof of the launch notarization for the specifed currencyid.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the result of the `getlastimportfrom` command?",
            "The result of the `getlastimportfrom` command is a JSON object that includes two properties: \"lastimport\" and \"lastconfirmednotarization\", which contain information about the last import and last confirmed notarization from the specified system.",
            "#### Arguments: ```  \"name\"          (string, required) name or chain ID of the chain to get the export transactions for ``` #### Result: ```json { \"flags\": n,           (hex) flags for the currency \"currencyid\": \"xxxx\",      (text) i-address of the currency ID \"reservecurrencies\": [  { \t\t \"currencyid\": \"xxxx\",    (text) i-address of the currency ID \t\t \"weight\": n,         (numeric) The weight of this currence \t\t \"reserves\": xxx.xxxxxxxx,  (numeric) The initial amount of this currency in reserve \t\t \"priceinreserve\": n     (numeric) The initial conversion rate of this reserve currency  } ], \"initialsupply\" : xxx.xxxxxxxx, (numeric) The initial supply of this currency \"emitted\" : xxx.xxxxxxx,     (numeric) The currently emitted coins of this currency \"supply\" : xxx.xxxxxxxx,     (numeric) The current supply of this currency \"currencies\": {  \"xxxx\": {           (text) i-address of the currency ID  \t \"reservein\": xxx.xxxxxxxx,    \t \"nativein\": xxx.xxxxxxxx,  \t \"reserveout\": xxx.xxxxxxxx,  \t \"lastconversionprice\": xxx.xxxxxxxx,  \t \"viaconversionprice\": xxx.xxxxxxxx,  \t \"fees\": xxx.xxxxxxxx,  \t \"conversionfees\": xxx.xxxxxxxx,   \"priorweights\": xxx.xxxxxxxx  },{   ...  },  \"primarycurrencyfees\": xxx.xxxxxxx,  \"primarycurrencyconversionfees\": xxx.xxxxxxx,  \"primarycurrencyout\": xxx.xxxxxxx,  \"preconvertedout\": xxx.xxxxxxx } ``` Examples: ```bash > verus getinitialcurrencystate name > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinitialcurrencystate\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getlastimportfrom \"systemname\"` Returns the last import from a specific originating system.#### Arguments: ```  \"systemname\"        (string, required) name or ID of the system to retrieve the last import from ``` #### Result: ```json {  \"lastimport\" :         (object) last import from the indicated system on this chain   {   }  \"lastconfirmednotarization\" :  (object) last confirmed notarization of the indicated system on this chain   {   } } ``` Examples: ```bash > verus getlastimportfrom \"systemname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlastimportfrom\", \"params\": \"systemname\" }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getlaunchinfo \"currencyid\"` Returns the launch notarization data and partial transaction proof of the launch notarization for the specifed currencyid.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What arguments does the `getinitialcurrencystate` command take?",
            "The `getinitialcurrencystate` command takes a single required argument, which is the \"name\" or chain ID of the chain to get the export transactions for.",
            "#### Arguments: ```  \"name\"          (string, required) name or chain ID of the chain to get the export transactions for ``` #### Result: ```json { \"flags\": n,           (hex) flags for the currency \"currencyid\": \"xxxx\",      (text) i-address of the currency ID \"reservecurrencies\": [  { \t\t \"currencyid\": \"xxxx\",    (text) i-address of the currency ID \t\t \"weight\": n,         (numeric) The weight of this currence \t\t \"reserves\": xxx.xxxxxxxx,  (numeric) The initial amount of this currency in reserve \t\t \"priceinreserve\": n     (numeric) The initial conversion rate of this reserve currency  } ], \"initialsupply\" : xxx.xxxxxxxx, (numeric) The initial supply of this currency \"emitted\" : xxx.xxxxxxx,     (numeric) The currently emitted coins of this currency \"supply\" : xxx.xxxxxxxx,     (numeric) The current supply of this currency \"currencies\": {  \"xxxx\": {           (text) i-address of the currency ID  \t \"reservein\": xxx.xxxxxxxx,    \t \"nativein\": xxx.xxxxxxxx,  \t \"reserveout\": xxx.xxxxxxxx,  \t \"lastconversionprice\": xxx.xxxxxxxx,  \t \"viaconversionprice\": xxx.xxxxxxxx,  \t \"fees\": xxx.xxxxxxxx,  \t \"conversionfees\": xxx.xxxxxxxx,   \"priorweights\": xxx.xxxxxxxx  },{   ...  },  \"primarycurrencyfees\": xxx.xxxxxxx,  \"primarycurrencyconversionfees\": xxx.xxxxxxx,  \"primarycurrencyout\": xxx.xxxxxxx,  \"preconvertedout\": xxx.xxxxxxx } ``` Examples: ```bash > verus getinitialcurrencystate name > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinitialcurrencystate\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getlastimportfrom \"systemname\"` Returns the last import from a specific originating system.#### Arguments: ```  \"systemname\"        (string, required) name or ID of the system to retrieve the last import from ``` #### Result: ```json {  \"lastimport\" :         (object) last import from the indicated system on this chain   {   }  \"lastconfirmednotarization\" :  (object) last confirmed notarization of the indicated system on this chain   {   } } ``` Examples: ```bash > verus getlastimportfrom \"systemname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlastimportfrom\", \"params\": \"systemname\" }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getlaunchinfo \"currencyid\"` Returns the launch notarization data and partial transaction proof of the launch notarization for the specifed currencyid.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What does the `getinitialcurrencystate` command do in Verus?",
            "The `getinitialcurrencystate` command in Verus returns the initial currency state for a specified chain or currency. This includes information such as flags for the currency, the currency ID, reserve currencies, initial supply, emitted coins, current supply, and various conversion rates and fees.",
            "#### Arguments: ```  \"name\"          (string, required) name or chain ID of the chain to get the export transactions for ``` #### Result: ```json { \"flags\": n,           (hex) flags for the currency \"currencyid\": \"xxxx\",      (text) i-address of the currency ID \"reservecurrencies\": [  { \t\t \"currencyid\": \"xxxx\",    (text) i-address of the currency ID \t\t \"weight\": n,         (numeric) The weight of this currence \t\t \"reserves\": xxx.xxxxxxxx,  (numeric) The initial amount of this currency in reserve \t\t \"priceinreserve\": n     (numeric) The initial conversion rate of this reserve currency  } ], \"initialsupply\" : xxx.xxxxxxxx, (numeric) The initial supply of this currency \"emitted\" : xxx.xxxxxxx,     (numeric) The currently emitted coins of this currency \"supply\" : xxx.xxxxxxxx,     (numeric) The current supply of this currency \"currencies\": {  \"xxxx\": {           (text) i-address of the currency ID  \t \"reservein\": xxx.xxxxxxxx,    \t \"nativein\": xxx.xxxxxxxx,  \t \"reserveout\": xxx.xxxxxxxx,  \t \"lastconversionprice\": xxx.xxxxxxxx,  \t \"viaconversionprice\": xxx.xxxxxxxx,  \t \"fees\": xxx.xxxxxxxx,  \t \"conversionfees\": xxx.xxxxxxxx,   \"priorweights\": xxx.xxxxxxxx  },{   ...  },  \"primarycurrencyfees\": xxx.xxxxxxx,  \"primarycurrencyconversionfees\": xxx.xxxxxxx,  \"primarycurrencyout\": xxx.xxxxxxx,  \"preconvertedout\": xxx.xxxxxxx } ``` Examples: ```bash > verus getinitialcurrencystate name > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinitialcurrencystate\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getlastimportfrom \"systemname\"` Returns the last import from a specific originating system.#### Arguments: ```  \"systemname\"        (string, required) name or ID of the system to retrieve the last import from ``` #### Result: ```json {  \"lastimport\" :         (object) last import from the indicated system on this chain   {   }  \"lastconfirmednotarization\" :  (object) last confirmed notarization of the indicated system on this chain   {   } } ``` Examples: ```bash > verus getlastimportfrom \"systemname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlastimportfrom\", \"params\": \"systemname\" }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getlaunchinfo \"currencyid\"` Returns the launch notarization data and partial transaction proof of the launch notarization for the specifed currencyid.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How can I use the `getinitialcurrencystate` command in Verus?",
            "You can use the `getinitialcurrencystate` command in Verus by running the command with the chain name or ID as an argument, like this:\n```\nverus getinitialcurrencystate name\n```\nAlternatively, you can use the `curl` command to send a JSON-RPC request to the Verus server, like this:\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinitialcurrencystate\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "#### Arguments: ```  \"name\"          (string, required) name or chain ID of the chain to get the export transactions for ``` #### Result: ```json { \"flags\": n,           (hex) flags for the currency \"currencyid\": \"xxxx\",      (text) i-address of the currency ID \"reservecurrencies\": [  { \t\t \"currencyid\": \"xxxx\",    (text) i-address of the currency ID \t\t \"weight\": n,         (numeric) The weight of this currence \t\t \"reserves\": xxx.xxxxxxxx,  (numeric) The initial amount of this currency in reserve \t\t \"priceinreserve\": n     (numeric) The initial conversion rate of this reserve currency  } ], \"initialsupply\" : xxx.xxxxxxxx, (numeric) The initial supply of this currency \"emitted\" : xxx.xxxxxxx,     (numeric) The currently emitted coins of this currency \"supply\" : xxx.xxxxxxxx,     (numeric) The current supply of this currency \"currencies\": {  \"xxxx\": {           (text) i-address of the currency ID  \t \"reservein\": xxx.xxxxxxxx,    \t \"nativein\": xxx.xxxxxxxx,  \t \"reserveout\": xxx.xxxxxxxx,  \t \"lastconversionprice\": xxx.xxxxxxxx,  \t \"viaconversionprice\": xxx.xxxxxxxx,  \t \"fees\": xxx.xxxxxxxx,  \t \"conversionfees\": xxx.xxxxxxxx,   \"priorweights\": xxx.xxxxxxxx  },{   ...  },  \"primarycurrencyfees\": xxx.xxxxxxx,  \"primarycurrencyconversionfees\": xxx.xxxxxxx,  \"primarycurrencyout\": xxx.xxxxxxx,  \"preconvertedout\": xxx.xxxxxxx } ``` Examples: ```bash > verus getinitialcurrencystate name > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinitialcurrencystate\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getlastimportfrom \"systemname\"` Returns the last import from a specific originating system.#### Arguments: ```  \"systemname\"        (string, required) name or ID of the system to retrieve the last import from ``` #### Result: ```json {  \"lastimport\" :         (object) last import from the indicated system on this chain   {   }  \"lastconfirmednotarization\" :  (object) last confirmed notarization of the indicated system on this chain   {   } } ``` Examples: ```bash > verus getlastimportfrom \"systemname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlastimportfrom\", \"params\": \"systemname\" }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getlaunchinfo \"currencyid\"` Returns the launch notarization data and partial transaction proof of the launch notarization for the specifed currencyid.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the result of the `getinitialcurrencystate` command?",
            "The result of the `getinitialcurrencystate` command is a JSON object that includes various properties related to the initial currency state, such as flags, currency ID, reserve currencies, initial supply, emitted coins, current supply, and various conversion rates and fees.",
            "#### Arguments: ```  \"name\"          (string, required) name or chain ID of the chain to get the export transactions for ``` #### Result: ```json { \"flags\": n,           (hex) flags for the currency \"currencyid\": \"xxxx\",      (text) i-address of the currency ID \"reservecurrencies\": [  { \t\t \"currencyid\": \"xxxx\",    (text) i-address of the currency ID \t\t \"weight\": n,         (numeric) The weight of this currence \t\t \"reserves\": xxx.xxxxxxxx,  (numeric) The initial amount of this currency in reserve \t\t \"priceinreserve\": n     (numeric) The initial conversion rate of this reserve currency  } ], \"initialsupply\" : xxx.xxxxxxxx, (numeric) The initial supply of this currency \"emitted\" : xxx.xxxxxxx,     (numeric) The currently emitted coins of this currency \"supply\" : xxx.xxxxxxxx,     (numeric) The current supply of this currency \"currencies\": {  \"xxxx\": {           (text) i-address of the currency ID  \t \"reservein\": xxx.xxxxxxxx,    \t \"nativein\": xxx.xxxxxxxx,  \t \"reserveout\": xxx.xxxxxxxx,  \t \"lastconversionprice\": xxx.xxxxxxxx,  \t \"viaconversionprice\": xxx.xxxxxxxx,  \t \"fees\": xxx.xxxxxxxx,  \t \"conversionfees\": xxx.xxxxxxxx,   \"priorweights\": xxx.xxxxxxxx  },{   ...  },  \"primarycurrencyfees\": xxx.xxxxxxx,  \"primarycurrencyconversionfees\": xxx.xxxxxxx,  \"primarycurrencyout\": xxx.xxxxxxx,  \"preconvertedout\": xxx.xxxxxxx } ``` Examples: ```bash > verus getinitialcurrencystate name > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinitialcurrencystate\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getlastimportfrom \"systemname\"` Returns the last import from a specific originating system.#### Arguments: ```  \"systemname\"        (string, required) name or ID of the system to retrieve the last import from ``` #### Result: ```json {  \"lastimport\" :         (object) last import from the indicated system on this chain   {   }  \"lastconfirmednotarization\" :  (object) last confirmed notarization of the indicated system on this chain   {   } } ``` Examples: ```bash > verus getlastimportfrom \"systemname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlastimportfrom\", \"params\": \"systemname\" }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getlaunchinfo \"currencyid\"` Returns the launch notarization data and partial transaction proof of the launch notarization for the specifed currencyid.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What arguments does the `getlastimportfrom` command take?",
            "The `getlastimportfrom` command takes a single required argument, which is the \"systemname\" or ID of the system to retrieve the last import from.",
            "#### Arguments: ```  \"name\"          (string, required) name or chain ID of the chain to get the export transactions for ``` #### Result: ```json { \"flags\": n,           (hex) flags for the currency \"currencyid\": \"xxxx\",      (text) i-address of the currency ID \"reservecurrencies\": [  { \t\t \"currencyid\": \"xxxx\",    (text) i-address of the currency ID \t\t \"weight\": n,         (numeric) The weight of this currence \t\t \"reserves\": xxx.xxxxxxxx,  (numeric) The initial amount of this currency in reserve \t\t \"priceinreserve\": n     (numeric) The initial conversion rate of this reserve currency  } ], \"initialsupply\" : xxx.xxxxxxxx, (numeric) The initial supply of this currency \"emitted\" : xxx.xxxxxxx,     (numeric) The currently emitted coins of this currency \"supply\" : xxx.xxxxxxxx,     (numeric) The current supply of this currency \"currencies\": {  \"xxxx\": {           (text) i-address of the currency ID  \t \"reservein\": xxx.xxxxxxxx,    \t \"nativein\": xxx.xxxxxxxx,  \t \"reserveout\": xxx.xxxxxxxx,  \t \"lastconversionprice\": xxx.xxxxxxxx,  \t \"viaconversionprice\": xxx.xxxxxxxx,  \t \"fees\": xxx.xxxxxxxx,  \t \"conversionfees\": xxx.xxxxxxxx,   \"priorweights\": xxx.xxxxxxxx  },{   ...  },  \"primarycurrencyfees\": xxx.xxxxxxx,  \"primarycurrencyconversionfees\": xxx.xxxxxxx,  \"primarycurrencyout\": xxx.xxxxxxx,  \"preconvertedout\": xxx.xxxxxxx } ``` Examples: ```bash > verus getinitialcurrencystate name > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinitialcurrencystate\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getlastimportfrom \"systemname\"` Returns the last import from a specific originating system.#### Arguments: ```  \"systemname\"        (string, required) name or ID of the system to retrieve the last import from ``` #### Result: ```json {  \"lastimport\" :         (object) last import from the indicated system on this chain   {   }  \"lastconfirmednotarization\" :  (object) last confirmed notarization of the indicated system on this chain   {   } } ``` Examples: ```bash > verus getlastimportfrom \"systemname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlastimportfrom\", \"params\": \"systemname\" }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getlaunchinfo \"currencyid\"` Returns the launch notarization data and partial transaction proof of the launch notarization for the specifed currencyid.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What does the `getlastimportfrom` command do in Verus?",
            "The `getlastimportfrom` command in Verus returns the last import from a specific originating system.",
            "#### Arguments: ```  \"name\"          (string, required) name or chain ID of the chain to get the export transactions for ``` #### Result: ```json { \"flags\": n,           (hex) flags for the currency \"currencyid\": \"xxxx\",      (text) i-address of the currency ID \"reservecurrencies\": [  { \t\t \"currencyid\": \"xxxx\",    (text) i-address of the currency ID \t\t \"weight\": n,         (numeric) The weight of this currence \t\t \"reserves\": xxx.xxxxxxxx,  (numeric) The initial amount of this currency in reserve \t\t \"priceinreserve\": n     (numeric) The initial conversion rate of this reserve currency  } ], \"initialsupply\" : xxx.xxxxxxxx, (numeric) The initial supply of this currency \"emitted\" : xxx.xxxxxxx,     (numeric) The currently emitted coins of this currency \"supply\" : xxx.xxxxxxxx,     (numeric) The current supply of this currency \"currencies\": {  \"xxxx\": {           (text) i-address of the currency ID  \t \"reservein\": xxx.xxxxxxxx,    \t \"nativein\": xxx.xxxxxxxx,  \t \"reserveout\": xxx.xxxxxxxx,  \t \"lastconversionprice\": xxx.xxxxxxxx,  \t \"viaconversionprice\": xxx.xxxxxxxx,  \t \"fees\": xxx.xxxxxxxx,  \t \"conversionfees\": xxx.xxxxxxxx,   \"priorweights\": xxx.xxxxxxxx  },{   ...  },  \"primarycurrencyfees\": xxx.xxxxxxx,  \"primarycurrencyconversionfees\": xxx.xxxxxxx,  \"primarycurrencyout\": xxx.xxxxxxx,  \"preconvertedout\": xxx.xxxxxxx } ``` Examples: ```bash > verus getinitialcurrencystate name > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinitialcurrencystate\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getlastimportfrom \"systemname\"` Returns the last import from a specific originating system.#### Arguments: ```  \"systemname\"        (string, required) name or ID of the system to retrieve the last import from ``` #### Result: ```json {  \"lastimport\" :         (object) last import from the indicated system on this chain   {   }  \"lastconfirmednotarization\" :  (object) last confirmed notarization of the indicated system on this chain   {   } } ``` Examples: ```bash > verus getlastimportfrom \"systemname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlastimportfrom\", \"params\": \"systemname\" }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getlaunchinfo \"currencyid\"` Returns the launch notarization data and partial transaction proof of the launch notarization for the specifed currencyid.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ]
]