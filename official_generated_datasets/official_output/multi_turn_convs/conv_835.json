[
    "## Conversation that answers the provided questions:\n**AI Assistant:**\nHey there! I'm here to help with any questions you might have about Verus. What's on your mind today?\n\n**User:**\nI was wondering, how can I use the `setidentitytimelock` command to set a time lock on an identity?\n\n**AI Assistant:**\nYou can use the `setidentitytimelock` command to set a time lock on an identity by running the following command:\n```\nverus setidentitytimelock \"id@\" '{\"unlockatblock\":absoluteblockheight}'\n```\nReplace `id@` with the ID of the identity you want to set a time lock on, and `absoluteblockheight` with the block height at which you want the identity to be unlocked. You can also use the `setunlockdelay` option to set a time unlock delay. For example:\n```\nverus setidentitytimelock \"id@\" '{\"setunlockdelay\":numberofblocksdelayafterunlock}'\n```\nReplace `numberofblocksdelayafterunlock` with the number of blocks you want to delay unlocking after the identity has been unlocked. Do you have any questions about this command or its usage?\n\n**User:**\nActually, I was wondering, what is the purpose of the `setidentitytimelock` command in Verus?\n\n**AI Assistant:**\nThe `setidentitytimelock` command is used to enable timelocking and unlocking of funds access for an on-chain VerusID. This command allows you to set a time lock on an identity, which prevents the identity from spending funds on the blockchain until a certain block height is reached. You can also set a time unlock delay, which means that once the identity has been unlocked, a certain number of blocks must pass before the identity can spend funds again. Does that make sense?\n\n**User:**\nYeah, that makes sense. Another thing I was wondering about is how to use the `revokeidentity` command to revoke an identity on the Verus blockchain.\n\n**AI Assistant:**\nYou can use the `revokeidentity` command to revoke an identity on the Verus blockchain by running the following command:\n```\nverus revokeidentity \"nameorID\"\n```\nReplace `nameorID` with the name or ID of the identity you want to revoke. You can also use the `curl` command to send a JSON RPC request to the Verus daemon to revoke the identity. Do you have any questions about this command or its usage?\n\n**User:**\nWhat is the format of the result returned by the `revokeidentity` command?\n\n**AI Assistant:**\nThe result returned by the `revokeidentity` command is a JSON object with several properties. These properties include `txid`, which is the transaction ID of the revocation transaction, and `namereservation`, which is an object containing information about the name reservation. This information includes the name, salt, referral (if any), parent (if not Verus or Verus test), and name ID (if the identity is created). Do you have any other questions about the `revokeidentity` command?\n\n**User:**\nActually, I was wondering, what is the purpose of the `revokeidentity` command in Verus?\n\n**AI Assistant:**\nThe `revokeidentity` command is used to revoke an identity on the Verus blockchain. This command can also be used to create a name commitment, which is not the same as registering a name. The command takes several arguments, including the name or ID to revoke, an optional return transaction flag, an optional token revoke flag, a non-standard fee amount, and an optional source of funds.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "How can I use the `setidentitytimelock` command to set a time lock on an identity?",
            "You can use the `setidentitytimelock` command to set a time lock on an identity by running the following command:\n```\nverus setidentitytimelock \"id@\" '{\"unlockatblock\":absoluteblockheight}'\n```\nReplace `id@` with the ID of the identity you want to set a time lock on, and `absoluteblockheight` with the block height at which you want the identity to be unlocked. You can also use the `setunlockdelay` option to set a time unlock delay. For example:\n```\nverus setidentitytimelock \"id@\" '{\"setunlockdelay\":numberofblocksdelayafterunlock}'\n```\nReplace `numberofblocksdelayafterunlock` with the number of blocks you want to delay unlocking after the identity has been unlocked.",
            "### `revokeidentity \"nameorID\" (returntx) (tokenrevoke) (feeoffer) (sourceoffunds)` #### Arguments: ``` \"nameorID\"            (string, required) the unique name to commit to. creating a name commitment is not a registration, and if one is                            created for a name that exists, it may succeed, but will never be able to be used. \"returntx\"            (bool,  optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned \"tokenrevoke\"           (bool,  optional) defaults to false, if true, the tokenized ID control token, if one exists, will be used to revoke \"feeoffer\"            (value, optional) non-standard fee amount to pay for the transaction \"sourceoffunds\"          (string, optional) transparent or private address to source all funds for fees to preserve privacy of the identity``` #### Result: ```json {   \"txid\" : \"hexid\"   \"namereservation\" :   {     \"name\"  : \"namestr\",   (string) the unique name in this commitment     \"salt\"  : \"hexstr\",   (hex)  salt used to hide the commitment     \"referral\": \"identityaddress\", (base58) address of the referring identity if there is one     \"parent\" : \"namestr\",   (string) name of the parent if not Verus or Verus test     \"nameid\" : \"address\",   (base58) identity address for this identity if it is created   } } ``` ### Examples: ```bash > verus revokeidentity \"nameorID\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"revokeidentity\", \"params\": [\"nameorID\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `setidentitytimelock \"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx) (feeoffer) (sourceoffunds)` Enables timelocking and unlocking of funds access for an on-chain VerusID. This does not affect the lock status of VerusIDs on other chains, including VerusIDs with the same identity as this one, which has been exported to another chain.Use \"setunlockdelay\" to set a time unlock delay on an identity, which means that once the identity has been unlocked, numberofblocksdelayafterunlock must then pass before the identity will be able to spend funds on this blockchain. Services which support VerusID authentication and recognize this setting may also choose to prevent funds transfers when an ID is locked.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `setidentitytimelock` command in Verus?",
            "The `setidentitytimelock` command is used to enable timelocking and unlocking of funds access for an on-chain VerusID. This command allows you to set a time lock on an identity, which prevents the identity from spending funds on the blockchain until a certain block height is reached. You can also set a time unlock delay, which means that once the identity has been unlocked, a certain number of blocks must pass before the identity can spend funds again.",
            "### `revokeidentity \"nameorID\" (returntx) (tokenrevoke) (feeoffer) (sourceoffunds)` #### Arguments: ``` \"nameorID\"            (string, required) the unique name to commit to. creating a name commitment is not a registration, and if one is                            created for a name that exists, it may succeed, but will never be able to be used. \"returntx\"            (bool,  optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned \"tokenrevoke\"           (bool,  optional) defaults to false, if true, the tokenized ID control token, if one exists, will be used to revoke \"feeoffer\"            (value, optional) non-standard fee amount to pay for the transaction \"sourceoffunds\"          (string, optional) transparent or private address to source all funds for fees to preserve privacy of the identity``` #### Result: ```json {   \"txid\" : \"hexid\"   \"namereservation\" :   {     \"name\"  : \"namestr\",   (string) the unique name in this commitment     \"salt\"  : \"hexstr\",   (hex)  salt used to hide the commitment     \"referral\": \"identityaddress\", (base58) address of the referring identity if there is one     \"parent\" : \"namestr\",   (string) name of the parent if not Verus or Verus test     \"nameid\" : \"address\",   (base58) identity address for this identity if it is created   } } ``` ### Examples: ```bash > verus revokeidentity \"nameorID\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"revokeidentity\", \"params\": [\"nameorID\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `setidentitytimelock \"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx) (feeoffer) (sourceoffunds)` Enables timelocking and unlocking of funds access for an on-chain VerusID. This does not affect the lock status of VerusIDs on other chains, including VerusIDs with the same identity as this one, which has been exported to another chain.Use \"setunlockdelay\" to set a time unlock delay on an identity, which means that once the identity has been unlocked, numberofblocksdelayafterunlock must then pass before the identity will be able to spend funds on this blockchain. Services which support VerusID authentication and recognize this setting may also choose to prevent funds transfers when an ID is locked.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How can I use the `revokeidentity` command to revoke an identity on the Verus blockchain?",
            "You can use the `revokeidentity` command to revoke an identity on the Verus blockchain by running the following command:\n```\nverus revokeidentity \"nameorID\"\n```\nReplace `nameorID` with the name or ID of the identity you want to revoke. You can also use the `curl` command to send a JSON RPC request to the Verus daemon to revoke the identity.",
            "### `revokeidentity \"nameorID\" (returntx) (tokenrevoke) (feeoffer) (sourceoffunds)` #### Arguments: ``` \"nameorID\"            (string, required) the unique name to commit to. creating a name commitment is not a registration, and if one is                            created for a name that exists, it may succeed, but will never be able to be used. \"returntx\"            (bool,  optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned \"tokenrevoke\"           (bool,  optional) defaults to false, if true, the tokenized ID control token, if one exists, will be used to revoke \"feeoffer\"            (value, optional) non-standard fee amount to pay for the transaction \"sourceoffunds\"          (string, optional) transparent or private address to source all funds for fees to preserve privacy of the identity``` #### Result: ```json {   \"txid\" : \"hexid\"   \"namereservation\" :   {     \"name\"  : \"namestr\",   (string) the unique name in this commitment     \"salt\"  : \"hexstr\",   (hex)  salt used to hide the commitment     \"referral\": \"identityaddress\", (base58) address of the referring identity if there is one     \"parent\" : \"namestr\",   (string) name of the parent if not Verus or Verus test     \"nameid\" : \"address\",   (base58) identity address for this identity if it is created   } } ``` ### Examples: ```bash > verus revokeidentity \"nameorID\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"revokeidentity\", \"params\": [\"nameorID\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `setidentitytimelock \"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx) (feeoffer) (sourceoffunds)` Enables timelocking and unlocking of funds access for an on-chain VerusID. This does not affect the lock status of VerusIDs on other chains, including VerusIDs with the same identity as this one, which has been exported to another chain.Use \"setunlockdelay\" to set a time unlock delay on an identity, which means that once the identity has been unlocked, numberofblocksdelayafterunlock must then pass before the identity will be able to spend funds on this blockchain. Services which support VerusID authentication and recognize this setting may also choose to prevent funds transfers when an ID is locked.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the format of the result returned by the `revokeidentity` command?",
            "The result returned by the `revokeidentity` command is a JSON object with several properties. These properties include `txid`, which is the transaction ID of the revocation transaction, and `namereservation`, which is an object containing information about the name reservation. This information includes the name, salt, referral (if any), parent (if not Verus or Verus test), and name ID (if the identity is created).",
            "### `revokeidentity \"nameorID\" (returntx) (tokenrevoke) (feeoffer) (sourceoffunds)` #### Arguments: ``` \"nameorID\"            (string, required) the unique name to commit to. creating a name commitment is not a registration, and if one is                            created for a name that exists, it may succeed, but will never be able to be used. \"returntx\"            (bool,  optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned \"tokenrevoke\"           (bool,  optional) defaults to false, if true, the tokenized ID control token, if one exists, will be used to revoke \"feeoffer\"            (value, optional) non-standard fee amount to pay for the transaction \"sourceoffunds\"          (string, optional) transparent or private address to source all funds for fees to preserve privacy of the identity``` #### Result: ```json {   \"txid\" : \"hexid\"   \"namereservation\" :   {     \"name\"  : \"namestr\",   (string) the unique name in this commitment     \"salt\"  : \"hexstr\",   (hex)  salt used to hide the commitment     \"referral\": \"identityaddress\", (base58) address of the referring identity if there is one     \"parent\" : \"namestr\",   (string) name of the parent if not Verus or Verus test     \"nameid\" : \"address\",   (base58) identity address for this identity if it is created   } } ``` ### Examples: ```bash > verus revokeidentity \"nameorID\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"revokeidentity\", \"params\": [\"nameorID\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `setidentitytimelock \"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx) (feeoffer) (sourceoffunds)` Enables timelocking and unlocking of funds access for an on-chain VerusID. This does not affect the lock status of VerusIDs on other chains, including VerusIDs with the same identity as this one, which has been exported to another chain.Use \"setunlockdelay\" to set a time unlock delay on an identity, which means that once the identity has been unlocked, numberofblocksdelayafterunlock must then pass before the identity will be able to spend funds on this blockchain. Services which support VerusID authentication and recognize this setting may also choose to prevent funds transfers when an ID is locked.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `revokeidentity` command in Verus?",
            "The `revokeidentity` command is used to revoke an identity on the Verus blockchain. This command can also be used to create a name commitment, which is not the same as registering a name. The command takes several arguments, including the name or ID to revoke, an optional return transaction flag, an optional token revoke flag, a non-standard fee amount, and an optional source of funds.",
            "### `revokeidentity \"nameorID\" (returntx) (tokenrevoke) (feeoffer) (sourceoffunds)` #### Arguments: ``` \"nameorID\"            (string, required) the unique name to commit to. creating a name commitment is not a registration, and if one is                            created for a name that exists, it may succeed, but will never be able to be used. \"returntx\"            (bool,  optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned \"tokenrevoke\"           (bool,  optional) defaults to false, if true, the tokenized ID control token, if one exists, will be used to revoke \"feeoffer\"            (value, optional) non-standard fee amount to pay for the transaction \"sourceoffunds\"          (string, optional) transparent or private address to source all funds for fees to preserve privacy of the identity``` #### Result: ```json {   \"txid\" : \"hexid\"   \"namereservation\" :   {     \"name\"  : \"namestr\",   (string) the unique name in this commitment     \"salt\"  : \"hexstr\",   (hex)  salt used to hide the commitment     \"referral\": \"identityaddress\", (base58) address of the referring identity if there is one     \"parent\" : \"namestr\",   (string) name of the parent if not Verus or Verus test     \"nameid\" : \"address\",   (base58) identity address for this identity if it is created   } } ``` ### Examples: ```bash > verus revokeidentity \"nameorID\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"revokeidentity\", \"params\": [\"nameorID\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `setidentitytimelock \"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx) (feeoffer) (sourceoffunds)` Enables timelocking and unlocking of funds access for an on-chain VerusID. This does not affect the lock status of VerusIDs on other chains, including VerusIDs with the same identity as this one, which has been exported to another chain.Use \"setunlockdelay\" to set a time unlock delay on an identity, which means that once the identity has been unlocked, numberofblocksdelayafterunlock must then pass before the identity will be able to spend funds on this blockchain. Services which support VerusID authentication and recognize this setting may also choose to prevent funds transfers when an ID is locked.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ]
]