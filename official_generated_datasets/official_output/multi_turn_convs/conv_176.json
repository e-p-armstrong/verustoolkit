[
    "## Conversation that answers the provided questions:\n**AI Assistant:**\nHey there! I'm here to help with any questions you have about Verus. What's on your mind today?\n\n**User:**\nI'm interested in learning more about PBaaS blockchain definitions in Verus. What are the main components of a PBaaS blockchain definition in Verus?\n\n**AI Assistant:**\nA PBaaS blockchain definition in Verus consists of several components, including:\n\n1. `name`: The name of the PBaaS chain.\n2. `options`: An integer that specifies the options for the chain.\n3. `currencies`: An array of currencies that can be used on the chain.\n4. `conversions`: An array of conversion ratios between the chain's native currency and other currencies.\n5. `eras`: An array of objects that define the block reward, reward decay, halving, and end of each era in the chain's lifecycle.\n6. `notaries`: An array of VerusIDs that serve as notaries on the chain.\n7. `minnotariesconfirm`: The minimum number of notaries required to confirm a block.\n8. `nodes`: An array of objects that describe the network addresses and identities of the nodes on the chain.\n9. `gatewayconvertername`: The name of the gateway converter.\n10. `gatewayconverterissuance`: The initial issuance of the gateway converter's native token.\n\nThese components work together to define a PBaaS blockchain in Verus. Do you have any further questions about PBaaS blockchain definitions or Verus in general?\n\n**User:**\nThat helps, thanks! What are the limitations to be aware of when working with multi-currency PBaaS chains in Verus?\n\n**AI Assistant:**\nWhen working with multi-currency PBaaS chains in Verus, there are two limitations to be aware of:\n\n1. You cannot create a currency from an ID that has a properly encoded i-address as its actual name. This is because using an i-address as a currency name can cause problems in various use cases.\n2. In the Verus Desktop GUI, you cannot use the same name for a PBaaS chain as an existing currency that is already supported, such as BTC or ETH. This limitation will be removed before mainnet availability.\n\nIt's essential to be aware of these limitations to avoid potential issues when working with multi-currency PBaaS chains in Verus. Do you have any more questions about multi-currency PBaaS chains or Verus limitations?\n\n**User:**\nThat makes sense. Why is it not recommended to create an ID with an i-address as its name in Verus?\n\n**AI Assistant:**\nIt is not recommended to create an ID with an i-address as its name in Verus because it can cause problems whenever an i-address or name may be used. This is because the naming system in Verus is designed to distinguish between IDs and i-addresses, and using an i-address as an ID name can lead to confusion and errors.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What are the main components of a PBaaS blockchain definition in Verus?",
            "A PBaaS blockchain definition in Verus consists of several components, including:\n\n1. `name`: The name of the PBaaS chain.\n2. `options`: An integer that specifies the options for the chain.\n3. `currencies`: An array of currencies that can be used on the chain.\n4. `conversions`: An array of conversion ratios between the chain's native currency and other currencies.\n5. `eras`: An array of objects that define the block reward, reward decay, halving, and end of each era in the chain's lifecycle.\n6. `notaries`: An array of VerusIDs that serve as notaries on the chain.\n7. `minnotariesconfirm`: The minimum number of notaries required to confirm a block.\n8. `nodes`: An array of objects that describe the network addresses and identities of the nodes on the chain.\n9. `gatewayconvertername`: The name of the gateway converter.\n10. `gatewayconverterissuance`: The initial issuance of the gateway converter's native token.",
            "### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\",  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# Disclaimer",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are the limitations to be aware of when working with multi-currency PBaaS chains in Verus?",
            "There are two limitations to be aware of when working with multi-currency PBaaS chains in Verus:\n\n1. You cannot create a currency from an ID that has a properly encoded i-address as its actual name. This is because using an i-address as a currency name can cause problems in various use cases.\n2. In the Verus Desktop GUI, you cannot use the same name for a PBaaS chain as an existing currency that is already supported, such as BTC or ETH. This limitation will be removed before mainnet availability.",
            "### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\",  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# Disclaimer",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "Why is it not recommended to create an ID with an i-address as its name in Verus?",
            "It is not recommended to create an ID with an i-address as its name in Verus because it can cause problems whenever an i-address or name may be used. This is because the naming system in Verus is designed to distinguish between IDs and i-addresses, and using an i-address as an ID name can lead to confusion and errors.",
            "### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\",  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# Disclaimer",
            "./raw_txt_input/release_notes.md"
        ]
    ]
]