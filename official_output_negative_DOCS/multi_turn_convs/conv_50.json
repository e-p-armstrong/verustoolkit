[
    "## Conversation that answers the provided questions:\n**User:**\nHey, I'm trying to create a decentralized currency with the `options` parameter set to `2`. How do I do that?\n\n**AI Assistant:**\nActually, you can't create a decentralized currency with the `options` parameter set to `2`. The `options` parameter set to `2` is for a centralized currency, where the rootID can mint and burn supply. To create a decentralized currency, you should set the `options` parameter to `1`, which is the default.\n\n**User:**\nOkay, so if I set the `options` parameter to `1`, what happens to the subID registration fees when creating a decentralized currency?\n\n**AI Assistant:**\nWhen creating a decentralized currency with the `options` parameter set to `1`, the subID registration fees are burned.\n\n**User:**\nGot it, thanks for the clarification! Now, I'm trying to create a basket currency. Can I do that with the `options` parameter set to `32`?\n\n**AI Assistant:**\nNo, you can't create a basket currency with the `options` parameter set to `32`. The `options` parameter set to `32` is for a simple token currency, whereas a basket currency requires the `options` parameter to be set to `33`.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "How do I create a decentralized currency with the `options` parameter set to `2`?",
            "You can't create a decentralized currency with the `options` parameter set to `2`. The `options` parameter set to `2` is for a centralized currency, where the rootID can mint and burn supply. To create a decentralized currency, you should set the `options` parameter to `1`, which is the default.",
            "``1`` is default, which launches a decentralized currency (no need to include this parameter when defining such a currency). When subIDs are created with this option, the registration fees are burned.``2`` is for a centralized currency. If it\u2019s a basket currency the rootID can mint and burn supply while automatically lowering and raising the reserve ratio (also anyone can burn supply without lowering the reserve ratio). Or when it\u2019s a simple token currency they can just mint and burn supply. The subID registration fees go to the rootID.``3`` is for Ethereum ERC-20 mapped tokens. [Read more](/currencies/mapping-1:1-eth)Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\n\u261d\ufe0f A simple token currency called MyBrand, centralized (the controller of the rootID can mint and burn), and has a preallocation of 100 tokens to Klaus@.### **\"currencies\"**\nHere you put the names of the currencies (or just one \u2014 it must have VRSC when launched on Verus) that will be in the reserves when it\u2019s a basket currency (`options:33`).Or when it\u2019s a simple token currency (`options:32`), what people convert during the preconversion timeframe will go to the rootID of the currency, as a funding mechanism. In the case of a simple token currency, combine it with `\"conversions\"` to determine the preconversion price.Use up to 10 currencies for this parameter.",
            "./raw_text_input_docs/launch-currency.md"
        ],
        [
            "What happens to the subID registration fees when creating a decentralized currency with the `options` parameter set to `1`?",
            "When creating a decentralized currency with the `options` parameter set to `1`, the subID registration fees are burned.",
            "``1`` is default, which launches a decentralized currency (no need to include this parameter when defining such a currency). When subIDs are created with this option, the registration fees are burned.``2`` is for a centralized currency. If it\u2019s a basket currency the rootID can mint and burn supply while automatically lowering and raising the reserve ratio (also anyone can burn supply without lowering the reserve ratio). Or when it\u2019s a simple token currency they can just mint and burn supply. The subID registration fees go to the rootID.``3`` is for Ethereum ERC-20 mapped tokens. [Read more](/currencies/mapping-1:1-eth)Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\n\u261d\ufe0f A simple token currency called MyBrand, centralized (the controller of the rootID can mint and burn), and has a preallocation of 100 tokens to Klaus@.### **\"currencies\"**\nHere you put the names of the currencies (or just one \u2014 it must have VRSC when launched on Verus) that will be in the reserves when it\u2019s a basket currency (`options:33`).Or when it\u2019s a simple token currency (`options:32`), what people convert during the preconversion timeframe will go to the rootID of the currency, as a funding mechanism. In the case of a simple token currency, combine it with `\"conversions\"` to determine the preconversion price.Use up to 10 currencies for this parameter.",
            "./raw_text_input_docs/launch-currency.md"
        ],
        [
            "Can I create a basket currency with the `options` parameter set to `32`?",
            "No, you can't create a basket currency with the `options` parameter set to `32`. The `options` parameter set to `32` is for a simple token currency, whereas a basket currency requires the `options` parameter to be set to `33`.",
            "``1`` is default, which launches a decentralized currency (no need to include this parameter when defining such a currency). When subIDs are created with this option, the registration fees are burned.``2`` is for a centralized currency. If it\u2019s a basket currency the rootID can mint and burn supply while automatically lowering and raising the reserve ratio (also anyone can burn supply without lowering the reserve ratio). Or when it\u2019s a simple token currency they can just mint and burn supply. The subID registration fees go to the rootID.``3`` is for Ethereum ERC-20 mapped tokens. [Read more](/currencies/mapping-1:1-eth)Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\n\u261d\ufe0f A simple token currency called MyBrand, centralized (the controller of the rootID can mint and burn), and has a preallocation of 100 tokens to Klaus@.### **\"currencies\"**\nHere you put the names of the currencies (or just one \u2014 it must have VRSC when launched on Verus) that will be in the reserves when it\u2019s a basket currency (`options:33`).Or when it\u2019s a simple token currency (`options:32`), what people convert during the preconversion timeframe will go to the rootID of the currency, as a funding mechanism. In the case of a simple token currency, combine it with `\"conversions\"` to determine the preconversion price.Use up to 10 currencies for this parameter.",
            "./raw_text_input_docs/launch-currency.md"
        ]
    ]
]