{"text": "listtransactions ( \"account\" count from includeWatchonly)\n\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\n\nArguments:\n1. \"account\"    (string, optional) DEPRECATED. The account name. Should be \"*\".\n2. count          (numeric, optional, default=10) The number of transactions to return\n3. from           (numeric, optional, default=0) The number of transactions to skip\n4. includeWatchonly (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')\n\nResult:\n[\n  {\n    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. \n                                                It will be \"\" for the default account.\n    \"address\":\"VRSC_address\",    (string) The VRSC address of the transaction. Not present for \n                                                move transactions (category = move).\n    \"category\":\"send|receive|move\", (string) The transaction category. 'move' is a local (off blockchain)\n                                                transaction between accounts, and not associated with an address,\n                                                transaction id or block. 'send' and 'receive' transactions are \n                                                associated with an address, transaction id and block details\n    \"amount\": x.xxx,          (numeric) The amount in VRSC. This is negative for the 'send' category, and for the\n                                         'move' category for moves outbound. It is positive for the 'receive' category,\n                                         and for the 'move' category for inbound funds.\n    \"vout\" : n,               (numeric) the vout value\n    \"fee\": x.xxx,             (numeric) The amount of the fee in VRSC. This is negative and only available for the \n                                         'send' category of transactions.\n    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and \n                                         'receive' category of transactions.\n    \"blockhash\": \"hashvalue\", (string) The block hash containing the transaction. Available for 'send' and 'receive'\n                                          category of transactions.\n    \"blockindex\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive'\n                                          category of transactions.\n    \"txid\": \"transactionid\", (string) The transaction id. Available for 'send' and 'receive' category of transactions.\n    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\n    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available \n                                          for 'send' and 'receive' category of transactions.\n    \"comment\": \"...\",       (string) If a comment is associated with the transaction.\n    \"otheraccount\": \"accountname\",  (string) For the 'move' category of transactions, the account the funds came \n                                          from (for receiving funds, positive amounts), or went to (for sending funds,\n                                          negative amounts).\n    \"size\": n,                (numeric) Transaction size in bytes\n  }\n]\n\nExamples:\n\nList the most recent 10 transactions in the systems\n> verus listtransactions \n\nList transactions 100 to 120\n> verus listtransactions \"*\" 20 100\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listtransactions\", \"params\": [\"*\", 20, 100] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetidentitycontent \"name@ || iid\" (heightstart) (heightend) (txproofs) (txproofheight) (vdxfkey) (keepdeleted)\n\n\n\nArguments\n    \"name@ || iid\"                       (string, required) name followed by \"@\" or i-address of an identity\n    \"heightstart\"                        (number, optional) default=0, only return content from this height forward, inclusive\n    \"heightend\"                          (number, optional) default=0 which means max height, only return content up to this height,\n                                                               inclusive. -1 means also return values from the mempool.\n    \"txproofs\"                           (bool, optional) default=false, if true, returns proof of ID\n    \"txproofheight\"                      (number, optional) default=\"height\", height from which to generate a proof\n    \"vdxfkey\"                            (vdxf key, optional) default=null, more selective search for specific content in ID\n    \"keepdeleted\"                        (bool, optional) default=false, if true, return deleted items as well\n\nResult:\n\nExamples:\n> verus getidentitycontent \"name@\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentitycontent\", \"params\": [\"name@\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ndecodescript \"hex\"\n\nDecode a hex-encoded script.\n\nArguments:\n1. \"hex\"     (string) the hex encoded script\n\nResult:\n{\n  \"asm\":\"asm\",   (string) Script public key\n  \"hex\":\"hex\",   (string) hex encoded public key\n  \"type\":\"type\", (string) The output type\n  \"reqSigs\": n,    (numeric) The required signatures\n  \"addresses\": [   (json array of string)\n     \"address\"     (string) transparent address\n     ,...\n  ],\n  \"p2sh\",\"address\" (string) script address\n}\n\nExamples:\n> verus decodescript \"hexstring\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decodescript\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nlistreceivedbyaccount ( minconf includeempty includeWatchonly)\n\nDEPRECATED. List balances by account.\n\nArguments:\n1. minconf      (numeric, optional, default=1) The minimum number of confirmations before payments are included.\n2. includeempty (boolean, optional, default=false) Whether to include accounts that haven't received any payments.\n3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').\n\nResult:\n[\n  {\n    \"involvesWatchonly\" : true,   (bool) Only returned if imported addresses were involved in transaction\n    \"account\" : \"accountname\",  (string) The account name of the receiving account\n    \"amount\" : x.xxx,             (numeric) The total amount received by addresses with this account\n    \"confirmations\" : n           (numeric) The number of confirmations of the most recent transaction included\n  }\n  ,...\n]\n\nExamples:\n> verus listreceivedbyaccount \n> verus listreceivedbyaccount 6 true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaccount\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nsubmitmergedblock \"hexdata\" ( \"jsonparametersobject\" )\n\nAttempts to submit one more more new blocks to one or more networks.\nEach merged block submission may be valid for Verus and/or PBaaS merge mined chains.\nThe submitted block consists of a valid block for this chain, along with embedded headers of other PBaaS merge mined chains.\nIf the hash for this header meets targets of other chains that have been added with 'addmergedblock', this API will\nsubmit those blocks to the specified URL endpoints with an RPC 'submitmergedblock' request.\nAttempts to submit one more more new blocks to one or more networks.\n\nArguments\n1. \"hexdata\"    (string, required) the hex-encoded block data to submit\n\nResults:\n\"    { rejected: \"reject reason\" }\n\n  Submission to our chain and PBaaS chains\n\"    { blockhash: \"hex\", accepted: true, pbaas_submissions: { \"Quantum\":\"chainID_hex\", ... } }\n\n  Submission to only PBaaS chains\n\"    { blockhash: \"hex\", accepted: \"pbaas\", pbaas_submissions: { \"Quantum\":\"chainID_hex\", ... } }\n\nExamples:\n> verus submitmergedblock \"mydata\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitmergedblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nmove \"fromaccount\" \"toaccount\" amount ( minconf \"comment\" )\n\nDEPRECATED. Move a specified amount from one account in your wallet to another.\n\nArguments:\n1. \"fromaccount\"   (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.\n2. \"toaccount\"     (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.\n3. amount            (numeric) Quantity of VRSC to move between accounts.\n4. minconf           (numeric, optional, default=1) Only use funds with at least this many confirmations.\n5. \"comment\"       (string, optional) An optional comment, stored in the wallet only.\n\nResult:\ntrue|false           (boolean) true if successful.\n\nExamples:\n\nMove 0.01 VRSC from the default account to the account named tabby\n> verus move \"\" \"tabby\" 0.01\n\nMove 0.01 VRSC timotei to akiko with a comment and funds have 6 confirmations\n> verus move \"timotei\" \"akiko\" 0.01 6 \"happy birthday!\"\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"move\", \"params\": [\"timotei\", \"akiko\", 0.01, 6, \"happy birthday!\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetaddresstxids\n\nReturns the txids for an address(es) (requires addressindex to be enabled).\n\nArguments:\n{\n  \"addresses\"\n    [\n      \"address\"  (string) The base58check encoded address\n      ,...\n    ]\n  \"start\" (number) The start block height\n  \"end\" (number) The end block height\n}\n\nResult:\n[\n  \"transactionid\"  (string) The transaction id\n  ,...\n]\n\nExamples:\n> verus getaddresstxids '{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddresstxids\", \"params\": [{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetblockhash index\n\nReturns hash of block in best-block-chain at index provided.\n\nArguments:\n1. index         (numeric, required) The block index\n\nResult:\n\"hash\"         (string) The block hash\n\nExamples:\n> verus getblockhash 1000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhash\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nzcsamplejoinsplit\n\nPerform a joinsplit and return the JSDescription.\n\n---NEW FILE---\n\nzcrawjoinsplit rawtx inputs outputs vpub_old vpub_new\n  inputs: a JSON object mapping {note: zcsecretkey, ...}\n  outputs: a JSON object mapping {zcaddr: value, ...}\n\nDEPRECATED. Splices a joinsplit into rawtx. Inputs are unilaterally confidential.\nOutputs are confidential between sender/receiver. The vpub_old and\nvpub_new values are globally public and move transparent value into\nor out of the confidential value store, respectively.\n\nNote: The caller is responsible for delivering the output enc1 and\nenc2 to the appropriate recipients, as well as signing rawtxout and\nensuring it is mined. (A future RPC call will deliver the confidential\npayments in-band on the blockchain.)\n\nOutput: {\n  \"encryptednote1\": enc1,\n  \"encryptednote2\": enc2,\n  \"rawtxn\": rawtxout\n}\n\n---NEW FILE---\n\naddmultisigaddress nrequired [\"key\",...] ( \"account\" )\n\nAdd a nrequired-to-sign multisignature address to the wallet.\nEach key is a VRSC address or hex-encoded public key.\nIf 'account' is specified (DEPRECATED), assign address to that account.\n\nArguments:\n1. nrequired        (numeric, required) The number of required signatures out of the n keys or addresses.\n2. \"keysobject\"   (string, required) A json array of VRSC addresses or hex-encoded public keys\n     [\n       \"address\"  (string) VRSC address or hex-encoded public key\n       ...,\n     ]\n3. \"account\"      (string, optional) DEPRECATED. If provided, MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.\n\nResult:\n\"VRSC_address\"  (string) A VRSC address associated with the keys.\n\nExamples:\n\nAdd a multisig address from 2 addresses\n> verus addmultisigaddress 2 \"[\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\",\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\"]\"\n\nAs json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addmultisigaddress\", \"params\": [2, \"[\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\",\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nverifyfile \"address or identity\" \"signature\" \"filepath/filename\" \"checklatest\"\n\nVerify a signed file\n\nArguments:\n1. \"t-addr or identity\" (string, required) The transparent address or identity that signed the file.\n2. \"signature\"       (string, required) The signature provided by the signer in base 64 encoding (see signfile).\n3. \"filename\"        (string, required) The file, which must be available locally to the daemon and that was signed.\n3. \"checklatest\"     (bool, optional)   If true, checks signature validity based on latest identity. defaults to false,\n                                          which determines validity of signing height stored in signature.\n\nResult:\ntrue|false   (boolean) If the signature is verified or not.\n\nExamples:\n\nCreate the signature\n> verus signfile \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"filepath/filename\"\n\nVerify the signature\n> verus verifyfile \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"signature\" \"filepath/filename\"\n\nAs json rpc\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifyfile\", \"params\": [\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\", \"signature\", \"filepath/filename\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_getoperationstatus ([\"operationid\", ... ]) \n\nGet operation status and any associated result or error data.  The operation will remain in memory.\n\nArguments:\n1. \"operationid\"         (array, optional) A list of operation ids we are interested in.  If not provided, examine all operations known to the node.\n\nResult:\n\"    [object, ...]\"      (array) A list of JSON objects\n\nExamples:\n> verus z_getoperationstatus '[\"operationid\", ... ]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationstatus\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetdeprecationinfo\nReturns an object containing current version and deprecation block height. Applicable only on mainnet.\n\nResult:\n{\n  \"version\": xxxxx,                      (numeric) the server version\n  \"subversion\": \"/MagicBean:x.y.z[-v]/\",     (string) the server subversion string\n  \"deprecationheight\": xxxxx,            (numeric) the block height at which this version will deprecate and shut down\n}\n\nExamples:\n> verus getdeprecationinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdeprecationinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetidentitieswithrecovery '{\"identityid\":\"idori-address\", \"fromheight\":height, \"toheight\":height, \"unspent\":false}'\n\n\n\nArguments\n{\n    \"identityid\":\"idori-address\" (string, required) returns all identities where this ID or i-address is the recovery authority\n    \"fromheight\":n               (number, optional, default=0) Search for qualified identities modified from this height forward only\n    \"toheight\":n                 (number, optional, default=0) Search for qualified identities only up until this height (0 == no limit)\n    \"unspent\":bool               (bool, optional, default=false) if true, this will only return active ID UTXOs as of the current block height\n}\n\nResult:\n[                                  (array) array of matching identities\n  {identityobject},                (object) identity with additional member \"txout\" with txhash and output index\n  ...\n]\n\nExamples:\n> verus getidentitieswithrecovery '{\"identityid\":\"idori-address\",\"fromheight\":height,\"toheight\":height,\"unspent\":false}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentitieswithrecovery\", \"params\": ['{\"identityid\":\"idori-address\",\"fromheight\":height,\"toheight\":height,\"unspent\":false}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nsubmitimports '{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n,\n\"exports\":[{\"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \n\"transfers\": [{transfer1}, {transfer2},...]}, ...]}'\n\n\nAccepts a set of exports from another system to post to the VRSC network.\n\nArguments\n  {\n    \"sourcesystemid\":\"systemid\"        ()\n    \"notarizationtxid\":\"txid\"          ()\n    \"notarizationtxoutnum\":n             ()\n    \"exports\": [{\n       \"height\": n,\n       \"txid\": \"hexid\",\n       \"txoutnum\": n,\n       \"partialtransactionproof\": \"hexstr\",\n       \"transfers\": [{transfer1}, {transfer2},...]\n    }, ...]\n  }\n\nResult:\n  [{\n     \"currency\": \"currencyid\"\n     \"txid\": \"hexid\",\n     \"txoutnum\": n\n  }, ...]\n\nExamples:\n> verus submitimports {\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]}\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitimports\", \"params\": [{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nassetchainproof needs a txid\n\n---NEW FILE---\n\nrescanfromheight (height)\n\nRescans the current wallet from a specified height\n\nArguments:\n1. \"height\"      (int, optional) Defaults to 0, height to start rescanning from\n\nNote: This call can take minutes or even hours to complete on very large wallets and rescans\n\nExamples:\n\nInitiate rescan of entire chain\n> verus rescanfromheight \n\nInitiate rescan from block 1000000\n> verus rescanfromheight 1000000\n\n---NEW FILE---\n\nlistreceivedbyaddress ( minconf includeempty includeWatchonly)\n\nList balances by receiving address.\n\nArguments:\n1. minconf       (numeric, optional, default=1) The minimum number of confirmations before payments are included.\n2. includeempty  (numeric, optional, default=false) Whether to include addresses that haven't received any payments.\n3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').\n\nResult:\n[\n  {\n    \"involvesWatchonly\" : true,        (bool) Only returned if imported addresses were involved in transaction\n    \"address\" : \"receivingaddress\",  (string) The receiving address\n    \"account\" : \"accountname\",       (string) DEPRECATED. The account of the receiving address. The default account is \"\".\n    \"amount\" : x.xxx,                  (numeric) The total amount in VRSC received by the address\n    \"confirmations\" : n                (numeric) The number of confirmations of the most recent transaction included\n  }\n  ,...\n]\n\nExamples:\n> verus listreceivedbyaddress \n> verus listreceivedbyaddress 6 true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ndecoderawtransaction \"hexstring\"\n\nReturn a JSON object representing the serialized, hex-encoded transaction.\n\nArguments:\n1. \"hex\"      (string, required) The transaction hex string\n\nResult:\n{\n  \"txid\" : \"id\",        (string) The transaction id\n  \"overwintered\" : bool   (boolean) The Overwintered flag\n  \"version\" : n,          (numeric) The version\n  \"versiongroupid\": \"hex\"   (string, optional) The version group id (Overwintered txs)\n  \"locktime\" : ttt,       (numeric) The lock time\n  \"expiryheight\" : n,     (numeric, optional) Last valid block height for mining transaction (Overwintered txs)\n  \"vin\" : [               (array of json objects)\n     {\n       \"txid\": \"id\",    (string) The transaction id\n       \"vout\": n,         (numeric) The output number\n       \"scriptSig\": {     (json object) The script\n         \"asm\": \"asm\",  (string) asm\n         \"hex\": \"hex\"   (string) hex\n       },\n       \"sequence\": n     (numeric) The script sequence number\n     }\n     ,...\n  ],\n  \"vout\" : [             (array of json objects)\n     {\n       \"value\" : x.xxx,            (numeric) The value in VRSC\n       \"n\" : n,                    (numeric) index\n       \"scriptPubKey\" : {          (json object)\n         \"asm\" : \"asm\",          (string) the asm\n         \"hex\" : \"hex\",          (string) the hex\n         \"reqSigs\" : n,            (numeric) The required sigs\n         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'\n         \"addresses\" : [           (json array of string)\n           \"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\"   (string) transparent address\n           ,...\n         ]\n       }\n     }\n     ,...\n  ],\n  \"vjoinsplit\" : [        (array of json objects, only for version >= 2)\n     {\n       \"vpub_old\" : x.xxx,         (numeric) public input value in KMD\n       \"vpub_new\" : x.xxx,         (numeric) public output value in KMD\n       \"anchor\" : \"hex\",         (string) the anchor\n       \"nullifiers\" : [            (json array of string)\n         \"hex\"                     (string) input note nullifier\n         ,...\n       ],\n       \"commitments\" : [           (json array of string)\n         \"hex\"                     (string) output note commitment\n         ,...\n       ],\n       \"onetimePubKey\" : \"hex\",  (string) the onetime public key used to encrypt the ciphertexts\n       \"randomSeed\" : \"hex\",     (string) the random seed\n       \"macs\" : [                  (json array of string)\n         \"hex\"                     (string) input note MAC\n         ,...\n       ],\n       \"proof\" : \"hex\",          (string) the zero-knowledge proof\n       \"ciphertexts\" : [           (json array of string)\n         \"hex\"                     (string) output note ciphertext\n         ,...\n       ]\n     }\n     ,...\n  ],\n}\n\nExamples:\n> verus decoderawtransaction \"hexstring\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decoderawtransaction\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nkvupdate key \"value\" days passphrase\n\nStore a key value. This feature is only available for asset chains.\n\nArguments:\n1. key                      (string, required) key\n2. \"value\"                (string, required) value\n3. days                     (numeric, required) amount of days(1440 blocks/day) before the key expires. Minimum 1 day\n4. passphrase               (string, optional) passphrase required to update this key\n\nResult:\n{\n  \"coin\": \"xxxxx\",          (string) chain the key is stored on\n  \"height\": xxxxx,            (numeric) height the key was stored at\n  \"expiration\": xxxxx,        (numeric) height the key will expire\n  \"flags\": x,                 (string) amount of days the key will be stored \n  \"key\": \"xxxxx\",           (numeric) stored key\n  \"keylen\": xxxxx,            (numeric) length of the key\n  \"value\": \"xxxxx\"          (numeric) stored value\n  \"valuesize\": xxxxx,         (string) length of the stored value\n  \"fee\": xxxxx                (string) transaction fee paid to store the key\n  \"txid\": \"xxxxx\"           (string) transaction id\n}\n\nExamples:\n> verus kvupdate examplekey \"examplevalue\" 2 examplepassphrase\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"kvupdate\", \"params\": [examplekey \"examplevalue\" 2 examplepassphrase] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetinfo\nReturns an object containing various state info.\n\nResult:\n{\n  \"version\": xxxxx,           (numeric) the server version\n  \"protocolversion\": xxxxx,   (numeric) the protocol version\n  \"walletversion\": xxxxx,     (numeric) the wallet version\n  \"blocks\": xxxxxx,           (numeric) the current number of blocks processed in the server\n  \"timeoffset\": xxxxx,        (numeric) the time offset\n  \"connections\": xxxxx,       (numeric) the number of connections\n  \"tls_established\": xxxxx,   (numeric) the number of TLS connections established\n  \"tls_verified\": xxxxx,      (numeric) the number of TLS connection with validated certificates\n  \"proxy\": \"host:port\",     (string, optional) the proxy used by the server\n  \"difficulty\": xxxxxx,       (numeric) the current difficulty\n  \"testnet\": true|false,      (boolean) if the server is using testnet or not\n  \"keypoololdest\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\n  \"keypoolsize\": xxxx,        (numeric) how many new keys are pre-generated\n  \"unlocked_until\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\n  \"paytxfee\": x.xxxx,         (numeric) the transaction fee set in VRSC/kB\n  \"relayfee\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in VRSC/kB\n  \"errors\": \"...\"           (string) any error messages\n}\n\nExamples:\n> verus getinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetblockchaininfo\nReturns an object containing various state info regarding block chain processing.\n\nNote that when the chain tip is at the last block before a network upgrade activation,\nconsensus.chaintip != consensus.nextblock.\n\nResult:\n{\n  \"chain\": \"xxxx\",        (string) current network type of blockchain (main, test, regtest)\n  \"name\": \"xxxx\",         (string) current network name of blockchain ID (VRSC, VRSCTEST, PBAASNAME)\n  \"chainid\": \"xxxx\",      (string) blockchain ID (i-address of the native blockchain currency)\n  \"blocks\": xxxxxx,         (numeric) the current number of blocks processed in the server\n  \"headers\": xxxxxx,        (numeric) the current number of headers we have validated\n  \"bestblockhash\": \"...\", (string) the hash of the currently best block\n  \"difficulty\": xxxxxx,     (numeric) the current difficulty\n  \"verificationprogress\": xxxx, (numeric) estimate of verification progress [0..1]\n  \"chainwork\": \"xxxx\"     (string) total amount of work in active chain, in hexadecimal\n  \"size_on_disk\": xxxxxx,       (numeric) the estimated size of the block and undo files on disk\n  \"commitments\": xxxxxx,    (numeric) the current number of note commitments in the commitment tree\n  \"softforks\": [            (array) status of softforks in progress\n     {\n        \"id\": \"xxxx\",        (string) name of softfork\n        \"version\": xx,         (numeric) block version\n        \"enforce\": {           (object) progress toward enforcing the softfork rules for new-version blocks\n           \"status\": xx,       (boolean) true if threshold reached\n           \"found\": xx,        (numeric) number of blocks with the new version found\n           \"required\": xx,     (numeric) number of blocks required to trigger\n           \"window\": xx,       (numeric) maximum size of examined window of recent blocks\n        },\n        \"reject\": { ... }      (object) progress toward rejecting pre-softfork blocks (same fields as \"enforce\")\n     }, ...\n  ],\n  \"upgrades\": {                (object) status of network upgrades\n     \"xxxx\" : {                (string) branch ID of the upgrade\n        \"name\": \"xxxx\",        (string) name of upgrade\n        \"activationheight\": xxxxxx,  (numeric) block height of activation\n        \"status\": \"xxxx\",      (string) status of upgrade\n        \"info\": \"xxxx\",        (string) additional information about upgrade\n     }, ...\n  },\n  \"consensus\": {               (object) branch IDs of the current and upcoming consensus rules\n     \"chaintip\": \"xxxxxxxx\",   (string) branch ID used to validate the current chain tip\n     \"nextblock\": \"xxxxxxxx\"   (string) branch ID that the next block will be validated under\n  }\n}\n\nExamples:\n> verus getblockchaininfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockchaininfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ndumpprivkey \"t-addr\"\n\nReveals the private key corresponding to 't-addr'.\nThen the importprivkey can be used with this output\n\nArguments:\n1. \"t-addr\"   (string, required) The transparent address for the private key\n\nResult:\n\"key\"         (string) The private key\n\nExamples:\n> verus dumpprivkey \"myaddress\"\n> verus importprivkey \"mykey\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ninvalidateblock \"hash\"\n\nPermanently marks a block as invalid, as if it violated a consensus rule.\n\nArguments:\n1. hash   (string, required) the hash of the block to mark as invalid\n\nResult:\n\nExamples:\n> verus invalidateblock \"blockhash\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"invalidateblock\", \"params\": [\"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nmigrate_converttoexport rawTx dest_symbol export_amount\n\nConvert a raw transaction to a cross-chain export.\nIf neccesary, the transaction should be funded using fundrawtransaction.\nFinally, the transaction should be signed using signrawtransaction\nThe finished export transaction, plus the payouts, should be passed to the \"migrate_createimporttransaction\" method on a KMD node to get the corresponding import transaction.\n\n---NEW FILE---\n\nz_importkey \"zkey\" ( rescan startHeight )\n\nAdds a zkey (as returned by z_exportkey) to your wallet.\n\nArguments:\n1. \"zkey\"             (string, required) The zkey (see z_exportkey)\n2. rescan               (string, optional, default=\"whenkeyisnew\") Rescan the wallet for transactions - can be \"yes\", \"no\" or \"whenkeyisnew\"\n3. startHeight          (numeric, optional, default=0) Block height to start rescan from\n\nNote: This call can take minutes to complete if rescan is true.\n\nExamples:\n\nExport a zkey\n> verus z_exportkey \"myaddress\"\n\nImport the zkey with rescan\n> verus z_importkey \"mykey\"\n\nImport the zkey with partial rescan\n> verus z_importkey \"mykey\" whenkeyisnew 30000\n\nRe-import the zkey with longer partial rescan\n> verus z_importkey \"mykey\" yes 20000\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_importkey\", \"params\": [\"mykey\", \"no\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetmininginfo\n\nReturns a json object containing mining-related information.\nResult:\n{\n  \"blocks\": nnn,             (numeric) The current block\n  \"currentblocksize\": nnn,   (numeric) The last block size\n  \"currentblocktx\": nnn,     (numeric) The last block transaction\n  \"averageblockfees\": xxx.xxxxx (numeric) The average block fees, in addition to block reward, over the past 100 blocks\n  \"difficulty\": xxx.xxxxx    (numeric) The current difficulty\n  \"stakingsupply\": xxx.xxxxx (numeric) The current estimated total staking supply\n  \"errors\": \"...\"          (string) Current errors\n  \"generate\": true|false     (boolean) If the generation is on or off (see getgenerate or setgenerate calls)\n  \"genproclimit\": n          (numeric) The processor limit for generation. -1 if no generation. (see getgenerate or setgenerate calls)\n  \"localsolps\": xxx.xxxxx    (numeric) The average local solution rate in Sol/s since this node was started\n  \"networksolps\": x          (numeric) The estimated network solution rate in Sol/s\n  \"pooledtx\": n              (numeric) The size of the mem pool\n  \"testnet\": true|false      (boolean) If using testnet or not\n  \"chain\": \"xxxx\",         (string) current network name as defined in BIP70 (main, test, regtest)\n  \"generate\": true|false     (boolean) If this instance is mining or staking\n  \"staking\": true|false      (boolean) If staking\n  \"numthreads\": n            (numeric) Number of CPU threads mining\n  \"mergemining\": n           (numeric) Number of blockchains we are merge mining with\n  \"mergeminedchains\": []     (optional, list of names) Blockchain names that are being merge mined with this blockchain\n}\n\nExamples:\n> verus getmininginfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmininginfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_listoperationids\n\nReturns the list of operation ids currently known to the wallet.\n\nArguments:\n1. \"status\"         (string, optional) Filter result by the operation's state e.g. \"success\".\n\nResult:\n[                     (json array of string)\n  \"operationid\"       (string) an operation id belonging to the wallet\n  ,...\n]\n\nExamples:\n> verus z_listoperationids \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_listoperationids\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetblocktemplate ( \"jsonrequestobject\" )\n\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\nIt returns data needed to construct a block to work on.\nSee https://en.bitcoin.it/wiki/BIP_0022 for full specification.\n\nArguments:\n1. \"jsonrequestobject\"       (string, optional) A json object in the following spec\n     {\n       \"mode\":\"template\"   (string, optional) This must be set to \"template\" or omitted\n       \"miningdistribution\":{\n           \"(recipientaddress)\":n,  (addressorid, relativeweight) key value to determine distribution\n           \"(recipientaddress)\":n,\n           \"...\n       \"}\n       \"capabilities\":[      (array, optional) A list of strings\n           \"support\"         (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\n           ,...\n         ]\n     }\n\n\nResult:\n{\n  \"version\" : n,                     (numeric) The block version\n  \"previousblockhash\" : \"xxxx\",    (string) The hash of current highest block\n  \"finalsaplingroothash\" : \"xxxx\", (string) The hash of the final sapling root\n  \"transactions\" : [                 (array) contents of non-coinbase transactions that should be included in the next block\n      {\n         \"data\" : \"xxxx\",          (string) transaction data encoded in hexadecimal (byte-for-byte)\n         \"hash\" : \"xxxx\",          (string) hash/id encoded in little-endian hexadecimal\n         \"depends\" : [              (array) array of numbers \n             n                        (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\n             ,...\n         ],\n         \"fee\": n,                   (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\n         \"sigops\" : n,               (numeric) total number of SigOps, as counted for purposes of block limits; if key is not present, sigop count is unknown and clients MUST NOT assume there aren't any\n         \"required\" : true|false     (boolean) if provided and true, this transaction must be in the final block\n      }\n      ,...\n  ],\n  \"coinbasetxn\" : { ... },           (json object) information for coinbase transaction\n  \"target\" : \"xxxx\",               (string) The hash target\n  \"mintime\" : xxx,                   (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)\n  \"mutable\" : [                      (array of string) list of ways the block template may be changed \n     \"value\"                         (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\n     ,...\n  ],\n  \"noncerange\" : \"00000000ffffffff\",   (string) A range of valid nonces\n  \"sigoplimit\" : n,                 (numeric) limit of sigops in blocks\n  \"sizelimit\" : n,                  (numeric) limit of block size\n  \"curtime\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)\n  \"bits\" : \"xxx\",                 (string) compressed target of next block\n  \"height\" : n                      (numeric) The height of the next block\n}\n\nExamples:\n> verus getblocktemplate \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblocktemplate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nsetgenerate generate ( genproclimit )\n\nSet 'generate' true to turn either mining/generation or minting/staking on and false to turn both off.\nMining is limited to 'genproclimit' processors, -1 is unlimited, setgenerate true with 0 genproclimit turns on staking\nSee the getgenerate call for the current setting.\n\nArguments:\n1. generate         (boolean, required) Set to true to turn on generation, off to turn off.\n2. genproclimit     (numeric, optional) Set processor limit when generation is on. Can be -1 for unlimited, 0 to turn on staking.\n\nExamples:\n\nSet the generation on with a limit of one processor\n> verus setgenerate true 1\n\nTurn minting/staking on\n> verus setgenerate true 0\n\nCheck the setting\n> verus getgenerate \n\nTurn off generation and minting\n> verus setgenerate false\n\nUsing json rpc\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setgenerate\", \"params\": [true, 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetconnectioncount\n\nReturns the number of connections to other nodes.\n\nResult:\nn          (numeric) The connection count\n\nExamples:\n> verus getconnectioncount \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_gettotalbalance ( minconf includeWatchonly )\n\nReturn the total value of funds stored in the node's wallet.\n\nCAUTION: If the wallet contains any addresses for which it only has incoming viewing keys,\nthe returned private balance may be larger than the actual balance, because spends cannot\nbe detected with incoming viewing keys.\n\nArguments:\n1. minconf          (numeric, optional, default=1) Only include private and transparent transactions confirmed at least this many times.\n2. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress' and 'z_importviewingkey')\n\nResult:\n{\n  \"transparent\": xxxxx,     (numeric) the total balance of transparent funds\n  \"private\": xxxxx,         (numeric) the total balance of shielded funds (in both Sprout and Sapling addresses)\n  \"total\": xxxxx,           (numeric) the total balance of both transparent and shielded funds\n}\n\nExamples:\n\nThe total amount in the wallet\n> verus z_gettotalbalance \n\nThe total amount in the wallet at least 5 blocks confirmed\n> verus z_gettotalbalance 5\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_gettotalbalance\", \"params\": [5] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetblockheader \"hash\" ( verbose )\n\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\nIf verbose is true, returns an Object with information about blockheader <hash>.\n\nArguments:\n1. \"hash\"          (string, required) The block hash\n2. verbose           (boolean, optional, default=true) true for a json object, false for the hex encoded data\n\nResult (for verbose = true):\n{\n  \"hash\" : \"hash\",     (string) the block hash (same as provided)\n  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\n  \"height\" : n,          (numeric) The block height or index\n  \"version\" : n,         (numeric) The block version\n  \"merkleroot\" : \"xxxx\", (string) The merkle root\n  \"finalsaplingroot\" : \"xxxx\", (string) The root of the Sapling commitment tree after applying this block\n  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n  \"nonce\" : n,           (numeric) The nonce\n  \"bits\" : \"1d00ffff\", (string) The bits\n  \"difficulty\" : x.xxx,  (numeric) The difficulty\n  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block\n  \"nextblockhash\" : \"hash\"       (string) The hash of the next block\n}\n\nResult (for verbose=false):\n\"data\"             (string) A string that is serialized, hex-encoded data for block 'hash'.\n\nExamples:\n> verus getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nscanNotarisationsDB blockHeight symbol [blocksLimit=1440]\n\nScans notarisationsdb backwards from height for a notarisation of given symbol\n\n---NEW FILE---\n\ngetNotarisationsForBlock blockHash\n\nTakes a block hash and returns notarisation transactions within the block\n\n---NEW FILE---\n\ngetlaunchinfo \"currencyid\"\n\nReturns the launch notarization data and partial transaction proof of the \nlaunch notarization for the specifed currencyid.\n\nArguments\n1. \"currencyid\"                  (string, required) the hex-encoded ID or string name  search for notarizations on\n\nResult:\n{\n  \"currencydefinition\" : {},     (json) Full currency definition\n  \"txid\" : \"hexstr\",           (hexstr) transaction ID\n  \"voutnum\" : \"n\",             (number) vout index of the launch notarization\n  \"transactionproof\" : {},       (json) Partial transaction proof of the launch transaction and output\n  \"launchnotarization\" : {},     (json) Final CPBaaSNotarization clearing launch or refund\n  \"notarynotarization\" : {},     (json) Current notarization of this chain\n}\n\nExamples:\n> verus getlaunchinfo \"currencyid\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlaunchinfo\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetunconfirmedbalance\nReturns the server's total unconfirmed balance\n\n---NEW FILE---\n\nlistbanned\n\nList all banned IPs/Subnets.\n\nExamples:\n> verus listbanned \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nrecoveridentity \"jsonidentity\" (returntx) (tokenrecover) (feeoffer) (sourceoffunds)\n\n\n\nArguments\n       \"returntx\"                        (bool,   optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned\n       \"tokenrecover\"                    (bool,   optional) defaults to false, if true, the tokenized ID control token, if one exists, will be used to recover\n       \"feeoffer\"                        (value,  optional) non-standard fee amount to pay for the transaction\n       \"sourceoffunds\"                   (string, optional) transparent or private address to source all funds for fees to preserve privacy of the identity\n\nResult:\n\nExamples:\n> verus recoveridentity '{\"name\" : \"myname\"}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"recoveridentity\", \"params\": ['{\"name\" : \"myname\"}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nsendcurrency \"fromaddress\" '[{\"address\":... ,\"amount\":...},...]' (minconfs) (feeamount) (returntxtemplate)\n\nThis sends one or many Verus outputs to one or many addresses on the same or another chain.\nFunds are sourced automatically from the current wallet, which must be present, as in sendtoaddress.\nIf \"fromaddress\" is specified, all funds will be taken from that address, otherwise funds may come\nfrom any source set of UTXOs controlled by the wallet.\n\nArguments\n1. \"fromaddress\"             (string, required) The Sapling, VerusID, or wildcard address to send funds from. \"*\", \"R*\", or \"i*\" are valid wildcards\n2. \"outputs\"                 (array, required) An array of json objects representing currencies, amounts, and destinations to send.\n    [{\n      \"currency\": \"name\"   (string, required) Name of the source currency to send in this output, defaults to native of chain\n      \"amount\":amount        (numeric, required) The numeric amount of currency, denominated in source currency\n      \"convertto\":\"name\",  (string, optional) Valid currency to convert to, either a reserve of a fractional, or fractional\n      \"addconversionfees\":\"false\", (bool, optional) Calculate additional conversion fees to convert the full amount specified after fees\n      \"exportto\":\"name\",   (string, optional) Valid chain or system name or ID to export to\n      \"exportid\":\"false\",  (bool, optional) if cross-chain export, export the full ID to the destination chain (will cost to export)\n      \"exportcurrency\":\"false\", (bool, optional) if cross-chain export, export the currency definition (will cost to export)\n      \"feecurrency\":\"name\", (string, optional) Valid currency that should be pulled from the current wallet and used to pay fee\n      \"via\":\"name\",        (string, optional) If source and destination currency are reserves, via is a common fractional to convert through\n      \"address\":\"dest\"     (string, required) The address and optionally chain/system after the \"@\" as a system specific destination\n      \"refundto\":\"dest\"    (string, optional) For pre-conversions, this is where refunds will go, defaults to fromaddress\n      \"memo\":memo            (string, optional) If destination is a zaddr (not supported on testnet), a string message (not hexadecimal) to include.\n      \"data\":\"dataobject\", (object, optional) (for data-only outputs with no other function) stores large, optionally signed data in one or more outputs.\n      \"preconvert\":\"false\", (bool,  optional) convert to currency at market price (default=false), only works if transaction is mined before start of currency\n      \"burn\":\"false\",      (bool,  optional) destroy the currency and subtract it from the supply. Currency must be a token.\n      \"mintnew\":\"false\",   (bool,  optional) if the transaction is sent from the currency ID of a centralized currency, this creates new currency to send\n    }, ... ]\n3. \"minconf\"                 (numeric, optional, default=1) only use funds confirmed at least this many times.\n4. \"feeamount\"               (number, optional) specific fee amount requested instead of default miner's fee\n\nResult:\n   \"operation-id\" : \"opid\" (string) The operation id, not public info, if (returntxtemplate) is false\n\n   If (returntxtemplate) is true   {\n       \"outputtotals\" : {currencyvaluemap}   Total outputs in all currencies that need to be input to the transaction\n       \"hextx\" : \"hexstring\"               The transaction with all specified outputs and no inputs\n   }\n\nExamples:\n> verus sendcurrency \"*\" '[{\"currency\":\"btc\",\"address\":\"RRehdmUV7oEAqoZnzEGBH34XysnWaBatct\" ,\"amount\":500.0},...]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendcurrency\", \"params\": [\"bob@\", [{\"currency\":\"btc\", \"address\":\"alice@quad\", \"amount\":500.0},...]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nminerids needs height\n\n---NEW FILE---\n\ngetaccountaddress \"account\"\n\nDEPRECATED. Returns the current VRSC address for receiving payments to this account.\n\nArguments:\n1. \"account\"       (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.\n\nResult:\n\"VRSC_address\"   (string) The account VRSC address\n\nExamples:\n> verus getaccountaddress \n> verus getaccountaddress \"\"\n> verus getaccountaddress \"myaccount\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccountaddress\", \"params\": [\"myaccount\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_getnewaddress ( type )\n\nReturns a new shielded address for receiving payments.\n\nWith no arguments, returns a Sapling address.\n\nArguments:\n1. \"type\"         (string, optional, default=\"sapling\") The type of address. One of [\"sprout\", \"sapling\"].\n\nResult:\n\"VRSC_address\"    (string) The new shielded address.\n\nExamples:\n> verus z_getnewaddress \n> verus z_getnewaddress sapling\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getnewaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_listaddresses ( includeWatchonly )\n\nReturns the list of Sprout and Sapling shielded addresses belonging to the wallet.\n\nArguments:\n1. includeWatchonly (bool, optional, default=false) Also include watchonly addresses (see 'z_importviewingkey')\n\nResult:\n[                     (json array of string)\n  \"zaddr\"           (string) a zaddr belonging to the wallet\n  ,...\n]\n\nExamples:\n> verus z_listaddresses \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_listaddresses\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nprioritisetransaction <txid> <priority delta> <fee delta>\nAccepts the transaction into mined blocks at a higher (or lower) priority\n\nArguments:\n1. \"txid\"       (string, required) The transaction id.\n2. priority delta (numeric, required) The priority to add or subtract.\n                  The transaction selection algorithm considers the tx as it would have a higher priority.\n                  (priority of a transaction is calculated: coinage * value_in_satoshis / txsize) \n3. fee delta      (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).\n                  The fee is not actually paid, only the algorithm for selecting transactions into a block\n                  considers the transaction as it would have paid a higher (or lower) fee.\n\nResult\ntrue              (boolean) Returns true\n\nExamples:\n> verus prioritisetransaction \"txid\" 0.0 10000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prioritisetransaction\", \"params\": [\"txid\", 0.0, 10000] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nlistopenoffers (unexpired) (expired)'\n\nShows offers outstanding in this wallet\n\nArguments\n  unexpired                (bool, optional) default=true, list those offers in the wallet which are not expired\n  expired                  (bool, optional) default=true, list those offers in the wallet which are expired\n\nResult\n  all open offers\n\n---NEW FILE---\n\nsubmitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\"\n\nFinishes an almost complete notarization transaction based on the notary chain and the current wallet or pubkey.\nIf successful in submitting the transaction based on all rules, a transaction ID is returned, otherwise, NULL.\n\nArguments\n\"earnednotarization\"             (object, required) notarization earned on the other system, which is the basis for this\n\"notaryevidence\"                 (object, required) evidence and notary signatures validating the notarization\n\nResult:\ntxid                               (hexstring) transaction ID of submitted transaction\n\nExamples:\n> verus submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitacceptednotarization\", \"params\": [\"{earnednotarization}\" \"{notaryevidence}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_validatepaymentdisclosure \"paymentdisclosure\"\n\nValidates a payment disclosure.\n\nEXPERIMENTAL FEATURE\n\nWARNING: z_validatepaymentdisclosure is disabled.\nTo enable it, restart zcashd with the -experimentalfeatures and\n-paymentdisclosure commandline options, or add these two lines\nto the zcash.conf file:\n\nexperimentalfeatures=1\npaymentdisclosure=1\n\nArguments:\n1. \"paymentdisclosure\"     (string, required) Hex data string, with \"zpd:\" prefix.\n\nExamples:\n> verus z_validatepaymentdisclosure \"zpd:706462ff004c561a0447ba2ec51184e6c204...\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_validatepaymentdisclosure\", \"params\": [\"zpd:706462ff004c561a0447ba2ec51184e6c204...\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nclearbanned\n\nClear all banned IPs.\n\nExamples:\n> verus clearbanned \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_listreceivedbyaddress \"address\" ( minconf )\n\nReturn a list of amounts received by a zaddr belonging to the node's wallet.\n\nArguments:\n1. \"address\"      (string) The private address.\n2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\n\nResult:\n{\n  \"txid\": \"txid\",          string) the transaction id\n  \"amount\": xxxxx,           (numeric) the amount of value in the note\n  \"memo\": xxxxx,             (string) hexadecimal string representation of memo field\n  \"jsindex\" (sprout) : n,    (numeric) the joinsplit index\n  \"jsoutindex\" (sprout) : n, (numeric) the output index of the joinsplit\n  \"outindex\" (sapling) : n,  (numeric) the output index\n  \"confirmations\" : n,       (numeric) number of block confirmations of transaction\n  \"change\": true|false,      (boolean) true if the address that received the note is also one of the sending addresses\n}\n\nExamples:\n> verus z_listreceivedbyaddress \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_listreceivedbyaddress\", \"params\": [\"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetvdxfid \"vdxfuri\" '{\"vdxfkey\":\"i-address or vdxfkey\", \"uint256\":\"hexstr\", \"indexnum\":0}'\n\nReturns the VDXF key of the URI string. For example \"vrsc::system.currency.export\"\n\nArguments:\n  \"vdxfuri\"                              (string, required) This message is converted from hex, the data is hashed, then returned\n  \"{\"\n    \"vdxfkey\":\"i-address or vdxfkey\"   (string, optional) VDXF key or i-address to combine via hash\n    \"uint256\":\"32bytehex\"              (hexstr, optional) 256 bit hash to combine with hash\n    \"indexnum\":int                       (integer, optional) int32_t number to combine with hash\n  \"}\"\n\nResult:\n{                                          (object) object with both base58check and hex vdxfid values of string and parents\n  \"vdxfid\"                               (base58check) i-ID of the URI processed with the VDXF & all combined parameters\n  \"hash160result\"                        (hexstring) 20 byte hash in hex of the URL string passed in, processed with the VDXF\n  \"qualifiedname\":                       (object) separate name and parent ID value\n  {\n    \"name\": \"namestr\"                  (string) leaf name\n    \"parentid\" | \"namespace\":\"string\" (string) parent ID (or namespace if VDXF key) of name\n  }\n  \"bounddata\": {                         (object) if additional data is bound to create the value, it is returned here  {\n    \"vdxfkey\":\"i-address or vdxfkey\"   (string) i-address that was combined via hash\n    \"uint256\":\"32bytehex\"              (hexstr) 256 bit hash combined with hash\n    \"indexnum\":int                       (integer) int32_t combined with hash\n  }\n}\n\nExamples:\n\nCreate the signature\n> verus getvdxfid \"system.currency.export\"\n\nVerify the signature\n> verus getvdxfid \"idname::userdefinedgroup.subgroup.publishedname\"\n\nAs json rpc\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getvdxfid\", \"params\": [\"idname::userdefinedgroup.subgroup.publishedname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nlockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...]\n\nUpdates list of temporarily unspendable outputs.\nTemporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\nA locked transaction output will not be chosen by automatic coin selection, when spending VRSC.\nLocks are stored in memory only. Nodes start with zero locked outputs, and the locked output list\nis always cleared (by virtue of process exit) when a node stops or fails.\nAlso see the listunspent call\n\nArguments:\n1. unlock            (boolean, required) Whether to unlock (true) or lock (false) the specified transactions\n2. \"transactions\"  (string, required) A json array of objects. Each object the txid (string) vout (numeric)\n     [           (json array of json objects)\n       {\n         \"txid\":\"id\",    (string) The transaction id\n         \"vout\": n         (numeric) The output number\n       }\n       ,...\n     ]\n\nResult:\ntrue|false    (boolean) Whether the command was successful or not\n\nExamples:\n\nList the unspent transactions\n> verus listunspent \n\nLock an unspent transaction\n> verus lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"\n\nList the locked transactions\n> verus listlockunspent \n\nUnlock the transaction again\n> verus lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nkeypoolrefill ( newsize )\n\nFills the keypool.\n\nArguments\n1. newsize     (numeric, optional, default=100) The new keypool size\n\nExamples:\n> verus keypoolrefill \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"keypoolrefill\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ncreaterawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,...} ( locktime ) ( expiryheight )\n\nCreate a transaction spending the given inputs and sending to the given addresses.\nReturns hex-encoded raw transaction.\nNote that the transaction's inputs are not signed, and\nit is not stored in the wallet or transmitted to the network.\n\nArguments:\n1. \"transactions\"        (string, required) A json array of json objects\n     [\n       {\n         \"txid\":\"id\",    (string, required) The transaction id\n         \"vout\":n        (numeric, required) The output number\n         \"sequence\":n    (numeric, optional) The sequence number\n       }\n       ,...\n     ]\n2. \"addresses\"           (string, required) a json object with addresses as keys and amounts as values\n    {\n      \"address\": x.xxx   (numeric, required) The key is the destination address or ID, the value is the VRSC amount\n      \"address\": {\"currency\": x.xxx, ...} (object, optional) The key is the destination address or ID, the value is currencies and amounts\n      \"data\": \"hex\"    (string, optional) The key is \"data\", the value is hex encoded data\n      ,...\n    }\n3. locktime              (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\n4. expiryheight          (numeric, optional, default=nextblockheight+20 (pre-Blossom) or nextblockheight+40 (post-Blossom)) Expiry height of transaction (if Overwinter is active)\n\nResult:\n\"transaction\"            (string) hex string of the transaction\n\nExamples\n> verus createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"{\"address\":0.01}\"\n> verus createrawtransaction \"[{\"txid\":\"myid\",\"vout\":0}]\" \"{\"address\":0.01,\"data\":\"00010203\"}\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\"txid\":\"myid\",\"vout\":0}]\", \"{\"address\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_getpaymentdisclosure \"txid\" \"js_index\" \"output_index\" (\"message\") \n\nGenerate a payment disclosure for a given joinsplit output.\n\nEXPERIMENTAL FEATURE\n\nWARNING: z_getpaymentdisclosure is disabled.\nTo enable it, restart zcashd with the -experimentalfeatures and\n-paymentdisclosure commandline options, or add these two lines\nto the zcash.conf file:\n\nexperimentalfeatures=1\npaymentdisclosure=1\n\nArguments:\n1. \"txid\"            (string, required) \n2. \"js_index\"        (string, required) \n3. \"output_index\"    (string, required) \n4. \"message\"         (string, optional) \n\nResult:\n\"paymentdisclosure\"  (string) Hex data string, with \"zpd:\" prefix.\n\nExamples:\n> verus z_getpaymentdisclosure 96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2 0 0 \"refund\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getpaymentdisclosure\", \"params\": [\"96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2\", 0, 0, \"refund\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetidentitieswithrevocation '{\"identityid\":\"idori-address\", \"fromheight\":height, \"toheight\":height, \"unspent\":false}'\n\n\n\nArguments\n{\n    \"identityid\":\"idori-address\" (string, required) returns all identities where this ID or i-address is the revocation authority\n    \"fromheight\":n               (number, optional, default=0) Search for qualified identities modified from this height forward only\n    \"toheight\":n                 (number, optional, default=0) Search for qualified identities only up until this height (0 == no limit)\n    \"unspent\":bool               (bool, optional, default=false) if true, this will only return active ID UTXOs as of the current block height\n}\n\nResult:\n[                                  (array) array of matching identities\n  {identityobject},                (object) identity with additional member \"txout\" with txhash and output index\n  ...\n]\n\nExamples:\n> verus getidentitieswithrevocation '{\"identityid\":\"idori-address\",\"fromheight\":height,\"toheight\":height,\"unspent\":false}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentitieswithrevocation\", \"params\": ['{\"identityid\":\"idori-address\",\"fromheight\":height,\"toheight\":height,\"unspent\":false}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nkvsearch key\n\nSearch for a key stored via the kvupdate command. This feature is only available for asset chains.\n\nArguments:\n1. key                      (string, required) search the chain for this key\n\nResult:\n{\n  \"coin\": \"xxxxx\",          (string) chain the key is stored on\n  \"currentheight\": xxxxx,     (numeric) current height of the chain\n  \"key\": \"xxxxx\",           (string) key\n  \"keylen\": xxxxx,            (string) length of the key \n  \"owner\": \"xxxxx\"          (string) hex string representing the owner of the key \n  \"height\": xxxxx,            (numeric) height the key was stored at\n  \"expiration\": xxxxx,        (numeric) height the key will expire\n  \"flags\": x                  (numeric) 1 if the key was created with a password; 0 otherwise.\n  \"value\": \"xxxxx\",         (string) stored value\n  \"valuesize\": xxxxx          (string) amount of characters stored\n}\n\nExamples:\n> verus kvsearch examplekey\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"kvsearch\", \"params\": [examplekey] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ncalc_MoM height MoMdepth\n\n---NEW FILE---\n\ngetreceivedbyaddress \"VRSC_address\" ( minconf )\n\nReturns the total amount received by the given VRSC address in transactions with at least minconf confirmations.\n\nArguments:\n1. \"VRSC_address\"  (string, required) The VRSC address for transactions.\n2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.\n\nResult:\namount   (numeric) The total amount in VRSC received at this address.\n\nExamples:\n\nThe amount from transactions with at least 1 confirmation\n> verus getreceivedbyaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\"\n\nThe amount including unconfirmed transactions, zero confirmations\n> verus getreceivedbyaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0\n\nThe amount with at least 6 confirmations, very safe\n> verus getreceivedbyaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 6\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaddress\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetaddressmempool\n\nReturns all mempool deltas for an address (requires addressindex to be enabled).\n\nArguments:\n{\n  \"addresses\"\n    [\n      \"address\"      (string) The base58check encoded address\n      ,...\n    ]\n  \"friendlynames\"    (boolean) Include additional array of friendly names keyed by currency i-addresses\n  \"verbosity\"        (number) (default == 0), if 1, include output information for spends, including all reserve amounts and destinations\n}\n\nResult:\n[\n  {\n    \"address\"  (string) The base58check encoded address\n    \"txid\"  (string) The related txid\n    \"index\"  (number) The related input or output index\n    \"satoshis\"  (number) The difference of satoshis\n    \"timestamp\"  (number) The time the transaction entered the mempool (seconds)\n    \"prevtxid\"  (string) The previous txid (if spending)\n    \"prevout\"  (string) The previous transaction output index (if spending)\n  }\n]\n\nExamples:\n> verus getaddressmempool '{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressmempool\", \"params\": [{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetaddressbalance\n\nReturns the balance for an address(es) (requires addressindex to be enabled).\n\nArguments:\n{\n  \"addresses\"\n    [\n      \"address\"  (string) The base58check encoded address\n      ,...\n    ]\n  \"friendlynames\" (boolean) Include additional array of friendly names keyed by currency i-addresses\n}\n\nResult:\n{\n  \"balance\"  (number) The current balance in satoshis\n  \"received\"  (number) The total number of satoshis received (including change)\n}\n\nExamples:\n> verus getaddressbalance '{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressbalance\", \"params\": [{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetlocalsolps\n\nReturns the average local solutions per second since this node was started.\nThis is the same information shown on the metrics screen (if enabled).\n\nResult:\nxxx.xxxxx     (numeric) Solutions per second average\n\nExamples:\n> verus getlocalsolps \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlocalsolps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_listunspent ( minconf maxconf includeWatchonly [\"zaddr\",...] )\n\nReturns array of unspent shielded notes with between minconf and maxconf (inclusive) confirmations.\nOptionally filter to only include notes sent to specified addresses.\nWhen minconf is 0, unspent notes with zero confirmations are returned, even though they are not immediately spendable.\nResults are an array of Objects, each of which has:\n{txid, jsindex, jsoutindex, confirmations, address, amount, memo} (Sprout)\n{txid, outindex, confirmations, address, amount, memo} (Sapling)\n\nArguments:\n1. minconf          (numeric, optional, default=1) The minimum confirmations to filter\n2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter\n3. includeWatchonly (bool, optional, default=false) Also include watchonly addresses (see 'z_importviewingkey')\n4. \"addresses\"      (string) A json array of zaddrs (both Sprout and Sapling) to filter on.  Duplicate addresses not allowed.\n    [\n      \"address\"     (string) zaddr\n      ,...\n    ]\n\nResult\n[                             (array of json object)\n  {\n    \"txid\" : \"txid\",          (string) the transaction id \n    \"jsindex\" (sprout) : n,       (numeric) the joinsplit index\n    \"jsoutindex\" (sprout) : n,       (numeric) the output index of the joinsplit\n    \"outindex\" (sapling) : n,       (numeric) the output index\n    \"confirmations\" : n,       (numeric) the number of confirmations\n    \"spendable\" : true|false,  (boolean) true if note can be spent by wallet, false if address is watchonly\n    \"address\" : \"address\",    (string) the shielded address\n    \"amount\": xxxxx,          (numeric) the amount of value in the note\n    \"memo\": xxxxx,            (string) hexademical string representation of memo field\n    \"change\": true|false,     (boolean) true if the address that received the note is also one of the sending addresses\n  }\n  ,...\n]\n\nExamples\n> verus z_listunspent \n> verus z_listunspent 6 9999999 false \"[\"ztbx5DLDxa5ZLFTchHhoPNkKs57QzSyib6UqXpEdy76T1aUdFxJt1w9318Z8DJ73XzbnWHKEZP9Yjg712N5kMmP4QzS9iC9\",\"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"]\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_listunspent\", \"params\": [6 9999999 false \"[\"ztbx5DLDxa5ZLFTchHhoPNkKs57QzSyib6UqXpEdy76T1aUdFxJt1w9318Z8DJ73XzbnWHKEZP9Yjg712N5kMmP4QzS9iC9\",\"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nverifyhash \"address or identity\" \"signature\" \"hexhash\" \"checklatest\"\n\nVerify a signed message\n\nArguments:\n1. \"t-addr or identity\" (string, required) The transparent address or identity that signed the data.\n2. \"signature\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage/signfile).\n3. \"hexhash\"         (string, required) Hash of the message or file that was signed.\n3. \"checklatest\"     (bool, optional)   If true, checks signature validity based on latest identity. defaults to false,\n                                          which determines validity of signing height stored in signature.\n\nResult:\ntrue|false   (boolean) If the signature is verified or not.\n\nExamples:\n\nCreate the signature\n> verus signfile \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"filepath/filename\"\nor\n> verus signmessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"my message\"\n\nVerify the signature\n> verus verifyhash \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"signature\" \"hexhash\"\n\nAs json rpc\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifyhash\", \"params\": [\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\", \"signature\", \"hexhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nregisteridentity \"jsonidregistration\" (returntx) feeoffer sourceoffunds\n\n\n\nArguments\n{\n    \"txid\" : \"hexid\",          (hex)    the transaction ID of the name commitment for this ID name\n    \"namereservation\" :\n    {\n        \"name\": \"namestr\",     (string) the unique name in this commitment\n        \"salt\": \"hexstr\",      (hex)    salt used to hide the commitment\n        \"referral\": \"identityID\", (name@ or address) must be a valid ID to use as a referrer to receive a discount\n    },\n    \"identity\" :\n    {\n        \"name\": \"namestr\",     (string) the unique name for this identity\n        ...\n    }\n}\nreturntx                           (bool, optional) default=false if true, return a transaction for additional signatures rather than committing it\nfeeoffer                           (amount, optional) amount to offer miner/staker for the registration fee, if missing, uses standard price\nsourceoffunds                      (addressorid, optional) optional address to use for source of funds. if not specified, transparent wildcard \"*\" is used\n\n\nResult:\n   transactionid                   (hexstr)\n\nExamples:\n> verus registeridentity jsonidregistration\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"registeridentity\", \"params\": [jsonidregistration] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetnetworksolps ( blocks height )\n\nReturns the estimated network solutions per second based on the last n blocks.\nPass in [blocks] to override # of blocks, -1 specifies over difficulty averaging window.\nPass in [height] to estimate the network speed at the time when a certain block was found.\n\nArguments:\n1. blocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks over difficulty averaging window.\n2. height     (numeric, optional, default=-1) To estimate at the time of the given height.\n\nResult:\nx             (numeric) Solutions per second estimated\n\nExamples:\n> verus getnetworksolps \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworksolps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nlistsinceblock ( \"blockhash\" target-confirmations includeWatchonly)\n\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\n\nArguments:\n1. \"blockhash\"   (string, optional) The block hash to list transactions since\n2. target-confirmations:    (numeric, optional) The confirmations required, must be 1 or more\n3. includeWatchonly:        (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')\nResult:\n{\n  \"transactions\": [\n    \"account\":\"accountname\",       (string) DEPRECATED. The account name associated with the transaction. Will be \"\" for the default account.\n    \"address\":\"VRSC_address\",    (string) The VRSC address of the transaction. Not present for move transactions (category = move).\n    \"category\":\"send|receive\",     (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.\n    \"amount\": x.xxx,          (numeric) The amount in VRSC. This is negative for the 'send' category, and for the 'move' category for moves \n                                          outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.\n    \"vout\" : n,               (numeric) the vout value\n    \"fee\": x.xxx,             (numeric) The amount of the fee in VRSC. This is negative and only available for the 'send' category of transactions.\n    \"confirmations\": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.\n    \"blockhash\": \"hashvalue\",     (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.\n    \"blockindex\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive' category of transactions.\n    \"blocktime\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\n    \"txid\": \"transactionid\",  (string) The transaction id. Available for 'send' and 'receive' category of transactions.\n    \"time\": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).\n    \"timereceived\": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.\n    \"comment\": \"...\",       (string) If a comment is associated with the transaction.\n    \"to\": \"...\",            (string) If a comment to is associated with the transaction.\n  ],\n  \"lastblock\": \"lastblockhash\"     (string) The hash of the last block\n}\n\nExamples:\n> verus listsinceblock \n> verus listsinceblock \"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\" 6\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listsinceblock\", \"params\": [\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nsendtoaddress \"VRSC_address\" amount ( \"comment\" \"comment-to\" subtractfeefromamount )\n\nSend an amount to a given address. The amount is a real and is rounded to the nearest 0.00000001\n\nArguments:\n1. \"VRSC_address\"  (string, required) The VRSC address to send to.\n2. \"amount\"      (numeric, required) The amount in VRSC to send. eg 0.1\n3. \"comment\"     (string, optional) A comment used to store what the transaction is for. \n                             This is not part of the transaction, just kept in your wallet.\n4. \"comment-to\"  (string, optional) A comment to store the name of the person or organization \n                             to which you're sending the transaction. This is not part of the \n                             transaction, just kept in your wallet.\n5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.\n                             The recipient will receive less VRSC than you enter in the amount field.\n\nResult:\n\"transactionid\"  (string) The transaction id.\n\nExamples:\n> verus sendtoaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.1\n> verus sendtoaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.1 \"donation\" \"seans outpost\"\n> verus sendtoaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.1 \"\" \"\" true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nestimatepriority nblocks\n\nEstimates the approximate priority\na zero-fee transaction needs to begin confirmation\nwithin nblocks blocks.\n\nArguments:\n1. nblocks     (numeric)\n\nResult:\nn :    (numeric) estimated priority\n\n-1.0 is returned if not enough transactions and\nblocks have been observed to make an estimate.\n\nExample:\n> verus estimatepriority 6\n\n---NEW FILE---\n\nstop\n\nStop the server.\n\n---NEW FILE---\n\ngetbestproofroot '{\"proofroots\":[\"version\":n,\"type\":n,\"systemid\":\"currencyidorname\",\"height\":n,                   \"stateroot\":\"hex\",\"blockhash\":\"hex\",\"power\":\"hex\"],\"lastconfirmed\":n}'\n\nDetermines and returns the index of the best (most recent, valid, qualified) proof root in the list of proof roots,\nand the most recent, valid proof root.\n\nArguments\n{\n  \"proofroots\":                  (array, required/may be empty) ordered array of proof roots, indexed on return\n  [\n    {\n      \"version\":n                (int, required) version of this proof root data structure\n      \"type\":n                   (int, required) type of proof root (chain or system specific)\n      \"systemid\":\"hexstr\"      (hexstr, required) system the proof root is for\n      \"height\":n                 (uint32_t, required) height of this proof root\n      \"stateroot\":\"hexstr\"     (hexstr, required) Merkle or merkle-style tree root for the specified block/sequence\n      \"blockhash\":\"hexstr\"     (hexstr, required) hash identifier for the specified block/sequence\n      \"power\":\"hexstr\"         (hexstr, required) work, stake, or combination of the two for most-work/most-power rule\n    }\n  .\n  .\n  .\n  ]\n  \"currencies\":[\"id1\"]         (array, optional) currencies to query for currency states\n  \"lastconfirmed\":n              (int, required) index into the proof root array indicating the last confirmed root}\n\nResult:\n\"bestindex\"                      (int) index of best proof root not confirmed that is provided, confirmed index, or -1\"latestproofroot\"                (object) latest valid proof root of chain\"laststableproofroot\"            (object) either tip-BLOCK_MATURITY or last notarized/witnessed tip\"lastconfirmedproofroot\"         (object) last proof root of chain that has been confirmed\"currencystates\"                 (int) currency states of target currency and published bridges\nExamples:\n> verus getbestproofroot \"{\"proofroots\":[\"version\":n,\"type\":n,\"systemid\":\"currencyidorname\",\"height\":n,\"stateroot\":\"hex\",\"blockhash\":\"hex\",\"power\":\"hex\"],\"lastconfirmed\":n}\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestproofroot\", \"params\": [\"{\"proofroots\":[\"version\":n,\"type\":n,\"systemid\":\"currencyidorname\",\"height\":n,\"stateroot\":\"hex\",\"blockhash\":\"hex\",\"power\":\"hex\"],\"lastconfirmed\":n}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ndumpwallet \"filename\" (omitemptytaddresses)\n\nDumps taddr wallet keys in a human-readable format.  Overwriting an existing file is not permitted.\n\nArguments:\n1. \"filename\"    (string, required) The filename, saved in folder set by verusd -exportdir option\n2. \"omitemptytaddresses\" (boolean, optional) Defaults to false. If true, export only addresses with indexed UTXOs or that control IDs in the wallet\n                                               (do not use this option without being sure that all addresses of interest are included)\n\nResult:\n\"path\"           (string) The full path of the destination file\n\nExamples:\n> verus dumpwallet \"test\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetblockhashes timestamp\n\nReturns array of hashes of blocks within the timestamp range provided.\n\nArguments:\n1. high         (numeric, required) The newer block timestamp\n2. low          (numeric, required) The older block timestamp\n3. options      (string, required) A json object\n    {\n      \"noOrphans\":true   (boolean) will only include blocks on the main chain\n      \"logicalTimes\":true   (boolean) will include logical timestamps with hashes\n    }\n\nResult:\n[\n  \"hash\"         (string) The block hash\n]\n[\n  {\n    \"blockhash\": (string) The block hash\n    \"logicalts\": (numeric) The logical timestamp\n  }\n]\n\nExamples:\n> verus getblockhashes 1231614698 1231024505\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhashes\", \"params\": [1231614698, 1231024505] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n> verus getblockhashes 1231614698 1231024505 '{\"noOrphans\":false, \"logicalTimes\":true}'\n\n---NEW FILE---\n\ngetidentity \"name@ || iid\" (height) (txproof) (txproofheight)\n\n\n\nArguments\n    \"name@ || iid\"                       (string, required) name followed by \"@\" or i-address of an identity\n    \"height\"                             (number, optional) default=current height, return identity as of this height, if -1 include mempool\n    \"txproof\"                            (bool, optional) default=false, if true, returns proof of ID\n    \"txproofheight\"                      (number, optional) default=\"height\", height from which to generate a proof\n\nResult:\n\nExamples:\n> verus getidentity \"name@\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentity\", \"params\": [\"name@\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_validateaddress \"zaddr\"\n\nReturn information about the given z address.\n\nArguments:\n1. \"zaddr\"     (string, required) The z address to validate\n\nResult:\n{\n  \"isvalid\" : true|false,      (boolean) If the address is valid or not. If not, this is the only property returned.\n  \"address\" : \"zaddr\",         (string) The z address validated\n  \"type\" : \"xxxx\",             (string) \"sprout\" or \"sapling\"\n  \"ismine\" : true|false,       (boolean) If the address is yours or not\n  \"payingkey\" : \"hex\",         (string) [sprout] The hex value of the paying key, a_pk\n  \"transmissionkey\" : \"hex\",   (string) [sprout] The hex value of the transmission key, pk_enc\n  \"diversifier\" : \"hex\",       (string) [sapling] The hex value of the diversifier, d\n  \"diversifiedtransmissionkey\" : \"hex\", (string) [sapling] The hex value of pk_d\n}\n\nExamples:\n> verus z_validateaddress \"zcWsmqT4X2V4jgxbgiCzyrAfRT1vi1F4sn7M5Pkh66izzw8Uk7LBGAH3DtcSMJeUb2pi3W4SQF8LMKkU2cUuVP68yAGcomL\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_validateaddress\", \"params\": [\"zcWsmqT4X2V4jgxbgiCzyrAfRT1vi1F4sn7M5Pkh66izzw8Uk7LBGAH3DtcSMJeUb2pi3W4SQF8LMKkU2cUuVP68yAGcomL\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ncreatemultisig nrequired [\"key\",...]\n\nCreates a multi-signature address with n signature of m keys required.\nIt returns a json object with the address and redeemScript.\n\nArguments:\n1. nrequired      (numeric, required) The number of required signatures out of the n keys or addresses.\n2. \"keys\"       (string, required) A json array of keys which are Komodo addresses or hex-encoded public keys\n     [\n       \"key\"    (string) Komodo address or hex-encoded public key\n       ,...\n     ]\n\nResult:\n{\n  \"address\":\"multisigaddress\",  (string) The value of the new multisig address.\n  \"redeemScript\":\"script\"       (string) The string value of the hex-encoded redemption script.\n}\n\nExamples:\n\nCreate a multisig address from 2 addresses\n> verus createmultisig 2 \"[\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\",\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\"]\"\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\",\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nprunespentwallettransactions \"txid\"\n\nRemove all txs that are spent. You can clear all txs bar one, by specifiying a txid.\n\nPlease backup your wallet.dat before running this command.\n\nArguments:\n1. \"txid\"    (string, optional) The transaction id to keep.\n\nResult:\n{\n  \"total_transactions\" : n,         (numeric) Transactions in wallet of VRSC\n  \"remaining_transactions\" : n,     (numeric) Transactions in wallet after clean.\n  \"removed_transactions\" : n,       (numeric) The number of transactions removed.\n}\n\nExamples:\n> verus prunespentwallettransactions \n> verus prunespentwallettransactions \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prunespentwallettransactions\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prunespentwallettransactions\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetcurrency \"currencyname\"\n\nReturns a complete definition for any given chain if it is registered on the blockchain. If the chain requested\n\nis NULL, chain definition of the current chain is returned.\n\nArguments\n1. \"currencyname\"            (string, optional) name of the chain to look for. no parameter returns current chain in daemon.\n\nResult:\n  {\n    \"version\" : n,                           (int) version of this chain definition\n    \"name\" : \"string\",                     (string) name or symbol of the chain, same as passed\n    \"fullyqualifiedname\" : \"string\",       (string) name or symbol of the chain with all parent namespaces, separated by \".\"\n    \"currencyid\" : \"i-address\",            (string) string that represents the currency ID, same as the ID behind the currency\n    \"currencyidhex\" : \"hex\",               (string) hex representation of currency ID, getcurrency API supports \"hex:currencyidhex\"\n    \"parent\" : \"i-address\",                (string) parent blockchain ID\n    \"systemid\" : \"i-address\",              (string) system on which this currency is considered to run\n    \"launchsystemid\" : \"i-address\",        (string) system from which this currency was launched\n    \"notarizationprotocol\" : n               (int) protocol number that determines variations in cross-chain or bridged notarizations\n    \"proofprotocol\" : n                      (int) protocol number that determines variations in cross-chain or bridged proofs\n    \"startblock\" : n,                        (int) block # on this chain, which must be notarized into block one of the chain\n    \"endblock\" : n,                          (int) block # after which, this chain's useful life is considered to be over\n    \"currencies\" : \"[\"i-address\", ...]\", (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket\n    \"weights\" : \"[n, ...]\",                (numberarray) relative currency weights (only returned for a liquidity basket)\n    \"conversions\" : \"[n, ...]\",            (numberarray) pre-launch conversion rates for non-fractional currencies\n    \"minpreconversion\" : \"[n, ...]\",       (numberarray) minimum amounts required in pre-conversions for currency to launch\n    \"currencies\" : \"[\"i-address\", ...]\", (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket\n    \"currencynames\" : \"{\"i-address\":\"fullname\",...}\", (obj) i-addresses mapped to fully qualified names of all sub-currencies\n    \"initialsupply\" : n,                     (number) initial currency supply for fractional currencies before preallocation or issuance\n    \"prelaunchcarveout\" : n,                 (number) pre-launch percentage of proceeds for fractional currency sent to launching ID\n    \"preallocations\" : \"[{\"i-address\":n}, ...]\", (objarray) VerusIDs and amounts for pre-allocation at launch\n    \"initialcontributions\" : \"[n, ...]\",   (numberarray) amounts of pre-conversions reserved for launching ID\n    \"idregistrationfees\" : n,                (number) base cost of IDs for this currency namespace in this currency\n    \"idreferrallevels\" : n,                  (int) levels of ID referrals (only for native PBaaS chains and IDs)\n    \"idimportfees\" : n,                      (number) fees required to import an ID to this system (only for native PBaaS chains and IDs)\n    \"eras\" : \"[obj, ...]\",                 (objarray) different chain phases of rewards and convertibility\n    {\n      \"reward\" : \"[n, ...]\",               (int) reward start for each era in native coin\n      \"decay\" : \"[n, ...]\",                (int) exponential or linear decay of rewards during each era\n      \"halving\" : \"[n, ...]\",              (int) blocks between halvings during each era\n      \"eraend\" : \"[n, ...]\",               (int) block marking the end of each era\n      \"eraoptions\" : \"[n, ...]\",           (int) options (reserved)\n    }\n    \"nodes\"      : \"[obj, ..]\",    (objectarray, optional) up to 8 nodes that can be used to connect to the blockchain      [{\n         \"nodeidentity\" : \"txid\", (string,  optional) internet, TOR, or other supported address for node\n         \"paymentaddress\" : n,     (int,     optional) rewards payment address\n       }, .. ]\n    \"lastconfirmedcurrencystate\" : {\n     }\n    \"besttxid\" : \"txid\"\n     }\n    \"confirmednotarization\" : {\n     }\n    \"confirmedtxid\" : \"txid\"\n  }\n\nExamples:\n> verus getcurrency \"currencyname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrency\", \"params\": [\"currencyname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngenerate numblocks\n\nMine blocks immediately (before the RPC call returns)\n\nNote: this function can only be used on the regtest network\n\nArguments:\n1. numblocks    (numeric) How many blocks are generated immediately.\n\nResult\n[ blockhashes ]     (array) hashes of blocks generated\n\nExamples:\n\nGenerate 11 blocks\n> verus generate 11\n\n---NEW FILE---\n\ngetblockcount\n\nReturns the number of blocks in the best valid block chain.\n\nResult:\nn    (numeric) The current block count\n\nExamples:\n> verus getblockcount \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockcount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nverifytxoutproof \"proof\"\n\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\nand throwing an RPC error if the block is not in our best chain\n\nArguments:\n1. \"proof\"    (string, required) The hex-encoded proof generated by gettxoutproof\n\nResult:\n[\"txid\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid\n\n---NEW FILE---\n\ngetbalance ( \"account\" minconf includeWatchonly )\n\nReturns the server's total available balance.\n\nArguments:\n1. \"account\"      (string, optional) DEPRECATED. If provided, it MUST be set to the empty string \"\" or to the string \"*\", either of which will give the total available balance. Passing any other string will result in an error.\n2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\n3. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress')\n\nResult:\namount              (numeric) The total amount in VRSC received for this account.\n\nExamples:\n\nThe total amount in the wallet\n> verus getbalance \n\nThe total amount in the wallet at least 5 blocks confirmed\n> verus getbalance \"*\" 6\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbalance\", \"params\": [\"*\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetwalletinfo\nReturns an object containing various wallet state info.\n\nResult:\n{\n  \"walletversion\": xxxxx,     (numeric) the wallet version\n  \"balance\": xxxxxxx,         (numeric) the total confirmed balance of the wallet in VRSC\n  \"reserve_balance\": xxxxxxx, (numeric) for PBaaS reserve chains, the total confirmed reserve balance of the wallet in VRSC\n  \"unconfirmed_balance\": xxx, (numeric) the total unconfirmed balance of the wallet in VRSC\n  \"unconfirmed_reserve_balance\": xxx, (numeric) total unconfirmed reserve balance of the wallet in VRSC\n  \"immature_balance\": xxxxxx, (numeric) the total immature balance of the wallet in VRSC\n  \"immature_reserve_balance\": xxxxxx, (numeric) total immature reserve balance of the wallet in VRSC\n  \"eligible_staking_balance\": xxxxxx, (numeric) eligible staking balance in VRSC\n  \"txcount\": xxxxxxx,         (numeric) the total number of transactions in the wallet\n  \"keypoololdest\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\n  \"keypoolsize\": xxxx,        (numeric) how many new keys are pre-generated\n  \"unlocked_until\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\n  \"paytxfee\": x.xxxx,         (numeric) the transaction fee configuration, set in VRSC/kB\n  \"seedfp\": \"uint256\",      (string) the BLAKE2b-256 hash of the HD seed\n}\n\nExamples:\n> verus getwalletinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngettxoutsetinfo\n\nReturns statistics about the unspent transaction output set.\nNote this call may take some time.\n\nResult:\n{\n  \"height\":n,     (numeric) The current block height (index)\n  \"bestblock\": \"hex\",   (string) the best block hash hex\n  \"transactions\": n,      (numeric) The number of transactions\n  \"txouts\": n,            (numeric) The number of output transactions\n  \"bytes_serialized\": n,  (numeric) The serialized size\n  \"hash_serialized\": \"hash\",   (string) The serialized hash\n  \"total_amount\": x.xxx          (numeric) The total amount\n}\n\nExamples:\n> verus gettxoutsetinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_gettreestate \"hash|height\"\nReturn information about the given block's tree state.\n\nArguments:\n1. \"hash|height\"          (string, required) The block hash or height. Height can be negative where -1 is the last known valid block\n\nResult:\n{\n  \"hash\": \"hash\",         (string) hex block hash\n  \"height\": n,            (numeric) block height\n  \"sprout\": {\n    \"skipHash\": \"hash\",   (string) hash of most recent block with more information\n    \"commitments\": {\n      \"finalRoot\": \"hex\", (string)\n      \"finalState\": \"hex\" (string)\n    }\n  },\n  \"sapling\": {\n    \"skipHash\": \"hash\",   (string) hash of most recent block with more information\n    \"commitments\": {\n      \"finalRoot\": \"hex\", (string)\n      \"finalState\": \"hex\" (string)\n    }\n  }\n}\n\nExamples:\n> verus z_gettreestate \"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_gettreestate\", \"params\": [\"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n> verus z_gettreestate 12800\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_gettreestate\", \"params\": [12800] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngettransaction \"txid\" ( includeWatchonly )\n\nGet detailed information about in-wallet transaction <txid>\n\nArguments:\n1. \"txid\"    (string, required) The transaction id\n2. \"includeWatchonly\"    (bool, optional, default=false) Whether to include watchonly addresses in balance calculation and details[]\n\nResult:\n{\n  \"amount\" : x.xxx,        (numeric) The transaction amount in VRSC\n  \"confirmations\" : n,     (numeric) The number of confirmations\n  \"blockhash\" : \"hash\",  (string) The block hash\n  \"blockindex\" : xx,       (numeric) The block index\n  \"blocktime\" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)\n  \"txid\" : \"transactionid\",   (string) The transaction id.\n  \"time\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)\n  \"timereceived\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)\n  \"details\" : [\n    {\n      \"account\" : \"accountname\",  (string) DEPRECATED. The account name involved in the transaction, can be \"\" for the default account.\n      \"address\" : \"VRSC_address\",   (string) The VRSC address involved in the transaction\n      \"category\" : \"send|receive\",    (string) The category, either 'send' or 'receive'\n      \"amount\" : x.xxx                  (numeric) The amount in VRSC\n      \"vout\" : n,                       (numeric) the vout value\n    }\n    ,...\n  ],\n  \"vjoinsplit\" : [\n    {\n      \"anchor\" : \"treestateref\",          (string) Merkle root of note commitment tree\n      \"nullifiers\" : [ string, ... ]      (string) Nullifiers of input notes\n      \"commitments\" : [ string, ... ]     (string) Note commitments for note outputs\n      \"macs\" : [ string, ... ]            (string) Message authentication tags\n      \"vpub_old\" : x.xxx                  (numeric) The amount removed from the transparent value pool\n      \"vpub_new\" : x.xxx,                 (numeric) The amount added to the transparent value pool\n    }\n    ,...\n  ],\n  \"hex\" : \"data\"         (string) Raw data for transaction\n}\n\nExamples:\n> verus gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"\n> verus gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetnotarizationdata \"currencynameorid\" (getevidence) (separatecounterevidence)\n\nReturns the latest PBaaS notarization data for the specifed currencyid.\n\nArguments\n1. \"currencyid\"                  (string, required) the hex-encoded ID or string name search for notarizations on\n2. \"(getevidence)\"               (bool, optional)    if true, returns notarization evidence as well as other data\n1. \"(separatecounterevidence)\"   (bool, optional)    if true, counter-evidence is processed and returned with proofroots\n\nResult:\n{\n  \"version\" : n,                 (numeric) The notarization protocol version\n}\n\nExamples:\n> verus getnotarizationdata \"currencyid\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationdata\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nrefundfailedlaunch \"currencyid\"\n\nRefunds any funds sent to the chain if they are eligible for refund.\nThis attempts to refund all transactions for all contributors.\n\nArguments\n\"currencyid\"         (iaddress or full chain name, required)   the chain to refund contributions to\n\nResult:\n\nExamples:\n> verus refundfailedlaunch \"currencyid\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"refundfailedlaunch\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetreceivedbyaccount \"account\" ( minconf )\n\nDEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.\n\nArguments:\n1. \"account\"      (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.\n2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\n\nResult:\namount              (numeric) The total amount in VRSC received for this account.\n\nExamples:\n\nAmount received by the default account with at least 1 confirmation\n> verus getreceivedbyaccount \"\"\n\nAmount received at the tabby account including unconfirmed amounts with zero confirmations\n> verus getreceivedbyaccount \"tabby\" 0\n\nThe amount with at least 6 confirmation, very safe\n> verus getreceivedbyaccount \"tabby\" 6\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaccount\", \"params\": [\"tabby\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nsignfile \"address or identity\" \"filepath/filename\" \"currentsig\"\n\nGenerates a SHA256D hash of the file, returns the hash, and signs the hash with the private key specified\n\nArguments:\n1. \"t-addr or identity\" (string, required) The transparent address or identity to use for signing.\n2. \"filename\"        (string, required) Local file to sign\n2. \"cursig\"          (string) The current signature of the message encoded in base 64 if multisig ID\n\nResult:\n{\n  \"hash\":\"hexhash\"         (string) The hash of the message (SHA256, NOT SHA256D)\n  \"signature\":\"base64sig\"  (string) The aggregate signature of the message encoded in base 64 if all or partial signing successful\n}\n\nExamples:\n\nCreate the signature\n> verus signfile \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" \"filepath/filename\"\n\nVerify the signature\n> verus verifyfile \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" \"signature\" \"filepath/filename\"\n\nAs json rpc\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signfile\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", \"filepath/filename\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetminingdistribution\n\nRetrieves current mining distribution\n\nArguments: NONE\n\n\nResult:\n     NULL object if not set\n     If set:\n     {\n       \"uniquedestination1\":value    (key/number) valid destination address and relative value output to it\n       \"uniquedestination2\":value    (key/number) destination address and relative value output\n       ...\n     }\n\nExamples:\n> verus getminingdistribution \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getminingdistribution\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nsubmitblock \"hexdata\" ( \"jsonparametersobject\" )\n\nAttempts to submit new block to network.\nThe 'jsonparametersobject' parameter is currently ignored.\nSee https://en.bitcoin.it/wiki/BIP_0022 for full specification.\n\nArguments\n1. \"hexdata\"    (string, required) the hex-encoded block data to submit\n2. \"jsonparametersobject\"     (string, optional) object of optional parameters\n    {\n      \"workid\" : \"id\"    (string, optional) if the server provided a workid, it MUST be included with submissions\n    }\n\nResult:\n\"duplicate\" - node already has valid copy of block\n\"duplicate-invalid\" - node already has block, but it is invalid\n\"duplicate-inconclusive\" - node already has block but has not validated it\n\"inconclusive\" - node has not validated the block, it may not be on the node's current best chain\n\"rejected\" - block was rejected as invalid\nFor more information on submitblock parameters and results, see: https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki#block-submission\n\nExamples:\n> verus submitblock \"mydata\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetrawchangeaddress\n\nReturns a new VRSC address, for receiving change.\nThis is for use with raw transactions, NOT normal use.\n\nResult:\n\"address\"    (string) The address\n\nExamples:\n> verus getrawchangeaddress \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawchangeaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nbackupwallet \"destination\"\n\nSafely copies wallet.dat to destination filename\n\nArguments:\n1. \"destination\"   (string, required) The destination filename, saved in the directory set by -exportdir option.\n\nResult:\n\"path\"             (string) The full path of the destination file\n\nExamples:\n> verus backupwallet \"backupdata\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"backupwallet\", \"params\": [\"backupdata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetrawmempool ( verbose )\n\nReturns all transaction ids in memory pool as a json array of string transaction ids.\n\nArguments:\n1. verbose           (boolean, optional, default=false) true for a json object, false for array of transaction ids\n\nResult: (for verbose = false):\n[                     (json array of string)\n  \"transactionid\"     (string) The transaction id\n  ,...\n]\n\nResult: (for verbose = true):\n{                           (json object)\n  \"transactionid\" : {       (json object)\n    \"size\" : n,             (numeric) transaction size in bytes\n    \"fee\" : n,              (numeric) transaction fee in VRSC\n    \"time\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\n    \"height\" : n,           (numeric) block height when transaction entered pool\n    \"startingpriority\" : n, (numeric) priority when transaction entered pool\n    \"currentpriority\" : n,  (numeric) transaction priority now\n    \"depends\" : [           (array) unconfirmed transactions used as inputs for this transaction\n        \"transactionid\",    (string) parent transaction id\n       ... ]\n  }, ...\n}\n\nExamples\n> verus getrawmempool true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawmempool\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetaddressesbyaccount \"account\"\n\nDEPRECATED. Returns the list of addresses for the given account.\n\nArguments:\n1. \"account\"  (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.\n\nResult:\n[                     (json array of string)\n  \"VRSC_address\"  (string) a VRSC address associated with the given account\n  ,...\n]\n\nExamples:\n> verus getaddressesbyaccount \"tabby\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressesbyaccount\", \"params\": [\"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\naddnode \"node\" \"add|remove|onetry\"\n\nAttempts add or remove a node from the addnode list.\nOr try a connection to a node once.\n\nArguments:\n1. \"node\"     (string, required) The node (see getpeerinfo for nodes)\n2. \"command\"  (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\n\nExamples:\n> verus addnode \"192.168.0.6:8233\" \"onetry\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8233\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ncoinsupply <height>\n\nReturn coin supply information at a given block height. If no height is given, the current height is used.\n\nArguments:\n1. \"height\"     (integer, optional) Block height\n\nResult:\n{\n  \"result\" : \"success\",         (string) If the request was successful.\n  \"coin\" : \"VRSC\",              (string) The currency symbol of the native coin of this blockchain.\n  \"height\" : 420,                 (integer) The height of this coin supply data\n  \"supply\" : \"777.0\",           (float) The transparent coin supply\n  \"zfunds\" : \"0.777\",           (float) The shielded coin supply (in zaddrs)\n  \"total\" :  \"777.777\",         (float) The total coin supply, i.e. sum of supply + zfunds\n}\n\nExamples:\n> verus coinsupply 420\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"coinsupply\", \"params\": [420] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nsetidentitytrust '{\"clearall\": bool, \"setratings\":{\"id\":JSONRatingObject,...}, \"removeratings\":[\"id\",...], \"identitytrustmode\":<n>}'\n\n\n\nArguments\n{\n    \"clearall\": bool                             (bool, optional) clears all wallet identity trust lists before adding, removing, or trust mode operations\n    \"setratings\":{\"id\":JSONRatingObject,...}   (obj, optional) replaces ratings for specified IDs with those given\n    \"removeratings\":[\"id\",...]                 (strarray, optional) erases ratings for IDs specified\n    \"identitytrustmode\": <n>                     (number, optional) 0 = no restriction on sync, 1 = only sync to IDs rated approved, 2 = sync to all IDs but those on block list\n}\n\nResult:\nno return on success, else error\n\nExamples:\n> verus setidentitytrust '{\"clearall\": bool, \"setratings\":{\"id\":JSONRatingObject,...}, \"removeratings\":[\"id\",...], \"identitytrustmode\":<n>}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setidentitytrust\", \"params\": ['{\"clearall\": bool, \"setratings\":{\"id\":JSONRatingObject,...}, \"removeratings\":[\"id\",...], \"identitytrustmode\":<n>}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetmempoolinfo\n\nReturns details on the active state of the TX memory pool.\n\nResult:\n{\n  \"size\": xxxxx                (numeric) Current tx count\n  \"bytes\": xxxxx               (numeric) Sum of all tx sizes\n  \"usage\": xxxxx               (numeric) Total memory usage for the mempool\n}\n\nExamples:\n> verus getmempoolinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nsendrawtransaction \"hexstring\" ( allowhighfees )\n\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\n\nAlso see createrawtransaction and signrawtransaction calls.\n\nArguments:\n1. \"hexstring\"    (string, required) The hex string of the raw transaction)\n2. allowhighfees    (boolean, optional, default=false) Allow high fees\n\nResult:\n\"hex\"             (string) The transaction hash in hex\n\nExamples:\n\nCreate a transaction\n> verus createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"\nSign the transaction, and get back the hex\n> verus signrawtransaction \"myhex\"\n\nSend the transaction (signed hex)\n> verus sendrawtransaction \"signedhex\"\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetblocksubsidy height\n\nReturns block subsidy reward, taking into account the mining slow start and the founders reward, of block at index provided.\n\nArguments:\n1. height         (numeric, optional) The block height.  If not provided, defaults to the current height of the chain.\n\nResult:\n{\n  \"miner\" : x.xxx           (numeric) The mining reward amount in KMD.\n}\n\nExamples:\n> verus getblocksubsidy 1000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockubsidy\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetlastimportfrom \"systemname\"\n\nReturns the last import from a specific originating system.\n\nArguments\n1. \"systemname\"                      (string, optional) name or ID of the system to retrieve the last import from\n\nResult:\n  {\n     \"lastimport\" :                  (object) last import from the indicated system on this chain\n       {\n       }\n     \"lastconfirmednotarization\" :   (object) last confirmed notarization of the indicated system on this chain\n       {\n       }\n  }\n\nExamples:\n> verus getlastimportfrom \"systemname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlastimportfrom\", \"params\": [\"systemname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nsigndata '{\"address\":\"i-address or friendly name to sign with (t-address will result in simple signature w/indicated hash and prefix, nothing else)\",\n           \"prefixstring\":\"extra string that is hashed during signature and must be supplied for verification\",\n             \"filename\":\"filepath/filename\" |\n             \"message\":\"any message\" |\n             \"vdxfdata\":\"vdxf encoded data\" |\n             \"messagehex\":\"hexdata\" |\n             \"messagebase64\":\"base64data\" |\n             \"datahash\":\"256bithex\" |\n             \"mmrdata\":[{\"filename | serializedhex | serializedbase64 | vdxfdata | message | datahash\":\"str\"} | \"strdata\"],\n             \"mmrsalt\":[array of \"salt\" to match the mmrdata],\n             \"mmrhash\":\"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\",\n             \"priormmr\":\"[array of mmr hashes prior to this data and optional prior tx reference for rev-linked MMR data]\",           \"vdxfkeys\":[\"vdxfkey i-address\", ...],\n           \"vdxfkeynames\":[\"vdxfkeyname, object for getvdxfid API, or friendly name ID -- no i-addresses\", ...],\n           \"boundhashes\":[\"hexhash\", ...],\n           \"hashtype\": \"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\",\n           \"encrypttoaddress\": \"sapling address\",              granularly encrypt all data, either all decryptable with viewing key or parts using unique, SSKs\n           \"createmmr\":\"bool\",                                 if true, 1 or more objects will be put into a merkle mountain range and the root signed\n           \"signature\":\"currentsig\"}'\n\n\nGenerates a hash (SHA256 default if \"hashtype\" not specified) of the data, returns the hash, and signs it with parameters specified\n\nArguments:\n{\n  \"address\":\"t-addr or identity\"                               (string, required) The transparent address or identity to use for signing.\n  \"filename\" | \"message\" | \"messagehex\" | \"messagebase64\" | \"datahash\" (string, optional) Data to sign\n  \"mmrdata\":[{\"filename | vdxfdata | message | serializedhex | serializedbase64 | datahash\":\"str\"}], (array, optional) Alternate to single data parameters, this enables an MMR signing\n             \"mmrsalt\":[\"salt\":\"str\"],                       (string, optional) Protects privacy of leaf nodes of the MMR\n             \"mmrhashtype\":\"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\", (string, optional) Default is blake2b\n             \"priormmr\":\"[{\"idxhash\":,\"utxoref\":{}}]\",   (array, optional)  When growing an MMR, the prior hashes can be used to construct the MMR and root w/o data\n  \"vdxfkeys\":[\"vdxfkey\", ...],                                 (array, optional)  Array of vdxfkeys or ID i-addresses\n  \"vdxfkeynames\":[\"vdxfkeyname\", ...],                         (array, optional)  Array of vdxfkey names or fully qualified friendly IDs\n  \"boundhashes\":[\"hexhash\", ...],                              (array, optional)  Array of bound hash values\n  \"hashtype\":\"str\",                                            (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256\n  \"signature\":\"base64str\",                                     (string, optional) The current signature of the message encoded in base 64 if multisig ID\n  \"encrypttoaddress\":\"saplingaddress\",                         (string, optional) If present, encrypts and optionally returns encrypted data.\n                                                                                   All data can be decrypted with the incoming viewing key, and a unique decryption key can\n                                                                                   be generated for each sub-object.\n  \"createmmr\":\"bool\",                                          (bool, optional)   If this is true, OR there is more than one item to sign, returns processed data, MMRs, and root signature\n}\n\nResult:\n{\n  \"hash\":\"hexhash\"         (string) The hash of the message or null and returns \"hashes\", an array of hashes for an MMR\n  \"hashes\":[\"hexhash\"]     (array)  Array of hashes for an MMR, alternate to \"hash\"\n  \"mmrroot\":\"hexstr\"       (string) Only returned when passed an array for signing root hash of the merkle mountain range of the objects signed\n  \"vdxfkeys\":[\"vdxfkey i-address\", ...],\n  \"vdxfkeynames\":[\"vdxfkeyname, object for getvdxfid API, or friendly name ID -- no i-addresses\", ...],\n  \"boundhashes\":[\"hexhash\", ...],\n  \"hashtype\": \"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\"\n  \"signature\":\"base64sig\"  (string) The aggregate signature of the message or mmrroot encoded in base 64 if all or partial signing successful for MMR, it is of root\n  \"\"}\n\nExamples:\n\nCreate the signature\n> verus signdata '{\"address\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\"}'\n\nVerify the signature\n> verus verifysignature '{\"address\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}'\n\nAs json rpc\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signdata\", \"params\": ['{\"address\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\"}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nimportwallet \"filename\"\n\nImports taddr keys from a wallet dump file (see dumpwallet).\n\nArguments:\n1. \"filename\"    (string, required) The wallet file\n\nExamples:\n\nDump the wallet\n> verus dumpwallet \"nameofbackup\"\n\nImport the wallet\n> verus importwallet \"path/to/exportdir/nameofbackup\"\n\nImport using the json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importwallet\", \"params\": [\"path/to/exportdir/nameofbackup\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetblock \"hash|height\" ( verbosity )\n\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for the block.\nIf verbosity is 1, returns an Object with information about the block.\nIf verbosity is 2, returns an Object with information about the block and information about each transaction. \n\nArguments:\n1. \"hash|height\"          (string, required) The block hash or height\n2. verbosity              (numeric, optional, default=1) 0 for hex encoded data, 1 for a json object, and 2 for json object with transaction data\n\nResult (for verbosity = 0):\n\"data\"             (string) A string that is serialized, hex-encoded data for the block.\n\nResult (for verbosity = 1):\n{\n  \"hash\" : \"hash\",       (string) the block hash (same as provided hash)\n  \"confirmations\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\n  \"size\" : n,            (numeric) The block size\n  \"height\" : n,          (numeric) The block height or index (same as provided height)\n  \"version\" : n,         (numeric) The block version\n  \"merkleroot\" : \"xxxx\", (string) The merkle root\n  \"finalsaplingroot\" : \"xxxx\", (string) The root of the Sapling commitment tree after applying this block\n  \"tx\" : [               (array of string) The transaction ids\n     \"transactionid\"     (string) The transaction id\n     ,...\n  ],\n  \"time\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n  \"nonce\" : n,           (numeric) The nonce\n  \"bits\" : \"1d00ffff\",   (string) The bits\n  \"difficulty\" : x.xxx,  (numeric) The difficulty\n  \"previousblockhash\" : \"hash\",  (string) The hash of the previous block\n  \"nextblockhash\" : \"hash\"       (string) The hash of the next block\n}\n\nResult (for verbosity = 2):\n{\n  ...,                     Same output as verbosity = 1.\n  \"tx\" : [               (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result.\n         ,...\n  ],\n  ,...                     Same output as verbosity = 1.\n}\n\nExamples:\n> verus getblock \"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n> verus getblock 12800\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [12800] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_exportwallet \"filename\" (omitemptytaddresses)\n\nExports all wallet keys, for taddr and zaddr, in a human-readable format.  Overwriting an existing file is not permitted.\n\nArguments:\n1. \"filename\"            (string, required) The filename, saved in folder set by verusd -exportdir option\n2. \"omitemptytaddresses\" (boolean, optional) Defaults to false. If true, export only addresses with indexed UTXOs or that control IDs in the wallet\n                                               (do not use this option without being sure that all addresses of interest are included)\n\nResult:\n\"path\"           (string) The full path of the destination file\n\nExamples:\n> verus z_exportwallet \"test\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_exportwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_importviewingkey \"vkey\" ( rescan startHeight )\n\nAdds a viewing key (as returned by z_exportviewingkey) to your wallet.\n\nArguments:\n1. \"vkey\"             (string, required) The viewing key (see z_exportviewingkey)\n2. rescan             (string, optional, default=\"whenkeyisnew\") Rescan the wallet for transactions - can be \"yes\", \"no\" or \"whenkeyisnew\"\n3. startHeight        (numeric, optional, default=0) Block height to start rescan from\n\nNote: This call can take minutes to complete if rescan is true.\n\nResult:\n{\n  \"type\" : \"xxxx\",                         (string) \"sprout\" or \"sapling\"\n  \"address\" : \"address|DefaultAddress\",    (string) The address corresponding to the viewing key (for Sapling, this is the default address).\n}\n\nExamples:\n\nImport a viewing key\n> verus z_importviewingkey \"vkey\"\n\nImport the viewing key without rescan\n> verus z_importviewingkey \"vkey\", no\n\nImport the viewing key with partial rescan\n> verus z_importviewingkey \"vkey\" whenkeyisnew 30000\n\nRe-import the viewing key with longer partial rescan\n> verus z_importviewingkey \"vkey\" yes 20000\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_importviewingkey\", \"params\": [\"vkey\", \"no\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nlistlockunspent\n\nReturns list of temporarily unspendable outputs.\nSee the lockunspent call to lock and unlock transactions for spending.\n\nResult:\n[\n  {\n    \"txid\" : \"transactionid\",     (string) The transaction id locked\n    \"vout\" : n                      (numeric) The vout value\n  }\n  ,...\n]\n\nExamples:\n\nList the unspent transactions\n> verus listunspent \n\nLock an unspent transaction\n> verus lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"\n\nList the locked transactions\n> verus listlockunspent \n\nUnlock the transaction again\n> verus lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nlistcurrencies ({query object}) startblock endblock\n\nReturns a complete definition for any given chain if it is registered on the blockchain. If the chain requested\n\nis NULL, chain definition of the current chain is returned.\n\nArguments\n{                                    (json, optional) specify valid query conditions\n   \"launchstate\" :                   (\"prelaunch\" | \"launched\" | \"refund\" | \"complete\") (optional) return only currencies in that state\n   \"systemtype\" :                    (\"local\" | \"imported\" | \"gateway\" | \"pbaas\")\n   \"fromsystem\" :                    (\"systemnameeorid\") default is the local chain, but if currency is from another system, specify here\n   \"converter\": [\"currency1\", (\"currency2\")] (array, optional) default empty, only return fractional currency converters of one or more currencies\n}\n\nResult:\n[\n  {\n    \"version\" : n,                           (int) version of this chain definition\n    \"name\" : \"string\",                     (string) name or symbol of the chain, same as passed\n    \"fullyqualifiedname\" : \"string\",       (string) name or symbol of the chain with all parent namespaces, separated by \".\"\n    \"currencyid\" : \"i-address\",            (string) string that represents the currency ID, same as the ID behind the currency\n    \"currencyidhex\" : \"hex\",               (string) hex representation of currency ID, getcurrency API supports \"hex:currencyidhex\"\n    \"parent\" : \"i-address\",                (string) parent blockchain ID\n    \"systemid\" : \"i-address\",              (string) system on which this currency is considered to run\n    \"launchsystemid\" : \"i-address\",        (string) system from which this currency was launched\n    \"notarizationprotocol\" : n               (int) protocol number that determines variations in cross-chain or bridged notarizations\n    \"proofprotocol\" : n                      (int) protocol number that determines variations in cross-chain or bridged proofs\n    \"startblock\" : n,                        (int) block # on this chain, which must be notarized into block one of the chain\n    \"endblock\" : n,                          (int) block # after which, this chain's useful life is considered to be over\n    \"currencies\" : \"[\"i-address\", ...]\", (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket\n    \"weights\" : \"[n, ...]\",                (numberarray) relative currency weights (only returned for a liquidity basket)\n    \"conversions\" : \"[n, ...]\",            (numberarray) pre-launch conversion rates for non-fractional currencies\n    \"minpreconversion\" : \"[n, ...]\",       (numberarray) minimum amounts required in pre-conversions for currency to launch\n    \"currencies\" : \"[\"i-address\", ...]\", (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket\n    \"currencynames\" : \"{\"i-address\":\"fullname\",...}\", (obj) i-addresses mapped to fully qualified names of all sub-currencies\n    \"initialsupply\" : n,                     (number) initial currency supply for fractional currencies before preallocation or issuance\n    \"prelaunchcarveout\" : n,                 (number) pre-launch percentage of proceeds for fractional currency sent to launching ID\n    \"preallocations\" : \"[{\"i-address\":n}, ...]\", (objarray) VerusIDs and amounts for pre-allocation at launch\n    \"initialcontributions\" : \"[n, ...]\",   (numberarray) amounts of pre-conversions reserved for launching ID\n    \"idregistrationfees\" : n,                (number) base cost of IDs for this currency namespace in this currency\n    \"idreferrallevels\" : n,                  (int) levels of ID referrals (only for native PBaaS chains and IDs)\n    \"idimportfees\" : n,                      (number) fees required to import an ID to this system (only for native PBaaS chains and IDs)\n    \"eras\" : \"[obj, ...]\",                 (objarray) different chain phases of rewards and convertibility\n    {\n      \"reward\" : \"[n, ...]\",               (int) reward start for each era in native coin\n      \"decay\" : \"[n, ...]\",                (int) exponential or linear decay of rewards during each era\n      \"halving\" : \"[n, ...]\",              (int) blocks between halvings during each era\n      \"eraend\" : \"[n, ...]\",               (int) block marking the end of each era\n      \"eraoptions\" : \"[n, ...]\",           (int) options (reserved)\n    }\n    \"nodes\"      : \"[obj, ..]\",    (objectarray, optional) up to 8 nodes that can be used to connect to the blockchain      [{\n         \"nodeidentity\" : \"txid\", (string,  optional) internet, TOR, or other supported address for node\n         \"paymentaddress\" : n,     (int,     optional) rewards payment address\n       }, .. ]\n    \"lastconfirmedcurrencystate\" : {\n     }\n    \"besttxid\" : \"txid\"\n     }\n    \"confirmednotarization\" : {\n     }\n    \"confirmedtxid\" : \"txid\"\n  }, ...\n]\n\nExamples:\n> verus listcurrencies true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listcurrencies\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nconvertpassphrase \"walletpassphrase\"\n\nConverts Verus Desktop, Agama, Verus Agama, or Verus Mobile passphrase to a private key and WIF (for import with importprivkey).\n\nArguments:\n1. \"walletpassphrase\"   (string, required) Wallet passphrase\n\nResult:\n\"walletpassphrase\": \"walletpassphrase\",   (string) Wallet passphrase you entered\n\"address\": \"verus address\",             (string) Address corresponding to your passphrase\n\"pubkey\": \"publickeyhex\",               (string) The hex value of the raw public key\n\"privkey\": \"privatekeyhex\",             (string) The hex value of the raw private key\n\"wif\": \"wif\"                            (string) The private key in WIF format to use with 'importprivkey'\n\nExamples:\n> verus convertpassphrase \"walletpassphrase\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"convertpassphrase\", \"params\": [\"walletpassphrase\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nlistunspent ( minconf maxconf  [\"address\",...] includeshared )\n\nReturns array of unspent transaction outputs\nwith between minconf and maxconf (inclusive) confirmations.\nOptionally filter to only include txouts paid to specified addresses.\nResults are an array of Objects, each of which has:\n{txid, vout, scriptPubKey, amount, confirmations}\n\nArguments:\n1. minconf          (numeric, optional, default=1) The minimum confirmations to filter\n2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter\n3. \"addresses\"    (string) A json array of VRSC addresses to filter\n    [\n      \"address\"   (string) VRSC address\n      ,...\n    ]\n4. includeshared    (bool, optional, default=false) Include outputs that can also be spent by others\n\nResult\n[                   (array of json object)\n  {\n    \"txid\" : \"txid\",          (string) the transaction id \n    \"vout\" : n,               (numeric) the vout value\n    \"generated\" : true|false  (boolean) true if txout is a coinbase transaction output\n    \"address\" : \"address\",    (string) the Zcash address\n    \"account\" : \"account\",    (string) DEPRECATED. The associated account, or \"\" for the default account\n    \"scriptPubKey\" : \"key\",   (string) the script key\n    \"amount\" : x.xxx,         (numeric) the transaction amount in VRSC\n    \"confirmations\" : n,      (numeric) The number of confirmations\n    \"redeemScript\" : n        (string) The redeemScript if scriptPubKey is P2SH\n    \"spendable\" : xxx         (bool) Whether we have the private keys to spend this output\n  }\n  ,...\n]\n\nExamples\n> verus listunspent \n> verus listunspent 6 9999999 \"[\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\",\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\"]\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999 \"[\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\",\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nlistaddressgroupings\n\nLists groups of addresses which have had their common ownership\nmade public by common use as inputs or as the resulting change\nin past transactions\n\nResult:\n[\n  [\n    [\n      \"VRSC address\",     (string) The VRSC address\n      amount,                 (numeric) The amount in VRSC\n      \"account\"             (string, optional) The account (DEPRECATED)\n    ]\n    ,...\n  ]\n  ,...\n]\n\nExamples:\n> verus listaddressgroupings \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetaccount \"VRSC_address\"\n\nDEPRECATED. Returns the account associated with the given address.\n\nArguments:\n1. \"VRSC_address\"  (string, required) The VRSC address for account lookup.\n\nResult:\n\"accountname\"        (string) the account address\n\nExamples:\n> verus getaccount \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccount\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetdifficulty\n\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\n\nResult:\nn.nnn       (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.\n\nExamples:\n> verus getdifficulty \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdifficulty\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetnotarizationproofs '[{\"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\",\n                      \"evidence\":{CNotaryEvidence},\n                      \"entropyhash\":\"hex\",\n                      \"proveheight\":n,\n                      \"atheight\":n}\n                     {\"type\":\"vrsc::evidence.primaryproof\" || \"iKDesmiEkEjDG61nQSZJSGhWvC8x8xA578\",\n                      \"priornotarizationref\":{CUTXORef} || \"priorroot\":{CProofRoot} ,\n                      \"challengeroots\":[{\"indexkey\":{object}, \"proofroot\":{CProofRoot}}, ...],\n                      \"evidence\":{CNotaryEvidence},\n                      \"entropyhash\":\"hex\",\n                      \"confirmnotarization\":{newnotarization}, |\n                      \"confirmroot\":{CPRoofRoot}},\n                      \"fromheight\":n,\n                      \"toheight\":n},\n                      ...]'\n\nReturns proofs to a caller for requested challenges. Some proofs can either independently or in combination\nwith other proofs over time invalidate or force a competing chain to provide more proofs in order to confirm\nany pending cross-chain notarization of an alternate chain that may not agree with us.\n\n* It is not valid to have a challenge request with both confirmnotarization and confirmroot.\n\nArguments\n\"challengerequests\"             (array, required) one or more challenge requests for unconfirmed notarizations on a bridged system\n\nResult:\n{\"evidence\":[{CNotaryEvidence}, ...]   (array) notary evidence challenges, including proofs for challenges requested\n\nExamples:\n> verus getnotarizationproofs '[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationproofs\", \"params\": [[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetidentitieswithaddress '{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}'\n\n\n\nArguments\n{\n    \"address\":\"validaddress\"   (string, required) returns all identities that contain the specified address in its primary addresses\n    \"fromheight\":n               (number, optional, default=0) Search for qualified identities modified from this height forward only\n    \"toheight\":n                 (number, optional, default=0) Search for qualified identities only up until this height (0 == no limit)\n    \"unspent\":bool               (bool, optional, default=false) if true, this will only return active ID UTXOs as of the current block height\n}\n\nResult:\n[                                  (array) array of matching identities\n  {identityobject},                (object) identity with additional member \"txout\" with txhash and output index\n  ...\n]\n\nExamples:\n> verus getidentitieswithaddress '{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentitieswithaddress\", \"params\": ['{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetcurrencybalance \"address\" ( minconf ) ( friendlynames ) ( includeshared )\n\nReturns the balance in all currencies of a taddr or zaddr belonging to the node's wallet.\n\nCAUTION: If the wallet has only an incoming viewing key for this address, then spends cannot be\ndetected, and so the returned balance may be larger than the actual balance.\n\nArguments:\n1. \"address\"      (string) The selected address. It may be a transparent or private address and include z*, R*, and i* wildcards.\n2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\n3. friendlynames    (boolean, optional, default=true) use friendly names instead of i-addresses.\n4. includeshared    (bool, optional, default=false) Include outputs that can also be spent by others\n\nResult:\namount              (numeric) The total amount in VRSC received for this address.\n\nExamples:\n\nThe total amount received by address \"myaddress\"\n> verus getcurrencybalance \"myaddress\"\n\nThe total amount received by address \"myaddress\" at least 5 blocks confirmed\n> verus getcurrencybalance \"myaddress\" 5\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrencybalance\", \"params\": [\"myaddress\", 5] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nverifymessage \"address or identity\" \"signature\" \"message\" \"checklatest\"\n\nVerify a signed message\n\nArguments:\n1. \"t-addr or identity\" (string, required) The transparent address or identity that signed the message.\n2. \"signature\"       (string, required) The signature provided by the signer in base 64 encoding (see signmessage).\n3. \"message\"         (string, required) The message that was signed.\n3. \"checklatest\"     (bool, optional)   If true, checks signature validity based on latest identity. defaults to false,\n                                          which determines validity of signing height stored in signature.\n\nResult:\ntrue|false   (boolean) If the signature is verified or not.\n\nExamples:\n\nCreate the signature\n> verus signmessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"my message\"\n\nVerify the signature\n> verus verifymessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"signature\" \"my message\"\n\nAs json rpc\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetnetworkinfo\nReturns an object containing various state info regarding P2P networking.\n\nResult:\n{\n  \"version\": xxxxx,                      (numeric) the server version\n  \"subversion\": \"/MagicBean:x.y.z[-v]/\",     (string) the server subversion string\n  \"protocolversion\": xxxxx,              (numeric) the protocol version\n  \"localservices\": \"xxxxxxxxxxxxxxxx\", (string) the services we offer to the network\n  \"timeoffset\": xxxxx,                   (numeric) the time offset\n  \"connections\": xxxxx,                  (numeric) the number of connections\n  \"networks\": [                          (array) information per network\n  {\n    \"name\": \"xxx\",                     (string) network (ipv4, ipv6 or onion)\n    \"limited\": true|false,               (boolean) is the network limited using -onlynet?\n    \"reachable\": true|false,             (boolean) is the network reachable?\n    \"proxy\": \"host:port\"               (string) the proxy that is used for this network, or empty if none\n  }\n  ,...\n  ],\n  \"relayfee\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in VRSC/kB\n  \"localaddresses\": [                    (array) list of local addresses\n  {\n    \"address\": \"xxxx\",                 (string) network address\n    \"port\": xxx,                         (numeric) network port\n    \"score\": xxx                         (numeric) relative score\n  }\n  ,...\n  ]\n  \"warnings\": \"...\"                    (string) any network warnings (such as alert messages) \n}\n\nExamples:\n> verus getnetworkinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetaddressutxos\n\nReturns all unspent outputs for an address (requires addressindex to be enabled).\n\nArguments:\n{\n  \"addresses\"\n    [\n      \"address\"  (string) The base58check encoded address\n      ,...\n    ],\n  \"chaininfo\"    (boolean) Include chain info with results\n  \"friendlynames\" (boolean, optional default=false) Include additional array of friendly names keyed by currency i-addresses\n  \"verbosity\"    (number) (default == 0), if 1, include output information for spends, including all reserve amounts and destinations\n}\n\nResult\n[\n  {\n    \"address\"  (string) The address base58check encoded\n    \"txid\"  (string) The output txid\n    \"height\"  (number) The block height\n    \"outputIndex\"  (number) The output index\n    \"script\"  (strin) The script hex encoded\n    \"satoshis\"  (number) The number of satoshis of the output\n  }\n]\n\nExamples:\n> verus getaddressutxos '{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressutxos\", \"params\": [{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nsettxfee amount\n\nSet the transaction fee per kB.\n\nArguments:\n1. amount         (numeric, required) The transaction fee in VRSC/kB rounded to the nearest 0.00000001\n\nResult\ntrue|false        (boolean) Returns true if successful\n\nExamples:\n> verus settxfee 0.00001\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nmigrate_completeimporttransaction importTx\n\nTakes a cross chain import tx with proof generated on assetchain and extends proof to target chain proof root\n\n---NEW FILE---\n\ngetpeerinfo\n\nReturns data about each connected network node as a json array of objects.\n\nbResult:\n[\n  {\n    \"id\": n,                   (numeric) Peer index\n    \"addr\":\"host:port\",      (string) The ip address and port of the peer\n    \"addrlocal\":\"ip:port\",   (string) local address\n    \"services\":\"xxxxxxxxxxxxxxxx\",   (string) The services offered\n    \"tls_established\": true|false,        (boolean) status of TLS connection\n    \"tls_verified\": true|false,           (boolean) status of peer certificate. True if the chain of trust of a peer certificate can be verified using the OS certificate store\n    \"lastsend\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send\n    \"lastrecv\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive\n    \"bytessent\": n,            (numeric) The total bytes sent\n    \"bytesrecv\": n,            (numeric) The total bytes received\n    \"conntime\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)\n    \"timeoffset\": ttt,         (numeric) The time offset in seconds\n    \"pingtime\": n,             (numeric) ping time\n    \"pingwait\": n,             (numeric) ping wait\n    \"version\": v,              (numeric) The peer version, such as 170002\n    \"subver\": \"/MagicBean:x.y.z[-v]/\",  (string) The string version\n    \"inbound\": true|false,     (boolean) Inbound (true) or Outbound (false)\n    \"startingheight\": n,       (numeric) The starting height (block) of the peer\n    \"banscore\": n,             (numeric) The ban score\n    \"synced_headers\": n,       (numeric) The last header we have in common with this peer\n    \"synced_blocks\": n,        (numeric) The last block we have in common with this peer\n    \"inflight\": [\n       n,                        (numeric) The heights of blocks we're currently asking from this peer\n       ...\n    ]\n  }\n  ,...\n]\n\nExamples:\n> verus getpeerinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetrawtransaction \"txid\" ( verbose )\n\nNOTE: By default this function only works sometimes. This is when the tx is in the mempool\nor there is an unspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option.\n\nReturn the raw transaction data.\n\nIf verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.\nIf verbose is non-zero, returns an Object with information about 'txid'.\n\nArguments:\n1. \"txid\"      (string, required) The transaction id\n2. verbose       (numeric, optional, default=0) If 0, return a string, other return a json object\n\nResult (if verbose is not set or set to 0):\n\"data\"      (string) The serialized, hex-encoded data for 'txid'\n\nResult (if verbose > 0):\n{\n  \"hex\" : \"data\",       (string) The serialized, hex-encoded data for 'txid'\n  \"txid\" : \"id\",        (string) The transaction id (same as provided)\n  \"version\" : n,          (numeric) The version\n  \"locktime\" : ttt,       (numeric) The lock time\n  \"expiryheight\" : ttt,   (numeric, optional) The block height after which the transaction expires\n  \"vin\" : [               (array of json objects)\n     {\n       \"txid\": \"id\",    (string) The transaction id\n       \"vout\": n,         (numeric) \n       \"scriptSig\": {     (json object) The script\n         \"asm\": \"asm\",  (string) asm\n         \"hex\": \"hex\"   (string) hex\n       },\n       \"sequence\": n      (numeric) The script sequence number\n     }\n     ,...\n  ],\n  \"vout\" : [              (array of json objects)\n     {\n       \"value\" : x.xxx,            (numeric) The value in VRSC\n       \"n\" : n,                    (numeric) index\n       \"scriptPubKey\" : {          (json object)\n         \"asm\" : \"asm\",          (string) the asm\n         \"hex\" : \"hex\",          (string) the hex\n         \"reqSigs\" : n,            (numeric) The required sigs\n         \"type\" : \"pubkeyhash\",  (string) The type, eg 'pubkeyhash'\n         \"addresses\" : [           (json array of string)\n           \"address\"          (string) transparent address\n           ,...\n         ]\n       }\n     }\n     ,...\n  ],\n  \"vjoinsplit\" : [        (array of json objects, only for version >= 2)\n     {\n       \"vpub_old\" : x.xxx,         (numeric) public input value in KMD\n       \"vpub_new\" : x.xxx,         (numeric) public output value in KMD\n       \"anchor\" : \"hex\",         (string) the anchor\n       \"nullifiers\" : [            (json array of string)\n         \"hex\"                     (string) input note nullifier\n         ,...\n       ],\n       \"commitments\" : [           (json array of string)\n         \"hex\"                     (string) output note commitment\n         ,...\n       ],\n       \"onetimePubKey\" : \"hex\",  (string) the onetime public key used to encrypt the ciphertexts\n       \"randomSeed\" : \"hex\",     (string) the random seed\n       \"macs\" : [                  (json array of string)\n         \"hex\"                     (string) input note MAC\n         ,...\n       ],\n       \"proof\" : \"hex\",          (string) the zero-knowledge proof\n       \"ciphertexts\" : [           (json array of string)\n         \"hex\"                     (string) output note ciphertext\n         ,...\n       ]\n     }\n     ,...\n  ],\n  \"blockhash\" : \"hash\",   (string) the block hash\n  \"confirmations\" : n,      (numeric) The confirmations\n  \"time\" : ttt,             (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)\n  \"blocktime\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n}\n\nExamples:\n> verus getrawtransaction \"mytxid\"\n> verus getrawtransaction \"mytxid\" 1\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ncloseoffers ('[\"offer1_txid\", \"offer2_txid\", ...]') (transparentorprivatefundsdestination) (privatefundsdestination)\n\nCloses all offers listed, if they are still valid and belong to this wallet.\nAlways closes expired offers, even if no parameters are given\n\n\nArguments\n  [\"offer1_txid\", \"offer2_txid\", ...]      (array, optional) array of hex tx ids of offers to close\n  transparentorprivatefundsdestination         (transparent or private address, optional) destination for closing funds\n  privatefundsdestination                      (private address, optional) destination for native funds only\n\nResult\n  null return\n\n---NEW FILE---\n\nz_viewtransaction \"txid\"\n\nGet detailed shielded information about in-wallet transaction <txid>\n\nArguments:\n1. \"txid\" (string, required) The transaction id\n\nResult:\n{\n  \"txid\" : \"transactionid\",   (string) The transaction id\n  \"spends\" : [\n    {\n      \"type\" : \"sprout|sapling\",      (string) The type of address\n      \"js\" : n,                       (numeric, sprout) the index of the JSDescription within vJoinSplit\n      \"jsSpend\" : n,                  (numeric, sprout) the index of the spend within the JSDescription\n      \"spend\" : n,                    (numeric, sapling) the index of the spend within vShieldedSpend\n      \"txidPrev\" : \"transactionid\",   (string) The id for the transaction this note was created in\n      \"jsPrev\" : n,                   (numeric, sprout) the index of the JSDescription within vJoinSplit\n      \"jsOutputPrev\" : n,             (numeric, sprout) the index of the output within the JSDescription\n      \"outputPrev\" : n,               (numeric, sapling) the index of the output within the vShieldedOutput\n      \"address\" : \"zaddress\",       (string) The z address involved in the transaction\n      \"value\" : x.xxx                 (numeric) The amount in VRSC\n      \"valueZat\" : xxxx               (numeric) The amount in zatoshis\n    }\n    ,...\n  ],\n  \"outputs\" : [\n    {\n      \"type\" : \"sprout|sapling\",      (string) The type of address\n      \"js\" : n,                       (numeric, sprout) the index of the JSDescription within vJoinSplit\n      \"jsOutput\" : n,                 (numeric, sprout) the index of the output within the JSDescription\n      \"output\" : n,                   (numeric, sapling) the index of the output within the vShieldedOutput\n      \"address\" : \"address\",        (string) The Verus private address involved in the transaction\n      \"recovered\" : true|false        (boolean, sapling) True if the output is not for an address in the wallet\n      \"value\" : x.xxx                 (numeric) The amount in VRSC\n      \"valueZat\" : xxxx               (numeric) The amount in zatoshis\n      \"memo\" : \"hexmemo\",             (string) Hexademical string representation of the memo field\n      \"memoStr\" : \"memo\",             (string) Only returned if memo contains valid UTF-8 text.\n    }\n    ,...\n  ],\n}\n\nExamples:\n> verus z_viewtransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_viewtransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_shieldcoinbase \"fromaddress\" \"tozaddress\" ( fee ) ( limit )\n\nTHIS API IS DEPRECATED AND NON NECESSARY TO USE ON VERUS OR STANDARD PBAAS NETWORKS\nShield transparent coinbase funds by sending to a shielded zaddr.  This is an asynchronous operation and utxos\nselected for shielding will be locked.  If there is an error, they are unlocked.  The RPC call `listlockunspent`\ncan be used to return a list of locked utxos.  The number of coinbase utxos selected for shielding can be limited\nby the caller.  If the limit parameter is set to zero, and Overwinter is not yet active, the -mempooltxinputlimit\noption will determine the number of uxtos.  Any limit is constrained by the consensus rule defining a maximum\ntransaction size of 100000 bytes before Sapling, and 2000000 bytes once Sapling activates.\n\nArguments:\n1. \"fromaddress\"         (string, required) The address is a taddr or \"*\" for all taddrs belonging to the wallet.\n2. \"toaddress\"           (string, required) The address is a zaddr.\n3. fee                   (numeric, optional, default=0.0001) The fee amount to attach to this transaction.\n4. limit                 (numeric, optional, default=50) Limit on the maximum number of utxos to shield.  Set to 0 to use node option -mempooltxinputlimit (before Overwinter), or as many as will fit in the transaction (after Overwinter).\n\nResult:\n{\n  \"remainingUTXOs\": xxx       (numeric) Number of coinbase utxos still available for shielding.\n  \"remainingValue\": xxx       (numeric) Value of coinbase utxos still available for shielding.\n  \"shieldingUTXOs\": xxx        (numeric) Number of coinbase utxos being shielded.\n  \"shieldingValue\": xxx        (numeric) Value of coinbase utxos being shielded.\n  \"opid\": xxx          (string) An operationid to pass to z_getoperationstatus to get the result of the operation.\n}\n\nExamples:\n> verus z_shieldcoinbase \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_shieldcoinbase\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nrevokeidentity \"nameorID\" (returntx) (tokenrevoke) (feeoffer) (sourceoffunds)\n\n\n\nArguments\n       \"returntx\"                        (bool,   optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned\n       \"tokenrevoke\"                     (bool,   optional) defaults to false, if true, the tokenized ID control token, if one exists, will be used to revoke\n       \"feeoffer\"                        (value,  optional) non-standard fee amount to pay for the transaction\n       \"sourceoffunds\"                   (string, optional) transparent or private address to source all funds for fees to preserve privacy of the identity\n\nResult:\n\nExamples:\n> verus revokeidentity \"nameorID\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"revokeidentity\", \"params\": [\"nameorID\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nlistaccounts ( minconf includeWatchonly)\n\nDEPRECATED. Returns Object that has account names as keys, account balances as values.\n\nArguments:\n1. minconf          (numeric, optional, default=1) Only include transactions with at least this many confirmations\n2. includeWatchonly (bool, optional, default=false) Include balances in watchonly addresses (see 'importaddress')\n\nResult:\n{                      (json object where keys are account names, and values are numeric balances\n  \"account\": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.\n  ...\n}\n\nExamples:\n\nList account balances where there at least 1 confirmation\n> verus listaccounts \n\nList account balances including zero confirmation transactions\n> verus listaccounts 0\n\nList account balances for 6 or more confirmations\n> verus listaccounts 6\n\nAs json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaccounts\", \"params\": [6] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetsnapshot\n\nReturns a snapshot of (address,amount) pairs at current height (requires addressindex to be enabled).\n\nArguments:\n  \"top\" (number, optional) Only return this many addresses, i.e. top N richlist\n\nResult:\n{\n   \"addresses\": [\n    {\n      \"addr\": \"RMEBhzvATA8mrfVK82E5TgPzzjtaggRGN3\",\n      \"amount\": \"100.0\"\n    },\n    {\n      \"addr\": \"RqEBhzvATAJmrfVL82E57gPzzjtaggR777\",\n      \"amount\": \"23.45\"\n    }\n  ],\n  \"total\": 123.45           (numeric) Total amount in snapshot\n  \"average\": 61.7,          (numeric) Average amount in each address \n  \"utxos\": 14,              (number) Total number of UTXOs in snapshot\n  \"total_addresses\": 2,     (number) Total number of addresses in snapshot,\n  \"start_height\": 91,       (number) Block height snapshot began\n  \"ending_height\": 91       (number) Block height snapsho finished,\n  \"start_time\": 1531982752, (number) Unix epoch time snapshot started\n  \"end_time\": 1531982752    (number) Unix epoch time snapshot finished\n}\n\nExamples:\n> verus getsnapshot \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getsnapshot\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetreservedeposits \"currencyname\" (returnutxos)\n\nReturns all deposits under control of the specified currency or chain. If the currency is of an external system\nor chain, all deposits will be under the control of that system or chain only, not its independent currencies.\n\nArguments\n1. \"currencyname\"       (string, required)       full name or i-ID of controlling currency\n2. \"returnutxos\"        (bool, optional)         if true, returns a UTXO list and currency values on each\n\nResult:\n  {\n     \"utxos\" : {utxo and currency values},       if returnutxos == true, else null\n     \"currency 1 i-address\" : value,\n     \"currency 2 i-address\" : value,\n  }\n\nExamples:\n> verus getreservedeposits \"currencyname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreservedeposits\", \"params\": [\"currencyname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nvalidateaddress \"address\"\n\nReturn information about the given transparent address.\n\nArguments:\n1. \"address\"     (string, required) The transparent address to validate\n\nResult:\n{\n  \"isvalid\" : true|false,         (boolean) If the address is valid or not. If not, this is the only property returned.\n  \"address\" : \"verusaddress\",   (string) The Verus or PBaaS address to be validated\n  \"scriptPubKey\" : \"hex\",       (string) The hex encoded scriptPubKey generated by the address\n  \"ismine\" : true|false,          (boolean) If the address is yours or not\n  \"isscript\" : true|false,        (boolean) If the key is a script\n  \"pubkey\" : \"publickeyhex\",    (string) The hex value of the raw public key\n  \"iscompressed\" : true|false,    (boolean) If the address is compressed\n  \"account\" : \"account\"         (string) DEPRECATED. The account associated with the address, \"\" is the default account\n}\n\nExamples:\n> verus validateaddress \"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ndefinecurrency '{\"name\": \"coinortokenname\", ..., \"nodes\":[{\"networkaddress\":\"identity\"},..]}'\\\n                '({\"name\": \"fractionalgatewayname\", ..., })' ({\"name\": \"reserveonename\", ..., }) ...\n\nThis defines a blockchain currency, either as an independent blockchain, or as a token on this blockchain. It also spends\nthe identity after which this currency is named and sets a bit indicating that it has a currently active blockchain in its name.\n\nTo create a currency of any kind, the identity it is named after must be minted on the blockchain on which the currency is created.\nOnce a currency is activated for an identity name, the same symbol may not be reused for another currency or blockchain, even\nif the identity is transferred, revoked or recovered, unless there is an endblock specified and the currency or blockchain has\ndeactivated as of that end block.\n\nAll funds to start the currency and for initial conversion amounts must be available to spend from the identity with the same\nname and ID as the currency being defined.\n\nArguments\n      {\n         \"options\" : n,                  (int,    optional) bits (in hexadecimal):\n                                                             1 = FRACTIONAL\n                                                             2 = IDRESTRICTED\n                                                             4 = IDSTAKING\n                                                             8 = IDREFERRALS\n                                                             0x10 = IDREFERRALSREQUIRED\n                                                             0x20 = TOKEN\n                                                             0x40 = RESERVED\n                                                             0x100 = IS_PBAAS_CHAIN\n\n         \"name\" : \"xxxx\",              (string, required) name of existing identity with no active or pending blockchain\n         \"idregistrationfees\" : \"xx.xx\", (value, required) price of an identity in native currency\n         \"idreferrallevels\" : n,         (int, required) how many levels ID referrals go back in reward\n         \"notaries\" : \"[identity,..]\", (list, optional) list of identities that are assigned as chain notaries\n         \"minnotariesconfirm\" : n,       (int, optional) unique notary signatures required to confirm an auto-notarization\n         \"notarizationreward\" : \"xx.xx\", (value,  required) default VRSC notarization reward total for first billing period\n         \"proofprotocol\" : n,            (int,    optional) if 2, currency can be minted by whoever controls the ID\n                                                           1 = PROOF_PBAASMMR - Verus MMR proof, no notaries required\n                                                           2 = PROOF_CHAINID - non-native only - currency has centralized control, and\n                                                                               can mint/burn & change weights\n                                                           3 = PROOF_ETHNOTARIZATION - ETH & PATRICIA TRIE proof (do not attempt without\n                                                                                       full understanding + C++, JavaScript & Solidity dev(s))\n\n         \"notarizationprotocol\" : n,            (int,    optional) if 2, currency can be minted by whoever controls the ID\n                                                           1 = PROOF_PBAASMMR - Verus MMR proof, no notaries required\n                                                           2 = PROOF_CHAINID - chain ID is sole notary for proof, no evidence required\n                                                           3 = PROOF_ETHNOTARIZATION - Ethereum notarization & PATRICIA TRIE proof\n\n         \"expiryheight\"  : n,            (int,    optional) block height at which the transaction expires, default: curheight + 20\n         \"startblock\"    : n,            (int,    optional) VRSC block must be notarized into block 1 of PBaaS chain, default: expiryheight\n         \"endblock\"      : n,            (int,    optional) chain or currency intended to end life after this height, 0 = no end\n         \"currencies\"    : \"[\"VRSC\",..]\", (list, optional) reserve currencies backing this chain in equal amounts\n         \"weights\"       : \"[\"xx.xx\",..]\", (list, optional) the weight of each reserve currency in a fractional currency\n         \"conversions\"   : \"[\"xx.xx\",..]\", (list, optional) if present, must be same size as currencies. pre-launch conversion ratio overrides\n         \"minpreconversion\" : \"[\"xx.xx\",..]\", (list, optional) must be same size as currencies. minimum in each currency to launch\n         \"maxpreconversion\" : \"[\"xx.xx\",..]\", (list, optional) maximum in each currency allowed\n         \"initialcontributions\" : \"[\"xx.xx\",..]\", (list, optional) initial contribution in each currency\n         \"prelaunchdiscount\" : \"xx.xx\" (value, optional) for fractional reserve currencies less than 100%, discount on final price at launch\n         \"initialsupply\" : \"xx.xx\"    (value, required for fractional) supply after conversion of contributions, before preallocation\n         \"prelaunchcarveout\" : \"0.xx\", (value, optional) identities and % of pre-converted amounts from each reserve currency\n         \"preallocations\" : \"[{\"identity\":xx.xx}..]\", (list, optional)  list of identities and amounts from pre-allocation\n         \"gatewayconvertername\" : \"name\", (string, optional) if this is a PBaaS chain, this names a co-launched gateway converter currency\n         \"blocktime\"          : n, (int, optional) target time in seconds to average between blocks (default 60 seconds)\n         \"powaveragingwindow\" : n, (int, optional) total number of blocks to look back when averaging for DAA (default 45 blocks)\n         \"notarizationperiod\" : n, (int, optional) min period miners/stakers must wait to post new notarization to chain (default 10 min at any blocktime)\n         \"eras\"          : \"objarray\", (array, optional) data specific to each era, maximum 3\n         {\n            \"reward\"     : n,           (int64,  required) native initial block rewards in each period\n            \"decay\"      : n,           (int64,  optional) reward decay for each era\n            \"halving\"    : n,           (int,    optional) halving period for each era\n            \"eraend\"     : n,           (int,    optional) ending block of each era\n         }\n         \"nodes\"         : \"[obj, ..]\", (objectarray, optional) up to 5 nodes that can be used to connect to the blockchain         [{\n            \"networkaddress\" : \"ip:port\", (string,  optional) internet or other supported address for node\n            \"nodeidentity\" : \"name@\",  (string, optional) published node identity\n         }, .. ]\n      }\n\nResult:\n{\n  \"txid\" : \"transactionid\", (string) The transaction id\n  \"tx\"   : \"json\",          (json)   The transaction decoded as a transaction\n  \"hex\"  : \"data\"           (string) Raw data for signed transaction\n}\n\nExamples:\n> verus definecurrency jsondefinition\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"definecurrency\", \"params\": [jsondefinition] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nimportprivkey \"verusprivkey\" ( \"label\" rescan )\n\nAdds a private key (as returned by dumpprivkey) to your wallet.\n\nArguments:\n1. \"verusprivkey\"   (string, required) The private key (see dumpprivkey)\n2. \"label\"            (string, optional, default=\"\") An optional label\n3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\n\nNote: This call can take minutes to complete if rescan is true.\n\nExamples:\n\nDump a private key\n> verus dumpprivkey \"myaddress\"\n\nImport the private key with rescan\n> verus importprivkey \"mykey\"\n\nImport using a label and without rescan\n> verus importprivkey \"mykey\" \"testing\" false\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importprivkey\", \"params\": [\"mykey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nsubmitchallenges '[{\"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\" ||\n                       \"type\":\"vrsc::evidence.validitychallenge\" || \"iCPb8ywQna7jYV2SHrGZ6vQMj7kuyWFxvb\",\n                    \"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\n                    \"forkroot\":{},\n                    \"challengeroot\":{},\n                    \"evidence\":{}},\n                   {...}, ...]'\n\nSubmits one or more cryptographic challenges to existing, unconfirmed notarizations, proving the existence\nof an alternate chain. Whether the alternate chain has more power than the chain with a pending notarization\nis not required, only that it has moved forward multiple blocks since the prior notarization.\n\nRequires that the local wallet have funds for fees.\n\nArguments\n\"challenges\"                 (array, required) one or more challenges to unconfirmed notarizations on this system\n\nResult:\n[{\"txid\":\"hex\"}, {\"error\":\"errorstring\"}, ...]   (array) results of submitted challenge transactions\n\nExamples:\n> verus submitchallenges '[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitchallenges\", \"params\": [[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetchaintips\nReturn information about all known tips in the block tree, including the main chain as well as orphaned branches.\n\nResult:\n[\n  {\n    \"height\": xxxx,         (numeric) height of the chain tip\n    \"hash\": \"xxxx\",         (string) block hash of the tip\n    \"branchlen\": 0          (numeric) zero for main chain\n    \"status\": \"active\"      (string) \"active\" for the main chain\n  },\n  {\n    \"height\": xxxx,\n    \"hash\": \"xxxx\",\n    \"branchlen\": 1          (numeric) length of branch connecting the tip to the main chain\n    \"status\": \"xxxx\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)\n  }\n]\nPossible values for status:\n1.  \"invalid\"               This branch contains at least one invalid block\n2.  \"headers-only\"          Not all blocks for this branch are available, but the headers are valid\n3.  \"valid-headers\"         All blocks are available for this branch, but they were never fully validated\n4.  \"valid-fork\"            This branch is not part of the active chain, but is fully validated\n5.  \"active\"                This is the tip of the active main chain, which is certainly valid\n\nExamples:\n> verus getchaintips \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintips\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nverifysignature '{\"address\":\"i-address or friendly name (t-address checks on simple signature w/hash and prefix, nothing else)\",\n                  \"prefixstring\":\"extra string that is hashed during signature and must be supplied for verification\",\n                  \"filename\":\"filepath/filename\" |\n                    \"message\":\"any message\" |\n                    \"messagehex\":\"hexdata\" |\n                    \"messagebase64\":\"base64data\" |\n                    \"datahash\":\"256bithex\",\n                  \"vdxfkeys\":[\"vdxfkey i-address\", ...],\n                  \"vdxfkeynames\":[\"vdxfkeyname, object for getvdxfid API, or friendly name ID -- no i-addresses\", ...],\n                  \"boundhashes\":[\"hexhash\", ...],\n                  \"hashtype\": \"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\"\n                  \"checklatest\": true | false\n                  \"signature\":\"verificationsignature\"}'\n\n\nChecks to see if the signature is valid and returns an error for invalid parameters{\n  \"address\":\"t-addr or identity\"                               (string, required) The transparent address or identity to verify against the signature\n  \"filename\" | \"message\" | \"messagehex\" | \"messagebase64\" | \"datahash\" (string, required) Data or hash of data signed\n  \"vdxfkeys\":[\"vdxfkey\", ...],                                 (array, optional)  Array of vdxfkeys or ID i-addresses\n  \"vdxfkeynames\":[\"vdxfkeyname\", ...],                         (array, optional)  Array of vdxfkey names or fully qualified friendly IDs\n  \"boundhashes\":[\"hexhash\", ...],                              (array, optional)  Array of bound hash values\n  \"hashtype\"                                                     (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256\n  \"signature\"                                                    (string, optional) The current signature of the message encoded in base 64\n  \"checklatest\"                                                  (bool, optional)   If true, checks signature validity based on latest identity. defaults to false,\n                                                                                      which determines validity of signing height stored in signature.\n}\n\nResult:\n{\n  \"hash\":\"hexhash\"         (string) The hash of the message (SHA256, NOT SHA256D)\n  \"signature\":\"base64sig\"  (string) The aggregate signature of the message encoded in base 64 if all or partial signing successful\n}\n\nExamples:\n\nVerify the signature\n> verus verifysignature '{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}'\n\nAs json rpc\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifysignature\", \"params\": ['{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nreconsiderblock \"hash\"\n\nRemoves invalidity status of a block and its descendants, reconsider them for activation.\nThis can be used to undo the effects of invalidateblock.\n\nArguments:\n1. hash   (string, required) the hash of the block to reconsider\n\nResult:\n\nExamples:\n> verus reconsiderblock \"blockhash\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"reconsiderblock\", \"params\": [\"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetoffers \"currencyorid\" (iscurrency) (withtx)\n\nReturns all open offers for a specific currency or ID\n\nArguments\n1. \"currencyorid\"        (string, required) The currency or ID to check for offers, both sale and purchase\n2. \"iscurrency\"          (bool, optional)   default=false, if false, this looks for ID offers, if true, currencies\n3. \"withtx\"              (bool, optional)   default=false, if true, this returns serialized hex of the exchange transaction for signing\n\nResult:\nall available offers for or in the indicated currency or ID are displayed\n\nExamples:\n> verus getoffers \"currencyorid\" (iscurrency)\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getoffers\", \"params\": [\"currencyorid\" (iscurrency)] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\naddmergedblock \"hexdata\" ( \"jsonparametersobject\" )\n\nAdds a fully prepared block and its header to the current merge mining queue of this daemon.\nParameters determine the action to take if adding this block would exceed the available merge mining slots.\nDefault action to take if adding would exceed available space is to replace the choice with the least ROI if this block provides more.\n\nArguments\n1. \"hexdata\"                     (string, required) the hex-encoded, complete, unsolved block data to add. nTime, and nSolution are replaced.\n2. \"name\"                        (string, required) chain name symbol\n3. \"rpchost\"                     (string, required) host address for RPC connection\n4. \"rpcport\"                     (int,    required) port address for RPC connection\n5. \"userpass\"                    (string, required) credentials for login to RPC\n\nResult:\n\"deserialize-invalid\" - block could not be deserialized and was rejected as invalid\n\"blocksfull\"          - block did not exceed others in estimated ROI, and there was no room for an additional merge mined block\n{\"nextblocktime\": n}  - block has invalid time and must be remade with time returned\n\nExamples:\n> verus addmergedblock \"hexdata\" '{\"currencyid\" : \"hexstring\", \"rpchost\" : \"127.0.0.1\", \"rpcport\" : portnum}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addmergedblock\", \"params\": [\"hexdata\" '{\"currencyid\" : \"hexstring\", \"rpchost\" : \"127.0.0.1\", \"rpcport\" : portnum, \"estimatedroi\" : (verusreward/hashrate)}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetimports \"chainname\" (startheight) (endheight)\n\nReturns all imports into a specific currency, optionally that were imported between a specific block range.\n\nArguments\n1. \"chainname\"                     (string, optional) name of the chain to look for. no parameter returns current chain in daemon.\n1. (startheight)                     (number, optional) startheight default == 0\n1. (endheight)                       (number, optional) endheight default == 0\n\nResult:\n  {\n  }\n\nExamples:\n> verus getimports \"chainname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getimports\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nmigrate_createimporttransaction burnTx payouts\n\nCreate an importTx given a burnTx and the corresponding payouts, hex encoded\n\n---NEW FILE---\n\ngetsaplingtree \"n\"\n\nReturns the entries for a light wallet Sapling tree state.\n\nArguments\n   \"n\" or \"m,n\" or \"m,n,o\"         (int or string, optional) height or inclusive range with optional step at which to get the Sapling tree state\n                                                                   If not specified, the latest currency state and height is returned\n\nResult:\n   [\n       {\n           \"network\": \"VRSC\",\n           \"height\": n,\n           \"hash\": \"hex\"\n           \"time\": n,\n           \"tree\": \"hex\"\n       },\n   ]\n\nExamples:\n> verus getsaplingtree name\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getsaplingtree\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nmakeoffer fromaddress '{\"changeaddress\":\"transparentoriaddress\", \"expiryheight\":blockheight, \"offer\":{\"currency\":\"anycurrency\", \"amount\":...} | {\"identity\":\"idnameoriaddress\",...}', \"for\":{\"address\":..., \"currency\":\"anycurrency\", \"amount\":...} | {\"name\":\"identityforswap\",\"parent\":\"parentid\",\"primaryaddresses\":[\"R-address(s)\"],\"minimumsignatures\":1,...}}' (returntx) (feeamount)\n\nThis sends a transaction which provides a completely decentralized, fully on-chain an atomic swap offer for\n\"decentralized swapping of any blockchain asset, including any/multi currencies, NFTs, identities, contractual\n\"agreements and rights transfers, or to be used as bids for an on-chain auction of any blockchain asset(s).\n\"Sources and destination of funds for swaps can be any valid transparent address capable of holding or controlling\nthe specific asset.\n\nArguments\n1. \"fromaddress\"             (string, required) The VerusID, or wildcard address to send funds from. \"*\", \"R*\", or \"i*\" are valid wildcards\n2. {\n     \"changeaddress\"         (string, required) Change destination when constructing transactions\n     \"expiryheight\"          (number, optional) Block height at which this offer expires. Defaults to 20 blocks (avg 1/minute)\n     \"offer\"                 (object, required) Funds description or identity name, \"address\" in this object should be an address of the person making an offer for change\n     \"for\"                   (object, required) Funds description or full identity description\n   }\n3. \"returntx\"                (bool, optional) default = false, if true, returns a transaction waiting for taker completion instead of posting\n4. \"feeamount\"               (value, optional) default = 0.0001\n\nResult:\n{\n  \"txid\" : \"transactionid\", The hex transaction id on success\n  \"hex\" : \"serializedtx\"   If hex is requested, hex serialization of partial transaction instead of txid is returned on success\n}\n\nExamples:\n> verus makeoffer fromaddress '{\"changeaddress\":\"transparentoriaddress\", \"expiryheight\":blockheight, \"offer\":{\"currency\":\"anycurrency\", \"amount\":...} | {\"identity\":\"idnameoriaddress\",...}', \"for\":{\"address\":..., \"currency\":\"anycurrency\", \"amount\":...} | {\"name\":\"identityforswap\",\"parent\":\"parentid\",\"primaryaddresses\":[\"R-address(s)\"],\"minimumsignatures\":1,...}}' (returntx) (feeamount)\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"makeoffer\", \"params\": [fromaddress '{\"changeaddress\":\"transparentoriaddress\", \"expiryheight\":blockheight, \"offer\":{\"currency\":\"anycurrency\", \"amount\":...} | {\"identity\":\"idnameoriaddress\",...}', \"for\":{\"address\":..., \"currency\":\"anycurrency\", \"amount\":...} | {\"name\":\"identityforswap\",\"parent\":\"parentid\",\"primaryaddresses\":[\"R-address(s)\"],\"minimumsignatures\":1,...}}' (returntx) (feeamount)] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetidentitytrust '[\"id\",...]'\n\n\n\nArguments\n\"[\"id\",...]\"                                       (strarray, optional) if specified, only returns rating values for specified IDs, otherwise all\n\nResult:\n{\n  \"setratings\":{\"id\":JSONRatingObject,...},        (jsonobj) an ID/ratings key/value object\n  \"identitytrustmode\":<n>                            (int) 0 = no restriction on sync, 1 = only sync to IDs rated approved, 2 = sync to all IDs but those on block list\n}\n\nExamples:\n> verus getidentitytrust '[\"id\",...]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentitytrust\", \"params\": ['[\"id\",...]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nsignmessage \"address or identity\" \"message\" \"currentsig\"\n\nSign a message with the private key of a t-addr or the authorities present in this wallet for an identity\n\nArguments:\n1. \"t-addr or identity\" (string, required) The transparent address or identity to use for signing.\n2. \"message\"                   (string, required) The message to create a signature of.\n2. \"cursig\"                    (string) The current signature of the message encoded in base 64 if multisig ID\n\nResult:\n{\n  \"hash\":\"hexhash\"         (string) The hash of the message (SHA256, NOT SHA256D)\n  \"signature\":\"base64sig\"  (string) The aggregate signature of the message encoded in base 64 if all or partial signing successful\n}\n\nExamples:\n\nUnlock the wallet for 30 seconds\n> verus walletpassphrase \"mypassphrase\" 30\n\nCreate the signature\n> verus signmessage \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" \"my message\"\n\nVerify the signature\n> verus verifymessage \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" \"signature\" \"my message\"\n\nAs json rpc\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessage\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_sendmany \"fromaddress\" [{\"address\":... ,\"amount\":...},...] ( minconf ) ( fee )\n\nSend multiple times. Amounts are decimal numbers with at most 8 digits of precision.\nChange generated from a taddr flows to a new taddr address, while change generated from a zaddr returns to itself.\nWhen sending coinbase UTXOs to a zaddr, change is not allowed. The entire value of the UTXO(s) must be consumed.\nBefore Sapling activates, the maximum number of zaddr outputs is 54 due to transaction size limits.\n\n\nArguments:\n1. \"fromaddress\"         (string, required) The taddr or zaddr to send the funds from.\n2. \"amounts\"             (array, required) An array of json objects representing the amounts to send.\n    [{\n      \"address\":address  (string, required) The address is a taddr or zaddr\n      \"amount\":amount    (numeric, required) The numeric amount in KMD is the value\n      \"memo\":memo        (string, optional) If the address is a zaddr, raw data represented in hexadecimal string format\n    }, ... ]\n3. minconf               (numeric, optional, default=1) Only use funds confirmed at least this many times.\n4. fee                   (numeric, optional, default=0.0001) The fee amount to attach to this transaction.\n\nResult:\n\"operationid\"          (string) An operationid to pass to z_getoperationstatus to get the result of the operation.\n\nExamples:\n> verus z_sendmany \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" '[{\"address\": \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\" ,\"amount\": 5.0}]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_sendmany\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", [{\"address\": \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\" ,\"amount\": 5.0}]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetaddressdeltas\n\nReturns all changes for an address (requires addressindex to be enabled).\n\nArguments:\n{\n  \"addresses\"\n    [\n      \"address\"  (string) The base58check encoded address\n      ,...\n    ]\n  \"start\" (number) The start block height\n  \"end\" (number) The end block height\n  \"chaininfo\" (boolean) Include chain info in results, only applies if start and end specified\n  \"friendlynames\" (boolean) Include additional array of friendly names keyed by currency i-addresses\n  \"verbosity\" (number) (default == 0), if 1, include output information for spends, including all reserve amounts and destinations\n}\n\nResult:\n[\n  {\n    \"satoshis\"  (number) The difference of satoshis\n    \"txid\"  (string) The related txid\n    \"index\"  (number) The related input or output index\n    \"height\"  (number) The block height\n    \"address\"  (string) The base58check encoded address\n  }\n]\n\nExamples:\n> verus getaddressdeltas '{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressdeltas\", \"params\": [{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_exportviewingkey \"zaddr\"\n\nReveals the viewing key corresponding to 'zaddr'.\nThen the z_importviewingkey can be used with this output\n\nArguments:\n1. \"zaddr\"   (string, required) The zaddr for the viewing key\n\nResult:\n\"vkey\"                  (string) The viewing key\n\nExamples:\n> verus z_exportviewingkey \"myaddress\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_exportviewingkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nprocessupgradedata {upgradedata}\n\nReturns the txid and index where an output is spent.\n\nArguments:\n{\n  \"upgradeid\"                (string) The VDXF key identifier\n  \"minimumdaemonversion\"     (string) The minimum version required for the upgrade\n  \"activationheight\"         (number) The block height to activate\n  \"activationtime\"           (number) Epoch time to activate, depending on upgrade\n}\n\nResult:\n{\n  \"txid\"  (string) The transaction id\n  \"index\"  (number) The spending input index\n  ,...\n}\n\nExamples:\n> verus processupgradedata '{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"processupgradedata\", \"params\": [{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nregisternamecommitment \"name\" \"controladdress\" (\"referralidentity\") (\"parentnameorid\") (\"sourceoffunds\")\n\nRegisters a name commitment, which is required as a source for the name to be used when registering an identity. The name commitment hides the name itself\nwhile ensuring that the miner who mines in the registration cannot front-run the name unless they have also registered a name commitment for the same name or\nare willing to forfeit the offer of payment for the chance that a commitment made now will allow them to register the name in the future.\n\nNames must not have leading, trailing, or multiple consecutive spaces and must not include any of the following characters between parentheses (\\/:*?\"<>|@)\n\nArguments\n\"name\"                           (string, required)  the unique name to commit to. creating a name commitment is not a registration, and if one is\n                                                       created for a name that exists, it may succeed, but will never be able to be used.\n\"controladdress\"                 (address, required) address that will control this commitment. IMPORTANT: this is not necessarily the address that should\n                                                         control the actual ID, and it should be present in the current wallet that is registering the ID.\n                                                         Change may go to this address.\n\"referralidentity\"               (identity, optional)friendly name or identity address that is provided as a referral mechanism and to lower network cost of the ID\n\"parentnameorid-pbaasonly\"       (currency, optional)friendly name or currency i-address, which will be the parent of this ID and dictate issuance rules & pricing\n\"sourceoffunds\"                  (addressorid, optional) optional address to use for source of funds. if not specified, transparent wildcard \"*\" is used\n\n\nResult: obj\n{\n    \"txid\" : \"hexid\"\n    \"namereservation\" :\n    {\n        \"name\"    : \"namestr\",     (string) the unique name in this commitment\n        \"salt\"    : \"hexstr\",      (hex)    salt used to hide the commitment\n        \"referral\": \"identityaddress\", (base58) address of the referring identity if there is one\n        \"parent\"  : \"namestr\",     (string) name of the parent if not Verus or Verus test\n        \"nameid\"  : \"address\",     (base58) identity address for this identity if it is created\n    }\n}\n\nExamples:\n> verus registernamecommitment \"name\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"registernamecommitment\", \"params\": [\"name\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetaddednodeinfo dns ( \"node\" )\n\nReturns information about the given added node, or all added nodes\n(note that onetry addnodes are not listed here)\nIf dns is false, only a list of added nodes will be provided,\notherwise connected information will also be available.\n\nArguments:\n1. dns        (boolean, required) If false, only a list of added nodes will be provided, otherwise connected information will also be available.\n2. \"node\"   (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.\n\nResult:\n[\n  {\n    \"addednode\" : \"192.168.0.201\",   (string) The node ip address\n    \"connected\" : true|false,          (boolean) If connected\n    \"addresses\" : [\n       {\n         \"address\" : \"192.168.0.201:8233\",  (string) The server host and port\n         \"connected\" : \"outbound\"           (string) connection, inbound or outbound\n       }\n       ,...\n     ]\n  }\n  ,...\n]\n\nExamples:\n> verus getaddednodeinfo true\n> verus getaddednodeinfo true \"192.168.0.201\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddednodeinfo\", \"params\": [true, \"192.168.0.201\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_importwallet \"filename\"\n\nImports taddr and zaddr keys from a wallet export file (see z_exportwallet).\n\nArguments:\n1. \"filename\"    (string, required) The wallet file\n\nExamples:\n\nDump the wallet\n> verus z_exportwallet \"nameofbackup\"\n\nImport the wallet\n> verus z_importwallet \"path/to/exportdir/nameofbackup\"\n\nImport using the json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_importwallet\", \"params\": [\"path/to/exportdir/nameofbackup\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetblockdeltas \"blockhash\"\n\nReturns information about the given block and its transactions.\n\nWARNING: getblockdeltas is disabled.\nTo enable it, restart zcashd with the -experimentalfeatures and\n-insightexplorer commandline options, or add these two lines\nto the zcash.conf file:\n\nexperimentalfeatures=1\ninsightexplorer=1\n\nArguments:\n1. \"hash\"          (string, required) The block hash\n\nResult:\n{\n  \"hash\": \"hash\",              (string) block ID\n  \"confirmations\": n,          (numeric) number of confirmations\n  \"size\": n,                   (numeric) block size in bytes\n  \"height\": n,                 (numeric) block height\n  \"version\": n,                (numeric) block version (e.g. 4)\n  \"merkleroot\": \"hash\",        (hexstring) block Merkle root\n  \"deltas\": [\n    {\n      \"txid\": \"hash\",          (hexstring) transaction ID\n      \"index\": n,              (numeric) The offset of the tx in the block\n      \"inputs\": [                (array of json objects)\n        {\n          \"address\": \"taddr\",  (string) transparent address\n          \"satoshis\": n,       (numeric) negative of spend amount\n          \"index\": n,          (numeric) vin index\n          \"prevtxid\": \"hash\",  (string) source utxo tx ID\n          \"prevout\": n         (numeric) source utxo index\n        }, ...\n      ],\n      \"outputs\": [             (array of json objects)\n        {\n          \"address\": \"taddr\",  (string) transparent address\n          \"satoshis\": n,       (numeric) amount\n          \"index\": n           (numeric) vout index\n        }, ...\n      ]\n    }, ...\n  ],\n  \"time\" : n,                  (numeric) The block version\n  \"mediantime\": n,             (numeric) The most recent blocks' ave time\n  \"nonce\" : \"nonce\",           (hex string) The nonce\n  \"bits\" : \"1d00ffff\",         (hex string) The bits\n  \"difficulty\": n,             (numeric) the current difficulty\n  \"chainwork\": \"xxxx\"          (hex string) total amount of work in active chain\n  \"previousblockhash\" : \"hash\",(hex string) The hash of the previous block\n  \"nextblockhash\" : \"hash\"     (hex string) The hash of the next block\n}\n\nExamples:\n> verus getblockdeltas 00227e566682aebd6a7a5b772c96d7a999cadaebeaf1ce96f4191a3aad58b00b\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockdeltas\", \"params\": [\"00227e566682aebd6a7a5b772c96d7a999cadaebeaf1ce96f4191a3aad58b00b\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nsignrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype )\n\nSign inputs for raw transaction (serialized, hex-encoded).\nThe second optional argument (may be null) is an array of previous transaction outputs that\nthis transaction depends on but may not yet be in the block chain.\nThe third optional argument (may be null) is an array of base58-encoded private\nkeys that, if given, will be the only keys used to sign the transaction.\n\n\nArguments:\n1. \"hexstring\"     (string, required) The transaction hex string\n2. \"prevtxs\"       (string, optional) An json array of previous dependent transaction outputs\n     [               (json array of json objects, or 'null' if none provided)\n       {\n         \"txid\":\"id\",             (string, required) The transaction id\n         \"vout\":n,                  (numeric, required) The output number\n         \"scriptPubKey\": \"hex\",   (string, required) script key\n         \"redeemScript\": \"hex\",   (string, required for P2SH) redeem script\n         \"amount\": value            (numeric, required) The amount spent\n       }\n       ,...\n    ]\n3. \"privatekeys\"     (string, optional) A json array of base58-encoded private keys for signing\n    [                  (json array of strings, or 'null' if none provided)\n      \"privatekey\"   (string) private key in base58-encoding\n      ,...\n    ]\n4. \"sighashtype\"     (string, optional, default=ALL) The signature hash type. Must be one of\n       \"ALL\"\n       \"NONE\"\n       \"SINGLE\"\n       \"ALL|ANYONECANPAY\"\n       \"NONE|ANYONECANPAY\"\n       \"SINGLE|ANYONECANPAY\"\n5.  \"branchid\"       (string, optional) The hex representation of the consensus branch id to sign with. This can be used to force signing with consensus rules that are ahead of the node's current height.\n\nResult:\n{\n  \"hex\" : \"value\",           (string) The hex-encoded raw transaction with signature(s)\n  \"complete\" : true|false,   (boolean) If the transaction has a complete set of signatures\n  \"errors\" : [                 (json array of objects) Script verification errors (if there are any)\n    {\n      \"txid\" : \"hash\",           (string) The hash of the referenced, previous transaction\n      \"vout\" : n,                (numeric) The index of the output to spent and used as input\n      \"scriptSig\" : \"hex\",       (string) The hex-encoded signature script\n      \"sequence\" : n,            (numeric) Script sequence number\n      \"error\" : \"text\"           (string) Verification or signing error related to the input\n    }\n    ,...\n  ]\n}\n\nExamples:\n> verus signrawtransaction \"myhex\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransaction\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetnetworkhashps ( blocks height )\n\nDEPRECATED - left for backwards-compatibility. Use getnetworksolps instead.\n\nReturns the estimated network solutions per second based on the last n blocks.\nPass in [blocks] to override # of blocks, -1 specifies over difficulty averaging window.\nPass in [height] to estimate the network speed at the time when a certain block was found.\n\nArguments:\n1. blocks     (numeric, optional, default=120) The number of blocks, or -1 for blocks over difficulty averaging window.\n2. height     (numeric, optional, default=-1) To estimate at the time of the given height.\n\nResult:\nx             (numeric) Solutions per second estimated\n\nExamples:\n> verus getnetworkhashps \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkhashps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetgenerate\n\nReturn if the server is set to mine and/or mint coins or not. The default is false.\nIt is set with the command line argument -gen and -mint (or conf file settings gen and mint)\nIt can also be set with the setgenerate call.\n\nResult\n{\n  \"staking\": true|false      (boolean) If staking is on or off (see setgenerate)\n  \"generate\": true|false     (boolean) If mining is on or off (see setgenerate)\n  \"numthreads\": n            (numeric) The processor limit for mining. (see setgenerate)\n}\n\nExamples:\n> verus getgenerate \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getgenerate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nsetban \"ip(/netmask)\" \"add|remove\" (bantime) (absolute)\n\nAttempts add or remove a IP/Subnet from the banned list.\n\nArguments:\n1. \"ip(/netmask)\" (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)\n2. \"command\"      (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list\n3. \"bantime\"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\n4. \"absolute\"     (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\n\nExamples:\n> verus setban \"192.168.0.6\" \"add\" 86400\n> verus setban \"192.168.0.0/24\" \"add\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\" 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetexports \"chainname\" (heightstart) (heightend)\n\nReturns pending export transfers to the specified currency from start height to end height if specified\n\nArguments\n\"chainname\"                      (string, required)  name/ID of the currency to look for. no parameter returns current chain\n\"heightstart\"                    (int, optional)     default=0 only return exports at or above this height\n\"heightend\"                      (int, optional)     dedfault=maxheight only return exports below or at this height\n\nResult:\n  [{\n     \"height\": n,     \"txid\": \"hexid\",     \"txoutnum\": n,     \"partialtransactionproof\": \"hexstr\",     \"transfers\": [{transfer1}, {transfer2},...]  }, ...]\n\nExamples:\n> verus getexports \"chainname\" (heightstart) (heightend)\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getexports\", \"params\": [\"chainname\" (heightstart) (heightend)] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nsendmany \"fromaccount\" {\"address\":amount,...} ( minconf \"comment\" [\"address\",...] )\n\nSend multiple times. Amounts are decimal numbers with at most 8 digits of precision.\n\nArguments:\n1. \"fromaccount\"         (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.\n2. \"amounts\"             (string, required) A json object with addresses and amounts\n    {\n      \"address\":amount   (numeric) The VRSC address is the key, the numeric amount in VRSC is the value\n      ,...\n    }\n3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.\n4. \"comment\"             (string, optional) A comment\n5. subtractfeefromamount   (string, optional) A json array with addresses.\n                           The fee will be equally deducted from the amount of each selected address.\n                           Those recipients will receive less VRSC than you enter in their corresponding amount field.\n                           If no addresses are specified here, the sender pays the fee.\n    [\n      \"address\"            (string) Subtract fee from this address\n      ,...\n    ]\n\nResult:\n\"transactionid\"          (string) The transaction id for the send. Only 1 transaction is created regardless of \n                                    the number of addresses.\n\nExamples:\n\nSend two amounts to two different addresses:\n> verus sendmany \"\" \"{\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\":0.01,\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\":0.02}\"\n\nSend two amounts to two different addresses setting the confirmation and comment:\n> verus sendmany \"\" \"{\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\":0.01,\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\":0.02}\" 6 \"testing\"\n\nSend two amounts to two different addresses, subtract fee from amount:\n> verus sendmany \"\" \"{\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\":0.01,\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\":0.02}\" 1 \"\" \"[\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\",\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\"]\"\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendmany\", \"params\": [\"\", \"{\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\":0.01,\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\":0.02}\", 6, \"testing\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nencryptwallet \"passphrase\"\n\nWARNING: encryptwallet is disabled.\nTo enable it, restart zcashd with the -experimentalfeatures and\n-developerencryptwallet commandline options, or add these two lines\nto the zcash.conf file:\n\nexperimentalfeatures=1\ndeveloperencryptwallet=1\n\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\nAfter this, any calls that interact with private keys such as sending or signing \nwill require the passphrase to be set prior the making these calls.\nUse the walletpassphrase call for this, and then walletlock call.\nIf the wallet is already encrypted, use the walletpassphrasechange call.\nNote that this will shutdown the server.\n\nArguments:\n1. \"passphrase\"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\n\nExamples:\n\nEncrypt you wallet\n> verus encryptwallet \"my pass phrase\"\n\nNow set the passphrase to use the wallet, such as for signing or sending VRSC\n> verus walletpassphrase \"my pass phrase\"\n\nNow we can so something like sign\n> verus signmessage \"VRSC_address\" \"test message\"\n\nNow lock the wallet again by removing the passphrase\n> verus walletlock \n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"encryptwallet\", \"params\": [\"my pass phrase\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nzcrawreceive zcsecretkey encryptednote\n\nDEPRECATED. Decrypts encryptednote and checks if the coin commitments\nare in the blockchain as indicated by the \"exists\" result.\n\nOutput: {\n  \"amount\": value,\n  \"note\": noteplaintext,\n  \"exists\": exists\n}\n\n---NEW FILE---\n\ngetcurrencytrust '[\"currencyid\",...]'\n\n\n\nArguments\n\"[\"currencyid\",...]\"                                       (strarray, optional) if specified, only returns rating values for specified currencies, otherwise all\n\nResult:\n{\n  \"setratings\":{\"id\":JSONRatingObject,...},        (jsonobj) an ID/ratings key/value object\n  \"currencytrustmode\":<n>                            (int) 0 = no restriction on sync, 1 = only sync to IDs rated approved, 2 = sync to all IDs but those on block list\n}\n\nExamples:\n> verus getcurrencytrust '[\"currencyid\",...]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrencytrust\", \"params\": ['[\"currencyid\",...]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_exportkey \"zaddr\" (outputashex)\n\nReveals the zkey corresponding to 'zaddr'.\nThen the z_importkey can be used with this output\n\nArguments:\n1. \"zaddr\"   (string, required) The zaddr for the private key\n2. \"outputashex\" (boolean, optional, default=false) If true, output key data as hex bytes\n\nResult:\n\"key\"                  (string) The private key\n\nExamples:\n> verus z_exportkey \"myaddress\"\n> verus z_importkey \"mykey\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_exportkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetbestblockhash\n\nReturns the hash of the best (tip) block in the longest block chain.\n\nResult\n\"hex\"      (string) the block hash hex encoded\n\nExamples\n> verus getbestblockhash \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestblockhash\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ndisconnectnode \"node\" \n\nImmediately disconnects from the specified node.\n\nArguments:\n1. \"node\"     (string, required) The node (see getpeerinfo for nodes)\n\nExamples:\n> verus disconnectnode \"192.168.0.6:8233\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8233\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nzcrawkeygen\n\nDEPRECATED. Generate a zcaddr which can send and receive confidential values.\n\nOutput: {\n  \"zcaddress\": zcaddr,\n  \"zcsecretkey\": zcsecretkey,\n  \"zcviewingkey\": zcviewingkey,\n}\n\n---NEW FILE---\n\nsetidentitytimelock \"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx) (feeoffer) (sourceoffunds)\n\nEnables timelocking and unlocking of funds access for an on-chain VerusID. This does not affect the lock status of VerusIDs on other chains,\nincluding VerusIDs with the same identity as this one, which has been exported to another chain.\n\nUse \"setunlockdelay\" to set a time unlock delay on an identity, which means that once the identity has been unlocked,\nnumberofblocksdelayafterunlock must then pass before the identity will be able to spend funds on this blockchain. Services\nwhich support VerusID authentication and recognize this setting may also choose to prevent funds transfers when an ID is locked.\n\nUse \"unlockatblock\" to either unlock, by passing the current block, which will still require waiting for the specified unlock\ndelay, or to set a future unlock height that immediately begins counting down. Unlike an unlock delay, which only starts counting\ndown when the ID is unlocked, an \"unlockatblock\" time lock is absolute and will automatically unlock when the specified\nblock passes.\n\nArguments - either \"unlockatblock\" or \"setunlockdelay\" must be specified and not both\n{\n  \"unlockatblock\"                (number, optional) unlock at an absolute block height, countdown starts when mined into a block\n  \"setunlockdelay\"               (number, optional) delay this many blocks after unlock request to unlock, can only be\n                                                      circumvented by revoke/recover\n}\n       \"returntx\"                        (bool,   optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned\n       \"feeoffer\"                        (value,  optional) non-standard fee amount to pay for the transaction\n       \"sourceoffunds\"                   (string, optional) transparent or private address to source all funds for fees to preserve privacy of the identity\n\nResult:\n   Hex string of either the txid if returnhex is false or the hex serialized transaction if returntx is true.\n   If returntx is true, the transaction will not have been submitted and must be sent with \"sendrawtransaction\"\n   after any necessary signatures are applied in the case of multisig.\n\nExamples:\n> verus setidentitytimelock \"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx)\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setidentitytimelock\", \"params\": [\"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx)] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ndecryptdata '{\n                  \"datadescriptor\": {},\n                  \"evk\":\"Optional Sapling extended full viewing key\",\n                  \"ivk\":\"Optional hex incoming viewing key\",\n                  \"txid\":\"hex\",\n                  \"retrieve\": bool\n              }\n\n\nDecrypts a vdxf data descriptor, which is typically encrypted to a z-address. If the viewing key is present, it is decrypted, and any nested encryptions are attempted as well.\nIf either the viewing key or the ssk are correct, the object will be returned with as much decryption as possible completed.\nIf no decryption is possible, this function returns an error.\n\n\nArguments:\n{\n    \"datadescriptor\": {}                                           (object, required) Encrypted data descriptor to decrypt, uses wallet keys included in descriptor\n    \"evk\":\"Sapling extended full viewing key\"                      (evk, optional) if known, an extended viewing key to use for decoding that may not be in the descriptor\n    \"ivk\":\"Sapling incoming viewing key hex\"                       (ivk, optional) if known, an incoming viewing key to use for decoding\n    \"txid\":\"hex\",                                                  (txid, optional) if data is from a tx and retrieve is true, this may be needed when the data is on the same tx as the link\n    \"retrieve\": bool                                               (bool, optional) Defaults to false. If true and the data passed is an encrypted or unencrypted reference\n                                                                                          on this chain, it retrieves the data from its reference and decrypts if it can\n}\n\n\nResult:\n\nExamples:\n\nEncrypt data\n> verus signdata '{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'\n\nDecrypt data\n> verus decryptdata '{encrypteddatadescriptor}'\n\nAs json rpc\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signdata\", \"params\": ['{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nsetaccount \"VRSC_address\" \"account\"\n\nDEPRECATED. Sets the account associated with the given address.\n\nArguments:\n1. \"VRSC_address\"  (string, required) The VRSC address to be associated with an account.\n2. \"account\"         (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.\n\nExamples:\n> verus setaccount \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" \"tabby\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setaccount\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", \"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nimportaddress \"address\" ( \"label\" rescan )\n\nAdds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\n\nArguments:\n1. \"address\"          (string, required) The address\n2. \"label\"            (string, optional, default=\"\") An optional label\n3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\n\nNote: This call can take minutes to complete if rescan is true.\n\nExamples:\n\nImport an address with rescan\n> verus importaddress \"myaddress\"\n\nImport using a label without rescan\n> verus importaddress \"myaddress\" \"testing\" false\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myaddress\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nzcbenchmark benchmarktype samplecount\n\nRuns a benchmark of the selected type samplecount times,\nreturning the running times of each sample.\n\nOutput: [\n  {\n    \"runningtime\": runningtime\n  },\n  {\n    \"runningtime\": runningtime\n  }\n  ...\n]\n\n---NEW FILE---\n\nnotaries height timestamp\n\n---NEW FILE---\n\ngetspentinfo\n\nReturns the txid and index where an output is spent.\n\nArguments:\n{\n  \"txid\" (string) The hex string of the txid\n  \"index\" (number) The start block height\n}\n\nResult:\n{\n  \"txid\"  (string) The transaction id\n  \"index\"  (number) The spending input index\n  ,...\n}\n\nExamples:\n> verus getspentinfo '{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getspentinfo\", \"params\": [{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetidentityhistory \"name@ || iid\" (heightstart) (heightend) (txproofs) (txproofheight)\n\n\n\nArguments\n    \"name@ || iid\"                       (string, required) name followed by \"@\" or i-address of an identity\n    \"heightstart\"                        (number, optional) default=0, only return content from this height forward, inclusive\n    \"heightend\"                          (number, optional) default=0 which means max height, only return content up to this height,\n                                                               inclusive. -1 means also return values from the mempool.\n    \"txproofs\"                           (bool, optional) default=false, if true, returns proof of ID\n    \"txproofheight\"                      (number, optional) default=\"height\", height from which to generate a proof\n\nResult:\n\nExamples:\n> verus getidentityhistory \"name@\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentityhistory\", \"params\": [\"name@\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nsendfrom \"fromaccount\" \"toVRSCaddress\" amount ( minconf \"comment\" \"comment-to\" )\n\nDEPRECATED (use sendtoaddress). Sent an amount from an account to a VRSC address.\nThe amount is a real and is rounded to the nearest 0.00000001.\n\nArguments:\n1. \"fromaccount\"       (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.\n2. \"toVRSCaddress\"  (string, required) The VRSC address to send funds to.\n3. amount                (numeric, required) The amount in VRSC (transaction fee is added on top).\n4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.\n5. \"comment\"           (string, optional) A comment used to store what the transaction is for. \n                                     This is not part of the transaction, just kept in your wallet.\n6. \"comment-to\"        (string, optional) An optional comment to store the name of the person or organization \n                                     to which you're sending the transaction. This is not part of the transaction, \n                                     it is just kept in your wallet.\n\nResult:\n\"transactionid\"        (string) The transaction id.\n\nExamples:\n\nSend 0.01 VRSC from the default account to the address, must have at least 1 confirmation\n> verus sendfrom \"\" \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.01\n\nSend 0.01 from the tabby account to the given address, funds must have at least 6 confirmations\n> verus sendfrom \"tabby\" \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.01 6 \"donation\" \"seans outpost\"\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendfrom\", \"params\": [\"tabby\", \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", 0.01, 6, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngettxout \"txid\" n ( includemempool )\n\nReturns details about an unspent transaction output.\n\nArguments:\n1. \"txid\"       (string, required) The transaction id\n2. n              (numeric, required) vout value\n3. includemempool  (boolean, optional) Whether to include the mempool\n\nResult:\n{\n  \"bestblock\" : \"hash\",    (string) the block hash\n  \"confirmations\" : n,       (numeric) The number of confirmations\n  \"value\" : x.xxx,           (numeric) The transaction value in VRSC\n  \"scriptPubKey\" : {         (json object)\n     \"asm\" : \"code\",       (string) \n     \"hex\" : \"hex\",        (string) \n     \"reqSigs\" : n,          (numeric) Number of required signatures\n     \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash\n     \"addresses\" : [          (array of string) array of Verus addresses\n        \"verusaddress\"        (string) Verus address\n        ,...\n     ]\n  },\n  \"version\" : n,              (numeric) The version\n  \"coinbase\" : true|false     (boolean) Coinbase or not\n}\n\nExamples:\n\nGet unspent transactions\n> verus listunspent \n\nView the details\n> verus gettxout \"txid\" 1\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngettxoutproof [\"txid\",...] ( blockhash )\n\nReturns a hex-encoded proof that \"txid\" was included in a block.\n\nNOTE: By default this function only works sometimes. This is when there is an\nunspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option or\nspecify the block in which the transaction is included in manually (by blockhash).\n\nReturn the raw transaction data.\n\nArguments:\n1. \"txids\"       (string) A json array of txids to filter\n    [\n      \"txid\"     (string) A transaction hash\n      ,...\n    ]\n2. \"block hash\"  (string, optional) If specified, looks for txid in the block with this hash\n\nResult:\n\"data\"           (string) A string that is a serialized, hex-encoded data for the proof.\n\n---NEW FILE---\n\nsetminingdistribution ( \"jsonminingdistribution\" )\n\nSets multiple mining outputs with amounts that will be used to calculate relative outputs to each address for any reward\n\nArguments:\n     {\n       \"uniquedestination1\":value    (key/number, required) valid destination address and relative value output to it\n       \"uniquedestination2\":value    (key/number, optional) destination address and relative value output\n       ...\n     }\n\n\nResult:\nNULL for success, exceptoin otherwise\n\nExamples:\n> verus setminingdistribution {\"myaddress\":0.5, \"otheraddress\":0.5}\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setminingdistribution\", \"params\": [{\"myaddress\":0.5, \"otheraddress\":0.5}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetcurrencyconverters \"currency1\" \"currency2\" ... |\n                      '{\"convertto\":\"currencynameorid\",\"fromcurrency\":\"sourcecurrency\" | [{\"currency\":\"sourcecurrency1\", \"targetprice\":n}, ...],\n                       \"amount\":n, \"slippage\":0.01 (=1 percent slippage)}'\n\nRetrieves all currencies that will generally satisfy the request at or better than target price without other traffic and have all listed currencies as reserves\n\nArguments\n       \"currencyname\"                    : \"string\" ...  (string(s), one or more) all selected currencies are returned with their current state\n       \"paramobject\"                     : \"object\" ...  (one or more parameters) advanced query with slippage options\n       {\n           \"convertto\":\"destcurrency\"              \"string\" target currency\n           \"fromcurrency\":\"sourcecurrency\" | [...] \"string\" | object array ... (string(s), one or more) currencies to convert from\n           \"targetprice\":n | [n,...]                 \"number(s)\" ...       (number(s), one or more) target price within slippage required\n           \"amount\":n                                \"number\"              (number) amount of tocurrency needed\n           \"slippage\":n                              \"number\"              (number) max slippage with no other conversions max is 50000000 == 50%\n       }\n\nResult:\n       \"[{currency1}, {currency2}]\" : \"array of objects\" (string) All currencies, last currency state, and last amount to convert if amount specified\n\nExamples:\n> verus getcurrencyconverters '[\"currency1\",\"currency2\",...]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrencyconverters\", \"params\": ['[\"currency1\",\"currency2\",...]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetpendingtransfers \"chainname\"\n\nReturns all pending transfers for a particular chain that have not yet been aggregated into an export\n\nArguments\n1. \"chainname\"                     (string, optional) name of the chain to look for. no parameter returns current chain in daemon.\n\nResult:\n  {\n  }\n\nExamples:\n> verus getpendingtransfers \"chainname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpendingtransfers\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nping\n\nRequests that a ping be sent to all other nodes, to measure ping time.\nResults provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\nPing command is handled in queue with all other commands, so it measures processing backlog, not just network ping.\n\nExamples:\n> verus ping \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"ping\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_getoperationresult ([\"operationid\", ... ]) \n\nRetrieve the result and status of an operation which has finished, and then remove the operation from memory.\n\nArguments:\n1. \"operationid\"         (array, optional) A list of operation ids we are interested in.  If not provided, examine all operations known to the node.\n\nResult:\n\"    [object, ...]\"      (array) A list of JSON objects\n\nExamples:\n> verus z_getoperationresult '[\"operationid\", ... ]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationresult\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_mergetoaddress [\"fromaddress\", ... ] \"toaddress\" ( fee ) ( transparent_limit ) ( shielded_limit ) ( memo )\n\nWARNING: z_mergetoaddress is disabled.\nTo enable it, restart zcashd with the -experimentalfeatures and\n-zmergetoaddress commandline options, or add these two lines\nto the zcash.conf file:\n\nexperimentalfeatures=1\nzmergetoaddress=1\n\nMerge multiple UTXOs and notes into a single UTXO or note. Protected coinbase UTXOs are ignored, use `z_shieldcoinbase`\nto combine those into a single note.\n\nThis is an asynchronous operation, and UTXOs selected for merging will be locked.  If there is an error, they\nare unlocked.  The RPC call `listlockunspent` can be used to return a list of locked UTXOs.\n\nThe number of UTXOs and notes selected for merging can be limited by the caller.  If the transparent limit\nparameter is set to zero, and Overwinter is not yet active, the -mempooltxinputlimit option will determine the\nnumber of UTXOs.  After Overwinter has activated -mempooltxinputlimit is ignored and having a transparent\ninput limit of zero will mean limit the number of UTXOs based on the size of the transaction.  Any limit is\nconstrained by the consensus rule defining a maximum transaction size of 100000 bytes before Sapling, and 2000000\nbytes once Sapling activates.\n\nArguments:\n1. fromaddresses         (array, required) A JSON array with addresses.\n                         The following special strings are accepted inside the array:\n                             - \"ANY_TADDR\":   Merge UTXOs from any t-addrs belonging to the wallet.\n                             - \"ANY_SPROUT\":  Merge notes from any Sprout zaddrs belonging to the wallet.\n                             - \"ANY_SAPLING\": Merge notes from any Sapling zaddrs belonging to the wallet.\n                         While it is possible to use a variety of different combinations of addresses and the above values,\n                         it is not possible to send funds from both sprout and sapling addresses simultaneously. If a special\n                         string is given, any given addresses of that type will be counted as duplicates and cause an error.\n    [\n      \"address\"          (string) Can be a t-addr or a zaddr\n      ,...\n    ]\n2. \"toaddress\"           (string, required) The t-addr or zaddr to send the funds to.\n3. fee                   (numeric, optional, default=0.0001) The fee amount to attach to this transaction.\n4. transparent_limit     (numeric, optional, default=50) Limit on the maximum number of UTXOs to merge.  Set to 0 to use node option -mempooltxinputlimit (before Overwinter), or as many as will fit in the transaction (after Overwinter).\n5. shielded_limit        (numeric, optional, default=20 Sprout or 200 Sapling Notes) Limit on the maximum number of notes to merge.  Set to 0 to merge as many as will fit in the transaction.\n6. \"memo\"                (string, optional) Encoded as hex. When toaddress is a zaddr, this will be stored in the memo field of the new note.\n\nResult:\n{\n  \"remainingUTXOs\": xxx               (numeric) Number of UTXOs still available for merging.\n  \"remainingTransparentValue\": xxx    (numeric) Value of UTXOs still available for merging.\n  \"remainingNotes\": xxx               (numeric) Number of notes still available for merging.\n  \"remainingShieldedValue\": xxx       (numeric) Value of notes still available for merging.\n  \"mergingUTXOs\": xxx                 (numeric) Number of UTXOs being merged.\n  \"mergingTransparentValue\": xxx      (numeric) Value of UTXOs being merged.\n  \"mergingNotes\": xxx                 (numeric) Number of notes being merged.\n  \"mergingShieldedValue\": xxx         (numeric) Value of notes being merged.\n  \"opid\": xxx                         (string) An operationid to pass to z_getoperationstatus to get the result of the operation.\n}\n\nExamples:\n> verus z_mergetoaddress '[\"ANY_SAPLING\", \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\"]' ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_mergetoaddress\", \"params\": [[\"ANY_SAPLING\", \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\"], \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetchaintxstats\n\nCompute statistics about the total number and rate of transactions in the chain.\n\nArguments:\n1. nblocks   (numeric, optional) Number of blocks in averaging window.\n2. blockhash (string, optional) The hash of the block which ends the window.\n\nResult:\n{\n  \"time\": xxxxx,                         (numeric) The timestamp for the final block in the window in UNIX format.\n  \"txcount\": xxxxx,                      (numeric) The total number of transactions in the chain up to that point.\n  \"window_final_block_hash\": \"...\",      (string) The hash of the final block in the window.\n  \"window_block_count\": xxxxx,           (numeric) Size of the window in number of blocks.\n  \"window_tx_count\": xxxxx,              (numeric) The number of transactions in the window. Only returned if \"window_block_count\" is > 0.\n  \"window_interval\": xxxxx,              (numeric) The elapsed time in the window in seconds. Only returned if \"window_block_count\" is > 0.\n  \"txrate\": x.xx,                        (numeric) The average rate of transactions per second in the window. Only returned if \"window_interval\" is > 0.\n}\n\nExamples:\n> verus getchaintxstats \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintxstats\", \"params\": [2016] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nsetcurrencytrust '{\"clearall\": bool, \"setratings\":[{\"currencyid\":JSONRatingObject},...], \"removeratings\":[\"currencyid\",...], \"currencytrustmode\":<n>}'\n\n\n\nArguments\n{\n    \"clearall\": bool                             (bool, optional) clears all wallet currency trust lists before adding, removing, or trust mode operations\n    \"setratings\":[{\"currencyid\":JSONRatingObject},...] (objarray, optional) replaces ratings for specified currencies with those given\n    \"removeratings\":[\"currencyid\",...]                 (strarray, optional) erases ratings for currencies specified\n    \"currencytrustmode\": <n>                     (number, optional) 0 = spend/list all currencies, 1 = only spend/list those rated approved, 2 = spend/list all but those on block list\n}\n\nResult:\nno return on success, else error\n\nExamples:\n> verus setcurrencytrust '{\"clearall\": bool, \"setratings\":[{\"currencyid\":JSONRatingObject},...], \"removeratings\":[\"currencyid\",...], \"currencytrustmode\":<n>}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setcurrencytrust\", \"params\": ['{\"clearall\": bool, \"setratings\":[{\"currencyid\":JSONRatingObject},...], \"removeratings\":[\"currencyid\",...], \"currencytrustmode\":<n>}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetcurrencystate \"currencynameorid\" (\"n\") (\"connectedsystemid\")\n\nReturns the currency state(s) on the blockchain for any specified currency, either with all changes on this chain or relative to another system.\n\nArguments\n   \"currencynameorid\"                  (string)                  name or i-address of currency in question   \"n\" or \"m,n\" or \"m,n,o\"         (int or string, optional) height or inclusive range with optional step at which to get the currency state\n                                                                   If not specified, the latest currency state and height is returned\n   (\"connectedchainid\")                (string)                  optional\n\nResult:\n   [\n       {\n           \"height\": n,\n           \"blocktime\": n,\n           \"currencystate\": {\n               \"flags\" : n,\n               \"initialratio\" : n,\n               \"initialsupply\" : n,\n               \"emitted\" : n,\n               \"supply\" : n,\n               \"reserve\" : n,\n               \"currentratio\" : n,\n           \"}\n       },\n   ]\n\nExamples:\n> verus getcurrencystate \"currencynameorid\" (\"n\") (\"connectedchainid\")\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrencystate\", \"params\": [\"currencynameorid\" (\"n\") (\"connectedchainid\")] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetnettotals\n\nReturns information about network traffic, including bytes in, bytes out,\nand current time.\n\nResult:\n{\n  \"totalbytesrecv\": n,   (numeric) Total bytes received\n  \"totalbytessent\": n,   (numeric) Total bytes sent\n  \"timemillis\": t        (numeric) Total cpu time\n}\n\nExamples:\n> verus getnettotals \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnettotals\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nMoMoMdata symbol kmdheight ccid\n\n---NEW FILE---\n\nlistidentities (includecanspend) (includecansign) (includewatchonly)\n\n\n\nArguments\n    \"includecanspend\"    (bool, optional, default=true)    Include identities for which we can spend/authorize\n    \"includecansign\"     (bool, optional, default=true)    Include identities that we can only sign for but not spend\n    \"includewatchonly\"   (bool, optional, default=false)   Include identities that we can neither sign nor spend, but are either watched or are co-signers with us\n\nResult:\n\nExamples:\n> verus listidentities true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listidentities\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nresendwallettransactions\nImmediately re-broadcast unconfirmed wallet transactions to all peers.\nIntended only for testing; the wallet code periodically re-broadcasts\nautomatically.\nReturns array of transaction ids that were re-broadcast.\n\n---NEW FILE---\n\nupdateidentity \"jsonidentity\" (returntx) (tokenupdate) (feeoffer) (sourceoffunds)\n\n\n\nArguments\n       \"jsonidentity\"                    (obj,    required) new definition of the identity\n       \"returntx\"                        (bool,   optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned\n       \"tokenupdate\"                     (bool,   optional) defaults to false, if true, the tokenized ID control token, if one exists, will be used to update\n                                                              which enables changing the revocation or recovery IDs, even if the wallet holding the token does not\n                                                              control either.\n       \"feeoffer\"                        (value,  optional) non-standard fee amount to pay for the transaction\n       \"sourceoffunds\"                   (string, optional) transparent or private address to source all funds for fees to preserve privacy of the identity\n\nResult:\n   hex string of either the txid if returnhex is false or the hex serialized transaction if returntx is true\n\nExamples:\n> verus updateidentity '{\"name\" : \"myname\"}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"updateidentity\", \"params\": ['{\"name\" : \"myname\"}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ngetinitialcurrencystate \"name\"\n\nReturns the total amount of preconversions that have been confirmed on the blockchain for the specified PBaaS chain.\nThis should be used to get information about chains that are not this chain, but are being launched by it.\n\nArguments\n   \"name\"                    (string, required) name or chain ID of the chain to get the export transactions for\n\nResult:\n   [\n       {\n           \"flags\" : n,\n           \"initialratio\" : n,\n           \"initialsupply\" : n,\n           \"emitted\" : n,\n           \"supply\" : n,\n           \"reserve\" : n,\n           \"currentratio\" : n,\n       },\n   ]\n\nExamples:\n> verus getinitialcurrencystate name\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinitialcurrencystate\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nestimatefee nblocks\n\nEstimates the approximate fee per kilobyte\nneeded for a transaction to begin confirmation\nwithin nblocks blocks.\n\nArguments:\n1. nblocks     (numeric)\n\nResult:\nn :    (numeric) estimated fee-per-kilobyte\n\nminimum fee is returned if not enough transactions and\nblocks have been observed to make an estimate.\n\nExample:\n> verus estimatefee 6\n\n---NEW FILE---\n\nfundrawtransaction \"hexstring\" '[{\"txid\":\"8892b6c090b51a4eed7a61b72e9c8dbf5ed5bcd5aca6c6819b630acf2cb3fc87\",\"voutnum\":1},...]' (changeaddress) (explicitfee)\n\nAdd inputs to a transaction until it has enough in value to meet its out value.\nThis will not modify existing inputs, and will add one change output to the outputs.\nNote that inputs which were signed may need to be resigned after completion since in/outputs have been added.\nThe inputs added will not be signed, use signrawtransaction for that.\n\nArguments:\n1. \"hexstring\"       (string, required)     The hex string of the raw transaction\n2. \"objectarray\"     (UTXO list, optional)  UTXOs to select from for funding\n3. \"changeaddress\"   (string, optional)     Address to send change to if there is any\n4. \"explicitfee\"     (number, optional)     Offer this instead of the default fee only when using UTXO list\n\nResult:\n{\n  \"hex\":       \"value\", (string)  The resulting raw transaction (hex-encoded string)\n  \"fee\":       n,         (numeric) The fee added to the transaction\n  \"changepos\": n          (numeric) The position of the added change output, or -1\n}\n\"hex\"             \n\nExamples:\n\nCreate a transaction with no inputs\n> verus createrawtransaction \"[]\" \"{\"myaddress\":0.01}\"\n\nAdd sufficient unsigned inputs to meet the output value\n> verus fundrawtransaction \"rawtransactionhex\"\n\nSign the transaction\n> verus signrawtransaction \"fundedtransactionhex\"\n\nSend the transaction\n> verus sendrawtransaction \"signedtransactionhex\"\n\n---NEW FILE---\n\ngetnewaddress ( \"account\" )\n\nReturns a new VRSC address for receiving payments.\n\nArguments:\n1. \"account\"        (string, optional) DEPRECATED. If provided, it MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.\n\nResult:\n\"VRSC_address\"    (string) The new VRSC address\n\nExamples:\n> verus getnewaddress \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnewaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nz_getbalance \"address\" ( minconf )\n\nReturns the balance of a taddr or zaddr belonging to the node's wallet.\n\nCAUTION: If the wallet has only an incoming viewing key for this address, then spends cannot be\ndetected, and so the returned balance may be larger than the actual balance.\n\nArguments:\n1. \"address\"      (string) The selected address. It may be a transparent or private address and include z*, R*, and i* wildcards.\n2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\n\nResult:\namount              (numeric) The total amount in VRSC received for this address.\n\nExamples:\n\nThe total amount received by address \"myaddress\"\n> verus z_getbalance \"myaddress\"\n\nThe total amount received by address \"myaddress\" at least 5 blocks confirmed\n> verus z_getbalance \"myaddress\" 5\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getbalance\", \"params\": [\"myaddress\", 5] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\nverifychain ( checklevel numblocks )\n\nVerifies blockchain database.\n\nArguments:\n1. checklevel   (numeric, optional, 0-4, default=3) How thorough the block verification is.\n2. numblocks    (numeric, optional, default=288, 0=all) The number of blocks to check.\n\nResult:\ntrue|false       (boolean) Verified or not\n\nExamples:\n> verus verifychain \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n\n---NEW FILE---\n\ntakeoffer fromaddress '{\"txid\":\"txid\" | \"tx\":\"hextx\", \"changeaddress\":\"transparentoriaddress\", \"deliver\":\"fullidnameoriaddresstodeliver\" | {\"currency\":\"currencynameorid\",\"amount\":n}, \"accept\":{\"address\":\"addressorid\",\"currency\":\"currencynameorid\",\"amount\":n} | {identitydefinition} | {\"txout\":{\"serializedtxout\"}}}' (returntx) (feeamount)\n\nIf the current wallet can afford the swap, this accepts a swap offer on the blockchain, creates a transaction\nto execute it, and posts the transaction to the blockchain.\n\nArguments\n\"fromaddress\"            (string, required) The Sapling, VerusID, or wildcard address to send funds from, including fees for ID swaps.\n                                              \"*\", \"R*\", or \"i*\" are valid wildcards\n{\n\"txid\"               (string, required) The transaction ID for the offer to accept\n\"tx\"                 (string, required) The hex transaction to complete in order to accept the offer\n\"deliver\"            (object, required) One of \"fullidnameoriaddresstotrade\" or {\"currency\":\"currencynameorid\", \"amount\":value}\n\"accept\"             (object, required) One of {\"address\":\"addressorid\",\"currency\":\"currencynameorid\",\"amount\"} or {identitydefinition}\n\"feeamount\"          (number, optional) Specific fee amount requested instead of default miner's fee\n}\n\nResult:\n   \"txid\" : \"transactionid\" (string) The transaction id if (returntx) is false\n   \"hextx\" : \"hex\"         (string) The hexadecimal, serialized transaction if (returntx) is true\n\nExamples:\n> verus takeoffer fromaddress '{\"txid\":\"txid\" | \"tx\":\"hextx\", \"deliver\":\"fullidnameoriaddresstodeliver\" | {\"currency\":\"currencynameorid\",\"amount\":...}, \"accept\":{\"address\":\"addressorid\",\"currency\":\"currencynameorid\",\"amount\"} | {identitydefinition}}' (returntx) (feeamount)\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"takeoffer\", \"params\": [fromaddress {\"txid\":\"txid\" | \"tx\":\"hextx\", \"deliver\":\"fullidnameoriaddresstodeliver\" | {\"currency\":\"currencynameorid\",\"amount\":...}, \"accept\":{\"address\":\"addressorid\",\"currency\":\"currencynameorid\",\"amount\"} | {identitydefinition}} (returntx) (feeamount)] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/"}