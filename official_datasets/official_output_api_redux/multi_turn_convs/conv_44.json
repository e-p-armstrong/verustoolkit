[
    "## Conversation that answers the provided questions:\n**User:**\nHey, I've got a question about Verus. What is the purpose of the `z_getoperationstatus` command?\n\n**AI Assistant:**\nThe `z_getoperationstatus` command is used to retrieve the status of one or more operations, along with any associated result or error data. The operation(s) will remain in memory after this command is executed.\n\n**User:**\nThat makes sense. How do I specify which operations to query with `z_getoperationstatus`?\n\n**AI Assistant:**\nYou can specify which operations to query by passing an array of operation IDs as an argument to the `z_getoperationstatus` command. If no operation IDs are provided, the command will examine all operations known to the node.\n\n**User:**\nWhat is the format of the result returned by `z_getoperationstatus`?\n\n**AI Assistant:**\nThe result returned by `z_getoperationstatus` is an array of JSON objects, each containing information about the status of an operation.\n\n**User:**\nHow can I use `z_getoperationstatus` from the command line?\n\n**AI Assistant:**\nYou can use `z_getoperationstatus` from the command line by running the following command: `verus z_getoperationstatus '[\"operationid\",... ]'`. Replace `\"operationid\"` with the actual ID of the operation you want to query.\n\n**User:**\nCan I use `z_getoperationstatus` with a JSON-RPC interface?\n\n**AI Assistant:**\nYes, you can use `z_getoperationstatus` with a JSON-RPC interface. To do so, you can send a JSON-RPC request to the Verus node with the following format: `curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationstatus\", \"params\": ['[\"operationid\",... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/`. Replace `\"operationid\"` with the actual ID of the operation you want to query.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What is the purpose of the `z_getoperationstatus` command in Verus?",
            "The `z_getoperationstatus` command is used to retrieve the status of one or more operations, along with any associated result or error data. The operation(s) will remain in memory after this command is executed.",
            "z_getoperationstatus ([\"operationid\", ... ])\n\nGet operation status and any associated result or error data. The operation will remain in memory.\n\nArguments:\n1. \"operationid\"     (array, optional) A list of operation ids we are interested in. If not provided, examine all operations known to the node.\n\nResult:\n\"  [object, ...]\"   (array) A list of JSON objects\n\nExamples:\n> verus z_getoperationstatus '[\"operationid\", ... ]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationstatus\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/z_getoperationstatus"
        ],
        [
            "How do I specify which operations to query with `z_getoperationstatus`?",
            "You can specify which operations to query by passing an array of operation IDs as an argument to the `z_getoperationstatus` command. If no operation IDs are provided, the command will examine all operations known to the node.",
            "z_getoperationstatus ([\"operationid\", ... ])\n\nGet operation status and any associated result or error data. The operation will remain in memory.\n\nArguments:\n1. \"operationid\"     (array, optional) A list of operation ids we are interested in. If not provided, examine all operations known to the node.\n\nResult:\n\"  [object, ...]\"   (array) A list of JSON objects\n\nExamples:\n> verus z_getoperationstatus '[\"operationid\", ... ]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationstatus\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/z_getoperationstatus"
        ],
        [
            "What is the format of the result returned by `z_getoperationstatus`?",
            "The result returned by `z_getoperationstatus` is an array of JSON objects, each containing information about the status of an operation.",
            "z_getoperationstatus ([\"operationid\", ... ])\n\nGet operation status and any associated result or error data. The operation will remain in memory.\n\nArguments:\n1. \"operationid\"     (array, optional) A list of operation ids we are interested in. If not provided, examine all operations known to the node.\n\nResult:\n\"  [object, ...]\"   (array) A list of JSON objects\n\nExamples:\n> verus z_getoperationstatus '[\"operationid\", ... ]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationstatus\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/z_getoperationstatus"
        ],
        [
            "How can I use `z_getoperationstatus` from the command line?",
            "You can use `z_getoperationstatus` from the command line by running the following command: `verus z_getoperationstatus '[\"operationid\",... ]'`. Replace `\"operationid\"` with the actual ID of the operation you want to query.",
            "z_getoperationstatus ([\"operationid\", ... ])\n\nGet operation status and any associated result or error data. The operation will remain in memory.\n\nArguments:\n1. \"operationid\"     (array, optional) A list of operation ids we are interested in. If not provided, examine all operations known to the node.\n\nResult:\n\"  [object, ...]\"   (array) A list of JSON objects\n\nExamples:\n> verus z_getoperationstatus '[\"operationid\", ... ]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationstatus\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/z_getoperationstatus"
        ],
        [
            "Can I use `z_getoperationstatus` with a JSON-RPC interface?",
            "Yes, you can use `z_getoperationstatus` with a JSON-RPC interface. To do so, you can send a JSON-RPC request to the Verus node with the following format: `curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationstatus\", \"params\": ['[\"operationid\",... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/`. Replace `\"operationid\"` with the actual ID of the operation you want to query.",
            "z_getoperationstatus ([\"operationid\", ... ])\n\nGet operation status and any associated result or error data. The operation will remain in memory.\n\nArguments:\n1. \"operationid\"     (array, optional) A list of operation ids we are interested in. If not provided, examine all operations known to the node.\n\nResult:\n\"  [object, ...]\"   (array) A list of JSON objects\n\nExamples:\n> verus z_getoperationstatus '[\"operationid\", ... ]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationstatus\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/z_getoperationstatus"
        ]
    ]
]