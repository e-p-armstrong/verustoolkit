[
    [
        [
            "What is the purpose of the `registeridentity` command in Verus?",
            "The `registeridentity` command in Verus is used to register an identity on the Verus network. It takes a JSON object as an argument, which contains information about the identity, such as its unique name, salt, and referral ID. The command returns a transaction ID, which can be used to track the registration process.",
            "registeridentity \"jsonidregistration\" (returntx) feeoffer sourceoffunds\n\nArguments\n{\n  \"txid\" : \"hexid\",     (hex)  the transaction ID of the name commitment for this ID name\n  \"namereservation\" :\n  {\n    \"name\": \"namestr\",   (string) the unique name in this commitment\n    \"salt\": \"hexstr\",   (hex)  salt used to hide the commitment\n    \"referral\": \"identityID\", (name@ or address) must be a valid ID to use as a referrer to receive a discount\n  },\n  \"identity\" :\n  {\n    \"name\": \"namestr\",   (string) the unique name for this identity\n    ...\n  }\n}\nreturntx              (bool, optional) default=false if true, return a transaction for additional signatures rather than committing it\nfeeoffer              (amount, optional) amount to offer miner/staker for the registration fee, if missing, uses standard price\nsourceoffunds           (addressorid, optional) optional address to use for source of funds. if not specified, transparent wildcard \"*\" is used\n\nResult:\n  transactionid          (hexstr)\n\nExamples:\n> verus registeridentity jsonidregistration\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"registeridentity\", \"params\": [jsonidregistration] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/registeridentity"
        ],
        [
            "What is the `returntx` parameter in the `registeridentity` command, and what does it do?",
            "The `returntx` parameter in the `registeridentity` command is an optional boolean parameter that defaults to `false`. If set to `true`, it returns a transaction for additional signatures rather than committing it.",
            "registeridentity \"jsonidregistration\" (returntx) feeoffer sourceoffunds\n\nArguments\n{\n  \"txid\" : \"hexid\",     (hex)  the transaction ID of the name commitment for this ID name\n  \"namereservation\" :\n  {\n    \"name\": \"namestr\",   (string) the unique name in this commitment\n    \"salt\": \"hexstr\",   (hex)  salt used to hide the commitment\n    \"referral\": \"identityID\", (name@ or address) must be a valid ID to use as a referrer to receive a discount\n  },\n  \"identity\" :\n  {\n    \"name\": \"namestr\",   (string) the unique name for this identity\n    ...\n  }\n}\nreturntx              (bool, optional) default=false if true, return a transaction for additional signatures rather than committing it\nfeeoffer              (amount, optional) amount to offer miner/staker for the registration fee, if missing, uses standard price\nsourceoffunds           (addressorid, optional) optional address to use for source of funds. if not specified, transparent wildcard \"*\" is used\n\nResult:\n  transactionid          (hexstr)\n\nExamples:\n> verus registeridentity jsonidregistration\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"registeridentity\", \"params\": [jsonidregistration] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/registeridentity"
        ],
        [
            "What is the `feeoffer` parameter in the `registeridentity` command, and what does it do?",
            "The `feeoffer` parameter in the `registeridentity` command is an optional amount parameter that specifies the amount to offer the miner or staker for the registration fee. If missing, it uses the standard price.",
            "registeridentity \"jsonidregistration\" (returntx) feeoffer sourceoffunds\n\nArguments\n{\n  \"txid\" : \"hexid\",     (hex)  the transaction ID of the name commitment for this ID name\n  \"namereservation\" :\n  {\n    \"name\": \"namestr\",   (string) the unique name in this commitment\n    \"salt\": \"hexstr\",   (hex)  salt used to hide the commitment\n    \"referral\": \"identityID\", (name@ or address) must be a valid ID to use as a referrer to receive a discount\n  },\n  \"identity\" :\n  {\n    \"name\": \"namestr\",   (string) the unique name for this identity\n    ...\n  }\n}\nreturntx              (bool, optional) default=false if true, return a transaction for additional signatures rather than committing it\nfeeoffer              (amount, optional) amount to offer miner/staker for the registration fee, if missing, uses standard price\nsourceoffunds           (addressorid, optional) optional address to use for source of funds. if not specified, transparent wildcard \"*\" is used\n\nResult:\n  transactionid          (hexstr)\n\nExamples:\n> verus registeridentity jsonidregistration\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"registeridentity\", \"params\": [jsonidregistration] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/registeridentity"
        ],
        [
            "What is the `sourceoffunds` parameter in the `registeridentity` command, and what does it do?",
            "The `sourceoffunds` parameter in the `registeridentity` command is an optional address or ID parameter that specifies the address to use as the source of funds for the registration. If not specified, it uses a transparent wildcard `\"*\"`.",
            "registeridentity \"jsonidregistration\" (returntx) feeoffer sourceoffunds\n\nArguments\n{\n  \"txid\" : \"hexid\",     (hex)  the transaction ID of the name commitment for this ID name\n  \"namereservation\" :\n  {\n    \"name\": \"namestr\",   (string) the unique name in this commitment\n    \"salt\": \"hexstr\",   (hex)  salt used to hide the commitment\n    \"referral\": \"identityID\", (name@ or address) must be a valid ID to use as a referrer to receive a discount\n  },\n  \"identity\" :\n  {\n    \"name\": \"namestr\",   (string) the unique name for this identity\n    ...\n  }\n}\nreturntx              (bool, optional) default=false if true, return a transaction for additional signatures rather than committing it\nfeeoffer              (amount, optional) amount to offer miner/staker for the registration fee, if missing, uses standard price\nsourceoffunds           (addressorid, optional) optional address to use for source of funds. if not specified, transparent wildcard \"*\" is used\n\nResult:\n  transactionid          (hexstr)\n\nExamples:\n> verus registeridentity jsonidregistration\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"registeridentity\", \"params\": [jsonidregistration] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/registeridentity"
        ],
        [
            "How can I use the `registeridentity` command in Verus?",
            "You can use the `registeridentity` command in Verus by running the command with a JSON object as an argument, like this:\n```\nverus registeridentity jsonidregistration\n```\nAlternatively, you can use the `curl` command to send a JSON-RPC request to the Verus node, like this:\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"registeridentity\", \"params\": [jsonidregistration] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "registeridentity \"jsonidregistration\" (returntx) feeoffer sourceoffunds\n\nArguments\n{\n  \"txid\" : \"hexid\",     (hex)  the transaction ID of the name commitment for this ID name\n  \"namereservation\" :\n  {\n    \"name\": \"namestr\",   (string) the unique name in this commitment\n    \"salt\": \"hexstr\",   (hex)  salt used to hide the commitment\n    \"referral\": \"identityID\", (name@ or address) must be a valid ID to use as a referrer to receive a discount\n  },\n  \"identity\" :\n  {\n    \"name\": \"namestr\",   (string) the unique name for this identity\n    ...\n  }\n}\nreturntx              (bool, optional) default=false if true, return a transaction for additional signatures rather than committing it\nfeeoffer              (amount, optional) amount to offer miner/staker for the registration fee, if missing, uses standard price\nsourceoffunds           (addressorid, optional) optional address to use for source of funds. if not specified, transparent wildcard \"*\" is used\n\nResult:\n  transactionid          (hexstr)\n\nExamples:\n> verus registeridentity jsonidregistration\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"registeridentity\", \"params\": [jsonidregistration] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/registeridentity"
        ]
    ],
    "will",
    "be",
    "replaced",
    "6b1e7e60-a37c-4cd4-808f-aab22f4cc438"
]