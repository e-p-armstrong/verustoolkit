[
    [
        [
            "What is the purpose of the `z_importkey` command in Verus?",
            "The `z_importkey` command is used to add a zkey (a private key) to your Verus wallet. This allows you to use the imported key to manage and control your Verus assets.",
            "z_importkey \"zkey\" ( rescan startHeight )\n\nAdds a zkey (as returned by z_exportkey) to your wallet.\n\nArguments:\n1. \"zkey\"       (string, required) The zkey (see z_exportkey)\n2. rescan        (string, optional, default=\"whenkeyisnew\") Rescan the wallet for transactions - can be \"yes\", \"no\" or \"whenkeyisnew\"\n3. startHeight     (numeric, optional, default=0) Block height to start rescan from\n\nNote: This call can take minutes to complete if rescan is true.\n\nExamples:\n\nExport a zkey\n> verus z_exportkey \"myaddress\"\n\nImport the zkey with rescan\n> verus z_importkey \"mykey\"\n\nImport the zkey with partial rescan\n> verus z_importkey \"mykey\" whenkeyisnew 30000\n\nRe-import the zkey with longer partial rescan\n> verus z_importkey \"mykey\" yes 20000\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_importkey\", \"params\": [\"mykey\", \"no\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/z_importkey"
        ],
        [
            "What are the arguments required for the `z_importkey` command?",
            "The `z_importkey` command requires two arguments:\n\n1. \"zkey\" - a string representing the zkey (private key) to be imported, which can be obtained using the `z_exportkey` command.\n2. rescan (optional) - a string indicating whether to rescan the wallet for transactions. It can be set to \"yes\", \"no\", or \"whenkeyisnew\". If not provided, it defaults to \"whenkeyisnew\".\n3. startHeight (optional) - a numeric value indicating the block height to start the rescan from. If not provided, it defaults to 0.",
            "z_importkey \"zkey\" ( rescan startHeight )\n\nAdds a zkey (as returned by z_exportkey) to your wallet.\n\nArguments:\n1. \"zkey\"       (string, required) The zkey (see z_exportkey)\n2. rescan        (string, optional, default=\"whenkeyisnew\") Rescan the wallet for transactions - can be \"yes\", \"no\" or \"whenkeyisnew\"\n3. startHeight     (numeric, optional, default=0) Block height to start rescan from\n\nNote: This call can take minutes to complete if rescan is true.\n\nExamples:\n\nExport a zkey\n> verus z_exportkey \"myaddress\"\n\nImport the zkey with rescan\n> verus z_importkey \"mykey\"\n\nImport the zkey with partial rescan\n> verus z_importkey \"mykey\" whenkeyisnew 30000\n\nRe-import the zkey with longer partial rescan\n> verus z_importkey \"mykey\" yes 20000\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_importkey\", \"params\": [\"mykey\", \"no\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/z_importkey"
        ],
        [
            "What happens if I set `rescan` to \"yes\" when using the `z_importkey` command?",
            "If you set `rescan` to \"yes\" when using the `z_importkey` command, the wallet will rescan the entire blockchain for transactions related to the imported key. This process can take several minutes to complete, depending on the blockchain size and the height of the rescan.",
            "z_importkey \"zkey\" ( rescan startHeight )\n\nAdds a zkey (as returned by z_exportkey) to your wallet.\n\nArguments:\n1. \"zkey\"       (string, required) The zkey (see z_exportkey)\n2. rescan        (string, optional, default=\"whenkeyisnew\") Rescan the wallet for transactions - can be \"yes\", \"no\" or \"whenkeyisnew\"\n3. startHeight     (numeric, optional, default=0) Block height to start rescan from\n\nNote: This call can take minutes to complete if rescan is true.\n\nExamples:\n\nExport a zkey\n> verus z_exportkey \"myaddress\"\n\nImport the zkey with rescan\n> verus z_importkey \"mykey\"\n\nImport the zkey with partial rescan\n> verus z_importkey \"mykey\" whenkeyisnew 30000\n\nRe-import the zkey with longer partial rescan\n> verus z_importkey \"mykey\" yes 20000\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_importkey\", \"params\": [\"mykey\", \"no\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/z_importkey"
        ],
        [
            "How can I import a zkey with a partial rescan using the `z_importkey` command?",
            "To import a zkey with a partial rescan, you can use the `z_importkey` command with the `rescan` argument set to \"whenkeyisnew\" or \"yes\", and provide a `startHeight` value indicating the block height to start the rescan from. For example: `verus z_importkey \"mykey\" whenkeyisnew 30000`.",
            "z_importkey \"zkey\" ( rescan startHeight )\n\nAdds a zkey (as returned by z_exportkey) to your wallet.\n\nArguments:\n1. \"zkey\"       (string, required) The zkey (see z_exportkey)\n2. rescan        (string, optional, default=\"whenkeyisnew\") Rescan the wallet for transactions - can be \"yes\", \"no\" or \"whenkeyisnew\"\n3. startHeight     (numeric, optional, default=0) Block height to start rescan from\n\nNote: This call can take minutes to complete if rescan is true.\n\nExamples:\n\nExport a zkey\n> verus z_exportkey \"myaddress\"\n\nImport the zkey with rescan\n> verus z_importkey \"mykey\"\n\nImport the zkey with partial rescan\n> verus z_importkey \"mykey\" whenkeyisnew 30000\n\nRe-import the zkey with longer partial rescan\n> verus z_importkey \"mykey\" yes 20000\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_importkey\", \"params\": [\"mykey\", \"no\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/z_importkey"
        ],
        [
            "Can I use the `z_importkey` command as a JSON-RPC call?",
            "Yes, you can use the `z_importkey` command as a JSON-RPC call. You can do this by sending a JSON-RPC request to the Verus node, with the method set to \"z_importkey\" and the parameters set to the zkey and rescan arguments. For example:\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_importkey\", \"params\": [\"mykey\", \"no\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "z_importkey \"zkey\" ( rescan startHeight )\n\nAdds a zkey (as returned by z_exportkey) to your wallet.\n\nArguments:\n1. \"zkey\"       (string, required) The zkey (see z_exportkey)\n2. rescan        (string, optional, default=\"whenkeyisnew\") Rescan the wallet for transactions - can be \"yes\", \"no\" or \"whenkeyisnew\"\n3. startHeight     (numeric, optional, default=0) Block height to start rescan from\n\nNote: This call can take minutes to complete if rescan is true.\n\nExamples:\n\nExport a zkey\n> verus z_exportkey \"myaddress\"\n\nImport the zkey with rescan\n> verus z_importkey \"mykey\"\n\nImport the zkey with partial rescan\n> verus z_importkey \"mykey\" whenkeyisnew 30000\n\nRe-import the zkey with longer partial rescan\n> verus z_importkey \"mykey\" yes 20000\n\nAs a JSON-RPC call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_importkey\", \"params\": [\"mykey\", \"no\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/z_importkey"
        ]
    ],
    "will",
    "be",
    "replaced",
    "72130703-a677-452a-a1c6-1d94309100d5"
]