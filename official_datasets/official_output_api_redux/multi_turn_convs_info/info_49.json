[
    [
        [
            "What does the `getblockheader` command do in Verus?",
            "The `getblockheader` command retrieves information about a specific block header in the Verus blockchain. It takes two arguments: the block hash and an optional boolean flag for verbosity.",
            "getblockheader \"hash\" ( verbose )\n\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\nIf verbose is true, returns an Object with information about blockheader <hash>.\n\nArguments:\n1. \"hash\"     (string, required) The block hash\n2. verbose      (boolean, optional, default=true) true for a json object, false for the hex encoded data\n\nResult (for verbose = true):\n{\n \"hash\" : \"hash\",   (string) the block hash (same as provided)\n \"confirmations\" : n,  (numeric) The number of confirmations, or -1 if the block is not on the main chain\n \"height\" : n,     (numeric) The block height or index\n \"version\" : n,     (numeric) The block version\n \"merkleroot\" : \"xxxx\", (string) The merkle root\n \"finalsaplingroot\" : \"xxxx\", (string) The root of the Sapling commitment tree after applying this block\n \"time\" : ttt,     (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n \"nonce\" : n,      (numeric) The nonce\n \"bits\" : \"1d00ffff\", (string) The bits\n \"difficulty\" : x.xxx, (numeric) The difficulty\n \"previousblockhash\" : \"hash\", (string) The hash of the previous block\n \"nextblockhash\" : \"hash\"    (string) The hash of the next block\n}\n\nResult (for verbose=false):\n\"data\"       (string) A string that is serialized, hex-encoded data for block 'hash'.\n\nExamples:\n> verus getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/getblockheader"
        ],
        [
            "What is the difference between running `getblockheader` with `verbose` set to `true` and `verbose` set to `false`?",
            "If `verbose` is set to `true`, the command returns a JSON object with detailed information about the block header, including its hash, confirmations, height, version, merkle root, final Sapling root, time, nonce, bits, difficulty, and previous and next block hashes. If `verbose` is set to `false`, the command returns a string that is serialized, hex-encoded data for the block header.",
            "getblockheader \"hash\" ( verbose )\n\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\nIf verbose is true, returns an Object with information about blockheader <hash>.\n\nArguments:\n1. \"hash\"     (string, required) The block hash\n2. verbose      (boolean, optional, default=true) true for a json object, false for the hex encoded data\n\nResult (for verbose = true):\n{\n \"hash\" : \"hash\",   (string) the block hash (same as provided)\n \"confirmations\" : n,  (numeric) The number of confirmations, or -1 if the block is not on the main chain\n \"height\" : n,     (numeric) The block height or index\n \"version\" : n,     (numeric) The block version\n \"merkleroot\" : \"xxxx\", (string) The merkle root\n \"finalsaplingroot\" : \"xxxx\", (string) The root of the Sapling commitment tree after applying this block\n \"time\" : ttt,     (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n \"nonce\" : n,      (numeric) The nonce\n \"bits\" : \"1d00ffff\", (string) The bits\n \"difficulty\" : x.xxx, (numeric) The difficulty\n \"previousblockhash\" : \"hash\", (string) The hash of the previous block\n \"nextblockhash\" : \"hash\"    (string) The hash of the next block\n}\n\nResult (for verbose=false):\n\"data\"       (string) A string that is serialized, hex-encoded data for block 'hash'.\n\nExamples:\n> verus getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/getblockheader"
        ],
        [
            "What information can I expect to see in the JSON object returned by `getblockheader` when `verbose` is set to `true`?",
            "The JSON object returned by `getblockheader` when `verbose` is set to `true` includes the following information:\n\n* The block hash\n* The number of confirmations, or -1 if the block is not on the main chain\n* The block height or index\n* The block version\n* The merkle root\n* The root of the Sapling commitment tree after applying this block\n* The block time in seconds since epoch (Jan 1 1970 GMT)\n* The nonce\n* The bits\n* The difficulty\n* The hash of the previous block\n* The hash of the next block",
            "getblockheader \"hash\" ( verbose )\n\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\nIf verbose is true, returns an Object with information about blockheader <hash>.\n\nArguments:\n1. \"hash\"     (string, required) The block hash\n2. verbose      (boolean, optional, default=true) true for a json object, false for the hex encoded data\n\nResult (for verbose = true):\n{\n \"hash\" : \"hash\",   (string) the block hash (same as provided)\n \"confirmations\" : n,  (numeric) The number of confirmations, or -1 if the block is not on the main chain\n \"height\" : n,     (numeric) The block height or index\n \"version\" : n,     (numeric) The block version\n \"merkleroot\" : \"xxxx\", (string) The merkle root\n \"finalsaplingroot\" : \"xxxx\", (string) The root of the Sapling commitment tree after applying this block\n \"time\" : ttt,     (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n \"nonce\" : n,      (numeric) The nonce\n \"bits\" : \"1d00ffff\", (string) The bits\n \"difficulty\" : x.xxx, (numeric) The difficulty\n \"previousblockhash\" : \"hash\", (string) The hash of the previous block\n \"nextblockhash\" : \"hash\"    (string) The hash of the next block\n}\n\nResult (for verbose=false):\n\"data\"       (string) A string that is serialized, hex-encoded data for block 'hash'.\n\nExamples:\n> verus getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/getblockheader"
        ],
        [
            "How can I use the `getblockheader` command in Verus?",
            "You can use the `getblockheader` command in Verus by running `verus getblockheader \"block_hash\"` in the command line, replacing `\"block_hash\"` with the actual hash of the block you want to retrieve information about. You can also use the `curl` command to access the Verus RPC API and retrieve the block header information.",
            "getblockheader \"hash\" ( verbose )\n\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\nIf verbose is true, returns an Object with information about blockheader <hash>.\n\nArguments:\n1. \"hash\"     (string, required) The block hash\n2. verbose      (boolean, optional, default=true) true for a json object, false for the hex encoded data\n\nResult (for verbose = true):\n{\n \"hash\" : \"hash\",   (string) the block hash (same as provided)\n \"confirmations\" : n,  (numeric) The number of confirmations, or -1 if the block is not on the main chain\n \"height\" : n,     (numeric) The block height or index\n \"version\" : n,     (numeric) The block version\n \"merkleroot\" : \"xxxx\", (string) The merkle root\n \"finalsaplingroot\" : \"xxxx\", (string) The root of the Sapling commitment tree after applying this block\n \"time\" : ttt,     (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n \"nonce\" : n,      (numeric) The nonce\n \"bits\" : \"1d00ffff\", (string) The bits\n \"difficulty\" : x.xxx, (numeric) The difficulty\n \"previousblockhash\" : \"hash\", (string) The hash of the previous block\n \"nextblockhash\" : \"hash\"    (string) The hash of the next block\n}\n\nResult (for verbose=false):\n\"data\"       (string) A string that is serialized, hex-encoded data for block 'hash'.\n\nExamples:\n> verus getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/getblockheader"
        ]
    ],
    "will",
    "be",
    "replaced",
    "fbec561f-68ab-417a-91b5-0573813ea623"
]