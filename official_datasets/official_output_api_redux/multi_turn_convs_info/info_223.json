[
    [
        [
            "What is the purpose of the `getvdxfid` command in Verus?",
            "The `getvdxfid` command is used to return the VDXF key of a URI string. It takes a URI string as input, hashes the data, and returns the VDXF key along with other related information.",
            "getvdxfid \"vdxfuri\" '{\"vdxfkey\":\"i-address or vdxfkey\", \"uint256\":\"hexstr\", \"indexnum\":0}'Returns the VDXF key of the URI string. For example \"vrsc::system.currency.export\"Arguments:\n \"vdxfuri\"               (string, required) This message is converted from hex, the data is hashed, then returned\n \"{\"\n  \"vdxfkey\":\"i-address or vdxfkey\"  (string, optional) VDXF key or i-address to combine via hash\n  \"uint256\":\"32bytehex\"       (hexstr, optional) 256 bit hash to combine with hash\n  \"indexnum\":int            (integer, optional) int32_t number to combine with hash\n \"}\"Result:\n{                     (object) object with both base58check and hex vdxfid values of string and parents\n \"vdxfid\"                (base58check) i-ID of the URI processed with the VDXF & all combined parameters\n \"hash160result\"            (hexstring) 20 byte hash in hex of the URL string passed in, processed with the VDXF\n \"qualifiedname\":            (object) separate name and parent ID value\n {\n  \"name\": \"namestr\"         (string) leaf name\n  \"parentid\" | \"namespace\":\"string\" (string) parent ID (or namespace if VDXF key) of name\n }\n \"bounddata\": {             (object) if additional data is bound to create the value, it is returned here {\n  \"vdxfkey\":\"i-address or vdxfkey\"  (string) i-address that was combined via hash\n  \"uint256\":\"32bytehex\"       (hexstr) 256 bit hash combined with hash\n  \"indexnum\":int            (integer) int32_t combined with hash\n }\n}Examples:Create the signature\n> verus getvdxfid \"system.currency.export\"Verify the signature\n> verus getvdxfid \"idname::userdefinedgroup.subgroup.publishedname\"",
            "./raw_text_input_api_text/getvdxfid"
        ],
        [
            "What are the optional parameters that can be passed to the `getvdxfid` command?",
            "The `getvdxfid` command accepts three optional parameters: `vdxfkey`, `uint256`, and `indexnum`. `vdxfkey` is a VDXF key or i-address to combine via hash, `uint256` is a 256-bit hash to combine with the hash, and `indexnum` is an integer to combine with the hash.",
            "getvdxfid \"vdxfuri\" '{\"vdxfkey\":\"i-address or vdxfkey\", \"uint256\":\"hexstr\", \"indexnum\":0}'Returns the VDXF key of the URI string. For example \"vrsc::system.currency.export\"Arguments:\n \"vdxfuri\"               (string, required) This message is converted from hex, the data is hashed, then returned\n \"{\"\n  \"vdxfkey\":\"i-address or vdxfkey\"  (string, optional) VDXF key or i-address to combine via hash\n  \"uint256\":\"32bytehex\"       (hexstr, optional) 256 bit hash to combine with hash\n  \"indexnum\":int            (integer, optional) int32_t number to combine with hash\n \"}\"Result:\n{                     (object) object with both base58check and hex vdxfid values of string and parents\n \"vdxfid\"                (base58check) i-ID of the URI processed with the VDXF & all combined parameters\n \"hash160result\"            (hexstring) 20 byte hash in hex of the URL string passed in, processed with the VDXF\n \"qualifiedname\":            (object) separate name and parent ID value\n {\n  \"name\": \"namestr\"         (string) leaf name\n  \"parentid\" | \"namespace\":\"string\" (string) parent ID (or namespace if VDXF key) of name\n }\n \"bounddata\": {             (object) if additional data is bound to create the value, it is returned here {\n  \"vdxfkey\":\"i-address or vdxfkey\"  (string) i-address that was combined via hash\n  \"uint256\":\"32bytehex\"       (hexstr) 256 bit hash combined with hash\n  \"indexnum\":int            (integer) int32_t combined with hash\n }\n}Examples:Create the signature\n> verus getvdxfid \"system.currency.export\"Verify the signature\n> verus getvdxfid \"idname::userdefinedgroup.subgroup.publishedname\"",
            "./raw_text_input_api_text/getvdxfid"
        ],
        [
            "What is the format of the result returned by the `getvdxfid` command?",
            "The result returned by the `getvdxfid` command is an object with several properties: `vdxfid`, `hash160result`, `qualifiedname`, and `bounddata`. `vdxfid` is the base58check and hex VDXF ID values of the string and parents, `hash160result` is the 20-byte hash in hex of the URL string passed in, `qualifiedname` is an object with separate name and parent ID values, and `bounddata` is an object with additional data bound to create the value.",
            "getvdxfid \"vdxfuri\" '{\"vdxfkey\":\"i-address or vdxfkey\", \"uint256\":\"hexstr\", \"indexnum\":0}'Returns the VDXF key of the URI string. For example \"vrsc::system.currency.export\"Arguments:\n \"vdxfuri\"               (string, required) This message is converted from hex, the data is hashed, then returned\n \"{\"\n  \"vdxfkey\":\"i-address or vdxfkey\"  (string, optional) VDXF key or i-address to combine via hash\n  \"uint256\":\"32bytehex\"       (hexstr, optional) 256 bit hash to combine with hash\n  \"indexnum\":int            (integer, optional) int32_t number to combine with hash\n \"}\"Result:\n{                     (object) object with both base58check and hex vdxfid values of string and parents\n \"vdxfid\"                (base58check) i-ID of the URI processed with the VDXF & all combined parameters\n \"hash160result\"            (hexstring) 20 byte hash in hex of the URL string passed in, processed with the VDXF\n \"qualifiedname\":            (object) separate name and parent ID value\n {\n  \"name\": \"namestr\"         (string) leaf name\n  \"parentid\" | \"namespace\":\"string\" (string) parent ID (or namespace if VDXF key) of name\n }\n \"bounddata\": {             (object) if additional data is bound to create the value, it is returned here {\n  \"vdxfkey\":\"i-address or vdxfkey\"  (string) i-address that was combined via hash\n  \"uint256\":\"32bytehex\"       (hexstr) 256 bit hash combined with hash\n  \"indexnum\":int            (integer) int32_t combined with hash\n }\n}Examples:Create the signature\n> verus getvdxfid \"system.currency.export\"Verify the signature\n> verus getvdxfid \"idname::userdefinedgroup.subgroup.publishedname\"",
            "./raw_text_input_api_text/getvdxfid"
        ],
        [
            "How can I use the `getvdxfid` command to create a signature in Verus?",
            "To create a signature using the `getvdxfid` command, you can pass a URI string as an argument, like this: `verus getvdxfid \"system.currency.export\"`. This will return the VDXF key and other related information.",
            "getvdxfid \"vdxfuri\" '{\"vdxfkey\":\"i-address or vdxfkey\", \"uint256\":\"hexstr\", \"indexnum\":0}'Returns the VDXF key of the URI string. For example \"vrsc::system.currency.export\"Arguments:\n \"vdxfuri\"               (string, required) This message is converted from hex, the data is hashed, then returned\n \"{\"\n  \"vdxfkey\":\"i-address or vdxfkey\"  (string, optional) VDXF key or i-address to combine via hash\n  \"uint256\":\"32bytehex\"       (hexstr, optional) 256 bit hash to combine with hash\n  \"indexnum\":int            (integer, optional) int32_t number to combine with hash\n \"}\"Result:\n{                     (object) object with both base58check and hex vdxfid values of string and parents\n \"vdxfid\"                (base58check) i-ID of the URI processed with the VDXF & all combined parameters\n \"hash160result\"            (hexstring) 20 byte hash in hex of the URL string passed in, processed with the VDXF\n \"qualifiedname\":            (object) separate name and parent ID value\n {\n  \"name\": \"namestr\"         (string) leaf name\n  \"parentid\" | \"namespace\":\"string\" (string) parent ID (or namespace if VDXF key) of name\n }\n \"bounddata\": {             (object) if additional data is bound to create the value, it is returned here {\n  \"vdxfkey\":\"i-address or vdxfkey\"  (string) i-address that was combined via hash\n  \"uint256\":\"32bytehex\"       (hexstr) 256 bit hash combined with hash\n  \"indexnum\":int            (integer) int32_t combined with hash\n }\n}Examples:Create the signature\n> verus getvdxfid \"system.currency.export\"Verify the signature\n> verus getvdxfid \"idname::userdefinedgroup.subgroup.publishedname\"",
            "./raw_text_input_api_text/getvdxfid"
        ],
        [
            "How can I use the `getvdxfid` command to verify a signature in Verus?",
            "To verify a signature using the `getvdxfid` command, you can pass a URI string that includes the ID name and other related information, like this: `verus getvdxfid \"idname::userdefinedgroup.subgroup.publishedname\"`. This will return the VDXF key and other related information, which can be used to verify the signature.",
            "getvdxfid \"vdxfuri\" '{\"vdxfkey\":\"i-address or vdxfkey\", \"uint256\":\"hexstr\", \"indexnum\":0}'Returns the VDXF key of the URI string. For example \"vrsc::system.currency.export\"Arguments:\n \"vdxfuri\"               (string, required) This message is converted from hex, the data is hashed, then returned\n \"{\"\n  \"vdxfkey\":\"i-address or vdxfkey\"  (string, optional) VDXF key or i-address to combine via hash\n  \"uint256\":\"32bytehex\"       (hexstr, optional) 256 bit hash to combine with hash\n  \"indexnum\":int            (integer, optional) int32_t number to combine with hash\n \"}\"Result:\n{                     (object) object with both base58check and hex vdxfid values of string and parents\n \"vdxfid\"                (base58check) i-ID of the URI processed with the VDXF & all combined parameters\n \"hash160result\"            (hexstring) 20 byte hash in hex of the URL string passed in, processed with the VDXF\n \"qualifiedname\":            (object) separate name and parent ID value\n {\n  \"name\": \"namestr\"         (string) leaf name\n  \"parentid\" | \"namespace\":\"string\" (string) parent ID (or namespace if VDXF key) of name\n }\n \"bounddata\": {             (object) if additional data is bound to create the value, it is returned here {\n  \"vdxfkey\":\"i-address or vdxfkey\"  (string) i-address that was combined via hash\n  \"uint256\":\"32bytehex\"       (hexstr) 256 bit hash combined with hash\n  \"indexnum\":int            (integer) int32_t combined with hash\n }\n}Examples:Create the signature\n> verus getvdxfid \"system.currency.export\"Verify the signature\n> verus getvdxfid \"idname::userdefinedgroup.subgroup.publishedname\"",
            "./raw_text_input_api_text/getvdxfid"
        ]
    ],
    "will",
    "be",
    "replaced",
    "a67a6876-6b3c-4fb0-8016-16fad17701b0"
]