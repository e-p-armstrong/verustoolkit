[
    "What information can you get about the Verus server using the `getinfo` command, and how can you use this command to retrieve this information?",
    "The `getinfo` command in Verus allows you to retrieve various state information about the server. This command returns an object containing multiple properties that provide details about the server's current state. These properties include:\n\n* `version`: the server version\n* `protocolversion`: the protocol version\n* `walletversion`: the wallet version\n* `blocks`: the current number of blocks processed in the server\n* `timeoffset`: the time offset\n* `connections`: the number of connections\n* `tls_established`: the number of TLS connections established\n* `tls_verified`: the number of TLS connections with validated certificates\n* `proxy`: the proxy used by the server (optional)\n* `difficulty`: the current difficulty\n* `testnet`: a boolean indicating whether the server is using testnet or not\n* `keypoololdest`: the timestamp of the oldest pre-generated key in the key pool\n* `keypoolsize`: the number of new keys pre-generated\n* `unlocked_until`: the timestamp in seconds since epoch that the wallet is unlocked for transfers, or 0 if the wallet is locked\n* `paytxfee`: the transaction fee set in VRSC/kB\n* `relayfee`: the minimum relay fee for non-free transactions in VRSC/kB\n* `errors`: any error messages\n\nTo use the `getinfo` command, you can simply run `verus getinfo` in the command line. Alternatively, you can use `curl` to send a JSON-RPC request to the Verus server, like this:\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\nThis will return the same information as running `verus getinfo` directly.",
    "getinfo\nReturns an object containing various state info.\n\nResult:\n{\n \"version\": xxxxx,      (numeric) the server version\n \"protocolversion\": xxxxx,  (numeric) the protocol version\n \"walletversion\": xxxxx,   (numeric) the wallet version\n \"blocks\": xxxxxx,      (numeric) the current number of blocks processed in the server\n \"timeoffset\": xxxxx,    (numeric) the time offset\n \"connections\": xxxxx,    (numeric) the number of connections\n \"tls_established\": xxxxx,  (numeric) the number of TLS connections established\n \"tls_verified\": xxxxx,   (numeric) the number of TLS connection with validated certificates\n \"proxy\": \"host:port\",   (string, optional) the proxy used by the server\n \"difficulty\": xxxxxx,    (numeric) the current difficulty\n \"testnet\": true|false,   (boolean) if the server is using testnet or not\n \"keypoololdest\": xxxxxx,  (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\n \"keypoolsize\": xxxx,    (numeric) how many new keys are pre-generated\n \"unlocked_until\": ttt,   (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\n \"paytxfee\": x.xxxx,     (numeric) the transaction fee set in VRSC/kB\n \"relayfee\": x.xxxx,     (numeric) minimum relay fee for non-free transactions in VRSC/kB\n \"errors\": \"...\"      (string) any error messages\n}\n\nExamples:\n> verus getinfo \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
    "./raw_text_input_api_text/getinfo"
]