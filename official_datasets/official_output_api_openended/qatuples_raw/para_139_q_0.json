[
    "What is the `listunspent` command in Verus, and how does it work?",
    "The `listunspent` command in Verus is a powerful tool that allows you to retrieve a list of unspent transaction outputs (UTXOs) that meet certain filtering criteria. This command is useful for identifying available funds in your wallet that can be spent.\n\nThe `listunspent` command takes four arguments:\n\n1. `minconf`: This is an optional numeric argument that specifies the minimum number of confirmations a transaction output must have to be included in the results. If omitted, it defaults to 1.\n2. `maxconf`: This is an optional numeric argument that specifies the maximum number of confirmations a transaction output must have to be included in the results. If omitted, it defaults to 9999999.\n3. `addresses`: This is a required string argument that specifies a JSON array of VRSC addresses to filter the results by. You can specify multiple addresses to filter by.\n4. `includeshared`: This is an optional boolean argument that specifies whether to include outputs that can also be spent by others. If omitted, it defaults to false.\n\nThe `listunspent` command returns an array of JSON objects, each representing a UTXO that meets the filtering criteria. Each object contains the following properties:\n\n* `txid`: The transaction ID of the UTXO.\n* `vout`: The vout value of the UTXO.\n* `generated`: A boolean indicating whether the UTXO is a coinbase transaction output.\n* `address`: The VRSC address associated with the UTXO.\n* `account`: A deprecated property that specifies the associated account or an empty string for the default account.\n* `scriptPubKey`: The script key associated with the UTXO.\n* `amount`: The transaction amount in VRSC.\n* `confirmations`: The number of confirmations the UTXO has.\n* `redeemScript`: The redeem script if the scriptPubKey is P2SH.\n* `spendable`: A boolean indicating whether the UTXO can be spent using the available private keys.\n\nBy using the `listunspent` command, you can easily identify available funds in your wallet and filter them by specific addresses or confirmation ranges. This is a powerful tool for managing your VRSC assets and creating complex transactions.",
    "listunspent ( minconf maxconf [\"address\",...] includeshared )Returns array of unspent transaction outputs\nwith between minconf and maxconf (inclusive) confirmations.\nOptionally filter to only include txouts paid to specified addresses.\nResults are an array of Objects, each of which has:\n{txid, vout, scriptPubKey, amount, confirmations}Arguments:\n1. minconf     (numeric, optional, default=1) The minimum confirmations to filter\n2. maxconf     (numeric, optional, default=9999999) The maximum confirmations to filter\n3. \"addresses\"  (string) A json array of VRSC addresses to filter\n  [\n   \"address\"  (string) VRSC address\n   ,...\n  ]\n4. includeshared  (bool, optional, default=false) Include outputs that can also be spent by othersResult\n[          (array of json object)\n {\n  \"txid\" : \"txid\",     (string) the transaction id \n  \"vout\" : n,        (numeric) the vout value\n  \"generated\" : true|false (boolean) true if txout is a coinbase transaction output\n  \"address\" : \"address\",  (string) the Zcash address\n  \"account\" : \"account\",  (string) DEPRECATED. The associated account, or \"\" for the default account\n  \"scriptPubKey\" : \"key\",  (string) the script key\n  \"amount\" : x.xxx,     (numeric) the transaction amount in VRSC\n  \"confirmations\" : n,   (numeric) The number of confirmations\n  \"redeemScript\" : n    (string) The redeemScript if scriptPubKey is P2SH\n  \"spendable\" : xxx     (bool) Whether we have the private keys to spend this output\n }\n ,...\n]",
    "./raw_text_input_api_text/listunspent"
]