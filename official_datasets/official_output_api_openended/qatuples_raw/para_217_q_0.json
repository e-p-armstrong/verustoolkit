[
    "How do I use the `setidentitytimelock` command in Verus to control when an identity is unlocked, and what are the different options available for this command?",
    "The `setidentitytimelock` command in Verus is used to control when an identity is unlocked. This command provides two main options to achieve this: unlocking at an absolute block height, or delaying the unlock by a certain number of blocks after the unlock request.\n\nTo use this command, you need to specify either the `unlockatblock` or `setunlockdelay` argument, but not both. Here's a breakdown of each option:\n\n**Unlock at an Absolute Block Height (`unlockatblock`):**\nIf you choose to unlock at an absolute block height, you need to specify the block height at which you want the identity to be unlocked. This countdown starts when the transaction is mined into a block.\n\n**Delay Unlock by a Certain Number of Blocks (`setunlockdelay`):**\nAlternatively, you can delay the unlock by a certain number of blocks after the unlock request. This delay can only be circumvented by revoking and recovering the identity.\n\nIn addition to these two main options, the `setidentitytimelock` command also provides some optional parameters:\n\n**Return Transaction (`returntx`):**\nIf you set `returntx` to `true`, the transaction will be signed by the wallet and returned as a hex-serialized transaction. This means the transaction will not be submitted, and you will need to send it using the `sendrawtransaction` command after applying any necessary signatures in the case of multisig.\n\n**Non-Standard Fee Amount (`feeoffer`):**\nYou can specify a non-standard fee amount to pay for the transaction using the `feeoffer` parameter.\n\n**Source of Funds (`sourceoffunds`):**\nTo preserve the privacy of the identity, you can specify a transparent or private address to source all funds for fees using the `sourceoffunds` parameter.\n\nThe result of the `setidentitytimelock` command is a hex string of either the transaction ID (if `returntx` is `false`) or the hex-serialized transaction (if `returntx` is `true`).",
    "Arguments - either \"unlockatblock\" or \"setunlockdelay\" must be specified and not both\n{\n \"unlockatblock\"        (number, optional) unlock at an absolute block height, countdown starts when mined into a block\n \"setunlockdelay\"        (number, optional) delay this many blocks after unlock request to unlock, can only be\n                           circumvented by revoke/recover\n}\n    \"returntx\"            (bool,  optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned\n    \"feeoffer\"            (value, optional) non-standard fee amount to pay for the transaction\n    \"sourceoffunds\"          (string, optional) transparent or private address to source all funds for fees to preserve privacy of the identity\n\nResult:\n  Hex string of either the txid if returnhex is false or the hex serialized transaction if returntx is true.\n  If returntx is true, the transaction will not have been submitted and must be sent with \"sendrawtransaction\"\n  after any necessary signatures are applied in the case of multisig.\n\nExamples:\n> verus setidentitytimelock \"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx)\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setidentitytimelock\", \"params\": [\"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx)] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
    "./raw_text_input_api_text/setidentitytimelock"
]