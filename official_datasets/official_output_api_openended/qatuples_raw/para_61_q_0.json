[
    "How does the `getvdxfid` command in Verus work, and what are its possible use cases?",
    "The `getvdxfid` command in Verus is used to generate a VDXF ID from a given URI string. The command takes a required URI string argument, as well as optional arguments for a VDXF key, a 256-bit hash, and an integer index number. These optional arguments can be used to combine the URI string with additional data via hashing.\n\nThe command returns an object with several properties:\n\n1. `vdxfid`: The resulting VDXF ID, represented as both a base58check string and a hex string.\n2. `hash160result`: A 20-byte hash of the URI string, represented as a hex string.\n3. `qualifiedname`: An object containing the leaf name and parent ID (or namespace) of the name.\n4. `bounddata`: An object containing the additional data that was bound to create the VDXF ID, if any.\n\nThe `getvdxfid` command has several possible use cases. For example, it can be used to create a signature for a URI string, such as a system currency export or a user-defined group name. The resulting VDXF ID can then be used to verify the signature.\n\nIn the example provided, the command is used to create a signature for the URI string \"system.currency.export\". The resulting VDXF ID can then be used to verify the signature. Another example shows how to use the command to generate a VDXF ID for a user-defined group name, such as \"idname::userdefinedgroup.subgroup.publishedname\".\n\nOverall, the `getvdxfid` command provides a way to generate a unique identifier from a URI string, which can be used for various purposes such as signature creation and verification.",
    "getvdxfid \"vdxfuri\" '{\"vdxfkey\":\"i-address or vdxfkey\", \"uint256\":\"hexstr\", \"indexnum\":0}'Returns the VDXF key of the URI string. For example \"vrsc::system.currency.export\"Arguments:\n \"vdxfuri\"               (string, required) This message is converted from hex, the data is hashed, then returned\n \"{\"\n  \"vdxfkey\":\"i-address or vdxfkey\"  (string, optional) VDXF key or i-address to combine via hash\n  \"uint256\":\"32bytehex\"       (hexstr, optional) 256 bit hash to combine with hash\n  \"indexnum\":int            (integer, optional) int32_t number to combine with hash\n \"}\"Result:\n{                     (object) object with both base58check and hex vdxfid values of string and parents\n \"vdxfid\"                (base58check) i-ID of the URI processed with the VDXF & all combined parameters\n \"hash160result\"            (hexstring) 20 byte hash in hex of the URL string passed in, processed with the VDXF\n \"qualifiedname\":            (object) separate name and parent ID value\n {\n  \"name\": \"namestr\"         (string) leaf name\n  \"parentid\" | \"namespace\":\"string\" (string) parent ID (or namespace if VDXF key) of name\n }\n \"bounddata\": {             (object) if additional data is bound to create the value, it is returned here {\n  \"vdxfkey\":\"i-address or vdxfkey\"  (string) i-address that was combined via hash\n  \"uint256\":\"32bytehex\"       (hexstr) 256 bit hash combined with hash\n  \"indexnum\":int            (integer) int32_t combined with hash\n }\n}Examples:Create the signature\n> verus getvdxfid \"system.currency.export\"Verify the signature\n> verus getvdxfid \"idname::userdefinedgroup.subgroup.publishedname\"",
    "./raw_text_input_api_text/getvdxfid"
]