[
    "How does the `verifyhash` command in Verus work, and what are the different parts of the command used for?",
    "The `verifyhash` command in Verus is used to verify a signed message or file. It takes four arguments: the address or identity of the signer, the signature itself, the hash of the message or file, and an optional boolean flag to check the latest identity.\n\nHere's a breakdown of each argument:\n\n1. **Address or Identity**: This is the transparent address or identity of the person who signed the message or file. It's a required string argument.\n\n2. **Signature**: This is the signature provided by the signer in base 64 encoding. It's also a required string argument.\n\n3. **Hexhash**: This is the hash of the message or file that was signed. It's another required string argument.\n\n4. **Checklatest**: This is an optional boolean argument that defaults to false. If set to true, it checks the signature validity based on the latest identity. If set to false (or not provided), it determines the validity of the signing height stored in the signature.\n\nThe result of the `verifyhash` command is a boolean value indicating whether the signature is verified or not.\n\nTo use `verifyhash`, you would first need to create a signature using the `signfile` or `signmessage` commands. For example:\n\n```\n> verus signfile \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"filepath/filename\"\n```\n\nor\n\n```\n> verus signmessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"my message\"\n```\n\nThen, you can verify the signature using the `verifyhash` command:\n\n```\n> verus verifyhash \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"signature\" \"hexhash\"\n```\n\nAlternatively, you can use JSON RPC to verify the signature:\n\n```\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifyhash\", \"params\": [\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\", \"signature\", \"hexhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
    "verifyhash \"address or identity\" \"signature\" \"hexhash\" \"checklatest\"\n\nVerify a signed message\n\nArguments:\n1. \"t-addr or identity\" (string, required) The transparent address or identity that signed the data.\n2. \"signature\"    (string, required) The signature provided by the signer in base 64 encoding (see signmessage/signfile).\n3. \"hexhash\"     (string, required) Hash of the message or file that was signed.\n3. \"checklatest\"   (bool, optional)  If true, checks signature validity based on latest identity. defaults to false,\n                     which determines validity of signing height stored in signature.\n\nResult:\ntrue|false  (boolean) If the signature is verified or not.\n\nExamples:\n\nCreate the signature\n> verus signfile \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"filepath/filename\"\nor\n> verus signmessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"my message\"\n\nVerify the signature\n> verus verifyhash \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"signature\" \"hexhash\"\n\nAs json rpc\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifyhash\", \"params\": [\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\", \"signature\", \"hexhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
    "./raw_text_input_api_text/verifyhash"
]