[
    "What does the `decoderawtransaction` command do in Verus, and what kind of information can it provide about a transaction?",
    "The `decoderawtransaction` command in Verus is used to decode a raw transaction and provide detailed information about it. This command takes a single argument, which is the hexadecimal string representation of the transaction. The output of this command is a JSON object that contains various properties and fields related to the transaction.\n\nThe JSON object returned by `decoderawtransaction` includes information such as:\n\n* `txid`: The transaction ID, which is a unique identifier for the transaction.\n* `overwintered`: A boolean indicating whether the transaction is Overwintered or not.\n* `version`: The version number of the transaction.\n* `versiongroupid`: The version group ID of the transaction, which is only present for Overwintered transactions.\n* `locktime`: The lock time of the transaction, which is a timestamp indicating when the transaction can be mined.\n* `expiryheight`: The last valid block height for mining the transaction, which is only present for Overwintered transactions.\n\nThe JSON object also includes arrays of input and output objects, which contain information about the inputs and outputs of the transaction. The input objects include:\n\n* `txid`: The transaction ID of the input transaction.\n* `vout`: The output number of the input transaction.\n* `scriptSig`: The script signature of the input transaction, which includes the assembly code and hexadecimal representations of the script.\n* `sequence`: The sequence number of the input transaction.\n\nThe output objects include:\n\n* `value`: The value of the output in VRSC.\n* `n`: The index of the output.\n* `scriptPubKey`: The script public key of the output, which includes the assembly code and hexadecimal representations of the script, as well as the required signature count and type of script.\n\nFor transactions with a version number greater than or equal to 2, the JSON object also includes a `vjoinsplit` array, which contains information about the joinsplit operations in the transaction.\n\nIn summary, the `decoderawtransaction` command in Verus provides a detailed breakdown of a transaction, including its inputs, outputs, and other relevant information. This can be useful for debugging and analyzing transactions on the Verus network.",
    "decoderawtransaction \"hexstring\"Return a JSON object representing the serialized, hex-encoded transaction.Arguments:\n1. \"hex\"   (string, required) The transaction hex stringResult:\n{\n \"txid\" : \"id\",    (string) The transaction id\n \"overwintered\" : bool  (boolean) The Overwintered flag\n \"version\" : n,     (numeric) The version\n \"versiongroupid\": \"hex\"  (string, optional) The version group id (Overwintered txs)\n \"locktime\" : ttt,    (numeric) The lock time\n \"expiryheight\" : n,   (numeric, optional) Last valid block height for mining transaction (Overwintered txs)\n \"vin\" : [        (array of json objects)\n   {\n    \"txid\": \"id\",  (string) The transaction id\n    \"vout\": n,     (numeric) The output number\n    \"scriptSig\": {   (json object) The script\n     \"asm\": \"asm\", (string) asm\n     \"hex\": \"hex\"  (string) hex\n    },\n    \"sequence\": n   (numeric) The script sequence number\n   }\n   ,...\n ],\n \"vout\" : [       (array of json objects)\n   {\n    \"value\" : x.xxx,      (numeric) The value in VRSC\n    \"n\" : n,          (numeric) index\n    \"scriptPubKey\" : {     (json object)\n     \"asm\" : \"asm\",     (string) the asm\n     \"hex\" : \"hex\",     (string) the hex\n     \"reqSigs\" : n,      (numeric) The required sigs\n     \"type\" : \"pubkeyhash\", (string) The type, eg 'pubkeyhash'\n     \"addresses\" : [      (json array of string)\n      \"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\"  (string) transparent address\n      ,...\n     ]\n    }\n   }\n   ,...\n ],\n \"vjoinsplit\" : [    (array of json objects, only for version >= 2)\n   {\n    \"vpub_old\" : x.xxx,     (numeric) public input value in KMD\n    \"vpub_new\" : x.xxx,     (numeric) public output value in KMD\n    \"anchor\" : \"hex\",     (string) the anchor\n  ",
    "./raw_text_input_api_text/decoderawtransaction"
]