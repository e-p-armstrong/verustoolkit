[
    "How does the `verifysignature` command in Verus work, and what are the different parameters and options that can be used with it?",
    "The `verifysignature` command in Verus is used to verify the validity of a digital signature. It takes a set of parameters and options as input, which are used to check if the signature is valid and matches the expected criteria. Here's a breakdown of the different parameters and options:\n\n**Required Parameters:**\n\n* `address`: This is the transparent address or identity that the signature is being verified against. It can be a string representing the address or identity.\n* `filename` | `message` | `messagehex` | `messagebase64` | `datahash`: This parameter specifies the data or hash of the data that was signed. It can be a file, a message, or a hash value.\n\n**Optional Parameters:**\n\n* `vdxfkeys`: This is an array of vdxfkeys or ID i-addresses that can be used to verify the signature.\n* `vdxfkeynames`: This is an array of vdxfkey names or fully qualified friendly IDs that can be used to verify the signature.\n* `boundhashes`: This is an array of bound hash values that can be used to verify the signature.\n* `hashtype`: This specifies the type of hash function used to generate the hash of the message. The default is `sha256`, but other options include `sha256D`, `blake2b`, and `keccak256`.\n* `signature`: This is the current signature of the message, encoded in base64. If provided, the command will verify the signature against the expected criteria.\n* `checklatest`: This is a boolean flag that determines whether to check the signature validity based on the latest identity. If set to `true`, the command will check the signature against the latest identity. If set to `false` (default), the command will determine the validity of the signing height stored in the signature.\n\n**Result:**\nThe `verifysignature` command returns a JSON object with two properties:\n\n* `hash`: This is the hash of the message, represented as a hexadecimal string (SHA256, not SHA256D).\n* `signature`: This is the aggregate signature of the message, encoded in base64, if the signature is valid or partially valid.\n\n**Example:**\nTo verify a signature using the `verifysignature` command, you can use the following example:\n```\nverus verifysignature '{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}'\n```\nThis command will verify the signature against the specified identity and message, and return the result in JSON format.",
    "Checks to see if the signature is valid and returns an error for invalid parameters{\n \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to verify against the signature\n \"filename\" | \"message\" | \"messagehex\" | \"messagebase64\" | \"datahash\" (string, required) Data or hash of data signed\n \"vdxfkeys\":[\"vdxfkey\", ...],                 (array, optional) Array of vdxfkeys or ID i-addresses\n \"vdxfkeynames\":[\"vdxfkeyname\", ...],             (array, optional) Array of vdxfkey names or fully qualified friendly IDs\n \"boundhashes\":[\"hexhash\", ...],               (array, optional) Array of bound hash values\n \"hashtype\"                           (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256\n \"signature\"                          (string, optional) The current signature of the message encoded in base 64\n \"checklatest\"                         (bool, optional)  If true, checks signature validity based on latest identity. defaults to false,\n                                           which determines validity of signing height stored in signature.\n}Result:\n{\n \"hash\":\"hexhash\"     (string) The hash of the message (SHA256, NOT SHA256D)\n \"signature\":\"base64sig\" (string) The aggregate signature of the message encoded in base 64 if all or partial signing successful\n}Examples:Verify the signature\n> verus verifysignature '{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}'",
    "./raw_text_input_api_text/verifysignature"
]