[
    "What is the purpose of the `getblockheader` command in Verus, and how does it work?",
    "The `getblockheader` command in Verus is used to retrieve information about a specific block header given its hash. This command is useful for inspecting and verifying the integrity of the blockchain.\n\nThe command takes two arguments: the block hash and an optional boolean parameter `verbose`. If `verbose` is set to `false` (or not provided, as it defaults to `true`), the command returns a string that represents the serialized, hex-encoded data for the block header. This is a compact representation of the block header that can be easily stored or transmitted.\n\nIf `verbose` is set to `true`, the command returns a JSON object that contains detailed information about the block header. The JSON object includes various fields, such as:\n\n* `hash`: the block hash (same as provided)\n* `confirmations`: the number of confirmations, or -1 if the block is not on the main chain\n* `height`: the block height or index\n* `version`: the block version\n* `merkleroot`: the merkle root\n* `finalsaplingroot`: the root of the Sapling commitment tree after applying this block\n* `time`: the block time in seconds since epoch (Jan 1 1970 GMT)\n* `nonce`: the nonce\n* `bits`: the bits\n* `difficulty`: the difficulty\n* `previousblockhash`: the hash of the previous block\n* `nextblockhash`: the hash of the next block\n\nThe `getblockheader` command can be used in various ways, such as through the Verus command-line interface or using a JSON-RPC call. For example, you can use the command-line interface to retrieve the block header information like this:\n```\nverus getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"\n```\nAlternatively, you can use a JSON-RPC call to retrieve the block header information, like this:\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\nOverall, the `getblockheader` command is a useful tool for exploring and verifying the integrity of the Verus blockchain.",
    "getblockheader \"hash\" ( verbose )\n\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\nIf verbose is true, returns an Object with information about blockheader <hash>.\n\nArguments:\n1. \"hash\"     (string, required) The block hash\n2. verbose      (boolean, optional, default=true) true for a json object, false for the hex encoded data\n\nResult (for verbose = true):\n{\n \"hash\" : \"hash\",   (string) the block hash (same as provided)\n \"confirmations\" : n,  (numeric) The number of confirmations, or -1 if the block is not on the main chain\n \"height\" : n,     (numeric) The block height or index\n \"version\" : n,     (numeric) The block version\n \"merkleroot\" : \"xxxx\", (string) The merkle root\n \"finalsaplingroot\" : \"xxxx\", (string) The root of the Sapling commitment tree after applying this block\n \"time\" : ttt,     (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n \"nonce\" : n,      (numeric) The nonce\n \"bits\" : \"1d00ffff\", (string) The bits\n \"difficulty\" : x.xxx, (numeric) The difficulty\n \"previousblockhash\" : \"hash\", (string) The hash of the previous block\n \"nextblockhash\" : \"hash\"    (string) The hash of the next block\n}\n\nResult (for verbose=false):\n\"data\"       (string) A string that is serialized, hex-encoded data for block 'hash'.\n\nExamples:\n> verus getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
    "./raw_text_input_api_text/getblockheader"
]