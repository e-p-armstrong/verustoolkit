[
    [
        [
            "What are the different properties and settings that can be configured when defining a currency on the Verus platform, and what do they control?",
            "When defining a currency on the Verus platform, there are several properties and settings that can be configured to control various aspects of the currency's behavior. Here are some of the key properties and settings:\n\n**Currency Weights:** This property is only returned for a liquidity basket and represents the relative weights of each currency in the basket.\n\n**Conversions:** This property specifies the pre-launch conversion rates for non-fractional currencies. It is an array of numbers, where each number represents the conversion rate for a specific currency.\n\n**Minpreconversion:** This property specifies the minimum amounts required in pre-conversions for a currency to launch. It is an array of numbers, where each number represents the minimum amount required for a specific currency.\n\n**Currencies:** This property specifies the currencies that can be converted to this currency at launch or that make up a liquidity basket. It is an array of string addresses, where each address represents a currency.\n\n**Currencynames:** This property is an object that maps i-addresses to fully qualified names of all sub-currencies.\n\n**Initialsupply:** This property specifies the initial currency supply for fractional currencies before preallocation or issuance. It is a number that represents the total supply of the currency.\n\n**Prelaunchcarveout:** This property specifies the pre-launch percentage of proceeds for fractional currency sent to the launching ID. It is a number that represents the percentage of proceeds.\n\n**Preallocations:** This property specifies the VerusIDs and amounts for pre-allocation at launch. It is an array of objects, where each object contains an i-address and an amount.\n\n**Initialcontributions:** This property specifies the amounts of pre-conversions reserved for the launching ID. It is an array of numbers, where each number represents the amount reserved for a specific currency.\n\n**Idregistrationfees:** This property specifies the base cost of IDs for this currency namespace in this currency. It is a number that represents the cost of ID registration.\n\n**Idreferrallevels:** This property specifies the levels of ID referrals (only for native PBaaS chains and IDs). It is an integer that represents the number of referral levels.\n\n**Idimportfees:** This property specifies the fees required to import an ID to this system (only for native PBaaS chains and IDs). It is a number that represents the import fee.\n\n**Eras:** This property specifies different chain phases of rewards and convertibility. It is an array of objects, where each object represents an era and contains properties such as reward, decay, halving, and eraend.\n\n**Era Properties:**\n\n* **Reward:** This property specifies the reward start for each era in native coin. It is an array of integers, where each integer represents the reward for a specific era.\n* **Decay:** This property specifies the exponential or linear decay of rewards during each era. It is an array of integers, where each integer represents the decay rate for a specific era.\n* **Halving:** This property specifies the blocks between halvings during each era. It is an array of integers, where each integer represents the halving interval for a specific era.\n* **Eraend:** This property specifies the block marking the end of each era. It is an array of integers, where each integer represents the block number at which an era ends.\n\nThese properties and settings allow for a high degree of customization and control over the behavior of a currency on the Verus platform.",
            "rrency weights (only returned for a liquidity basket)\n  \"conversions\" : \"[n, ...]\",      (numberarray) pre-launch conversion rates for non-fractional currencies\n  \"minpreconversion\" : \"[n, ...]\",    (numberarray) minimum amounts required in pre-conversions for currency to launch\n  \"currencies\" : \"[\"i-address\", ...]\", (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket\n  \"currencynames\" : \"{\"i-address\":\"fullname\",...}\", (obj) i-addresses mapped to fully qualified names of all sub-currencies\n  \"initialsupply\" : n,           (number) initial currency supply for fractional currencies before preallocation or issuance\n  \"prelaunchcarveout\" : n,         (number) pre-launch percentage of proceeds for fractional currency sent to launching ID\n  \"preallocations\" : \"[{\"i-address\":n}, ...]\", (objarray) VerusIDs and amounts for pre-allocation at launch\n  \"initialcontributions\" : \"[n, ...]\",  (numberarray) amounts of pre-conversions reserved for launching ID\n  \"idregistrationfees\" : n,        (number) base cost of IDs for this currency namespace in this currency\n  \"idreferrallevels\" : n,         (int) levels of ID referrals (only for native PBaaS chains and IDs)\n  \"idimportfees\" : n,           (number) fees required to import an ID to this system (only for native PBaaS chains and IDs)\n  \"eras\" : \"[obj, ...]\",         (objarray) different chain phases of rewards and convertibility\n  {\n   \"reward\" : \"[n, ...]\",        (int) reward start for each era in native coin\n   \"decay\" : \"[n, ...]\",        (int) exponential or linear decay of rewards during each era\n   \"halving\" : \"[n, ...]\",       (int) blocks between halvings during each era\n   \"eraend\" : \"[n, ...]\",        (int) block marking the end of each era\n ",
            "./raw_text_input_api_text/getcurrency"
        ]
    ],
    "will",
    "be",
    "replaced",
    "7058eb36-0515-4efb-baf7-9d6ecbaba64f"
]