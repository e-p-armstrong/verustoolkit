[
    [
        [
            "What is the purpose of the `getrawtransaction` command in Verus, and how does it work?",
            "The `getrawtransaction` command in Verus is used to retrieve the raw transaction data for a specific transaction identified by its transaction ID (txid). This command can be used to fetch information about a transaction, including its raw data, transaction ID, version, lock time, expiry height, inputs, and outputs.\n\nBy default, the `getrawtransaction` command only works when the transaction is in the mempool (the pool of unconfirmed transactions) or when there is an unspent output in the UTXO (Unspent Transaction Output) for this transaction. To make it always work, you need to maintain a transaction index, which can be done by using the `-txindex` command line option.\n\nThe command takes two arguments: the transaction ID (txid) and an optional verbose parameter. If the verbose parameter is set to 0, the command returns a string that is serialized, hex-encoded data for the transaction ID. If the verbose parameter is set to a non-zero value, the command returns a JSON object with information about the transaction ID.\n\nThe JSON object returned by the `getrawtransaction` command contains several fields, including:\n\n* `hex`: the serialized, hex-encoded data for the transaction ID\n* `txid`: the transaction ID (same as provided)\n* `version`: the version of the transaction\n* `locktime`: the lock time of the transaction\n* `expiryheight`: the block height after which the transaction expires (optional)\n* `vin`: an array of JSON objects containing information about the transaction inputs\n* `vout`: an array of JSON objects containing information about the transaction outputs\n\nEach input (`vin`) object contains fields such as `txid`, `vout`, `scriptSig`, and `sequence`, while each output (`vout`) object contains fields such as `value`, `n`, and `scriptPubKey`.\n\nOverall, the `getrawtransaction` command is a useful tool for retrieving detailed information about a specific transaction in the Verus blockchain.",
            "getrawtransaction \"txid\" ( verbose )NOTE: By default this function only works sometimes. This is when the tx is in the mempool\nor there is an unspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option.Return the raw transaction data.If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.\nIf verbose is non-zero, returns an Object with information about 'txid'.Arguments:\n1. \"txid\"   (string, required) The transaction id\n2. verbose    (numeric, optional, default=0) If 0, return a string, other return a json objectResult (if verbose is not set or set to 0):\n\"data\"   (string) The serialized, hex-encoded data for 'txid'Result (if verbose > 0):\n{\n \"hex\" : \"data\",    (string) The serialized, hex-encoded data for 'txid'\n \"txid\" : \"id\",    (string) The transaction id (same as provided)\n \"version\" : n,     (numeric) The version\n \"locktime\" : ttt,    (numeric) The lock time\n \"expiryheight\" : ttt,  (numeric, optional) The block height after which the transaction expires\n \"vin\" : [        (array of json objects)\n   {\n    \"txid\": \"id\",  (string) The transaction id\n    \"vout\": n,     (numeric) \n    \"scriptSig\": {   (json object) The script\n     \"asm\": \"asm\", (string) asm\n     \"hex\": \"hex\"  (string) hex\n    },\n    \"sequence\": n   (numeric) The script sequence number\n   }\n   ,...\n ],\n \"vout\" : [       (array of json objects)\n   {\n    \"value\" : x.xxx,      (numeric) The value in VRSC\n    \"n\" : n,          (numeric) index\n    \"scriptPubKey\" : {     (json object)\n     \"asm\" : \"asm\",     (string) the asm\n     \"hex\" : \"hex\",     (string) the hex\n     \"reqSigs\" : n,      (numeric) The required sigs\n     \"type\" : \"pubkeyhash\"",
            "./raw_text_input_api_text/getrawtransaction"
        ]
    ],
    "will",
    "be",
    "replaced",
    "741bc1fe-db2b-4158-98cb-9094cc775535"
]