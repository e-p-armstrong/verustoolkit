[
    [
        [
            "What are the different parameters available when working with MMR (Merkle Mountain Range) signing in Verus, and how do they enhance the functionality and security of the signing process?",
            "When working with MMR signing in Verus, there are several parameters available to customize and enhance the signing process. These parameters can be broken down into several categories, including data management, MMR configuration, key management, and encryption.\n\n**Data Management:**\nThe `mmrdata` parameter allows for the specification of multiple data elements to be signed, enabling batch signing and efficient processing of large datasets. Each data element can be represented in various formats, such as filename, vdxf data, message, serialized hex, serialized base64, or data hash.\n\n**MMR Configuration:**\nThe `mmrsalt` parameter provides an additional layer of privacy protection for leaf nodes in the MMR, while the `mmrhashtype` parameter allows for the selection of the hash function used in the MMR construction, with options including sha256, sha256D, blake2b, and keccak256. The `priormmr` parameter enables the use of prior hashes to construct the MMR and root without requiring the actual data.\n\n**Key Management:**\nThe `vdxfkeys` and `vdxfkeynames` parameters enable the specification of multiple vdxf keys or ID i-addresses, as well as their corresponding names or fully qualified friendly IDs. This allows for the management of multiple keys and identities in a single signing operation.\n\n**Encryption:**\nThe `encrypttoaddress` parameter enables the encryption of data and returns the encrypted data, which can be decrypted using the incoming viewing key and a unique decryption key generated for each sub-object.\n\n**Signature Generation:**\nThe `hashtype` parameter specifies the hash function used for signature generation, with options including sha256, sha256D, blake2b, and keccak256. The `signature` parameter returns the current signature of the message encoded in base64, which is particularly useful for multisig IDs.\n\n**MMR Creation:**\nThe `createmmr` parameter, when set to true, enables the creation of an MMR and returns processed data, MMRs, and root signature. This parameter is particularly useful when signing multiple items or when batch processing is required.\n\nIn summary, these parameters provide a flexible and customizable framework for MMR signing in Verus, enabling advanced data management, MMR configuration, key management, encryption, and signature generation capabilities.",
            "ign\n \"mmrdata\":[{\"filename | vdxfdata | message | serializedhex | serializedbase64 | datahash\":\"str\"}], (array, optional) Alternate to single data parameters, this enables an MMR signing\n       \"mmrsalt\":[\"salt\":\"str\"],            (string, optional) Protects privacy of leaf nodes of the MMR\n       \"mmrhashtype\":\"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\", (string, optional) Default is blake2b\n       \"priormmr\":\"[{\"idxhash\":,\"utxoref\":{}}]\",  (array, optional) When growing an MMR, the prior hashes can be used to construct the MMR and root w/o data\n \"vdxfkeys\":[\"vdxfkey\", ...],                 (array, optional) Array of vdxfkeys or ID i-addresses\n \"vdxfkeynames\":[\"vdxfkeyname\", ...],             (array, optional) Array of vdxfkey names or fully qualified friendly IDs\n \"boundhashes\":[\"hexhash\", ...],               (array, optional) Array of bound hash values\n \"hashtype\":\"str\",                      (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256\n \"signature\":\"base64str\",                   (string, optional) The current signature of the message encoded in base 64 if multisig ID\n \"encrypttoaddress\":\"saplingaddress\",             (string, optional) If present, encrypts and optionally returns encrypted data.\n                                          All data can be decrypted with the incoming viewing key, and a unique decryption key can\n                                          be generated for each sub-object.\n \"createmmr\":\"bool\",                     (bool, optional)  If this is true, OR there is more than one item to sign, returns processed data, MMRs, and root signature\n}",
            "./raw_text_input_api_text/signdata"
        ]
    ],
    "will",
    "be",
    "replaced",
    "00e41dee-05bb-4c88-8264-9c10dfacfca0"
]