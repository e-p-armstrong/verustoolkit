[
    [
        [
            "What is the purpose of the `z_listunspent` command in Verus, and how does it filter unspent shielded notes based on confirmations and addresses?",
            "The `z_listunspent` command in Verus is used to retrieve an array of unspent shielded notes that have between a specified minimum (`minconf`) and maximum (`maxconf`) number of confirmations. This command is useful for identifying notes that are available for spending or further processing.\n\nBy default, `z_listunspent` will return notes with at least one confirmation (`minconf=1`). However, if `minconf` is set to 0, the command will also include notes with zero confirmations, which are not immediately spendable.\n\nThe command can also be filtered to only include notes sent to specific shielded addresses (`zaddrs`) by providing a JSON array of these addresses. This allows the user to focus on notes related to specific addresses or wallets.\n\nThe output of `z_listunspent` is an array of objects, each representing an unspent shielded note. Each object contains information about the note, including:\n\n* `txid`: the transaction ID of the note\n* `jsindex` (Sprout) or `outindex` (Sapling): the index of the joinsplit or output\n* `confirmations`: the number of confirmations the note has received\n* `address`: the shielded address associated with the note\n* `amount`: the value of the note\n* `memo`: the hexadecimal string representation of the memo field\n* `change`: a boolean indicating whether the address that received the note is also one of the sending addresses\n* `spendable`: a boolean indicating whether the note can be spent by the wallet\n\nBy using `z_listunspent`, users can effectively manage their shielded notes, filter out unwanted notes, and identify notes that are ready for spending or further processing.",
            "z_listunspent ( minconf maxconf includeWatchonly [\"zaddr\",...] )Returns array of unspent shielded notes with between minconf and maxconf (inclusive) confirmations.\nOptionally filter to only include notes sent to specified addresses.\nWhen minconf is 0, unspent notes with zero confirmations are returned, even though they are not immediately spendable.\nResults are an array of Objects, each of which has:\n{txid, jsindex, jsoutindex, confirmations, address, amount, memo} (Sprout)\n{txid, outindex, confirmations, address, amount, memo} (Sapling)Arguments:\n1. minconf     (numeric, optional, default=1) The minimum confirmations to filter\n2. maxconf     (numeric, optional, default=9999999) The maximum confirmations to filter\n3. includeWatchonly (bool, optional, default=false) Also include watchonly addresses (see 'z_importviewingkey')\n4. \"addresses\"   (string) A json array of zaddrs (both Sprout and Sapling) to filter on. Duplicate addresses not allowed.\n  [\n   \"address\"   (string) zaddr\n   ,...\n  ]Result\n[               (array of json object)\n {\n  \"txid\" : \"txid\",     (string) the transaction id \n  \"jsindex\" (sprout) : n,    (numeric) the joinsplit index\n  \"jsoutindex\" (sprout) : n,    (numeric) the output index of the joinsplit\n  \"outindex\" (sapling) : n,    (numeric) the output index\n  \"confirmations\" : n,    (numeric) the number of confirmations\n  \"spendable\" : true|false, (boolean) true if note can be spent by wallet, false if address is watchonly\n  \"address\" : \"address\",  (string) the shielded address\n  \"amount\": xxxxx,     (numeric) the amount of value in the note\n  \"memo\": xxxxx,      (string) hexademical string representation of memo field\n  \"change\": true|false,   (boolean) true if the address that received the note is also one of the sending addresses\n }\n ,...\n]",
            "./raw_text_input_api_text/z_listunspent"
        ]
    ],
    "will",
    "be",
    "replaced",
    "eaa8c128-f5d1-448d-84bd-77998dd98f6d"
]