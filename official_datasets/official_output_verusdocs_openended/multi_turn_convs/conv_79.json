[
    "## Conversation that answers the provided questions:\n**User:**\nI'm trying to understand how VerusPay makes it possible to share invoices across different systems and languages. Can you explain how it enables efficient transmission and storage of invoices, and how these invoices can be packaged into deeplinks and QR codes readable by wallets like Verus Mobile?\n\n**AI Assistant:**\nVerusPay has a clever solution for this. To enable efficient transmission and storage of invoices across different systems and languages, VerusPay uses a standardized approach to serialize and deserialize VerusPay Invoices and VerusPay InvoiceDetails into a binary format. This serialization process ensures that invoices can be shared, processed, and stored consistently across various platforms without losing any fidelity or meaning.\n\nNow, to package a VerusPay Invoice into a deeplink or QR code readable by wallets like Verus Mobile, the invoice must first be serialized using the standardized method, excluding its 20-byte VDXF key. The resulting bytes are then formatted into a base64url string. Next, a deeplink URL can be created by combining the following components:\n\n* The prefix `[vrsc::applications.wallet VDXF ID]://x-callback-url/`\n* The VerusPay invoice bytes in base64url format\n* The suffix `[veruspay.vrsc::invoice VDXF ID]`\n\nThis creates a deeplink URL, such as `i5jtwbp6zymeay9llnraglgjqgdrffsau4://x-callback-url/iEETy7La3FTN2Sd2hNRgepek5S8x8eeUeQ/AzABpJ-uxwACFAAtMxHDi_0hkJLSrvRJgEvos77-pu-eojVjXjKBJP80KdufnpG2Ti0`, which can then be packaged into a QR code. This QR code can be scanned by a VerusPay supporting wallet application, or linked to by an application or service to trigger an invoice request.\n\nDo you have any further questions about VerusPay, or how it enables the efficient transmission and storage of invoices?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "How does VerusPay enable efficient transmission and storage of invoices across different systems and languages, and how can these invoices be packaged into deeplinks and QR codes readable by wallets like Verus Mobile?",
            "VerusPay uses a standardized approach to serialize and deserialize VerusPay Invoices and VerusPay InvoiceDetails into a binary format, allowing for efficient transmission and storage of invoices across different systems and languages without loss of fidelity or meaning. This serialization process ensures that invoices can be shared, processed, and stored consistently across various platforms.\n\nTo package a VerusPay Invoice into a deeplink or QR code readable by wallets like Verus Mobile, the invoice must first be serialized using the standardized method, excluding its 20-byte VDXF key. The resulting bytes are then formatted into a base64url string. Next, a deeplink URL can be created by combining the following components:\n\n* The prefix `[vrsc::applications.wallet VDXF ID]://x-callback-url/`\n* The VerusPay invoice bytes in base64url format\n* The suffix `[veruspay.vrsc::invoice VDXF ID]`\n\nThis creates a deeplink URL, such as `i5jtwbp6zymeay9llnraglgjqgdrffsau4://x-callback-url/iEETy7La3FTN2Sd2hNRgepek5S8x8eeUeQ/AzABpJ-uxwACFAAtMxHDi_0hkJLSrvRJgEvos77-pu-eojVjXjKBJP80KdufnpG2Ti0`, which can then be packaged into a QR code. This QR code can be scanned by a VerusPay supporting wallet application, or linked to by an application or service to trigger an invoice request.",
            "The specification emphasizes a standardized approach to converting the VerusPay Invoice and VerusPay InvoiceDetails into a binary format (serialization) and back (deserialization) to enable efficient transmission and storage. This process ensures that invoices can be shared, processed, and stored across different systems and languages without loss of fidelity or meaning.\n\n### Packaging into Deeplinks and QR Codes\n\nTo package a VerusPay Invoice into a deeplink or QR code readable by wallets like [Verus Mobile](https://github.com/VerusCoin/Verus-Mobile), the invoice must be serialized using the method described above, without its 20-byte [VDXF](/vdxf/) key included, and then its bytes formatted into a base64url string. Then, a deeplink URL can be created as follows:\n\n```[vrsc::applications.wallet VDXF ID]://x-callback-url/[veruspay.vrsc::invoice VDXF ID]/[VerusPay invoice bytes in base64url format]```\n\nIn practice, this creates URLs such as `i5jtwbp6zymeay9llnraglgjqgdrffsau4://x-callback-url/iEETy7La3FTN2Sd2hNRgepek5S8x8eeUeQ/AzABpJ-uxwACFAAtMxHDi_0hkJLSrvRJgEvos77-pu-eojVjXjKBJP80KdufnpG2Ti0`, which can then be packaged into a QR code and scanned by a VerusPay supporting wallet application, or linked to by an application or service to trigger an invoice request.",
            "./raw_text_input_docs/invoices.md"
        ]
    ]
]