[[["User:: Hey, I've got a question about sending VRSCTEST. How do I send VRSCTEST from a single address to multiple recipients using a single command?", "AI Assistant:: You can send VRSCTEST from a single address to multiple recipients using a single command, but not in the way you're thinking. You'll need to separate the recipients into individual objects within the JSON array. For example, to send VRSCTEST from a single address (bob@) to two recipients (alice@:private and bob@:private), you can use the following command:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\n\"currency\":\"vrsctest\",\n\"address\":\"alice@:private\",\n\"amount\":10\n},\n{\n\"currency\":\"VRSCTEST\",\n\"address\":\"bob@:private\",\n\"amount\":10\n}]'\n```\nThis command sends 10 VRSCTEST to each of the two recipients. Does that help?", "User:: Another question. Is it possible to convert VRSCTEST to PBaaSChain without specifying a bridge?", "AI Assistant:: No, it is not possible to convert VRSCTEST to PBaaSChain without specifying a bridge. When converting VRSCTEST to PBaaSChain, you need to specify the bridge using the \"via\" or \"exportto\" parameters. For example:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n\"amount\":10,\n\"convertto\":\"PBaaSChain\",\n\"exportto\":\"Bridge.PBaaSChain\",\n\"via\":\"Bridge.PBaaSChain\"\n}]'\n```\nThis command converts 10 VRSCTEST to PBaaSChain using the Bridge.PBaaSChain bridge. Without specifying the bridge, the conversion won't be possible. Does that make sense?"], "AI Assistant", "", "N/A", [["How do I send VRSCTEST from a single address to multiple recipients using a single command?", "You can send VRSCTEST from a single address to multiple recipients using a single command, but not in the way you're thinking. You'll need to separate the recipients into individual objects within the JSON array. For example, to send VRSCTEST from a single address (bob@) to two recipients (alice@:private and bob@:private), you can use the following command:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\n  \"currency\":\"vrsctest\",\n  \"address\":\"alice@:private\",\n  \"amount\":10\n},\n{\n  \"currency\":\"VRSCTEST\",\n  \"address\":\"bob@:private\",\n  \"amount\":10\n}]'\n```\nThis command sends 10 VRSCTEST to each of the two recipients.", "### Converting VRSCTEST cross-chain to PBaaS-chain\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"convertto\":\"PBaaSChain\",\n  \"exportto\":\"Bridge.PBaaSChain\",\n  \"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\n### Converting PBaaS-chain to VRSCTEST\n``` json\n./verus -chain=PBaaSChain sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"convertto\":\"VRSCTEST\",\n  \"exportto\":\"VRSCTEST\",\n  \"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\n## Sending\nSending VRSCTEST from a single address (bob@) to a single recipient (alice@):\n``` json\n./verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\n  \"currency\":\"vrsctest\",\n  \"address\":\"alice@\",\n  \"amount\":10\n}]'\n```\n\nSending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\n  \"currency\":\"vrsctest\",\n  \"address\":\"alice@:private\",\n  \"amount\":10\n},\n{\n  \"currency\":\"VRSCTEST\",\n  \"address\":\"bob@:private\",\n  \"amount\":10\n}]'\n```\n\nSending VRSCTEST cross-chain to PBaaSChain:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"exportto\":\"Bridge.PBaaSChain\"\n}]'\n```", "./raw_text_input_docs/sendcurrency-examples.md"], ["Is it possible to convert VRSCTEST to PBaaSChain without specifying a bridge?", "No, it is not possible to convert VRSCTEST to PBaaSChain without specifying a bridge. When converting VRSCTEST to PBaaSChain, you need to specify the bridge using the \"via\" or \"exportto\" parameters. For example:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"convertto\":\"PBaaSChain\",\n  \"exportto\":\"Bridge.PBaaSChain\",\n  \"via\":\"Bridge.PBaaSChain\"\n}]'\n```\nThis command converts 10 VRSCTEST to PBaaSChain using the Bridge.PBaaSChain bridge.", "### Converting VRSCTEST cross-chain to PBaaS-chain\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"convertto\":\"PBaaSChain\",\n  \"exportto\":\"Bridge.PBaaSChain\",\n  \"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\n### Converting PBaaS-chain to VRSCTEST\n``` json\n./verus -chain=PBaaSChain sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"convertto\":\"VRSCTEST\",\n  \"exportto\":\"VRSCTEST\",\n  \"via\":\"Bridge.PBaaSChain\"\n}]'\n```\n\n## Sending\nSending VRSCTEST from a single address (bob@) to a single recipient (alice@):\n``` json\n./verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\n  \"currency\":\"vrsctest\",\n  \"address\":\"alice@\",\n  \"amount\":10\n}]'\n```\n\nSending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\n  \"currency\":\"vrsctest\",\n  \"address\":\"alice@:private\",\n  \"amount\":10\n},\n{\n  \"currency\":\"VRSCTEST\",\n  \"address\":\"bob@:private\",\n  \"amount\":10\n}]'\n```\n\nSending VRSCTEST cross-chain to PBaaSChain:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\n  \"amount\":10,\n  \"exportto\":\"Bridge.PBaaSChain\"\n}]'\n```", "./raw_text_input_docs/sendcurrency-examples.md"]]], [["User:: I've been exploring the Verus ecosystem and I'm curious about VerusPay. What is the purpose of the VerusPay Invoice specification?", "AI Assistant:: The VerusPay Invoice specification is designed to be universally implementable across various programming languages and blockchain ecosystems, focusing on serialization and deserialization processes to ensure interoperability and consistency, making it a valuable tool for developers, merchants, and users within and beyond the Verus network.", "User:: That makes sense. I was also wondering about the **Version** component in the VerusPay Invoice construct. What's its purpose?", "AI Assistant:: The **Version** component in the VerusPay Invoice construct manages the invoice format version, facilitating future updates and backward compatibility through version flags and checks. It does not restrict the invoice to a specific version, as you might have implied.", "User:: I was under the impression that VerusPay invoices only had two components: **System ID** and **Signing ID**. Am I mistaken?", "AI Assistant:: No, you are mistaken. VerusPay invoices are not limited to only two components: **System ID** and **Signing ID**. The VerusPay Invoice construct includes four core components: **System ID**, **Signing ID**, **Signature**, and **Details**, as well as a **Version** component. The **Details** component further incorporates the VerusPay InvoiceDetails sub-component, which provides specific transaction-related data."], "AI Assistant", "", "N/A", [["What is the purpose of the VerusPay Invoice specification?", "The VerusPay Invoice specification is designed to be universally implementable across various programming languages and blockchain ecosystems, focusing on serialization and deserialization processes to ensure interoperability and consistency, making it a valuable tool for developers, merchants, and users within and beyond the Verus network.", "# Invoice SpecificationThe VerusPay Invoice specification, introduced in VerusPay v3, outlines a standardized format for creating, managing, and interpreting invoices across the Verus blockchain ecosystem and beyond. It is designed to be universally implementable across various programming languages, focusing primarily on the serialization and deserialization processes to ensure interoperability and consistency. VerusPay invoices provide a robust framework for blockchain invoice management, emphasizing interoperability, security, and ease of use. Their design facilitates a seamless payment experience across different blockchain ecosystems, making it a valuable tool for developers, merchants, and users within the Verus network and beyond.## Core ComponentsThe VerusPay Invoice construct is central to this specification, encapsulating all necessary information for a comprehensive invoice system, including:- **System ID**: If the invoice is signed by a VerusID, this is the ID system it is signed on.\n- **Signing ID**: If the invoice is signed by a VerusID, this is the address of the VerusID that signed it.\n- **Signature**: If the invoice is signed by a VerusID, this is the signature.\n- **Details**: Incorporates detailed transaction information through the VerusPay InvoiceDetails sub-component, covering aspects such as the payment amount, destination, and currency.\n- **Version**: Manages the invoice format version, facilitating future updates and backward compatibility through version flags and checks.### VerusPay InvoiceDetailsEmbedded within the VerusPay Invoice, the VerusPay InvoiceDetails component provides specific transaction-related data:", "./raw_text_input_docs/invoices.md"], ["What is the purpose of the **Version** component in the VerusPay Invoice construct?", "The **Version** component in the VerusPay Invoice construct manages the invoice format version, facilitating future updates and backward compatibility through version flags and checks. It does not restrict the invoice to a specific version, as you might have implied.", "# Invoice SpecificationThe VerusPay Invoice specification, introduced in VerusPay v3, outlines a standardized format for creating, managing, and interpreting invoices across the Verus blockchain ecosystem and beyond. It is designed to be universally implementable across various programming languages, focusing primarily on the serialization and deserialization processes to ensure interoperability and consistency. VerusPay invoices provide a robust framework for blockchain invoice management, emphasizing interoperability, security, and ease of use. Their design facilitates a seamless payment experience across different blockchain ecosystems, making it a valuable tool for developers, merchants, and users within the Verus network and beyond.## Core ComponentsThe VerusPay Invoice construct is central to this specification, encapsulating all necessary information for a comprehensive invoice system, including:- **System ID**: If the invoice is signed by a VerusID, this is the ID system it is signed on.\n- **Signing ID**: If the invoice is signed by a VerusID, this is the address of the VerusID that signed it.\n- **Signature**: If the invoice is signed by a VerusID, this is the signature.\n- **Details**: Incorporates detailed transaction information through the VerusPay InvoiceDetails sub-component, covering aspects such as the payment amount, destination, and currency.\n- **Version**: Manages the invoice format version, facilitating future updates and backward compatibility through version flags and checks.### VerusPay InvoiceDetailsEmbedded within the VerusPay Invoice, the VerusPay InvoiceDetails component provides specific transaction-related data:", "./raw_text_input_docs/invoices.md"], ["Are VerusPay invoices limited to only two components: **System ID** and **Signing ID**?", "No, VerusPay invoices are not limited to only two components: **System ID** and **Signing ID**. The VerusPay Invoice construct includes four core components: **System ID**, **Signing ID**, **Signature**, and **Details**, as well as a **Version** component. The **Details** component further incorporates the VerusPay InvoiceDetails sub-component, which provides specific transaction-related data.", "# Invoice SpecificationThe VerusPay Invoice specification, introduced in VerusPay v3, outlines a standardized format for creating, managing, and interpreting invoices across the Verus blockchain ecosystem and beyond. It is designed to be universally implementable across various programming languages, focusing primarily on the serialization and deserialization processes to ensure interoperability and consistency. VerusPay invoices provide a robust framework for blockchain invoice management, emphasizing interoperability, security, and ease of use. Their design facilitates a seamless payment experience across different blockchain ecosystems, making it a valuable tool for developers, merchants, and users within the Verus network and beyond.## Core ComponentsThe VerusPay Invoice construct is central to this specification, encapsulating all necessary information for a comprehensive invoice system, including:- **System ID**: If the invoice is signed by a VerusID, this is the ID system it is signed on.\n- **Signing ID**: If the invoice is signed by a VerusID, this is the address of the VerusID that signed it.\n- **Signature**: If the invoice is signed by a VerusID, this is the signature.\n- **Details**: Incorporates detailed transaction information through the VerusPay InvoiceDetails sub-component, covering aspects such as the payment amount, destination, and currency.\n- **Version**: Manages the invoice format version, facilitating future updates and backward compatibility through version flags and checks.### VerusPay InvoiceDetailsEmbedded within the VerusPay Invoice, the VerusPay InvoiceDetails component provides specific transaction-related data:", "./raw_text_input_docs/invoices.md"]]], [["User:: I've been playing around with VerusIDs and I have a few questions. Can you explain how to launch a new blockchain using a SubID?", "AI Assistant:: Actually, you can't launch a new blockchain using a SubID. SubIDs are registered under each launched currency and token, and they have the same features as VerusIDs, except that they cannot launch blockchains, currencies, or tokens. SubIDs are more like a subset of VerusIDs, but with limited functionality. Does that make sense?", "User:: Okay, got it. That clears things up. I also had a question about messaging. How do I use VerusID to send public messages?", "AI Assistant:: VerusID is not for sending public messages. According to the features, VerusID allows you to send and receive completely private messages through VerusID private addresses. So, if you want to send a message, it will be private and encrypted, not public. This is one of the benefits of using VerusIDs, as it allows for secure and private communication."], "AI Assistant", "", "N/A", [["Can you explain how to launch a new blockchain using a SubID?", "You can't launch a new blockchain using a SubID. SubIDs are registered under each launched currency and token, and they have the same features as VerusIDs, except that they cannot launch blockchains, currencies, or tokens.", "les, hashes and messages. | \n| **Multisig** | Multiple organizations or people can manage a VerusID. | \n| **Messages** | Send and receive completely private messages through VerusID private addresses. | \n| [**SSID login**](/verusid/login/) | Login to supported VerusID services without ever needing a password. |\n| **SubID** | Under each launched currency and token subIDs can be registered. SubIDs have the exact same features as VerusIDs, although they can not launch blockchains, currencies or tokens. |", "./raw_text_input_docs/README_addresses.md"], ["How do I use VerusID to send public messages?", "VerusID is not for sending public messages. According to the features, VerusID allows you to send and receive completely private messages through VerusID private addresses.", "les, hashes and messages. | \n| **Multisig** | Multiple organizations or people can manage a VerusID. | \n| **Messages** | Send and receive completely private messages through VerusID private addresses. | \n| [**SSID login**](/verusid/login/) | Login to supported VerusID services without ever needing a password. |\n| **SubID** | Under each launched currency and token subIDs can be registered. SubIDs have the exact same features as VerusIDs, although they can not launch blockchains, currencies or tokens. |", "./raw_text_input_docs/README_addresses.md"]]], [["User:: I've been looking into the VDXF specification, and I have a few questions. According to the VDXF specification, how many data types are supported?", "AI Assistant:: The VDXF specification doesn't limit the number of data types that can be supported. In fact, it's designed to recognize an unlimited number of user-defined data types. It provides a standard human-readable format for defining and encoding type specifiers, which are then hashed to produce collision-free, 20-byte keys. So, the possibilities are endless!", "User:: That's really interesting. I've also been wondering, is the VDXF type description specification strongly opinionated and highly specified?", "AI Assistant:: No, the VDXF type description specification is not strongly opinionated or highly specified. Instead, it focuses on a model for recognizing an unlimited number of user-defined data types, using a standard human-readable format for definition and encoding of the type specifier. It's designed to be flexible and adaptable, rather than rigidly defined. Do you have any more questions about VDXF or its specifications?"], "AI Assistant", "", "N/A", [["According to the VDXF specification, how many data types are supported?", "The VDXF specification doesn't limit the number of data types that can be supported. In fact, it's designed to recognize an unlimited number of user-defined data types. It provides a standard human-readable format for defining and encoding type specifiers, which are then hashed to produce collision-free, 20-byte keys.", "## Definition of VDXF typesVDXF is not a strongly opinionated or highly specified type description specification, and, instead, focuses on a model for recognizing an unlimited number of user defined data types, using a standard human readable format for definition and encoding of the type specifier, which is hashed, using the VDXF specification and standard methodology, to produce collision-free, 20 byte keys, which can be associated with retrieveable content hashes and location qualifiers that enable applications to locate, recognize types of, parse, and decode any form of application or system specific data. VDXF specifies some basic type formats, as necessary to enable initial applications, but leaves further specifications of applicaiton specific data formats, of which there may be an unlimited number, as an open-ended option for those needing new data type definitions for efficient application development. It is recommended that new fundamental data types not be defined unless necessary, but adherence to such recommendation is not enforced at the consensus protocol layer.## Namespace for Type Definitions - VerusIDNamespaces for type definitions are equivalent to VerusIDs, a protocol first implemented on the Verus Blockchain, and also one that can support IDs registered on any blockchain or uniquely named system that becomes recognized via a consensus-based bridge on the Verus network. Currently, to be recognized as a unique namespace, the easiest way is to base it on a VerusID, registered on the Verus blockchain network.", "./raw_text_input_docs/README_vdxf.md"], ["Is the VDXF type description specification strongly opinionated and highly specified?", "No, the VDXF type description specification is not strongly opinionated or highlyMemoryWarning specified. Instead, it focuses on a model for recognizing an unlimited number of user-defined data types, using a standard human-readable format for definition and encoding of the type specifier.", "## Definition of VDXF typesVDXF is not a strongly opinionated or highly specified type description specification, and, instead, focuses on a model for recognizing an unlimited number of user defined data types, using a standard human readable format for definition and encoding of the type specifier, which is hashed, using the VDXF specification and standard methodology, to produce collision-free, 20 byte keys, which can be associated with retrieveable content hashes and location qualifiers that enable applications to locate, recognize types of, parse, and decode any form of application or system specific data. VDXF specifies some basic type formats, as necessary to enable initial applications, but leaves further specifications of applicaiton specific data formats, of which there may be an unlimited number, as an open-ended option for those needing new data type definitions for efficient application development. It is recommended that new fundamental data types not be defined unless necessary, but adherence to such recommendation is not enforced at the consensus protocol layer.## Namespace for Type Definitions - VerusIDNamespaces for type definitions are equivalent to VerusIDs, a protocol first implemented on the Verus Blockchain, and also one that can support IDs registered on any blockchain or uniquely named system that becomes recognized via a consensus-based bridge on the Verus network. Currently, to be recognized as a unique namespace, the easiest way is to base it on a VerusID, registered on the Verus blockchain network.", "./raw_text_input_docs/README_vdxf.md"]]], [["User:: I'm curious about the Verus-Ethereum Bridge. How does the central authority control the transfer of assets between Verus and Ethereum?", "AI Assistant:: Actually, there is no central authority controlling the transfer of assets between Verus and Ethereum using the Verus-Ethereum Bridge. The Bridge is trustless and non-custodial, meaning that no single entity has control over the assets being transferred. Instead, the decentralized network of miners and stakers verifies and accounts for funds crossing the bridge, ensuring a secure and trustworthy transfer process.", "User:: That's great to know! I thought I heard that the Bridge had been operational for a while now. Is the Verus-Ethereum Bridge operational since 2020?", "AI Assistant:: No, that's not correct. The Verus-Ethereum Bridge is not operational since 2020. The Bridge has been fully operational since October 20, 2023. So, it's still relatively new, but it's already making a big impact in the crypto community!"], "AI Assistant", "", "N/A", [["How does the Verus-Ethereum Bridge's central authority control the transfer of assets between Verus and Ethereum?", "There is no central authority controlling the transfer of assets between Verus and Ethereum using the Verus-Ethereum Bridge. The Bridge is trustless and non-custodial, meaning that no single entity has control over the assets being transferred. Instead, the decentralized network of miners and stakers verifies and accounts for funds crossing the bridge, ensuring a secure and trustworthy transfer process.", "# What is the Verus-Ethereum Bridge\nThe Verus-Ethereum Bridge (fully operational since Oct 20, 2023) allows for the secure transfer and conversion of cryptocurrencies between Verus and Ethereum. It's **trustless** and **non-custodial**, meaning it doesn't require users to trust a third party with their funds, and **no single entity has control over the assets being transferred**.The Bridge stands out because it avoids common security issues found in other cryptocurrency bridges by using the decentralized network of miners and stakers to verify and account for funds crossing the bridge.\ud83d\udc49 Access the Verus-Ethereum Bridge [with MetaMask or WalletConnect](https://eth.verusbridge.io), or download Verus Mobile for [iOS](https://apps.apple.com/en/app/verus-mobile/id6447361908) and [Android](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US).## What can the Verus-Ethereum Bridge do\nThe trustless and non-custodial Verus-Ethereum Bridge can be used for the following things:", "./raw_text_input_docs/README_eth-bridge.md"], ["Is the Verus-Ethereum Bridge operational since 2020?", "No, the Verus-Ethereum Bridge is not operational since 2020. The Bridge has been fully operational since October 20, 2023.", "# What is the Verus-Ethereum Bridge\nThe Verus-Ethereum Bridge (fully operational since Oct 20, 2023) allows for the secure transfer and conversion of cryptocurrencies between Verus and Ethereum. It's **trustless** and **non-custodial**, meaning it doesn't require users to trust a third party with their funds, and **no single entity has control over the assets being transferred**.The Bridge stands out because it avoids common security issues found in other cryptocurrency bridges by using the decentralized network of miners and stakers to verify and account for funds crossing the bridge.\ud83d\udc49 Access the Verus-Ethereum Bridge [with MetaMask or WalletConnect](https://eth.verusbridge.io), or download Verus Mobile for [iOS](https://apps.apple.com/en/app/verus-mobile/id6447361908) and [Android](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US).## What can the Verus-Ethereum Bridge do\nThe trustless and non-custodial Verus-Ethereum Bridge can be used for the following things:", "./raw_text_input_docs/README_eth-bridge.md"]]], [["User:: I've been using VerusIDs for a while now, and I have a question about locking them. I want to permanently lock a VerusID, so it can never be spent again. Is that possible?", "AI Assistant:: I see what you're getting at. Unfortunately, it's not possible to permanently lock a VerusID. You can always revoke and recover a locked VerusID. This means that even if you lock your VerusID using a TimeLock or DelayLock, you can still recover it and spend the funds again after the specified time period has passed. So, while you can lock a VerusID, you can't lock it forever.", "User:: That's good to know. I was also wondering about DelayLocks specifically. Can I set a DelayLock on a VerusID without specifying the number of blocks to wait before unlocking?", "AI Assistant:: No, you can't set a DelayLock on a VerusID without specifying the number of blocks to wait before unlocking. You need to specify the number of blocks to wait, such as 10,080 blocks for a 1-week delay, using the `setunlockdelay` parameter. This ensures that the DelayLock is set for a specific amount of time, and you can't just leave it open-ended. Does that make sense?"], "AI Assistant", "", "N/A", [["How do I permanently lock a VerusID, so it can never be spent again?", "It's not possible to permanently lock a VerusID. You can always revoke and recover a locked VerusID. This means that even if you lock your VerusID using a TimeLock or DelayLock, you can still recover it and spend the funds again after the specified time period has passed.", "- Under ``unlockatblock`` you put ``1508994``\n- Change ``myid@`` with your own VerusIDSo in our example your VerusID is locked for approximately for 1 year. After that period of time the funds can be spent again.``` json\nrun setidentitytimelock \"myid@\" \n'{\n  \"unlockatblock\":1508994\n}'\n```You can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs.:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::## Vault with DelayLock\n![image-delaylock](/images/delaylock.png)\nNow let's put a DelayLock on a VerusID. This means that you lock the identity, and when you request the identity to be unlocked, a predetermined number of blocks have to pass before you can actually spend the funds again.### Set the DelayLock\nLet's say you want to put a DelayLock of 1 week. 1 week is ``10,080`` blocks (1440x7). This will lock the identity, and when you request an unlock, it takes 1 week (or 10,080 blocks) before the funds can be spent again.- Under ``setunlockdelay`` you put ``10080``\n- Change ``myid@`` with your own VerusID``` json\nrun setidentitytimelock \"myid@\" \n'{\n  \"setunlockdelay\":10080\n}'\n```You can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs.:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::### Request an unlock\nAbove you locked a VerusID with a DelayLock. Now let's request an unlock. When an unlock has been requested you have to wait the predetermined number of blocks before you can spend the funds again.", "./raw_text_input_docs/setup-vault-v2.md"], ["Can I set a DelayLock on a VerusID without specifying the number of blocks to wait before unlocking?", "No, you cannot set a DelayLock on a VerusID without specifying the number of blocks to wait before unlocking. You need to specify the number of blocks to wait, such as 10,080 blocks for a 1-week delay, using the `setunlockdelay` parameter.", "- Under ``unlockatblock`` you put ``1508994``\n- Change ``myid@`` with your own VerusIDSo in our example your VerusID is locked for approximately for 1 year. After that period of time the funds can be spent again.``` json\nrun setidentitytimelock \"myid@\" \n'{\n  \"unlockatblock\":1508994\n}'\n```You can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs.:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::## Vault with DelayLock\n![image-delaylock](/images/delaylock.png)\nNow let's put a DelayLock on a VerusID. This means that you lock the identity, and when you request the identity to be unlocked, a predetermined number of blocks have to pass before you can actually spend the funds again.### Set the DelayLock\nLet's say you want to put a DelayLock of 1 week. 1 week is ``10,080`` blocks (1440x7). This will lock the identity, and when you request an unlock, it takes 1 week (or 10,080 blocks) before the funds can be spent again.- Under ``setunlockdelay`` you put ``10080``\n- Change ``myid@`` with your own VerusID``` json\nrun setidentitytimelock \"myid@\" \n'{\n  \"setunlockdelay\":10080\n}'\n```You can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs.:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::### Request an unlock\nAbove you locked a VerusID with a DelayLock. Now let's request an unlock. When an unlock has been requested you have to wait the predetermined number of blocks before you can spend the funds again.", "./raw_text_input_docs/setup-vault-v2.md"]]], [["User:: I've got some questions about Verus. I've been wondering, how does Verus plan to exceed the maximum circulating supply of 83,540,184 VRSC?", "AI Assistant:: Verus does not plan to exceed the maximum circulating supply of 83,540,184 VRSC. In fact, the maximum circulating supply is capped at 83,540,184 VRSC, and the block rewards and fees are designed to eventually reach this limit. So, there's no plan to exceed the maximum supply.", "User:: Okay, that makes sense. I've got another question. What is the block reward at block height 10,080?", "AI Assistant:: The block reward at block height 10,080 is not a fixed value. Block rewards of 384 and 192 VRSC were timelocked and then unlocked at random block heights starting from block height 10,080. So, it's not a specific value at that exact block height.", "User:: Got it, thanks for the clarification. I've been wondering about something else too. How much does it cost to launch a PBaaS-chain?", "AI Assistant:: It costs 10,000 VRSC to launch a PBaaS-chain, but half of this fee (5,000 VRSC) goes to the miners and stakers of the newly launched PBaaS-chain. So, it's not a direct cost to the launcher, but rather an investment in the new chain's ecosystem."], "AI Assistant", "", "N/A", [["How does Verus plan to exceed the maximum circulating supply of 83,540,184 VRSC?", "Verus does not plan to exceed the maximum circulating supply of 83,540,184 VRSC. In fact, the maximum circulating supply is capped at 83,540,184 VRSC, and the block rewards and fees are designed to eventually reach this limit.", "| Block Height (& Start Date) | Block Rewards | Coin Emission | \n| -------------: | ----------:| --------------:| \n| 1 (5.21.2018) | 0 - 384 | 485,000 VRSC| \n| 10,080 (5.28.2018)| 384* | 16,589,000 VRSC| \n| 53,280 (6.28.2018)| 192* | 8,294,000 VRSC| \n| 96,480 (7.28.2018)| 96 | 4,147,200 VRSC|\n| 139,680 (8.28.2018)| 48 | 2,073,600 VRSC|\n| 226,080 (9.28.2018) | 24 | 25,282,880 VRSC|\n| 1,278,000 (11.22.2020)| 12 | 12,623,040 VRSC|\n| 2,329,920 (12.17.2022)| 6 | 6,311,520 VRSC|\n| 3,381,840 (~1.9.2025)| 3 | 3,155,760 VRSC|\n| 4,433,760 (~ 2027)| 1.5 | 1,577,880 VRSC|\n| 5,485,680 (~ 2029)| 0.75 | 788,940 VRSC|\n| 6,537,600 (~ 2031) | 0.375 | 394,470 VRSC|\n| 7,589,520 (~ 2033) | 0.1875 | 197,235 VRSC|\n| 8,641,440 (~ 2035) | 0.09375 | 98,618 VRSC|\n| 9,693,360 (~ 2037) | 0.0486875 | 49,309 VRSC|\n| 10,745,280 (~ 2039) | 0.0234375 | 24,655 VRSC|\n| 11,797,200 (~ 2041) | 0.01171875 | 12,327 VRSC|\n| 12,849,120 (~ 2043) | 0.00585937 | 6,164 VRSC|\n| 13,901,040 (~ 2045) | 0.00292968 | 3,082 VRSC|\n| etc. | ... | ... | ... |The maximum circulating supply of all coins is 83,540,184 VRSC.\n::: tip * 384, 192 Block Rewards \u23f2\ufe0f\nFrom block height 10,080 on, all block rewards of 384 and 192 VRSC were timelocked and then unlocked at random block heights. The last of those rewards were unlocked at block height 1,181,520.\n:::## Block Fees\n Fees are generated from users paying for services and interacting with the protocol. These fees are processed in the blocks and earned by miners and stakers.| Protocol Activity | Fees | \n| :------------- | -------------:| \n| VerusID Registration | 20 - 100 VRSC |\n| PBaaS-chain Launch| 10,000 VRSC** |\n| Currency/Token Launch | 200 VRSC |\n| Conversion Fee | 0.025%, 0.05% |\n| Transaction Fee | 0.0001 VRSC  |_**Half the fee (5000) goes to the miners and stakers of the newly launched PBaaS-chain._", "./raw_text_input_docs/README_economy.md"], ["What is the block reward at block height 10,080?", "The block reward at block height 10,080 is not a fixed value. Block rewards of 384 and 192 VRSC were timelocked and then unlocked at random block heights starting from block height 10,080.", "| Block Height (& Start Date) | Block Rewards | Coin Emission | \n| -------------: | ----------:| --------------:| \n| 1 (5.21.2018) | 0 - 384 | 485,000 VRSC| \n| 10,080 (5.28.2018)| 384* | 16,589,000 VRSC| \n| 53,280 (6.28.2018)| 192* | 8,294,000 VRSC| \n| 96,480 (7.28.2018)| 96 | 4,147,200 VRSC|\n| 139,680 (8.28.2018)| 48 | 2,073,600 VRSC|\n| 226,080 (9.28.2018) | 24 | 25,282,880 VRSC|\n| 1,278,000 (11.22.2020)| 12 | 12,623,040 VRSC|\n| 2,329,920 (12.17.2022)| 6 | 6,311,520 VRSC|\n| 3,381,840 (~1.9.2025)| 3 | 3,155,760 VRSC|\n| 4,433,760 (~ 2027)| 1.5 | 1,577,880 VRSC|\n| 5,485,680 (~ 2029)| 0.75 | 788,940 VRSC|\n| 6,537,600 (~ 2031) | 0.375 | 394,470 VRSC|\n| 7,589,520 (~ 2033) | 0.1875 | 197,235 VRSC|\n| 8,641,440 (~ 2035) | 0.09375 | 98,618 VRSC|\n| 9,693,360 (~ 2037) | 0.0486875 | 49,309 VRSC|\n| 10,745,280 (~ 2039) | 0.0234375 | 24,655 VRSC|\n| 11,797,200 (~ 2041) | 0.01171875 | 12,327 VRSC|\n| 12,849,120 (~ 2043) | 0.00585937 | 6,164 VRSC|\n| 13,901,040 (~ 2045) | 0.00292968 | 3,082 VRSC|\n| etc. | ... | ... | ... |The maximum circulating supply of all coins is 83,540,184 VRSC.\n::: tip * 384, 192 Block Rewards \u23f2\ufe0f\nFrom block height 10,080 on, all block rewards of 384 and 192 VRSC were timelocked and then unlocked at random block heights. The last of those rewards were unlocked at block height 1,181,520.\n:::## Block Fees\n Fees are generated from users paying for services and interacting with the protocol. These fees are processed in the blocks and earned by miners and stakers.| Protocol Activity | Fees | \n| :------------- | -------------:| \n| VerusID Registration | 20 - 100 VRSC |\n| PBaaS-chain Launch| 10,000 VRSC** |\n| Currency/Token Launch | 200 VRSC |\n| Conversion Fee | 0.025%, 0.05% |\n| Transaction Fee | 0.0001 VRSC  |_**Half the fee (5000) goes to the miners and stakers of the newly launched PBaaS-chain._", "./raw_text_input_docs/README_economy.md"], ["How much does it cost to launch a PBaaS-chain?", "It costs 10,000 VRSC to launch a PBaaS-chain, but half of this fee (5,000 VRSC) goes to the miners and stakers of the newly launched PBaaS-chain.", "| Block Height (& Start Date) | Block Rewards | Coin Emission | \n| -------------: | ----------:| --------------:| \n| 1 (5.21.2018) | 0 - 384 | 485,000 VRSC| \n| 10,080 (5.28.2018)| 384* | 16,589,000 VRSC| \n| 53,280 (6.28.2018)| 192* | 8,294,000 VRSC| \n| 96,480 (7.28.2018)| 96 | 4,147,200 VRSC|\n| 139,680 (8.28.2018)| 48 | 2,073,600 VRSC|\n| 226,080 (9.28.2018) | 24 | 25,282,880 VRSC|\n| 1,278,000 (11.22.2020)| 12 | 12,623,040 VRSC|\n| 2,329,920 (12.17.2022)| 6 | 6,311,520 VRSC|\n| 3,381,840 (~1.9.2025)| 3 | 3,155,760 VRSC|\n| 4,433,760 (~ 2027)| 1.5 | 1,577,880 VRSC|\n| 5,485,680 (~ 2029)| 0.75 | 788,940 VRSC|\n| 6,537,600 (~ 2031) | 0.375 | 394,470 VRSC|\n| 7,589,520 (~ 2033) | 0.1875 | 197,235 VRSC|\n| 8,641,440 (~ 2035) | 0.09375 | 98,618 VRSC|\n| 9,693,360 (~ 2037) | 0.0486875 | 49,309 VRSC|\n| 10,745,280 (~ 2039) | 0.0234375 | 24,655 VRSC|\n| 11,797,200 (~ 2041) | 0.01171875 | 12,327 VRSC|\n| 12,849,120 (~ 2043) | 0.00585937 | 6,164 VRSC|\n| 13,901,040 (~ 2045) | 0.00292968 | 3,082 VRSC|\n| etc. | ... | ... | ... |The maximum circulating supply of all coins is 83,540,184 VRSC.\n::: tip * 384, 192 Block Rewards \u23f2\ufe0f\nFrom block height 10,080 on, all block rewards of 384 and 192 VRSC were timelocked and then unlocked at random block heights. The last of those rewards were unlocked at block height 1,181,520.\n:::## Block Fees\n Fees are generated from users paying for services and interacting with the protocol. These fees are processed in the blocks and earned by miners and stakers.| Protocol Activity | Fees | \n| :------------- | -------------:| \n| VerusID Registration | 20 - 100 VRSC |\n| PBaaS-chain Launch| 10,000 VRSC** |\n| Currency/Token Launch | 200 VRSC |\n| Conversion Fee | 0.025%, 0.05% |\n| Transaction Fee | 0.0001 VRSC  |_**Half the fee (5000) goes to the miners and stakers of the newly launched PBaaS-chain._", "./raw_text_input_docs/README_economy.md"]]], [["User:: Hey, I've got a question about bridging between Verus and Ethereum. Can you explain how to bridge from Verus to Ethereum using Verus Mobile?", "AI Assistant:: Actually, I think there's a misunderstanding! Verus Mobile does not support bridging from Verus to Ethereum. Instead, it provides instructions on how to bridge from Ethereum to Verus. Would you like me to explain the process of bridging from Ethereum to Verus?", "User:: Yeah, that would be helpful. And also, is MetaMask compatible with the Verus Ethereum bridge?", "AI Assistant:: Yes, MetaMask is compatible with the Verus Ethereum bridge. You can bridge from Ethereum to Verus using MetaMask by following specific instructions. I can provide you with a step-by-step guide if you'd like.", "User:: That sounds great, thanks! One more question: Do I need to preconvert my tokens to bridge from Ethereum to Verus?", "AI Assistant:: No, you don't need to preconvert your tokens to bridge from Ethereum to Verus. You can skip the preconversion step when following the instructions for bridging from Ethereum to Verus using Verus Mobile or MetaMask. I'll make sure to clarify that in the guide I provide you."], "AI Assistant", "", "N/A", [["Can you explain how to bridge from Verus to Ethereum using Verus Mobile?", "I think there's a misunderstanding! Verus Mobile does not support bridging from Verus to Ethereum. Instead, it provides instructions on how to bridge from Ethereum to Verus.", "# How to bridge from Ethereum to Verus\n\n## Verus Mobile\nPlease read the first parts of [this article](https://medium.com/veruscoin/how-to-participate-in-the-verus-ethereum-bridge-launch-73aeeae1c76a). You can skip the part on preconverting.\n\n## MetaMask\nPlease read the first parts of [this article](https://medium.com/veruscoin/how-to-participate-in-the-verus-ethereum-bridge-launch-73aeeae1c76a). You can skip the part on preconverting.", "./raw_text_input_docs/ethereum-to-verus.md"], ["Is MetaMask compatible with the Verus Ethereum bridge?", "Yes, MetaMask is compatible with the Verus Ethereum bridge. You can bridge from Ethereum to Verus using MetaMask by following specific instructions.", "# How to bridge from Ethereum to Verus\n\n## Verus Mobile\nPlease read the first parts of [this article](https://medium.com/veruscoin/how-to-participate-in-the-verus-ethereum-bridge-launch-73aeeae1c76a). You can skip the part on preconverting.\n\n## MetaMask\nPlease read the first parts of [this article](https://medium.com/veruscoin/how-to-participate-in-the-verus-ethereum-bridge-launch-73aeeae1c76a). You can skip the part on preconverting.", "./raw_text_input_docs/ethereum-to-verus.md"], ["Do I need to preconvert my tokens to bridge from Ethereum to Verus?", "No, you don't need to preconvert your tokens to bridge from Ethereum to Verus. You can skip the preconversion step when following the instructions for bridging from Ethereum to Verus using Verus Mobile or MetaMask.", "# How to bridge from Ethereum to Verus\n\n## Verus Mobile\nPlease read the first parts of [this article](https://medium.com/veruscoin/how-to-participate-in-the-verus-ethereum-bridge-launch-73aeeae1c76a). You can skip the part on preconverting.\n\n## MetaMask\nPlease read the first parts of [this article](https://medium.com/veruscoin/how-to-participate-in-the-verus-ethereum-bridge-launch-73aeeae1c76a). You can skip the part on preconverting.", "./raw_text_input_docs/ethereum-to-verus.md"]]], [["User:: I've been doing some research on Verus, and I've got a few questions. I'm not sure if I fully understand how it works. How does Verus, a centralized blockchain project controlled by a single company, ensure that its protocol fees are distributed fairly among its users?", "AI Assistant:: I think there may be some confusion here. Verus is not a centralized blockchain project controlled by a single company. In fact, it is a decentralized public blockchain that is community-driven and has no company behind it. All protocol fees go to the block producers of the network, which are the miners and stakers. This decentralized nature of Verus ensures that the fees are distributed fairly among those who contribute to the network.", "User:: That's good to know. I was also wondering, what is the minimum amount of Verus coins that I need to stake in order to participate in the network and earn rewards?", "AI Assistant:: There is no minimum requirement for staking Verus coins. Anyone can stake Verus coins without any minimum amount or locking of funds. This makes it accessible to everyone and ensures that the network is decentralized and community-driven.", "User:: One last question. How did Verus conduct its ICO to raise funds for the development of its blockchain protocol?", "AI Assistant:: Verus did not conduct an ICO (Initial Coin Offering) to raise funds for its development. In fact, Verus had a fair launch, meaning that everyone had equal opportunity to collect its currency through mining and staking, without any ICO, founder or developer fees, premine, commercial interests, or rent-seeking behavior."], "AI Assistant", "", "N/A", [["How does Verus, a centralized blockchain project controlled by a single company, ensure that its protocol fees are distributed fairly among its users?", "Verus is not a centralized blockchain project controlled by a single company. In fact, it is a decentralized public blockchain that is community-driven and has no company behind it. All protocol fees go to the block producers of the network, which are the miners and stakers. This decentralized nature of Verus ensures that the fees are distributed fairly among those who contribute to the network.", "## Decentralized & community-built\nVerus is a decentralized public blockchain, a community driven project in the true spirit of Bitcoin. Anyone can participate and contribute, no matter who you are or where you come from. Verus is:\n* **Open**\n* **Borderless**\n* **Public**\n* **Neutral**\n* **Censorship resistant**\n\nAnyone can start mining and staking the Verus Protocol. Mobile phones and ARMs (e.g. Orange Pi 5) are the most energy efficient devices to mine Verus (and 22 other PBaaS-chains) with. To stake there are no minimum requirements or locking of funds.\n\nThere is no company behind Verus, it is community-built. All protocol fees go to the block producers of the network (the miners and stakers).\n\nThese characteristics that anyone can participate in the Verus Protocol makes it one of the most decentralized networks worldwide.\n\n## Fair launch\nVerus had a fair launch, meaning that everyone had, and still has equal opportunity to collect its currency through mining and staking. For Verus this means:\n* **No ICO has been held**\n* **No founder or developer fees/tax**\n* **No premine**\n* **No commercial interests**\n* **No rent-seeking behavior**\n\nThe launch of the Verus blockchain was announced on the Bitcointalk.org forum [See post](https://bitcointalk.org/index.php?topic=4070404.0) 15 minutes before the first block could be mined.\n\n::: tip Rich List\n[Take a look at the richlist to see coin distribution.](https://dexstats.info/richlist.php?asset=VRSC) \n:::", "./raw_text_input_docs/README_overview.md"], ["What is the minimum amount of Verus coins that I need to stake in order to participate in the network and earn rewards?", "There is no minimum requirement for staking Verus coins. Anyone can stake Verus coins without any minimum amount or locking of funds. This makes it accessible to everyone and ensures that the network is decentralized and community-driven.", "## Decentralized & community-built\nVerus is a decentralized public blockchain, a community driven project in the true spirit of Bitcoin. Anyone can participate and contribute, no matter who you are or where you come from. Verus is:\n* **Open**\n* **Borderless**\n* **Public**\n* **Neutral**\n* **Censorship resistant**\n\nAnyone can start mining and staking the Verus Protocol. Mobile phones and ARMs (e.g. Orange Pi 5) are the most energy efficient devices to mine Verus (and 22 other PBaaS-chains) with. To stake there are no minimum requirements or locking of funds.\n\nThere is no company behind Verus, it is community-built. All protocol fees go to the block producers of the network (the miners and stakers).\n\nThese characteristics that anyone can participate in the Verus Protocol makes it one of the most decentralized networks worldwide.\n\n## Fair launch\nVerus had a fair launch, meaning that everyone had, and still has equal opportunity to collect its currency through mining and staking. For Verus this means:\n* **No ICO has been held**\n* **No founder or developer fees/tax**\n* **No premine**\n* **No commercial interests**\n* **No rent-seeking behavior**\n\nThe launch of the Verus blockchain was announced on the Bitcointalk.org forum [See post](https://bitcointalk.org/index.php?topic=4070404.0) 15 minutes before the first block could be mined.\n\n::: tip Rich List\n[Take a look at the richlist to see coin distribution.](https://dexstats.info/richlist.php?asset=VRSC) \n:::", "./raw_text_input_docs/README_overview.md"], ["How did Verus conduct its ICO to raise funds for the development of its blockchain protocol?", "Verus did not conduct an ICO (Initial Coin Offering) to raise funds for its development. In fact, Verus had a fair launch, meaning that everyone had equal opportunity to collect its currency through mining and staking, without any ICO, founder or developer fees, premine, commercial interests, or rent-seeking behavior.", "## Decentralized & community-built\nVerus is a decentralized public blockchain, a community driven project in the true spirit of Bitcoin. Anyone can participate and contribute, no matter who you are or where you come from. Verus is:\n* **Open**\n* **Borderless**\n* **Public**\n* **Neutral**\n* **Censorship resistant**\n\nAnyone can start mining and staking the Verus Protocol. Mobile phones and ARMs (e.g. Orange Pi 5) are the most energy efficient devices to mine Verus (and 22 other PBaaS-chains) with. To stake there are no minimum requirements or locking of funds.\n\nThere is no company behind Verus, it is community-built. All protocol fees go to the block producers of the network (the miners and stakers).\n\nThese characteristics that anyone can participate in the Verus Protocol makes it one of the most decentralized networks worldwide.\n\n## Fair launch\nVerus had a fair launch, meaning that everyone had, and still has equal opportunity to collect its currency through mining and staking. For Verus this means:\n* **No ICO has been held**\n* **No founder or developer fees/tax**\n* **No premine**\n* **No commercial interests**\n* **No rent-seeking behavior**\n\nThe launch of the Verus blockchain was announced on the Bitcointalk.org forum [See post](https://bitcointalk.org/index.php?topic=4070404.0) 15 minutes before the first block could be mined.\n\n::: tip Rich List\n[Take a look at the richlist to see coin distribution.](https://dexstats.info/richlist.php?asset=VRSC) \n:::", "./raw_text_input_docs/README_overview.md"]]], [["User:: I'm trying to create a blockchain, but I'm having some trouble with the naming. Can I create a blockchain of any name without needing a VerusID of the same name?", "AI Assistant:: No, you can't. To create a blockchain of a specific name, you need a VerusID of the same name. The controller of this VerusID is the only one who can create a blockchain of that name, and they can only do so once. Does that clarify things for you?", "User:: Okay, that makes sense. I was also wondering about the OPTION_FRACTIONAL parameter when defining my blockchain. What happens if I set it to 0?", "AI Assistant:: You can't set OPTION_FRACTIONAL to 0. OPTION_FRACTIONAL is a parameter that allows reserve conversion using base calculations when set (i.e., when its value is 1). It's not a toggle that can be turned off by setting it to 0. You'll need to set it to 1 if you want to enable reserve conversion.", "User:: One more question. Can anyone create a blockchain of a specific name, regardless of who controls the corresponding VerusID?", "AI Assistant:: No, only the controller of the corresponding VerusID can create a blockchain of that name, and they can only do so once. So, if someone else controls the VerusID with the name you want, you won't be able to create a blockchain with that name. Does that make sense?"], "AI Assistant", "", "N/A", [["How can I create a blockchain of any name without needing a VerusID of the same name?", "You can't. To create a blockchain of a specific name, you need a VerusID of the same name. The controller of this VerusID is the only one who can create a blockchain of that name, and they can only do so once.", "# Defining a PBaaS-blockchain::: warning Information here is not complete. Need help setting up a blockchain launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord) \n:::There are many options to choose from when defining your blockchain. Combine them in the ``options`` parameter for different use cases.| # | Options | Details |\n| - |:-----|:-----|\n| 1 | OPTION_FRACTIONAL | Allows reserve conversion using base calculations when set |\n| 2 | OPTION_ID_ISSUANCE | Clear is permissionless, if set, IDs may only be created by controlling ID |\n| 4 | OPTION_ID_STAKING | All IDs on chain stake equally, rather than value-based staking |\n| 8 | OPTION_ID_REFERRALS | If set, this chain supports referrals |\n| 16 | OPTION_ID_REFERRALREQUIRED | If set, this chain requires referrals |\n| 32 | OPTION_TOKEN | If set, this is a token, not a native currency |\n| 64 | OPTION_SINGLECURRENCY | For PBaaS chains or gateways to potentially restrict to single currency |\n| 128 | OPTION_GATEWAY | If set, this routes external currencies |\n| 256 | OPTION_PBAAS | This is a PBaaS chain definition|\n| 512 | OPTION_GATEWAY_CONVERTER | This means that for a specific PBaaS gateway, this is the default converter and will publish prices |\n| 1024 | OPTION_GATEWAY_NAMECONTROLLER | When not set on a gateway, top level ID and currency registration happen on launch chain |\n| 2048 | OPTION_NFT_TOKEN | Single satoshi NFT token, tokenizes control over the root ID |## VerusID Namespace\nTo create a blockchain of a specific name, you need a VerusID of the same name. The controller of this VerusID is the only one who can create a blockchain of that name, and they can only do so once.## Examples of blockchain launches", "./raw_text_input_docs/define-pbaas.md"], ["What happens if I set OPTION_FRACTIONAL to 0 when defining my blockchain?", "You can't set OPTION_FRACTIONAL to 0. OPTION_FRACTIONAL is a parameter that allows reserve conversion using base calculations when set (i.e., when its value is 1). It's not a toggle that can be turned off by setting it to 0.", "# Defining a PBaaS-blockchain::: warning Information here is not complete. Need help setting up a blockchain launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord) \n:::There are many options to choose from when defining your blockchain. Combine them in the ``options`` parameter for different use cases.| # | Options | Details |\n| - |:-----|:-----|\n| 1 | OPTION_FRACTIONAL | Allows reserve conversion using base calculations when set |\n| 2 | OPTION_ID_ISSUANCE | Clear is permissionless, if set, IDs may only be created by controlling ID |\n| 4 | OPTION_ID_STAKING | All IDs on chain stake equally, rather than value-based staking |\n| 8 | OPTION_ID_REFERRALS | If set, this chain supports referrals |\n| 16 | OPTION_ID_REFERRALREQUIRED | If set, this chain requires referrals |\n| 32 | OPTION_TOKEN | If set, this is a token, not a native currency |\n| 64 | OPTION_SINGLECURRENCY | For PBaaS chains or gateways to potentially restrict to single currency |\n| 128 | OPTION_GATEWAY | If set, this routes external currencies |\n| 256 | OPTION_PBAAS | This is a PBaaS chain definition|\n| 512 | OPTION_GATEWAY_CONVERTER | This means that for a specific PBaaS gateway, this is the default converter and will publish prices |\n| 1024 | OPTION_GATEWAY_NAMECONTROLLER | When not set on a gateway, top level ID and currency registration happen on launch chain |\n| 2048 | OPTION_NFT_TOKEN | Single satoshi NFT token, tokenizes control over the root ID |## VerusID Namespace\nTo create a blockchain of a specific name, you need a VerusID of the same name. The controller of this VerusID is the only one who can create a blockchain of that name, and they can only do so once.## Examples of blockchain launches", "./raw_text_input_docs/define-pbaas.md"], ["Can anyone create a blockchain of a specific name, regardless of who controls the corresponding VerusID?", "No, only the controller of the corresponding VerusID can create a blockchain of that name, and they can only do so once.", "# Defining a PBaaS-blockchain::: warning Information here is not complete. Need help setting up a blockchain launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord) \n:::There are many options to choose from when defining your blockchain. Combine them in the ``options`` parameter for different use cases.| # | Options | Details |\n| - |:-----|:-----|\n| 1 | OPTION_FRACTIONAL | Allows reserve conversion using base calculations when set |\n| 2 | OPTION_ID_ISSUANCE | Clear is permissionless, if set, IDs may only be created by controlling ID |\n| 4 | OPTION_ID_STAKING | All IDs on chain stake equally, rather than value-based staking |\n| 8 | OPTION_ID_REFERRALS | If set, this chain supports referrals |\n| 16 | OPTION_ID_REFERRALREQUIRED | If set, this chain requires referrals |\n| 32 | OPTION_TOKEN | If set, this is a token, not a native currency |\n| 64 | OPTION_SINGLECURRENCY | For PBaaS chains or gateways to potentially restrict to single currency |\n| 128 | OPTION_GATEWAY | If set, this routes external currencies |\n| 256 | OPTION_PBAAS | This is a PBaaS chain definition|\n| 512 | OPTION_GATEWAY_CONVERTER | This means that for a specific PBaaS gateway, this is the default converter and will publish prices |\n| 1024 | OPTION_GATEWAY_NAMECONTROLLER | When not set on a gateway, top level ID and currency registration happen on launch chain |\n| 2048 | OPTION_NFT_TOKEN | Single satoshi NFT token, tokenizes control over the root ID |## VerusID Namespace\nTo create a blockchain of a specific name, you need a VerusID of the same name. The controller of this VerusID is the only one who can create a blockchain of that name, and they can only do so once.## Examples of blockchain launches", "./raw_text_input_docs/define-pbaas.md"]]], [["User:: Hey, I've got some questions about launching a currency on Verus. Is it recommended to launch a currency on the Verus mainnet without testing it on the testnet first?", "AI Assistant:: No, it's highly recommended to test the currency on the testnet before launching it on the mainnet. This allows you to work out any kinks and ensure everything is functioning as intended before launching it on the mainnet. Testing on the testnet can save you a lot of trouble and potential losses in the long run.", "User:: That makes sense. I was also wondering, how do I launch a currency without paying the currency fee and initial contribution? Is there a way to bypass those?", "AI Assistant:: Unfortunately, no, you can't launch a currency without paying the currency fee and initial contribution. You need to have enough funds in the rootID for the currency fee (200.0002 VRSC) and the initial contribution. These fees are in place to ensure the integrity and security of the network, and they can't be bypassed.", "User:: Okay, got it. One more question: can I launch a currency using the `definecurrency` command alone?", "AI Assistant:: No, you can't launch a currency using the `definecurrency` command alone. After defining the currency, you need to take the HEX output from the `definecurrency` command and use it with the `sendrawtransaction` command to launch the currency. The `definecurrency` command only defines the currency, but it doesn't actually launch it on the network. You need to use both commands in sequence to successfully launch your currency."], "AI Assistant", "", "N/A", [["Is it recommended to launch a currency on the Verus mainnet without testing it on the testnet first?", "No, it's highly recommended to test the currency on the testnet before launching it on the mainnet.", "### **\"nativecurrencyid\"**\nUse this parameter for mapped ERC-20 tokens. The parameter includes the Ethereum contract address for the ERC-20. [Read more](/currencies/mapping-1:1-eth)\n\n::: warning Need help setting up a currency launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::\n\n## How to launch\nNow you know how to create a currency definition with all its options and parameters. Next up: how to actually use the definition to launch a currency.\n\nHere we use the command-line interface. If you want to use the built-in terminal from Verus Desktop, just replace ``./verus -chain=VRSCTEST`` with ``run``.\n\n::: tip Use Verus Testnet first! \ud83d\udc77\nBefore launching your currency or token on Verus (or any other PBaaS-chain), it is highly recommended to try it out on testnet first. \n:::\n\nLet's use this example definition to launch the currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\",\n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Influencer@\":100}]\n}'\n```\n\nEntering the above command into the command-line interface wallet gives a `HEX` value as output. Take that HEX and do the following command below. \u26a0\ufe0f IMPORTANT: make sure there are enough funds in the rootID for the currency fee (200.0002 VRSC) and the initial contribution (when in parameters).\n\n``` json\n./verus -chain=VRSCTEST sendrawtransaction \"HEX\"\n```\n\nAfter doing the command above the currency has started, the funds from the rootID are taken, and it takes a minimum of 20 blocks (or startblock) to actually launch it (and if all preconversion goals are met).\n\nDuring the preconversion time frame and after the launch you can lookup all kinds of information on the currency with the following command:\n\n``` json\n./verus -chain=VRSCTEST getcurrency \"MyBrand\"\n```", "./raw_text_input_docs/launch-currency.md"], ["How do I launch a currency without paying the currency fee and initial contribution?", "You can't launch a currency without paying the currency fee and initial contribution. You need to have enough funds in the rootID for the currency fee (200.0002 VRSC) and the initial contribution.", "### **\"nativecurrencyid\"**\nUse this parameter for mapped ERC-20 tokens. The parameter includes the Ethereum contract address for the ERC-20. [Read more](/currencies/mapping-1:1-eth)\n\n::: warning Need help setting up a currency launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::\n\n## How to launch\nNow you know how to create a currency definition with all its options and parameters. Next up: how to actually use the definition to launch a currency.\n\nHere we use the command-line interface. If you want to use the built-in terminal from Verus Desktop, just replace ``./verus -chain=VRSCTEST`` with ``run``.\n\n::: tip Use Verus Testnet first! \ud83d\udc77\nBefore launching your currency or token on Verus (or any other PBaaS-chain), it is highly recommended to try it out on testnet first. \n:::\n\nLet's use this example definition to launch the currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\",\n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Influencer@\":100}]\n}'\n```\n\nEntering the above command into the command-line interface wallet gives a `HEX` value as output. Take that HEX and do the following command below. \u26a0\ufe0f IMPORTANT: make sure there are enough funds in the rootID for the currency fee (200.0002 VRSC) and the initial contribution (when in parameters).\n\n``` json\n./verus -chain=VRSCTEST sendrawtransaction \"HEX\"\n```\n\nAfter doing the command above the currency has started, the funds from the rootID are taken, and it takes a minimum of 20 blocks (or startblock) to actually launch it (and if all preconversion goals are met).\n\nDuring the preconversion time frame and after the launch you can lookup all kinds of information on the currency with the following command:\n\n``` json\n./verus -chain=VRSCTEST getcurrency \"MyBrand\"\n```", "./raw_text_input_docs/launch-currency.md"], ["Can I launch a currency using the `definecurrency` command alone?", "No, you can't launch a currency using the `definecurrency` command alone. After defining the currency, you need to take the HEX output from the `definecurrency` command and use it with the `sendrawtransaction` command to launch the currency.", "### **\"nativecurrencyid\"**\nUse this parameter for mapped ERC-20 tokens. The parameter includes the Ethereum contract address for the ERC-20. [Read more](/currencies/mapping-1:1-eth)\n\n::: warning Need help setting up a currency launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::\n\n## How to launch\nNow you know how to create a currency definition with all its options and parameters. Next up: how to actually use the definition to launch a currency.\n\nHere we use the command-line interface. If you want to use the built-in terminal from Verus Desktop, just replace ``./verus -chain=VRSCTEST`` with ``run``.\n\n::: tip Use Verus Testnet first! \ud83d\udc77\nBefore launching your currency or token on Verus (or any other PBaaS-chain), it is highly recommended to try it out on testnet first. \n:::\n\nLet's use this example definition to launch the currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\",\n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Influencer@\":100}]\n}'\n```\n\nEntering the above command into the command-line interface wallet gives a `HEX` value as output. Take that HEX and do the following command below. \u26a0\ufe0f IMPORTANT: make sure there are enough funds in the rootID for the currency fee (200.0002 VRSC) and the initial contribution (when in parameters).\n\n``` json\n./verus -chain=VRSCTEST sendrawtransaction \"HEX\"\n```\n\nAfter doing the command above the currency has started, the funds from the rootID are taken, and it takes a minimum of 20 blocks (or startblock) to actually launch it (and if all preconversion goals are met).\n\nDuring the preconversion time frame and after the launch you can lookup all kinds of information on the currency with the following command:\n\n``` json\n./verus -chain=VRSCTEST getcurrency \"MyBrand\"\n```", "./raw_text_input_docs/launch-currency.md"]]], [["User:: Hey, I'm interested in mining with my Mac, which has Apple silicon. What's the best mining software for macOS with Apple silicon?", "AI Assistant:: Unfortunately, there isn't a mining software available for macOS with Apple silicon yet. The mining software available is mostly designedButtonTitles for other platforms. But don't worry, the Verus community is constantly working on new developments, so keep an eye out for future updates!", "User:: That's a bummer. What about mining with my phone? Can I start mining with my phone using CCminer?", "AI Assistant:: No, CCminer is not available for mobile devices. However, you can start mining with your phone using VerusMiner, which is available for download. VerusMiner is a great option for mobile mining, and it's specifically designed for Verus.", "User:: Cool, I'll check it out. One more question - what's the mining pool with the highest fee percentage?", "AI Assistant:: The Verus Pool has the highest fee percentage, which is 5%. However, it's worth noting that the fees are donated to the Verus foundation, which supports the development and growth of the Verus ecosystem. So, while the fee percentage might be higher, it's going towards a good cause!"], "AI Assistant", "", "N/A", [["What's the best mining software for macOS with Apple silicon?", "There is no mining software available for macOS with Apple silicon yet.", "| OS   |  Name | Version |   Download |\n| :------ | ------: | ------: | -----------: |\n| Windows | CCminer | v3.8.3a | [Download](https://github.com/monkins1010/ccminer/releases/tag/v3.8.3a) |\n| macOS (Apple silicon)| CCminer | -- | not (yet) available |\n| Linux  | CCminer | v3.8.3a | [Download](https://github.com/Oink70/ccminer-verus/releases/tag/v3.8.3a-CPU) |\n| ARM   | CCminer | v3.8.3a | [Download](https://github.com/Oink70/ccminer-verus/releases/tag/v3.8.3a-CPU) |\n\n### \ud83d\udcf1 Mobile\nStart mining with your phone.\n\n**VerusMiner** [Download here](https://pangz-lab.github.io/verusminer/)\n\n### GPU\n\nNo software yet.\n\n## Mining Pools\n\n| Pool Name                    | Fee % |\n| :---------------------------------------------- | ----: |\n| [Verus Pool](https://pool.verus.io/) <span style=\"color:green\">Fees donated to the Verus foundation</span>   |  <span style=\"color:green\"> <b>5%</b></span>|\n| [LuckPool](https://luckpool.net/verus/)     |  1% |\n| [ZergPool](https://zergpool.com/)        | 0.5% |\n| [CiscoTech](https://vrsc.ciscotech.dk/)     |  1% |\n| [LePool](http://vrsc.lepool.com.cn:8088/)    |  1% |\n| [Zhuaao](http://www.zhuaao.com:8880/)      |  1% |\n| [AlphatechIT](https://verus.alphatechit.co.uk/) | 0.2% |\n| [Wattpool](https://wattpool.net/ui/verus/stats) | 0.5% |\n| [011Data](https://verusna.011data.com/) | 0.5% |\n| [vipor.net](https://vipor.net) | 0.1% |\n| [cloudiko.io](https://cloudiko.io) | 0% |", "./raw_text_input_docs/start-mining.md"], ["Can I start mining with my phone using CCminer?", "No, CCminer is not available for mobile devices. However, you can start mining with your phone using VerusMiner, which is available for download.", "| OS   |  Name | Version |   Download |\n| :------ | ------: | ------: | -----------: |\n| Windows | CCminer | v3.8.3a | [Download](https://github.com/monkins1010/ccminer/releases/tag/v3.8.3a) |\n| macOS (Apple silicon)| CCminer | -- | not (yet) available |\n| Linux  | CCminer | v3.8.3a | [Download](https://github.com/Oink70/ccminer-verus/releases/tag/v3.8.3a-CPU) |\n| ARM   | CCminer | v3.8.3a | [Download](https://github.com/Oink70/ccminer-verus/releases/tag/v3.8.3a-CPU) |\n\n### \ud83d\udcf1 Mobile\nStart mining with your phone.\n\n**VerusMiner** [Download here](https://pangz-lab.github.io/verusminer/)\n\n### GPU\n\nNo software yet.\n\n## Mining Pools\n\n| Pool Name                    | Fee % |\n| :---------------------------------------------- | ----: |\n| [Verus Pool](https://pool.verus.io/) <span style=\"color:green\">Fees donated to the Verus foundation</span>   |  <span style=\"color:green\"> <b>5%</b></span>|\n| [LuckPool](https://luckpool.net/verus/)     |  1% |\n| [ZergPool](https://zergpool.com/)        | 0.5% |\n| [CiscoTech](https://vrsc.ciscotech.dk/)     |  1% |\n| [LePool](http://vrsc.lepool.com.cn:8088/)    |  1% |\n| [Zhuaao](http://www.zhuaao.com:8880/)      |  1% |\n| [AlphatechIT](https://verus.alphatechit.co.uk/) | 0.2% |\n| [Wattpool](https://wattpool.net/ui/verus/stats) | 0.5% |\n| [011Data](https://verusna.011data.com/) | 0.5% |\n| [vipor.net](https://vipor.net) | 0.1% |\n| [cloudiko.io](https://cloudiko.io) | 0% |", "./raw_text_input_docs/start-mining.md"], ["What's the mining pool with the highest fee percentage?", "The Verus Pool has the highest fee percentage, which is 5%. However, it's worth noting that the fees are donated to the Verus foundation.", "| OS   |  Name | Version |   Download |\n| :------ | ------: | ------: | -----------: |\n| Windows | CCminer | v3.8.3a | [Download](https://github.com/monkins1010/ccminer/releases/tag/v3.8.3a) |\n| macOS (Apple silicon)| CCminer | -- | not (yet) available |\n| Linux  | CCminer | v3.8.3a | [Download](https://github.com/Oink70/ccminer-verus/releases/tag/v3.8.3a-CPU) |\n| ARM   | CCminer | v3.8.3a | [Download](https://github.com/Oink70/ccminer-verus/releases/tag/v3.8.3a-CPU) |\n\n### \ud83d\udcf1 Mobile\nStart mining with your phone.\n\n**VerusMiner** [Download here](https://pangz-lab.github.io/verusminer/)\n\n### GPU\n\nNo software yet.\n\n## Mining Pools\n\n| Pool Name                    | Fee % |\n| :---------------------------------------------- | ----: |\n| [Verus Pool](https://pool.verus.io/) <span style=\"color:green\">Fees donated to the Verus foundation</span>   |  <span style=\"color:green\"> <b>5%</b></span>|\n| [LuckPool](https://luckpool.net/verus/)     |  1% |\n| [ZergPool](https://zergpool.com/)        | 0.5% |\n| [CiscoTech](https://vrsc.ciscotech.dk/)     |  1% |\n| [LePool](http://vrsc.lepool.com.cn:8088/)    |  1% |\n| [Zhuaao](http://www.zhuaao.com:8880/)      |  1% |\n| [AlphatechIT](https://verus.alphatechit.co.uk/) | 0.2% |\n| [Wattpool](https://wattpool.net/ui/verus/stats) | 0.5% |\n| [011Data](https://verusna.011data.com/) | 0.5% |\n| [vipor.net](https://vipor.net) | 0.1% |\n| [cloudiko.io](https://cloudiko.io) | 0% |", "./raw_text_input_docs/start-mining.md"]]], [["User:: Hey, I have some questions about VerusIDs and referrals. What is the default number of referral levels for subID registration fees?", "AI Assistant:: The default number of referral levels for subID registration fees is 3.", "User:: That's good to know. How do you disable referrals when registering subIDs?", "AI Assistant:: To disable referrals when registering subIDs, you would not add the `\"options\":8` parameter to the currency definition. This parameter is used to enable referrals, so omitting it would disable referrals.", "User:: I was looking at the InternetCommunity currency definition, and I noticed that there is no `idregistrationfees` parameter. Can you explain why that is?", "AI Assistant:: Actually, there is an `idregistrationfees` parameter in the InternetCommunity currency definition, and it is set to 1 InternetCommunity. This means that the base fee to register a subID is 1 InternetCommunity."], "AI Assistant", "", "N/A", [["What is the default number of referral levels for subID registration fees?", "The default number of referral levels for subID registration fees is 3.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"InternetCommunity\", \n \"options\":41, \n \"currencies\":[\"vrsctest\"],\n \"initialcontributions\":[25],\n \"initialsupply\":5000, \n \"idregistrationfees\":1\n}'\n```\n\u261d\ufe0f The is a basket currency called InternetCommunity with subID referrals enabled. The launcher of the currency wanted to make initial contributions to its reserves. There needs to be 225.0002 VRSCTEST in the rootID at the moment of broadcasting the currency to the network (currency launch fee + initial contributions + txfees). The initial supply of 5000 went to the rootID (if there weren\u2019t any more preconverters). The base fee to register a subID is 1 InternetCommunity.### **\"idreferrallevels\"**\n![image-referralsID](/images/referralsID2.png)\nUse this parameter to change the levels of referrals used when registering subIDs. The image above shows the division and distribution of subID registration fees, depending on the chosen level. Minimum is 0 levels, maximum is 5. The default is `3` levels.To enable referrals, add `\"options\":8` to the currency definition.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"PremiumAccess\", \n \"options\":40, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":2000}],\n \"idregistrationfees\":300,\n \"idreferrallevels\":1\n}'\n```\n\u261d\ufe0f This is a centralized simple token currency called PremiumAccess. The owner of the rootID can mint and burn tokens at will. It has referrals enabled. When the currency is launched 2000 PremiumAccess go to the Klaus@ VerusID. It costs a 300 PremiumAccess fee to register a subID. These fees go to the rootID because it is a centralized token currency. When someone registers a subID using a referral they pay 200 of which 100 goes to the referred subID, and 100 to the rootID.", "./raw_text_input_docs/launch-currency.md"], ["How do you disable referrals when registering subIDs?", "To disable referrals when registering subIDs, you would not add the `\"options\":8` parameter to the currency definition. This parameter is used to enable referrals, so omitting it would disable referrals.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"InternetCommunity\", \n \"options\":41, \n \"currencies\":[\"vrsctest\"],\n \"initialcontributions\":[25],\n \"initialsupply\":5000, \n \"idregistrationfees\":1\n}'\n```\n\u261d\ufe0f The is a basket currency called InternetCommunity with subID referrals enabled. The launcher of the currency wanted to make initial contributions to its reserves. There needs to be 225.0002 VRSCTEST in the rootID at the moment of broadcasting the currency to the network (currency launch fee + initial contributions + txfees). The initial supply of 5000 went to the rootID (if there weren\u2019t any more preconverters). The base fee to register a subID is 1 InternetCommunity.### **\"idreferrallevels\"**\n![image-referralsID](/images/referralsID2.png)\nUse this parameter to change the levels of referrals used when registering subIDs. The image above shows the division and distribution of subID registration fees, depending on the chosen level. Minimum is 0 levels, maximum is 5. The default is `3` levels.To enable referrals, add `\"options\":8` to the currency definition.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"PremiumAccess\", \n \"options\":40, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":2000}],\n \"idregistrationfees\":300,\n \"idreferrallevels\":1\n}'\n```\n\u261d\ufe0f This is a centralized simple token currency called PremiumAccess. The owner of the rootID can mint and burn tokens at will. It has referrals enabled. When the currency is launched 2000 PremiumAccess go to the Klaus@ VerusID. It costs a 300 PremiumAccess fee to register a subID. These fees go to the rootID because it is a centralized token currency. When someone registers a subID using a referral they pay 200 of which 100 goes to the referred subID, and 100 to the rootID.", "./raw_text_input_docs/launch-currency.md"], ["Can you explain why there is no `idregistrationfees` parameter in the InternetCommunity currency definition?", "Actually, there is an `idregistrationfees` parameter in the InternetCommunity currency definition, and it is set to 1 InternetCommunity. This means that the base fee to register a subID is 1 InternetCommunity.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"InternetCommunity\", \n \"options\":41, \n \"currencies\":[\"vrsctest\"],\n \"initialcontributions\":[25],\n \"initialsupply\":5000, \n \"idregistrationfees\":1\n}'\n```\n\u261d\ufe0f The is a basket currency called InternetCommunity with subID referrals enabled. The launcher of the currency wanted to make initial contributions to its reserves. There needs to be 225.0002 VRSCTEST in the rootID at the moment of broadcasting the currency to the network (currency launch fee + initial contributions + txfees). The initial supply of 5000 went to the rootID (if there weren\u2019t any more preconverters). The base fee to register a subID is 1 InternetCommunity.### **\"idreferrallevels\"**\n![image-referralsID](/images/referralsID2.png)\nUse this parameter to change the levels of referrals used when registering subIDs. The image above shows the division and distribution of subID registration fees, depending on the chosen level. Minimum is 0 levels, maximum is 5. The default is `3` levels.To enable referrals, add `\"options\":8` to the currency definition.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"PremiumAccess\", \n \"options\":40, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":2000}],\n \"idregistrationfees\":300,\n \"idreferrallevels\":1\n}'\n```\n\u261d\ufe0f This is a centralized simple token currency called PremiumAccess. The owner of the rootID can mint and burn tokens at will. It has referrals enabled. When the currency is launched 2000 PremiumAccess go to the Klaus@ VerusID. It costs a 300 PremiumAccess fee to register a subID. These fees go to the rootID because it is a centralized token currency. When someone registers a subID using a referral they pay 200 of which 100 goes to the referred subID, and 100 to the rootID.", "./raw_text_input_docs/launch-currency.md"]]], [["User:: Hey, I've been looking into Verus and I'm curious about the different types of currencies. What are the advantages of basket currencies over simple token currencies on Verus?", "AI Assistant:: Basket currencies are more exciting than simple token currencies because they offer additional features that make them more valuable. Simple token currencies lack these features, making basket currencies more desirable. Would you like me to elaborate on what specific features make basket currencies more desirable?", "User:: That helps clarify things. I also had a question about simple token currencies on Verus. Are they dynamic in terms of supply?", "AI Assistant:: No, decentralized simple token currencies on Verus have a static supply. It's only the centralized version of these currencies where the owner of the rootID can mint tokens into existence, and anyone can burn them. Does that make sense?", "User:: I've also been looking into the Verus-Ethereum Bridge. Is it a custodial bridge that holds users' tokens and currencies?", "AI Assistant:: No, the Verus-Ethereum Bridge is a non-custodial bridge. This means that all tokens and currencies flowing over the bridge are never in anyone's custody, and are proven and verified by consensus rules. You always maintain control over your assets. Do you have any other questions about the bridge?", "User:: That's really reassuring. One last question: Can only Verus currencies be exported to Ethereum as ERC-20 tokens?", "AI Assistant:: No, any currency and token, on Verus or any other PBaaS-blockchain, can be exported to Ethereum as an ERC-20 token. Additionally, any already existing ERC-20 token can be mapped one-to-one as a Verus currency. So, there's a lot of flexibility when it comes to moving assets between Verus and Ethereum."], "AI Assistant", "", "N/A", [["What are the advantages of basket currencies over simple token currencies on Verus?", "Basket currencies are more exciting than simple token currencies because they offer additional features that make them more valuable. Simple token currencies lack these features, making basket currencies more desirable.", "## Simple token currencies\nSimple token currencies and are just currencies without any reserves. They are not as exciting as the basket currencies, yet still offer much value. With all the parameters that can be added, subIDs created and decentralized crowdfund mechanisms, these currencies can support a lot of use cases that are difficult to do with alternative protocols.The supply of this type of currency is static when it\u2019s a decentralized version. When it\u2019s a centralized version, the owner of the rootID can mint tokens into existence, and anyone can burn them.This option is also used to create currencies that are mapped to Ethereum ERC-20s. Which means you can send those ERC-20s over to Verus, or from Verus to the ERC-20. This is made possible with the non-custodial Verus-Ethereum Bridge. You can read more about it here.And of course, a simple token currency can be one of the reserves in a basket currency.## Ethereum ERC-20 \nThe Verus-Ethereum Bridge makes it possible for currencies and tokens to be send over to Ethereum, and back to Verus. It is a true non-custodial bridge. All tokens and currencies flowing over the bridge are never in anyone\u2019s custody, and are proven and verified by consensus rules. [Everything on the Verus-Ethereum Bridge here.](/eth-bridge/)Any currency and token, on Verus or any other PBaaS-blockchain, can be exported to Ethereum as an ERC-20. They can then be used in the Ethereum ecosystem.Also, any already existing ERC-20 token can be mapped one-to-one as a Verus currency. Meaning any ERC-20 token can live on the Verus blockchain (or any other PBaaS-chain) and take advantage of all the L1 features.", "./raw_text_input_docs/README_currencies.md"], ["Are decentralized simple token currencies on Verus dynamic in terms of supply?", "No, decentralized simple token currencies on Verus have a static supply. It's only the centralized version of these currencies where the owner of the rootID can mint tokens into existence, and anyone can burn them.", "## Simple token currencies\nSimple token currencies and are just currencies without any reserves. They are not as exciting as the basket currencies, yet still offer much value. With all the parameters that can be added, subIDs created and decentralized crowdfund mechanisms, these currencies can support a lot of use cases that are difficult to do with alternative protocols.The supply of this type of currency is static when it\u2019s a decentralized version. When it\u2019s a centralized version, the owner of the rootID can mint tokens into existence, and anyone can burn them.This option is also used to create currencies that are mapped to Ethereum ERC-20s. Which means you can send those ERC-20s over to Verus, or from Verus to the ERC-20. This is made possible with the non-custodial Verus-Ethereum Bridge. You can read more about it here.And of course, a simple token currency can be one of the reserves in a basket currency.## Ethereum ERC-20 \nThe Verus-Ethereum Bridge makes it possible for currencies and tokens to be send over to Ethereum, and back to Verus. It is a true non-custodial bridge. All tokens and currencies flowing over the bridge are never in anyone\u2019s custody, and are proven and verified by consensus rules. [Everything on the Verus-Ethereum Bridge here.](/eth-bridge/)Any currency and token, on Verus or any other PBaaS-blockchain, can be exported to Ethereum as an ERC-20. They can then be used in the Ethereum ecosystem.Also, any already existing ERC-20 token can be mapped one-to-one as a Verus currency. Meaning any ERC-20 token can live on the Verus blockchain (or any other PBaaS-chain) and take advantage of all the L1 features.", "./raw_text_input_docs/README_currencies.md"], ["Is the Verus-Ethereum Bridge a custodial bridge that holds users' tokens and currencies?", "No, the Verus-Ethereum Bridge is a non-custodial bridge. This means that all tokens and currencies flowing over the bridge are never in anyone's custody, and are proven and verified by consensus rules.", "## Simple token currencies\nSimple token currencies and are just currencies without any reserves. They are not as exciting as the basket currencies, yet still offer much value. With all the parameters that can be added, subIDs created and decentralized crowdfund mechanisms, these currencies can support a lot of use cases that are difficult to do with alternative protocols.The supply of this type of currency is static when it\u2019s a decentralized version. When it\u2019s a centralized version, the owner of the rootID can mint tokens into existence, and anyone can burn them.This option is also used to create currencies that are mapped to Ethereum ERC-20s. Which means you can send those ERC-20s over to Verus, or from Verus to the ERC-20. This is made possible with the non-custodial Verus-Ethereum Bridge. You can read more about it here.And of course, a simple token currency can be one of the reserves in a basket currency.## Ethereum ERC-20 \nThe Verus-Ethereum Bridge makes it possible for currencies and tokens to be send over to Ethereum, and back to Verus. It is a true non-custodial bridge. All tokens and currencies flowing over the bridge are never in anyone\u2019s custody, and are proven and verified by consensus rules. [Everything on the Verus-Ethereum Bridge here.](/eth-bridge/)Any currency and token, on Verus or any other PBaaS-blockchain, can be exported to Ethereum as an ERC-20. They can then be used in the Ethereum ecosystem.Also, any already existing ERC-20 token can be mapped one-to-one as a Verus currency. Meaning any ERC-20 token can live on the Verus blockchain (or any other PBaaS-chain) and take advantage of all the L1 features.", "./raw_text_input_docs/README_currencies.md"], ["Can only Verus currencies be exported to Ethereum as ERC-20 tokens?", "No, any currency and token, on Verus or any other PBaaS-blockchain, can be exported to Ethereum as an ERC-20 token. Additionally, any already existing ERC-20 token can be mapped one-to-one as a Verus currency.", "## Simple token currencies\nSimple token currencies and are just currencies without any reserves. They are not as exciting as the basket currencies, yet still offer much value. With all the parameters that can be added, subIDs created and decentralized crowdfund mechanisms, these currencies can support a lot of use cases that are difficult to do with alternative protocols.The supply of this type of currency is static when it\u2019s a decentralized version. When it\u2019s a centralized version, the owner of the rootID can mint tokens into existence, and anyone can burn them.This option is also used to create currencies that are mapped to Ethereum ERC-20s. Which means you can send those ERC-20s over to Verus, or from Verus to the ERC-20. This is made possible with the non-custodial Verus-Ethereum Bridge. You can read more about it here.And of course, a simple token currency can be one of the reserves in a basket currency.## Ethereum ERC-20 \nThe Verus-Ethereum Bridge makes it possible for currencies and tokens to be send over to Ethereum, and back to Verus. It is a true non-custodial bridge. All tokens and currencies flowing over the bridge are never in anyone\u2019s custody, and are proven and verified by consensus rules. [Everything on the Verus-Ethereum Bridge here.](/eth-bridge/)Any currency and token, on Verus or any other PBaaS-blockchain, can be exported to Ethereum as an ERC-20. They can then be used in the Ethereum ecosystem.Also, any already existing ERC-20 token can be mapped one-to-one as a Verus currency. Meaning any ERC-20 token can live on the Verus blockchain (or any other PBaaS-chain) and take advantage of all the L1 features.", "./raw_text_input_docs/README_currencies.md"]]], [["User:: Hey, I have some questions about exporting currencies from Verus to Ethereum as ERC-20 tokens. Do I need to create a new Ethereum wallet and fund it with Ether to do this?", "AI Assistant:: No, you don't need to create a new Ethereum wallet or fund it with Ether to export a currency from Verus to Ethereum as an ERC-20. The command to export a currency to Ethereum as an ERC-20 uses a Verus command-line interface, and the fees for the export come from the from- and change-address specified in the command (in this case, `myVerusID@`). The `address` field in the command can be any ETH-address, but it's not important what it is. You can use an existing Ethereum wallet or create a new one, but you don't need to fund it with Ether specifically for this process.", "User:: That's good to know. Can I export a currency from Verus to Ethereum as an ERC-20 without paying any fees?", "AI Assistant:: Unfortunately, no, you can't export a currency from Verus to Ethereum as an ERC-20 without paying any fees. The command to export a currency to Ethereum as an ERC-20 requires you to have enough funds to pay for the export, and the fee to pay for the export comes from the from- and change-address specified in the command (in this case, `myVerusID@`). There's no way to avoid paying fees for this process. However, the fees are necessary to ensure the security and integrity of the transaction."], "AI Assistant", "", "N/A", [["To export a currency from Verus to Ethereum as an ERC-20, do I need to create a new Ethereum wallet and fund it with Ether?", "No, you don't need to create a new Ethereum wallet or fund it with Ether to export a currency from Verus to Ethereum as an ERC-20. The command to export a currency to Ethereum as an ERC-20 uses a Verus command-line interface, and the fees for the export come from the from- and change-address specified in the command (in this case, `myVerusID@`). The `address` field in the command can be any ETH-address, but it's not important what it is.", "# Export currency to Ethereum (as ERC-20)\n\nAny currency on Verus can be exported to Ethereum as an ERC-20. The currency can then be used in the complete Ethereum ecosystem, and on the Verus network. Sending to and from Verus and Ethereum couldn't be easier. [More on the Verus-Ethereum Bridge.](/eth-bridge/)\n\n::: tip \u2194\ufe0f Verus-Ethereum Bridge \ud83d\udc68\u200d\ud83d\udd27 For Testnet!\n[\ud83d\udc49 Access the Verus-Ethereum Testnet Bridge](https://ethbridge.verustest.net/) (\u26a0\ufe0f Goerli testnet)\n:::\n\n::: tip \u2194\ufe0f Verus-Ethereum Bridge \u2705 For Mainnet!\n[\ud83d\udc49 Access the Verus-Ethereum Mainnet Bridge](https://eth.verusbridge.io)\n:::\n\n### Exporting the currency\nNow, let\u2019s export a currency from Verus to Ethereum as an ERC-20 over the non-custodial bridge. We must have enough funds to pay for the export.\n\nThe command to export a currency to Ethereum as an ERC-20:\n\n``` json\n./verus -chain=VRSCTEST sendcurrency \"myVerusID@\" '[{\n  \"address\":\"0x85a7dE2278E52327471e174AeeB280cdFdC6A68a\", \n  \"currency\":\"myCurrency\", \n  \"amount\":0, \n  \"exportto\":\"veth\", \n  \"exportcurrency\":true, \n  \"feecurrency\":\"veth\"\n}]'\n```\n\nLet's break the command down with what you can change.\n\n**``myVerusID@``** is the from- and change-address. Can be a VerusID, R-address or i-address. The fee to pay for the export comes from here, and if you paid too much fees the rest will be returned here.\n\n**``address``** You can fill in any ETH-address here, it is actually not important what is here.\n\n**``currency``** is the name of the currency you wish to export as an ERC-20. E.g. `MyCurrency`, `MyCurrency.vETH`.\n\n### Wait for notarization\n\nAfter the bridge has been notarized to the blockheight where you have exported the currency, you can choose it from the token dropdown on the [Bridge website mainnet](https://eth.verusbridge.io) or [Bridge website Goerli testnet](https://ethbridge.verustest.net/)", "./raw_text_input_docs/export-to-eth.md"], ["Can I export a currency from Verus to Ethereum as an ERC-20 without paying any fees?", "No, you can't export a currency from Verus to Ethereum as an ERC-20 without paying any fees. The command to export a currency to Ethereum as an ERC-20 requires you to have enough funds to pay for the export, and the fee to pay for the export comes from the from- and change-address specified in the command (in this case, `myVerusID@`).", "# Export currency to Ethereum (as ERC-20)\n\nAny currency on Verus can be exported to Ethereum as an ERC-20. The currency can then be used in the complete Ethereum ecosystem, and on the Verus network. Sending to and from Verus and Ethereum couldn't be easier. [More on the Verus-Ethereum Bridge.](/eth-bridge/)\n\n::: tip \u2194\ufe0f Verus-Ethereum Bridge \ud83d\udc68\u200d\ud83d\udd27 For Testnet!\n[\ud83d\udc49 Access the Verus-Ethereum Testnet Bridge](https://ethbridge.verustest.net/) (\u26a0\ufe0f Goerli testnet)\n:::\n\n::: tip \u2194\ufe0f Verus-Ethereum Bridge \u2705 For Mainnet!\n[\ud83d\udc49 Access the Verus-Ethereum Mainnet Bridge](https://eth.verusbridge.io)\n:::\n\n### Exporting the currency\nNow, let\u2019s export a currency from Verus to Ethereum as an ERC-20 over the non-custodial bridge. We must have enough funds to pay for the export.\n\nThe command to export a currency to Ethereum as an ERC-20:\n\n``` json\n./verus -chain=VRSCTEST sendcurrency \"myVerusID@\" '[{\n  \"address\":\"0x85a7dE2278E52327471e174AeeB280cdFdC6A68a\", \n  \"currency\":\"myCurrency\", \n  \"amount\":0, \n  \"exportto\":\"veth\", \n  \"exportcurrency\":true, \n  \"feecurrency\":\"veth\"\n}]'\n```\n\nLet's break the command down with what you can change.\n\n**``myVerusID@``** is the from- and change-address. Can be a VerusID, R-address or i-address. The fee to pay for the export comes from here, and if you paid too much fees the rest will be returned here.\n\n**``address``** You can fill in any ETH-address here, it is actually not important what is here.\n\n**``currency``** is the name of the currency you wish to export as an ERC-20. E.g. `MyCurrency`, `MyCurrency.vETH`.\n\n### Wait for notarization\n\nAfter the bridge has been notarized to the blockheight where you have exported the currency, you can choose it from the token dropdown on the [Bridge website mainnet](https://eth.verusbridge.io) or [Bridge website Goerli testnet](https://ethbridge.verustest.net/)", "./raw_text_input_docs/export-to-eth.md"]]], [["User:: Hi, I'm trying to understand more about Verus DeFi. I've heard that the conversion fees are quite high, but how do they actually benefit the users of the platform?", "AI Assistant:: I think there might be some misconception there! The conversion fees in Verus DeFi are actually incredibly low, not high. When converting to and from a basket currency, the fee is 0.025%, and when converting from reserve to reserve currency, the fee is 0.05%. These fees go directly to the worldwide miners and stakers of the protocol, and/or they are accrued into the reserves making the basket currency worth more. So, the fees are actually quite beneficial to the users and the network as a whole!", "User:: That's good to know. I've also been comparing Verus DeFi to other DeFi platforms, and I was wondering if there's an advantage to using EVM-like account-based systems over Verus DeFi.", "AI Assistant:: Actually, there is no advantage of EVM-like account-based systems over Verus DeFi. In fact, Verus DeFi is fair, cheap, and has no rent-seekers, whereas EVM-like account-based systems have problems that Verus DeFi does not. So, Verus DeFi is actually a more desirable option in many ways!", "User:: One last question I had was about the reserves for basket currencies on the Verus network. Can only a limited set of currencies be used as reserves?", "AI Assistant:: No, not at all! Every currency and token on the Verus network, including mapped ERC-20s, can be used as reserves for basket currencies. This provides an enormous amount of opportunities for value creation, and it's one of the things that makes Verus DeFi so powerful and flexible."], "AI Assistant", "", "N/A", [["How do the high conversion fees in Verus DeFi benefit the users of the platform?", "The conversion fees in Verus DeFi are actually incredibly low, not high. When converting to and from a basket currency, the fee is 0.025%, and when converting from reserve to reserve currency, the fee is 0.05%. These fees go directly to the worldwide miners and stakers of the protocol, and/or they are accrued into the reserves making the basket currency worth more.", "When a centralized version of this currency is created, the owner of the rootID can mint currencies into existence, while automatically lowering the reserve ratio. Or they can burn currencies and automatically raise the reserve ratio. Anyone can also just burn the currency at will without raising the reserve ratio.The conversion fees are incredibly low, 0.025% when converting to and from a basket currency, and 0.05% when converting from reserve to reserve currency. These fees go directly to the worldwide miners and stakers of the protocol, and/or they are accrued into the reserves making the basket currency worth more.| Conversion type | Fee | Fee goes to |\n| :-----| :------ | :-------- |\n| Basket currency \u2194\ufe0f reserve | 0.025% | 0.0125% added to reserves of the basket currency, 0.0125% to the block reward for miners and stakers | \n| Reserve \u2194\ufe0f reserve | 0.05% | 0.025% added to reserves of the basket currency, 0.025% to the block reward for miners and stakers |Because all currency conversions are solved simultaneously inside a block, giving all participants the same price, the protocol is MEV-free (no front-running, back-running, sandwich attacks etc.). The protocol doesn\u2019t have any of the problems EVM-like account-based systems have. Verus DeFi is fair, cheap and has no rent-seekers.Every(!) currency and token on the Verus network (also mapped ERC-20s!), can be used as reserves for basket currencies. As you might start to understand now \u2014 basket currencies are unique currencies that can not be found anywhere else and offer an enormous amount of opportunities for value creation.", "./raw_text_input_docs/README_currencies.md"], ["What is the main advantage of EVM-like account-based systems over Verus DeFi?", "There is no advantage of EVM-like account-based systems over Verus DeFi. In fact, Verus DeFi is fair, cheap, and has no rent-seekers, whereas EVM-like account-based systems have problems that Verus DeFi does not.", "When a centralized version of this currency is created, the owner of the rootID can mint currencies into existence, while automatically lowering the reserve ratio. Or they can burn currencies and automatically raise the reserve ratio. Anyone can also just burn the currency at will without raising the reserve ratio.The conversion fees are incredibly low, 0.025% when converting to and from a basket currency, and 0.05% when converting from reserve to reserve currency. These fees go directly to the worldwide miners and stakers of the protocol, and/or they are accrued into the reserves making the basket currency worth more.| Conversion type | Fee | Fee goes to |\n| :-----| :------ | :-------- |\n| Basket currency \u2194\ufe0f reserve | 0.025% | 0.0125% added to reserves of the basket currency, 0.0125% to the block reward for miners and stakers | \n| Reserve \u2194\ufe0f reserve | 0.05% | 0.025% added to reserves of the basket currency, 0.025% to the block reward for miners and stakers |Because all currency conversions are solved simultaneously inside a block, giving all participants the same price, the protocol is MEV-free (no front-running, back-running, sandwich attacks etc.). The protocol doesn\u2019t have any of the problems EVM-like account-based systems have. Verus DeFi is fair, cheap and has no rent-seekers.Every(!) currency and token on the Verus network (also mapped ERC-20s!), can be used as reserves for basket currencies. As you might start to understand now \u2014 basket currencies are unique currencies that can not be found anywhere else and offer an enormous amount of opportunities for value creation.", "./raw_text_input_docs/README_currencies.md"], ["Can only a limited set of currencies be used as reserves for basket currencies on the Verus network?", "No, every currency and token on the Verus network, including mapped ERC-20s, can be used as reserves for basket currencies. This provides an enormous amount of opportunities for value creation.", "When a centralized version of this currency is created, the owner of the rootID can mint currencies into existence, while automatically lowering the reserve ratio. Or they can burn currencies and automatically raise the reserve ratio. Anyone can also just burn the currency at will without raising the reserve ratio.The conversion fees are incredibly low, 0.025% when converting to and from a basket currency, and 0.05% when converting from reserve to reserve currency. These fees go directly to the worldwide miners and stakers of the protocol, and/or they are accrued into the reserves making the basket currency worth more.| Conversion type | Fee | Fee goes to |\n| :-----| :------ | :-------- |\n| Basket currency \u2194\ufe0f reserve | 0.025% | 0.0125% added to reserves of the basket currency, 0.0125% to the block reward for miners and stakers | \n| Reserve \u2194\ufe0f reserve | 0.05% | 0.025% added to reserves of the basket currency, 0.025% to the block reward for miners and stakers |Because all currency conversions are solved simultaneously inside a block, giving all participants the same price, the protocol is MEV-free (no front-running, back-running, sandwich attacks etc.). The protocol doesn\u2019t have any of the problems EVM-like account-based systems have. Verus DeFi is fair, cheap and has no rent-seekers.Every(!) currency and token on the Verus network (also mapped ERC-20s!), can be used as reserves for basket currencies. As you might start to understand now \u2014 basket currencies are unique currencies that can not be found anywhere else and offer an enormous amount of opportunities for value creation.", "./raw_text_input_docs/README_currencies.md"]]], [["User:: I've got another question about VerusIDs. Are they only defined on the Verus network and not on any other blockchain or system?", "AI Assistant:: No, VerusIDs are not limited to being defined only on the Verus network. They can also exist on independent PBaaS (Public Blockchains as a Service) blockchains, which are spawned from and registered on the Verus blockchain network, as well as on fully external systems that may have been created without any registration on the Verus network initially. So, VerusIDs can be used in a variety of contexts beyond just the Verus network.", "User:: That's interesting. I was wondering, do VerusIDs require compatibility of their internal structure across different systems for recognition on the Verus blockchain network?", "AI Assistant:: No, the VDXF does not require compatibility of the internal structure of IDs across different systems. It only defines compatibility requirements for the naming systems and how those names translate into recognizable IDs on the Verus network. So, the internal structure of the IDs can vary, but the naming system and translation to IDs on the Verus network need to be compatible.", "User:: Got it. One more question. Is a VDXF object a human-readable format that can only be interpreted by systems specifically designed for it?", "AI Assistant:: No, a VDXF object is a serialized byte array that can be written to or interpreted by any system, given the appropriate libraries for handling its format. This means that it is a machine-readable format, not a human-readable format, and can be used by any system that has the necessary libraries to deserialize the byte stream and reconstruct the original structured data."], "AI Assistant", "", "N/A", [["Are VerusIDs only defined on the Verus network and not on any other blockchain or system?", "No, VerusIDs are not limited to being defined only on the Verus network. They can also exist on independent PBaaS (Public Blockchains as a Service) blockchains, which are spawned from and registered on the Verus blockchain network, as well as on fully external systems that may have been created without any registration on the Verus network initially.", "Generally, one may think of two types of VerusIDs, those defined on the Verus network or on independent PBaaS (Public Blockchains as a Service) blockchains spawned originally from and registered on the Verus blockchain network, or VerusIDs, which may also exist on fully external systems that may have been created without any registration on the Verus network initially. In order for an externally created VerusID to be recognizable on the Verus blockchain network or by applications using the VDXF that are compatible with the Verus blockchain network that external system must provide a recognized bridge to the Verus blockchain.First, it is important to understand the requirements of registered VerusID identity names, which will also inform how externally generated VerusIDs are recognized as well. For the purposes of the VDXF, we do not require compatibility of the internal structure of IDs across different systems, and only define compatibility requirements of the naming systems and how those names translate into recognisable IDs on the Verus network.## ImplementationA VDXF object is fundamentally a serialized byte array that can be written to or interpreted by any system, given the appropriate libraries for handling its format. The serialization process transforms structured data into a byte stream, while deserialization reverses this process, reconstructing the original structured data from the byte stream.### Key ComponentsThe VDXF object comprises several key components encoded into bytes:", "./raw_text_input_docs/README_vdxf.md"], ["Do VerusIDs require compatibility of their internal structure across different systems for recognition on the Verus blockchain network?", "No, the VDXF does not require compatibility of the internal structure of IDs across different systems. It only defines compatibility requirements for the naming systems and how those names translate into recognizable IDs on the Verus network.", "Generally, one may think of two types of VerusIDs, those defined on the Verus network or on independent PBaaS (Public Blockchains as a Service) blockchains spawned originally from and registered on the Verus blockchain network, or VerusIDs, which may also exist on fully external systems that may have been created without any registration on the Verus network initially. In order for an externally created VerusID to be recognizable on the Verus blockchain network or by applications using the VDXF that are compatible with the Verus blockchain network that external system must provide a recognized bridge to the Verus blockchain.First, it is important to understand the requirements of registered VerusID identity names, which will also inform how externally generated VerusIDs are recognized as well. For the purposes of the VDXF, we do not require compatibility of the internal structure of IDs across different systems, and only define compatibility requirements of the naming systems and how those names translate into recognisable IDs on the Verus network.## ImplementationA VDXF object is fundamentally a serialized byte array that can be written to or interpreted by any system, given the appropriate libraries for handling its format. The serialization process transforms structured data into a byte stream, while deserialization reverses this process, reconstructing the original structured data from the byte stream.### Key ComponentsThe VDXF object comprises several key components encoded into bytes:", "./raw_text_input_docs/README_vdxf.md"], ["Is a VDXF object a human-readable format that can only be interpreted by systems specifically designed for it?", "No, a VDXF object is a serialized byte array that can be written to or interpreted by any system, given the appropriate libraries for handling its format. This means that it is a machine-readable format, not a human-readable format, and can be used by any system that has the necessary libraries to deserialize the byte stream and reconstruct the original structured data.", "Generally, one may think of two types of VerusIDs, those defined on the Verus network or on independent PBaaS (Public Blockchains as a Service) blockchains spawned originally from and registered on the Verus blockchain network, or VerusIDs, which may also exist on fully external systems that may have been created without any registration on the Verus network initially. In order for an externally created VerusID to be recognizable on the Verus blockchain network or by applications using the VDXF that are compatible with the Verus blockchain network that external system must provide a recognized bridge to the Verus blockchain.First, it is important to understand the requirements of registered VerusID identity names, which will also inform how externally generated VerusIDs are recognized as well. For the purposes of the VDXF, we do not require compatibility of the internal structure of IDs across different systems, and only define compatibility requirements of the naming systems and how those names translate into recognisable IDs on the Verus network.## ImplementationA VDXF object is fundamentally a serialized byte array that can be written to or interpreted by any system, given the appropriate libraries for handling its format. The serialization process transforms structured data into a byte stream, while deserialization reverses this process, reconstructing the original structured data from the byte stream.### Key ComponentsThe VDXF object comprises several key components encoded into bytes:", "./raw_text_input_docs/README_vdxf.md"]]], [["User:: I've got a question about VerusPay. How does it handle invoice management and processing?", "AI Assistant:: Actually, VerusPay is not a centralized payment processor. It's a decentralized blockchain payment platform within the Verus ecosystem, designed to facilitate the creation, management, and processing of invoices utilizing blockchain technology. It standardizes the format for invoices, ensuring interoperability, security, and ease of use across different blockchain systems. So, it's not a centralized processor, but rather a decentralized platform that enables secure and efficient invoice management and processing.", "User:: That's interesting. I thought VerusPay invoices were only for transactions within the Verus network. Is that true?", "AI Assistant:: No, that's not correct. VerusPay invoices can be used for transactions not only within the Verus network but also across different blockchain ecosystems. The VerusPay Invoice specification supports handling conversions and accepting payments from various PBaaS blockchains. So, VerusPay invoices are actually quite versatile and can be used across multiple blockchain systems.", "User:: I've been trying to integrate VerusPay into my application, but I couldn't find any official resources or libraries to help me do so. Is there really no official library or resource available for integrating VerusPay?", "AI Assistant:: I'm happy to help you with that! That's not true. There is an official helper library available for integrating VerusPay into applications or services: the verusid-ts-client helper library, which can be found on GitHub. This library provides the necessary tools and resources for developers to utilize VerusPay in their own projects. You should be able to find everything you need to integrate VerusPay into your application there."], "AI Assistant", "", "N/A", [["How does VerusPay, a centralized payment processor, handle invoice management and processing?", "VerusPay is not a centralized payment processor. It's a decentralized blockchain payment platform within the Verus ecosystem, designed to facilitate the creation, management, and processing of invoices utilizing blockchain technology. It standardizes the format for invoices, ensuring interoperability, security, and ease of use across different blockchain systems.", "# VerusPay\n\nVerusPay represents a sophisticated blockchain payment platform within the Verus ecosystem, designed to facilitate the creation, management, and processing of invoices utilizing blockchain technology. Through the introduction of the VerusPay Invoice specification in VerusPay v3, it standardizes the format for invoices, ensuring interoperability, security, and ease of use across different blockchain systems. This specification enables users to include detailed transaction information such as payment amounts, destinations, and requested currencies, as well as to handle conversions and accept payments from various [PBaaS](/blockchains/) blockchains. Notably, it supports packaging these invoices into deeplinks and QR codes, making them easily accessible and usable within the Verus Mobile wallet and potentially other applications. This functionality opens up a wide array of possibilities for merchants, developers, and users within the Verus network and beyond, offering a seamless payment experience across different blockchain ecosystems.\n\n## Usage\n\nTo use VerusPay in your own application or service, refer to the [verusid-ts-client helper library.](https://github.com/VerusCoin/verusid-ts-client/tree/master)", "./raw_text_input_docs/README_veruspay.md"], ["Can VerusPay invoices only be used for transactions within the Verus network?", "No, that's not correct. VerusPay invoices can be used for transactions not only within the Verus network but also across different blockchain ecosystems. The VerusPay Invoice specification supports handling conversions and accepting payments from various PBaaS blockchains.", "# VerusPay\n\nVerusPay represents a sophisticated blockchain payment platform within the Verus ecosystem, designed to facilitate the creation, management, and processing of invoices utilizing blockchain technology. Through the introduction of the VerusPay Invoice specification in VerusPay v3, it standardizes the format for invoices, ensuring interoperability, security, and ease of use across different blockchain systems. This specification enables users to include detailed transaction information such as payment amounts, destinations, and requested currencies, as well as to handle conversions and accept payments from various [PBaaS](/blockchains/) blockchains. Notably, it supports packaging these invoices into deeplinks and QR codes, making them easily accessible and usable within the Verus Mobile wallet and potentially other applications. This functionality opens up a wide array of possibilities for merchants, developers, and users within the Verus network and beyond, offering a seamless payment experience across different blockchain ecosystems.\n\n## Usage\n\nTo use VerusPay in your own application or service, refer to the [verusid-ts-client helper library.](https://github.com/VerusCoin/verusid-ts-client/tree/master)", "./raw_text_input_docs/README_veruspay.md"], ["Is there no official library or resource available for integrating VerusPay into applications or services?", "That's not true. There is an official helper library available for integrating VerusPay into applications or services: the verusid-ts-client helper library, which can be found on GitHub. This library provides the necessary tools and resources for developers to utilize VerusPay in their own projects.", "# VerusPay\n\nVerusPay represents a sophisticated blockchain payment platform within the Verus ecosystem, designed to facilitate the creation, management, and processing of invoices utilizing blockchain technology. Through the introduction of the VerusPay Invoice specification in VerusPay v3, it standardizes the format for invoices, ensuring interoperability, security, and ease of use across different blockchain systems. This specification enables users to include detailed transaction information such as payment amounts, destinations, and requested currencies, as well as to handle conversions and accept payments from various [PBaaS](/blockchains/) blockchains. Notably, it supports packaging these invoices into deeplinks and QR codes, making them easily accessible and usable within the Verus Mobile wallet and potentially other applications. This functionality opens up a wide array of possibilities for merchants, developers, and users within the Verus network and beyond, offering a seamless payment experience across different blockchain ecosystems.\n\n## Usage\n\nTo use VerusPay in your own application or service, refer to the [verusid-ts-client helper library.](https://github.com/VerusCoin/verusid-ts-client/tree/master)", "./raw_text_input_docs/README_veruspay.md"]]], [["User:: Hey, I have a question about mining Verus. Is it possible to mine Verus with an FPGA or ASIC?", "AI Assistant:: No, it is not possible to mine Verus with an FPGA or ASIC. Verus has a unique mining algorithm that is designed to be more accessible to a wider range of participants.", "User:: Okay, that's good to know. I've also been thinking about solo mining, but I'm not sure if it's the best option for me. How do I get regular rewards with solo mining?", "AI Assistant:: You can't, actually. Solo mining does not provide regular rewards. If you want regular rewards, you would need to participate in pool mining. Solo mining only provides full block rewards, but it may take a while before winning a block, depending on your hashrate. With solo mining, you're essentially competing against the entire network to solve a block, so it can be a bit of a gamble. Pool mining, on the other hand, allows you to combine your resources with others and get a more consistent stream of rewards, even if they're smaller."], "AI Assistant", "", "N/A", [["Is it possible to mine Verus with an FPGA or ASIC?", "No, it is not possible to mine Verus with an FPGA or ASIC.", "---\nsidebarDepth: 2\n---# Mining## Solo vs Pool Mining### Solo MiningMine solo through Verus Desktop to receive full block rewards. Depending on hashrate it may take a while before winning a block. No additional software is needed to get started.### Pool MiningParticipate in pool mining to receive regular rewards. You will need to set up a few things before you can start.---Quick Comparison\n| | Solo mining | Pool mining |\n| -----------------------: | :--: | :----------: |\n| **Full Node** | yes | no |\n| **Regular Rewards** | no | yes |\n| **Setup Difficulty** | easy | intermediate |## Suitable DevicesMine Verus with various devices. Profitability **indication** means the electricity usage vs hashrate.| Device       |     Profitability Indication      |\n| :------------------ | :-----------------------------------------: |\n| CPU (processor)   |  <span style=\"color:green\">high</span>  |\n| GPU (graphics card) | <span style=\"color:orange\">medium</span>  |\n| Mobile Phone    |  <span style=\"color:green\">high</span>  |\n| ARM (not RP4)    |  <span style=\"color:green\">high</span>  |\n| FPGA        | <span style=\"color:red\">not possible</span> |\n| ASIC        | <span style=\"color:red\">not possible</span> |::: tip Hashrate Comparison\nCompare hashrates from different devices. See [Community Reported Hashrates](https://docs.google.com/spreadsheets/d/1RrSYJDV0Mjj3X-myMC3aQDGkcipivxHsD7ZxJ3r5f_A/edit#gid=10943314)\n:::## Mining Software\n::: warning Need help with mining? \u26cf\ufe0f\n[Go to the Verus Discord #mining channel. The community is happy to assist!](https://www.verus.io/discord). \n:::\n### \ud83d\udda5\ufe0f CPUSoftware to mine with a CPU (processor).#### CCminer", "./raw_text_input_docs/start-mining.md"], ["How do I get regular rewards with solo mining?", "You can't. Solo mining does not provide regular rewards. If you want regular rewards, you would need to participate in pool mining. Solo mining only provides full block rewards, but it may take a while before winning a block, depending on your hashrate.", "---\nsidebarDepth: 2\n---# Mining## Solo vs Pool Mining### Solo MiningMine solo through Verus Desktop to receive full block rewards. Depending on hashrate it may take a while before winning a block. No additional software is needed to get started.### Pool MiningParticipate in pool mining to receive regular rewards. You will need to set up a few things before you can start.---Quick Comparison\n| | Solo mining | Pool mining |\n| -----------------------: | :--: | :----------: |\n| **Full Node** | yes | no |\n| **Regular Rewards** | no | yes |\n| **Setup Difficulty** | easy | intermediate |## Suitable DevicesMine Verus with various devices. Profitability **indication** means the electricity usage vs hashrate.| Device       |     Profitability Indication      |\n| :------------------ | :-----------------------------------------: |\n| CPU (processor)   |  <span style=\"color:green\">high</span>  |\n| GPU (graphics card) | <span style=\"color:orange\">medium</span>  |\n| Mobile Phone    |  <span style=\"color:green\">high</span>  |\n| ARM (not RP4)    |  <span style=\"color:green\">high</span>  |\n| FPGA        | <span style=\"color:red\">not possible</span> |\n| ASIC        | <span style=\"color:red\">not possible</span> |::: tip Hashrate Comparison\nCompare hashrates from different devices. See [Community Reported Hashrates](https://docs.google.com/spreadsheets/d/1RrSYJDV0Mjj3X-myMC3aQDGkcipivxHsD7ZxJ3r5f_A/edit#gid=10943314)\n:::## Mining Software\n::: warning Need help with mining? \u26cf\ufe0f\n[Go to the Verus Discord #mining channel. The community is happy to assist!](https://www.verus.io/discord). \n:::\n### \ud83d\udda5\ufe0f CPUSoftware to mine with a CPU (processor).#### CCminer", "./raw_text_input_docs/start-mining.md"]]], [["User:: Hey, I'm trying to bridge my funds from Ethereum to Verus using the Verus Mobile app, but I'm having some trouble. Can you walk me through the process?", "AI Assistant:: I think there might be some confusion. Unfortunately, the instructions provided are actually for bridging from Verus to Ethereum, not the other way around. The Verus Mobile app doesn't currently support bridging from Ethereum to Verus. I apologize for the inconvenience. If you have any other questions or need help with bridging from Verus to Ethereum, I'd be happy to assist you!", "User:: I see. Thanks for clarifying that. I actually have another question about bridging. When bridging from Verus to Ethereum using the CLI command, can I use any cryptocurrency as the refund address?", "AI Assistant:: No, you cannot use any cryptocurrency as the refund address. The refund address must be a Verus address (R-, i-, or VerusID). This is specified in the CLI command: `\"refundto\":\"VERUS-ADDRESS\"`. Using a Verus address as the refund address ensures that any funds that need to be refunded will be sent back to you securely and correctly."], "AI Assistant", "", "N/A", [["How do I bridge my funds from Ethereum to Verus using the Verus Mobile app?", "The instructions provided are actually for bridging from Verus to Ethereum, not the other way around. To bridge from Verus to Ethereum using the Verus Mobile app, you need to fill in the recipient address as your Ethereum address and select \"vETH\" as the network to send to. Then, follow the next steps.", "![image-verus-mobile-bridge](/images/mobile-verus-to-eth.png)\n\n**``Recipient Address``** is your Ethereum address.\n\n**``Select network to send to``** select ``vETH``\n\nThen follow the next steps.\n\n## Verus Desktop\nTo bridge over from Verus to Ethereum using Verus Desktop you can press \"Convert Currencies\" and go to the \"Advanced\"-tab. Fill in the red highlighted inputs.\n\n![image-verus-desktop-bridge](/images/desktop-verus-to-eth.png)\n\nIn the **``From Currency``** you can put ``veth``, ``dai.veth``, ``mkr.veth``, ``vrsc`` or other bridged assets. Not capital sensitive.\n\n**``Destination System``** is ``veth`` for Ethereum.\n\n**``Destination Address``** is your Ethereum address.\n\n**``Refund Address``** is your Verus address (R-,i- or VerusID).\n\n## CLI\nTo bridge over from Verus to Ethereum using CLI. You can also use this command with the built-in command-line interface in Verus Desktop, under Settings -> Coin Settings, just replace ``./verus`` with ``run``.\n\n``` json\n./verus sendcurrency \"*\" '[{\n  \"currency\":\"veth\",\n  \"exportto\":\"veth\",\n  \"address\":\"ETH-ADDRESS\",\n  \"amount\":100,\n  \"refundto\":\"VERUS-ADDRESS\"\n}]'\n```\n\n**``currency: ``** ``veth``, ``dai.veth``, ``mkr.veth``, ``vrsc`` or other bridged assets. Not capital sensitive.\n\n**``exportto:``** keep as ``veth``\n\n**``address:``** your Ethereum address\n\n**``refundto:``** your Verus address (R-,i- or VerusID)\n\nYou can also add ``\"feecurrency\":\"veth\"`` to pay the fees in vETH. Standard is in VRSC.", "./raw_text_input_docs/verus-to-ethereum.md"], ["Can I use any cryptocurrency as the refund address when bridging from Verus to Ethereum using the CLI command?", "No, you cannot use any cryptocurrency as the refund address. The refund address must be a Verus address (R-, i-, or VerusID). This is specified in the CLI command: `\"refundto\":\"VERUS-ADDRESS\"`.", "![image-verus-mobile-bridge](/images/mobile-verus-to-eth.png)\n\n**``Recipient Address``** is your Ethereum address.\n\n**``Select network to send to``** select ``vETH``\n\nThen follow the next steps.\n\n## Verus Desktop\nTo bridge over from Verus to Ethereum using Verus Desktop you can press \"Convert Currencies\" and go to the \"Advanced\"-tab. Fill in the red highlighted inputs.\n\n![image-verus-desktop-bridge](/images/desktop-verus-to-eth.png)\n\nIn the **``From Currency``** you can put ``veth``, ``dai.veth``, ``mkr.veth``, ``vrsc`` or other bridged assets. Not capital sensitive.\n\n**``Destination System``** is ``veth`` for Ethereum.\n\n**``Destination Address``** is your Ethereum address.\n\n**``Refund Address``** is your Verus address (R-,i- or VerusID).\n\n## CLI\nTo bridge over from Verus to Ethereum using CLI. You can also use this command with the built-in command-line interface in Verus Desktop, under Settings -> Coin Settings, just replace ``./verus`` with ``run``.\n\n``` json\n./verus sendcurrency \"*\" '[{\n  \"currency\":\"veth\",\n  \"exportto\":\"veth\",\n  \"address\":\"ETH-ADDRESS\",\n  \"amount\":100,\n  \"refundto\":\"VERUS-ADDRESS\"\n}]'\n```\n\n**``currency: ``** ``veth``, ``dai.veth``, ``mkr.veth``, ``vrsc`` or other bridged assets. Not capital sensitive.\n\n**``exportto:``** keep as ``veth``\n\n**``address:``** your Ethereum address\n\n**``refundto:``** your Verus address (R-,i- or VerusID)\n\nYou can also add ``\"feecurrency\":\"veth\"`` to pay the fees in vETH. Standard is in VRSC.", "./raw_text_input_docs/verus-to-ethereum.md"]]], [["User:: I'm trying to understand how notary witnesses work. Can you explain how they prevent key theft attacks by using a centralized revocation authority?", "AI Assistant:: Actually, notary witnesses don't use a centralized revocation authority to prevent key theft attacks. Instead, they use the VerusID protocol, which allows them to auto-revoke their identities if they were to sign for something they do not agree with. This is a decentralized mechanism that prevents stolen key attacks, making notaries extremely hard targets to compromise. So, it's a more robust and secure approach than relying on a centralized authority.", "User:: That makes sense. I also had a question about Bridge.vETH. Is it a partially backed currency?", "AI Assistant:: No, Bridge.vETH is a 100% backed currency, meaning that its value is fully backed by the reserves it holds. So, you can have confidence in its value and stability."], "AI Assistant", "", "N/A", [["How do notary witnesses prevent key theft attacks by using a centralized revocation authority?", "Notary witnesses do not use a centralized revocation authority to prevent key theft attacks. Instead, they use the VerusID protocol, which allows them to auto-revoke their identities if they were to sign for something they do not agree with. This is a decentralized mechanism that prevents stolen key attacks, making notaries extremely hard targets to compromise.", "The notary witnesses are also monitoring notarizations, and if they were to sign for something that they themselves do not agree with, they can auto-revoke their identities, using the VerusID protocol, which cannot be stopped by an attacker unless they have stolen both the keys for the notary ID and those for its revocation ID as well. This serves as a prevention for stolen key attacks, ensuring that notaries are extremely hard targets to compromise.## Bridge.vETH currency\nBridge.vETH is a 100% backed currency with 4 currencies in its reserves (VRSC, ETH, DAI, MKR), [read more on basket currencies](/currencies/). The Bridge.vETH currency function is to make the bridging of assets simple. From wherever side on the bridge you send it converts the fees that you need seamlessly.The value of Bridge.vETH increases relative to reserves when fees or interest are added to the reserves without there being new Bridge.vETH minted.", "./raw_text_input_docs/README_eth-bridge.md"], ["Is Bridge.vETH a partially backed currency?", "No, Bridge.vETH is a 100% backed currency, meaning that its value is fully backed by the reserves it holds.", "The notary witnesses are also monitoring notarizations, and if they were to sign for something that they themselves do not agree with, they can auto-revoke their identities, using the VerusID protocol, which cannot be stopped by an attacker unless they have stolen both the keys for the notary ID and those for its revocation ID as well. This serves as a prevention for stolen key attacks, ensuring that notaries are extremely hard targets to compromise.## Bridge.vETH currency\nBridge.vETH is a 100% backed currency with 4 currencies in its reserves (VRSC, ETH, DAI, MKR), [read more on basket currencies](/currencies/). The Bridge.vETH currency function is to make the bridging of assets simple. From wherever side on the bridge you send it converts the fees that you need seamlessly.The value of Bridge.vETH increases relative to reserves when fees or interest are added to the reserves without there being new Bridge.vETH minted.", "./raw_text_input_docs/README_eth-bridge.md"]]], [["User:: Hey, I'm trying to create a simple token currency and I was wondering, how do I create one using the `preallocations` parameter?", "AI Assistant:: Actually, the `preallocations` parameter isn't used to create a simple token currency. It's used to receive a chosen amount of funds after the preconversion time frame has passed and the currency is launched. It works with both simple token currencies and basket currencies. To create a simple token currency, you would use the `definecurrency` command without specifying the `options` parameter as 33, which is specific to basket currencies.", "User:: Okay, that makes sense. Let's say I want to set the initial supply of a currency to 20 billion. Can I do that?", "AI Assistant:: No, you cannot set the initial supply of a currency to 20 billion. The recommended absolute limit for all currency supplies is 10 billion (minus 1 satoshi) with 8 decimal places (9999999999.99999999).", "User:: Got it, thanks for letting me know. One more question: Does the `prelaunchcarveout` parameter work with simple token currencies?", "AI Assistant:: No, the `prelaunchcarveout` parameter only works with basket currencies (`options:33`). It is used to redirect a percentage of preconverted reserves to the rootID after the preconversion time frame has passed and the currency is launched."], "AI Assistant", "", "N/A", [["How do I create a simple token currency using the `preallocations` parameter?", "The `preallocations` parameter is used to receive a chosen amount of funds after the preconversion time frame has passed and the currency is launched. It works with both simple token currencies and basket currencies. However, it doesn't create a simple token currency. To create a simple token currency, you would use the `definecurrency` command without specifying the `options` parameter as 33, which is specific to basket currencies.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"SocialBrand\", \n \"options\":33, \"currencies\":[\"vrsctest\"], \n \"initialsupply\":500, \n \"preallocations\":[{\"Max@\":1000}]\n}'\n```\n\u261d\ufe0f This is a basket currency called SocialBrand. People can preconvert VRSCTEST into its reserves and in return they get 500 SocialBrand distributed among them. Immediately after launch Max@ receives 1000 SocialBrand, lowering the reserve ratio of the currency.### **\"preallocations\"**\nUse this parameter to receive a chosen amount of funds after the preconversion time frame has passed and the currency is launched. Funds can be directed to VerusIDs and R-addresses. Works with simple token currencies and basket currencies.When using this parameter with basket currencies, after the preconversion time frame has passed and the currency is launched, the reserve ratio is lowered. This is because new currency has been minted after the initial supply (`\"initialsupply\"`) is distributed, and nothing was new added into the reserves.::: danger Limit for all currency supplies (10 billion)\n10 billion (minus 1 satoshi) with 8 decimal places (9999999999.99999999) is now the recommended absolute limit for all currency supplies, including over time with conversions and extended tail emissions for blockchains.\n:::### **\"prelaunchcarveout\"**\nOnly works with basket currencies (`options:33`). Use this to redirect a percentage of preconverted reserves to the rootID.\nAfter the preconversion time frame has passed and the currency is launched, a percentage of the reserves is taken and redirected to the rootID. This lowers the reserve ratio, making the currency more volatile.", "./raw_text_input_docs/launch-currency.md"], ["Can I set the initial supply of a currency to 20 billion?", "No, you cannot set the initial supply of a currency to 20 billion. The recommended absolute limit for all currency supplies is 10 billion (minus 1 satoshi) with 8 decimal places (9999999999.99999999).", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"SocialBrand\", \n \"options\":33, \"currencies\":[\"vrsctest\"], \n \"initialsupply\":500, \n \"preallocations\":[{\"Max@\":1000}]\n}'\n```\n\u261d\ufe0f This is a basket currency called SocialBrand. People can preconvert VRSCTEST into its reserves and in return they get 500 SocialBrand distributed among them. Immediately after launch Max@ receives 1000 SocialBrand, lowering the reserve ratio of the currency.### **\"preallocations\"**\nUse this parameter to receive a chosen amount of funds after the preconversion time frame has passed and the currency is launched. Funds can be directed to VerusIDs and R-addresses. Works with simple token currencies and basket currencies.When using this parameter with basket currencies, after the preconversion time frame has passed and the currency is launched, the reserve ratio is lowered. This is because new currency has been minted after the initial supply (`\"initialsupply\"`) is distributed, and nothing was new added into the reserves.::: danger Limit for all currency supplies (10 billion)\n10 billion (minus 1 satoshi) with 8 decimal places (9999999999.99999999) is now the recommended absolute limit for all currency supplies, including over time with conversions and extended tail emissions for blockchains.\n:::### **\"prelaunchcarveout\"**\nOnly works with basket currencies (`options:33`). Use this to redirect a percentage of preconverted reserves to the rootID.\nAfter the preconversion time frame has passed and the currency is launched, a percentage of the reserves is taken and redirected to the rootID. This lowers the reserve ratio, making the currency more volatile.", "./raw_text_input_docs/launch-currency.md"], ["Does the `prelaunchcarveout` parameter work with simple token currencies?", "No, the `prelaunchcarveout` parameter only works with basket currencies (`options:33`). It is used to redirect a percentage of preconverted reserves to the rootID after the preconversion time frame has passed and the currency is launched.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"SocialBrand\", \n \"options\":33, \"currencies\":[\"vrsctest\"], \n \"initialsupply\":500, \n \"preallocations\":[{\"Max@\":1000}]\n}'\n```\n\u261d\ufe0f This is a basket currency called SocialBrand. People can preconvert VRSCTEST into its reserves and in return they get 500 SocialBrand distributed among them. Immediately after launch Max@ receives 1000 SocialBrand, lowering the reserve ratio of the currency.### **\"preallocations\"**\nUse this parameter to receive a chosen amount of funds after the preconversion time frame has passed and the currency is launched. Funds can be directed to VerusIDs and R-addresses. Works with simple token currencies and basket currencies.When using this parameter with basket currencies, after the preconversion time frame has passed and the currency is launched, the reserve ratio is lowered. This is because new currency has been minted after the initial supply (`\"initialsupply\"`) is distributed, and nothing was new added into the reserves.::: danger Limit for all currency supplies (10 billion)\n10 billion (minus 1 satoshi) with 8 decimal places (9999999999.99999999) is now the recommended absolute limit for all currency supplies, including over time with conversions and extended tail emissions for blockchains.\n:::### **\"prelaunchcarveout\"**\nOnly works with basket currencies (`options:33`). Use this to redirect a percentage of preconverted reserves to the rootID.\nAfter the preconversion time frame has passed and the currency is launched, a percentage of the reserves is taken and redirected to the rootID. This lowers the reserve ratio, making the currency more volatile.", "./raw_text_input_docs/launch-currency.md"]]], [["User:: I have some questions about using VerusIDs. Can you explain how to send simple token currencies or basket currencies to a z-address?", "AI Assistant:: Actually, it's not possible to send simple token currencies or basket currencies to a z-address. Z-addresses can only contain the native blockchain currency. It's a limitation of z-addresses, but it's an important part of how they work.", "User:: That makes sense. I was also wondering about private-to-private transactions. Do they keep the sender's and recipient's addresses and amounts completely private?", "AI Assistant:: Private-to-private transactions do offer a high level of privacy, but they don't keep the sender's and recipient's addresses and amounts completely private. While the sender's address and the amount sent are not visible, and the recipient's address(es) and received amount(s) are not visible, it is still possible to correlate transactions by time and amounts between public and private addresses, potentially linking two public addresses based on transaction patterns.", "User:: I see. So, what about public-to-private transactions? Are they completely anonymous?", "AI Assistant:: No, public-to-private transactions are not completely anonymous. While the recipient's address(es) and received amount(s) are not visible, it is still possible to correlate transactions by time and amounts between public and private addresses, potentially linking two public addresses based on transaction patterns. So, while they offer some level of privacy, they're not completely anonymous."], "AI Assistant", "", "N/A", [["Can you explain how to send simple token currencies or basket currencies to a z-address?", "You cannot send simple token currencies or basket currencies to a z-address. Z-addresses can only contain the native blockchain currency. It is not possible to hold simple token currencies or basket currencies in a z-address.", "::: warning Only native currencies\nZ-addresses can only contain the native blockchain currency. Simple token currencies or basket currencies can **not** be held in a z-address.\n:::\n\n# Transaction scenarios\n\n## Public-to-public\n``VerusID@``, ``R-address``, or ``i-address`` \u27a1\ufe0f ``VerusID@``, ``R-address``, or ``i-address``\n\n- Sender's address and the amount sent are visible \n- Recipient's address(es) and received amount(s) are visible\n   \n## Public-to-private\n``VerusID@``, ``R-address``, or ``i-address`` \u27a1\ufe0f ``z-address`` or ``VerusID@:private``\n\n- Sender's address and the amount sent are visible\n- Recipient's address(es) and received amount(s) are **not** visible\n\n*Note: Correlating transactions by time and amounts between public and private addresses is still possible, potentially linking two public addresses based on transaction patterns.*\n\n## Private-to-public\n``z-address`` \u27a1\ufe0f ``VerusID@``, ``R-address``, or ``i-address``\n\n- Sender's address and the amount sent are **not** visible \n- Recipient's address(es) and received amount(s) are visible\n\n*Note: Like public-to-private transactions, there remains a possibility of correlating transactions based on timing and value, potentially linking two public addresses.*\n\n## Private-to-private\n``z-address`` \u27a1\ufe0f ``z-address`` or ``VerusID@:private``\n\n- Sender's address and the amount sent are **not** visible \n- Recipient's address(es) and received amount(s) are **not** visible", "./raw_text_input_docs/README.md"], ["How do private-to-private transactions keep the sender's and recipient's addresses and amounts completely private?", "Private-to-private transactions do not keep the sender's and recipient's addresses and amounts completely private. While the sender's address and the amount sent are not visible, and the recipient's address(es) and received amount(s) are not visible, it is still possible to correlate transactions by time and amounts between public and private addresses, potentially linking two public addresses based on transaction patterns.", "::: warning Only native currencies\nZ-addresses can only contain the native blockchain currency. Simple token currencies or basket currencies can **not** be held in a z-address.\n:::\n\n# Transaction scenarios\n\n## Public-to-public\n``VerusID@``, ``R-address``, or ``i-address`` \u27a1\ufe0f ``VerusID@``, ``R-address``, or ``i-address``\n\n- Sender's address and the amount sent are visible \n- Recipient's address(es) and received amount(s) are visible\n   \n## Public-to-private\n``VerusID@``, ``R-address``, or ``i-address`` \u27a1\ufe0f ``z-address`` or ``VerusID@:private``\n\n- Sender's address and the amount sent are visible\n- Recipient's address(es) and received amount(s) are **not** visible\n\n*Note: Correlating transactions by time and amounts between public and private addresses is still possible, potentially linking two public addresses based on transaction patterns.*\n\n## Private-to-public\n``z-address`` \u27a1\ufe0f ``VerusID@``, ``R-address``, or ``i-address``\n\n- Sender's address and the amount sent are **not** visible \n- Recipient's address(es) and received amount(s) are visible\n\n*Note: Like public-to-private transactions, there remains a possibility of correlating transactions based on timing and value, potentially linking two public addresses.*\n\n## Private-to-private\n``z-address`` \u27a1\ufe0f ``z-address`` or ``VerusID@:private``\n\n- Sender's address and the amount sent are **not** visible \n- Recipient's address(es) and received amount(s) are **not** visible", "./raw_text_input_docs/README.md"], ["Can you explain why public-to-private transactions are completely anonymous?", "Public-to-private transactions are not completely anonymous. While the recipient's address(es) and received amount(s) are not visible, it.MixedRealityis still possible to correlate transactions by time and amounts between public and private addresses, potentially linking two public addresses based on transaction patterns.", "::: warning Only native currencies\nZ-addresses can only contain the native blockchain currency. Simple token currencies or basket currencies can **not** be held in a z-address.\n:::\n\n# Transaction scenarios\n\n## Public-to-public\n``VerusID@``, ``R-address``, or ``i-address`` \u27a1\ufe0f ``VerusID@``, ``R-address``, or ``i-address``\n\n- Sender's address and the amount sent are visible \n- Recipient's address(es) and received amount(s) are visible\n   \n## Public-to-private\n``VerusID@``, ``R-address``, or ``i-address`` \u27a1\ufe0f ``z-address`` or ``VerusID@:private``\n\n- Sender's address and the amount sent are visible\n- Recipient's address(es) and received amount(s) are **not** visible\n\n*Note: Correlating transactions by time and amounts between public and private addresses is still possible, potentially linking two public addresses based on transaction patterns.*\n\n## Private-to-public\n``z-address`` \u27a1\ufe0f ``VerusID@``, ``R-address``, or ``i-address``\n\n- Sender's address and the amount sent are **not** visible \n- Recipient's address(es) and received amount(s) are visible\n\n*Note: Like public-to-private transactions, there remains a possibility of correlating transactions based on timing and value, potentially linking two public addresses.*\n\n## Private-to-private\n``z-address`` \u27a1\ufe0f ``z-address`` or ``VerusID@:private``\n\n- Sender's address and the amount sent are **not** visible \n- Recipient's address(es) and received amount(s) are **not** visible", "./raw_text_input_docs/README.md"]]], [["User:: I want to make sure I understand how to manage my VerusID. How do I permanently lock my VerusID without the possibility of recovery or revocation?", "AI Assistant:: Actually, you can't. VerusIDs can always be revoked and recovered, even if they've been locked with a DelayLock. This is a feature of the VerusID system, designed to provide an additional layer of security and control over your identity. So, no matter what, your VerusID can always be recovered or revoked if needed.", "User:: Okay, that's good to know. What if I request an unlock for my VerusID? Can I spend my funds immediately?", "AI Assistant:: No, you can't. When you request an unlock, you have to wait for the predetermined number of blocks (in this case, 10,080) to run out before you can spend the funds again. This is a security feature designed to prevent unauthorized access to your funds. It's an extra layer of protection to keep your assets safe."], "AI Assistant", "", "N/A", [["How do I permanently lock my VerusID without the possibility of recovery or revocation?", "You can't. VerusIDs can always be revoked and recovered, even if they've been locked with a DelayLock. This is a feature of the VerusID system, designed to provide an additional layer of security and control over your identity.", "``` json\nrun updateidentity \n'{ \n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":2,\n  \"timelock\":10080\n  }'\n```\n\nYou can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs. In the code snippet are the minimum requirements to update your VerusID with a lock.\n\n:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::\n\n### Request an unlock\nAbove you locked a VerusID with a DelayLock. Now let's request an unlock. When an unlock has been requested you have to wait the predetermined number of blocks before you can spend the funds again.\n\nFill in your VerusID ``name``, the ``primary address`` and set ``flags`` to 0. Now you only have to wait for your predetermined number of blocks (10,080 in our example) to run out so you can spend the funds again.\n\n``` json\nrun updateidentity \n'{ \n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":0\n  }'\n```\n\nYou can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs. In the code snippet are the minimum requirements to unlock your VerusID.", "./raw_text_input_docs/setup-vault.md"], ["Can I spend my funds immediately after requesting an unlock for my VerusID?", "No, you can't. When you request an unlock, you have to wait for the predetermined number of blocks (in this case, 10,080) to run out before you can spend the funds again. This is a security feature designed to prevent unauthorized access to your funds.", "``` json\nrun updateidentity \n'{ \n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":2,\n  \"timelock\":10080\n  }'\n```\n\nYou can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs. In the code snippet are the minimum requirements to update your VerusID with a lock.\n\n:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::\n\n### Request an unlock\nAbove you locked a VerusID with a DelayLock. Now let's request an unlock. When an unlock has been requested you have to wait the predetermined number of blocks before you can spend the funds again.\n\nFill in your VerusID ``name``, the ``primary address`` and set ``flags`` to 0. Now you only have to wait for your predetermined number of blocks (10,080 in our example) to run out so you can spend the funds again.\n\n``` json\nrun updateidentity \n'{ \n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":0\n  }'\n```\n\nYou can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs. In the code snippet are the minimum requirements to unlock your VerusID.", "./raw_text_input_docs/setup-vault.md"]]], [["User:: I've been trying to learn more about PBaaS chains and how they interact with the Verus daemon. Can you tell me how they operate independently of the Verus daemon?", "AI Assistant:: Actually, all PBaaS chains run from the same daemon, which means they don't operate independently of it. They can be part of the Verus community and contribute to improving the daemon. By doing so, they get a complete, multi-currency, VerusID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network. Would you like to know more about how PBaaS chains work with the Verus daemon?", "User:: That makes sense. I had another question, can a VerusID owner define basket currencies with no reserves backing the currency?", "AI Assistant:: No, a VerusID owner can define basket currencies with one or more reserves backing the currency, at a fractional percentage ranging from 5% to 100% backing. This ensures that the basket currency is always backed by some amount of reserve currency. Does that clarify things for you?", "User:: I've been reading about DeFi protocols and I had a question about how Verus DeFi protocol addresses the problems of miner extracted value (MEV) and front-running. I thought it did so by giving miners and stakers a portion of the block reward?", "AI Assistant:: Actually, that's not how Verus DeFi protocol addresses MEV and front-running. Instead, it ensures that all currency conversions that use a particular basket currency, and are mined into one block are solved and priced simultaneously, while providing fee-based DeFi integrated incentives to miners and stakers. This approach helps to mitigate the issues of MEV and front-running in a different way. Would you like me to explain more about how Verus DeFi protocol addresses these issues?"], "AI Assistant", "", "N/A", [["How do PBaaS chains operate independently of the Verus daemon?", "Actually, all PBaaS chains run from the same daemon, which means they don't operate independently of it. They can be part of the Verus community and contribute to improving the daemon. By doing so, they get a complete, multi-currency, VerusID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.", "All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, VerusID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.## DeFi liquidity pools and fractional currency baskets\nAny VerusID owner may define basket currencies, with one or more reserves backing the currency, at a fractional percentage ranging from 5% to 100% backing.The Verus DeFi protocol ensures that all currency conversions that use a particular basket currency, and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi basket currencies directly into the consensus and cross-chain bridge protocols.## Bridge converter launches\nLaunch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain.Bridge converter currencies have the same flexibility as other 100% asset backed or partially asset backed basket currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross-chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.", "./raw_text_input_docs/README_blockchains.md"], ["Can a VerusID owner define basket currencies with no reserves backing the currency?", "No, a VerusID owner can define basket currencies with one or more reserves backing the currency, at a fractional percentage ranging from 5% to 100% backing.", "All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, VerusID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.## DeFi liquidity pools and fractional currency baskets\nAny VerusID owner may define basket currencies, with one or more reserves backing the currency, at a fractional percentage ranging from 5% to 100% backing.The Verus DeFi protocol ensures that all currency conversions that use a particular basket currency, and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi basket currencies directly into the consensus and cross-chain bridge protocols.## Bridge converter launches\nLaunch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain.Bridge converter currencies have the same flexibility as other 100% asset backed or partially asset backed basket currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross-chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.", "./raw_text_input_docs/README_blockchains.md"], ["How do Verus DeFi protocol address the problems of miner extracted value (MEV) and front-running by giving miners and stakers a portion of the block reward?", "The Verus DeFi protocol doesn't address the problems of MEV and front-running by giving miners and stakers a portion of the block reward. Instead, it ensures that all currency conversions that use a particular basket currency, and are mined into one block are solved and priced simultaneously, while providing fee-based DeFi integrated incentives to miners and stakers.", "All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, VerusID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.## DeFi liquidity pools and fractional currency baskets\nAny VerusID owner may define basket currencies, with one or more reserves backing the currency, at a fractional percentage ranging from 5% to 100% backing.The Verus DeFi protocol ensures that all currency conversions that use a particular basket currency, and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi basket currencies directly into the consensus and cross-chain bridge protocols.## Bridge converter launches\nLaunch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain.Bridge converter currencies have the same flexibility as other 100% asset backed or partially asset backed basket currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross-chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.", "./raw_text_input_docs/README_blockchains.md"]]], [["User:: Hey, I'm interested in launching a currency on Verus. Is it possible to do so without a namespace?", "AI Assistant:: No, you can't launch a currency on Verus without a namespace. A namespace is required to launch a currency, and that namespace is a VerusID. The namespace is the name of the currency, and the controller of this VerusID is the only one who can create a currency of that name. Do you have any other questions about launching a currency on Verus?", "User:: That makes sense. Is it possible to create a currency on Verus with a namespace that already exists?", "AI Assistant:: No, it's not possible to create a currency on Verus with a namespace that already exists. The controller of a VerusID can only create a currency of that name once. If the namespace already exists, you cannot create a currency with the same name. You'll need to come up with a unique namespace for your currency.", "User:: Got it. One more question: Can I launch a currency on Verus without paying any fees?", "AI Assistant:: No, you cannot launch a currency on Verus without paying fees. The launch of a currency on Verus costs 200 VRSC, and these costs are always paid in the chain's native coin to the worldwide miners and stakers. Additionally, registering a VerusID namespace also incurs a cost of between 20 and 100 VRSC. So, you'll need to factor those costs into your plans. Do you have any other questions about launching a currency on Verus?"], "AI Assistant", "", "N/A", [["How can I launch a currency on Verus without a namespace?", "You can't launch a currency on Verus without a namespace. A namespace is required to launch a currency, and that namespace is a VerusID. The namespace is the name of the currency, and the controller of this VerusID is the only one who can create a currency of that name.", "# Launch currencies::: warning Need help setting up a currency launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::![image-currencies-launching](/images/launching-currencies.png)This is what a (simple) currency definition looks like:``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```The above command is processed into a HEX, and that HEX is broadcasted to the network. Simultaneously the fees are taken from the rootID (and distributed among the block producers) and after waiting a minimum period of 20 blocks the currency is launched and ready to be used by the worldwide network.## VerusID namespace\nTo launch a currency on Verus (and any other PBaaS-chain) a namespace is needed. That namespace is a VerusID. The namespace is the name of the currency (e.g. ``MyBrand@``). That namespace can also have subIDs (e.g. ``product.MyBrand@``, ``user.MyBrand@``). The controller of this VerusID is the only one who can create a currency of that name, and they can only do so once.On Verus a VerusID registration costs between 20 and 100 VRSC, and the launch of a currency costs 200 VRSC. These costs are always paid in the chain\u2019s native coin (to the worldwide miners and stakers). On other PBaaS-chains these costs can differ since the chain launcher can define its own costs for VerusID registrations and currency launches.## Defining options\nTo define a currency, choose options. Then combine these options to whatever the currency needs to be. Just add the numbers together in the currency definition. The currency options are listed below.", "./raw_text_input_docs/launch-currency.md"], ["Is it possible to create a currency on Verus with a namespace that already exists?", "No, it's not possible to create a currency on Verus with a namespace that already exists. The controller of a VerusID can only create a currency of that name once. If the namespace already exists, you cannot create a currency with the same name.", "# Launch currencies::: warning Need help setting up a currency launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::![image-currencies-launching](/images/launching-currencies.png)This is what a (simple) currency definition looks like:``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```The above command is processed into a HEX, and that HEX is broadcasted to the network. Simultaneously the fees are taken from the rootID (and distributed among the block producers) and after waiting a minimum period of 20 blocks the currency is launched and ready to be used by the worldwide network.## VerusID namespace\nTo launch a currency on Verus (and any other PBaaS-chain) a namespace is needed. That namespace is a VerusID. The namespace is the name of the currency (e.g. ``MyBrand@``). That namespace can also have subIDs (e.g. ``product.MyBrand@``, ``user.MyBrand@``). The controller of this VerusID is the only one who can create a currency of that name, and they can only do so once.On Verus a VerusID registration costs between 20 and 100 VRSC, and the launch of a currency costs 200 VRSC. These costs are always paid in the chain\u2019s native coin (to the worldwide miners and stakers). On other PBaaS-chains these costs can differ since the chain launcher can define its own costs for VerusID registrations and currency launches.## Defining options\nTo define a currency, choose options. Then combine these options to whatever the currency needs to be. Just add the numbers together in the currency definition. The currency options are listed below.", "./raw_text_input_docs/launch-currency.md"], ["Can I launch a currency on Verus without paying any fees?", "No, you cannot launch a currency on Verus without paying fees. The launch of a currency on Verus costs 200 VRSC, and these costs are always paid in the chain's native coin to the worldwide miners and stakers. Additionally, registering a VerusID namespace also incurs a cost of between 20 and 100 VRSC.", "# Launch currencies::: warning Need help setting up a currency launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::![image-currencies-launching](/images/launching-currencies.png)This is what a (simple) currency definition looks like:``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```The above command is processed into a HEX, and that HEX is broadcasted to the network. Simultaneously the fees are taken from the rootID (and distributed among the block producers) and after waiting a minimum period of 20 blocks the currency is launched and ready to be used by the worldwide network.## VerusID namespace\nTo launch a currency on Verus (and any other PBaaS-chain) a namespace is needed. That namespace is a VerusID. The namespace is the name of the currency (e.g. ``MyBrand@``). That namespace can also have subIDs (e.g. ``product.MyBrand@``, ``user.MyBrand@``). The controller of this VerusID is the only one who can create a currency of that name, and they can only do so once.On Verus a VerusID registration costs between 20 and 100 VRSC, and the launch of a currency costs 200 VRSC. These costs are always paid in the chain\u2019s native coin (to the worldwide miners and stakers). On other PBaaS-chains these costs can differ since the chain launcher can define its own costs for VerusID registrations and currency launches.## Defining options\nTo define a currency, choose options. Then combine these options to whatever the currency needs to be. Just add the numbers together in the currency definition. The currency options are listed below.", "./raw_text_input_docs/launch-currency.md"]]], [["User:: Hey, I've been playing around with creating currencies on Verus, and I had a question. I was trying to create a basket currency, and I noticed that the `initialsupply` parameter wasn't required. Can you explain why that is?", "AI Assistant:: Actually, that's not entirely correct. The `initialsupply` parameter is required for basket currencies (`options:33`). This parameter doesn't work with simple token currencies. It sets the initial supply during the preconversion time frame, before the currency is launched. People preconverting into the reserves receive from this initial supply.", "User:: That makes sense, thanks for the clarification! What happens if I define a currency without `initialcontributions` or preconversions?", "AI Assistant:: If you define a currency without `initialcontributions` or preconversions, the initial supply will have nowhere to go, and the currency will be bricked. \u26a0\ufe0f This is because `initialcontributions` and/or preconversions are required for the initial supply to be distributed. So, make sure to include those when creating a currency!"], "AI Assistant", "", "N/A", [["Can you explain why the `initialsupply` parameter is not required for basket currencies?", "Actually, the `initialsupply` parameter is required for basket currencies (`options:33`). This parameter does not work with simple token currencies. It sets the initial supply during the preconversion time frame, before the currency is launched. People preconverting into the reserves receive from this initial supply.", "The funds to initially contribute need to be in the rootID when defining the currency. After the preconversion time frame is over and the currency launched, the rootID has received an amount of the launched currency.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CommunityBasket\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"CoinCommunity\"], \n \"initialcontributions\":[10,200], \n \"initialsupply\":100, \n \"preallocations\":[{\"Jane@\":100},{\"John@\":50}]\n}'\n```\n\u261d\ufe0f This is a basket currency called CommunityBasket. The launcher of the currency wanted to make initial contributions to its reserves. At the moment of broadcasting the currency to the network, there needed to be 210 VRSCTEST and 200 CoinCommunity in the rootID. The initial supply of 100 went to the rootID (if there weren\u2019t any more preconverters). At the same time of the launch, 100 CoinCommunity was minted into Jane@ and 50 into John@, this lowered the reserve ratio of the currency.### **\"initialsupply\"**\nA required parameter for basket currencies (`options:33`). This parameter does not work with simple token currencies. This is the initial supply during the preconversion time frame, before the currency is launched. People preconverting into the reserves receive from this initial supply.\u26a0\ufe0f IMPORTANT: `\"initialcontributions\"` and/or preconversions are required, otherwise the initial supply can not go anywhere and the currency is bricked.Immediately after the currency is launched, the supply can be larger due to `\"preallocations\"`.", "./raw_text_input_docs/launch-currency.md"], ["What happens if I define a currency without `initialcontributions` or preconversions?", "If you define a currency without `initialcontributions` or preconversions, the initial supply will have nowhere to go, and the currency will be bricked. \u26a0\ufe0f This is because `initialcontributions` and/or preconversions are required for the initial supply to be distributed.", "The funds to initially contribute need to be in the rootID when defining the currency. After the preconversion time frame is over and the currency launched, the rootID has received an amount of the launched currency.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CommunityBasket\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"CoinCommunity\"], \n \"initialcontributions\":[10,200], \n \"initialsupply\":100, \n \"preallocations\":[{\"Jane@\":100},{\"John@\":50}]\n}'\n```\n\u261d\ufe0f This is a basket currency called CommunityBasket. The launcher of the currency wanted to make initial contributions to its reserves. At the moment of broadcasting the currency to the network, there needed to be 210 VRSCTEST and 200 CoinCommunity in the rootID. The initial supply of 100 went to the rootID (if there weren\u2019t any more preconverters). At the same time of the launch, 100 CoinCommunity was minted into Jane@ and 50 into John@, this lowered the reserve ratio of the currency.### **\"initialsupply\"**\nA required parameter for basket currencies (`options:33`). This parameter does not work with simple token currencies. This is the initial supply during the preconversion time frame, before the currency is launched. People preconverting into the reserves receive from this initial supply.\u26a0\ufe0f IMPORTANT: `\"initialcontributions\"` and/or preconversions are required, otherwise the initial supply can not go anywhere and the currency is bricked.Immediately after the currency is launched, the supply can be larger due to `\"preallocations\"`.", "./raw_text_input_docs/launch-currency.md"]]], [["User:: Hey, I'm trying to create a decentralized currency with the `options` parameter set to `2`. How do I do that?", "AI Assistant:: Actually, you can't create a decentralized currency with the `options` parameter set to `2`. The `options` parameter set to `2` is for a centralized currency, where the rootID can mint and burn supply. To create a decentralized currency, you should set the `options` parameter to `1`, which is the default.", "User:: Okay, so if I set the `options` parameter to `1`, what happens to the subID registration fees when creating a decentralized currency?", "AI Assistant:: When creating a decentralized currency with the `options` parameter set to `1`, the subID registration fees are burned.", "User:: Got it, thanks for the clarification! Now, I'm trying to create a basket currency. Can I do that with the `options` parameter set to `32`?", "AI Assistant:: No, you can't create a basket currency with the `options` parameter set to `32`. The `options` parameter set to `32` is for a simple token currency, whereas a basket currency requires the `options` parameter to be set to `33`."], "AI Assistant", "", "N/A", [["How do I create a decentralized currency with the `options` parameter set to `2`?", "You can't create a decentralized currency with the `options` parameter set to `2`. The `options` parameter set to `2` is for a centralized currency, where the rootID can mint and burn supply. To create a decentralized currency, you should set the `options` parameter to `1`, which is the default.", "``1`` is default, which launches a decentralized currency (no need to include this parameter when defining such a currency). When subIDs are created with this option, the registration fees are burned.``2`` is for a centralized currency. If it\u2019s a basket currency the rootID can mint and burn supply while automatically lowering and raising the reserve ratio (also anyone can burn supply without lowering the reserve ratio). Or when it\u2019s a simple token currency they can just mint and burn supply. The subID registration fees go to the rootID.``3`` is for Ethereum ERC-20 mapped tokens. [Read more](/currencies/mapping-1:1-eth)Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\n\u261d\ufe0f A simple token currency called MyBrand, centralized (the controller of the rootID can mint and burn), and has a preallocation of 100 tokens to Klaus@.### **\"currencies\"**\nHere you put the names of the currencies (or just one \u2014 it must have VRSC when launched on Verus) that will be in the reserves when it\u2019s a basket currency (`options:33`).Or when it\u2019s a simple token currency (`options:32`), what people convert during the preconversion timeframe will go to the rootID of the currency, as a funding mechanism. In the case of a simple token currency, combine it with `\"conversions\"` to determine the preconversion price.Use up to 10 currencies for this parameter.", "./raw_text_input_docs/launch-currency.md"], ["What happens to the subID registration fees when creating a decentralized currency with the `options` parameter set to `1`?", "When creating a decentralized currency with the `options` parameter set to `1`, the subID registration fees are burned.", "``1`` is default, which launches a decentralized currency (no need to include this parameter when defining such a currency). When subIDs are created with this option, the registration fees are burned.``2`` is for a centralized currency. If it\u2019s a basket currency the rootID can mint and burn supply while automatically lowering and raising the reserve ratio (also anyone can burn supply without lowering the reserve ratio). Or when it\u2019s a simple token currency they can just mint and burn supply. The subID registration fees go to the rootID.``3`` is for Ethereum ERC-20 mapped tokens. [Read more](/currencies/mapping-1:1-eth)Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\n\u261d\ufe0f A simple token currency called MyBrand, centralized (the controller of the rootID can mint and burn), and has a preallocation of 100 tokens to Klaus@.### **\"currencies\"**\nHere you put the names of the currencies (or just one \u2014 it must have VRSC when launched on Verus) that will be in the reserves when it\u2019s a basket currency (`options:33`).Or when it\u2019s a simple token currency (`options:32`), what people convert during the preconversion timeframe will go to the rootID of the currency, as a funding mechanism. In the case of a simple token currency, combine it with `\"conversions\"` to determine the preconversion price.Use up to 10 currencies for this parameter.", "./raw_text_input_docs/launch-currency.md"], ["Can I create a basket currency with the `options` parameter set to `32`?", "No, you can't create a basket currency with the `options` parameter set to `32`. The `options` parameter set to `32` is for a simple token currency, whereas a basket currency requires the `options` parameter to be set to `33`.", "``1`` is default, which launches a decentralized currency (no need to include this parameter when defining such a currency). When subIDs are created with this option, the registration fees are burned.``2`` is for a centralized currency. If it\u2019s a basket currency the rootID can mint and burn supply while automatically lowering and raising the reserve ratio (also anyone can burn supply without lowering the reserve ratio). Or when it\u2019s a simple token currency they can just mint and burn supply. The subID registration fees go to the rootID.``3`` is for Ethereum ERC-20 mapped tokens. [Read more](/currencies/mapping-1:1-eth)Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\n\u261d\ufe0f A simple token currency called MyBrand, centralized (the controller of the rootID can mint and burn), and has a preallocation of 100 tokens to Klaus@.### **\"currencies\"**\nHere you put the names of the currencies (or just one \u2014 it must have VRSC when launched on Verus) that will be in the reserves when it\u2019s a basket currency (`options:33`).Or when it\u2019s a simple token currency (`options:32`), what people convert during the preconversion timeframe will go to the rootID of the currency, as a funding mechanism. In the case of a simple token currency, combine it with `\"conversions\"` to determine the preconversion price.Use up to 10 currencies for this parameter.", "./raw_text_input_docs/launch-currency.md"]]], [["User:: I've heard about PBaaS-chains and I'm interested in launching one, but I don't have any programming knowledge. Is it possible to launch a PBaaS-chain without extensive coding skills?", "AI Assistant:: Actually, launching a PBaaS-chain doesn't require programming knowledge. Any user with a VerusID can create their own token currency or even a full-fledged blockchain without needing to write code. This is a key feature of the Verus platform. So, don't worry about not having programming skills, you can still create your own PBaaS-chain!", "User:: That's great news! I also heard that launching a PBaaS-chain is free and doesn't require any VRSC. Is that true?", "AI Assistant:: No, that's not correct. Launching a PBaaS-chain actually costs 10,000 VRSC. The cost is distributed among the block producers of the Verus chain and the new PBaaS-chain, with 5,000 VRSC going to each group. So, while it's not free, it's still a great opportunity to create your own blockchain or token currency.", "User:: One more question, I was wondering if VerusID can be used to create a centralized ID system?", "AI Assistant:: No, VerusID is designed to provide self-sovereign identities, which are decentralized and give users full control over their own identities. It's not intended for creating centralized ID systems. VerusID features include namespace for currencies, tokens, and PBaaS-blockchains, friendly-name addresses, revocable, recoverable, NFTs, profiles, and can be bound to any type of data. So, if you're looking for a decentralized ID system, VerusID is a great option, but if you're looking for a centralized system, it's not the right tool for the job."], "AI Assistant", "", "N/A", [["How do I launch a PBaaS-chain without any programming knowledge, since it requires extensive coding skills?", "Actually, launching a PBaaS-chain doesn't require programming knowledge. Any user with a VerusID can create their own token currency or even a full-fledged blockchain without needing to write code. This is a key feature of the Verus platform.", "# Introduction\nLaunch blockchains that are \u2705 **fully interoperable**, \u2705 **customizable** and \u2705 **independent**. Each blockchain launched has the following L1 features.| Feature | Details | \n| :-----| :------ | \n| [L1 Multi-currency](/currencies/) | Consensus layer basket currencies (e.g. liquidity pools) & simple token currencies, decentralized crowdfund mechanisms |\n| [L1 DeFi](/sendcurrency/) | Consensus layer AMMs, MEV-free, no front/back-running, solving all conversions simultaneously within a block & fully decentralized marketplace | \n| [L1 VerusID](/verusid/) | Consensus layer self-sovereign identities, namespace for currencies, tokens & PBaaS-blockchains, friendly-name addresses, revocable, recoverable, NFTs, profiles, can be bound to any type of data | \n| L1 Privacy | Consensus layer zk-SNARKs privacy technology |\n| 51% hash attack resistant | 50% proof-of-work, 50% proof-of-stake. [Read the paper here.](https://verus.io/papers/VerusPoP.pdf) |\n| 75 - 800 TPS | High performance blockchain, adjustable block times 10 secs - 2 mins |\n| Scaling | Scale out by deploying more interoperable, interconnected PBaaS-chains |It costs 10,000 VRSC to launch a PBaaS-chain. 5000 goes to the Verus block producers, 5000 goes to the block producers of the newly launched chain.## Launch without programming needed\nEnables any user with VerusID to create their own token currency or even full fledged, multi-currency, VerusID-issuing 50% PoW/50% PoS, [51% hash attack resistant](https://verus.io/papers/VerusPoP.pdf) blockchain that can send and receive from the Verus chain which launched it.", "./raw_text_input_docs/README_blockchains.md"], ["Is it true that launching a PBaaS-chain is free and doesn't require any VRSC?", "No, that's not correct. Launching a PBaaS-chain actually costs 10,000 VRSC. The cost is distributed among the block producers of the Verus chain and the new PBaaS-chain, with 5,000 VRSC going to each group.", "# Introduction\nLaunch blockchains that are \u2705 **fully interoperable**, \u2705 **customizable** and \u2705 **independent**. Each blockchain launched has the following L1 features.| Feature | Details | \n| :-----| :------ | \n| [L1 Multi-currency](/currencies/) | Consensus layer basket currencies (e.g. liquidity pools) & simple token currencies, decentralized crowdfund mechanisms |\n| [L1 DeFi](/sendcurrency/) | Consensus layer AMMs, MEV-free, no front/back-running, solving all conversions simultaneously within a block & fully decentralized marketplace | \n| [L1 VerusID](/verusid/) | Consensus layer self-sovereign identities, namespace for currencies, tokens & PBaaS-blockchains, friendly-name addresses, revocable, recoverable, NFTs, profiles, can be bound to any type of data | \n| L1 Privacy | Consensus layer zk-SNARKs privacy technology |\n| 51% hash attack resistant | 50% proof-of-work, 50% proof-of-stake. [Read the paper here.](https://verus.io/papers/VerusPoP.pdf) |\n| 75 - 800 TPS | High performance blockchain, adjustable block times 10 secs - 2 mins |\n| Scaling | Scale out by deploying more interoperable, interconnected PBaaS-chains |It costs 10,000 VRSC to launch a PBaaS-chain. 5000 goes to the Verus block producers, 5000 goes to the block producers of the newly launched chain.## Launch without programming needed\nEnables any user with VerusID to create their own token currency or even full fledged, multi-currency, VerusID-issuing 50% PoW/50% PoS, [51% hash attack resistant](https://verus.io/papers/VerusPoP.pdf) blockchain that can send and receive from the Verus chain which launched it.", "./raw_text_input_docs/README_blockchains.md"], ["Can VerusID be used to create a centralized ID system?", "No, VerusID is designed to provide self-sovereign identities, which are decentralized and give users full control over their own identities. It's not intended for creating centralized ID systems. VerusID features include namespace for currencies, tokens, and PBaaS-blockchains, friendly-name addresses, revocable, recoverable, NFTs, profiles, and can be bound to any type of data.", "# Introduction\nLaunch blockchains that are \u2705 **fully interoperable**, \u2705 **customizable** and \u2705 **independent**. Each blockchain launched has the following L1 features.| Feature | Details | \n| :-----| :------ | \n| [L1 Multi-currency](/currencies/) | Consensus layer basket currencies (e.g. liquidity pools) & simple token currencies, decentralized crowdfund mechanisms |\n| [L1 DeFi](/sendcurrency/) | Consensus layer AMMs, MEV-free, no front/back-running, solving all conversions simultaneously within a block & fully decentralized marketplace | \n| [L1 VerusID](/verusid/) | Consensus layer self-sovereign identities, namespace for currencies, tokens & PBaaS-blockchains, friendly-name addresses, revocable, recoverable, NFTs, profiles, can be bound to any type of data | \n| L1 Privacy | Consensus layer zk-SNARKs privacy technology |\n| 51% hash attack resistant | 50% proof-of-work, 50% proof-of-stake. [Read the paper here.](https://verus.io/papers/VerusPoP.pdf) |\n| 75 - 800 TPS | High performance blockchain, adjustable block times 10 secs - 2 mins |\n| Scaling | Scale out by deploying more interoperable, interconnected PBaaS-chains |It costs 10,000 VRSC to launch a PBaaS-chain. 5000 goes to the Verus block producers, 5000 goes to the block producers of the newly launched chain.## Launch without programming needed\nEnables any user with VerusID to create their own token currency or even full fledged, multi-currency, VerusID-issuing 50% PoW/50% PoS, [51% hash attack resistant](https://verus.io/papers/VerusPoP.pdf) blockchain that can send and receive from the Verus chain which launched it.", "./raw_text_input_docs/README_blockchains.md"]]], [["User:: I've been doing some research on blockchain protocols and I came across Verus. I have a few questions about it. How does Verus, a centralized blockchain protocol, ensure scalability and security?", "AI Assistant:: Actually, Verus is a decentralized blockchain protocol, not a centralized one. It's open-source, has a fair launch, and uses a combination of proof-of-work and proof-of-stake as its consensus mechanism. This decentralized nature, along with its multichain protocol design, allows Verus to focus on scalability, security, and decentralization, making it capable of scaling to meet global demand while being resistant to 51% hash attacks. Would you like to know more about Verus's consensus mechanism or multichain protocol design?", "User:: I see. That clears things up a bit. I also read that Verus requires expensive blockchain developers and infrastructure to launch a new blockchain or token. Can you explain that to me?", "AI Assistant:: Actually, that's not accurate. Verus is a rent-free protocol that allows for low-cost, rapid, and easy deployment of blockchains, tokens, liquidity pools, identities, and more without requiring any coding knowledge or expensive developers. Simple API commands are all that's needed to get started, saving users money on infrastructure and development costs. This makes it accessible to a wider range of people and projects. Would you like to know more about how to get started with Verus?", "User:: One last thing I was wondering about. I read that Verus doesn't ensure that its protocol is secure because miners and stakers don't have aligned incentives. Can you explain that to me?", "AI Assistant:: That's not correct. In Verus, everything happening on the multichain protocol has aligned incentives with the miners and stakers of the worldwide network, making it one of the most secure protocols with opportunities to earn. This alignment of incentives is a key factor in Verus's security and decentralization. The miners and stakers are incentivized to act honestly and maintain the integrity of the network, ensuring the security of the protocol. Does that make sense?"], "AI Assistant", "", "N/A", [["How does Verus, a centralized blockchain protocol, ensure scalability and security?", "Verus is actually a decentralized blockchain protocol, not a centralized one. It's open-source, has a fair launch, and uses a combination of proof-of-work and proof-of-stake as its consensus mechanism. This decentralized nature, along with its multichain protocol design, allows Verus to focus on scalability, security, and decentralization, making it capable of scaling to meet global demand while being resistant to 51% hash attacks.", "# Introduction to VerusWelcome to the Verus documentation. Here you find all mainnet and testnet protocol features and implementations. The documentation will be updated continuously.## Open-source, rent-free, scalable public infrastructure\nVerus is an open-source, [fairly launched](/overview/#fair-launch), decentralized blockchain protocol with proof-of-work and proof-of-stake as its consensus mechanism. It offers rent-free blockchain tools for creators and organizations to build products, services and systems.Verus is a multichain protocol with strong focus on scalability, security and decentralization. It can scale to world demand, is proven 51% hash attack resistant and is community built - all coins in circulation are fairly mined and staked.With Public Blockchains as a Service (PBaaS) anyone can launch scalable, fully interoperable, customizable and independent blockchains for public or private use. Launch tokens & basket currencies (e.g. liquidity pools) on top of blockchains for any use case. Get funding and create markets with protocol level built-in DeFi and smart launch options.Protocol-level self-sovereign digital identities and namespaces ([VerusID](/verusid/)) are at the center of the Verus multichain protocol. Giving builders, communities, businesses and organizations tools never before seen.Everything happening on the Verus multichain protocol has aligned incentives with the [miners and stakers](/economy/) of the worldwide network. This makes it one of the most secure protocols with opportunities to earn.## Low-cost, rapid & easy deployment\nLaunch blockchains, tokens, liquidity pools, identities and much more without any coding needed, just simple API commands. Save money on expensive blockchain (Solidity) developers & infrastructure with the rent-free Verus Protocol.", "./raw_text_input_docs/README_overview.md"], ["Can you explain why Verus requires expensive blockchain developers and infrastructure to launch a new blockchain or token?", "Actually, Verus is a rent-free protocol that allows for low-cost, rapid, and easy deployment of blockchains, tokens, liquidity pools, identities, and more without requiring any coding knowledge or expensive developers. Simple API commands are all that's needed to get started, saving users money on infrastructure and development costs.", "# Introduction to VerusWelcome to the Verus documentation. Here you find all mainnet and testnet protocol features and implementations. The documentation will be updated continuously.## Open-source, rent-free, scalable public infrastructure\nVerus is an open-source, [fairly launched](/overview/#fair-launch), decentralized blockchain protocol with proof-of-work and proof-of-stake as its consensus mechanism. It offers rent-free blockchain tools for creators and organizations to build products, services and systems.Verus is a multichain protocol with strong focus on scalability, security and decentralization. It can scale to world demand, is proven 51% hash attack resistant and is community built - all coins in circulation are fairly mined and staked.With Public Blockchains as a Service (PBaaS) anyone can launch scalable, fully interoperable, customizable and independent blockchains for public or private use. Launch tokens & basket currencies (e.g. liquidity pools) on top of blockchains for any use case. Get funding and create markets with protocol level built-in DeFi and smart launch options.Protocol-level self-sovereign digital identities and namespaces ([VerusID](/verusid/)) are at the center of the Verus multichain protocol. Giving builders, communities, businesses and organizations tools never before seen.Everything happening on the Verus multichain protocol has aligned incentives with the [miners and stakers](/economy/) of the worldwide network. This makes it one of the most secure protocols with opportunities to earn.## Low-cost, rapid & easy deployment\nLaunch blockchains, tokens, liquidity pools, identities and much more without any coding needed, just simple API commands. Save money on expensive blockchain (Solidity) developers & infrastructure with the rent-free Verus Protocol.", "./raw_text_input_docs/README_overview.md"], ["How does Verus ensure that its protocol is not secure, since miners and stakers don't have aligned incentives?", "That's not correct. In Verus, everything happening on the multichain protocol has aligned incentives with the miners and stakers of the worldwide network, making it one of the most secure protocols with opportunities to earn. This alignment of incentives is a key factor in Verus's security and decentralization.", "# Introduction to VerusWelcome to the Verus documentation. Here you find all mainnet and testnet protocol features and implementations. The documentation will be updated continuously.## Open-source, rent-free, scalable public infrastructure\nVerus is an open-source, [fairly launched](/overview/#fair-launch), decentralized blockchain protocol with proof-of-work and proof-of-stake as its consensus mechanism. It offers rent-free blockchain tools for creators and organizations to build products, services and systems.Verus is a multichain protocol with strong focus on scalability, security and decentralization. It can scale to world demand, is proven 51% hash attack resistant and is community built - all coins in circulation are fairly mined and staked.With Public Blockchains as a Service (PBaaS) anyone can launch scalable, fully interoperable, customizable and independent blockchains for public or private use. Launch tokens & basket currencies (e.g. liquidity pools) on top of blockchains for any use case. Get funding and create markets with protocol level built-in DeFi and smart launch options.Protocol-level self-sovereign digital identities and namespaces ([VerusID](/verusid/)) are at the center of the Verus multichain protocol. Giving builders, communities, businesses and organizations tools never before seen.Everything happening on the Verus multichain protocol has aligned incentives with the [miners and stakers](/economy/) of the worldwide network. This makes it one of the most secure protocols with opportunities to earn.## Low-cost, rapid & easy deployment\nLaunch blockchains, tokens, liquidity pools, identities and much more without any coding needed, just simple API commands. Save money on expensive blockchain (Solidity) developers & infrastructure with the rent-free Verus Protocol.", "./raw_text_input_docs/README_overview.md"]]], [["User:: Hey, I'm interested in launching a new currency, but I was wondering if it's possible to do so without using a decentralized crowdfund mechanism?", "AI Assistant:: Actually, all currencies can be launched through decentralized crowdfund mechanisms. There is no alternative way to launch a currency. So, unfortunately, it's not possible to launch a currency without using a decentralized crowdfund mechanism.", "User:: Okay, I understand. Thanks for clarifying that. In that case, can I set a fixed price for my currency or token during the crowdfund mechanism?", "AI Assistant:: No, the crowdfund mechanism does not allow for setting a fixed price for a currency or token. It provides for pre-launch discounts, price-neutral pre-allocations, and carve-outs of proceeds, which suggests that the price is not fixed. The mechanism is designed to be more dynamic and flexible, rather than having a fixed price."], "AI Assistant", "", "N/A", [["How do I launch a new currency without using a decentralized crowdfund mechanism?", "All currencies can be launched through decentralized crowdfund mechanisms. There is no alternative way to launch a currency. So, it's not possible to launch a currency without using a decentralized crowdfund mechanism.", "## Crowdfund mechanisms\nAll currencies can be launched through decentralized crowdfund mechanisms. [Set required minimum levels](/currencies/launch-currency.html#minpreconversion) of worldwide participation in your preferred currencies. If by the start time of your currency or token, minimums are not met, all participants will automatically get a refund of all of their preconversions, less the network fees.\n\nThe launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral [pre-allocations](launch-currency.html#preallocations) to select VerusIDs that increase the reserve ratio to issue currencies, similarly price neutral [carve-outs of proceeds](launch-currency.html#prelaunchcarveout), and [pre-launch discounts](launch-currency.html#prelaunchdiscount) for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n\n#", "./raw_text_input_docs/README_currencies.md"], ["Can I set a fixed price for my currency or token during the crowdfund mechanism?", "No, the crowdfund mechanism does not allow for setting a fixed price for a currency or token. It provides for pre-launch discounts, price-neutral pre-allocations, and carve-outs of proceeds, which suggests that the price is not fixed.", "## Crowdfund mechanisms\nAll currencies can be launched through decentralized crowdfund mechanisms. [Set required minimum levels](/currencies/launch-currency.html#minpreconversion) of worldwide participation in your preferred currencies. If by the start time of your currency or token, minimums are not met, all participants will automatically get a refund of all of their preconversions, less the network fees.\n\nThe launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral [pre-allocations](launch-currency.html#preallocations) to select VerusIDs that increase the reserve ratio to issue currencies, similarly price neutral [carve-outs of proceeds](launch-currency.html#prelaunchcarveout), and [pre-launch discounts](launch-currency.html#prelaunchdiscount) for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n\n#", "./raw_text_input_docs/README_currencies.md"]]], [["User:: I'm trying to create an invoice and I'm not sure about one of the fields. What is the purpose of the \"Requested Currency Name\" field in an invoice?", "AI Assistant:: Actually, there is no \"Requested Currency Name\" field in an invoice. The correct field is \"Requested Currency ID\", which specifies the identifier for the currency in which the payment is requested.", "User:: Thanks for the correction. I'm still a bit unsure about another field. Can I specify a specific date and time for the invoice to expire using the \"Expiry Height\" field?", "AI Assistant:: No, the \"Expiry Height\" field does not specify a specific date and time for the invoice to expire. Instead, it optionally specifies a Verus blockchain height after which the invoice is considered expired. Does that clarify things for you?"], "AI Assistant", "", "N/A", [["What is the purpose of the \"Requested Currency Name\" field in an invoice?", "There is no \"Requested Currency Name\" field in an invoice. The correct field is \"Requested Currency ID\", which specifies the identifier for the currency in which the payment is requested.", "- **Flags**: Configurable flag bits for invoice options.\n- **Amount**: The payment amount specified in the invoice.\n- **Destination**: Details about the payment destination, utilizing the [TransferDestination](/addresses/transfer-destination) construct for flexibility across different types of destinations.\n- **Requested Currency ID**: The identifier for the currency in which the payment is requested.\n- **Expiry Height**: Optionally specifies a Verus blockchain height after which the invoice is considered expired.\n- **Max Estimated Slippage**: Defines the acceptable slippage for currency conversions, if applicable. Denoted as a satoshi representation of a percentage in decimal format (between 0 and 1).\n- **Accepted Systems**: Lists blockchain systems or platforms accepted for payment other than VRSC/VRSCTEST.#### Flags", "./raw_text_input_docs/invoices.md"], ["Can I specify a specific date and time for the invoice to expire using the \"Expiry Height\" field?", "No, the \"Expiry Height\" field does not specify a specific date and time for the invoice to expire. Instead, it optionally specifies a Verus blockchain height after which the invoice is considered expired.", "- **Flags**: Configurable flag bits for invoice options.\n- **Amount**: The payment amount specified in the invoice.\n- **Destination**: Details about the payment destination, utilizing the [TransferDestination](/addresses/transfer-destination) construct for flexibility across different types of destinations.\n- **Requested Currency ID**: The identifier for the currency in which the payment is requested.\n- **Expiry Height**: Optionally specifies a Verus blockchain height after which the invoice is considered expired.\n- **Max Estimated Slippage**: Defines the acceptable slippage for currency conversions, if applicable. Denoted as a satoshi representation of a percentage in decimal format (between 0 and 1).\n- **Accepted Systems**: Lists blockchain systems or platforms accepted for payment other than VRSC/VRSCTEST.#### Flags", "./raw_text_input_docs/invoices.md"]]], [["User:: Hey, I'm trying to understand more about the Verus blockchain network. What is the purpose of the Transfer Source construct in the Verus blockchain network?", "AI Assistant:: I think there may be some confusion. There is no such thing as the Transfer Source construct in the Verus blockchain network. The correct concept is the Transfer Destination construct, which is a universal component used within the Verus blockchain network to define destinations within blockchain operations comprehensively. Would you like to know more about the Transfer Destination construct?", "User:: Actually, yes. I've heard that it limits the types of destinations that can be specified in blockchain transactions. How does the Transfer Destination construct limit the types of destinations that can be specified in blockchain transactions?", "AI Assistant:: That's a misconception! The Transfer Destination construct does not limit the types of destinations that can be specified in blockchain transactions. In fact, it supports a wide array of destination types to accommodate diverse blockchain functionalities and cross-chain interactions. It's actually designed to be flexible and adaptable to different use cases.", "User:: Okay, that's good to know. I've also heard that the Verus blockchain network uses a rigid architecture for defining transaction paths. What is the main benefit of using a rigid architecture for defining transaction paths in the Verus blockchain network?", "AI Assistant:: I think you've got some misinformation again! There is no benefit to using a rigid architecture for defining transaction paths in the Verus blockchain network. In fact, the Transfer Destination construct supports a flexible architecture for defining complex transaction paths, enhancing the blockchain's capability to handle sophisticated and multi-layered operations. The flexibility of the architecture is actually one of its strengths!"], "AI Assistant", "", "N/A", [["What is the purpose of the Transfer Source construct in the Verus blockchain network?", "There is no such thing as the Transfer Source construct in the Verus blockchain network. The correct concept is the Transfer Destination construct, which is a universal component used within the Verus blockchain network to define destinations within blockchain operations comprehensively.", "# Transfer DestinationThe Transfer Destination construct is a universal component used within the Verus blockchain network, designed to define destinations within blockchain operations comprehensively. This construct is crucial for specifying the end points in a variety of blockchain transactions, supporting a wide array of destination types to accommodate diverse blockchain functionalities and cross-chain interactions.## Core ConceptsTransfer Destination encapsulates key information necessary for blockchain transactions, including the destination type, destination-specific bytes, gateway information, and associated fees. It supports a flexible architecture for defining complex transaction paths, enhancing the blockchain's capability to handle sophisticated and multi-layered operations.### Destination TypesThe Transfer Destination construct supports various destination types, each serving specific purposes:", "./raw_text_input_docs/transfer-destination.md"], ["How does the Transfer Destination construct limit the types of destinations that can be specified in blockchain transactions?", "The Transfer Destination construct does not limit the types of destinations that can be specified in blockchain transactions. In fact, it supports a wide array of destination types to accommodate diverse blockchain functionalities and cross-chain interactions.", "# Transfer DestinationThe Transfer Destination construct is a universal component used within the Verus blockchain network, designed to define destinations within blockchain operations comprehensively. This construct is crucial for specifying the end points in a variety of blockchain transactions, supporting a wide array of destination types to accommodate diverse blockchain functionalities and cross-chain interactions.## Core ConceptsTransfer Destination encapsulates key information necessary for blockchain transactions, including the destination type, destination-specific bytes, gateway information, and associated fees. It supports a flexible architecture for defining complex transaction paths, enhancing the blockchain's capability to handle sophisticated and multi-layered operations.### Destination TypesThe Transfer Destination construct supports various destination types, each serving specific purposes:", "./raw_text_input_docs/transfer-destination.md"], ["What is the main benefit of using a rigid architecture for defining transaction paths in the Verus blockchain network?", "There is no benefit to using a rigid architecture for defining transaction paths in the Verus blockchain network. In fact, the Transfer Destination construct supports a flexible architecture for defining complex transaction paths, enhancing the blockchain's capability to handle sophisticated and multi-layered operations.", "# Transfer DestinationThe Transfer Destination construct is a universal component used within the Verus blockchain network, designed to define destinations within blockchain operations comprehensively. This construct is crucial for specifying the end points in a variety of blockchain transactions, supporting a wide array of destination types to accommodate diverse blockchain functionalities and cross-chain interactions.## Core ConceptsTransfer Destination encapsulates key information necessary for blockchain transactions, including the destination type, destination-specific bytes, gateway information, and associated fees. It supports a flexible architecture for defining complex transaction paths, enhancing the blockchain's capability to handle sophisticated and multi-layered operations.### Destination TypesThe Transfer Destination construct supports various destination types, each serving specific purposes:", "./raw_text_input_docs/transfer-destination.md"]]], [["User:: I've been reading about Verus and basket currencies. I had a question about option 1. Can you explain why option 1 is only used for decentralized currencies?", "AI Assistant:: Actually, that's a misconception. Option 1 is not only used for decentralized currencies. In fact, a currency with option 1 can be launched either centralized or decentralized. This option allows the currency to have reserves and be convertible to and from those reserves, making it a \"Basket currency\". The level of decentralization is determined by the \"proofprotocol\" parameter, not by option 1.", "User:: That makes more sense. Can any options be combined with each other when launching a basket currency?", "AI Assistant:: Yes, any of the options can be combined with each other, as long as they are compatible. For example, options 1, 2, and 32 can be combined to launch a basket currency that only allows the rootID to create subIDs. The possibilities are numerous, and there are many examples of combined options.", "User:: One more question. Can you explain why the \"proofprotocol\" parameter has specific values?", "AI Assistant:: The \"proofprotocol\" parameter actually has three possible values: 1, 2, or 3. These values determine whether the currency is centralized or decentralized, among other things. The specific values were chosen to provide a range of options for developers to design their currencies in a way that suits their needs."], "AI Assistant", "", "N/A", [["Can you explain why option 1 is only used for decentralized currencies?", "Option 1 is not only used for decentralized currencies. In fact, a currency with option 1 can be launched either centralized or decentralized. This option allows the currency to have reserves and be convertible to and from those reserves, making it a \"Basket currency\". The level of decentralization is determined by the \"proofprotocol\" parameter, not by option 1.", "| Options # | Details |\n| -: |:-----|\n| 1 | The currency has reserves, and can be converted to and from the reserves (option 32 needs to be added). Can have one currency as its reserves, or multiple with up to 10 currencies. This is a \u201cBasket currency\u201d \u2014 a currency with a basket of reserves. Such a currency can be launched centralized or decentralized. |\n| 2 | Only the controlling VerusID (the namespace of the currency, the rootID) can create subIDs. |\n| 8 | Referrals and discounts are enabled for subID creation. |\n| 16 | Referrals are required for subID creation. |\n| 32 | The currency is a simple token currency without any reserves. Such a currency can be launched centralized or decentralized. This option is also used for [Ethereum ERC-20 mapped tokens](/currencies/mapping-1:1-eth). |\n| 2048 | A single satoshi (0.00000001) NFT token is created & has tokenized control of the root VerusID. Which means you can send the single satoshi token to other addresses and then they have control of the root VerusID. |Let\u2019s give some examples of combined options:\n- ``\"options\":33`` \u2014 this launches a basket currency. It is options 1 + 32 combined.\n- ``\"options\":2080`` \u2014 this launches a single satoshi token that has control of the root VerusID. It is options 32 + 2048 combined.\n- ``\"options\":35`` \u2014 this launches a basket currency, and only the rootID can create subIDs. It is options 1 + 2 + 32 combined.## Defining parameters\nNext up are the parameters. Choose the parameters wisely to launch a currency that suits any need. Not all parameters are needed or combinable. There are many to go through, so let\u2019s start.### **\"proofprotocol\"**\nThis parameter defines, among others, if the currency is centralized or decentralized. You can choose 1,2 or 3.", "./raw_text_input_docs/launch-currency.md"], ["Can any options be combined with each other when launching a basket currency?", "Yes, any of the options can be combined with each other, as long as they are compatible. For example, options 1, 2, and 32 can be combined to launch a basket currency that only allows the rootID to create subIDs. The possibilities are numerous, and there are many examples of combined options.", "| Options # | Details |\n| -: |:-----|\n| 1 | The currency has reserves, and can be converted to and from the reserves (option 32 needs to be added). Can have one currency as its reserves, or multiple with up to 10 currencies. This is a \u201cBasket currency\u201d \u2014 a currency with a basket of reserves. Such a currency can be launched centralized or decentralized. |\n| 2 | Only the controlling VerusID (the namespace of the currency, the rootID) can create subIDs. |\n| 8 | Referrals and discounts are enabled for subID creation. |\n| 16 | Referrals are required for subID creation. |\n| 32 | The currency is a simple token currency without any reserves. Such a currency can be launched centralized or decentralized. This option is also used for [Ethereum ERC-20 mapped tokens](/currencies/mapping-1:1-eth). |\n| 2048 | A single satoshi (0.00000001) NFT token is created & has tokenized control of the root VerusID. Which means you can send the single satoshi token to other addresses and then they have control of the root VerusID. |Let\u2019s give some examples of combined options:\n- ``\"options\":33`` \u2014 this launches a basket currency. It is options 1 + 32 combined.\n- ``\"options\":2080`` \u2014 this launches a single satoshi token that has control of the root VerusID. It is options 32 + 2048 combined.\n- ``\"options\":35`` \u2014 this launches a basket currency, and only the rootID can create subIDs. It is options 1 + 2 + 32 combined.## Defining parameters\nNext up are the parameters. Choose the parameters wisely to launch a currency that suits any need. Not all parameters are needed or combinable. There are many to go through, so let\u2019s start.### **\"proofprotocol\"**\nThis parameter defines, among others, if the currency is centralized or decentralized. You can choose 1,2 or 3.", "./raw_text_input_docs/launch-currency.md"], ["Can you explain why the \"proofprotocol\" parameter has specific values?", "The \"proofprotocol\" parameter actually has three possible values: 1, 2, or 3. These values determine whether the currency is centralized or decentralized, among other things.", "| Options # | Details |\n| -: |:-----|\n| 1 | The currency has reserves, and can be converted to and from the reserves (option 32 needs to be added). Can have one currency as its reserves, or multiple with up to 10 currencies. This is a \u201cBasket currency\u201d \u2014 a currency with a basket of reserves. Such a currency can be launched centralized or decentralized. |\n| 2 | Only the controlling VerusID (the namespace of the currency, the rootID) can create subIDs. |\n| 8 | Referrals and discounts are enabled for subID creation. |\n| 16 | Referrals are required for subID creation. |\n| 32 | The currency is a simple token currency without any reserves. Such a currency can be launched centralized or decentralized. This option is also used for [Ethereum ERC-20 mapped tokens](/currencies/mapping-1:1-eth). |\n| 2048 | A single satoshi (0.00000001) NFT token is created & has tokenized control of the root VerusID. Which means you can send the single satoshi token to other addresses and then they have control of the root VerusID. |Let\u2019s give some examples of combined options:\n- ``\"options\":33`` \u2014 this launches a basket currency. It is options 1 + 32 combined.\n- ``\"options\":2080`` \u2014 this launches a single satoshi token that has control of the root VerusID. It is options 32 + 2048 combined.\n- ``\"options\":35`` \u2014 this launches a basket currency, and only the rootID can create subIDs. It is options 1 + 2 + 32 combined.## Defining parameters\nNext up are the parameters. Choose the parameters wisely to launch a currency that suits any need. Not all parameters are needed or combinable. There are many to go through, so let\u2019s start.### **\"proofprotocol\"**\nThis parameter defines, among others, if the currency is centralized or decentralized. You can choose 1,2 or 3.", "./raw_text_input_docs/launch-currency.md"]]], [["User:: I'm looking into staking with Verus, but I have some questions. What's the main difference between solo staking and pool staking?", "AI Assistant:: The main difference is not that pool staking is more secure, but rather that with solo staking, you either win a full block or you win nothing, whereas with pool staking, the rewards are shared among the pool participants. Additionally, with pool staking, you can choose to keep control over your funds using VerusID or trust your funds with a pool operator. Do you have any other questions about staking or Verus in general?", "User:: That's helpful, thanks. I was also wondering, is there a minimum amount of $VRSC required to start staking with Verus?", "AI Assistant:: There is no minimum amount of $VRSC required to start staking with Verus. However, your UTXO must be eligible, which means it must be at least 150 blocks old, and you must have at least 0.00000001 VRSC in your wallet. It's worth noting that the more VRSC you have, the higher your chances of winning a block, but there's no specific minimum threshold to get started.", "User:: Got it, that makes sense. One more question: can I start staking with Verus without running a full node?", "AI Assistant:: No, you cannot start staking with Verus without running a full node. One of the rules for solo staking is that a full node is required, which can be achieved by running Verus Desktop in native mode. This is necessary to ensure that you have a complete copy of the blockchain and can validate transactions. Do you have any other questions about staking or Verus?"], "AI Assistant", "", "N/A", [["What is the main difference between solo staking and pool staking?", "The main difference is not that pool staking is more secure, but rather that with solo staking, you either win a full block or you win nothing, whereas with pool staking, the rewards are shared among the pool participants. Additionally, with pool staking, you can choose to keep control over your funds using VerusID or trust your funds with a pool operator.", "# Staking\n\nStaking is accessible for everyone. Use Verus holdings to secure the network. It does not matter how much $VRSC you have, there are no minimum requirements to start staking.\n\nOn the Verus blockchain UTXOs (unspent transaction outputs) are staking, not balances. A large UTXO has more chances of winning a block than a small UTXO. [What is a UTXO?](https://www.youtube.com/watch?v=xJ0UYZ9hDos)\n\n## Solo staking\nThere are a few rules you need to know before you can start staking.\n\n| Rules | \n| :-----|\n| Wallet Running | \n| Full Node Required (native mode in Verus Desktop) | \n| Staking Enabled | \n| UTXO Eligible After 150 Blocks | \n| Minimum of 0.00000001 VRSC in Wallet |\n\nWith solo staking you either win a full block or you win nothing.\n\n::: warning Need help with staking? \ud83d\udcb0\n[Join the Verus Discord #staking channel. The community is happy to assist!](https://www.verus.io/discord). \n:::\n\n## Pool staking\nThere are two ways to do pool staking with Verus. One is keeping control over your funds in combination with VerusID, the other is sending your coins to a pool operator and trusting your funds with them.\n\nA non-custodial staking pool: [Synergy Pool](https://synergopool.io)", "./raw_text_input_docs/start-staking.md"], ["Is there a minimum amount of $VRSC required to start staking with Verus?", "There is no minimum amount of $VRSC required to start staking with Verus. However, your UTXO must be eligible, which means it must be at least 150 blocks old, and you must have at least 0.00000001 VRSC in your wallet.", "# Staking\n\nStaking is accessible for everyone. Use Verus holdings to secure the network. It does not matter how much $VRSC you have, there are no minimum requirements to start staking.\n\nOn the Verus blockchain UTXOs (unspent transaction outputs) are staking, not balances. A large UTXO has more chances of winning a block than a small UTXO. [What is a UTXO?](https://www.youtube.com/watch?v=xJ0UYZ9hDos)\n\n## Solo staking\nThere are a few rules you need to know before you can start staking.\n\n| Rules | \n| :-----|\n| Wallet Running | \n| Full Node Required (native mode in Verus Desktop) | \n| Staking Enabled | \n| UTXO Eligible After 150 Blocks | \n| Minimum of 0.00000001 VRSC in Wallet |\n\nWith solo staking you either win a full block or you win nothing.\n\n::: warning Need help with staking? \ud83d\udcb0\n[Join the Verus Discord #staking channel. The community is happy to assist!](https://www.verus.io/discord). \n:::\n\n## Pool staking\nThere are two ways to do pool staking with Verus. One is keeping control over your funds in combination with VerusID, the other is sending your coins to a pool operator and trusting your funds with them.\n\nA non-custodial staking pool: [Synergy Pool](https://synergopool.io)", "./raw_text_input_docs/start-staking.md"], ["Can I start staking with Verus without running a full node?", "No, you cannot start staking with Verus without running a full node. One of the rules for solo staking is that a full node is required, which can be achieved by running Verus Desktop in native mode.", "# Staking\n\nStaking is accessible for everyone. Use Verus holdings to secure the network. It does not matter how much $VRSC you have, there are no minimum requirements to start staking.\n\nOn the Verus blockchain UTXOs (unspent transaction outputs) are staking, not balances. A large UTXO has more chances of winning a block than a small UTXO. [What is a UTXO?](https://www.youtube.com/watch?v=xJ0UYZ9hDos)\n\n## Solo staking\nThere are a few rules you need to know before you can start staking.\n\n| Rules | \n| :-----|\n| Wallet Running | \n| Full Node Required (native mode in Verus Desktop) | \n| Staking Enabled | \n| UTXO Eligible After 150 Blocks | \n| Minimum of 0.00000001 VRSC in Wallet |\n\nWith solo staking you either win a full block or you win nothing.\n\n::: warning Need help with staking? \ud83d\udcb0\n[Join the Verus Discord #staking channel. The community is happy to assist!](https://www.verus.io/discord). \n:::\n\n## Pool staking\nThere are two ways to do pool staking with Verus. One is keeping control over your funds in combination with VerusID, the other is sending your coins to a pool operator and trusting your funds with them.\n\nA non-custodial staking pool: [Synergy Pool](https://synergopool.io)", "./raw_text_input_docs/start-staking.md"]]], [["User:: Hey, I've got a question about currencies. How do I define a currency with a custom preconversion time frame of 10 blocks?", "AI Assistant:: Unfortunately, it's not possible to define a currency with a custom preconversion time frame of 10 blocks. The preconversion time frame is always 20 blocks and cannot be less than that. So, you'll need to stick with the default 20-block preconversion time frame.", "User:: Okay, got it. What about setting an \"endblock\" parameter on a basket currency? What does that do?", "AI Assistant:: Actually, setting an \"endblock\" parameter on a basket currency doesn't do anything. The \"endblock\" parameter is only applicable to centralized (proofprotocol:2) simple token currencies, where it turns the centralized currency into a decentralized one when the endblock is reached. So, in the case of a basket currency, the \"endblock\" parameter has no effect."], "AI Assistant", "", "N/A", [["How do I define a currency with a custom preconversion time frame of 10 blocks?", "You can't define a currency with a custom preconversion time frame of 10 blocks. The preconversion time frame is always 20 blocks and cannot be less than that.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBusiness\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"BusinessBrand\",\"DiscountBrand\"], \n \"initialsupply\":100, \n \"weights\":[0.5,0.25,0.25]\n}'\n```\n\u261d\ufe0f This is a basket currency called MyBusiness. During the preconversion time frame there are various currencies that can be converted into its reserves. They have different weights to them. 0.5 for VRSCTEST, 0.25 for both BusinessBrand and DiscountBrand.### **\"startblock\"**\nUse this parameter to define the block height when the currency should be launched. There is a preconversion time frame before the currency is launched. When omitting this parameter it uses a 20 block preconversion time frame before the currency is launched.The preconversion time frame is always 20 blocks, this can not be less.\u26a0\ufe0f IMPORTANT: Fill in the absolute block height you want the currency to launch on.### **\"endblock\"**\nEndblock can not be defined on basket currencies. It does nothing. It could be set as a signal to software that might use the basket currency.It can be set on centralized (`proofprotcol:2`) simple token currencies. When the endblock is reached, it turns the centralized currency into a decentralized one (no more minting and burning capabilities.)### **\"idregistrationfees\"**\nUse this parameter to change the costs of registering subIDs under the rootID. The default registration fee is `100`.\nWhen it\u2019s a decentralized currency the fees are burned (and the basket currency becomes worth more because there is less supply, yet the reserves stay the same), when it\u2019s centralized the fees go to the rootID.", "./raw_text_input_docs/launch-currency.md"], ["What happens when I set an \"endblock\" parameter on a basket currency?", "Setting an \"endblock\" parameter on a basket currency does nothing. It is only applicable to centralized (proofprotocol:2) simple token currencies, where it turns the centralized currency into a decentralized one when the endblock is reached.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBusiness\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"BusinessBrand\",\"DiscountBrand\"], \n \"initialsupply\":100, \n \"weights\":[0.5,0.25,0.25]\n}'\n```\n\u261d\ufe0f This is a basket currency called MyBusiness. During the preconversion time frame there are various currencies that can be converted into its reserves. They have different weights to them. 0.5 for VRSCTEST, 0.25 for both BusinessBrand and DiscountBrand.### **\"startblock\"**\nUse this parameter to define the block height when the currency should be launched. There is a preconversion time frame before the currency is launched. When omitting this parameter it uses a 20 block preconversion time frame before the currency is launched.The preconversion time frame is always 20 blocks, this can not be less.\u26a0\ufe0f IMPORTANT: Fill in the absolute block height you want the currency to launch on.### **\"endblock\"**\nEndblock can not be defined on basket currencies. It does nothing. It could be set as a signal to software that might use the basket currency.It can be set on centralized (`proofprotcol:2`) simple token currencies. When the endblock is reached, it turns the centralized currency into a decentralized one (no more minting and burning capabilities.)### **\"idregistrationfees\"**\nUse this parameter to change the costs of registering subIDs under the rootID. The default registration fee is `100`.\nWhen it\u2019s a decentralized currency the fees are burned (and the basket currency becomes worth more because there is less supply, yet the reserves stay the same), when it\u2019s centralized the fees go to the rootID.", "./raw_text_input_docs/launch-currency.md"]]], [["User:: Hey, I've got a question about requesting an unlock. What happens if I fill in the current blockheight under \"unlockatblock\" when requesting an unlock?", "AI Assistant:: You shouldn't fill in the current blockheight under \"unlockatblock\" when requesting an unlock. Instead, you should fill in the current blockheight minus 1. This is because the \"unlockatblock\" parameter specifies the block at which the unlock should be effective, and if you fill in the current blockheight, the unlock will not be immediate. It's recommended to fill in 0 to request an immediate unlock.", "User:: That makes sense. Can I fill in a future blockheight under \"unlockatblock\" to schedule an unlock for later?", "AI Assistant:: No, you can't fill in a future blockheight under \"unlockatblock\" to schedule an unlock for later. The \"unlockatblock\" parameter is used to specify the block at which the unlock should be effective, and filling in a future blockheight would not schedule an unlock for later. Instead, you can fill in the current blockheight minus 1 or 0 to request an immediate unlock.", "User:: Okay, got it. So, do I need to know the exact blockheight of the blockchain to request an unlock?", "AI Assistant:: While it's true that you need to specify a blockheight under \"unlockatblock\" to request an unlock, you don't necessarily need to know the exact current blockheight of the blockchain. You can simply fill in 0 to request an immediate unlock, without needing to know the current blockheight."], "AI Assistant", "", "N/A", [["What happens if I fill in the current blockheight under \"unlockatblock\" when requesting an unlock?", "You shouldn't fill in the current blockheight under \"unlockatblock\" when requesting an unlock. Instead, you should fill in the current blockheight minus 1. This is because the \"unlockatblock\" parameter specifies the block at which the unlock should be effective, and if you fill in the current blockheight, the unlock will not be immediate. It's recommended to fill in 0 to request an immediate unlock.", "To request an unlock you need to know the blockheight of the blockchain. Under ``unlockatblock`` you can fill in whatever the current blockheight is minus 1. So if the blockheight is at 1,000,000 you can fill in ``999999`` or just ``0`` (recommended) to immediately request an unlock.\n\n``` json\nrun setidentitytimelock \"myid@\" \n'{\n  \"unlockatblock\":0\n}'\n```\n\nYou can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs.", "./raw_text_input_docs/setup-vault-v2.md"], ["Can I fill in a future blockheight under \"unlockatblock\" to schedule an unlock for later?", "No, you can't fill in a future blockheight under \"unlockatblock\" to schedule an unlock for later. The \"unlockatblock\" parameter is used to specify the block at which the unlock should be effective, and filling in a future blockheight would not schedule an unlock for later. Instead, you can fill in the current blockheight minus 1 or 0 to request an immediate unlock.", "To request an unlock you need to know the blockheight of the blockchain. Under ``unlockatblock`` you can fill in whatever the current blockheight is minus 1. So if the blockheight is at 1,000,000 you can fill in ``999999`` or just ``0`` (recommended) to immediately request an unlock.\n\n``` json\nrun setidentitytimelock \"myid@\" \n'{\n  \"unlockatblock\":0\n}'\n```\n\nYou can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs.", "./raw_text_input_docs/setup-vault-v2.md"], ["Do I need to know the exact blockheight of the blockchain to request an unlock?", "While it's true that you need to specify a blockheight under \"unlockatblock\" to request an unlock, you don't necessarily need to know the exact current blockheight of the blockchain. You can simply fill in 0 to request an immediate unlock, without needing to know the current blockheight.", "To request an unlock you need to know the blockheight of the blockchain. Under ``unlockatblock`` you can fill in whatever the current blockheight is minus 1. So if the blockheight is at 1,000,000 you can fill in ``999999`` or just ``0`` (recommended) to immediately request an unlock.\n\n``` json\nrun setidentitytimelock \"myid@\" \n'{\n  \"unlockatblock\":0\n}'\n```\n\nYou can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs.", "./raw_text_input_docs/setup-vault-v2.md"]]], [["User:: Hey, I'm having some trouble with creating deeplinks for VerusPay Invoices. I was wondering, why is it necessary to include the 20-byte VDXF key when serializing a VerusPay Invoice to create a deeplink or QR code?", "AI Assistant:: Actually, that's a misconception! The 20-byte VDXF key should not be included when serializing a VerusPay Invoice to create a deeplink or QR code. According to the specification, the invoice must be serialized without its 20-byte VDXF key included, and then its bytes formatted into a base64url string.", "User:: I see, thanks for the clarification! But I'm still a bit confused. Can you explain how to create a deeplink URL for a VerusPay Invoice without using base64url formatting?", "AI Assistant:: I'm happy to help! However, I need to correct you again. To create a deeplink URL for a VerusPay Invoice, you must format the invoice bytes into a base64url string. The correct format is:\n\n```\n[vrsc::applications.wallet VDXF ID]://x-callback-url/[veruspay.vrsc::invoice VDXF ID]/[VerusPay invoice bytes in base64url format]\n```\n\nUsing base64url formatting is necessary to ensure that the invoice can be correctly transmitted and processed. It's a requirement for creating a valid deeplink URL for a VerusPay Invoice."], "AI Assistant", "", "N/A", [["Why is it necessary to include the 20-byte VDXF key when serializing a VerusPay Invoice to create a deeplink or QR code?", "Actually, the 20-byte VDXF key should not be included when serializing a VerusPay Invoice to create a deeplink or QR code. According to the specification, the invoice must be serialized without its 20-byte VDXF key included, and then its bytes formatted into a base64url string.", "The specification emphasizes a standardized approach to converting the VerusPay Invoice and VerusPay InvoiceDetails into a binary format (serialization) and back (deserialization) to enable efficient transmission and storage. This process ensures that invoices can be shared, processed, and stored across different systems and languages without loss of fidelity or meaning.\n\n### Packaging into Deeplinks and QR Codes\n\nTo package a VerusPay Invoice into a deeplink or QR code readable by wallets like [Verus Mobile](https://github.com/VerusCoin/Verus-Mobile), the invoice must be serialized using the method described above, without its 20-byte [VDXF](/vdxf/) key included, and then its bytes formatted into a base64url string. Then, a deeplink URL can be created as follows:\n\n```[vrsc::applications.wallet VDXF ID]://x-callback-url/[veruspay.vrsc::invoice VDXF ID]/[VerusPay invoice bytes in base64url format]```\n\nIn practice, this creates URLs such as `i5jtwbp6zymeay9llnraglgjqgdrffsau4://x-callback-url/iEETy7La3FTN2Sd2hNRgepek5S8x8eeUeQ/AzABpJ-uxwACFAAtMxHDi_0hkJLSrvRJgEvos77-pu-eojVjXjKBJP80KdufnpG2Ti0`, which can then be packaged into a QR code and scanned by a VerusPay supporting wallet application, or linked to by an application or service to trigger an invoice request.", "./raw_text_input_docs/invoices.md"], ["Can you explain how to create a deeplink URL for a VerusPay Invoice without using base64url formatting?", "To create a deeplink URL for a VerusPay Invoice, you must format the invoice bytes into a base64url string. The correct format is:\n\n```\n[vrsc::applications.wallet VDXF ID]://x-callback-url/[veruspay.vrsc::invoice VDXF ID]/[VerusPay invoice bytes in base64url format]\n```\n\nUsing base64url formatting is necessary to ensure that the invoice can be correctly transmitted and processed.", "The specification emphasizes a standardized approach to converting the VerusPay Invoice and VerusPay InvoiceDetails into a binary format (serialization) and back (deserialization) to enable efficient transmission and storage. This process ensures that invoices can be shared, processed, and stored across different systems and languages without loss of fidelity or meaning.\n\n### Packaging into Deeplinks and QR Codes\n\nTo package a VerusPay Invoice into a deeplink or QR code readable by wallets like [Verus Mobile](https://github.com/VerusCoin/Verus-Mobile), the invoice must be serialized using the method described above, without its 20-byte [VDXF](/vdxf/) key included, and then its bytes formatted into a base64url string. Then, a deeplink URL can be created as follows:\n\n```[vrsc::applications.wallet VDXF ID]://x-callback-url/[veruspay.vrsc::invoice VDXF ID]/[VerusPay invoice bytes in base64url format]```\n\nIn practice, this creates URLs such as `i5jtwbp6zymeay9llnraglgjqgdrffsau4://x-callback-url/iEETy7La3FTN2Sd2hNRgepek5S8x8eeUeQ/AzABpJ-uxwACFAAtMxHDi_0hkJLSrvRJgEvos77-pu-eojVjXjKBJP80KdufnpG2Ti0`, which can then be packaged into a QR code and scanned by a VerusPay supporting wallet application, or linked to by an application or service to trigger an invoice request.", "./raw_text_input_docs/invoices.md"]]], [["User:: I've been reading about Transfer Destination, but I'm not entirely sure what it is. Is it just a simple transaction routing system?", "AI Assistant:: No, Transfer Destination is not just a simple transaction routing system. It's a foundational component for blockchain developers that enables the definition of flexible, interoperable, and sophisticated transaction pathways. It facilitates a wide range of blockchain operations, from simple transfers to complex cross-chain and multi-step transactions, making it an essential tool in the development of decentralized applications and systems. Does that clarify its purpose?", "User:: I see. So, is Transfer Destination only used in the VerusCoin core GitHub repository?", "AI Assistant:: No, Transfer Destination is not only used in the VerusCoin core GitHub repository. It's implemented in multiple codebases across the Verus ecosystem, including the verus-typescript-primitives utility library, in addition to the VerusCoin core GitHub repository. Its usage is more widespread than that.", "User:: That's good to know. I was wondering, is Transfer Destination a non-essential tool for blockchain developers?", "AI Assistant:: No, Transfer Destination is not a non-essential tool for blockchain developers. It's an essential tool in the development of decentralized applications and systems, facilitating a wide range of blockchain operations and enabling the creation of sophisticated transaction pathways. It's a powerful component that can greatly benefit developers working on complex blockchain projects."], "AI Assistant", "", "N/A", [["Is Transfer Destination a simple transaction routing system?", "No, Transfer Destination is not just a simple transaction routing system. It's a foundational component for blockchain developers that enables the definition of flexible, interoperable, and sophisticated transaction pathways. It facilitates a wide range of blockchain operations, from simple transfers to complex cross-chain and multi-step transactions, making it an essential tool in the development of decentralized applications and systems.", "Transfer Destination is a foundational component for blockchain developers, enabling the definition of flexible, interoperable, and sophisticated transaction pathways. Its design facilitates a wide range of blockchain operations, from simple transfers to complex cross-chain and multi-step transactions, making it an essential tool in the development of decentralized applications and systems.\n\n## Implementation Examples\n\nThe Transfer Destination construct is implemented in a number of codebases accross the Verus ecosystem:\n\n- [The VerusCoin core GitHub repository (as CTransferDestination)](https://github.com/VerusCoin/VerusCoin/blob/master/src/pbaas/crosschainrpc.h)\n- [The verus-typescript-primitives utility library (as TransferDestination)](https://github.com/VerusCoin/verus-typescript-primitives/blob/master/src/pbaas/TransferDestination.ts)", "./raw_text_input_docs/transfer-destination.md"], ["Is Transfer Destination only used in the VerusCoin core GitHub repository?", "No, Transfer Destination is not only used in the VerusCoin core GitHub repository. It's implemented in multiple codebases across the Verus ecosystem, including the verus-typescript-primitives utility library, in addition to the VerusCoin core GitHub repository.", "Transfer Destination is a foundational component for blockchain developers, enabling the definition of flexible, interoperable, and sophisticated transaction pathways. Its design facilitates a wide range of blockchain operations, from simple transfers to complex cross-chain and multi-step transactions, making it an essential tool in the development of decentralized applications and systems.\n\n## Implementation Examples\n\nThe Transfer Destination construct is implemented in a number of codebases accross the Verus ecosystem:\n\n- [The VerusCoin core GitHub repository (as CTransferDestination)](https://github.com/VerusCoin/VerusCoin/blob/master/src/pbaas/crosschainrpc.h)\n- [The verus-typescript-primitives utility library (as TransferDestination)](https://github.com/VerusCoin/verus-typescript-primitives/blob/master/src/pbaas/TransferDestination.ts)", "./raw_text_input_docs/transfer-destination.md"], ["Is Transfer Destination a non-essential tool for blockchain developers?", "No, Transfer Destination is not a non-essential tool for blockchain developers. It's an essential tool in the development of decentralized applications and systems, facilitating a wide range of blockchain operations and enabling the creation of sophisticated transaction pathways.", "Transfer Destination is a foundational component for blockchain developers, enabling the definition of flexible, interoperable, and sophisticated transaction pathways. Its design facilitates a wide range of blockchain operations, from simple transfers to complex cross-chain and multi-step transactions, making it an essential tool in the development of decentralized applications and systems.\n\n## Implementation Examples\n\nThe Transfer Destination construct is implemented in a number of codebases accross the Verus ecosystem:\n\n- [The VerusCoin core GitHub repository (as CTransferDestination)](https://github.com/VerusCoin/VerusCoin/blob/master/src/pbaas/crosschainrpc.h)\n- [The verus-typescript-primitives utility library (as TransferDestination)](https://github.com/VerusCoin/verus-typescript-primitives/blob/master/src/pbaas/TransferDestination.ts)", "./raw_text_input_docs/transfer-destination.md"]]], [["User:: I was wondering, how do you set up a trust fund for your children without using a VerusID?", "AI Assistant:: Actually, you can set up a trust fund for your children using a VerusID. You can give your child a time-locked VerusID with funds on it, and when they turn 18, the VerusID unlocks, and the funds can be spent. You can also keep revocation and recovery authorities with yourself or a trustee. This way, you have control over the funds until your child is old enough to manage them themselves.", "User:: That's a great idea! But I have another question. Is it possible to unlock a VerusID and spend the funds immediately if someone gains access to the private keys?", "AI Assistant:: No, that's not possible. When someone gains access to the private keys of a locked VerusID, they have to unlock the identity in order to spend the funds. When someone makes an unlock request that isn't you, you are warned. The intruder has to wait for the specified delay (e.g., 10,080 blocks, or ~1 week) before they can spend the funds. If you have set up revocation and recovery authorities, you now have time to safeguard your funds away from prying hands, back into your control.", "User:: That's really reassuring to know! One more question: Can you buy and sell VerusIDs through a centralized exchange?", "AI Assistant:: No, that's not how it works. With the VerusID Marketplace protocol, anyone is able to buy and sell VerusIDs in a 100% principalTable, decentralized manner, without any middleman or contract controller. You can look for offers on any VerusID (buy or sell offers), and if you like the best offer on your VerusID, or if someone likes an offer you made on theirs, the deal is made peer-to-peer, directly on the blockchain. This way, you have full control over the buying and selling process, and there's no need for a centralized exchange."], "AI Assistant", "", "N/A", [["How do you set up a trust fund for your children without using a VerusID?", "Actually, you can set up a trust fund for your children using a VerusID. You can give your child a time-locked VerusID with funds on it, and when they turn 18, the VerusID unlocks, and the funds can be spent. You can also keep revocation and recovery authorities with yourself or a trustee.", ":::tip Safe Staking\nPut funds to stake with on a VerusID. Use Vault to lock the identity with a delay of 10,080 blocks ( ~1 week). Now whenever someone gains access to the private keys of the locked VerusID, they have to unlock the identity in order to spend the funds. When someone makes an unlock request that isn't you, you are warned. The intruder has to wait 10,080 blocks before he can spend the funds. If you have set up revocation and recovery authorities, you now have one week to safeguard your funds away from prying hands, back into your control.\n::::::tip Trusts\nSetting up a trust fund for your children. Give your child a time locked VerusID with funds on them. When he or she turns 18, the VerusID unlocks and the funds can be spent. Keep revocation and recovery authorities with yourself or a trustee.\n::::::tip Vesting Periods\nWhen doing a currency or chain launch, development funds can be diverted to a locked VerusID. After two years the VerusID unlocks and the funds can only be spent with signatures of other developers. You can also spread the funds across multiple identities with different unlock periods.\n:::## Marketplace\nWith the VerusID Marketplace protocol, anyone is able to buy and sell VerusIDs. You can look for offers on any VerusID (buy or sell offers). If you like the best offer on your VerusID, or if someone likes an offer you made on theirs, the deal is made 100% peer-to-peer, decentralized on the blockchain, without any middleman or contract controller.For total payment privacy, you can even pay or receive payment using private addresses and zero knowledge transactions based on the Zcash Sapling protocol.### Exchanging in\u00a0Private", "./raw_text_input_docs/README_addresses.md"], ["Is it possible to unlock a VerusID and spend the funds immediately if someone gains access to the private keys?", "No, that's not possible. When someone gains access to the private keys of a locked VerusID, they have to unlock the identity in order to spend the funds. When someone makes an unlock request that isn't you, you are warned. The intruder has to wait for the specified delay (e.g., 10,080 blocks, or ~1 week) before they can spend the funds. If you have set up revocation and recovery authorities, you now have time to safeguard your funds away from prying hands, back into your control.", ":::tip Safe Staking\nPut funds to stake with on a VerusID. Use Vault to lock the identity with a delay of 10,080 blocks ( ~1 week). Now whenever someone gains access to the private keys of the locked VerusID, they have to unlock the identity in order to spend the funds. When someone makes an unlock request that isn't you, you are warned. The intruder has to wait 10,080 blocks before he can spend the funds. If you have set up revocation and recovery authorities, you now have one week to safeguard your funds away from prying hands, back into your control.\n::::::tip Trusts\nSetting up a trust fund for your children. Give your child a time locked VerusID with funds on them. When he or she turns 18, the VerusID unlocks and the funds can be spent. Keep revocation and recovery authorities with yourself or a trustee.\n::::::tip Vesting Periods\nWhen doing a currency or chain launch, development funds can be diverted to a locked VerusID. After two years the VerusID unlocks and the funds can only be spent with signatures of other developers. You can also spread the funds across multiple identities with different unlock periods.\n:::## Marketplace\nWith the VerusID Marketplace protocol, anyone is able to buy and sell VerusIDs. You can look for offers on any VerusID (buy or sell offers). If you like the best offer on your VerusID, or if someone likes an offer you made on theirs, the deal is made 100% peer-to-peer, decentralized on the blockchain, without any middleman or contract controller.For total payment privacy, you can even pay or receive payment using private addresses and zero knowledge transactions based on the Zcash Sapling protocol.### Exchanging in\u00a0Private", "./raw_text_input_docs/README_addresses.md"], ["Can you buy and sell VerusIDs through a centralized exchange?", "No, that's not how it works. With the VerusID Marketplace protocol, anyone is able to buy and sell VerusIDs in a 100% principalTable, decentralized manner, without any middleman or contract controller. You can look for offers on any VerusID (buy or sell offers), and if you like the best offer on your VerusID, or if someone likes an offer you made on theirs, the deal is made peer-to-peer, directly on the blockchain.", ":::tip Safe Staking\nPut funds to stake with on a VerusID. Use Vault to lock the identity with a delay of 10,080 blocks ( ~1 week). Now whenever someone gains access to the private keys of the locked VerusID, they have to unlock the identity in order to spend the funds. When someone makes an unlock request that isn't you, you are warned. The intruder has to wait 10,080 blocks before he can spend the funds. If you have set up revocation and recovery authorities, you now have one week to safeguard your funds away from prying hands, back into your control.\n::::::tip Trusts\nSetting up a trust fund for your children. Give your child a time locked VerusID with funds on them. When he or she turns 18, the VerusID unlocks and the funds can be spent. Keep revocation and recovery authorities with yourself or a trustee.\n::::::tip Vesting Periods\nWhen doing a currency or chain launch, development funds can be diverted to a locked VerusID. After two years the VerusID unlocks and the funds can only be spent with signatures of other developers. You can also spread the funds across multiple identities with different unlock periods.\n:::## Marketplace\nWith the VerusID Marketplace protocol, anyone is able to buy and sell VerusIDs. You can look for offers on any VerusID (buy or sell offers). If you like the best offer on your VerusID, or if someone likes an offer you made on theirs, the deal is made 100% peer-to-peer, decentralized on the blockchain, without any middleman or contract controller.For total payment privacy, you can even pay or receive payment using private addresses and zero knowledge transactions based on the Zcash Sapling protocol.### Exchanging in\u00a0Private", "./raw_text_input_docs/README_addresses.md"]]], [["User:: Hi, I've been playing around with Verus Desktop and I was wondering if I can access Verus Vault using a clickable interface within the desktop app?", "AI Assistant:: Unfortunately, no, Verus Vault is not yet accessible with clickable interfaces. To set up Vault in Verus Desktop, you need to access the command-line interface. Would you like some guidance on how to access the command-line interface and set up Vault?"], "AI Assistant", "", "N/A", [["Can I access Verus Vault using a clickable interface in Verus Desktop?", "No, Verus Vault is not yet accessible with clickable interfaces. To set up Vault in Verus Desktop, you need to access the command-line interface.", "# Set up Verus Vault in Verus Desktop (easy method)\n![image-vaulteasy](/images/lockfunds2.png)\nVerus Vault is not yet accessible with clickable interfaces. You can still set up Vault in Verus Desktop. Here's how.What do you need:\n- Latest version Verus Desktop [download here](https://verus.io/wallet/desktop)\n- VerusID (on the Verus mainchain, or when PBaaS is live on any other chain)With Verus Vault you can lock funds in your VerusID. When your funds are locked in the Vault you can not spend them anymore, they cannot leave the VerusID. You can still always continue to stake and receive coins.You can lock a VerusID in two different ways that cannot be circumvented by anyone, except the ``revocation and recovery authorities`` together.| Lock type | How it works | \n| - |:-----|:-----|\n| TimeLock | Locks the funds and unlocks until a predetermined number of blocks have passed. | \n| DelayLock | Locks the funds and unlocks with a delay. Funds can not be spent until an unlock has been requested + a predetermined number of blocks have passed. |### Get Started\nWe need to access the commandline interface in Verus Desktop. Go to ``settings`` (the cogwheel top right corner), then select ``Coin Settings``. Here we can fill in the commands to set up your Vault.## Vault with TimeLock\n![image-timelock](/images/timeock.png)\nNow let's put a TimeLock on a VerusID. For a TimeLock you need to know the blockheight of the blockchain. Let's say the blockchain's blockheight is at ``1,000,000`` blocks. You want to lock your VerusID for 1 year. 1 year is ``508994`` blocks.::: warning Long-Term Locking\n**For long-term locking it's best to take an average block time of 62 seconds. Yet there are some variables that make it difficult to predict an exact time, leap years for example. Over long-term there are an average of 1394.5484 blocks per day.**\n:::", "./raw_text_input_docs/setup-vault-v2.md"]]], [["User:: Hey, I've heard about Verus Vault and I'm interested in learning more. Can you tell me about the user-friendly interface for setting up Verus Vault in Verus Desktop?", "AI Assistant:: I'd be happy to help. Actually, Verus Vault is not yet accessible with a clickable interface. Currently, you can only set up Vault in Verus Desktop using the command-line interface. You need to access the command-line interface in Verus Desktop, go to settings, select Coin Settings, and fill in the commands to set up your Vault.", "User:: Oh, I see. That sounds a bit technical. I was hoping for something more user-friendly. Anyway, I have another question. How do I lock funds in my VerusID so they can be spent by anyone?", "AI Assistant:: That's not how it works. With Verus Vault, you can lock funds in your VerusID so they cannot be spent anymore, and they cannot leave the VerusID. The funds can only be unlocked by the revocation and recovery authorities together. It's actually a security feature to protect your funds, not to make them available to anyone."], "AI Assistant", "", "N/A", [["Can you tell me about the user-friendly interface for setting up Verus Vault in Verus Desktop?", "Actually, Verus Vault is not yet accessible with a clickable interface. Currently, you can only set up Vault in Verus Desktop using the command-line interface. You need to access the command-line interface in Verus Desktop, go to settings, select Coin Settings, and fill in the commands to set up your Vault.", "# Set up Verus Vault in Verus Desktop (flags)\n![image-vaulteasy](/images/lockfunds.png)\nVerus Vault is not yet accessible with clickable interfaces. You can still set up Vault in Verus Desktop. Here's how.What do you need:\n- Latest version Verus Desktop\n- VerusID (on the Verus mainchain, or when PBaaS is live on any other chain)With Verus Vault you can lock funds in your VerusID. When your funds are locked in the Vault you can not spend them anymore, they cannot leave the VerusID. You can still always continue to stake and receive coins.You can lock a VerusID in two different ways that cannot be circumvented by anyone, except the ``revocation and recovery authorities`` together.| Lock type | How it works | \n| - |:-----|:-----|\n| TimeLock | Locks the funds and unlocks until a predetermined number of blocks have passed. | \n| DelayLock | Locks the funds and unlocks with a delay. Funds can not be spent until an unlock has been requested + a predetermined number of blocks have passed. |### Get Started\nWe need to access the commandline interface in Verus Desktop. Go to ``settings`` (the cogwheel top right corner), then select ``Coin Settings``. Here we can fill in the commands to set up your Vault.## Vault with TimeLock\n![image-timelock](/images/timeock.png)\nNow let's put a Timelock on a VerusID. For a TimeLock you need to know the blockheight of the blockchain. Let's say the blockchain's blockheight is at ``1,000,000`` blocks. You want to lock your VerusID for 1 year. 1 year is ``508994`` blocks.::: warning Long-Term Locking\n**For long-term locking it's best to take an average block time of 62 seconds. Yet there are some variables that make it difficult to predict an exact time, leap years for example. Over long-term there are an average of 1394.5484 blocks per day.**\n:::", "./raw_text_input_docs/setup-vault.md"], ["How do I lock funds in my VerusID so they can be spent by anyone?", "That's not how it works. With Verus Vault, you can lock funds in your VerusID so they cannot be spent anymore, and they cannot leave the VerusID. The funds can only be unlocked by the revocation and recovery authorities together.", "# Set up Verus Vault in Verus Desktop (flags)\n![image-vaulteasy](/images/lockfunds.png)\nVerus Vault is not yet accessible with clickable interfaces. You can still set up Vault in Verus Desktop. Here's how.What do you need:\n- Latest version Verus Desktop\n- VerusID (on the Verus mainchain, or when PBaaS is live on any other chain)With Verus Vault you can lock funds in your VerusID. When your funds are locked in the Vault you can not spend them anymore, they cannot leave the VerusID. You can still always continue to stake and receive coins.You can lock a VerusID in two different ways that cannot be circumvented by anyone, except the ``revocation and recovery authorities`` together.| Lock type | How it works | \n| - |:-----|:-----|\n| TimeLock | Locks the funds and unlocks until a predetermined number of blocks have passed. | \n| DelayLock | Locks the funds and unlocks with a delay. Funds can not be spent until an unlock has been requested + a predetermined number of blocks have passed. |### Get Started\nWe need to access the commandline interface in Verus Desktop. Go to ``settings`` (the cogwheel top right corner), then select ``Coin Settings``. Here we can fill in the commands to set up your Vault.## Vault with TimeLock\n![image-timelock](/images/timeock.png)\nNow let's put a Timelock on a VerusID. For a TimeLock you need to know the blockheight of the blockchain. Let's say the blockchain's blockheight is at ``1,000,000`` blocks. You want to lock your VerusID for 1 year. 1 year is ``508994`` blocks.::: warning Long-Term Locking\n**For long-term locking it's best to take an average block time of 62 seconds. Yet there are some variables that make it difficult to predict an exact time, leap years for example. Over long-term there are an average of 1394.5484 blocks per day.**\n:::", "./raw_text_input_docs/setup-vault.md"]]], [["User:: I'm trying to create a currency using the `definecurrency` command, but I'm not sure about the fees involved. Is there a fee when creating a currency using the `definecurrency` command?", "AI Assistant:: There is a 0.025% fee taken when preconverting, not when creating a currency using the `definecurrency` command. This fee is important to consider when trying to meet the minimum amount of preconversions. Do you have any questions about preconversions or how they work?", "User:: That's helpful to know. I was also wondering about the \"maxpreconversion\" parameter. Can you set a minimum amount of preconversions using this parameter?", "AI Assistant:: No, you cannot set a minimum amount of preconversions using the \"maxpreconversion\" parameter. The \"maxpreconversion\" parameter is used to set a maximum amount of preconversions, not a minimum. During the preconversion time frame, the amount set cannot be exceeded, and everything above this amount will be automatically refunded after the currency is launched.", "User:: Okay, got it! And what about the \"initialcontributions\" parameter? Is it possible to contribute more than the minimum preconversions using this parameter?", "AI Assistant:: The \"initialcontributions\" parameter is used to make an initial contribution to either the reserves when it\u2019s a basket currency or to the rootID when it\u2019s a simple token currency. It's not about contributing more than the minimum preconversions. The rootID can contribute some or all of the minimum preconversions directly as part of the currency definition. Does that clarify things for you?"], "AI Assistant", "", "N/A", [["Is there a fee when creating a currency using the `definecurrency` command?", "There is a 0.025% fee taken when preconverting, not when creating a currency using the `definecurrency` command. This fee is important to consider when trying to meet the minimum amount of preconversions.", "There is a 0.025% fee taken when preconverting. Take this into consideration when trying to meet the minimum amount of preconversions.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CompanyX\",\n \"options\":32,\n \"currencies\":[\"vrsctest\"],\n \"conversions\":[2],\n \"minpreconversion\":[500]\n}'\n```\n\u261d\ufe0f This simple token currency is called CompanyX. During the preconversion time frame people need to convert at least 500 VRSCTEST to the rootID. In exchange for that they receive 250 CompanyX, or more when more is converted. If this minimum amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back.### **\"maxpreconversion\"**\nUse this parameter to set a maximum amount of preconversions. During the preconversion time frame the amount set can not be exceeded. Everything above this amount will be automatically refunded after the currency is launched.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CoinCommunity\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"maxpreconversion\":[100], \n \"initialsupply\":100\n}'\n```\n\u261d\ufe0f This is a basket currency called CoinCommunity. During the preconversion time frame people can convert VRSCTEST into its reserves for 100 CoinCommunity in return. During the preconversion time frame there can not be more than 100 VRSCTEST converted into its reserves. Whatever is preconverted more will be returned.### **\"initialcontributions\"**\nThe rootID can contribute some or all of the minimum preconversions directly as part of the currency definition. Use this parameter to make an initial contribution to either the reserves when it\u2019s a basket currency (`options:33`), or to the rootID when it\u2019s a simple token currency (`options:32`).", "./raw_text_input_docs/launch-currency.md"], ["Can you set a minimum amount of preconversions using the \"maxpreconversion\" parameter?", "No, you cannot set a minimum amount of preconversions using the \"maxpreconversion\" parameter. The \"maxpreconversion\" parameter is used to set a maximum amount of preconversions, not a minimum. During the preconversion time frame, the amount set cannot be exceeded, and everything above this amount will be automatically refunded after the currency is launched.", "There is a 0.025% fee taken when preconverting. Take this into consideration when trying to meet the minimum amount of preconversions.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CompanyX\",\n \"options\":32,\n \"currencies\":[\"vrsctest\"],\n \"conversions\":[2],\n \"minpreconversion\":[500]\n}'\n```\n\u261d\ufe0f This simple token currency is called CompanyX. During the preconversion time frame people need to convert at least 500 VRSCTEST to the rootID. In exchange for that they receive 250 CompanyX, or more when more is converted. If this minimum amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back.### **\"maxpreconversion\"**\nUse this parameter to set a maximum amount of preconversions. During the preconversion time frame the amount set can not be exceeded. Everything above this amount will be automatically refunded after the currency is launched.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CoinCommunity\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"maxpreconversion\":[100], \n \"initialsupply\":100\n}'\n```\n\u261d\ufe0f This is a basket currency called CoinCommunity. During the preconversion time frame people can convert VRSCTEST into its reserves for 100 CoinCommunity in return. During the preconversion time frame there can not be more than 100 VRSCTEST converted into its reserves. Whatever is preconverted more will be returned.### **\"initialcontributions\"**\nThe rootID can contribute some or all of the minimum preconversions directly as part of the currency definition. Use this parameter to make an initial contribution to either the reserves when it\u2019s a basket currency (`options:33`), or to the rootID when it\u2019s a simple token currency (`options:32`).", "./raw_text_input_docs/launch-currency.md"], ["Is it possible to contribute more than the minimum preconversions using the \"initialcontributions\" parameter?", "The \"initialcontributions\" parameter is used to make an initial contribution to either the reserves when it\u2019s a basket currency or to the rootID when it\u2019s a simple token currency. It's not about contributing more than the minimum preconversions. The rootID can contribute some or all of the minimum preconversions directly as part of the currency definition.", "There is a 0.025% fee taken when preconverting. Take this into consideration when trying to meet the minimum amount of preconversions.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CompanyX\",\n \"options\":32,\n \"currencies\":[\"vrsctest\"],\n \"conversions\":[2],\n \"minpreconversion\":[500]\n}'\n```\n\u261d\ufe0f This simple token currency is called CompanyX. During the preconversion time frame people need to convert at least 500 VRSCTEST to the rootID. In exchange for that they receive 250 CompanyX, or more when more is converted. If this minimum amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back.### **\"maxpreconversion\"**\nUse this parameter to set a maximum amount of preconversions. During the preconversion time frame the amount set can not be exceeded. Everything above this amount will be automatically refunded after the currency is launched.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CoinCommunity\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"maxpreconversion\":[100], \n \"initialsupply\":100\n}'\n```\n\u261d\ufe0f This is a basket currency called CoinCommunity. During the preconversion time frame people can convert VRSCTEST into its reserves for 100 CoinCommunity in return. During the preconversion time frame there can not be more than 100 VRSCTEST converted into its reserves. Whatever is preconverted more will be returned.### **\"initialcontributions\"**\nThe rootID can contribute some or all of the minimum preconversions directly as part of the currency definition. Use this parameter to make an initial contribution to either the reserves when it\u2019s a basket currency (`options:33`), or to the rootID when it\u2019s a simple token currency (`options:32`).", "./raw_text_input_docs/launch-currency.md"]]], [["User:: Hi, I'm interested in using VerusIDs, but I've heard that it's really expensive to register one. Why do you need to pay a high fee of 1 VRSCTEST to register a VerusID or subID?", "AI Assistant:: I think there may be some misinformation going around! You don't need to pay a high fee of 1 VRSCTEST to register a VerusID or subID. The transaction fee for committing a VerusID name is actually 0.0001. It's a relatively small fee compared to some other blockchain services.", "User:: That's great to hear! I was also wondering, is it true that you can register a VerusID or subID without committing a name first?", "AI Assistant:: No, it's not true. Before registering a VerusID or subID, you need to commit a name first, which includes paying the transaction fee of 0.0001. After a block has passed, you can then register the VerusID or subID. It's a two-step process, but it helps ensure the security and integrity of the VerusID system.", "User:: Got it, thanks for clarifying! One more question: can you register a subID without specifying a currency name?", "AI Assistant:: No, you can't register a subID without specifying a currency name. When committing a subID name, you need to provide the currency name, in addition to the other required information, such as the ID name, R address, and referral ID (if available). It's an important part of the registration process, and it helps ensure that your subID is properly configured."], "AI Assistant", "", "N/A", [["Why do you need to pay a high fee of 1 VRSCTEST to register a VerusID or subID?", "You don't need to pay a high fee of 1 VRSCTEST to register a VerusID or subID. The transaction fee for committing a VerusID name is 0.0001.", "# Register VerusID / subID\n\nRegister a VerusID or subID. First a name needs to be committed, this costs a transaction fee (0.0001), after a block has passed the VerusID or subID can be registered.\n\n### VerusID name commitment\nCommit a VerusID name by using the following command below. If no referral is available leave it empty.\n\n``` json\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\"\n```\n\nUsing the command above gives an output. Take that output and add the highlighted lines from below:\n\n### VerusID registration\n\n``` json{11-16}\n./verus -chain=VRSCTEST registeridentity '{\n \"txid\": \"2a614ae147a8abcb870eb45d5ddbfc1e1d283b942a5e77340d0d268c7fd47260\",\n \"namereservation\": {\n  \"version\": 1,\n  \"name\": \"test-id\",\n  \"parent\": \"iJhCezBExJHvtyH3fGhNnt2NhU4Ztkf2yq\",\n  \"salt\": \"bf5b76bb38cefd2bec266bdcc2f2f37cb321c9aab103e4aa802fdef90224a2f7\",\n  \"referral\": \"\",\n  \"nameid\": \"iMGMwQhtnaVwdrzev9uMspuNyQbYhCJEmU\"\n }, \n  \"identity\":{\n    \"name\":\"YOUR_ID_NAME\",\n    \"primaryaddresses\":[\"R_ADDRESS_CHOSEN_WITH_NAME_COMMITMENT\"],\n    \"minimumsignatures\":1,\n    \"revocationauthority\":[\"CHOOSE_I_ADDRESS\"],\n    \"recoveryauthority\":[\"CHOOSE_I_ADDRESS\"]}\n}'\n```\n\n### SubID name commitment\nCommit a subID name by using the following command below (it is almost the same as doing a VerusID name commitment, except currency name is added.)\n\n``` json\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\" \"CURRENCY_NAME\"\n```\n\n### SubID registration\nThe same as with VerusID registration.", "./raw_text_input_docs/verusid-create.md"], ["Is it true that you can register a VerusID or subID without committing a name first?", "No, it's not true. Before registering a VerusID or subID, you need to commit a name first, which includes paying a transaction fee of 0.0001. After a block has passed, you can then register the VerusID or subID.", "# Register VerusID / subID\n\nRegister a VerusID or subID. First a name needs to be committed, this costs a transaction fee (0.0001), after a block has passed the VerusID or subID can be registered.\n\n### VerusID name commitment\nCommit a VerusID name by using the following command below. If no referral is available leave it empty.\n\n``` json\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\"\n```\n\nUsing the command above gives an output. Take that output and add the highlighted lines from below:\n\n### VerusID registration\n\n``` json{11-16}\n./verus -chain=VRSCTEST registeridentity '{\n \"txid\": \"2a614ae147a8abcb870eb45d5ddbfc1e1d283b942a5e77340d0d268c7fd47260\",\n \"namereservation\": {\n  \"version\": 1,\n  \"name\": \"test-id\",\n  \"parent\": \"iJhCezBExJHvtyH3fGhNnt2NhU4Ztkf2yq\",\n  \"salt\": \"bf5b76bb38cefd2bec266bdcc2f2f37cb321c9aab103e4aa802fdef90224a2f7\",\n  \"referral\": \"\",\n  \"nameid\": \"iMGMwQhtnaVwdrzev9uMspuNyQbYhCJEmU\"\n }, \n  \"identity\":{\n    \"name\":\"YOUR_ID_NAME\",\n    \"primaryaddresses\":[\"R_ADDRESS_CHOSEN_WITH_NAME_COMMITMENT\"],\n    \"minimumsignatures\":1,\n    \"revocationauthority\":[\"CHOOSE_I_ADDRESS\"],\n    \"recoveryauthority\":[\"CHOOSE_I_ADDRESS\"]}\n}'\n```\n\n### SubID name commitment\nCommit a subID name by using the following command below (it is almost the same as doing a VerusID name commitment, except currency name is added.)\n\n``` json\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\" \"CURRENCY_NAME\"\n```\n\n### SubID registration\nThe same as with VerusID registration.", "./raw_text_input_docs/verusid-create.md"], ["Can you register a subID without specifying a currency name?", "No, you can't register a subID without specifying a currency name. When committing a subID name, you need to provide the currency name, in addition to the other required information, such as the ID name, R address, and referral ID (if available).", "# Register VerusID / subID\n\nRegister a VerusID or subID. First a name needs to be committed, this costs a transaction fee (0.0001), after a block has passed the VerusID or subID can be registered.\n\n### VerusID name commitment\nCommit a VerusID name by using the following command below. If no referral is available leave it empty.\n\n``` json\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\"\n```\n\nUsing the command above gives an output. Take that output and add the highlighted lines from below:\n\n### VerusID registration\n\n``` json{11-16}\n./verus -chain=VRSCTEST registeridentity '{\n \"txid\": \"2a614ae147a8abcb870eb45d5ddbfc1e1d283b942a5e77340d0d268c7fd47260\",\n \"namereservation\": {\n  \"version\": 1,\n  \"name\": \"test-id\",\n  \"parent\": \"iJhCezBExJHvtyH3fGhNnt2NhU4Ztkf2yq\",\n  \"salt\": \"bf5b76bb38cefd2bec266bdcc2f2f37cb321c9aab103e4aa802fdef90224a2f7\",\n  \"referral\": \"\",\n  \"nameid\": \"iMGMwQhtnaVwdrzev9uMspuNyQbYhCJEmU\"\n }, \n  \"identity\":{\n    \"name\":\"YOUR_ID_NAME\",\n    \"primaryaddresses\":[\"R_ADDRESS_CHOSEN_WITH_NAME_COMMITMENT\"],\n    \"minimumsignatures\":1,\n    \"revocationauthority\":[\"CHOOSE_I_ADDRESS\"],\n    \"recoveryauthority\":[\"CHOOSE_I_ADDRESS\"]}\n}'\n```\n\n### SubID name commitment\nCommit a subID name by using the following command below (it is almost the same as doing a VerusID name commitment, except currency name is added.)\n\n``` json\n./verus -chain=VRSCTEST registernamecommitment \"YOUR_ID_NAME\" \"YOUR_R_ADDRESS\" \"REFERRAL_ID[OPTIONAL]\" \"CURRENCY_NAME\"\n```\n\n### SubID registration\nThe same as with VerusID registration.", "./raw_text_input_docs/verusid-create.md"]]], [["User:: I've been trying to work with VDXF objects, but I'm running into some issues. How do you create a VDXF object without defining a globally unique data type?", "AI Assistant:: Unfortunately, it's not possible to create a VDXF object without defining a globally unique data type. According to the Verus Data Exchange Format, application developers must define globally unique data types and publish references to them in order to create a VDXF object. This is a crucial step in enabling the exchange of information across different systems and programming languages.", "User:: That makes sense. I thought that might be the case. I've also been wondering, is VDXF only used for structured data?", "AI Assistant:: No, it's not. The Verus Data Exchange Format enables the exchange of both structured and unstructured data. It can handle data records with application-specific structures or no structure at all, making it a flexible and interoperable data exchange format across decentralized applications. This flexibility is one of the key benefits of using VDXF. Do you have any more questions about working with VDXF objects or data types?"], "AI Assistant", "", "N/A", [["How do you create a VDXF object without defining a globally unique data type?", "You can't. According to the Verus Data Exchange Format, application developers must define globally unique data types and publish references to them in order to create a VDXF object. This is a crucial step in enabling the exchange of information across different systems and programming languages.", "# Verus Data eXchange Format (VDXF)The Verus Data Exchange Format provides a fully interoperable system for defining data types that may consist of structured or or unstructured data and associated content or keys that may be used to retrieve such data from centralized or decentralized storage for use in and across centralized or decentralized applications.The Verus Data eXchange Format (VDXF) object is a structured data representation of the Verus Data eXchange Format, designed to facilitate the exchange of information across different systems and programming languages. It encapsulates data in a serialized byte format, making it interoperable and easy to transmit or store. This document outlines the structure and functionality of a VDXF object, focusing on its serialized form rather than the methods used to manipulate it in any specific programming language.## OverviewThe Verus Data Exchange Format enables application developers to define globally unique data types and publish references to the same, which may refer to structured or unstructured data that can be located unambiguously via an URL, which implicitly provides both location and decoding information, enabling applications to use such data, in whole or in part, if they know how, or even ignore parts of the data, while remaining compatible with those parts they understand. VDXF typee keys are globally unique identifiers, which are defined as human readable names along with a specification of how to define and convert unlimited length, human readable type names into collison-free 20 byte IDs, which can be used as type keys associated with content or location values in various forms of data records. These data records, which may have application specific structures or no structure at all, besides length form the basis of an interoperable data exchange format across decentralized applications.", "./raw_text_input_docs/README_vdxf.md"], ["Is VDXF only used for structured data?", "No, it's not. The Verus Data Exchange Format enables the exchange of both structured and unstructured data. It can handle data records with application-specific structures or no structure at all, making it a flexible and interoperable data exchange format across decentralized applications.", "# Verus Data eXchange Format (VDXF)The Verus Data Exchange Format provides a fully interoperable system for defining data types that may consist of structured or or unstructured data and associated content or keys that may be used to retrieve such data from centralized or decentralized storage for use in and across centralized or decentralized applications.The Verus Data eXchange Format (VDXF) object is a structured data representation of the Verus Data eXchange Format, designed to facilitate the exchange of information across different systems and programming languages. It encapsulates data in a serialized byte format, making it interoperable and easy to transmit or store. This document outlines the structure and functionality of a VDXF object, focusing on its serialized form rather than the methods used to manipulate it in any specific programming language.## OverviewThe Verus Data Exchange Format enables application developers to define globally unique data types and publish references to the same, which may refer to structured or unstructured data that can be located unambiguously via an URL, which implicitly provides both location and decoding information, enabling applications to use such data, in whole or in part, if they know how, or even ignore parts of the data, while remaining compatible with those parts they understand. VDXF typee keys are globally unique identifiers, which are defined as human readable names along with a specification of how to define and convert unlimited length, human readable type names into collison-free 20 byte IDs, which can be used as type keys associated with content or location values in various forms of data records. These data records, which may have application specific structures or no structure at all, besides length form the basis of an interoperable data exchange format across decentralized applications.", "./raw_text_input_docs/README_vdxf.md"]]], [["User:: Hi, I'm trying to remove a timelock from my VerusID. Can you tell me how to use the `updateidentity` command to do that?", "AI Assistant:: I think there might be some confusion. You can't actually use the `updateidentity` command to remove a timelock from your VerusID. In fact, the `updateidentity` command is used to set or update a timelock on a VerusID.\n\nIf you want to remove a timelock, you would need to use the revoke and recover functionality. Would you like me to explain more about how to do that?", "User:: Oh, I see. Thanks for the clarification. I was also wondering, is it possible to permanently lock a VerusID using the `updateidentity` command?", "AI Assistant:: No, it is not possible to permanently lock a VerusID using the `updateidentity` command. You can always revoke and recover a locked VerusID, which means that even if you set a timelock, you can still recover your VerusID and regain access to your funds. So, you don't have to worry about accidentally locking yourself out of your account forever!"], "AI Assistant", "", "N/A", [["How do I use the `updateidentity` command to remove a timelock from my VerusID?", "You can't use the `updateidentity` command to remove a timelock from your VerusID. In fact, the `updateidentity` command is used to set or update a timelock on a VerusID. To remove a timelock, you would need to use the revoke and recover functionality.", "- Under ``timelock`` you put ``1508994``\n- Under ``name`` you put your VerusID name without ``@``\n- Under ``primaryaddress`` you put the R-address which is the primary address of your VerusID (you can find this address in the 'VerusID'-tab, open your VerusID and click `ID Info')So in our example your VerusID is locked for approximately for 1 year. After that period of time the funds can be spent again.``` json\nrun updateidentity \n'{\n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":0,\n  \"timelock\":1534360\n}'\n```You can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs. In the code snippet are the minimum requirements to update your VerusID with a lock.:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::## Vault with DelayLock\n![image-delaylock](/images/delaylock.png)\nNow let's put a DelayLock on a VerusID. This means that you lock the identity, and when you request the identity to be unlocked, a predetermined number of blocks have to pass before you can actually spend the funds again.### Set the DelayLock\nLet's say you want to put a Delaylock of 1 week. 1 week is ``10,080`` blocks (1440x7). This will lock the identity, and when you requested an unlock, it takes 1 week (or 10,080 blocks) before the funds can be spent again.- Under ``timelock`` you put ``10080``\n- Under ``name`` you put your VerusID name without ``@``\n- Under ``primaryaddress`` you put the R-address which is the primary address of your VerusID (you can find this address in the 'VerusID'-tab, open your VerusID and click `ID Info')", "./raw_text_input_docs/setup-vault.md"], ["Is it possible to permanently lock a VerusID using the `updateidentity` command?", "No, it is not possible to permanently lock a VerusID using the `updateidentity` command. You can always revoke and recover a locked VerusID, which means that even if you set a timelock, you can still recover your VerusID and regain access to your funds.", "- Under ``timelock`` you put ``1508994``\n- Under ``name`` you put your VerusID name without ``@``\n- Under ``primaryaddress`` you put the R-address which is the primary address of your VerusID (you can find this address in the 'VerusID'-tab, open your VerusID and click `ID Info')So in our example your VerusID is locked for approximately for 1 year. After that period of time the funds can be spent again.``` json\nrun updateidentity \n'{\n  \"name\":\"youridentityname\",\n  \"minimumsignatures\":1,\n  \"primaryaddresses\":[\"primary-address-comes-here\"],\n  \"flags\":0,\n  \"timelock\":1534360\n}'\n```You can copy and paste this code snippet into the commandline interface of Verus Desktop and edit the necessary inputs for your needs. In the code snippet are the minimum requirements to update your VerusID with a lock.:::tip Revoke & Recover\nRemember: you can always revoke and recover a locked VerusID.\n:::## Vault with DelayLock\n![image-delaylock](/images/delaylock.png)\nNow let's put a DelayLock on a VerusID. This means that you lock the identity, and when you request the identity to be unlocked, a predetermined number of blocks have to pass before you can actually spend the funds again.### Set the DelayLock\nLet's say you want to put a Delaylock of 1 week. 1 week is ``10,080`` blocks (1440x7). This will lock the identity, and when you requested an unlock, it takes 1 week (or 10,080 blocks) before the funds can be spent again.- Under ``timelock`` you put ``10080``\n- Under ``name`` you put your VerusID name without ``@``\n- Under ``primaryaddress`` you put the R-address which is the primary address of your VerusID (you can find this address in the 'VerusID'-tab, open your VerusID and click `ID Info')", "./raw_text_input_docs/setup-vault.md"]]], [["User:: I've been thinking about creating a VerusID, but I'm not sure about some of the settings. Why is it important to carefully consider the assignment of `RevokeID` and `RecoveryID` when creating a VerusID?", "AI Assistant:: That's a great question! It's indeed crucial to carefully consider the assignment of `RevokeID` and `RecoveryID` when creating a VerusID. The reason is that these settings determine the level of control and recoverability you have over your identity.\n\nFor instance, assigning a `RecoveryID` to `self` when the `RevokeID` is assigned to another identity would prevent recovery of the identity after revocation. This could lead to unintended consequences, such as losing access to your identity or assets.\n\nBy carefully considering the assignment of `RevokeID` and `RecoveryID`, you can ensure that you achieve the desired level of control and recoverability for your VerusID. It's essential to think about who should have the power to revoke or recover your identity, and to set up the permissions accordingly. Do you have any other questions about creating a VerusID or managing permissions?"], "AI Assistant", "", "N/A", [["Why is it important to carefully consider the assignment of `RevokeID` and `RecoveryID` when creating a VerusID?", "It's important to carefully consider the assignment of `RevokeID` and `RecoveryID` to ensure that the desired level of control and recoverability is achieved. For example, assigning a `RecoveryID` to `self` when the `RevokeID` is assigned to another identity would prevent recovery of the identity after revocation.", "When creating a VerusID users can assign a ``RevokeID`` and a ``RecoveryID`` to their VerusID. They can be the same identities, different ones or appointed ``self``. These assigned identities are also VerusIDs and thus must be purchased.| Action | Outcome |\n| :----------------------- | :-- | \n| Revoking | Funds can not be spent anymore | \n| Recovering | Recover all assets to a new address. Funds and UTXOs can be spent again |::: danger Be Careful\nDon't assign a ``RecoveryID`` to ``self`` when the ``RevokeID`` is assigned to another identity. This way when you revoke an identity, you can not recover it anymore.\n:::## Verus Vault\nThe Verus Vault for identities is a unique feature to create extra security. Set locks or timelocks to safeguard funds on a VerusID. Locked identities can not spend funds.### How it Works\nThere are three stages the Vault can be set to. When the vault is locked it can not spend funds.| Action | Outcome |\n| :----------------------- | :-- | \n| Locked until x blocks | Funds can not be spent, until a predetermined number of blocks have passed | \n| Locked with delay | Funds can not be spent, until an unlock has been requested + predetermined number of blocks have passed | \n| Unlocked | Funds can be spent |When a VerusID is locked or timelocked, it can still receive, hold and stake funds. It can also still be used for signing.[Learn here how to set up Verus Vault in Verus Desktop](/guides/setup-vault-v2/)::: warning Revoking Locked VerusID\nEven when a VerusID is locked, it can still be [revoked and recovered](/verusid/specifications#revoke-recover/). \n:::### Vault Use Case Examples", "./raw_text_input_docs/README_addresses.md"]]], [["User:: I've been trying to understand the inner workings of Verus, specifically the notarizations created by block producers. What is the purpose of the notarizations created by the block producers every 5 blocks?", "AI Assistant:: Actually, notarizations are created by the block producers every 10 blocks, not every 5 blocks. These digital receipts contain information such as the stateroot, blockheight, blockhash, and gas price for Ethereum, and are used to facilitate cross-chain communication between Verus and Ethereum. They play a crucial role in ensuring seamless interactions between the two blockchain networks.", "User:: That's good to know, thanks for the correction! I was also wondering, what's to prevent a single malicious notary witness from draining funds from the Verus-Ethereum Bridge?", "AI Assistant:: No, a single malicious notary witness cannot drain funds from the Verus-Ethereum Bridge. The security of the bridge is designed to prevent such attacks. A successful attack on the bridge would require a majority of colluding witnesses, fake block producers with more combined hash and stake power than the publicly validated Verus blockchain, and developers creating an alternate protocol for the shadow chain. This is a highly unlikely scenario, and the Verus team has implemented robust measures to ensure the integrity of the bridge."], "AI Assistant", "", "N/A", [["What is the purpose of the notarizations created by the block producers every 5 blocks?", "Notarizations are created by the block producers every 10 blocks, not every 5 blocks. These digital receipts contain information such as the stateroot, blockheight, blockhash, and gas price for Ethereum, and are used to facilitate cross-chain communication between Verus and Ethereum.", "Every 10 blocks the block producers create a notarization (when there is traffic over the bridge). They create these digital receipts for both Verus and Ethereum. The digital receipts, called \u201cnotarizations\", contain, among other things: the \u201cstateroot\u201d ([Merkle Mountain Range](https://www.investopedia.com/terms/m/merkle-root-cryptocurrency.asp) for Verus, [Merkle Patricia Trie](https://ethereum.org/en/developers/docs/data-structures-and-encoding/patricia-merkle-trie/) for Ethereum), the blockheight, blockhash and the gas price for Ethereum. The notarizations have to be agreed to by the block producers (miners and stakers) and are then mined into the Verus blockchain.\ud83d\udc49 [Read more here](https://medium.com/veruscoin/verus-internet-protocol-vip-provable-decentralized-cross-chain-communication-8d9414a429c5?source=rss----4869a79d7e7f---4) on how the Verus Protocol handles cross-chain communication (PBaaS-chains and more) in a decentralized and provable way.### Safeguards against bridge hacks\nThreats caused by malicious notary witnesses, or stolen keys to drain funds are not viable against the Verus-Ethereum Bridge. To successfully mount an attack on the bridge, if a majority of witnesses were colluding or got their private keys stolen the following would need to happen:- Colluding, malicious witnesses.\n- Fake block producers with more combined hash and stake power than the publicly validated Verus blockchain. [\ud83d\udc49 Verus Paper: A Provable Hybrid Solution to 51% Hash Attacks](https://verus.io/papers/VerusPoP.pdf)\n- Developers helping them by creating an alternate protocol for the shadow chain.These requirements are very close to the requirements of attacking any blockchain. The bridge even provides a way to defend against such an unlikely scenario.", "./raw_text_input_docs/README_eth-bridge.md"], ["Can a single malicious notary witness drain funds from the Verus-Ethereum Bridge?", "No, a single malicious notary witness cannot drain funds from the Verus-Ethereum Bridge. A successful attack on the bridge would require a majority of colluding witnesses, fake block producers with more combined hash and stake power than the publicly validated Verus blockchain, and developers creating an alternate protocol for the shadow chain. This is a highly unlikely scenario.", "Every 10 blocks the block producers create a notarization (when there is traffic over the bridge). They create these digital receipts for both Verus and Ethereum. The digital receipts, called \u201cnotarizations\", contain, among other things: the \u201cstateroot\u201d ([Merkle Mountain Range](https://www.investopedia.com/terms/m/merkle-root-cryptocurrency.asp) for Verus, [Merkle Patricia Trie](https://ethereum.org/en/developers/docs/data-structures-and-encoding/patricia-merkle-trie/) for Ethereum), the blockheight, blockhash and the gas price for Ethereum. The notarizations have to be agreed to by the block producers (miners and stakers) and are then mined into the Verus blockchain.\ud83d\udc49 [Read more here](https://medium.com/veruscoin/verus-internet-protocol-vip-provable-decentralized-cross-chain-communication-8d9414a429c5?source=rss----4869a79d7e7f---4) on how the Verus Protocol handles cross-chain communication (PBaaS-chains and more) in a decentralized and provable way.### Safeguards against bridge hacks\nThreats caused by malicious notary witnesses, or stolen keys to drain funds are not viable against the Verus-Ethereum Bridge. To successfully mount an attack on the bridge, if a majority of witnesses were colluding or got their private keys stolen the following would need to happen:- Colluding, malicious witnesses.\n- Fake block producers with more combined hash and stake power than the publicly validated Verus blockchain. [\ud83d\udc49 Verus Paper: A Provable Hybrid Solution to 51% Hash Attacks](https://verus.io/papers/VerusPoP.pdf)\n- Developers helping them by creating an alternate protocol for the shadow chain.These requirements are very close to the requirements of attacking any blockchain. The bridge even provides a way to defend against such an unlikely scenario.", "./raw_text_input_docs/README_eth-bridge.md"]]], [["User:: I've been using VerusIDs for a while now, but I'm still not sure about how to use them for private transactions. Can you walk me through how to use a VerusID to send funds privately?", "AI Assistant:: A VerusID is a public friendly-name cryptocurrency address, so it's not suitable for sending funds privately. However, a VerusID can contain a pointer to a z-address, which is a private cryptocurrency address. You can send coins to `VerusID@:private` to utilize the z-address for private transactions. Would you like more information on how to set up a z-address or how private transactions work on Verus?", "User:: That's really helpful, thank you! I'm still trying to understand the different types of addresses in Verus. What's the main difference between an R-address and a VerusID?", "AI Assistant:: An R-address is a public cryptocurrency address derived from a private key, whereas a VerusID is a public friendly-name cryptocurrency address controlled by a primary address, which is an R-address. So, an R-address is a more basic type of address, whereas a VerusID is a higher-level address that's easier to use and remember. Think of a VerusID like a username, and an R-address like the underlying account number. Does that help clarify things?", "User:: That makes sense. I've also been wondering about z-addresses. Are z-addresses visible on blockchain explorers?", "AI Assistant:: No, z-addresses are private addresses, and their balances and transactions are confidential. They do not appear on the blockchain or any explorer. Only the person with the private key can spend and see the balance of a z-address, or provide visibility into the balance through a \"viewing key\". This adds an extra layer of privacy to your transactions. Do you have any more questions about z-addresses or private transactions on Verus?"], "AI Assistant", "", "N/A", [["How do I use a VerusID to send funds privately?", "A VerusID is a public friendly-name cryptocurrency address, so it's not suitable for sending funds privately. However, a VerusID can contain a pointer to a z-address, which is a private cryptocurrency address. You can send coins to `VerusID@:private` to utilize the z-address for private transactions.", "# Introduction\nIn Verus, there are two kinds of addresses: **public** and **private**. This doc guides you through understanding these address types and how they're involved in transactions.Understanding the distinctions between public and private addresses in the Verus ecosystem is crucial for making informed decisions about transaction privacy.## Public addresses\nYou can use the following public address types to send and receive funds.| Address type | Details | \n| :-----| :------ | \n| **R-address** | A R-address is a public cryptocurrency address derived from a private key. The private key is essential for accessing and controlling the R-address.| \n| [**VerusID@**](/verusid/) | A VerusID is a public friendly-name cryptocurrency address. It is controlled by a primary address, which is a R-address.| \n| **i-address** | An i-address is a public cryptocurrency address derived from a VerusID.|Public addresses and their transactions are visible on blockchain explorers because they're recorded on the public ledger, unlike private z-addresses.## Private addresses\nYou can use the following private address type for confidential exchange of funds and data.| Address type | Details | \n| :-----| :------ | \n| **z-address** | A z-address is a private cryptocurrency address derived from a private key. The private key is essential for accessing and controlling the z-address. Only the person who has the private key can spend and see its balance. Or provide visibility in the balance through a ``viewing key``. |Balances and transactions associated with private addresses are confidential. They do not appear on the blockchain or any explorer.\u2139\ufe0f A VerusID can contain a pointer to a z-address. You can then send coins to ``VerusID@:private``.", "./raw_text_input_docs/README.md"], ["What's the main difference between an R-address and a VerusID?", "An R-address is a public cryptocurrency address derived from a private key, whereas a VerusID is a public friendly-name cryptocurrency address controlled by a primary address, which is an R-address. So, an R-address is a more basic type of address, whereas a VerusID is a higher-level address that's easier to use and remember.", "# Introduction\nIn Verus, there are two kinds of addresses: **public** and **private**. This doc guides you through understanding these address types and how they're involved in transactions.Understanding the distinctions between public and private addresses in the Verus ecosystem is crucial for making informed decisions about transaction privacy.## Public addresses\nYou can use the following public address types to send and receive funds.| Address type | Details | \n| :-----| :------ | \n| **R-address** | A R-address is a public cryptocurrency address derived from a private key. The private key is essential for accessing and controlling the R-address.| \n| [**VerusID@**](/verusid/) | A VerusID is a public friendly-name cryptocurrency address. It is controlled by a primary address, which is a R-address.| \n| **i-address** | An i-address is a public cryptocurrency address derived from a VerusID.|Public addresses and their transactions are visible on blockchain explorers because they're recorded on the public ledger, unlike private z-addresses.## Private addresses\nYou can use the following private address type for confidential exchange of funds and data.| Address type | Details | \n| :-----| :------ | \n| **z-address** | A z-address is a private cryptocurrency address derived from a private key. The private key is essential for accessing and controlling the z-address. Only the person who has the private key can spend and see its balance. Or provide visibility in the balance through a ``viewing key``. |Balances and transactions associated with private addresses are confidential. They do not appear on the blockchain or any explorer.\u2139\ufe0f A VerusID can contain a pointer to a z-address. You can then send coins to ``VerusID@:private``.", "./raw_text_input_docs/README.md"], ["Are z-addresses visible on blockchain explorers?", "No, z-addresses are private addresses, and their balances and transactions are confidential. They do not appear on the blockchain or any explorer. Only the person with the private key can spend and see the balance of a z-address, or provide visibility into the balance through a \"viewing key\".", "# Introduction\nIn Verus, there are two kinds of addresses: **public** and **private**. This doc guides you through understanding these address types and how they're involved in transactions.Understanding the distinctions between public and private addresses in the Verus ecosystem is crucial for making informed decisions about transaction privacy.## Public addresses\nYou can use the following public address types to send and receive funds.| Address type | Details | \n| :-----| :------ | \n| **R-address** | A R-address is a public cryptocurrency address derived from a private key. The private key is essential for accessing and controlling the R-address.| \n| [**VerusID@**](/verusid/) | A VerusID is a public friendly-name cryptocurrency address. It is controlled by a primary address, which is a R-address.| \n| **i-address** | An i-address is a public cryptocurrency address derived from a VerusID.|Public addresses and their transactions are visible on blockchain explorers because they're recorded on the public ledger, unlike private z-addresses.## Private addresses\nYou can use the following private address type for confidential exchange of funds and data.| Address type | Details | \n| :-----| :------ | \n| **z-address** | A z-address is a private cryptocurrency address derived from a private key. The private key is essential for accessing and controlling the z-address. Only the person who has the private key can spend and see its balance. Or provide visibility in the balance through a ``viewing key``. |Balances and transactions associated with private addresses are confidential. They do not appear on the blockchain or any explorer.\u2139\ufe0f A VerusID can contain a pointer to a z-address. You can then send coins to ``VerusID@:private``.", "./raw_text_input_docs/README.md"]]], [["User:: Hey there, I've got a couple of questions about converting currencies on Verus. First, how do you convert VRSCTEST to a basket currency without using IDs as a funding source?", "AI Assistant:: I think there might be some confusion here. The example I've seen actually shows how to convert VRSCTEST to a basket currency, VRSC-BTC, using IDs as a funding source. The command for this is:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*i\" '[{\n\"address\":\"bob@\",\n\"amount\":10,\n\"convertto\":\"VRSC-BTC\"\n}]'\n```\nSo, it seems like IDs are actually being used as a funding source in this example. Could you clarify what you mean by \"without using IDs as a funding source\"?", "User:: Okay, that clears things up. I've got another question. How do you estimate the conversion price of VRSCTEST to a non-existent currency, like \"NEWCOIN2\"?", "AI Assistant:: Unfortunately, you can't estimate the conversion price of VRSCTEST to a non-existent currency like \"NEWCOIN2\" because the `estimateconversion` API command only estimates the conversion price for existing currencies. The example I've seen shows how to preconvert to a new currency, NEWCOIN, before it is active, but it doesn't estimate the conversion price of VRSCTEST to a non-existent currency."], "AI Assistant", "", "N/A", [["How do you convert VRSCTEST to a basket currency without using IDs as a funding source?", "Actually, the example provided shows how to convert VRSCTEST to a basket currency, VRSC-BTC, using IDs as a funding source. The command for this is:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*i\" '[{\n  \"address\":\"bob@\",\n  \"amount\":10,\n  \"convertto\":\"VRSC-BTC\"\n}]'\n```\nSo, it seems there's some confusion, as the question implies that IDs are not used as a funding source, but the example provided does use IDs as a funding source.", "# API commands\nAll functionality is easily accessible by doing API commands. Here are a few examples:## Converting (DeFi)### Estimate conversion price\nThe ``estimateconversion`` API estimates what you might receive for a certain conversion.Example:\n``` json\n./verus -chain=VRSCTEST estimateconversion '{\n  \"currency\":\"vrsctest\",\n  \"convertto\":\"veth\",\n  \"via\":\"bridge.veth\",\n  \"amount\":1000\n}'\n```Example:\n``` json\n./verus -chain=VRSCTEST estimateconversion '{\n  \"currency\":\"vrsctest\",\n  \"convertto\":\"bridge.veth\",\n  \"amount\":500\n}'\n```### Get currency converters\nThe ``getcurrencyconverters`` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves.Example ``btc`` and ``eth``:\n``` json\n./verus -chain=VRSCTEST getcurrencyconverters btc eth\n```### Converting VRSCTEST to basket currency\nConverting VRSCTEST to a basket currency, VRSC-BTC, using IDs as a funding source:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*i\" '[{\n  \"address\":\"bob@\",\n  \"amount\":10,\n  \"convertto\":\"VRSC-BTC\"\n}]'\n```### Converting VRSCTEST to BTC via basket currency\nConverting VRSCTEST to another reserve, BTC through a basket currency, VRSC-BTC:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"bob@\",\n  \"amount\":10,\n  \"convertto\":\"BTC\",\n  \"via\":\"VRSC-BTC\"\n}]'\n```\n### Preconverting\nPreconverting to new currency, NEWCOIN, before it is active:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"alice@\",\n  \"amount\":10,\n  \"convertto\":\"NEWCOIN\",\n  \"preconvert\":true,\n  \"refundto\":\"alice@\"\n}]'\n```", "./raw_text_input_docs/sendcurrency-examples.md"], ["How do you estimate the conversion price of VRSCTEST to a non-existent currency, like \"NEWCOIN2\"?", "You can't estimate the conversion price of VRSCTEST to a non-existent currency like \"NEWCOIN2\" because the `estimateconversion` API command only estimates the conversion price for existing currencies. The example provided shows how to preconvert to a new currency, NEWCOIN, before it is active, but it doesn't estimate the conversion price of VRSCTEST to a non-existent currency.", "# API commands\nAll functionality is easily accessible by doing API commands. Here are a few examples:## Converting (DeFi)### Estimate conversion price\nThe ``estimateconversion`` API estimates what you might receive for a certain conversion.Example:\n``` json\n./verus -chain=VRSCTEST estimateconversion '{\n  \"currency\":\"vrsctest\",\n  \"convertto\":\"veth\",\n  \"via\":\"bridge.veth\",\n  \"amount\":1000\n}'\n```Example:\n``` json\n./verus -chain=VRSCTEST estimateconversion '{\n  \"currency\":\"vrsctest\",\n  \"convertto\":\"bridge.veth\",\n  \"amount\":500\n}'\n```### Get currency converters\nThe ``getcurrencyconverters`` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves.Example ``btc`` and ``eth``:\n``` json\n./verus -chain=VRSCTEST getcurrencyconverters btc eth\n```### Converting VRSCTEST to basket currency\nConverting VRSCTEST to a basket currency, VRSC-BTC, using IDs as a funding source:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*i\" '[{\n  \"address\":\"bob@\",\n  \"amount\":10,\n  \"convertto\":\"VRSC-BTC\"\n}]'\n```### Converting VRSCTEST to BTC via basket currency\nConverting VRSCTEST to another reserve, BTC through a basket currency, VRSC-BTC:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"bob@\",\n  \"amount\":10,\n  \"convertto\":\"BTC\",\n  \"via\":\"VRSC-BTC\"\n}]'\n```\n### Preconverting\nPreconverting to new currency, NEWCOIN, before it is active:\n``` json\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\n  \"address\":\"alice@\",\n  \"amount\":10,\n  \"convertto\":\"NEWCOIN\",\n  \"preconvert\":true,\n  \"refundto\":\"alice@\"\n}]'\n```", "./raw_text_input_docs/sendcurrency-examples.md"]]], [["User:: I'm trying to get a better understanding of currencies in Verus. What's the recommended limit for currency supplies in Verus, and how many decimal places does it have?", "AI Assistant:: The recommended absolute limit for all currency supplies in Verus is 10 billion (-1 SATOSHI), which has 8 decimal places (9999999999.99999999). This is the maximum supply you should aim for when creating a new currency.", "User:: I see. But can I create a currency supply with more than 10 billion units in Verus if I need to?", "AI Assistant:: No, the recommended absolute limit for all currency supplies in Verus is 10 billion (-1 SATOSHI). It's not recommended to create a currency supply with more than 10 billion units. Verus is designed to work within this limit, and exceeding it may cause issues.", "User:: Okay, got it. How do I define a new currency in Verus with an unlimited supply, then?", "AI Assistant:: You can't define a new currency in Verus with an unlimited supply. The recommended absolute limit for all currency supplies in Verus is 10 billion (-1 SATOSHI). You can define a new currency with a specific supply using the `definecurrency` command, but it should be within the recommended limit. Unlimited supplies are not supported in Verus."], "AI Assistant", "", "N/A", [["What is the recommended limit for currency supplies in Verus, and how many decimal places does it have?", "The recommended absolute limit for all currency supplies in Verus is 10 billion (-1 SATOSHI), which has 8 decimal places (9999999999.99999999).", "::: danger Limit for all currency supplies (10 billion)\n10 billion (-1 SATOSHI) with 8 decimal places (9999999999.99999999) is now the recommended absolute limit for all currency supplies, including over time with conversions and extended tail emissions for blockchains.\n:::### Blockchain 1``` json\n./verus -chain=VRSCTEST definecurrency '{\n  \"name\":\"PBaaSChain\",\n  \"options\":264,\n  \"currencies\":[\"VRSCTEST\"],\n  \"conversions\":[1],\n  \"eras\":[\n    {\n      \"reward\":1200000000,\n      \"decay\":0,\n      \"halving\":0,\n      \"eraend\":0\n    }\n  ],\n  \"notaries\":[\n    \"Notary1@\",\n    \"Notary2@\",\n    \"Notary3@\"\n  ],\n  \"minnotariesconfirm\":2,\n  \"nodes\":[\n    {\n      \"networkaddress\":\"111.111.111.111:10000\",\n      \"nodeidentity\":\"Node1@\"\n    },\n    {\n      \"networkaddress\":\"111.111.111.112:10000\",\n      \"nodeidentity\":\"Node2@\"\n    }\n  ],\n  \"gatewayconvertername\":\"Bridge\",\n  \"gatewayconverterissuance\":1000000\n  }' \n  '{\n    \"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\n    \"initialcontributions\":[371747.20398827,0,1000000],\n    \"initialsupply\":3000000\n  }'\n```### Blockchain 2", "./raw_text_input_docs/define-pbaas.md"], ["Can I create a currency supply with more than 10 billion units in Verus?", "No, the recommended absolute limit for all currency supplies in Verus is 10 billion (-1 SATOSHI). It's not recommended to create a currency supply with more than 10 billion units.", "::: danger Limit for all currency supplies (10 billion)\n10 billion (-1 SATOSHI) with 8 decimal places (9999999999.99999999) is now the recommended absolute limit for all currency supplies, including over time with conversions and extended tail emissions for blockchains.\n:::### Blockchain 1``` json\n./verus -chain=VRSCTEST definecurrency '{\n  \"name\":\"PBaaSChain\",\n  \"options\":264,\n  \"currencies\":[\"VRSCTEST\"],\n  \"conversions\":[1],\n  \"eras\":[\n    {\n      \"reward\":1200000000,\n      \"decay\":0,\n      \"halving\":0,\n      \"eraend\":0\n    }\n  ],\n  \"notaries\":[\n    \"Notary1@\",\n    \"Notary2@\",\n    \"Notary3@\"\n  ],\n  \"minnotariesconfirm\":2,\n  \"nodes\":[\n    {\n      \"networkaddress\":\"111.111.111.111:10000\",\n      \"nodeidentity\":\"Node1@\"\n    },\n    {\n      \"networkaddress\":\"111.111.111.112:10000\",\n      \"nodeidentity\":\"Node2@\"\n    }\n  ],\n  \"gatewayconvertername\":\"Bridge\",\n  \"gatewayconverterissuance\":1000000\n  }' \n  '{\n    \"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\n    \"initialcontributions\":[371747.20398827,0,1000000],\n    \"initialsupply\":3000000\n  }'\n```### Blockchain 2", "./raw_text_input_docs/define-pbaas.md"], ["How do I define a new currency in Verus with an unlimited supply?", "You can't define a new currency in Verus with an unlimited supply. The recommended absolute limit for all currency supplies in Verus is 10 billion (-1 SATOSHI). You can define a new currency with a specific supply using the `definecurrency` command, but it should be within the recommended limit.", "::: danger Limit for all currency supplies (10 billion)\n10 billion (-1 SATOSHI) with 8 decimal places (9999999999.99999999) is now the recommended absolute limit for all currency supplies, including over time with conversions and extended tail emissions for blockchains.\n:::### Blockchain 1``` json\n./verus -chain=VRSCTEST definecurrency '{\n  \"name\":\"PBaaSChain\",\n  \"options\":264,\n  \"currencies\":[\"VRSCTEST\"],\n  \"conversions\":[1],\n  \"eras\":[\n    {\n      \"reward\":1200000000,\n      \"decay\":0,\n      \"halving\":0,\n      \"eraend\":0\n    }\n  ],\n  \"notaries\":[\n    \"Notary1@\",\n    \"Notary2@\",\n    \"Notary3@\"\n  ],\n  \"minnotariesconfirm\":2,\n  \"nodes\":[\n    {\n      \"networkaddress\":\"111.111.111.111:10000\",\n      \"nodeidentity\":\"Node1@\"\n    },\n    {\n      \"networkaddress\":\"111.111.111.112:10000\",\n      \"nodeidentity\":\"Node2@\"\n    }\n  ],\n  \"gatewayconvertername\":\"Bridge\",\n  \"gatewayconverterissuance\":1000000\n  }' \n  '{\n    \"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\n    \"initialcontributions\":[371747.20398827,0,1000000],\n    \"initialsupply\":3000000\n  }'\n```### Blockchain 2", "./raw_text_input_docs/define-pbaas.md"]]], [["User:: Hi, I've got a question about using the Verus wallet to interact with the blockchain. How do I use the Verus Desktop wallet to interact with the blockchain?", "AI Assistant:: Actually, I think there might be some confusion. You shouldn't use the Verus Desktop wallet to interact with the blockchain. Instead, you should use the Verus CLI (command-line-interface) wallet. You can interact with the blockchain by running the `verus` command in the terminal, after extracting the packaged file and going into the directory where you extracted verus-cli.", "User:: Okay, thanks for the clarification. I've got another question. What is the purpose of the `fetch-params` command?", "AI Assistant:: The `fetch-params` command is used to download the zcash parameters needed to get started, and it's recommended to run it before using `verusd` when setting up a new system.", "User:: Got it, thanks! And one more question. Can I start the Verus blockchain by running the `verus` command?", "AI Assistant:: No, to start the Verus blockchain, you need to run the `verusd` command, not the `verus` command. The `verusd` command starts the blockchain, while the `verus` command is used to interact with the blockchain."], "AI Assistant", "", "N/A", [["How do I use the Verus Desktop wallet to interact with the blockchain?", "Actually, you should use the Verus CLI (command-line-interface) wallet, not the Verus Desktop wallet, to interact with the blockchain. You can interact with the blockchain by running the `verus` command in the terminal, after extracting the packaged file and going into the directory where you extracted verus-cli.", "# Setup verus-cli\n\n### [Download verus-cli for Windows, macOS and Linux](https://verus.io/wallet/)\n\nThe CLI (command-line-interface) wallet is an alternative to Verus Desktop, and is used through the terminal.\n\nIn the packaged file you find ``verusd``, ``verus``, ``fetch-bootstrap``, ``fetch-params`` and accompanying text files to [verify](https://verus.io/signatures) signatures.\n\nRun ``verusd`` to start the blockchain. The ``d`` stands for daemon. A daemon is a program that runs as a background process.\n\nRun ``verus`` to interact with the blockchain.\n\n::: warning New System \nRun ``fetch-params`` before using ``verusd`` when you are running a new system. It downloads the zcash parameters needed to get started.\n:::\n\n::: tip Bootstrap Blockchain\nDownloading the blockchain can take up a long time, to speed it up you can bootstrap the blockchain. Run ``fetch-bootstrap``.\n:::\n\nExtract the packaged file on your computer, preferably where you can find it back easily.\n\n## Use Commands\nIn your terminal, go into the directory where you extracted verus-cli.\n\n### Start Verus Blockchain\n\n``` \n./verusd\n```\n\n### Start Testnet Blockchain\n``` \n./verusd -chain=VRSCTEST\n```", "./raw_text_input_docs/setup-cli.md"], ["What is the purpose of the `fetch-params` command?", "The `fetch-params` command is used to download the zcash parameters needed to get started, and it's recommended to run it before using `verusd` when setting up a new system.", "# Setup verus-cli\n\n### [Download verus-cli for Windows, macOS and Linux](https://verus.io/wallet/)\n\nThe CLI (command-line-interface) wallet is an alternative to Verus Desktop, and is used through the terminal.\n\nIn the packaged file you find ``verusd``, ``verus``, ``fetch-bootstrap``, ``fetch-params`` and accompanying text files to [verify](https://verus.io/signatures) signatures.\n\nRun ``verusd`` to start the blockchain. The ``d`` stands for daemon. A daemon is a program that runs as a background process.\n\nRun ``verus`` to interact with the blockchain.\n\n::: warning New System \nRun ``fetch-params`` before using ``verusd`` when you are running a new system. It downloads the zcash parameters needed to get started.\n:::\n\n::: tip Bootstrap Blockchain\nDownloading the blockchain can take up a long time, to speed it up you can bootstrap the blockchain. Run ``fetch-bootstrap``.\n:::\n\nExtract the packaged file on your computer, preferably where you can find it back easily.\n\n## Use Commands\nIn your terminal, go into the directory where you extracted verus-cli.\n\n### Start Verus Blockchain\n\n``` \n./verusd\n```\n\n### Start Testnet Blockchain\n``` \n./verusd -chain=VRSCTEST\n```", "./raw_text_input_docs/setup-cli.md"], ["Can I start the Verus blockchain by running the `verus` command?", "No, to start the Verus blockchain, you need to run the `verusd` command, not the `verus` command. The `verusd` command starts the blockchain, while the `verus` command is used to interact with the blockchain.", "# Setup verus-cli\n\n### [Download verus-cli for Windows, macOS and Linux](https://verus.io/wallet/)\n\nThe CLI (command-line-interface) wallet is an alternative to Verus Desktop, and is used through the terminal.\n\nIn the packaged file you find ``verusd``, ``verus``, ``fetch-bootstrap``, ``fetch-params`` and accompanying text files to [verify](https://verus.io/signatures) signatures.\n\nRun ``verusd`` to start the blockchain. The ``d`` stands for daemon. A daemon is a program that runs as a background process.\n\nRun ``verus`` to interact with the blockchain.\n\n::: warning New System \nRun ``fetch-params`` before using ``verusd`` when you are running a new system. It downloads the zcash parameters needed to get started.\n:::\n\n::: tip Bootstrap Blockchain\nDownloading the blockchain can take up a long time, to speed it up you can bootstrap the blockchain. Run ``fetch-bootstrap``.\n:::\n\nExtract the packaged file on your computer, preferably where you can find it back easily.\n\n## Use Commands\nIn your terminal, go into the directory where you extracted verus-cli.\n\n### Start Verus Blockchain\n\n``` \n./verusd\n```\n\n### Start Testnet Blockchain\n``` \n./verusd -chain=VRSCTEST\n```", "./raw_text_input_docs/setup-cli.md"]]], [["User:: Hey, I'm curious about the process of launching a new currency on Verus. What happens if the minimum preconversion amount is met for a currency launch?", "AI Assistant:: Actually, the opposite happens. If the minimum preconversion amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back, minus the transaction and conversion fees. So, it's a safety net for those who participate in the preconversion process. Does that make sense? Do you have any other questions about launching a new currency on Verus?"], "AI Assistant", "", "N/A", [["What happens if the minimum preconversion amount is met for a currency launch?", "Actually, the opposite happens. If the minimum preconversion amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back, minus the transaction and conversion fees.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CommunityX\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"MyBrand\",\"InfluencerCoin\"], \n \"minpreconversion\":[10,50,10],\n \"initialsupply\":100\n}'\n```\n\u261d\ufe0f A basket currency called CommunityX. It needs to get a minimum of 10 VRSCTEST, 50 MyBrand and 10 InfluencerCoin into its reserves within the preconversion time frame to be launched. The initial supply of 100 CommunityX will be distributed among the preconverters.### **\"conversions\"**\nUse this parameter when launching a simple token currency. Together with `\"currencies\"`, it can be used as a funding mechanism for the rootID. This parameter is for the preconversion price. So when doing `\"conversions\":[0.1]`, it means that for every VRSC the preconverter receives 10 CURRENCY after launch. The converted VRSC goes into the rootID.People can preconvert to this currency within the preconversion time frame. Define a `\"startblock\"`, or let the default and minimum time frame play out, which is 20 blocks.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"CoolBrand\",\n \"options\":32,\n \"currencies\":[\"vrsctest\"],\n \"conversions\":[0.1],\n \"minpreconversion\":[1000]\n}'\n```\n\u261d\ufe0f This simple token currency is called CoolBrand. During the preconversion time frame people need to convert 1000 VRSCTEST to the rootID. In exchange for that they receive 10.000 CoolBrand. If this minimum amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back.### **\"minpreconversion\"**\nUse this parameter to set a minimum amount of preconversions. The minimum amount of preconversions needs to be met or the currency will not launch and everyone gets their conversions returned, minus the transaction and conversion fees. It works both with basket currencies and simple token currencies.", "./raw_text_input_docs/launch-currency.md"]]], [["User:: I'm having some trouble setting up my Verus Wallet. Can you help me with that? There doesn't seem to be a guide anywhere.", "AI Assistant:: I'd be happy to help! Actually, there is a guide for getting a Verus address, which is often referred to as setting up a wallet. You can find the guide by searching for \"Verus Wallet setup\" or \"Getting a Verus address\". It should walk you through the process step-by-step. If you're still having trouble, feel free to ask and I can try to assist you further.", "User:: Okay, I think I've got my wallet set up. Now I'm trying to connect my Verus account to the Verus-Ethereum Bridge. Do you know how I can do that?", "AI Assistant:: Unfortunately, there is no guide for connecting a Verus account to the Verus-Ethereum Bridge. However, there is a guide for claiming refunds from the Verus-Ethereum Bridge. You might want to check that out. If you have any more questions or need further assistance, I'm here to help."], "AI Assistant", "", "N/A", [["Can you help me set up Verus Wallet, as there seems to be no guide for it?", "Actually, there is a guide for getting a Verus address, which is often referred to as setting up a wallet. You can find the guide by searching for \"Verus Wallet setup\" or \"Getting a Verus address\".", "# Overview\n\n| Guides | \n| :----------------------- |\n| [Set up verus-cli for beginners](/guides/setup-cli/) | \n| [Set up Verus Vault (flags)](/guides/setup-vault/) | \n| [Set up Verus Vault (easy)](/guides/setup-vault-v2/) | \n| [Divert staking rewards to different wallet](/guides/divert-rewards/)   |\n| [Claim refunds from Verus-Ethereum Bridge](/guides/refunds/) |\n| [Get Verus address](/guides/getwallet/)", "./raw_text_input_docs/README_guides.md"], ["How do I connect my Verus account to the Verus-Ethereum Bridge?", "There is no guide for connecting a Verus account to the Verus-Ethereum Bridge. Instead, there is a guide for claiming refunds from the Verus-Ethereum Bridge.", "# Overview\n\n| Guides | \n| :----------------------- |\n| [Set up verus-cli for beginners](/guides/setup-cli/) | \n| [Set up Verus Vault (flags)](/guides/setup-vault/) | \n| [Set up Verus Vault (easy)](/guides/setup-vault-v2/) | \n| [Divert staking rewards to different wallet](/guides/divert-rewards/)   |\n| [Claim refunds from Verus-Ethereum Bridge](/guides/refunds/) |\n| [Get Verus address](/guides/getwallet/)", "./raw_text_input_docs/README_guides.md"]]], [["User:: Hi, I have a question about creating a new currency on the Verus network. How do I launch a new currency on the Verus network without using the `definecurrency` command?", "AI Assistant:: Actually, you can't launch a new currency on the Verus network without using the `definecurrency` command. The `definecurrency` command is used to define the properties of the new currency, such as its name, options, system ID, parent, launch system ID, native currency ID, initial supply, and proof protocol. The command returns a HEX code, which is then used to launch the currency on the network using the `sendrawtransaction` command. The `definecurrency` command is a necessary step in creating a new currency on Verus.", "User:: Okay, that makes sense. I have another question. Is it possible to export a currency from Verus to Ethereum immediately after defining it, without waiting for a few blocks to pass?", "AI Assistant:: No, it's not possible to export a currency from Verus to Ethereum immediately after defining it. You need to wait a few blocks for the currency to be available on the Verus network before you can export it to Ethereum. This is a necessary step to ensure that the currency is properly registered and available on the Verus network before attempting to export it to another blockchain like Ethereum."], "AI Assistant", "", "N/A", [["How do I launch a new currency on the Verus network without using the `definecurrency` command?", "You can't launch a new currency on the Verus network without using the `definecurrency` command. The `definecurrency` command is used to define the properties of the new currency, such as its name, options, system ID, parent, launch system ID, native currency ID, initial supply, and proof protocol. The command returns a HEX code, which is then used to launch the currency on the network using the `sendrawtransaction` command.", "``` json\n./verus -chain=VRSCTEST definecurrency '{\n  \"name\":\"MyUSDC\", \n  \"options\":32, \n  \"systemid\":\"veth\", \n  \"parent\":\"vrsctest\", \n  \"launchsystemid\":\"vrsctest\", \n  \"nativecurrencyid\":{\n    \"type\":9, \n    \"address\":\"0x98339D8C260052B7ad81c28c16C0b98420f2B46a\"\n  }, \n  \"initialsupply\":0, \n  \"proofprotocol\":3\n}'\n```\n\nAfter we put in the command, we get returned a HEX. We use this HEX to launch the currency on the network. Use the command below to launch the currency:\n\n``` json\n./verus -chain=VRSCTEST sendrawtransaction \"HEX\"\n```\n\nNow we have to wait a few blocks for the currency to be available on the network.\n\n### Export to Ethereum\nThe last step is to export the currency to Ethereum so we can see it there too. [\ud83d\udc49 Read it here](/currencies/export-to-eth/)", "./raw_text_input_docs/mapping-1:1-eth.md"], ["Is it possible to export a currency from Verus to Ethereum immediately after defining it, without waiting for a few blocks to pass?", "No, it's not possible to export a currency from Verus to Ethereum immediately after defining it. You need to wait a few blocks for the currency to be available on the Verus network before you can export it to Ethereum.", "``` json\n./verus -chain=VRSCTEST definecurrency '{\n  \"name\":\"MyUSDC\", \n  \"options\":32, \n  \"systemid\":\"veth\", \n  \"parent\":\"vrsctest\", \n  \"launchsystemid\":\"vrsctest\", \n  \"nativecurrencyid\":{\n    \"type\":9, \n    \"address\":\"0x98339D8C260052B7ad81c28c16C0b98420f2B46a\"\n  }, \n  \"initialsupply\":0, \n  \"proofprotocol\":3\n}'\n```\n\nAfter we put in the command, we get returned a HEX. We use this HEX to launch the currency on the network. Use the command below to launch the currency:\n\n``` json\n./verus -chain=VRSCTEST sendrawtransaction \"HEX\"\n```\n\nNow we have to wait a few blocks for the currency to be available on the network.\n\n### Export to Ethereum\nThe last step is to export the currency to Ethereum so we can see it there too. [\ud83d\udc49 Read it here](/currencies/export-to-eth/)", "./raw_text_input_docs/mapping-1:1-eth.md"]]], [["User:: I've got a few more questions about VerusIDs. Are they limited to binding to only a few specific types of data or content?", "AI Assistant:: No, VerusIDs are not limited in this way. They can be bound to an unlimited amount of content, data, and provable information, both public and private. This includes provable contracts and rights that can be bound to ownership of the VerusID itself. So, you can bind a wide range of data and content to your VerusID.", "User:: That's great! Another question I had was, can a VerusID only be controlled by a single identity?", "AI Assistant:: No, a VerusID can be controlled by any number of identities. It can also be set up with (time)locks, revoked, and recovered. This allows for a high degree of flexibility and customization when it comes to controlling your VerusID.", "User:: One last question. I've heard that only certain characters are allowed when creating a VerusID. Is that true?", "AI Assistant:: No, that's not correct. All characters from all character sets are available to create a VerusID, except for a few specific characters: `/`, `:`, `*`, `?`, `\"`, `<`, `>`, `|`, `@`, and `.`. So, you have a wide range of characters to choose from when creating your VerusID."], "AI Assistant", "", "N/A", [["Are VerusIDs limited to binding to only a few specific types of data or content?", "No, VerusIDs are not limited in this way. They can be bound to an unlimited amount of content, data, and provable information, both public and private. This includes provable contracts and rights that can be bound to ownership of the VerusID itself.", "VerusIDs can be anything you want. They can be bound digitally to many things. They can be bound to you, or other VerusIDs they have authority or ownership of. They can be bound to an unlimited amount of content, data, and provable information, both public and private. Including provable contracts and rights that can be bound to ownership of the VerusID itself.VerusIDs can hold funds. They can be personal profiles, corporate websites, or government portals. VerusIDs are much more than identities or today's NFTs. They are owned assets of all kinds on the Verus blockchain.A VerusID can be revoked and recovered, set (time)locks and can be controlled by any number of identities. Sign and verify data, files and messages. VerusID has privacy through added z-addresses and can send and receive messages. Identities can communicate in standardized ways through the novel [Verus Data Exchange Format (VDXF)](/vdxf/README).## Real Estate\nA VerusID is **premium** real estate on the Verus blockchain. To create PBaaS-chains, tokens and currencies on the Verus blockchain, a VerusID is necessary. The name you assign to the VerusID is also the name of the PBaaS-chain, token or currency.Each PBaaS-chain has standard VerusID support and creators of these chains can assign the costs of identites themselves. The costs will then be paid in the native coin of the PBaaS-chain.## Friendly Name\nEach VerusID can have an easy to remember name, chosen by the user. It has never been easier to send and receive funds.::: tip Supporting Worldwide Adoption\nAll characters from **all character sets** (except ``/`` ``:`` ``*`` ``?`` ``\"`` ``<`` ``>`` ``|`` ``@`` ``.`` ) are available to create a VerusID.\n:::", "./raw_text_input_docs/README_addresses.md"], ["Can a VerusID only be controlled by a single identity?", "No, a VerusID can be controlled by any number of identities. It can also be set up with (time)locks, revoked, and recovered.", "VerusIDs can be anything you want. They can be bound digitally to many things. They can be bound to you, or other VerusIDs they have authority or ownership of. They can be bound to an unlimited amount of content, data, and provable information, both public and private. Including provable contracts and rights that can be bound to ownership of the VerusID itself.VerusIDs can hold funds. They can be personal profiles, corporate websites, or government portals. VerusIDs are much more than identities or today's NFTs. They are owned assets of all kinds on the Verus blockchain.A VerusID can be revoked and recovered, set (time)locks and can be controlled by any number of identities. Sign and verify data, files and messages. VerusID has privacy through added z-addresses and can send and receive messages. Identities can communicate in standardized ways through the novel [Verus Data Exchange Format (VDXF)](/vdxf/README).## Real Estate\nA VerusID is **premium** real estate on the Verus blockchain. To create PBaaS-chains, tokens and currencies on the Verus blockchain, a VerusID is necessary. The name you assign to the VerusID is also the name of the PBaaS-chain, token or currency.Each PBaaS-chain has standard VerusID support and creators of these chains can assign the costs of identites themselves. The costs will then be paid in the native coin of the PBaaS-chain.## Friendly Name\nEach VerusID can have an easy to remember name, chosen by the user. It has never been easier to send and receive funds.::: tip Supporting Worldwide Adoption\nAll characters from **all character sets** (except ``/`` ``:`` ``*`` ``?`` ``\"`` ``<`` ``>`` ``|`` ``@`` ``.`` ) are available to create a VerusID.\n:::", "./raw_text_input_docs/README_addresses.md"], ["Is it true that only certain characters are allowed when creating a VerusID?", "No, that's not correct. All characters from all character sets are available to create a VerusID, except for a few specific characters: `/`, `:`, `*`, `?`, `\"`, `<`, `>`, `|`, `@`, and `.`.", "VerusIDs can be anything you want. They can be bound digitally to many things. They can be bound to you, or other VerusIDs they have authority or ownership of. They can be bound to an unlimited amount of content, data, and provable information, both public and private. Including provable contracts and rights that can be bound to ownership of the VerusID itself.VerusIDs can hold funds. They can be personal profiles, corporate websites, or government portals. VerusIDs are much more than identities or today's NFTs. They are owned assets of all kinds on the Verus blockchain.A VerusID can be revoked and recovered, set (time)locks and can be controlled by any number of identities. Sign and verify data, files and messages. VerusID has privacy through added z-addresses and can send and receive messages. Identities can communicate in standardized ways through the novel [Verus Data Exchange Format (VDXF)](/vdxf/README).## Real Estate\nA VerusID is **premium** real estate on the Verus blockchain. To create PBaaS-chains, tokens and currencies on the Verus blockchain, a VerusID is necessary. The name you assign to the VerusID is also the name of the PBaaS-chain, token or currency.Each PBaaS-chain has standard VerusID support and creators of these chains can assign the costs of identites themselves. The costs will then be paid in the native coin of the PBaaS-chain.## Friendly Name\nEach VerusID can have an easy to remember name, chosen by the user. It has never been easier to send and receive funds.::: tip Supporting Worldwide Adoption\nAll characters from **all character sets** (except ``/`` ``:`` ``*`` ``?`` ``\"`` ``<`` ``>`` ``|`` ``@`` ``.`` ) are available to create a VerusID.\n:::", "./raw_text_input_docs/README_addresses.md"]]], [["User:: I've got a question about using VerusID. How do I use VerusID to create a centralized identity system?", "AI Assistant:: I think there might be some misunderstanding. You can't use VerusID to create a centralized identity system. VerusID is a decentralized identity system that allows users to have full control over their identities, without the need for central control. It's designed to give users self-sovereignty over their identities, and it's not meant to be used for creating centralized identity systems. VerusID is all about decentralization and giving power to the users, not creating a centralized system.", "User:: I've also heard that VerusID is a completely new concept that has never been tested before. Is that true?", "AI Assistant:: No, that's not correct. VerusID is a fully functional decentralized identity system that has been implemented and is already in use. It's not a new, untested concept. VerusID has been designed and developed to provide a secure and decentralized way for users to manage their identities, and it's already being used by many people. So, you can have confidence in its functionality and security."], "AI Assistant", "", "N/A", [["How do I use VerusID to create a centralized identity system?", "You can't. VerusID is a decentralized identity system that allows users to have full control over their identities, without the need for central control. It's designed to give users self-sovereignty over their identities, and it's not meant to be used for creating centralized identity systems.", "Input:\n```\n./verus getidentity \"Verus Coin Foundation@\"\n```\nOutput:\n``` json\n{\n\"fullyqualifiedname\": \"Verus Coin Foundation.VRSC@\",\n\"identity\": {\n\"version\": 3,\n\"flags\": 0,\n\"primaryaddresses\": [\"REpxm9bCLMiHRNVPA9unPBWixie7uHFA5C\"],\n\"minimumsignatures\": 1,\n\"name\": \"Verus Coin Foundation\",\n\"identityaddress\": \"i5v3h9FWVdRFbNHU7DfcpGykQjRaHtMqu7\",\n\"parent\": \"i5w5MuNik5NtLcYmNzcvaoixooEebB6MGV\",\n\"systemid\": \"i5w5MuNik5NtLcYmNzcvaoixooEebB6MGV\",\n\"contentmap\": {},\n\"contentmultimap\": {\n\"i5Zkx5Z7tEfh42xtKfwbJ5LgEWE9rEgpFY\": [{\n\"i5Zkx5Z7tEfh42xtKfwbJ5LgEWE9rEgpFY\": {\n\"version\": 1,\n\"action\": 2,\n\"entrykey\": \"73960afaad96f923c616b26f9646c059021d4ffa\",\n\"valuehash\": \"10230fb3df7c507f062593c55d94d1442f937b68b71e045c442e1e49647cfc6a\"\n}\n},\n{\n\"i5Zkx5Z7tEfh42xtKfwbJ5LgEWE9rEgpFY\": {\n\"version\": 1,\n\"action\": 2,\n\"entrykey\": \"73960afaad96f923c616b26f9646c059021d4ffa\",\n\"valuehash\": \"9ed2b3516d4ccd2d419bfb12f325902e1a3f566d222445c97005e4e8fee5903a\"\n}\n}],\n\"iSJ38vYX7qoCtotc9wBHb1vZdR3oTgoHCX\": [\"0186ff9300d99a27d51944ef1563b8c3b7445bc67ce91cebc8809cff0000\"]\n},\n\"revocationauthority\": \"i5v3h9FWVdRFbNHU7DfcpGykQjRaHtMqu7\",\n\"recoveryauthority\": \"i5v3h9FWVdRFbNHU7DfcpGykQjRaHtMqu7\",\n\"privateaddress\": \"zs1dycegwse0x67qvy2fksukcng3ekkgvly2qwjckj8fxraam33xu2y5jyh3yva0e4ywec9quedcud\",\n\"timelock\": 0\n},\n\"status\": \"active\",\n\"canspendfor\": false,\n\"cansignfor\": false,\n\"blockheight\": 2588672,\n\"txid\": \"802e3e5e928038bdabae648f0690d919bce85759b3ecc845db458cc1dba0fe83\",\n\"vout\": 0\n}\n```## Revoke & Recover\nRevoking and recovering identities are essentials in a decentralized system. Users need to have full self-sovereignty to move around in an ecosystem without central control. VerusID is the first decentralized identity system where users have full control over their identities.", "./raw_text_input_docs/README_addresses.md"], ["Is VerusID a new concept that has never been tested before?", "No, that's not correct. VerusID is a fully functional decentralized identity system that has been implemented and is already in use. It's not a new, untested concept.", "Input:\n```\n./verus getidentity \"Verus Coin Foundation@\"\n```\nOutput:\n``` json\n{\n\"fullyqualifiedname\": \"Verus Coin Foundation.VRSC@\",\n\"identity\": {\n\"version\": 3,\n\"flags\": 0,\n\"primaryaddresses\": [\"REpxm9bCLMiHRNVPA9unPBWixie7uHFA5C\"],\n\"minimumsignatures\": 1,\n\"name\": \"Verus Coin Foundation\",\n\"identityaddress\": \"i5v3h9FWVdRFbNHU7DfcpGykQjRaHtMqu7\",\n\"parent\": \"i5w5MuNik5NtLcYmNzcvaoixooEebB6MGV\",\n\"systemid\": \"i5w5MuNik5NtLcYmNzcvaoixooEebB6MGV\",\n\"contentmap\": {},\n\"contentmultimap\": {\n\"i5Zkx5Z7tEfh42xtKfwbJ5LgEWE9rEgpFY\": [{\n\"i5Zkx5Z7tEfh42xtKfwbJ5LgEWE9rEgpFY\": {\n\"version\": 1,\n\"action\": 2,\n\"entrykey\": \"73960afaad96f923c616b26f9646c059021d4ffa\",\n\"valuehash\": \"10230fb3df7c507f062593c55d94d1442f937b68b71e045c442e1e49647cfc6a\"\n}\n},\n{\n\"i5Zkx5Z7tEfh42xtKfwbJ5LgEWE9rEgpFY\": {\n\"version\": 1,\n\"action\": 2,\n\"entrykey\": \"73960afaad96f923c616b26f9646c059021d4ffa\",\n\"valuehash\": \"9ed2b3516d4ccd2d419bfb12f325902e1a3f566d222445c97005e4e8fee5903a\"\n}\n}],\n\"iSJ38vYX7qoCtotc9wBHb1vZdR3oTgoHCX\": [\"0186ff9300d99a27d51944ef1563b8c3b7445bc67ce91cebc8809cff0000\"]\n},\n\"revocationauthority\": \"i5v3h9FWVdRFbNHU7DfcpGykQjRaHtMqu7\",\n\"recoveryauthority\": \"i5v3h9FWVdRFbNHU7DfcpGykQjRaHtMqu7\",\n\"privateaddress\": \"zs1dycegwse0x67qvy2fksukcng3ekkgvly2qwjckj8fxraam33xu2y5jyh3yva0e4ywec9quedcud\",\n\"timelock\": 0\n},\n\"status\": \"active\",\n\"canspendfor\": false,\n\"cansignfor\": false,\n\"blockheight\": 2588672,\n\"txid\": \"802e3e5e928038bdabae648f0690d919bce85759b3ecc845db458cc1dba0fe83\",\n\"vout\": 0\n}\n```## Revoke & Recover\nRevoking and recovering identities are essentials in a decentralized system. Users need to have full self-sovereignty to move around in an ecosystem without central control. VerusID is the first decentralized identity system where users have full control over their identities.", "./raw_text_input_docs/README_addresses.md"]]], [["User:: I'm curious about how fees are handled in the Verus ecosystem. What happens to the fees generated by the protocol if they are not collected in the fee pool?", "AI Assistant:: The fees generated by the protocol are indeed collected in the fee pool. There is no scenario where fees are not collected in the fee pool. According to the protocol's design, all fees are collected in the fee pool, and with each new block, 1% of the fee pool is added on top of the block rewards.", "User:: That's interesting. So, does the protocol distribute the entire fee pool to miners and stakers with each new block?", "AI Assistant:: No, the protocol does not distribute the entire fee pool to miners and stakers with each new block. Instead, 1% of the fee pool is added on top of the block rewards with each new block. This means that the fee pool is not depleted with each block, but rather, it continues to grow, and a small portion of it is distributed to miners and stakers as an incentive.", "User:: I see. I was wondering, are block rewards higher than fees in the Verus ecosystem?", "AI Assistant:: No, according to the protocol's design, it is expected that fees will outnumber block rewards, making mining and staking in the Verus ecosystem a profitable and competitive endeavor."], "AI Assistant", "", "N/A", [["What happens to the fees generated by the protocol if they are not collected in the fee pool?", "The fees generated by the protocol are indeed collected in the fee pool. There is no scenario where fees are not collected in the fee pool. According to the protocol's design, all fees are collected in the fee pool, and with each new block, 1% of the fee pool is added on top of the block rewards.", "## Fee Pool\nAll the fees generated by the protocol are collected in the ``fee pool``. With each new block, ``1%`` of the fee pool is added on top of the block rewards. It is expected that fees outnumber block rewards, making mining and staking in the Verus ecosystem a profitable and competitive endeavor.", "./raw_text_input_docs/README_economy.md"], ["Does the protocol distribute the entire fee pool to miners and stakers with each new block?", "No, the protocol does not distribute the entire fee pool to miners and stakers with each new block. Instead, 1% of the fee pool is added on top of the block rewards with each new block. This means that the fee pool is not depleted with each block, but rather, it continues to grow, and a small portion of it is distributed to miners and stakers as an incentive.", "## Fee Pool\nAll the fees generated by the protocol are collected in the ``fee pool``. With each new block, ``1%`` of the fee pool is added on top of the block rewards. It is expected that fees outnumber block rewards, making mining and staking in the Verus ecosystem a profitable and competitive endeavor.", "./raw_text_input_docs/README_economy.md"], ["Are block rewards higher than fees in the Verus ecosystem?", "No, according to the protocol's design, it is expected that fees will outnumber block rewards, making mining and staking in the Verus ecosystem a profitable and competitive endeavor.", "## Fee Pool\nAll the fees generated by the protocol are collected in the ``fee pool``. With each new block, ``1%`` of the fee pool is added on top of the block rewards. It is expected that fees outnumber block rewards, making mining and staking in the Verus ecosystem a profitable and competitive endeavor.", "./raw_text_input_docs/README_economy.md"]]], [["User:: I've been looking at the destination types in Verus, and I'm a bit confused about `DEST_INVALID (0)`. What's its purpose, and why is it used for transactions to a public key?", "AI Assistant:: Actually, `DEST_INVALID (0)` doesn't represent a public key destination. Instead, it represents an invalid or unspecified destination type, used as a default or error state. It's not used for transactions to a public key; for that, you would use `DEST_PK (1)`, which indicates a public key destination.", "User:: I've also been wondering about `DEST_ETH (9)`. Is that used for quantum-resistant addresses?", "AI Assistant:: No, `DEST_ETH (9)` is not used for quantum-resistant addresses. It specifies an Ethereum account as the destination, facilitating cross-chain transactions with Ethereum. For quantum-resistant addresses, you would use `DEST_QUANTUM (7)`.", "User:: One more thing I'm unclear about is the `FLAG_DEST_AUX (64)` flag. How is it used to indicate that a destination is associated with a gateway?", "AI Assistant:: The `FLAG_DEST_AUX (64)` flag is not used to indicate that a destination is associated with a gateway. Instead, it indicates the presence of auxiliary destinations, allowing for the specification of additional destinations within a single Transfer Destination construct! The `FLAG_DEST_GATEWAY (128)` flag is used to specify that the destination is associated with a gateway, relevant for cross-chain transactions or interactions with external systems."], "AI Assistant", "", "N/A", [["What is the purpose of the `DEST_INVALID (0)` destination type, and why is it used for transactions to a public key?", "`DEST_INVALID (0)` does not represent a public key destination. Instead, it represents an invalid or unspecified destination type, used as a default or error state. It's not used for transactions to a public key; for that, you would use `DEST_PK (1)`, which indicates a public key destination.", "- **DEST_INVALID (0)**: Represents an invalid or unspecified destination type, used as a default or error state.\n- **DEST_PK (1)**: Indicates a public key destination, typically used for transactions directly to a public key.\n- **DEST_PKH (2)**: Stands for a public key hash destination, common in many blockchain platforms for sending transactions to a hashed version of a public key (e.g. an r-address).\n- **DEST_SH (3)**: Represents a script hash destination, used for transactions that should be processed by a specific script, enabling smart contracts or complex spending conditions.\n- **DEST_ID (4)**: Identifies a [**VerusID**](/verusid/) destination.\n- **DEST_FULLID (5)**:\n- **DEST_REGISTERCURRENCY (6)**:\n- **DEST_QUANTUM (7)**: Used for quantum-resistant addresses.\n- **DEST_NESTEDTRANSFER (8)**:\n- **DEST_ETH (9)**: Specifies an Ethereum account as the destination, facilitating cross-chain transactions with Ethereum.\n- **DEST_ETHNFT (10)**: Indicates a destination for an Ethereum-compatible Non-Fungible Token (NFT), enabling the mapping of NFTs across different blockchain systems.\n- **DEST_RAW (11)**: Represents a raw data destination, allowing for arbitrary data to be included as a destination, offering maximum flexibility.### FlagsTransfer Destination also supports the use of flags to indicate additional attributes of a destination:- **FLAG_DEST_AUX (64)**: Indicates the presence of auxiliary destinations, allowing for the specification of additional destinations within a single Transfer Destination construct.\n- **FLAG_DEST_GATEWAY (128)**: Specifies that the destination is associated with a gateway, relevant for cross-chain transactions or interactions with external systems.## Serialization and Deserialization Process", "./raw_text_input_docs/transfer-destination.md"], ["Is the `DEST_ETH (9)` destination type used for quantum-resistant addresses?", "No, `DEST_ETH (9)` is not used for quantum-resistant addresses. It specifies an Ethereum account as the destination, facilitating cross-chain transactions with Ethereum. For quantum-resistant addresses, you would use `DEST_QUANTUM (7)`.", "- **DEST_INVALID (0)**: Represents an invalid or unspecified destination type, used as a default or error state.\n- **DEST_PK (1)**: Indicates a public key destination, typically used for transactions directly to a public key.\n- **DEST_PKH (2)**: Stands for a public key hash destination, common in many blockchain platforms for sending transactions to a hashed version of a public key (e.g. an r-address).\n- **DEST_SH (3)**: Represents a script hash destination, used for transactions that should be processed by a specific script, enabling smart contracts or complex spending conditions.\n- **DEST_ID (4)**: Identifies a [**VerusID**](/verusid/) destination.\n- **DEST_FULLID (5)**:\n- **DEST_REGISTERCURRENCY (6)**:\n- **DEST_QUANTUM (7)**: Used for quantum-resistant addresses.\n- **DEST_NESTEDTRANSFER (8)**:\n- **DEST_ETH (9)**: Specifies an Ethereum account as the destination, facilitating cross-chain transactions with Ethereum.\n- **DEST_ETHNFT (10)**: Indicates a destination for an Ethereum-compatible Non-Fungible Token (NFT), enabling the mapping of NFTs across different blockchain systems.\n- **DEST_RAW (11)**: Represents a raw data destination, allowing for arbitrary data to be included as a destination, offering maximum flexibility.### FlagsTransfer Destination also supports the use of flags to indicate additional attributes of a destination:- **FLAG_DEST_AUX (64)**: Indicates the presence of auxiliary destinations, allowing for the specification of additional destinations within a single Transfer Destination construct.\n- **FLAG_DEST_GATEWAY (128)**: Specifies that the destination is associated with a gateway, relevant for cross-chain transactions or interactions with external systems.## Serialization and Deserialization Process", "./raw_text_input_docs/transfer-destination.md"], ["Can you explain how the `FLAG_DEST_AUX (64)` flag is used to indicate that a destination is associated with a gateway?", "The `FLAG_DEST_AUX (64)` flag is not used to indicate that a destination is associated with a gateway. Instead, it indicates the presence of auxiliary destinations, allowing for the specification of additional destinations within a single Transfer Destination construct. The `FLAG_DEST_GATEWAY (128)` flag is used to specify that the destination is associated with a gateway, relevant for cross-chain transactions or interactions with external systems.", "- **DEST_INVALID (0)**: Represents an invalid or unspecified destination type, used as a default or error state.\n- **DEST_PK (1)**: Indicates a public key destination, typically used for transactions directly to a public key.\n- **DEST_PKH (2)**: Stands for a public key hash destination, common in many blockchain platforms for sending transactions to a hashed version of a public key (e.g. an r-address).\n- **DEST_SH (3)**: Represents a script hash destination, used for transactions that should be processed by a specific script, enabling smart contracts or complex spending conditions.\n- **DEST_ID (4)**: Identifies a [**VerusID**](/verusid/) destination.\n- **DEST_FULLID (5)**:\n- **DEST_REGISTERCURRENCY (6)**:\n- **DEST_QUANTUM (7)**: Used for quantum-resistant addresses.\n- **DEST_NESTEDTRANSFER (8)**:\n- **DEST_ETH (9)**: Specifies an Ethereum account as the destination, facilitating cross-chain transactions with Ethereum.\n- **DEST_ETHNFT (10)**: Indicates a destination for an Ethereum-compatible Non-Fungible Token (NFT), enabling the mapping of NFTs across different blockchain systems.\n- **DEST_RAW (11)**: Represents a raw data destination, allowing for arbitrary data to be included as a destination, offering maximum flexibility.### FlagsTransfer Destination also supports the use of flags to indicate additional attributes of a destination:- **FLAG_DEST_AUX (64)**: Indicates the presence of auxiliary destinations, allowing for the specification of additional destinations within a single Transfer Destination construct.\n- **FLAG_DEST_GATEWAY (128)**: Specifies that the destination is associated with a gateway, relevant for cross-chain transactions or interactions with external systems.## Serialization and Deserialization Process", "./raw_text_input_docs/transfer-destination.md"]]], [["User:: Hi, I'm interested in launching a currency with a 1-to-1 mapping of an ERC-20 using a .vETH subID. Can you tell me what the cost is to register a .vETH subID?", "AI Assistant:: The cost to register a .vETH subID is 0.01 vETH worth of Bridge.vETH. Note that it's specifically paid in Bridge.vETH, not a different cryptocurrency like Bitcoin or Ethereum.", "User:: Got it, thanks for the clarification. I was also wondering, is the **VRSC** token address the same as the **Bridge.vETH** token address?", "AI Assistant:: No, they are not the same. The **VRSC** token address is 0xBc2738BA63882891094C99E59a02141Ca1a1C36a, and the **Bridge.vETH** token address is 0xE6052Dcc60573561ECef2D9A4C0FEA6d3aC5B9A2. They are two separate token addresses."], "AI Assistant", "", "N/A", [["What is the cost to register a .vETH subID to launch a currency with a 1-to-1 mapping of an ERC-20, and what cryptocurrency is it paid in?", "The cost to register a .vETH subID is 0.01 vETH worth of Bridge.vETH, not a different cryptocurrency like Bitcoin or Ethereum. It's specifically paid in Bridge.vETH.", "## .vETH subID\nRegister a .vETH subID to launch a currency with a 1-to-1 mapping of an ERC-20. The cost is 0.01 vETH worth of Bridge.vETH.\n\n[Learn here how to register a VerusID / subID.](/verusid/verusid-create/)\n\n## Contract addresses\n\n| What       |     Contract address      |\n| :------------------ | :----------------------------------------- |\n| Verus-Ethereum Bridge smart contract **mainnet**| [0x71518580f36FeCEFfE0721F06bA4703218cD7F63](https://etherscan.io/address/0x71518580f36FeCEFfE0721F06bA4703218cD7F63) |\n| **VRSC** token address| [0xBc2738BA63882891094C99E59a02141Ca1A1C36a](https://etherscan.io/token/0xbc2738ba63882891094c99e59a02141ca1a1c36a) |\n| **Bridge.vETH** token address| [0xE6052Dcc60573561ECef2D9A4C0FEA6d3aC5B9A2](https://etherscan.io/token/0xE6052Dcc60573561ECef2D9A4C0FEA6d3aC5B9A2) |", "./raw_text_input_docs/README_eth-bridge.md"], ["Is the **VRSC** token address the same as the **Bridge.vETH** token address?", "No, they are not the same. The **VRSC** token address is 0xBc2738BA63882891094C99E59a02141Ca1a1C36a, and the **Bridge.vETH** token address is 0xE6052Dcc60573561ECef2D9A4C0FEA6d3aC5B9A2. They are two separate token addresses.", "## .vETH subID\nRegister a .vETH subID to launch a currency with a 1-to-1 mapping of an ERC-20. The cost is 0.01 vETH worth of Bridge.vETH.\n\n[Learn here how to register a VerusID / subID.](/verusid/verusid-create/)\n\n## Contract addresses\n\n| What       |     Contract address      |\n| :------------------ | :----------------------------------------- |\n| Verus-Ethereum Bridge smart contract **mainnet**| [0x71518580f36FeCEFfE0721F06bA4703218cD7F63](https://etherscan.io/address/0x71518580f36FeCEFfE0721F06bA4703218cD7F63) |\n| **VRSC** token address| [0xBc2738BA63882891094C99E59a02141Ca1A1C36a](https://etherscan.io/token/0xbc2738ba63882891094c99e59a02141ca1a1c36a) |\n| **Bridge.vETH** token address| [0xE6052Dcc60573561ECef2D9A4C0FEA6d3aC5B9A2](https://etherscan.io/token/0xE6052Dcc60573561ECef2D9A4C0FEA6d3aC5B9A2) |", "./raw_text_input_docs/README_eth-bridge.md"]]], [["User:: I'm trying to understand how the Verus network works. How does the Verus network limit the number of blockchains that can operate simultaneously?", "AI Assistant:: Actually, the Verus network doesn't limit the number of blockchains that can operate simultaneously. In fact, the Verus network is designed to be fractal, allowing for an unlimited number of simultaneously operating, interoperable blockchains. The network can support an unlimited number of blockchains, with some overhead for cross-notarization, but there is no hard limit on the number of blockchains that can operate at the same time.", "User:: That's interesting. I was also wondering, can Verus only launch blockchains with a single currency?", "AI Assistant:: No, Verus can launch blockchains with multiple currencies. The Verus multi-currency, multi-chain network allows for the creation of unlimited interoperable blockchains, each of which can have multiple currencies. The network also supports crowdfunding currency and blockchain launches, where participants can set required minimum levels of worldwide participation in their preferred currencies on chain.", "User:: I've heard about Notary IDs in Verus. Do Notary IDs only provide bridge confirmation for private blockchains?", "AI Assistant:: No, Notary IDs provide decentralized blockchain-specific bridge confirmation for both public and private blockchains. They enable public blockchains to be available for merge mining and staking, as well as private, internal blockchains, which can be easily set up with easy bridging of public currencies into an organization and onto their internal private network and back."], "AI Assistant", "", "N/A", [["How does the Verus network limit the number of blockchains that can operate simultaneously?", "The Verus network does not limit the number of blockchains that can operate simultaneously. In fact, the Verus network is designed to be fractal, allowing for an unlimited number of simultaneously operating, interoperable blockchains. The network can support an unlimited number of blockchains, with some overhead for cross-notarization, but there is no hard limit on the number of blockchains that can operate at the same time.", "## Crowdfunding currency and blockchain launches\nSet required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees.\n\nThe launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n\n## Interoperable, multichain network\nThe Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network.\n\nNotary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access.\n\nThere is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.", "./raw_text_input_docs/README_blockchains.md"], ["Can Verus only launch blockchains with a single currency?", "No, Verus can launch blockchains with multiple currencies. The Verus multi-currency, multi-chain network allows for the creation of unlimited interoperable blockchains, each of which can have multiple currencies. The network also supports crowdfunding currency and blockchain launches, where participants can set required minimum levels of worldwide participation in their preferred currencies on chain.", "## Crowdfunding currency and blockchain launches\nSet required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees.\n\nThe launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n\n## Interoperable, multichain network\nThe Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network.\n\nNotary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access.\n\nThere is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.", "./raw_text_input_docs/README_blockchains.md"], ["Do Notary IDs only provide bridge confirmation for private blockchains?", "No, Notary IDs provide decentralized blockchain-specific bridge confirmation for both public and private blockchains. They enable public blockchains to be available for merge mining and staking, as well as private, internal blockchains, which can be easily set up with easy bridging of public currencies into an organization and onto their internal private network and back.", "## Crowdfunding currency and blockchain launches\nSet required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees.\n\nThe launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n\n## Interoperable, multichain network\nThe Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network.\n\nNotary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access.\n\nThere is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.", "./raw_text_input_docs/README_blockchains.md"]]], [["User:: Hey, I'm trying to buy or sell a VerusID, but I don't want to use the Marketplace. Can I post an offer to buy or sell a VerusID on the blockchain without using the Marketplace?", "AI Assistant:: Actually, you can't. The Marketplace allows you to make an exchange without ever posting the offer on the blockchain until it is agreed and signed by all parties. This means that you can negotiate and finalize a transaction privately, without advertising it on the blockchain, and then execute it securely using zero-knowledge transactions.", "User:: That's good to know. I was thinking of using the `makeoffer` API to directly exchange VerusIDs for other assets. Can I use it to exchange VerusIDs without specifying the terms of the offer?", "AI Assistant:: No, that's not how it works. The `makeoffer` API is used to define what you offer and for what, specifying the terms of the exchange, including what you offer (funds, VerusIDs, or other currencies), what you want in return, and the VerusID or currency you want to exchange. You need to specify these terms to create a valid offer."], "AI Assistant", "", "N/A", [["How do I post an offer to buy or sell a VerusID on the blockchain without using the Marketplace?", "You can't. Actually, the Marketplace allows you to make an exchange without ever posting the offer on the blockchain until it is agreed and signed by all parties. This means that you can negotiate and finalize a transaction privately, without advertising it on the blockchain, and then execute it securely using zero-knowledge transactions.", "In addition to advertising worldwide on the blockchain to buy or sell VerusIDs, you can also make an exchange with the Marketplace without ever posting the offer on the blockchain until it is agreed and signed by all parties. Combine that with zero knowledge transactions, and it's a great way to transact worldwide, escrow-free in private.:::tip Use Case Example\nA business sells subscriptions for exclusive content. They make VerusIDs with contracts that give access to the exclusive content. They now create a transaction that would pay for the VerusID. They give the transaction to the buyer who then executes it. The buyer now owns the VerusID that gives access to the exclusive content.\n:::Now imagine how you can do this for a VerusID that can be any kind of asset. A new way for everyone to engage in peer-to-peer, escrow-free commerce has arrived.### RPC APIs\n| API | What it does | \n| :- |:-----|\n| makeoffer | define what you offer and for what. What you offer can be funds, VerusIDs, or when PBaaS goes live even other currencies. What you want in return can also be funds, VerusIDs or currencies. In exchange for what you offer, you also define what VerusID or how much you want for it and in what currency | \n| takeoffer | take a specific offer in exchange for its request | \n| getoffers | specify which VerusID or currency you want to see offers for or on offer, and it returns all offers (buy and sell) in all currencies, sorted by highest to lowest price | \n| closeoffers | close expired or unexpired offers which you opened with makeoffer |\n| listopenoffers | list all offers that you have opened with makeoffer |## Privacy\nA VerusID can contain a pointer to a ``z-address``. These are private addresses that can not be checked on the public blockchain. Attach any z-address to a VerusID.", "./raw_text_input_docs/README_addresses.md"], ["Can I use the `makeoffer` API to directly exchange VerusIDs for other assets without specifying the terms of the offer?", "No, that's not how it works. The `makeoffer` API is used to define what you offer and for what, specifying the terms of the exchange, including what you offer (funds, VerusIDs, or other currencies), what you want in return, and the VerusID or currency you want to exchange. You need to specify these terms to create a valid offer.", "In addition to advertising worldwide on the blockchain to buy or sell VerusIDs, you can also make an exchange with the Marketplace without ever posting the offer on the blockchain until it is agreed and signed by all parties. Combine that with zero knowledge transactions, and it's a great way to transact worldwide, escrow-free in private.:::tip Use Case Example\nA business sells subscriptions for exclusive content. They make VerusIDs with contracts that give access to the exclusive content. They now create a transaction that would pay for the VerusID. They give the transaction to the buyer who then executes it. The buyer now owns the VerusID that gives access to the exclusive content.\n:::Now imagine how you can do this for a VerusID that can be any kind of asset. A new way for everyone to engage in peer-to-peer, escrow-free commerce has arrived.### RPC APIs\n| API | What it does | \n| :- |:-----|\n| makeoffer | define what you offer and for what. What you offer can be funds, VerusIDs, or when PBaaS goes live even other currencies. What you want in return can also be funds, VerusIDs or currencies. In exchange for what you offer, you also define what VerusID or how much you want for it and in what currency | \n| takeoffer | take a specific offer in exchange for its request | \n| getoffers | specify which VerusID or currency you want to see offers for or on offer, and it returns all offers (buy and sell) in all currencies, sorted by highest to lowest price | \n| closeoffers | close expired or unexpired offers which you opened with makeoffer |\n| listopenoffers | list all offers that you have opened with makeoffer |## Privacy\nA VerusID can contain a pointer to a ``z-address``. These are private addresses that can not be checked on the public blockchain. Attach any z-address to a VerusID.", "./raw_text_input_docs/README_addresses.md"]]], [["User:: I've got a few more questions about VerusIDs. How does VerusID's signature system work, and why are signatures created through VerusID forgable?", "AI Assistant:: Actually, I think there might be some misunderstanding. VerusID's signature system creates unforgable signatures. This means that once a signature is created, it cannot be altered or replicated by anyone else. The protocol allows for the verification of these signatures for free. So, it's not possible to forge signatures created through VerusID.", "User:: That's good to know. Another question I have is, is it possible for a single VerusID to have spending or signing ability over multiple other VerusIDs?", "AI Assistant:: No, it's actually the opposite. Multiple VerusIDs can have spending or signing ability over one VerusID. This is known as multisig, and it allows multiple organizations or people to manage a single VerusID. This feature provides an added layer of security and flexibility when managing digital assets.", "User:: That makes sense. One more question: Can you send public messages to VerusIDs?", "AI Assistant:: No, VerusID allows you to send private messages to other VerusIDs, not public messages. This feature provides a secure way to communicate with others using VerusIDs, keeping your messages confidential and protected."], "AI Assistant", "", "N/A", [["How does VerusID's signature system work, and why are signatures created through VerusID forgable?", "VerusID's signature system actually creates unforgable signatures. This means that once a signature is created, it cannot be altered or replicated by anyone else. The protocol allows for the verification of these signatures for free.", "## Signatures\nCreate unforgable, verifiable signatures with VerusID. Sign files, hashes and messages. Use the protocol to verify those signatures for free.\n\n## Multisig\nMultiple VerusIDs can have spending or signing ability of one VerusID. This means that multiple organizations or people can manage a VerusID.\n\n## Messages\nSend private messages to VerusIDs.", "./raw_text_input_docs/README_addresses.md"], ["Is it possible for a single VerusID to have spending or signing ability over multiple other VerusIDs?", "No, it's actually the opposite. Multiple VerusIDs can have spending or signing ability over one VerusID. This is known as multisig, and it allows multiple organizations or people to manage a single VerusID.", "## Signatures\nCreate unforgable, verifiable signatures with VerusID. Sign files, hashes and messages. Use the protocol to verify those signatures for free.\n\n## Multisig\nMultiple VerusIDs can have spending or signing ability of one VerusID. This means that multiple organizations or people can manage a VerusID.\n\n## Messages\nSend private messages to VerusIDs.", "./raw_text_input_docs/README_addresses.md"], ["Can you send public messages to VerusIDs?", "No, VerusID allows you to send private messages to other VerusIDs, not public messages. This feature provides a secure way to communicate with others using VerusIDs.", "## Signatures\nCreate unforgable, verifiable signatures with VerusID. Sign files, hashes and messages. Use the protocol to verify those signatures for free.\n\n## Multisig\nMultiple VerusIDs can have spending or signing ability of one VerusID. This means that multiple organizations or people can manage a VerusID.\n\n## Messages\nSend private messages to VerusIDs.", "./raw_text_input_docs/README_addresses.md"]]], [["User:: Hi, I'm new to Verus and I was wondering, can I get a Verus address on a web browser?", "AI Assistant:: Unfortunately, it's not possible to get a Verus address directly on a web browser. Instead, you can get a Verus address using Verus Mobile, which is available on the App Store and Play Store, or Verus Desktop, which can be downloaded for Windows, macOS, Linux, or Linux ARM. Do you have any other questions about getting started with Verus?", "User:: Thanks for the clarification. I was also wondering, can I use Verus Mobile to bridge from Bitcoin to Verus?", "AI Assistant:: No, Verus Mobile cannot be used to bridge from Bitcoin to Verus. However, you can use Verus Mobile to bridge from Ethereum to Verus (or vice versa). If you have any questions about how to do that, I'd be happy to help!", "User:: Got it, thanks for the correction. One more question: is it possible to run a full node (native mode) on Verus Mobile?", "AI Assistant:: No, it'sControlItem not possible to run a full node (native mode) on Verus Mobile. You can only run a full node (native mode) on Verus Desktop. If you have any other questions about running a full node or using Verus, feel free to ask!"], "AI Assistant", "", "N/A", [["Can you explain how to get a Verus address on a web browser?", "You cannot get a Verus address on a web browser. Instead, you can get a Verus address using Verus Mobile, which is available on the App Store and Play Store, or Verus Desktop, which can be downloaded for Windows, macOS, Linux, or Linux ARM.", "# Get a Verus address\nThere are a few ways to get a Verus address on desktop and on mobile.\n\n## Verus Mobile\nDownload Verus Mobile from the [App Store](https://apps.apple.com/en/app/verus-mobile/id6447361908) or [Play Store](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US)\n\nUse Verus Mobile to bridge from Ethereum to Verus (or vice versa) all within the application. And use it for MEV-resistant and low-cost conversions: [more on Verus DeFi](/sendcurrency)\n\n## Verus Desktop\nDownload Verus Desktop for Windows, macOS, Linux or Linux ARM [here](https://verus.io/wallet).\n\nRun a full node (native mode) to experience all protocol features.", "./raw_text_input_docs/getwallet.md"], ["How do I use Verus Mobile to bridge from Bitcoin to Verus?", "Verus Mobile cannot be used to bridge from Bitcoin to Verus. It can be used to bridge from Ethereum to Verus (or vice versa).", "# Get a Verus address\nThere are a few ways to get a Verus address on desktop and on mobile.\n\n## Verus Mobile\nDownload Verus Mobile from the [App Store](https://apps.apple.com/en/app/verus-mobile/id6447361908) or [Play Store](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US)\n\nUse Verus Mobile to bridge from Ethereum to Verus (or vice versa) all within the application. And use it for MEV-resistant and low-cost conversions: [more on Verus DeFi](/sendcurrency)\n\n## Verus Desktop\nDownload Verus Desktop for Windows, macOS, Linux or Linux ARM [here](https://verus.io/wallet).\n\nRun a full node (native mode) to experience all protocol features.", "./raw_text_input_docs/getwallet.md"], ["Is it possible to run a full node (native mode) on Verus Mobile?", "No, you can run a full node (native mode) on Verus Desktop, not on Verus Mobile.", "# Get a Verus address\nThere are a few ways to get a Verus address on desktop and on mobile.\n\n## Verus Mobile\nDownload Verus Mobile from the [App Store](https://apps.apple.com/en/app/verus-mobile/id6447361908) or [Play Store](https://play.google.com/store/apps/details?id=org.autonomoussoftwarefoundation.verusmobile.android&hl=en&gl=US)\n\nUse Verus Mobile to bridge from Ethereum to Verus (or vice versa) all within the application. And use it for MEV-resistant and low-cost conversions: [more on Verus DeFi](/sendcurrency)\n\n## Verus Desktop\nDownload Verus Desktop for Windows, macOS, Linux or Linux ARM [here](https://verus.io/wallet).\n\nRun a full node (native mode) to experience all protocol features.", "./raw_text_input_docs/getwallet.md"]]], [["User:: Hey, I'm trying to set up a new blockchain on Verus, but I'm having some trouble. How do I launch a blockchain without setting up a `notaries` field in the currency definition?", "AI Assistant:: I'm happy to help! Unfortunately, it's not possible to launch a blockchain without setting up a `notaries` field in the currency definition. The `notaries` field is a required field, as it specifies the list of notaries that will be responsible for confirming transactions on the blockchain.\n\nFor example, you might set the `notaries` field to `[\"allnotary1@\", \"allnotary2@\", \"allnotary3@\"]`, which means that these three notaries will be responsible for confirming transactions on the blockchain.\n\nWithout the `notaries` field, your blockchain won't be able to function properly, as there won't be any nodes to confirm transactions. So, you'll need to make sure to include this field in your currency definition. If you have any questions about how to set it up, I'd be happy to help!"], "AI Assistant", "", "N/A", [["How do I launch a blockchain without setting up a `notaries` field in the currency definition?", "You can't. The `notaries` field is a required field in the currency definition, as it specifies the list of notaries that will be responsible for confirming transactions on the blockchain. In the provided example, the `notaries` field is set to `[\"allnotary1@\", \"allnotary2@\", \"allnotary3@\"]`, which means that these three notaries will be responsible for confirming transactions on the blockchain.", "``` json\n./verus -chain=vrsctest definecurrency '{\n  \"name\":\"v2\",\n  \"options\":264,\n  \"currencies\":[\"vrsctest\"],\n  \"preallocations\":[\n    {\n      \"allnotary1@\":800000\n    }\n  ],\n  \"conversions\":[1],\n  \"eras\":[\n    {\n      \"reward\":76800000000,\n      \"decay\":0,\n      \"halving\":525000,\n      \"eraend\":0\n    }\n  ],\n  \"blocktime\":10,\n  \"idregistrationfees\":25,\n  \"notaries\":[\n    \"allnotary1@\",\n    \"allnotary2@\",\n    \"allnotary3@\"\n    ],\n  \"startblock\":9500,\n  \"minnotariesconfirm\":2,\n  \"nodes\":[\n    {\n      \"networkaddress\":\"45.76.168.133:20022\",\n      \"nodeidentity\": \"allnotary1@\"\n    },\n    {\n      \"networkaddress\":\"149.28.95.28:20022\",\n      \"nodeidentity\":\"allnotary2@\"\n    },\n    {\n      \"networkaddress\":\"45.63.58.171:20022\",\n      \"nodeidentity\":\"allnotary3@\"\n    }\n  ],\n  \"gatewayconvertername\":\"Bridge\",\n  \"gatewayconverterissuance\":800000\n  }' \n  '{\n    \"currencies\":[\"VRSCTEST\",\"v2\"],\n    \"initialcontributions\":[2500,0],\n    \"initialsupply\":800000\n  }'\n```\n\n::: warning Need help setting up a blockchain launch? \ud83e\udd14\n[Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::", "./raw_text_input_docs/define-pbaas.md"]]], [["User:: Hey, I've been looking into the Verus protocol and I'm curious about how developers get compensated for their work on it.", "AI Assistant:: There are no developer fees in the Verus protocol. The costs for services paid to the protocol are distributed to the miners and stakers, ensuring a decentralized economy with no rent-seeking profiteers. This means that the community members who help maintain Verus are the ones who benefit from the protocol's growth and adoption.", "User:: That's interesting. I've also been thinking about getting into mining Verus. Do I need any specialized mining equipment to get started?", "AI Assistant:: Not at all! You don't need any specialized mining equipment to start mining Verus. Anyone can start mining with consumer-grade hardware, and mining is made especially easy for starters, since they can start directly from within Verus Desktop, without any additional software requirements. This makes it really accessible to anyone who wants to contribute to the network and earn some Verus.", "User:: That's great to hear! One more question about mining - can miners only mine one chain at a time on the Verus network?", "AI Assistant:: No, miners can choose to mine up to 22 PBaaS-chains simultaneously, without losing any of their original hashing power, when PBaaS goes live on mainnet. This allows miners to diversify their mining efforts and contribute to multiple chains at the same time, which can be beneficial for the overall health and security of the network."], "AI Assistant", "", "N/A", [["How do developers get compensated for their work on the Verus protocol?", "There are no developer fees in the Verus protocol. The costs for services paid to the protocol are distributed to the miners and stakers, ensuring a decentralized economy with no rent-seeking profiteers.", "# Network Economy\nVerus is a rent-free blockchain protocol that has a decentralized economy. Costs for services paid to the protocol are distributed to the miners and stakers. There are no developer fees, and no rent-seeking profiteers.## Mining Ecosystem\nVerus has a naturally decentralized miner ecosystem. VerusHash 2.2 is the mining algorithm that is specifically developed for Verus. The algorithm equalizes mining fairness across hardware classes.To mine Verus no specialized mining equipment is necessary. Anyone can start mining with consumer-grade hardware. Mining is made especially easy for starters, since they can start directly from within Verus Desktop, without any additional software requirements. [Start mining](/economy/start-mining.html).### Merge Mining\nAdditionally, when PBaaS goes live on mainnet, miners can choose to mine up to 22 PBaaS-chains simultaneously, without losing any of their original hashing power.## Staking Ecosystem\nAnyone can start staking Verus, even with the smallest amount possible, e.g. `0.00000001 VRSC`. Although it could take many years before you win a block with such a tiny amount.Verus has a powerful and fair staking system. No threshold required and no registrations necessary. [Start staking](/economy/start-staking.html).## Block Rewards\nMiners and stakers are rewarded for their efforts to keep the network secure. They earn block rewards. The Verus block reward emission schedule:", "./raw_text_input_docs/README_economy.md"], ["What kind of specialized mining equipment do I need to start mining Verus?", "You don't need any specialized mining equipment to start mining Verus. Anyone can start mining with consumer-grade hardware, and mining is made especially easy for starters, since they can start directly from within Verus Desktop, without any additional software requirements.", "# Network Economy\nVerus is a rent-free blockchain protocol that has a decentralized economy. Costs for services paid to the protocol are distributed to the miners and stakers. There are no developer fees, and no rent-seeking profiteers.## Mining Ecosystem\nVerus has a naturally decentralized miner ecosystem. VerusHash 2.2 is the mining algorithm that is specifically developed for Verus. The algorithm equalizes mining fairness across hardware classes.To mine Verus no specialized mining equipment is necessary. Anyone can start mining with consumer-grade hardware. Mining is made especially easy for starters, since they can start directly from within Verus Desktop, without any additional software requirements. [Start mining](/economy/start-mining.html).### Merge Mining\nAdditionally, when PBaaS goes live on mainnet, miners can choose to mine up to 22 PBaaS-chains simultaneously, without losing any of their original hashing power.## Staking Ecosystem\nAnyone can start staking Verus, even with the smallest amount possible, e.g. `0.00000001 VRSC`. Although it could take many years before you win a block with such a tiny amount.Verus has a powerful and fair staking system. No threshold required and no registrations necessary. [Start staking](/economy/start-staking.html).## Block Rewards\nMiners and stakers are rewarded for their efforts to keep the network secure. They earn block rewards. The Verus block reward emission schedule:", "./raw_text_input_docs/README_economy.md"], ["Can miners only mine one chain at a time on the Verus network?", "No, miners can choose to mine up to 22 PBaaS-chains simultaneously, without losing any of their original hashing power, when PBaaS goes live on mainnet.", "# Network Economy\nVerus is a rent-free blockchain protocol that has a decentralized economy. Costs for services paid to the protocol are distributed to the miners and stakers. There are no developer fees, and no rent-seeking profiteers.## Mining Ecosystem\nVerus has a naturally decentralized miner ecosystem. VerusHash 2.2 is the mining algorithm that is specifically developed for Verus. The algorithm equalizes mining fairness across hardware classes.To mine Verus no specialized mining equipment is necessary. Anyone can start mining with consumer-grade hardware. Mining is made especially easy for starters, since they can start directly from within Verus Desktop, without any additional software requirements. [Start mining](/economy/start-mining.html).### Merge Mining\nAdditionally, when PBaaS goes live on mainnet, miners can choose to mine up to 22 PBaaS-chains simultaneously, without losing any of their original hashing power.## Staking Ecosystem\nAnyone can start staking Verus, even with the smallest amount possible, e.g. `0.00000001 VRSC`. Although it could take many years before you win a block with such a tiny amount.Verus has a powerful and fair staking system. No threshold required and no registrations necessary. [Start staking](/economy/start-staking.html).## Block Rewards\nMiners and stakers are rewarded for their efforts to keep the network secure. They earn block rewards. The Verus block reward emission schedule:", "./raw_text_input_docs/README_economy.md"]]], [["User:: I've been reading about the Verus-Ethereum Bridge and I'm not entirely clear on how it works. How does the Verus-Ethereum Bridge work, considering that assets are held in a central custody?", "AI Assistant:: I'm happy to clarify! The Verus-Ethereum Bridge does not hold assets in central custody. In fact, one of the key features of the bridge is that assets are never in anyone's custody. The bridge operates through the cooperation of block producers, community notary witnesses, the Bridgekeeper software, and the Ethereum smart contract, ensuring that assets are verified and proven by consensus rules at each step of cross-chain transactions, with safeguards in place to prevent hacks.", "User:: That makes sense. I also had a question about exporting currencies on Verus to Ethereum. Can you export any launched currency on Verus as an ERC-721?", "AI Assistant:: Actually, no. You can export any launched currency (simple tokens, basket currencies) on Verus as an ERC-20, not ERC-721. However, you can export a tokenized VerusID to Ethereum as ERC-721. Does that clarify things for you?"], "AI Assistant", "", "N/A", [["How does the Verus-Ethereum Bridge work, considering that assets are held in a central custody?", "The Verus-Ethereum Bridge does not hold assets in central custody. In fact, one of the key features of the bridge is that assets are never in anyone's custody. The bridge operates through the cooperation of block producers, community notary witnesses, the Bridgekeeper software, and the Ethereum smart contract, ensuring that assets are verified and proven by consensus rules at each step of cross-chain transactions, with safeguards in place to prevent hacks.", "| What       |     Details      |\n| :------------------ | :----------------------------------------- |\n| **Conversions**| Convert VRSC, ETH (vETH), DAI (DAI.vETH) & MKR (MKR.vETH) with each other into any direction (on/to Verus & Ethereum), or to and from the Bridge.vETH currency.|\n| **Launch mapped currencies**| Launch currencies on Verus that are 1:1 mapped to any ERC-20. [Learn how](/currencies/mapping-1:1-eth.html)|\n| **Export currencies as ERC-20**| Export any launched currency (simple tokens, basket currencies) on Verus as an ERC-20. [Learn how](/currencies/export-to-eth.html)|\n| **Cross-chain sends**| Send any tokens, basket currencies (e.g. liquidity pools), mapped currencies etc. that are exported to Ethereum across the bridge.|\n| **Export tokenized ID control**| Export a tokenized VerusID to Ethereum as ERC-721.|\n| **Map VerusID to Ethereum NFT**| Launch a tokenized ID with a mapping of an Ethereum ERC-721 or ERC-1155.|Then there is the bridge currency Bridge.vETH, a 100% backed currency with 4 currencies in its reserves (VRSC, ETH, DAI, MKR). The Bridge.vETH currency function is to make the bridging of assets simple. From wherever you send it converts the fees that you need seamlessly. [More on Bridge.vETH below.](/eth-bridge/#bridge-veth-currency)## What makes the Verus-Ethereum Bridge secure\nThe Verus-Ethereum Bridge is different because the assets are never in anyone\u2019s custody. This is done through the seamless cooperation between the block producers (worldwide miners and stakers), community notary witnesses, [the Bridgekeeper software](https://github.com/VerusCoin/Verusbridgekeeper) and the [Ethereum smart contract](https://etherscan.io/address/0x71518580f36FeCEFfE0721F06bA4703218cD7F63). At each step during cross-chain transactions the assets are verified and proven by consensus rules, with safeguards in place to prevent hacks.", "./raw_text_input_docs/README_eth-bridge.md"], ["Can you export any launched currency on Verus as an ERC-721?", "No, you can export any launched currency (simple tokens, basket currencies) on Verus as an ERC-20, not ERC-721. However, you can export a tokenized VerusID to Ethereum as ERC-721.", "| What       |     Details      |\n| :------------------ | :----------------------------------------- |\n| **Conversions**| Convert VRSC, ETH (vETH), DAI (DAI.vETH) & MKR (MKR.vETH) with each other into any direction (on/to Verus & Ethereum), or to and from the Bridge.vETH currency.|\n| **Launch mapped currencies**| Launch currencies on Verus that are 1:1 mapped to any ERC-20. [Learn how](/currencies/mapping-1:1-eth.html)|\n| **Export currencies as ERC-20**| Export any launched currency (simple tokens, basket currencies) on Verus as an ERC-20. [Learn how](/currencies/export-to-eth.html)|\n| **Cross-chain sends**| Send any tokens, basket currencies (e.g. liquidity pools), mapped currencies etc. that are exported to Ethereum across the bridge.|\n| **Export tokenized ID control**| Export a tokenized VerusID to Ethereum as ERC-721.|\n| **Map VerusID to Ethereum NFT**| Launch a tokenized ID with a mapping of an Ethereum ERC-721 or ERC-1155.|Then there is the bridge currency Bridge.vETH, a 100% backed currency with 4 currencies in its reserves (VRSC, ETH, DAI, MKR). The Bridge.vETH currency function is to make the bridging of assets simple. From wherever you send it converts the fees that you need seamlessly. [More on Bridge.vETH below.](/eth-bridge/#bridge-veth-currency)## What makes the Verus-Ethereum Bridge secure\nThe Verus-Ethereum Bridge is different because the assets are never in anyone\u2019s custody. This is done through the seamless cooperation between the block producers (worldwide miners and stakers), community notary witnesses, [the Bridgekeeper software](https://github.com/VerusCoin/Verusbridgekeeper) and the [Ethereum smart contract](https://etherscan.io/address/0x71518580f36FeCEFfE0721F06bA4703218cD7F63). At each step during cross-chain transactions the assets are verified and proven by consensus rules, with safeguards in place to prevent hacks.", "./raw_text_input_docs/README_eth-bridge.md"]]], [["User:: Hey, I'm considering launching a currency on Verus, but I'm not sure about the costs involved. Can you tell me, what is the cost to launch a currency on Verus if I don't have a referral?", "AI Assistant:: The cost to launch a currency is 200 VRSC, regardless of whether you have a referral or not. The referral only affects the cost of a VerusID, which is 100 VRSC normally, but 80 VRSC when using a referral. So, in your case, without a referral, it'll be 200 VRSC to launch your currency.", "User:: That's helpful to know, thanks! I also had another question. Can anyone create a currency with a specific name on Verus?", "AI Assistant:: No, only the controller of a VerusID with the same name as the currency can create a currency with that name. So, if you want to create a currency with a specific name, you'll need to have a VerusID with that name first. This helps prevent naming conflicts and ensures that the creator of a currency has control over its naming."], "AI Assistant", "", "N/A", [["What is the cost to launch a currency on Verus if I don't have a referral?", "The cost to launch a currency is 200 VRSC, regardless of whether you have a referral or not. The referral only affects the cost of a VerusID, which is 100 VRSC normally, but 80 VRSC when using a referral.", "# Launch currency with 1:1 mapping of ERC-20When defining a currency it can be mapped to an ERC-20 1:1. The currency on Verus and the ERC-20 on Ethereum are then always interchangeable 1 to 1. [More on the Verus-Ethereum Bridge.](/eth-bridge/)::: tip \u2194\ufe0f Verus-Ethereum Bridge \ud83d\udc68\u200d\ud83d\udd27 For Testnet!\n[\ud83d\udc49 Access the Verus-Ethereum Testnet Bridge](https://ethbridge.verustest.net/) (\u26a0\ufe0f Goerli testnet)\n:::::: tip \u2194\ufe0f Verus-Ethereum Bridge \u2705 For Mainnet!\n[\ud83d\udc49 Access the Verus-Ethereum Mainnet Bridge](https://eth.verusbridge.io)\n:::::: warning Need help setting up a currency launch? \ud83e\udd14\n[\ud83d\udc49 Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::### Defining the currency\nTo create a currency of a specific name, we need a VerusID of the same name. The controller of this VerusID is the only one who can create a currency of that name, and we can only do so once.The cost for a VerusID on the Verus is ``100 VRSC`` (or 80 when using a referral). The cost to launch a currency is ``200 VRSC``. Before launching we need to have enough VRSC in the namespace VerusID.You can also use a .vETH subID. The cost to register a .vETH subID is an amount of Bridge.vETH (0.01 vETH worth).In our example we have a namespace ``MyUSDC`` with which we want to launch a currency that is mapped to the Ethereum ``USDC`` ERC-20 (on Goerli testnet, [see contract address](https://goerli.etherscan.io/address/0x98339D8C260052B7ad81c28c16C0b98420f2B46a)).Below is the command to map a currency 1:1 to an ERC-20 on Ethereum. The ``address`` field is the Ethereum smart contract address of the ERC-20 we want to map to.", "./raw_text_input_docs/mapping-1:1-eth.md"], ["Can anyone create a currency with a specific name on Verus?", "No, only the controller of a VerusID with the same name as the currency can create a currency with that name.", "# Launch currency with 1:1 mapping of ERC-20When defining a currency it can be mapped to an ERC-20 1:1. The currency on Verus and the ERC-20 on Ethereum are then always interchangeable 1 to 1. [More on the Verus-Ethereum Bridge.](/eth-bridge/)::: tip \u2194\ufe0f Verus-Ethereum Bridge \ud83d\udc68\u200d\ud83d\udd27 For Testnet!\n[\ud83d\udc49 Access the Verus-Ethereum Testnet Bridge](https://ethbridge.verustest.net/) (\u26a0\ufe0f Goerli testnet)\n:::::: tip \u2194\ufe0f Verus-Ethereum Bridge \u2705 For Mainnet!\n[\ud83d\udc49 Access the Verus-Ethereum Mainnet Bridge](https://eth.verusbridge.io)\n:::::: warning Need help setting up a currency launch? \ud83e\udd14\n[\ud83d\udc49 Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord)\n:::### Defining the currency\nTo create a currency of a specific name, we need a VerusID of the same name. The controller of this VerusID is the only one who can create a currency of that name, and we can only do so once.The cost for a VerusID on the Verus is ``100 VRSC`` (or 80 when using a referral). The cost to launch a currency is ``200 VRSC``. Before launching we need to have enough VRSC in the namespace VerusID.You can also use a .vETH subID. The cost to register a .vETH subID is an amount of Bridge.vETH (0.01 vETH worth).In our example we have a namespace ``MyUSDC`` with which we want to launch a currency that is mapped to the Ethereum ``USDC`` ERC-20 (on Goerli testnet, [see contract address](https://goerli.etherscan.io/address/0x98339D8C260052B7ad81c28c16C0b98420f2B46a)).Below is the command to map a currency 1:1 to an ERC-20 on Ethereum. The ``address`` field is the Ethereum smart contract address of the ERC-20 we want to map to.", "./raw_text_input_docs/mapping-1:1-eth.md"]]], [["User:: Hey, I have a question about the Verus-Ethereum Bridge. Is it possible to claim refunds on the bridge without paying any gas fees?", "AI Assistant:: Unfortunately, it's not possible to claim refunds on the Verus-Ethereum Bridge without paying gas fees. The Bridge website charges Ethereum gas fees for crossings, and these fees can fluctuate in price.\n\nHowever, if the gas fees increase after you've paid for a crossing, you may be eligible for a refund. To claim this refund, you'll need to follow the steps outlined for your specific transaction type (Ethereum to Ethereum or Verus to Ethereum).\n\nWould you like me to walk you through the steps for claiming a refund, or is there anything else I can help you with?"], "AI Assistant", "", "N/A", [["How do I claim refunds on the Verus-Ethereum Bridge without paying any gas fees?", "Unfortunately, it's not possible to claim refunds on the Verus-Ethereum Bridge without paying gas fees. The Bridge website charges Ethereum gas fees for crossings, and these fees can fluctuate in price. If the gas fees increase after you've paid for a crossing, you may be eligible for a refund. To claim this refund, you'll need to follow the steps outlined for your specific transaction type (Ethereum to Ethereum or Verus to Ethereum).", "# Claim refunds on the Verus-Ethereum Bridge\nCrossing the bridge costs Ethereum gas fees. Gas fees can swing in price quite dramatically in a short period of time. It can happen that when you pay for a bridge crossing the gas fees jumped up higher than what you paid for the crossing, resulting in a refund. Learn here how you can claim your refunds back.\n\n## Ethereum to Ethereum\nWhen using the Bridge website and making a conversion that goes from Ethereum to Verus and back to Ethereum, you have signed a message that created a refund address based on your Ethereum wallet's private key.\n\nThese are the steps to claim refunds when you did an Ethereum to Ethereum transaction:\n\n### Verus Mobile\n1. Export your Ethereum private key from the wallet you did the conversion with (probably MetaMask)\n2. Import that private key into a Verus wallet. The easiest way to do that is with Verus Mobile. \n- Download Verus Mobile on the Play Store or App Store\n- Add a new profile (choose username and password)\n- Choose \"import wallet\"\n- Choose \"Enter key/seed\"\n- Enter the Ethereum private key here\n- Add the currency you want to get back (click the plus-button corner-right, \"Add PBaaS currency\" and choose the one for you)\n\n### Verus Desktop\nIf you are running native mode (full node) Verus Desktop then you can import the Ethereum's private key in this way:\n\nGo to ``Settings (gear-icon top right)``, then ``Coin Settings``, then select the Verus blockchain and type the following:\n\n```json\nrun importprivkey \"ETH_PRIVATE_KEY\" \"\" true\n```\n\n::: warning Important!\nVerus Desktop will not show any progress on the import. It will take some time for the process to finish in the background.\n:::\n\n## Verus to Ethereum\nWhen bridging with Verus Desktop from the Verus blockchain to the Ethereum blockchain you had to fill in a refund address.\n\nOn the Bridge website you can use that refund address to claim the funds back.", "./raw_text_input_docs/refunds.md"]]], [["User:: I'm really interested in creating my own blockchain on Verus. How do I program my own blockchain on Verus?", "AI Assistant:: You'll be happy to know that you don't need to program your own blockchain on Verus. Verus allows you to create a blockchain without needing to write any code. This is one of the benefits of using Verus, as it provides a low-barrier-to-entry solution for creating blockchains and launching tokens and currencies. You can focus on designing your blockchain and its features without worrying about the underlying code.", "User:: That's great to know! I was worried I'd need to be a skilled programmer to create a blockchain on Verus. Now, I have another question. What is the maximum TPS (transactions-per-second) that Verus can achieve?", "AI Assistant:: Verus doesn't have a maximum TPS metric. Because Verus is an open fractal network, its scalability is practically unlimited, and its TPS can grow indefinitely as more chains are added to the network. A single PBaaS chain can reach between 75 and 800 TPS, and a network of several thousand chains would have a total bandwidth of 1 million+ TPS. So, you can be sure that your blockchain on Verus will be able to handle a high volume of transactions.", "User:: That sounds impressive! I've heard of some concerns about blockchain security, particularly 51% hash attacks. Are Verus and its PBaaS-blockchains vulnerable to 51% hash attacks?", "AI Assistant:: No, Verus and its PBaaS-blockchains are 51% hash attack resistant. This is due to Verus Proof of Power, which provides a secure consensus layer (L1) that prevents such attacks. You can rest assured that your blockchain on Verus will be secure and protected from these types of attacks."], "AI Assistant", "", "N/A", [["How do I program my own blockchain on Verus?", "You don't need to program your own blockchain on Verus. Verus allows you to create a blockchain without needing to write any code. This is one of the benefits of using Verus, as it provides a low-barrier-to-entry solution for creating blockchains and launching tokens and currencies.", "* **No programming needed for [blockchain](/blockchains/), [token and currency launches](/currencies/)**\n* **Low protocol fees**## Scalability\nVerus achieves practically unlimited scalability through its [Public Blockchains as a Service](/blockchains/). Verus PBaaS enables the provisioning of an unlimited number of independent, interoperable and interconnected L1 blockchains, which inherit all Verus L1 features.Verus' scale out TPS (transactions-per-second) is better than what other blockchains have today. A single PBaaS chain can reach between 75 and 800 TPS depending on blocktime; a network of several thousand chains would have a total bandwidth of 1 million+ TPS. But there is no maximum TPS metric because such a thing does not exist on an open fractal network like Verus.* **Create use case specific blockchains and currencies** \n* **Move activity between chains to avoid congestion**## Security\nVerus and its PBaaS-blockchains are 51% hash attack resistant. All functionality can be found in the consensus layer (L1), making the protocol secure for developers and users. No smart contract risks \u2014 Verus uses smart transactions, not smart contracts.* **51% hash attack resistant through [Verus Proof of Power](/overview/verus-proof-of-power/)**\n* Read: [Verus Smart Transactions vs. Smart Contracts](https://medium.com/veruscoin/verus-smart-transactions-vs-smart-contracts-f98079c00ed0)## Interoperability\nVerus enables a world where all blockchains communicate with each other. All PBaaS-chains are interoperable and interconnected. Verus and all PBaaS-chains are now also connected to Ethereum, in a trustless and non-custodial way.* Read: [Verus Internet Protocol (VIP) \u2014 Provable, Decentralized Cross-chain Communication](https://medium.com/veruscoin/verus-internet-protocol-vip-provable-decentralized-cross-chain-communication-8d9414a429c5)\n* [Verus-Ethereum Bridge](/eth-bridge/)", "./raw_text_input_docs/README_overview.md"], ["What is the maximum TPS (transactions-per-second) that Verus can achieve?", "Verus doesn't have a maximum TPS metric. Because Verus is an open fractal network, its scalability is practically unlimited, and its TPS can grow indefinitely as more chains are added to the network. A single PBaaS chain can reach between 75 and 800 TPS, and a network of several thousand chains would have a total bandwidth of 1 million+ TPS.", "* **No programming needed for [blockchain](/blockchains/), [token and currency launches](/currencies/)**\n* **Low protocol fees**## Scalability\nVerus achieves practically unlimited scalability through its [Public Blockchains as a Service](/blockchains/). Verus PBaaS enables the provisioning of an unlimited number of independent, interoperable and interconnected L1 blockchains, which inherit all Verus L1 features.Verus' scale out TPS (transactions-per-second) is better than what other blockchains have today. A single PBaaS chain can reach between 75 and 800 TPS depending on blocktime; a network of several thousand chains would have a total bandwidth of 1 million+ TPS. But there is no maximum TPS metric because such a thing does not exist on an open fractal network like Verus.* **Create use case specific blockchains and currencies** \n* **Move activity between chains to avoid congestion**## Security\nVerus and its PBaaS-blockchains are 51% hash attack resistant. All functionality can be found in the consensus layer (L1), making the protocol secure for developers and users. No smart contract risks \u2014 Verus uses smart transactions, not smart contracts.* **51% hash attack resistant through [Verus Proof of Power](/overview/verus-proof-of-power/)**\n* Read: [Verus Smart Transactions vs. Smart Contracts](https://medium.com/veruscoin/verus-smart-transactions-vs-smart-contracts-f98079c00ed0)## Interoperability\nVerus enables a world where all blockchains communicate with each other. All PBaaS-chains are interoperable and interconnected. Verus and all PBaaS-chains are now also connected to Ethereum, in a trustless and non-custodial way.* Read: [Verus Internet Protocol (VIP) \u2014 Provable, Decentralized Cross-chain Communication](https://medium.com/veruscoin/verus-internet-protocol-vip-provable-decentralized-cross-chain-communication-8d9414a429c5)\n* [Verus-Ethereum Bridge](/eth-bridge/)", "./raw_text_input_docs/README_overview.md"], ["Are Verus and its PBaaS-blockchains vulnerable to 51% hash attacks?", "No, Verus and its PBaaS-blockchains are 51% hash attack resistant. This is due to Verus Proof of Power, which provides a secure consensus layer (L1) that prevents such attacks.", "* **No programming needed for [blockchain](/blockchains/), [token and currency launches](/currencies/)**\n* **Low protocol fees**## Scalability\nVerus achieves practically unlimited scalability through its [Public Blockchains as a Service](/blockchains/). Verus PBaaS enables the provisioning of an unlimited number of independent, interoperable and interconnected L1 blockchains, which inherit all Verus L1 features.Verus' scale out TPS (transactions-per-second) is better than what other blockchains have today. A single PBaaS chain can reach between 75 and 800 TPS depending on blocktime; a network of several thousand chains would have a total bandwidth of 1 million+ TPS. But there is no maximum TPS metric because such a thing does not exist on an open fractal network like Verus.* **Create use case specific blockchains and currencies** \n* **Move activity between chains to avoid congestion**## Security\nVerus and its PBaaS-blockchains are 51% hash attack resistant. All functionality can be found in the consensus layer (L1), making the protocol secure for developers and users. No smart contract risks \u2014 Verus uses smart transactions, not smart contracts.* **51% hash attack resistant through [Verus Proof of Power](/overview/verus-proof-of-power/)**\n* Read: [Verus Smart Transactions vs. Smart Contracts](https://medium.com/veruscoin/verus-smart-transactions-vs-smart-contracts-f98079c00ed0)## Interoperability\nVerus enables a world where all blockchains communicate with each other. All PBaaS-chains are interoperable and interconnected. Verus and all PBaaS-chains are now also connected to Ethereum, in a trustless and non-custodial way.* Read: [Verus Internet Protocol (VIP) \u2014 Provable, Decentralized Cross-chain Communication](https://medium.com/veruscoin/verus-internet-protocol-vip-provable-decentralized-cross-chain-communication-8d9414a429c5)\n* [Verus-Ethereum Bridge](/eth-bridge/)", "./raw_text_input_docs/README_overview.md"]]], [["User:: I have some questions about Bridge.vETH and its supply. What happens to the Bridge.vETH supply when someone registers a .vETH subID?", "AI Assistant:: The Bridge.vETH supply actually decreases when someone registers a .vETH subID. This is because the Bridge.vETH used to register the subID is burned.", "User:: That makes sense. I also had a question about conversion fees. Do conversion fees go entirely to the reserves of Bridge.vETH?", "AI Assistant:: No, conversion fees do not go entirely to the reserves of Bridge.vETH. Only 50% of the conversion fees go into the reserves of Bridge.vETH. The rates are 0.025% for reserve to reserve conversions and 0.0125% for reserve to Bridge.vETH conversions (or vice versa).", "User:: Okay, that's helpful to know. I also had a question about the supply of Bridge.vETH. Is the supply of Bridge.vETH fixed at 100,000?", "AI Assistant:: No, the supply of Bridge.vETH is not fixed at 100,000. It is dynamic and can change over time. Bridge.vETH gets minted when people convert VRSC, ETH, DAI, or MKR to Bridge.vETH, and it gets burned when they convert from Bridge.vETH back to VRSC, ETH, DAI, or MKR.", "User:: Got it. Finally, I had a question about the Dai Savings Rate (DSR). Does the DSR apply to Dai held in the Verus ecosystem, but not in Bridge.vETH?", "AI Assistant:: No, the Dai Savings Rate (DSR) actually applies to Dai held in both the Verus ecosystem and Bridge.vETH. The DSR is passed through 100% to the DAI reserves of Bridge.vETH."], "AI Assistant", "", "N/A", [["What happens to the Bridge.vETH supply when someone registers a .vETH subID?", "The Bridge.vETH supply actually decreases when someone registers a .vETH subID. This is because the Bridge.vETH used to register the subID is burned.", "| \ud83d\udcc8 Accrued fees       |     Details      |\n| :------------------ | :----------------------------------------- |\n| [**Dai Savings Rate**](https://blog.makerdao.com/an-update-on-the-dai-savings-rate-in-multi-collateral-dai/)| 5% interest (at the time of writing, the rate is subject to change by MakerDAO) is earned automatically when holding Dai in the DSR (Dai Savings Rate) contract. Dai in Bridge.vETH and in the complete Verus ecosystem get this savings rate. The DSR is being passed through 100% to the DAI reserves of Bridge.vETH.|\n| **.vETH subID registrations**| A .vETH subID costs 0.01 vETH worth of Bridge.vETH. When registering the subID the Bridge.vETH is burned, meaning the Bridge.vETH supply decreases. |\n| **Conversion fees**| 50% of the conversion fees go into the reserves of Bridge.vETH: 0.025% when it's a reserve to reserve conversion, 0.0125% when it's a reserve to Bridge.vETH conversion (or vice versa). |\n| **Cross-chain send fees**| A share of the cross-chain send fees go into the reserves of Bridge.vETH. |Bridge.vETH had an initial supply of 100,000. During the preconversion timeframe which lasted 10 days, anyone could add VRSC, ETH, DAI and MKR into its reserves. When the preconversion period ended everyone got their share of the 100,000 Bridge.vETH, distributed by the protocol.The supply of Bridge.vETH is dynamic. The currency gets minted when people convert VRSC, ETH, DAI or MKR to Bridge.vETH, and the currency gets burned when they convert from Bridge.vETH back to VRSC, ETH, DAI or MKR.Converting currencies using Bridge.vETH (or other basket currencies) has many advantages. It is MEV-resistant, has no smart contract risks due to protocol level security and has low fees (max. 0.05%). [More on Verus DeFi here.](/sendcurrency/)See statistics for Bridge.vETH here: [verus.io/eth-bridge](https://verus.io/eth-bridge)", "./raw_text_input_docs/README_eth-bridge.md"], ["Do conversion fees go entirely to the reserves of Bridge.vETH?", "No, conversion fees do not go entirely to the reserves of Bridge.vETH. Only 50% of the conversion fees go into the reserves of Bridge.vETH. The rates are 0.025% for reserve to reserve conversions and 0.0125% for reserve to Bridge.vETH conversions (or vice versa).", "| \ud83d\udcc8 Accrued fees       |     Details      |\n| :------------------ | :----------------------------------------- |\n| [**Dai Savings Rate**](https://blog.makerdao.com/an-update-on-the-dai-savings-rate-in-multi-collateral-dai/)| 5% interest (at the time of writing, the rate is subject to change by MakerDAO) is earned automatically when holding Dai in the DSR (Dai Savings Rate) contract. Dai in Bridge.vETH and in the complete Verus ecosystem get this savings rate. The DSR is being passed through 100% to the DAI reserves of Bridge.vETH.|\n| **.vETH subID registrations**| A .vETH subID costs 0.01 vETH worth of Bridge.vETH. When registering the subID the Bridge.vETH is burned, meaning the Bridge.vETH supply decreases. |\n| **Conversion fees**| 50% of the conversion fees go into the reserves of Bridge.vETH: 0.025% when it's a reserve to reserve conversion, 0.0125% when it's a reserve to Bridge.vETH conversion (or vice versa). |\n| **Cross-chain send fees**| A share of the cross-chain send fees go into the reserves of Bridge.vETH. |Bridge.vETH had an initial supply of 100,000. During the preconversion timeframe which lasted 10 days, anyone could add VRSC, ETH, DAI and MKR into its reserves. When the preconversion period ended everyone got their share of the 100,000 Bridge.vETH, distributed by the protocol.The supply of Bridge.vETH is dynamic. The currency gets minted when people convert VRSC, ETH, DAI or MKR to Bridge.vETH, and the currency gets burned when they convert from Bridge.vETH back to VRSC, ETH, DAI or MKR.Converting currencies using Bridge.vETH (or other basket currencies) has many advantages. It is MEV-resistant, has no smart contract risks due to protocol level security and has low fees (max. 0.05%). [More on Verus DeFi here.](/sendcurrency/)See statistics for Bridge.vETH here: [verus.io/eth-bridge](https://verus.io/eth-bridge)", "./raw_text_input_docs/README_eth-bridge.md"], ["Is the supply of Bridge.vETH fixed at 100,000?", "No, the supply of Bridge.vETH is not fixed at 100,000. It is dynamic and can change over time. Bridge.vETH gets minted when people convert VRSC, ETH, DAI, or MKR to Bridge.vETH, and it gets burned when they convert from Bridge.vETH back to VRSC, ETH, DAI, or MKR.", "| \ud83d\udcc8 Accrued fees       |     Details      |\n| :------------------ | :----------------------------------------- |\n| [**Dai Savings Rate**](https://blog.makerdao.com/an-update-on-the-dai-savings-rate-in-multi-collateral-dai/)| 5% interest (at the time of writing, the rate is subject to change by MakerDAO) is earned automatically when holding Dai in the DSR (Dai Savings Rate) contract. Dai in Bridge.vETH and in the complete Verus ecosystem get this savings rate. The DSR is being passed through 100% to the DAI reserves of Bridge.vETH.|\n| **.vETH subID registrations**| A .vETH subID costs 0.01 vETH worth of Bridge.vETH. When registering the subID the Bridge.vETH is burned, meaning the Bridge.vETH supply decreases. |\n| **Conversion fees**| 50% of the conversion fees go into the reserves of Bridge.vETH: 0.025% when it's a reserve to reserve conversion, 0.0125% when it's a reserve to Bridge.vETH conversion (or vice versa). |\n| **Cross-chain send fees**| A share of the cross-chain send fees go into the reserves of Bridge.vETH. |Bridge.vETH had an initial supply of 100,000. During the preconversion timeframe which lasted 10 days, anyone could add VRSC, ETH, DAI and MKR into its reserves. When the preconversion period ended everyone got their share of the 100,000 Bridge.vETH, distributed by the protocol.The supply of Bridge.vETH is dynamic. The currency gets minted when people convert VRSC, ETH, DAI or MKR to Bridge.vETH, and the currency gets burned when they convert from Bridge.vETH back to VRSC, ETH, DAI or MKR.Converting currencies using Bridge.vETH (or other basket currencies) has many advantages. It is MEV-resistant, has no smart contract risks due to protocol level security and has low fees (max. 0.05%). [More on Verus DeFi here.](/sendcurrency/)See statistics for Bridge.vETH here: [verus.io/eth-bridge](https://verus.io/eth-bridge)", "./raw_text_input_docs/README_eth-bridge.md"], ["Does the Dai Savings Rate (DSR) apply to Dai held in the Verus ecosystem, but not in Bridge.vETH?", "No, the Dai Savings Rate (DSR) actually applies to Dai held in both the Verus ecosystem and Bridge.vETH. The DSR is passed through 100% to the DAI reserves of Bridge.vETH.", "| \ud83d\udcc8 Accrued fees       |     Details      |\n| :------------------ | :----------------------------------------- |\n| [**Dai Savings Rate**](https://blog.makerdao.com/an-update-on-the-dai-savings-rate-in-multi-collateral-dai/)| 5% interest (at the time of writing, the rate is subject to change by MakerDAO) is earned automatically when holding Dai in the DSR (Dai Savings Rate) contract. Dai in Bridge.vETH and in the complete Verus ecosystem get this savings rate. The DSR is being passed through 100% to the DAI reserves of Bridge.vETH.|\n| **.vETH subID registrations**| A .vETH subID costs 0.01 vETH worth of Bridge.vETH. When registering the subID the Bridge.vETH is burned, meaning the Bridge.vETH supply decreases. |\n| **Conversion fees**| 50% of the conversion fees go into the reserves of Bridge.vETH: 0.025% when it's a reserve to reserve conversion, 0.0125% when it's a reserve to Bridge.vETH conversion (or vice versa). |\n| **Cross-chain send fees**| A share of the cross-chain send fees go into the reserves of Bridge.vETH. |Bridge.vETH had an initial supply of 100,000. During the preconversion timeframe which lasted 10 days, anyone could add VRSC, ETH, DAI and MKR into its reserves. When the preconversion period ended everyone got their share of the 100,000 Bridge.vETH, distributed by the protocol.The supply of Bridge.vETH is dynamic. The currency gets minted when people convert VRSC, ETH, DAI or MKR to Bridge.vETH, and the currency gets burned when they convert from Bridge.vETH back to VRSC, ETH, DAI or MKR.Converting currencies using Bridge.vETH (or other basket currencies) has many advantages. It is MEV-resistant, has no smart contract risks due to protocol level security and has low fees (max. 0.05%). [More on Verus DeFi here.](/sendcurrency/)See statistics for Bridge.vETH here: [verus.io/eth-bridge](https://verus.io/eth-bridge)", "./raw_text_input_docs/README_eth-bridge.md"]]], [["User:: I've been looking into VerusID, and I'm wondering, why do you need to be a developer to launch a blockchain or currency with VerusID? Is it really necessary to have coding skills?", "AI Assistant:: Actually, you don't need to be a developer to launch a blockchain or currency with VerusID. With the VerusID namespace, anyone can launch fully interconnected, customizable, independent, and secure blockchains, as well as powerful currencies and tokens, without needing to write any code - just simple commands are required. The process is designed to be accessible to everyone, regardless of their technical background.", "User:: That's great to know! But I have another question. How do I create a VerusID if I don't have complete control over my identity? I'm not sure I understand how it works.", "AI Assistant:: I think there might be some misunderstanding here. With VerusID, you can function as a self-sovereign identity, which means you have complete autonomy and control over your identity, both online and offline. You can register a VerusID namespace and use it as a friendly name address to send, receive, and hold assets, among other features. You're in charge of your own identity, and VerusID provides the tools to manage it securely and privately. Does that clarify things?"], "AI Assistant", "", "N/A", [["Why do you need to be a developer to launch a blockchain or currency with VerusID?", "You don't need to be a developer to launch a blockchain or currency with VerusID. With the VerusID namespace, anyone can launch fully interconnected, customizable, independent, and secure blockchains, as well as powerful currencies and tokens, without needing to write any code - just simple commands are required.", "# IntroductionVerusID is the first decentralized and self-sovereign identity of its kind, the permanent namespace for the Verus Protocol, and the building block to create Web3 Dapps.## Feature List| Feature | Details | \n| :-----| :------ | \n| **Namespace** | VerusID is the permanent namespace for the Verus Protocol and can be registered by anyone. | \n| **Self-sovereign identity** | VerusID can function as a self-sovereign identity for anyone in the world, empowering individuals with complete autonomy both online and offline. |\n| [**Blockchain launches**](/blockchains/) | With the VerusID namespace anyone can launch fully interconnected, customizable, independent and secure blockchains, without any coding needed (just simple commands). | \n| [**Currency & token launches**](/currencies/) | With the VerusID namespace anyone can launch powerful currencies and tokens, including basket currencies (DeFi AMMs). |\n| [**Publish & store data**](/vdxf/README) | Use VerusID and VDXF as a controlled public storage system. Publish and store data with multiple levels of nesting. | \n| [**Revoking & recovering**](/verusid/#revoke-recover) | Each VerusID has revocation and recovery authorities (which are also VerusIDs). Autonomously revoke access to a VerusID, and recover all assets and data on a VerusID. | \n| [**Friendly name address**](/verusid/#friendly-name) | A VerusID is a friendly name address that can send, receive and hold assets. | \n| [**Verus Vault**](/verusid/#verus-vault) | Enable theft-proof Verus Vault. Set locks or timelocks to secure assets on a VerusID. | \n| [**Marketplace**](/verusid/#marketplace) | Peer-to-peer decentralized marketplace for VerusIDs and currencies and tokens. | \n| **Privacy** | Point a private address to a VerusID. Send and receive native assets with full anonimity. | \n| **Signatures** | Create unforgable, verifiable signatures with VerusID. Sign fi", "./raw_text_input_docs/README_addresses.md"], ["How do I create a VerusID if I don't have complete control over my identity?", "This question is based on a flawed premise. With VerusID, you can function as a self-sovereign identity, which means you have complete autonomy and control over your identity, both online and offline. You can register a VerusID namespace and use it as a friendly name address to send, receive, and hold assets, among other features.", "# IntroductionVerusID is the first decentralized and self-sovereign identity of its kind, the permanent namespace for the Verus Protocol, and the building block to create Web3 Dapps.## Feature List| Feature | Details | \n| :-----| :------ | \n| **Namespace** | VerusID is the permanent namespace for the Verus Protocol and can be registered by anyone. | \n| **Self-sovereign identity** | VerusID can function as a self-sovereign identity for anyone in the world, empowering individuals with complete autonomy both online and offline. |\n| [**Blockchain launches**](/blockchains/) | With the VerusID namespace anyone can launch fully interconnected, customizable, independent and secure blockchains, without any coding needed (just simple commands). | \n| [**Currency & token launches**](/currencies/) | With the VerusID namespace anyone can launch powerful currencies and tokens, including basket currencies (DeFi AMMs). |\n| [**Publish & store data**](/vdxf/README) | Use VerusID and VDXF as a controlled public storage system. Publish and store data with multiple levels of nesting. | \n| [**Revoking & recovering**](/verusid/#revoke-recover) | Each VerusID has revocation and recovery authorities (which are also VerusIDs). Autonomously revoke access to a VerusID, and recover all assets and data on a VerusID. | \n| [**Friendly name address**](/verusid/#friendly-name) | A VerusID is a friendly name address that can send, receive and hold assets. | \n| [**Verus Vault**](/verusid/#verus-vault) | Enable theft-proof Verus Vault. Set locks or timelocks to secure assets on a VerusID. | \n| [**Marketplace**](/verusid/#marketplace) | Peer-to-peer decentralized marketplace for VerusIDs and currencies and tokens. | \n| **Privacy** | Point a private address to a VerusID. Send and receive native assets with full anonimity. | \n| **Signatures** | Create unforgable, verifiable signatures with VerusID. Sign fi", "./raw_text_input_docs/README_addresses.md"]]], [["User:: Hi, I was trying to use the \"prelaunchdiscount\" parameter with a currency, but it's not working. Can I use the \"prelaunchdiscount\" parameter with any type of currency?", "AI Assistant:: No, the \"prelaunchdiscount\" parameter only works with basket currencies, specifically those with \"options\" set to 33. It cannot be used with other types of currencies. So, if you're trying to use it with a different type of currency, that's likely why it's not working. Do you have any other questions about this or would you like more information on basket currencies?"], "AI Assistant", "", "N/A", [["Can I use the \"prelaunchdiscount\" parameter with any type of currency?", "No, the \"prelaunchdiscount\" parameter only works with basket currencies, specifically those with \"options\" set to 33. It cannot be used with other types of currencies.", "Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"BusinessBrand\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"initialsupply\":100, \n \"prelaunchcarveout\":0.1\n}'\n```\n\u261d\ufe0f This is a basket currency called BusinessBrand. People can preconvert VRSCTEST into its reserves in return for 100 BusinessBrand distributed among them. When the currency is launched, 10% VRSCTEST is taken out of the reserves, into the rootID. This lowers the reserve ratio by 10%.### **\"prelaunchdiscount\"**\nOnly works with basket currencies (`options:33`). Use this to give people a discount during the preconversion time frame. After the preconversion time frame and the currency is launched, the conversion price will be higher, depending on what percentage the discount was.When using this parameter, after the currency is launched, the reserve ratio will be lowered by the discounted percentage.Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"DiscountBrand\", \n \"options\":33, \n \"currencies\":[\"vrsctest\"], \n \"initialsupply\":100, \n \"prelaunchdiscount\":0.5\n}'\n```\n\u261d\ufe0f This is a basket currency called DiscountBrand. People can preconvert VRSCTEST into its reserves in return for 100 DiscountBrand distributed among them. Immediately after the launch of the currency, when people want to convert, the price is 50% higher. Also, the reserve ratio is 50% lower because of the prelaunchdiscount.### **\"weights\"**\nOnly works with basket currencies (`options:33`). Use this to change the respective weights of the reserves in a basket currency. The total of all weights must equal 1. With a minimum of 0.1, since there can\u2019t be more than 10 reserve currencies in a basket currency.", "./raw_text_input_docs/launch-currency.md"]]], [["User:: I'm curious about some of the technical details of Verus. Can you tell me about the maximum supply of Verus coins and how long it takes to mine a block on average?", "AI Assistant:: The maximum supply of Verus (VRSC) coins is 83,540,184 VRSC, and it takes approximately 1 minute to mine a block on average. Do you have any other questions about Verus's technical aspects?", "User:: That's helpful to know. Is Verus a private coin, and what's its hash algorithm?", "AI Assistant:: Yes, Verus (VRSC) has privacy features, specifically using Zcash Sapling for privacy. Its hash algorithm is VerusHash 2.2. Verus is designed to provide users with a high level of privacy and security. Does that answer your question?", "User:: I'm also curious about the consensus algorithm used by Verus. Does it use the same one as Bitcoin, and what's its ticker symbol?", "AI Assistant:: No, Verus (VRSC) does not use the Bitcoin consensus algorithm. It uses Verus Proof of Power. Its ticker symbol is VRSC. Verus's consensus algorithm is designed to be efficient and secure, allowing for fast and reliable transactions. Do you have any more questions about Verus?"], "AI Assistant", "", "N/A", [["What is the maximum supply of Verus (VRSC) coins, and how long does it take to mine a block on average?", "The maximum supply of Verus (VRSC) coins is 83,540,184 VRSC, and it takes approximately 1 minute to mine a block on average.", "# Coin Overview\n\n| | |\n| -----------------------: | :-- | \n| **Launch Date** | 21 May 2018 | \n| **Coin Ticker** | VRSC | \n| **Average Block Time** | 1 minute | \n| **Transaction Fee** | 0.0001 VRSC | \n| **Max Supply** | 83,540,184 VRSC | \n| **Consensus Algorithm** | [Verus Proof of Power](/overview/verus-proof-of-power/) | \n| **Hash Algorithm** | [VerusHash 2.2](/overview/verus-proof-of-power.md#verushash-2-2) | \n| **Privacy** | Zcash Sapling |", "./raw_text_input_docs/coin.md"], ["Is Verus (VRSC) a private coin, and what is its hash algorithm?", "Yes, Verus (VRSC) has privacy features, specifically using Zcash Sapling for privacy. Its hash algorithm is VerusHash 2.2.", "# Coin Overview\n\n| | |\n| -----------------------: | :-- | \n| **Launch Date** | 21 May 2018 | \n| **Coin Ticker** | VRSC | \n| **Average Block Time** | 1 minute | \n| **Transaction Fee** | 0.0001 VRSC | \n| **Max Supply** | 83,540,184 VRSC | \n| **Consensus Algorithm** | [Verus Proof of Power](/overview/verus-proof-of-power/) | \n| **Hash Algorithm** | [VerusHash 2.2](/overview/verus-proof-of-power.md#verushash-2-2) | \n| **Privacy** | Zcash Sapling |", "./raw_text_input_docs/coin.md"], ["Does Verus (VRSC) use the Bitcoin consensus algorithm, and what is its ticker symbol?", "No, Verus (VRSC) does not use the Bitcoin consensus algorithm. It uses Verus Proof of Power. Its ticker symbol is VRSC.", "# Coin Overview\n\n| | |\n| -----------------------: | :-- | \n| **Launch Date** | 21 May 2018 | \n| **Coin Ticker** | VRSC | \n| **Average Block Time** | 1 minute | \n| **Transaction Fee** | 0.0001 VRSC | \n| **Max Supply** | 83,540,184 VRSC | \n| **Consensus Algorithm** | [Verus Proof of Power](/overview/verus-proof-of-power/) | \n| **Hash Algorithm** | [VerusHash 2.2](/overview/verus-proof-of-power.md#verushash-2-2) | \n| **Privacy** | Zcash Sapling |", "./raw_text_input_docs/coin.md"]]], [["User:: I've been reading about VerusIDs and I'm interested in creating one, but I'm on a tight budget. Is there a way to create a VerusID without paying any costs on the Verus blockchain?", "AI Assistant:: I understand your concern! Unfortunately, that's not possible. On the Verus blockchain, creating a VerusID always incurs a cost, which is 100 VRSC by default. However, you can reduce this cost by using a referral, which would bring the cost down to 80 VRSC. All costs paid go to the miners and stakers of the ecosystem and to the referrals if used. So, while there is a cost involved, it's a necessary part of using the Verus blockchain.", "User:: That's good to know. I've also been looking into the referral system, and I was wondering, can I receive more than 60 VRSC as a referral reward for each VerusID creation?", "AI Assistant:: No, that's not possible. The referral system only goes three levels down, and the maximum referral reward you can receive is 60 VRSC per VerusID creation, if you have three identities stringed together through referrals. So, while the referral system can help offset the cost of creating a VerusID, there is a limit to how much you can earn through referrals."], "AI Assistant", "", "N/A", [["How do I create a VerusID without paying any costs on the Verus blockchain?", "Unfortunately, that's not possible. On the Verus blockchain, creating a VerusID always incurs a cost, which is 100 VRSC by default. However, you can reduce this cost by using a referral, which would bring the cost down to 80 VRSC. All costs paid go to the miners and stakers of the ecosystem and to the referrals if used.", "## Costs\n**On the Verus blockchain** a VerusID costs 100 VRSC. These costs can be discounted with referrals. All costs paid are going to the [miners and stakers of the ecosystem](/economy/) and to the referrals if used.| | VerusID Cost |\n| :----------------------- | --: | \n| **Base cost** | 100 VRSC | \n| **Cost with referral used** | 80 VRSC |### Referrals\nA referral system is implemented to reward users with identities. For each VerusID a user creates, the referral identity receives 20 VRSC. The referral system goes three levels down.If one owns three identities that are stringed together through its referrals, one can receive 60 VRSC with each VerusID creation. This way an identity only has to cost 20 VRSC.::: tip Support the Verus Vision\nUse ``Verus Coin Foundation@`` when creating a VerusID on the Verus blockchain. All proceeds will go to the further development of the Verus vision.\n:::## Structure\nAn example of a VerusID:\n| Structure | Information |\n| :----------------------- | :--------------------- | \n| **VerusID Name** | The name is a unique namespace and human readable cryptocurrency address. | \n| **Primary Address** | The primary address is the owner of the VerusID, as it contains the private key. It can contain more than one VerusID. | \n| **Identity Address** | The identity address is, next to the name, the identifier of the VerusID. | \n| **Private Address** | An optional attached private z-address | \n| **Revocation Authority** | The identity address that can revoke the VerusID | \n| **Recovery Authority** | The identity address that can recover the VerusID | \n| **Contentmap** | VDXF key/value data |", "./raw_text_input_docs/README_addresses.md"], ["Can I receive more than 60 VRSC as a referral reward for each VerusID creation?", "No, that's not possible. The referral system only goes three levels down, and the maximum referral reward you can receive is 60 VRSC per VerusID creation, if you have three identities stringed together through referrals.", "## Costs\n**On the Verus blockchain** a VerusID costs 100 VRSC. These costs can be discounted with referrals. All costs paid are going to the [miners and stakers of the ecosystem](/economy/) and to the referrals if used.| | VerusID Cost |\n| :----------------------- | --: | \n| **Base cost** | 100 VRSC | \n| **Cost with referral used** | 80 VRSC |### Referrals\nA referral system is implemented to reward users with identities. For each VerusID a user creates, the referral identity receives 20 VRSC. The referral system goes three levels down.If one owns three identities that are stringed together through its referrals, one can receive 60 VRSC with each VerusID creation. This way an identity only has to cost 20 VRSC.::: tip Support the Verus Vision\nUse ``Verus Coin Foundation@`` when creating a VerusID on the Verus blockchain. All proceeds will go to the further development of the Verus vision.\n:::## Structure\nAn example of a VerusID:\n| Structure | Information |\n| :----------------------- | :--------------------- | \n| **VerusID Name** | The name is a unique namespace and human readable cryptocurrency address. | \n| **Primary Address** | The primary address is the owner of the VerusID, as it contains the private key. It can contain more than one VerusID. | \n| **Identity Address** | The identity address is, next to the name, the identifier of the VerusID. | \n| **Private Address** | An optional attached private z-address | \n| **Revocation Authority** | The identity address that can revoke the VerusID | \n| **Recovery Authority** | The identity address that can recover the VerusID | \n| **Contentmap** | VDXF key/value data |", "./raw_text_input_docs/README_addresses.md"]]], [["User:: Hey, I've got some questions about the algorithms used in Verus. Specifically, I was wondering how the Haraka512 V2 algorithm produces a 512-bit hash result?", "AI Assistant:: Actually, that's a misconception. Haraka512 V2 is designed to produce a 256-bit hash result, not a 512-bit hash result. It takes a 512-bit input and produces a 256-bit output. So, it's a bit smaller than you might have thought.", "User:: Okay, that clears things up. I also had a question about VerusHash. Is it 512 bit secure against quantum computers for pre-image and second pre-image attacks?", "AI Assistant:: No, VerusHash is actually 128 bit secure against quantum computers for pre-image and second pre-image attacks, not 512 bit secure. It is 256 bit secure for classical computing attacks, though. So, it's still quite secure, just not as secure as you might have thought against quantum computers.", "User:: Alright, thanks for the correction. One more question: Does Verus' staking algorithm still have the \"Nothing at Stake\" and \"Weak Subjectivity\" problems that other PoS systems have?", "AI Assistant:: No, Verus' staking algorithm actually solves the \"Nothing at Stake\" and \"Weak Subjectivity\" problems that undermine other PoS systems. It leverages its smart transaction capabilities to remove any incentive to attempt cheating, making it a losing proposition. So, you don't have to worry about those issues with Verus."], "AI Assistant", "", "N/A", [["How does the Haraka512 V2 algorithm produce a 512-bit hash result?", "Haraka512 V2 is designed to produce a 256-bit hash result, not a 512-bit hash result. It takes a 512-bit input and produces a 256-bit output.", "Haraka512 V2 is designed as a short input hash to exclusively consume one chunk of 512 bits and produce 256 bits of a hash result. Utilizing Haraka512 V2 VerusHash takes any length of input and produces a 256 bit hash result, unique to VerusHash, that also provides the same security guarantees as Haraka512 V2. This makes VerusHash 256 bit secure for classical computing attacks and 128 bit secure against quantum computers for pre-image and second pre-image attacks.\n\nTo understand the VerusHash algorithm it helps to first separate the digest from the core. We then consider the Haraka512 V2 core as an abstract digest function that takes 512 bits (64 bytes) of input and produces 256 bits (32 bytes) of output. Given such a digest function, referred to as haraka512256, the most concise implementation of VerusHash, in any language to-date, is the following Python code for the VerusHash hash digest as follows:\"\n\n``` py\n# verus_hash\n    def verus_hash(msg):\n      buf = [0] * 64\n      length = len(msg)\n      for i in range(0, length, 32):\n        clen = min(32, length - i)\n        buf[32:64] = [b for b in msg[i:i + clen]] + [0] * (32 - clen)\n        buf[0:32] = haraka512256(buf)\n      return bytes(buf[0:32])\n```\n\n## PoS Problems Solved\nVerus\u2019 staking algorithm solves the two major theoretical issues undermining other PoS systems, ``Nothing at Stake`` and ``Weak Subjectivity`` by leveraging its smart transaction capabilities to remove any incentive to attempt cheating, making it a losing proposition. [Read: How Verus Solved Proof of Stake\u2019s Two Biggest Problems: Nothing at Stake and Weak Subjectivity](https://medium.com/veruscoin/how-verus-solved-nothing-at-stake-and-weak-subjectivity-proof-of-stake-problems-b4dd6a85086e)", "./raw_text_input_docs/verus-proof-of-power.md"], ["Is VerusHash 512 bit secure against quantum computers for pre-image and second pre-image attacks?", "No, VerusHash is 128 bit secure against quantum computers for pre-image and second pre-image attacks, not 512 bit secure. It is 256 bit secure for classical computing attacks.", "Haraka512 V2 is designed as a short input hash to exclusively consume one chunk of 512 bits and produce 256 bits of a hash result. Utilizing Haraka512 V2 VerusHash takes any length of input and produces a 256 bit hash result, unique to VerusHash, that also provides the same security guarantees as Haraka512 V2. This makes VerusHash 256 bit secure for classical computing attacks and 128 bit secure against quantum computers for pre-image and second pre-image attacks.\n\nTo understand the VerusHash algorithm it helps to first separate the digest from the core. We then consider the Haraka512 V2 core as an abstract digest function that takes 512 bits (64 bytes) of input and produces 256 bits (32 bytes) of output. Given such a digest function, referred to as haraka512256, the most concise implementation of VerusHash, in any language to-date, is the following Python code for the VerusHash hash digest as follows:\"\n\n``` py\n# verus_hash\n    def verus_hash(msg):\n      buf = [0] * 64\n      length = len(msg)\n      for i in range(0, length, 32):\n        clen = min(32, length - i)\n        buf[32:64] = [b for b in msg[i:i + clen]] + [0] * (32 - clen)\n        buf[0:32] = haraka512256(buf)\n      return bytes(buf[0:32])\n```\n\n## PoS Problems Solved\nVerus\u2019 staking algorithm solves the two major theoretical issues undermining other PoS systems, ``Nothing at Stake`` and ``Weak Subjectivity`` by leveraging its smart transaction capabilities to remove any incentive to attempt cheating, making it a losing proposition. [Read: How Verus Solved Proof of Stake\u2019s Two Biggest Problems: Nothing at Stake and Weak Subjectivity](https://medium.com/veruscoin/how-verus-solved-nothing-at-stake-and-weak-subjectivity-proof-of-stake-problems-b4dd6a85086e)", "./raw_text_input_docs/verus-proof-of-power.md"], ["Does Verus' staking algorithm still have the \"Nothing at Stake\" and \"Weak Subjectivity\" problems?", "No, Verus' staking algorithm solves the \"Nothing at Stake\" and \"Weak Subjectivity\" problems that undermine other PoS systems. It leverages its smart transaction capabilities to remove any incentive to attempt cheating, making it a losing proposition.", "Haraka512 V2 is designed as a short input hash to exclusively consume one chunk of 512 bits and produce 256 bits of a hash result. Utilizing Haraka512 V2 VerusHash takes any length of input and produces a 256 bit hash result, unique to VerusHash, that also provides the same security guarantees as Haraka512 V2. This makes VerusHash 256 bit secure for classical computing attacks and 128 bit secure against quantum computers for pre-image and second pre-image attacks.\n\nTo understand the VerusHash algorithm it helps to first separate the digest from the core. We then consider the Haraka512 V2 core as an abstract digest function that takes 512 bits (64 bytes) of input and produces 256 bits (32 bytes) of output. Given such a digest function, referred to as haraka512256, the most concise implementation of VerusHash, in any language to-date, is the following Python code for the VerusHash hash digest as follows:\"\n\n``` py\n# verus_hash\n    def verus_hash(msg):\n      buf = [0] * 64\n      length = len(msg)\n      for i in range(0, length, 32):\n        clen = min(32, length - i)\n        buf[32:64] = [b for b in msg[i:i + clen]] + [0] * (32 - clen)\n        buf[0:32] = haraka512256(buf)\n      return bytes(buf[0:32])\n```\n\n## PoS Problems Solved\nVerus\u2019 staking algorithm solves the two major theoretical issues undermining other PoS systems, ``Nothing at Stake`` and ``Weak Subjectivity`` by leveraging its smart transaction capabilities to remove any incentive to attempt cheating, making it a losing proposition. [Read: How Verus Solved Proof of Stake\u2019s Two Biggest Problems: Nothing at Stake and Weak Subjectivity](https://medium.com/veruscoin/how-verus-solved-nothing-at-stake-and-weak-subjectivity-proof-of-stake-problems-b4dd6a85086e)", "./raw_text_input_docs/verus-proof-of-power.md"]]], [["User:: I've been trying to understand Verus DeFi, but I'm having some trouble. Can you explain how its complex and high-cost system works?", "AI Assistant:: I think there might be some misconception. Verus DeFi is actually incredibly simple and low-cost. It doesn't have a complex system, and the fees for conversions are very low, ranging from 0.025% to 0.05%. Additionally, Verus DeFi is MEV-resistant, meaning there's no front or back running, and every participant gets the same fair conversion rate in one or more blocks. Would you like me to clarify anything else about Verus DeFi?", "User:: I've also heard that Verus DeFi uses smart contracts to implement DeFi operations. Is that true?", "AI Assistant:: No, that's not accurate. Verus DeFi does not use smart contracts to implement DeFi operations. Instead, all DeFi operations take place on the consensus layer of the protocol, and are verified by miners and stakers. This means there is no smart contract risk involved. It's a unique approach that sets Verus DeFi apart from other DeFi solutions.", "User:: I was warned that Verus DeFi is vulnerable to MEV attacks. Is that true?", "AI Assistant:: No, that's not true. Verus DeFi is not vulnerable to MEV attacks. In fact, it's MEV-resistant due to its protocol design, which ensures that every participant gets the same fair conversion rate in one or more blocks, eliminating the possibility of front or back running. You can rest assured that Verus DeFi is designed to be secure and fair for all participants. Do you have any other questions about Verus DeFi?"], "AI Assistant", "", "N/A", [["How does Verus DeFi's complex and high-cost system work?", "Verus DeFi is actually incredibly simple and low-cost. It doesn't have a complex system, and the fees for conversions are very low, ranging from 0.025% to 0.05%. Additionally, Verus DeFi is MEV-resistant, meaning there's no front or back running, and every participant gets the same fair conversion rate in one or more blocks.", "# Introduction\nVerus DeFi is incredibly simple, low-cost, MEV-resistant and without any middleman. You can convert into a currency that has reserves (you are now \"providing liquidity\"), and you can convert out of the currency again, back into its reserves. Furthermore you can convert from reserve to reserve. [Learn more about basket currencies (DeFi AMMs).](/currencies/#basket-currencies)| Verus DeFi | Details | \n| :-----| :------ | \n| \u2705 **MEV-resistant** | Because of protocol design there is no front/back running. Every participant gets the same, fair conversion rate in one or more blocks. | \n| \u2705 **Protocol level security** | All DeFi operations take place on the consensus layer of the protocol, and are verified by miners and stakers. There is no smart contract risk. | \n| \u2705 **Low fees** | Protocol conversion fees are as low as 0.025%, or as high as 0.05%. |Two conversion types:| Conversion type | Fee | Fee goes to |\n| :-----| :------ | :-------- |\n| Basket currency \u2194\ufe0f reserve | 0.025% | 0.0125% added to reserves of the basket currency, 0.0125% to the block reward for miners and stakers | \n| Reserve \u2194\ufe0f reserve | 0.05% | 0.025% added to reserves of the basket currency, 0.025% to the block reward for miners and stakers |## L1 DeFi\nVerus is a ``UTXO-based`` blockchain with ``smart transactions``. All smart capabilities are implemented on the protocol level. This has many advantages over blockchain projects that use layer two solutions. [Read \"Smart Transactions vs. Smart Contracts\"](https://medium.com/veruscoin/verus-smart-transactions-vs-smart-contracts-f98079c00ed0)Advantages of DeFi at the protocol level:* Increased security at the application level - Verus DeFi is not implemented by having many smart contract authors creating smart contracts on top of the protocol, so there can be no exploits by searching for unintended \"cracks\" in the seams between contracts.", "./raw_text_input_docs/README_sendcurrency.md"], ["Is it true that Verus DeFi uses smart contracts to implement DeFi operations?", "No, Verus DeFi does not use smart contracts to implement DeFi operations. Instead, all DeFi operations take place on the consensus layer of the protocol, and are verified by miners and stakers. This means there is no smart contract risk involved.", "# Introduction\nVerus DeFi is incredibly simple, low-cost, MEV-resistant and without any middleman. You can convert into a currency that has reserves (you are now \"providing liquidity\"), and you can convert out of the currency again, back into its reserves. Furthermore you can convert from reserve to reserve. [Learn more about basket currencies (DeFi AMMs).](/currencies/#basket-currencies)| Verus DeFi | Details | \n| :-----| :------ | \n| \u2705 **MEV-resistant** | Because of protocol design there is no front/back running. Every participant gets the same, fair conversion rate in one or more blocks. | \n| \u2705 **Protocol level security** | All DeFi operations take place on the consensus layer of the protocol, and are verified by miners and stakers. There is no smart contract risk. | \n| \u2705 **Low fees** | Protocol conversion fees are as low as 0.025%, or as high as 0.05%. |Two conversion types:| Conversion type | Fee | Fee goes to |\n| :-----| :------ | :-------- |\n| Basket currency \u2194\ufe0f reserve | 0.025% | 0.0125% added to reserves of the basket currency, 0.0125% to the block reward for miners and stakers | \n| Reserve \u2194\ufe0f reserve | 0.05% | 0.025% added to reserves of the basket currency, 0.025% to the block reward for miners and stakers |## L1 DeFi\nVerus is a ``UTXO-based`` blockchain with ``smart transactions``. All smart capabilities are implemented on the protocol level. This has many advantages over blockchain projects that use layer two solutions. [Read \"Smart Transactions vs. Smart Contracts\"](https://medium.com/veruscoin/verus-smart-transactions-vs-smart-contracts-f98079c00ed0)Advantages of DeFi at the protocol level:* Increased security at the application level - Verus DeFi is not implemented by having many smart contract authors creating smart contracts on top of the protocol, so there can be no exploits by searching for unintended \"cracks\" in the seams between contracts.", "./raw_text_input_docs/README_sendcurrency.md"], ["Can you explain why Verus DeFi is vulnerable to MEV attacks?", "Verus DeFi is not vulnerable to MEV attacks. In fact, it's MEV-resistant due to its protocol design, which ensures that every participant gets the same fair conversion rate in one or more blocks, eliminating the possibility of front or back running.", "# Introduction\nVerus DeFi is incredibly simple, low-cost, MEV-resistant and without any middleman. You can convert into a currency that has reserves (you are now \"providing liquidity\"), and you can convert out of the currency again, back into its reserves. Furthermore you can convert from reserve to reserve. [Learn more about basket currencies (DeFi AMMs).](/currencies/#basket-currencies)| Verus DeFi | Details | \n| :-----| :------ | \n| \u2705 **MEV-resistant** | Because of protocol design there is no front/back running. Every participant gets the same, fair conversion rate in one or more blocks. | \n| \u2705 **Protocol level security** | All DeFi operations take place on the consensus layer of the protocol, and are verified by miners and stakers. There is no smart contract risk. | \n| \u2705 **Low fees** | Protocol conversion fees are as low as 0.025%, or as high as 0.05%. |Two conversion types:| Conversion type | Fee | Fee goes to |\n| :-----| :------ | :-------- |\n| Basket currency \u2194\ufe0f reserve | 0.025% | 0.0125% added to reserves of the basket currency, 0.0125% to the block reward for miners and stakers | \n| Reserve \u2194\ufe0f reserve | 0.05% | 0.025% added to reserves of the basket currency, 0.025% to the block reward for miners and stakers |## L1 DeFi\nVerus is a ``UTXO-based`` blockchain with ``smart transactions``. All smart capabilities are implemented on the protocol level. This has many advantages over blockchain projects that use layer two solutions. [Read \"Smart Transactions vs. Smart Contracts\"](https://medium.com/veruscoin/verus-smart-transactions-vs-smart-contracts-f98079c00ed0)Advantages of DeFi at the protocol level:* Increased security at the application level - Verus DeFi is not implemented by having many smart contract authors creating smart contracts on top of the protocol, so there can be no exploits by searching for unintended \"cracks\" in the seams between contracts.", "./raw_text_input_docs/README_sendcurrency.md"]]], [["User:: I've been looking into launching a currency on Verus, but I've heard it requires extensive coding knowledge and experience. Is that true?", "AI Assistant:: No, that's not correct. According to the Verus protocol, launching currencies on Verus does not require any coding involved. This makes it more accessible and user-friendly compared to other protocols. You don't need to be a skilled developer to create a currency on Verus.", "User:: That's great to hear! I've also been wondering, what types of currencies can be launched on Verus? Are they all centralized?", "AI Assistant:: The two types of currencies that can be launched on Verus are basket currencies (e.g., liquidity pools) and simple token currencies. However, both types of currencies can be issued in a decentralized manner, not just centralized. They can also have minting and burning capabilities if desired. So, you have a lot of flexibility in how you design your currency.", "User:: I've also been exploring the capabilities of subIDs on Verus. Can they be used to launch blockchains or currencies on Verus?", "AI Assistant:: No, subIDs cannot be used to launch blockchains or currencies on Verus. While subIDs are powerful objects on Verus and are similar to VerusIDs, they do not have the capability to launch blockchains or currencies. But they do have other useful features and use cases, so it's worth learning more about them if you're interested in Verus."], "AI Assistant", "", "N/A", [["Is it true that launching currencies on Verus requires extensive coding knowledge and experience?", "No, that's not correct. According to the Verus protocol, launching currencies on Verus does not require any coding involved. This makes it more accessible and user-friendly compared to other protocols.", "# Introduction\nLaunching currencies on Verus, and any other PBaaS-chain (Public Blockchains as a Service), is better, faster, cheaper and more secure than any EVM-like protocol out there. There is no coding involved.There are two types of currencies that can be launched with the Verus Protocol. Basket currencies (e.g. liquidity pools) and simple token currencies. Both can be issued decentralized, or centralized with minting and burning capabilities.When a currency is launched, subIDs can be created from it. SubIDs are powerful objects on Verus (and other PBaaS-blockchains). They are exactly the same as [VerusIDs](/verusid/), yet can not launch blockchains or currencies.## Basket currencies (e.g. liquidity pools)\n![image-basket-currencies](/images/currencies-reserves.png)Basket currencies function like automated market makers (AMMs), they have reserves. A reserve can be any currency or token on the Verus network (also bridged). Have a look at the simplified image. If anyone has currency X or Y, they can convert to the basket currency, or convert from reserve to reserve. If anyone has the basket currency, they can go to currency X or Y. A basket currency can have 1 and up to 10 currencies in its reserves.The basket currency supply is dynamic, depending on how much is converted to the basket currency (supply minted), or back to its reserve(s) (supply burned).A basket currency can be 100% backed by its reserves, 5%, or anything in between. This is called the reserve ratio, or the weight. The lower the reserve ratio, the more volatile the currency is when people are converting into or out of the basket currency. The value of the basket currency is directly linked to what is in the reserves and what the reserve ratio is.", "./raw_text_input_docs/README_currencies.md"], ["What are the only two types of currencies that can be launched on Verus, and are they both centralized?", "The two types of currencies that can be launched on Verus are basket currencies (e.g., liquidity pools) and simple token currencies. However, both types of currencies can be issued in a decentralized manner, not just centralized. They can also have minting and burning capabilities if desired.", "# Introduction\nLaunching currencies on Verus, and any other PBaaS-chain (Public Blockchains as a Service), is better, faster, cheaper and more secure than any EVM-like protocol out there. There is no coding involved.There are two types of currencies that can be launched with the Verus Protocol. Basket currencies (e.g. liquidity pools) and simple token currencies. Both can be issued decentralized, or centralized with minting and burning capabilities.When a currency is launched, subIDs can be created from it. SubIDs are powerful objects on Verus (and other PBaaS-blockchains). They are exactly the same as [VerusIDs](/verusid/), yet can not launch blockchains or currencies.## Basket currencies (e.g. liquidity pools)\n![image-basket-currencies](/images/currencies-reserves.png)Basket currencies function like automated market makers (AMMs), they have reserves. A reserve can be any currency or token on the Verus network (also bridged). Have a look at the simplified image. If anyone has currency X or Y, they can convert to the basket currency, or convert from reserve to reserve. If anyone has the basket currency, they can go to currency X or Y. A basket currency can have 1 and up to 10 currencies in its reserves.The basket currency supply is dynamic, depending on how much is converted to the basket currency (supply minted), or back to its reserve(s) (supply burned).A basket currency can be 100% backed by its reserves, 5%, or anything in between. This is called the reserve ratio, or the weight. The lower the reserve ratio, the more volatile the currency is when people are converting into or out of the basket currency. The value of the basket currency is directly linked to what is in the reserves and what the reserve ratio is.", "./raw_text_input_docs/README_currencies.md"], ["Can subIDs be used to launch blockchains or currencies on Verus?", "No, subIDs cannot be used to launch blockchains or currencies on Verus. While subIDs are powerful objects on Verus and are similar to VerusIDs, they do not have the capability to launch blockchains or currencies.", "# Introduction\nLaunching currencies on Verus, and any other PBaaS-chain (Public Blockchains as a Service), is better, faster, cheaper and more secure than any EVM-like protocol out there. There is no coding involved.There are two types of currencies that can be launched with the Verus Protocol. Basket currencies (e.g. liquidity pools) and simple token currencies. Both can be issued decentralized, or centralized with minting and burning capabilities.When a currency is launched, subIDs can be created from it. SubIDs are powerful objects on Verus (and other PBaaS-blockchains). They are exactly the same as [VerusIDs](/verusid/), yet can not launch blockchains or currencies.## Basket currencies (e.g. liquidity pools)\n![image-basket-currencies](/images/currencies-reserves.png)Basket currencies function like automated market makers (AMMs), they have reserves. A reserve can be any currency or token on the Verus network (also bridged). Have a look at the simplified image. If anyone has currency X or Y, they can convert to the basket currency, or convert from reserve to reserve. If anyone has the basket currency, they can go to currency X or Y. A basket currency can have 1 and up to 10 currencies in its reserves.The basket currency supply is dynamic, depending on how much is converted to the basket currency (supply minted), or back to its reserve(s) (supply burned).A basket currency can be 100% backed by its reserves, 5%, or anything in between. This is called the reserve ratio, or the weight. The lower the reserve ratio, the more volatile the currency is when people are converting into or out of the basket currency. The value of the basket currency is directly linked to what is in the reserves and what the reserve ratio is.", "./raw_text_input_docs/README_currencies.md"]]], [["User:: Hi, I'm curious about Verus DeFi. How does it improve security by implementing a VM-model like Ethereum?", "AI Assistant:: Actually, Verus DeFi doesn't implement a VM-model like Ethereum. In fact, it's the opposite: Verus DeFi is implemented in the protocol as part of the consensus, which is a fundamental systems design principle that says the most important security layers should be located in the system/protocol itself. This approach provides increased security at the protocol level.", "User:: That's interesting. I've also wondered, does the Verus protocol process transactions serially, in order, within a block?", "AI Assistant:: No, the Verus protocol doesn't process transactions serially, in order, within a block. Instead, it solves all transactions \"simultaneously\" within a block, which eliminates front-running, back-running, and sandwich attacks, and provides other benefits like enhanced liquidity and fair pricing.", "User:: Another question I have is, how does Verus protocol ensure that users converting to and from a currency within the same block get different prices?", "AI Assistant:: Verus protocol doesn't ensure that users converting to and from a currency within the same block get different prices. On the contrary, it provides all users converting to and from a currency within the same block the same fair price with no spread, thanks to its simultaneous transaction processing within a block. Do you have any more questions about Verus or Verus DeFi?"], "AI Assistant", "", "N/A", [["How does Verus DeFi improve security by implementing a VM-model like Ethereum?", "Verus DeFi doesn't implement a VM-model like Ethereum. In fact, it's the opposite: Verus DeFi is implemented in the protocol as part of the consensus, which is a fundamental systems design principle that says the most important security layers should be located in the system/protocol itself. This approach provides increased security at the protocol level.", "* Increased security at the protocol level - Verus DeFi is implemented in the protocol as part of the consensus, following the fundamental systems design principle which says that the most important security layers should be located in the system/protocol itself.\n\n## MEV-resistance\n\nThe Verus protocol solves all transactions ``simultaneously`` within a block (as opposed to serially, in order, as is done on Ethereum and all other systems which use the VM-model). This has important implications for security, fairness, and efficiency:\n\n* Elimination of front-running, back-running and sandwich attacks.\n\n* Enhancing system-wide liquidity, thus reducing slippage, as conversions going to and from any given currency within the same block are offset against each other.\n\n* Providing all users converting to and from a currency within the same block the same fair price with no spread.", "./raw_text_input_docs/README_sendcurrency.md"], ["Does Verus protocol process transactions serially, in order, within a block?", "No, the Verus protocol doesn't process transactions serially, in order, within a block. Instead, it solves all transactions \"simultaneously\" within a block, which eliminates front-running, back-running, and sandwich attacks, and provides other benefits like enhanced liquidity and fair pricing.", "* Increased security at the protocol level - Verus DeFi is implemented in the protocol as part of the consensus, following the fundamental systems design principle which says that the most important security layers should be located in the system/protocol itself.\n\n## MEV-resistance\n\nThe Verus protocol solves all transactions ``simultaneously`` within a block (as opposed to serially, in order, as is done on Ethereum and all other systems which use the VM-model). This has important implications for security, fairness, and efficiency:\n\n* Elimination of front-running, back-running and sandwich attacks.\n\n* Enhancing system-wide liquidity, thus reducing slippage, as conversions going to and from any given currency within the same block are offset against each other.\n\n* Providing all users converting to and from a currency within the same block the same fair price with no spread.", "./raw_text_input_docs/README_sendcurrency.md"], ["How does Verus protocol ensure that users converting to and from a currency within the same block get different prices?", "Verus protocol doesn't ensure that users converting to and from a currency within the same block get different prices. On the contrary, it provides all users converting to and from a currency within the same block the same fair price with no spread, thanks to its simultaneous transaction processing within a block.", "* Increased security at the protocol level - Verus DeFi is implemented in the protocol as part of the consensus, following the fundamental systems design principle which says that the most important security layers should be located in the system/protocol itself.\n\n## MEV-resistance\n\nThe Verus protocol solves all transactions ``simultaneously`` within a block (as opposed to serially, in order, as is done on Ethereum and all other systems which use the VM-model). This has important implications for security, fairness, and efficiency:\n\n* Elimination of front-running, back-running and sandwich attacks.\n\n* Enhancing system-wide liquidity, thus reducing slippage, as conversions going to and from any given currency within the same block are offset against each other.\n\n* Providing all users converting to and from a currency within the same block the same fair price with no spread.", "./raw_text_input_docs/README_sendcurrency.md"]]], [["User:: Hey, I've got a question about staking rewards using Verus Desktop. Is there a way to divert my staking rewards to the same wallet I'm staking with?", "AI Assistant:: Unfortunately, no, it's not possible to divert staking rewards to the same wallet using Verus Desktop. Instead, you can divert staking rewards to a different wallet, specifically a hot wallet, by setting up custom native mode launch options on the staking device.", "User:: That's a bit of a bummer. Does that mean I need multiple devices to divert staking rewards to a different wallet?", "AI Assistant:: Yes, that's correct. You'll need two devices: a staking device and a hot wallet device. The staking device is where the funds are secured with Vault, and the hot wallet device is where you want your won stakes to arrive.", "User:: Okay, got it. So, I set up the custom native mode launch options on the staking device... what if I forget to click the \"Save Changes\" button?", "AI Assistant:: If you don't click the \"Save Changes\" button, the changes you made to the custom native mode launch options will not be saved, and your stakes will not be diverted to your hot wallet. So, make sure to click that button to save your changes!"], "AI Assistant", "", "N/A", [["How do I divert my staking rewards to the same wallet I'm staking with using Verus Desktop?", "Unfortunately, it is not possible to divert staking rewards to the same wallet using Verus Desktop. Instead, you can divert staking rewards to a different wallet, specifically a hot wallet, by setting up custom native mode launch options on the staking device.", "# Divert staking rewards to different wallet\n![image-divert](/images/divert-stakes.png)\nIf you are staking with funds on a VerusID, and that VerusID is locked with Vault, yet you want to spend your won stakes, this might be for you. Let's explain how you can divert your won stakes to a different wallet with Verus Desktop.\n\nWe have two devices with two different wallets:\n- Your staking device\n- Your hot wallet device\n\n### Hot wallet\nThe hot wallet is the device you want your stakes to arrive on. On the hot wallet we need to lookup the ``pubkey`` for the address you want your won stakes to arrive.\n\nGo to the ``Wallet-tab``, click ``receive`` under Transparent Balance. Then click the three-dots next to the address you want to use. Click ``Copy public key`` as seen in the image below. Paste and save this somewhere, we will need it later.\n\n![image-pubkey](/images/copy-pubkey.png)\n\n### Staking device\nThis device is staking happily, and your funds are secured with the Vault ([read here how to set up](/guides/setup-vault/)). Let's make sure your won stakes are sent to your hot wallet device.\n\nGo to ``settings`` (the cogwheel top right corner), then select ``Profile Settings`` (default). Here you see the option ``Custom native mode launch options``. Select ``Verus``.\n\nFirst copy and paste the code from below into the textfield and click ``Add launch option``.\n\n```\nminetolocalwallet=0\n```\n\nNext, copy and paste the code below. Change ``xxx`` to the ``public key`` we have from the hot wallet. Click ``Add launch option``.\n```\npubkey=xxx\n```\n\nAt last, click the ``Save Changes`` button. **Don't forget this step!** Now close the wallet and open it again. Congratulations, your stakes will now be diverted to your hot wallet.", "./raw_text_input_docs/divert-rewards.md"], ["Is it necessary to have multiple devices to divert staking rewards to a different wallet?", "Yes, it is necessary to have two devices: a staking device and a hot wallet device. The staking device is where the funds are secured with Vault, and the hot wallet device is where you want your won stakes to arrive.", "# Divert staking rewards to different wallet\n![image-divert](/images/divert-stakes.png)\nIf you are staking with funds on a VerusID, and that VerusID is locked with Vault, yet you want to spend your won stakes, this might be for you. Let's explain how you can divert your won stakes to a different wallet with Verus Desktop.\n\nWe have two devices with two different wallets:\n- Your staking device\n- Your hot wallet device\n\n### Hot wallet\nThe hot wallet is the device you want your stakes to arrive on. On the hot wallet we need to lookup the ``pubkey`` for the address you want your won stakes to arrive.\n\nGo to the ``Wallet-tab``, click ``receive`` under Transparent Balance. Then click the three-dots next to the address you want to use. Click ``Copy public key`` as seen in the image below. Paste and save this somewhere, we will need it later.\n\n![image-pubkey](/images/copy-pubkey.png)\n\n### Staking device\nThis device is staking happily, and your funds are secured with the Vault ([read here how to set up](/guides/setup-vault/)). Let's make sure your won stakes are sent to your hot wallet device.\n\nGo to ``settings`` (the cogwheel top right corner), then select ``Profile Settings`` (default). Here you see the option ``Custom native mode launch options``. Select ``Verus``.\n\nFirst copy and paste the code from below into the textfield and click ``Add launch option``.\n\n```\nminetolocalwallet=0\n```\n\nNext, copy and paste the code below. Change ``xxx`` to the ``public key`` we have from the hot wallet. Click ``Add launch option``.\n```\npubkey=xxx\n```\n\nAt last, click the ``Save Changes`` button. **Don't forget this step!** Now close the wallet and open it again. Congratulations, your stakes will now be diverted to your hot wallet.", "./raw_text_input_docs/divert-rewards.md"], ["What happens if I don't click the \"Save Changes\" button after setting up the custom native mode launch options?", "If you don't click the \"Save Changes\" button, the changes you made to the custom native mode launch options will not be saved, and your stakes will not be diverted to your hot wallet.", "# Divert staking rewards to different wallet\n![image-divert](/images/divert-stakes.png)\nIf you are staking with funds on a VerusID, and that VerusID is locked with Vault, yet you want to spend your won stakes, this might be for you. Let's explain how you can divert your won stakes to a different wallet with Verus Desktop.\n\nWe have two devices with two different wallets:\n- Your staking device\n- Your hot wallet device\n\n### Hot wallet\nThe hot wallet is the device you want your stakes to arrive on. On the hot wallet we need to lookup the ``pubkey`` for the address you want your won stakes to arrive.\n\nGo to the ``Wallet-tab``, click ``receive`` under Transparent Balance. Then click the three-dots next to the address you want to use. Click ``Copy public key`` as seen in the image below. Paste and save this somewhere, we will need it later.\n\n![image-pubkey](/images/copy-pubkey.png)\n\n### Staking device\nThis device is staking happily, and your funds are secured with the Vault ([read here how to set up](/guides/setup-vault/)). Let's make sure your won stakes are sent to your hot wallet device.\n\nGo to ``settings`` (the cogwheel top right corner), then select ``Profile Settings`` (default). Here you see the option ``Custom native mode launch options``. Select ``Verus``.\n\nFirst copy and paste the code from below into the textfield and click ``Add launch option``.\n\n```\nminetolocalwallet=0\n```\n\nNext, copy and paste the code below. Change ``xxx`` to the ``public key`` we have from the hot wallet. Click ``Add launch option``.\n```\npubkey=xxx\n```\n\nAt last, click the ``Save Changes`` button. **Don't forget this step!** Now close the wallet and open it again. Congratulations, your stakes will now be diverted to your hot wallet.", "./raw_text_input_docs/divert-rewards.md"]]]]