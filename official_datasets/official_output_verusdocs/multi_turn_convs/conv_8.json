[
    "## Conversation that answers the provided questions:\n**User:**\nHey, I'm trying to define a currency on Verus, but I'm not sure what the `options` parameter does. Can you help me out?\n\n**AI Assistant:**\nThe `options` parameter determines the type of currency being defined. The possible values are:\n- `1`: Default, a decentralized currency where registration fees are burned.\n- `2`: Centralized currency, where the rootID can mint and burn supply, and subID registration fees go to the rootID.\n- `3`: Ethereum ERC-20 mapped tokens.\n\nDo you have any specific use case in mind for your currency, or would you like me to elaborate on these options?\n\n**User:**\nI think I want to create a simple token currency. Can you tell me how to do that, and what the implications are?\n\n**AI Assistant:**\nYou can define a simple token currency on Verus by setting `options` to `32`. This allows the controller of the rootID to mint and burn supply. Additionally, during the preconversion timeframe, people can convert their funds to this currency, which will go to the rootID as a funding mechanism.\n\nKeep in mind that this means the rootID will have control over the supply of the currency, and people will be able to convert their funds to it during the preconversion phase.\n\n**User:**\nWhat about the `currencies` parameter? I'm not sure what that's for.\n\n**AI Assistant:**\nThe `currencies` parameter is used when defining a basket currency (`options:33`). In that case, it specifies the currencies that will be in the reserves.\n\nFor a simple token currency (`options:32`), it determines what people can convert during the preconversion timeframe, which will go to the rootID of the currency as a funding mechanism. You can specify up to 10 currencies for this parameter.\n\nSo, in your case, you'll want to specify the currencies that you want people to be able to convert to your new token currency during the preconversion phase. Does that make sense?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What do the different values of the `options` parameter mean when defining a currency on Verus?",
            "The `options` parameter determines the type of currency being defined. The possible values are:\n- `1`: Default, a decentralized currency where registration fees are burned.\n- `2`: Centralized currency, where the rootID can mint and burn supply, and subID registration fees go to the rootID.\n- `3`: Ethereum ERC-20 mapped tokens.",
            "``1`` is default, which launches a decentralized currency (no need to include this parameter when defining such a currency). When subIDs are created with this option, the registration fees are burned.``2`` is for a centralized currency. If it\u2019s a basket currency the rootID can mint and burn supply while automatically lowering and raising the reserve ratio (also anyone can burn supply without lowering the reserve ratio). Or when it\u2019s a simple token currency they can just mint and burn supply. The subID registration fees go to the rootID.``3`` is for Ethereum ERC-20 mapped tokens. [Read more](/currencies/mapping-1:1-eth)Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\n\u261d\ufe0f A simple token currency called MyBrand, centralized (the controller of the rootID can mint and burn), and has a preallocation of 100 tokens to Klaus@.### **\"currencies\"**\nHere you put the names of the currencies (or just one \u2014 it must have VRSC when launched on Verus) that will be in the reserves when it\u2019s a basket currency (`options:33`).Or when it\u2019s a simple token currency (`options:32`), what people convert during the preconversion timeframe will go to the rootID of the currency, as a funding mechanism. In the case of a simple token currency, combine it with `\"conversions\"` to determine the preconversion price.Use up to 10 currencies for this parameter.",
            "./raw_text_input_docs/launch-currency.md"
        ],
        [
            "How can I define a simple token currency on Verus, and what are the implications of doing so?",
            "You can define a simple token currency on Verus by setting `options` to `32`. This allows the controller of the rootID to mint and burn supply. Additionally, during the preconversion timeframe, people can convert their funds to this currency, which will go to the rootID as a funding mechanism.",
            "``1`` is default, which launches a decentralized currency (no need to include this parameter when defining such a currency). When subIDs are created with this option, the registration fees are burned.``2`` is for a centralized currency. If it\u2019s a basket currency the rootID can mint and burn supply while automatically lowering and raising the reserve ratio (also anyone can burn supply without lowering the reserve ratio). Or when it\u2019s a simple token currency they can just mint and burn supply. The subID registration fees go to the rootID.``3`` is for Ethereum ERC-20 mapped tokens. [Read more](/currencies/mapping-1:1-eth)Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\n\u261d\ufe0f A simple token currency called MyBrand, centralized (the controller of the rootID can mint and burn), and has a preallocation of 100 tokens to Klaus@.### **\"currencies\"**\nHere you put the names of the currencies (or just one \u2014 it must have VRSC when launched on Verus) that will be in the reserves when it\u2019s a basket currency (`options:33`).Or when it\u2019s a simple token currency (`options:32`), what people convert during the preconversion timeframe will go to the rootID of the currency, as a funding mechanism. In the case of a simple token currency, combine it with `\"conversions\"` to determine the preconversion price.Use up to 10 currencies for this parameter.",
            "./raw_text_input_docs/launch-currency.md"
        ],
        [
            "What is the purpose of the `currencies` parameter when defining a currency on Verus?",
            "The `currencies` parameter specifies the currencies that will be in the reserves when defining a basket currency (`options:33`). For a simple token currency (`options:32`), it determines what people can convert during the preconversion timeframe, which will go to the rootID of the currency as a funding mechanism. Up to 10 currencies can be specified for this parameter.",
            "``1`` is default, which launches a decentralized currency (no need to include this parameter when defining such a currency). When subIDs are created with this option, the registration fees are burned.``2`` is for a centralized currency. If it\u2019s a basket currency the rootID can mint and burn supply while automatically lowering and raising the reserve ratio (also anyone can burn supply without lowering the reserve ratio). Or when it\u2019s a simple token currency they can just mint and burn supply. The subID registration fees go to the rootID.``3`` is for Ethereum ERC-20 mapped tokens. [Read more](/currencies/mapping-1:1-eth)Example currency:\n``` json\n./verus -chain=VRSCTEST definecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n```\n\u261d\ufe0f A simple token currency called MyBrand, centralized (the controller of the rootID can mint and burn), and has a preallocation of 100 tokens to Klaus@.### **\"currencies\"**\nHere you put the names of the currencies (or just one \u2014 it must have VRSC when launched on Verus) that will be in the reserves when it\u2019s a basket currency (`options:33`).Or when it\u2019s a simple token currency (`options:32`), what people convert during the preconversion timeframe will go to the rootID of the currency, as a funding mechanism. In the case of a simple token currency, combine it with `\"conversions\"` to determine the preconversion price.Use up to 10 currencies for this parameter.",
            "./raw_text_input_docs/launch-currency.md"
        ]
    ]
]