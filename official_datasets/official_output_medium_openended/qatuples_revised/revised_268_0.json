[
    "What are the \"proofprotocol\" and \"currencies\" parameters in the `definecurrency` command, and how do they affect the behavior of a currency in Verus?",
    "In Verus, when defining a new currency using the `definecurrency` command, two important parameters are `proofprotocol` and `currencies`.\n\n**\"proofprotocol\" Parameter:**\nThe `proofprotocol` parameter determines the level of centralization or decentralization of a currency. It can take three values: 1, 2, or 3.\n\n* A value of 1 (default) creates a decentralized currency, where subID registration fees are burned. This means that the currency operates independently, without a central authority controlling it.\n* A value of 2 creates a centralized currency, where the rootID has control over minting and burning supply. In the case of a basket currency, the rootID can also adjust the reserve ratio. SubID registration fees go to the rootID.\n* A value of 3 is used for Ethereum ERC-20 mapped tokens, which is a separate use case.\n\n**\"currencies\" Parameter:**\nThe `currencies` parameter is used differently depending on the type of currency being created.\n\n* For a basket currency (options: 33), `currencies` lists the names of the currencies that will be held in the reserves.\n* For a simple token currency (options: 32), `currencies` specifies the currency that people will convert during the preconversion timeframe, which will go to the rootID of the currency as a funding mechanism. In this case, `currencies` is often used in conjunction with the `conversions` parameter to determine the preconversion price.\n\nIn summary, the `proofprotocol` parameter determines the level of centralization or decentralization of a currency, while the `currencies` parameter specifies the currencies involved in a basket currency or the funding mechanism for a simple token currency.",
    "o let\u2019s start.\n\u201cproofprotocol\u201d\nThis parameter defines, among others, if the currency is centralized or decentralized. You can choose 1,2 or 3.\n1 is default, which launches a decentralized currency (no need to include this parameter when defining such a currency). When subIDs are created with this option, the registration fees are burned.\n2 is for a centralized currency. If it\u2019s a basket currency the rootID can mint and burn supply while automatically lowering and raising the reserve ratio (also anyone can burn supply without lowering the reserve ratio). Or when it\u2019s a simple token currency they can just mint and burn supply. The subID registration fees go to the rootID.\n3 is for Ethereum ERC-20 mapped tokens. Read more here\nExample currency:\ndefinecurrency '{\n \"name\":\"MyBrand\", \n \"options\":32, \n \"proofprotocol\":2, \n \"preallocations\":[{\"Klaus@\":100}]\n}'\n\ud83d\udd0d A simple token currency called MyBrand, centralized (the controller of the rootID can mint and burn), and has a preallocation of 100 tokens to Klaus@.\n\u201ccurrencies\u201d\nHere you put the names of the currencies (or just one \u2014 it must have VRSC when launched on Verus) that will be in the reserves when it\u2019s a basket currency (options:33).\nOr when it\u2019s a simple token currency (options:32), what people convert during the preconversion timeframe will go to the rootID of the currency, as a funding mechanism. In the case of a simple token currency, combine it with \"conversions\" to determine the preconversion price.\nExample currency:\ndefinecurrency '{\n \"name\":\"CommunityX\", \n \"options\":33, \n \"currencies\":[\"vrsctest\",\"MyBrand\"], \n \"minpreconversion\":[10,50],\n \"initialsupply\":100\n}'\n\ud83d\udd0d A basket currency called CommunityX. It needs to get a minimum of 10 VRSCTEST and 50 MyBrand into its reserves within the preconversion time frame to be launched. The initial supply of 100 CommunityX will be distributed among the preconverters.\n",
    "./raw_text_input_medium/Ultimate Guide for Launching Currencies on Verus-2024-03-14 14:07:08"
]