[
    [
        [
            "How does Verus differ from traditional smart contract platforms in terms of building dApps?",
            "Verus differs from traditional smart contract platforms in that it does not require developers to create their own versions of contracts to build a dApp. Instead, Verus provides a decentralized backend, the Internet of Value, which allows dApps to run on a client or a broad range of resource types, communicating via the same RPC API as the CLI commands.",
            "g unexpected behaviors, and everyone must create their version of these contracts to build a dApp.\nVerus Smart Transactions\nIn Verus, it\u2019s a new model as follows:\nYour dApp can run on a client or on a broad range of resource types, and it communicates via the same RPC API as the CLI commands (optionally without wallet or control functions) with a fully functional, decentralized backend, which is the Internet of Value, including all its unlimited scale, connected systems and chains.\nUnlike a single currency blockchain, Verus smart transactions natively support an unlimited number of friendly name currencies directly via protocol and an unlimited number of blockchains for currency launches, simple sends, currency conversions, or cross-chain operations. All inputs, outputs, cross-chain imports, and even conversions are validated and in/out values of all currencies accounted for by consensus, just as native currency ins and outs are on single-currency blockchains.\nIdentities are a first class concept in the primitives available for dApps. They all support fully available, open, decentralized, user controlled authentication and authorization protocols, enabled by QR code or deep links and supportive of permission granting, ID provisioning/sale by the dApp, private/attested KYC and other services. These protocols can easily be bridged to OAuth or OpenID Connect via servers like Hydra, but used natively, they require no service provider between the service actually authenticating the user and the user themselves.\nEvery identity is multisig and has revocation and recovery capabilities. They are also transferable and can have rights bound into them in a provable manner via the contentmultimap. All of this is supported as primitives in the core RPC/CLI api/command line and in the core protocol.\nIDs enable their holders to launch like-named currencies, blockchains, and single NF",
            "./raw_text_input_medium/Verus Smart Transactions vs. Smart Contracts-2023-07-27 14:24:48"
        ],
        [
            "What makes Verus smart transactions unique compared to single-currency blockchain transactions?",
            "Verus smart transactions natively support an unlimited number of friendly name currencies directly via protocol and an unlimited number of blockchains for currency launches, simple sends, currency conversions, or cross-chain operations. All inputs, outputs, cross-chain imports, and even conversions are validated and in/out values of all currencies accounted for by consensus, just like native currency ins and outs on single-currency blockchains.",
            "g unexpected behaviors, and everyone must create their version of these contracts to build a dApp.\nVerus Smart Transactions\nIn Verus, it\u2019s a new model as follows:\nYour dApp can run on a client or on a broad range of resource types, and it communicates via the same RPC API as the CLI commands (optionally without wallet or control functions) with a fully functional, decentralized backend, which is the Internet of Value, including all its unlimited scale, connected systems and chains.\nUnlike a single currency blockchain, Verus smart transactions natively support an unlimited number of friendly name currencies directly via protocol and an unlimited number of blockchains for currency launches, simple sends, currency conversions, or cross-chain operations. All inputs, outputs, cross-chain imports, and even conversions are validated and in/out values of all currencies accounted for by consensus, just as native currency ins and outs are on single-currency blockchains.\nIdentities are a first class concept in the primitives available for dApps. They all support fully available, open, decentralized, user controlled authentication and authorization protocols, enabled by QR code or deep links and supportive of permission granting, ID provisioning/sale by the dApp, private/attested KYC and other services. These protocols can easily be bridged to OAuth or OpenID Connect via servers like Hydra, but used natively, they require no service provider between the service actually authenticating the user and the user themselves.\nEvery identity is multisig and has revocation and recovery capabilities. They are also transferable and can have rights bound into them in a provable manner via the contentmultimap. All of this is supported as primitives in the core RPC/CLI api/command line and in the core protocol.\nIDs enable their holders to launch like-named currencies, blockchains, and single NF",
            "./raw_text_input_medium/Verus Smart Transactions vs. Smart Contracts-2023-07-27 14:24:48"
        ],
        [
            "How do identities work in Verus, and what features do they provide for dApps?",
            "In Verus, identities are a first-class concept, providing fully available, open, decentralized, user-controlled authentication and authorization protocols. They support features such as QR code or deep link authentication, permission granting, ID provisioning/sale by the dApp, private/attested KYC, and other services. Identities are also multisig, transferable, and have revocation and recovery capabilities, with rights bound into them in a provable manner via the contentmultimap.",
            "g unexpected behaviors, and everyone must create their version of these contracts to build a dApp.\nVerus Smart Transactions\nIn Verus, it\u2019s a new model as follows:\nYour dApp can run on a client or on a broad range of resource types, and it communicates via the same RPC API as the CLI commands (optionally without wallet or control functions) with a fully functional, decentralized backend, which is the Internet of Value, including all its unlimited scale, connected systems and chains.\nUnlike a single currency blockchain, Verus smart transactions natively support an unlimited number of friendly name currencies directly via protocol and an unlimited number of blockchains for currency launches, simple sends, currency conversions, or cross-chain operations. All inputs, outputs, cross-chain imports, and even conversions are validated and in/out values of all currencies accounted for by consensus, just as native currency ins and outs are on single-currency blockchains.\nIdentities are a first class concept in the primitives available for dApps. They all support fully available, open, decentralized, user controlled authentication and authorization protocols, enabled by QR code or deep links and supportive of permission granting, ID provisioning/sale by the dApp, private/attested KYC and other services. These protocols can easily be bridged to OAuth or OpenID Connect via servers like Hydra, but used natively, they require no service provider between the service actually authenticating the user and the user themselves.\nEvery identity is multisig and has revocation and recovery capabilities. They are also transferable and can have rights bound into them in a provable manner via the contentmultimap. All of this is supported as primitives in the core RPC/CLI api/command line and in the core protocol.\nIDs enable their holders to launch like-named currencies, blockchains, and single NF",
            "./raw_text_input_medium/Verus Smart Transactions vs. Smart Contracts-2023-07-27 14:24:48"
        ]
    ],
    "will",
    "be",
    "replaced",
    "c325c7b8-f025-45a0-b099-1f5c68c332c4"
]