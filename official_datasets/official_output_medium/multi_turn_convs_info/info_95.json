[
    [
        [
            "What is the Verus VIP protocol, and how does it help to defend against potential attacks on the Verus network?",
            "The Verus VIP protocol is a security mechanism designed to protect the Verus network against potential attacks. It provides a way to revoke all VerusIDs, including notary IDs, even those used for Ethereum protocol bridges. Additionally, each PBaaS chain, including Verus, has a network-agreed multisig chain oracle that can temporarily pause cross-chain notarizations or transactions, which can be overridden by network validators.\n\nThe VIP protocol also ensures that every notarization on any chain is first made public, given a period of time before confirmation, and finally confirmed only after a second notarization confirms the first. This provides an additional layer of safeguards against potential attacks.",
            "re combined hash + stake power than the publicly validated chain making earned notarizations\nDevelopers helping them by creating an alternate protocol for the shadow chain\nWhile you may recognize these requirements as very close to the requirements of attacking any blockchain, the Verus VIP protocol provides a way to even defend against such an unlikely scenario. VIP provides for revocation of all VerusIDs, including notary IDs, even those that are used for Ethereum protocol bridges. Furthermore, each PBaaS chain, including Verus, has a network agreed multisig chain oracle that can separately pause cross-chain notarizations or transactions temporarily, which also can be overridden by network validators.\nTo enable yet another layer of safeguards, the Verus VIP protocol does not confirm any notarization that has first been agreed to by validators, then agreed to and signed by all notaries on either the earned or the accepted chain, until a second such notarization confirms the first. This ensures that every notarization on any chain is first made public, given a period of time before confirmation, and finally, if nothing stops it, confirmed.\nMeanwhile, with basic monitoring by witnesses to see if their own identities have signed for anything they do not actually agree with, meaning their keys were stolen, notaries can auto-revoke their own identities and prevent stolen key attacks from being anything more than an inconvenience. Additional monitoring by chain oracle controllers to look for clear discrepancies between soon to be confirmed notarizations and chains that they monitor can also use the oracle notification network to pause cross-chain transactions, providing yet another line of defense for each chain on the network.\nWhile there are numerous capabilities and safeguards built into the Verus VIP protocol beyond those described in this document, by separating the p",
            "./raw_text_input_medium/Verus Internet Protocol (VIP)\u200a\u2014\u200aProvable, Decentralized Cross-chain Communication-2023-08-24 10:11:22"
        ],
        [
            "How do notaries protect themselves against stolen key attacks in the Verus VIP protocol?",
            "In the Verus VIP protocol, notaries can auto-revoke their own identities if they notice that their keys have been stolen and used for unauthorized transactions. This is achieved through basic monitoring by witnesses to see if their own identities have signed for anything they do not actually agree with. This provides an additional line of defense against stolen key attacks.",
            "re combined hash + stake power than the publicly validated chain making earned notarizations\nDevelopers helping them by creating an alternate protocol for the shadow chain\nWhile you may recognize these requirements as very close to the requirements of attacking any blockchain, the Verus VIP protocol provides a way to even defend against such an unlikely scenario. VIP provides for revocation of all VerusIDs, including notary IDs, even those that are used for Ethereum protocol bridges. Furthermore, each PBaaS chain, including Verus, has a network agreed multisig chain oracle that can separately pause cross-chain notarizations or transactions temporarily, which also can be overridden by network validators.\nTo enable yet another layer of safeguards, the Verus VIP protocol does not confirm any notarization that has first been agreed to by validators, then agreed to and signed by all notaries on either the earned or the accepted chain, until a second such notarization confirms the first. This ensures that every notarization on any chain is first made public, given a period of time before confirmation, and finally, if nothing stops it, confirmed.\nMeanwhile, with basic monitoring by witnesses to see if their own identities have signed for anything they do not actually agree with, meaning their keys were stolen, notaries can auto-revoke their own identities and prevent stolen key attacks from being anything more than an inconvenience. Additional monitoring by chain oracle controllers to look for clear discrepancies between soon to be confirmed notarizations and chains that they monitor can also use the oracle notification network to pause cross-chain transactions, providing yet another line of defense for each chain on the network.\nWhile there are numerous capabilities and safeguards built into the Verus VIP protocol beyond those described in this document, by separating the p",
            "./raw_text_input_medium/Verus Internet Protocol (VIP)\u200a\u2014\u200aProvable, Decentralized Cross-chain Communication-2023-08-24 10:11:22"
        ],
        [
            "What is the role of chain oracle controllers in the Verus VIP protocol, and how do they contribute to the security of the network?",
            "Chain oracle controllers play a crucial role in the Verus VIP protocol by monitoring for clear discrepancies between soon-to-be-confirmed notarizations and chains that they monitor. If they detect any discrepancies, they can use the oracle notification network to pause cross-chain transactions, providing yet another line of defense for each chain on the network.",
            "re combined hash + stake power than the publicly validated chain making earned notarizations\nDevelopers helping them by creating an alternate protocol for the shadow chain\nWhile you may recognize these requirements as very close to the requirements of attacking any blockchain, the Verus VIP protocol provides a way to even defend against such an unlikely scenario. VIP provides for revocation of all VerusIDs, including notary IDs, even those that are used for Ethereum protocol bridges. Furthermore, each PBaaS chain, including Verus, has a network agreed multisig chain oracle that can separately pause cross-chain notarizations or transactions temporarily, which also can be overridden by network validators.\nTo enable yet another layer of safeguards, the Verus VIP protocol does not confirm any notarization that has first been agreed to by validators, then agreed to and signed by all notaries on either the earned or the accepted chain, until a second such notarization confirms the first. This ensures that every notarization on any chain is first made public, given a period of time before confirmation, and finally, if nothing stops it, confirmed.\nMeanwhile, with basic monitoring by witnesses to see if their own identities have signed for anything they do not actually agree with, meaning their keys were stolen, notaries can auto-revoke their own identities and prevent stolen key attacks from being anything more than an inconvenience. Additional monitoring by chain oracle controllers to look for clear discrepancies between soon to be confirmed notarizations and chains that they monitor can also use the oracle notification network to pause cross-chain transactions, providing yet another line of defense for each chain on the network.\nWhile there are numerous capabilities and safeguards built into the Verus VIP protocol beyond those described in this document, by separating the p",
            "./raw_text_input_medium/Verus Internet Protocol (VIP)\u200a\u2014\u200aProvable, Decentralized Cross-chain Communication-2023-08-24 10:11:22"
        ]
    ],
    "will",
    "be",
    "replaced",
    "805dfba6-14db-4a10-a3d5-7edcd447a20f"
]