[
    "## Conversation that answers the provided questions:\n**User:**\nI'm still learning about VerusIDs. Can you tell me about the different states a VerusID can be in?\n\n**AI Assistant:**\nA VerusID can be in one of three states: Locked indefinitely, Locked and will unlock after a predetermined amount of time has elapsed, or Unlocked. Do you have any questions about these states or how they work?\n\n**User:**\nActually, yes. What happens to an ID's spending power when it is locked, and how does revocation affect it?\n\n**AI Assistant:**\nWhen an ID is locked, its spending power can still be revoked. Revocation overrides locking, meaning that even if an ID is locked, its spending power can still be revoked by the revocation authority. This adds an extra layer of security to your VerusID.\n\n**User:**\nThat's good to know. How can you secure funds in a VerusID if the private key is compromised, and what is the role of revocation and recovery authorities in this process?\n\n**AI Assistant:**\nTo secure funds in a VerusID if the private key is compromised, you can lock the ID with a condition that it won't unlock for a predetermined amount of time after unlocking is requested. Then, if an attacker requests to unlock the ID, you can use the revocation authority to revoke primary authority for the ID, preventing the attacker from withdrawing the funds. Finally, you can use the recovery authority to recover primary authority to a new address, effectively swapping out the controlling address and securing the funds.\n\n**User:**\nThat sounds like a good plan. But how can you be notified if an attacker has made an unlock request for a VerusID?\n\n**AI Assistant:**\nUnlock requests are public and published on the blockchain, so you can set an alert to notify you if an unlock request is made for a VerusID. This way, you can take prompt action to protect your funds if someone tries to compromise your VerusID.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What are the three states that a VerusID can be in?",
            "A VerusID can be in one of three states: Locked indefinitely, Locked and will unlock after a predetermined amount of time has elapsed, or Unlocked.",
            "ID:\nLocked indefinitely\nLocked and will unlock after\n1) an unlock has been requested and then\n2) a predetermined amount of time has elapsed\nUnlocked\nA VerusID can be in one of three states.\nWhen an ID is locked, its spending power can still be revoked. Revocation overrides locking. So, let\u2019s go back to our example and figure out how to really secure our funds.\nExample, Part B\nOnce again, Bob@ holds 1000 VRSC, but this time you can:\nAssign both revocation and recovery authority to the Alice@ address. (You could give revocation and recovery to different IDs, but for this example we\u2019ll put them both on the same one.)\nLock Bob@ with the condition that it won\u2019t unlock for 24 hours after unlocking is requested. Once you set a time, it can\u2019t be changed. It\u2019s protected by the blockchain.\nWith this design, you have complete a solution if a private key for Bob@ is compromised. Let\u2019s run through that scenario again.\nFirst, Bob@ is locked, so the attacker can\u2019t spend the 1000 VRSC. Instead, the attacker first has to request that Bob@ be unlocked. But you have cleverly configured Bob@ so it won\u2019t unlock until 24 hours after a request. You can use that time to safeguard your funds.\nUse Alice@ to revoke primary authority for Bob@. That prevents the attacker from withdrawing the funds.\nCreate a new address.\nUse Alice@ to recover primary authority to the new address. Bob@ is once again a functioning ID that you have primary authority over and that holds 1000 VRSC. You\u2019ve just swapped out a controlling address.\nThe attacker is now proud owner of private keys for an address that used to control Bob@ but now controls nothing.\nWhile this scenario tames the power of the private key, it also begs the question of how you know if an attacker has made an unlock request for Bob@? The answer is that requests are public \u2014 they\u2019re published on the blockchain. You can set an alert.\nIn Summary\nTwo b",
            "./raw_text_input_medium/How Verus Tames the Wild Private Key-2020-10-11 00:02:49"
        ],
        [
            "What happens to an ID's spending power when it is locked, and how does revocation affect it?",
            "When an ID is locked, its spending power can still be revoked. Revocation overrides locking, meaning that even if an ID is locked, its spending power can still be revoked by the revocation authority.",
            "ID:\nLocked indefinitely\nLocked and will unlock after\n1) an unlock has been requested and then\n2) a predetermined amount of time has elapsed\nUnlocked\nA VerusID can be in one of three states.\nWhen an ID is locked, its spending power can still be revoked. Revocation overrides locking. So, let\u2019s go back to our example and figure out how to really secure our funds.\nExample, Part B\nOnce again, Bob@ holds 1000 VRSC, but this time you can:\nAssign both revocation and recovery authority to the Alice@ address. (You could give revocation and recovery to different IDs, but for this example we\u2019ll put them both on the same one.)\nLock Bob@ with the condition that it won\u2019t unlock for 24 hours after unlocking is requested. Once you set a time, it can\u2019t be changed. It\u2019s protected by the blockchain.\nWith this design, you have complete a solution if a private key for Bob@ is compromised. Let\u2019s run through that scenario again.\nFirst, Bob@ is locked, so the attacker can\u2019t spend the 1000 VRSC. Instead, the attacker first has to request that Bob@ be unlocked. But you have cleverly configured Bob@ so it won\u2019t unlock until 24 hours after a request. You can use that time to safeguard your funds.\nUse Alice@ to revoke primary authority for Bob@. That prevents the attacker from withdrawing the funds.\nCreate a new address.\nUse Alice@ to recover primary authority to the new address. Bob@ is once again a functioning ID that you have primary authority over and that holds 1000 VRSC. You\u2019ve just swapped out a controlling address.\nThe attacker is now proud owner of private keys for an address that used to control Bob@ but now controls nothing.\nWhile this scenario tames the power of the private key, it also begs the question of how you know if an attacker has made an unlock request for Bob@? The answer is that requests are public \u2014 they\u2019re published on the blockchain. You can set an alert.\nIn Summary\nTwo b",
            "./raw_text_input_medium/How Verus Tames the Wild Private Key-2020-10-11 00:02:49"
        ],
        [
            "How can you secure funds in a VerusID if the private key is compromised, and what is the role of revocation and recovery authorities in this process?",
            "To secure funds in a VerusID if the private key is compromised, you can lock the ID with a condition that it won't unlock for a predetermined amount of time after unlocking is requested. Then, if an attacker requests to unlock the ID, you can use the revocation authority to revoke primary authority for the ID, preventing onDataChange the attacker from withdrawing the funds. Finally, you can use the recovery authority to recover primary authority to a new address, effectively swapping out the controlling address and securing the funds.",
            "ID:\nLocked indefinitely\nLocked and will unlock after\n1) an unlock has been requested and then\n2) a predetermined amount of time has elapsed\nUnlocked\nA VerusID can be in one of three states.\nWhen an ID is locked, its spending power can still be revoked. Revocation overrides locking. So, let\u2019s go back to our example and figure out how to really secure our funds.\nExample, Part B\nOnce again, Bob@ holds 1000 VRSC, but this time you can:\nAssign both revocation and recovery authority to the Alice@ address. (You could give revocation and recovery to different IDs, but for this example we\u2019ll put them both on the same one.)\nLock Bob@ with the condition that it won\u2019t unlock for 24 hours after unlocking is requested. Once you set a time, it can\u2019t be changed. It\u2019s protected by the blockchain.\nWith this design, you have complete a solution if a private key for Bob@ is compromised. Let\u2019s run through that scenario again.\nFirst, Bob@ is locked, so the attacker can\u2019t spend the 1000 VRSC. Instead, the attacker first has to request that Bob@ be unlocked. But you have cleverly configured Bob@ so it won\u2019t unlock until 24 hours after a request. You can use that time to safeguard your funds.\nUse Alice@ to revoke primary authority for Bob@. That prevents the attacker from withdrawing the funds.\nCreate a new address.\nUse Alice@ to recover primary authority to the new address. Bob@ is once again a functioning ID that you have primary authority over and that holds 1000 VRSC. You\u2019ve just swapped out a controlling address.\nThe attacker is now proud owner of private keys for an address that used to control Bob@ but now controls nothing.\nWhile this scenario tames the power of the private key, it also begs the question of how you know if an attacker has made an unlock request for Bob@? The answer is that requests are public \u2014 they\u2019re published on the blockchain. You can set an alert.\nIn Summary\nTwo b",
            "./raw_text_input_medium/How Verus Tames the Wild Private Key-2020-10-11 00:02:49"
        ],
        [
            "How can you be notified if an attacker has made an unlock request for a VerusID?",
            "Unlock requests are public and published on the blockchain, so you can set an alert to notify you if an unlock request is made for a VerusID.",
            "ID:\nLocked indefinitely\nLocked and will unlock after\n1) an unlock has been requested and then\n2) a predetermined amount of time has elapsed\nUnlocked\nA VerusID can be in one of three states.\nWhen an ID is locked, its spending power can still be revoked. Revocation overrides locking. So, let\u2019s go back to our example and figure out how to really secure our funds.\nExample, Part B\nOnce again, Bob@ holds 1000 VRSC, but this time you can:\nAssign both revocation and recovery authority to the Alice@ address. (You could give revocation and recovery to different IDs, but for this example we\u2019ll put them both on the same one.)\nLock Bob@ with the condition that it won\u2019t unlock for 24 hours after unlocking is requested. Once you set a time, it can\u2019t be changed. It\u2019s protected by the blockchain.\nWith this design, you have complete a solution if a private key for Bob@ is compromised. Let\u2019s run through that scenario again.\nFirst, Bob@ is locked, so the attacker can\u2019t spend the 1000 VRSC. Instead, the attacker first has to request that Bob@ be unlocked. But you have cleverly configured Bob@ so it won\u2019t unlock until 24 hours after a request. You can use that time to safeguard your funds.\nUse Alice@ to revoke primary authority for Bob@. That prevents the attacker from withdrawing the funds.\nCreate a new address.\nUse Alice@ to recover primary authority to the new address. Bob@ is once again a functioning ID that you have primary authority over and that holds 1000 VRSC. You\u2019ve just swapped out a controlling address.\nThe attacker is now proud owner of private keys for an address that used to control Bob@ but now controls nothing.\nWhile this scenario tames the power of the private key, it also begs the question of how you know if an attacker has made an unlock request for Bob@? The answer is that requests are public \u2014 they\u2019re published on the blockchain. You can set an alert.\nIn Summary\nTwo b",
            "./raw_text_input_medium/How Verus Tames the Wild Private Key-2020-10-11 00:02:49"
        ]
    ]
]