[
    "What are the `createrawtransaction` and `decoderawtransaction` commands in Verus, and how do they work?",
    "In Verus, `createrawtransaction` and `decoderawtransaction` are two important commands that allow users to create and decode raw transactions.\n\n**`createrawtransaction`:**\nThe `createrawtransaction` command creates a transaction spending the given inputs and sending to the given addresses. It returns a hex-encoded raw transaction. \n\nHere's how it works:\n\n* The command takes three arguments: \n  1. A JSON array of JSON objects, where each object represents an input transaction, specified by its transaction ID (`txid`) and output number (`vout`). \n  2. A JSON object with addresses as keys and amounts as values, specifying the recipients of the transaction. \n  3. An optional `locktime` argument, which specifies the raw locktime of the transaction. If non-zero, it also locktime-activates inputs. \n  4. An optional `expiryheight` argument, which specifies the expiry height of the transaction (if Overwinter is active).\n* The command returns a hex string of the transaction.\n\n**`decoderawtransaction`:**\nThe `decoderawtransaction` command takes a hex-encoded transaction string as an argument and returns a JSON object representing the serialized transaction.\n\nHere's how it works:\n\n* The command takes a single argument, which is the hex-encoded transaction string.\n* It returns a JSON object with information about the transaction, including its transaction ID (`txid`).\n\nBy using these two commands, users can create and decode raw transactions in Verus, which is an essential part of the cryptocurrency's functionality.",
    "### `createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,...} ( locktime ) ( expiryheight )`\nCreate a transaction spending the given inputs and sending to the given addresses.\nReturns hex-encoded raw transaction.\nNote that the transaction's inputs are not signed, and\nit is not stored in the wallet or transmitted to the network.#### Arguments:\n1. \"transactions\"    (string, required) A json array of json objects\n```json\n   [\n    {\n     \"txid\":\"id\",  (string, required) The transaction id\n     \"vout\":n    (numeric, required) The output number\n     \"sequence\":n  (numeric, optional) The sequence number\n    }\n    ,...\n   ]\n```\n2. \"addresses\"      (string, required) a json object with addresses as keys and amounts as values\n```json\n  {\n   \"address\": x.xxx  (numeric, required) The key is the Komodo address, the value is the VRSC amount\n   ,...\n  }\n```\n3. locktime       (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\n4. expiryheight     (numeric, optional, default=nextblockheight+20 (pre-Blossom) or nextblockheight+40 (post-Blossom)) Expiry height of transaction (if Overwinter is active)#### Result:\n\"transaction\"      (string) hex string of the transactionExamples\n```bash\n> verus createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":0.01}\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"{\\\"address\\\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `decoderawtransaction \"hexstring\"`\nReturn a JSON object representing the serialized, hex-encoded transaction.#### Arguments:\n1. \"hex\"   (string, required) The transaction hex string#### Result:\n```json\n{\n \"txid\" : \"id\",    (string) The transaction id\n \"o",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]