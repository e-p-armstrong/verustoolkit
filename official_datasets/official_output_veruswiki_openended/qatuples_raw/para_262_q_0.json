[
    "What are the purposes and usage of the `z_getoperationresult`, `z_getoperationstatus`, and `z_gettotalbalance` commands in Verus, and how do they differ from each other?",
    "The `z_getoperationresult`, `z_getoperationstatus`, and `z_gettotalbalance` commands are all used to retrieve information about operations and balances in the Verus wallet. Here's a breakdown of each command:\n\n**`z_getoperationresult`**:\nThis command retrieves the result of a specific operation, which can be identified by its operation ID. If no operation ID is provided, the command will examine all operations known to the node. The result is a list of JSON objects, each containing information about an operation.\n\n**`z_getoperationstatus`**:\nThis command is similar to `z_getoperationresult`, but it also retrieves the status of the operation, including any associated result or error data. Like `z_getoperationresult`, it can be used to examine a specific operation or all operations known to the node.\n\n**`z_gettotalbalance`**:\nThis command returns the total value of funds stored in the node's wallet. It takes two optional arguments: `minconf`, which specifies the minimum number of confirmations required for a transaction to be included in the balance, and `includeWatchonly`, which determines whether to include balances from watch-only addresses.\n\nThe main difference between these commands is their purpose: `z_getoperationresult` and `z_getoperationstatus` are used to retrieve information about specific operations, while `z_gettotalbalance` is used to retrieve the total balance of the wallet.\n\nIt's also important to note that `z_gettotalbalance` has some limitations, such as potentially including balances from addresses for which only incoming viewing keys are available, which can lead to an inaccurate balance calculation.",
    "#### Arguments:\n1. \"operationid\"     (array, optional) A list of operation ids we are interested in. If not provided, examine all operations known to the node.#### Result:\n\"  [object, ...]\"   (array) A list of JSON objectsExamples:\n```bash\n> verus z_getoperationresult '[\"operationid\", ... ]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationresult\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_getoperationstatus '[\"operationid\", ... ]'`\nGet operation status and any associated result or error data. The operation will remain in memory.#### Arguments:\n1. \"operationid\"     (array, optional) A list of operation ids we are interested in. If not provided, examine all operations known to the node.#### Result:\n\"  [object, ...]\"   (array) A list of JSON objectsExamples:\n```bash\n> verus z_getoperationstatus '[\"operationid\", ... ]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationstatus\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_gettotalbalance ( minconf includeWatchonly )`\nReturn the total value of funds stored in the node's wallet.CAUTION: If the wallet contains any addresses for which it only has incoming viewing keys,\nthe returned private balance may be larger than the actual balance, because spends cannot\nbe detected with incoming viewing keys.#### Arguments:\n1. minconf     (numeric, optional, default=1) Only include private and transparent transactions confirmed at least this many times.\n2. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress' and 'z_importviewingkey')",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]