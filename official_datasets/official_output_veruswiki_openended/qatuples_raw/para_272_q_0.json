[
    "What is the `z_sendmany` command in Verus, and how does it work?",
    "The `z_sendmany` command in Verus is used to send multiple amounts of Verus coins to different addresses in a single transaction. This command allows you to specify the source address, the amounts and destinations, and optional parameters such as the minimum number of confirmations required and the transaction fee.\n\nThe command requires three main arguments:\n\n1. `fromaddress`: This is the source address of the funds to be sent. It can be a transparent address (taddr) or a private address (zaddr). You can also use the format `\"idname@:private\"` to specify a private address attached to an ID.\n\n2. `amounts`: This is an array of JSON objects representing the amounts to be sent. Each object in the array must contain the following:\n   * `address`: The destination address, which can be a taddr or zaddr, or a private address attached to an ID using the `\"idname@:private\"` format.\n   * `amount`: The numeric amount of Verus coins to be sent, in KMD (KPrivacyMind units).\n   * `memo`: An optional field for sending raw data represented in hexadecimal string format, only applicable if the destination address is a zaddr.\n\nThe command also has two optional parameters:\n\n1. `minconf`: This specifies the minimum number of confirmations required for the funds to be spent. If not specified, it defaults to 1.\n\n2. `fee`: This specifies the transaction fee amount to attach to this transaction. If not specified, it defaults to 0.0001 KMD.\n\nWhen the command is executed, it returns an `operationid` that can be used with the `z_getoperationstatus` command to check the status of the transaction.\n\nThe `z_sendmany` command can be used in the Verus command-line interface or through an RPC (Remote Procedure Call) interface using tools like `curl`. It provides a convenient way to send multiple amounts of Verus coins to different addresses in a single transaction, making it a useful tool for various use cases such as batch payments or dividend distributions.",
    "#### Arguments:\n1. \"fromaddress\"     (string, required) The taddr or zaddr to send the funds from. Also `\"idname@:private\"` can be used\n             to get the source from a private address attached to an ID.\n2. \"amounts\"       (array, required) An array of json objects representing the amounts to send.\n```json\n  [{\n   \"address\":address (string, required) The address is a taddr or zaddr. Also `\"idname@:private\"` can be used\n             to send to a private address attached to an ID.\n   \"amount\":amount  (numeric, required) The numeric amount in KMD is the value\n   \"memo\":memo    (string, optional) If the address is a zaddr, raw data represented in hexadecimal string format\n  }, ... ]\n```\n3. minconf        (numeric, optional, default=1) Only use funds confirmed at least this many times.\n4. fee          (numeric, optional, default=0.0001) The fee amount to attach to this transaction.#### Result:\n\"operationid\"     (string) An operationid to pass to z_getoperationstatus to get the result of the operation.Examples:\n```bash\n> verus z_sendmany \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" '[{\"address\": \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\" ,\"amount\": 5.0}]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_sendmany\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", [{\"address\": \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\" ,\"amount\": 5.0}]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]