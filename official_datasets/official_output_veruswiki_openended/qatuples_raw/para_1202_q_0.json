[
    "How do I define a PBaaS blockchain using Verus, including setting up the chain's properties, notaries, and nodes, as well as defining a bridge for the chain?",
    "To define a PBaaS blockchain using Verus, you need to create two JSON objects: one for the chain definition and another for the bridge definition. The chain definition includes properties such as the name of the chain, the currencies it supports, the conversion ratios between them, the block reward structure, the notaries that will secure the chain, and the nodes that will make up the network.\n\nHere's a breakdown of the chain definition properties:\n\n* `name`: The name of the chain, e.g. \"PBaaSChain\".\n* `options`: An integer value that determines various properties of the chain, in this case set to 330.\n* `currencies`: An array of currency tickers that the chain supports, e.g. [\"VRSCTEST\"].\n* `conversions`: An array of conversion ratios between the currencies, e.g. [1].\n* `eras`: An array of objects that define the block reward structure, including the initial reward, decay rate, halving interval, and era end.\n* `notaries`: An array of VerusIDs that will serve as notaries on the chain, e.g. [\"Notary1@\", \"Notary2@\", \"Notary3@\"].\n* `minnotariesconfirm`: The minimum number of notaries required to confirm a block, e.g. 2.\n* `nodes`: An array of objects that define the nodes on the network, including their network addresses and node identities.\n* `gatewayconvertername`: The name of the bridge that will be used to move funds on and off the chain, e.g. \"Bridge\".\n* `gatewayconverterissuance`: The initial issuance of the bridge's native token, e.g. 1000000.\n\nThe bridge definition has overridable defaults that include:\n\n* `currencies`: An array of currency tickers that the bridge supports, e.g. [\"VRSCTEST\", \"PBaaSChain\", \"USD\"].\n* `initialcontributions`: An array of initial liquidity contributions for each currency, e.g. [380228.12033701, 0, 1000000].\n* `initialsupply`: The initial supply of the bridge's native token, e.g. 3000000.\n\nTo create the PBaaS chain, you need to pass these definitions to the `definecurrency` command using Verus. The command would look like this:\n```json\n./verus -chain=vrsctest definecurrency '{\"chain definition JSON}\" '{\"bridge definition JSON}'\n```\nReplace the `chain definition JSON` and `bridge definition JSON` with the actual JSON objects you created.",
    "## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```",
    "./raw_text_input_wiki/release_notes.md"
]