[
    "What is the purpose of the `lockunspent` command in Verus, and how do you use it to lock and unlock specific transaction outputs?",
    "The `lockunspent` command in Verus is used to update the list of temporarily unspendable outputs. This command allows you to temporarily lock or unlock specific transaction outputs, which means they will not be chosen by automatic coin selection when spending VRSC.\n\nTo use the `lockunspent` command, you need to specify two arguments: `unlock` and `transactions`. `unlock` is a boolean value that determines whether to lock (false) or unlock (true) the specified transactions. `transactions` is a JSON array of objects, where each object contains the transaction id (`txid`) and the output number (`vout`).\n\nFor example, to lock an unspent transaction, you would use the following command:\n```bash\n> verus lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n```\nThis would lock the specified transaction output, making it unavailable for automatic coin selection.\n\nTo unlock the transaction again, you would use the same command with `unlock` set to `true`:\n```bash\n> verus lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n```\nYou can also list the locked transactions using the `listlockunspent` command:\n```bash\n> verus listlockunspent\n```\nAnd list all unspent transactions using the `listunspent` command:\n```bash\n> verus listunspent\n```\nNote that locks are stored in memory only, which means they are cleared when the node stops or fails.",
    "### `lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...]`\nUpdates list of temporarily unspendable outputs.\nTemporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\nA locked transaction output will not be chosen by automatic coin selection, when spending VRSC.\nLocks are stored in memory only. Nodes start with zero locked outputs, and the locked output list is always cleared (by virtue of process exit) when a node stops or fails.\nAlso see the listunspent call#### Arguments:\n1. unlock      (boolean, required) Whether to unlock (true) or lock (false) the specified transactions\n2. \"transactions\" (string, required) A json array of objects. Each object the txid (string) vout (numeric)\n```json\n   [      (json array of json objects)\n    {\n     \"txid\":\"id\",  (string) The transaction id\n     \"vout\": n     (numeric) The output number\n    }\n    ,...\n   ]\n```\n#### Result:\ntrue|false  (boolean) Whether the command was successful or notExamples:List the unspent transactions\n```bash\n> verus listunspent\n```\nLock an unspent transaction\n```bash\n> verus lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n```\nList the locked transactions\n```bash\n> verus listlockunspent\n```\nUnlock the transaction again\n```bash\n> verus lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]