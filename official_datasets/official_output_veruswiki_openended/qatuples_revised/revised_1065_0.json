[
    "How do you define a new currency and a PBaaS blockchain using the Verus command line, and what are the different properties that can be configured for each?",
    "Defining a new currency and a PBaaS blockchain using the Verus command line involves creating a JSON object that specifies the properties of the currency or blockchain. Let's break down the different components of defining a new currency and a PBaaS blockchain.\n\n**Defining a New Currency:**\nTo define a new currency, you need to use the `definecurrency` command with the Verus executable. The command takes a JSON object as an argument, which specifies the properties of the new currency. Here's an example of how to define a new currency called \"mycoin\":\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nThe properties that can be configured for a new currency include:\n\n* `name`: the name of the currency\n* `options`: an integer that specifies the behavior of the currency\n* `proofprotocol`: the proof protocol used to secure the currency (in this case, PROOF_CHAINID, which allows the controller of the chain ID to mint new coins)\n* `currencies`: an array of currencies that can be converted to the new currency\n* `minpreconversion`: an array of minimum amounts required to convert to the new currency\n* `initialsupply`: the initial supply of the new currency\n\n**Defining a PBaaS Blockchain:**\nTo define a PBaaS blockchain, you need to create a JSON object that specifies the properties of the blockchain. Here's an example of how to define a PBaaS blockchain:\n```json\n{\n  \"name\": \"PBaaSChain\",\n  \"options\": 330,\n  \"currencies\": [\n    \"VRSCTEST\"\n  ],\n  \"conversions\": [\n    1\n  ],\n  \"eras\": [\n    {\n      \"reward\": 1200000000,\n      \"decay\": 0,\n      \"halving\": 0,\n      \"eraend\": 0\n    }\n  ],\n  \"notaries\": [\n    \"Notary1@\",\n    \"Notary2@\",\n    \"Notary3@\"\n  ],\n  \"minnotariesconfirm\": 2,\n  \"nodes\": [\n    {\n      \"networkaddress\": \"111.111.111.111:10000\",\n      \"nodeidentity\": \"Node1@\"\n    },\n    {\n      \"networkaddress\": \"111.111.111.112:10000\",\n      \"nodeidentity\": \"Node2@\"\n    }\n  ],\n  \"gatewayconvertername\": \"Bridge\",\n  \"gatewayconverterissuance\": 1000000\n}\n```\nThe properties that can be configured for a PBaaS blockchain include:\n\n* `name`: the name of the blockchain\n* `options`: an integer that specifies the behavior of the blockchain\n* `currencies`: an array of currencies that can be used on the blockchain\n* `conversions`: an array of conversion ratios between the blockchain's native currency and other currencies\n* `eras`: an array of era definitions, each specifying the block reward, reward decay, halving, and end of the era\n* `notaries`: an array of VerusIDs that serve as notaries on the blockchain\n* `minnotariesconfirm`: the minimum number of notaries required to confirm a block\n* `nodes`: an array of node definitions, each specifying the network address and node identity\n* `gatewayconvertername`: the name of the bridge converter\n* `gatewayconverterissuance`: the initial issuance of the bridge converter's native token\n\nThe bridge definition also has overridable defaults, which can be specified separately:\n```json\n{\n  \"currencies\": [\n    \"VRSCTEST\",\n    \"PBaaSChain\",\n    \"USD\"\n  ],\n  \"initialcontributions\": [\n    380228.12033701,\n    0,\n    1000000\n  ],\n  \"initialsupply\": 3000000\n}\n```\nThese properties specify the currencies supported by the bridge, the initial contributions to the bridge, and the initial supply of the bridge's native token.",
    "```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```",
    "./raw_text_input_wiki/release_notes.md"
]