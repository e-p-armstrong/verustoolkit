[
    "How do I manage my private keys and wallet in Verus, including dumping private keys, dumping the wallet, and encrypting the wallet?",
    "To manage your private keys and wallet in Verus, you can use several commands. Let's go through each of them:\n\n**Dumping Private Keys:**\nYou can dump a private key using the `dumpprivkey` command. This command takes a single argument, the address for which you want to dump the private key. The result is a string representing the private key.\n\nHere's an example of how to dump a private key using the `verus` command:\n```\nverus dumpprivkey \"myaddress\"\n```\nYou can also use the JSON-RPC API to dump a private key. Here's an example of how to do it using `curl`:\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n**Dumping the Wallet:**\nYou can dump the wallet using the `dumpwallet` command. This command takes two arguments: the filename to which the wallet will be dumped, and an optional boolean argument `omitemptytaddresses`. If `omitemptytaddresses` is true, only addresses with indexed UTXOs or that control IDs in the wallet will be exported.\n\nHere's an example of how to dump the wallet using the `verus` command:\n```\nverus dumpwallet \"test\"\n```\nYou can also use the JSON-RPC API to dump the wallet. Here's an example of how to do it using `curl`:\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n**Encrypting the Wallet:**\nTo encrypt the wallet, you can use the `encryptwallet` command. This command takes a single argument, the passphrase to use for encryption. Note that this command is disabled by default, and you need to enable it by restarting `verusd` with the `-experimentalfeatures` and `-developerencryptwallet` command-line options, or by adding these two lines to the `VRSC.conf` file:\n```\nexperimentalfeatures=1\ndeveloperencryptwallet=1\n```\nOnce the wallet is encrypted, you need to set the passphrase before making any calls that interact with private keys, such as sending or signing. You can do this using the `walletpassphrase` call. After setting the passphrase, you need to lock the wallet using the `walletlock` call. If the wallet is already encrypted, you can change the passphrase using the `walletpassphrasechange` call.\n\nNote that encrypting the wallet will shut down the server.",
    "#### Result:\n\"key\"     (string) The private keyExamples:\n```bash\n> verus dumpprivkey \"myaddress\"\n> verus importprivkey \"mykey\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `dumpwallet \"filename\" (omitemptytaddresses)`\nDumps taddr wallet keys in a human-readable format. Overwriting an existing file is not permitted.#### Arguments:\n1. \"filename\"      (string, required) The filename, saved in folder set by verusd -exportdir option\n2. \"omitemptytaddresses\" (boolean, optional) Defaults to false. If true, export only addresses with indexed UTXOs or that control IDs in the wallet (do not use this option without being sure that all addresses of interest are included)#### Result:\n\"path\"      (string) The full path of the destination fileExamples:\n```bash\n> verus dumpwallet \"test\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `encryptwallet \"passphrase\"`\nWARNING: encryptwallet is disabled.\nTo enable it, restart verusd with the `-experimentalfeatures` and `-developerencryptwallet` commandline options, or add these two lines to the VRSC.conf file:\n```\nexperimentalfeatures=1\ndeveloperencryptwallet=1\n```\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\nAfter this, any calls that interact with private keys such as sending or signing will require the passphrase to be set prior the making these calls.\nUse the walletpassphrase call for this, and then walletlock call.\nIf the wallet is already encrypted, use the walletpassphrasechange call.\nNote that this will shutdown the server.",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]