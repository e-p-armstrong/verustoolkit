[
    "What are the `getidentityhistory`, `getidentitytrust`, and `listidentities` commands in Verus, and how do they work?",
    "The `getidentityhistory`, `getidentitytrust`, and `listidentities` commands in Verus are used to manage and retrieve information about identities on the Verus network.\n\n**`getidentityhistory` Command:**\nThe `getidentityhistory` command is used to retrieve the history of a specific identity on the Verus network. It takes one argument, the identity name, and returns the history of that identity. The command can be run using the Verus command-line interface or through a JSON-RPC call using `curl`. The result is a JSON object containing the history of the specified identity.\n\n**`getidentitytrust` Command:**\nThe `getidentitytrust` command is used to retrieve the trust ratings for a list of identities on the Verus network. It takes an optional argument, a list of identity names, and returns the trust ratings for those identities. If no identities are specified, it returns the trust ratings for all identities. The command can be run using the Verus command-line interface or through a JSON-RPC call using `curl`. The result is a JSON object containing the trust ratings for the specified identities, as well as the identity trust mode.\n\n**`listidentities` Command:**\nThe `listidentities` command is used to retrieve a list of identities on the Verus network, along with their associated information. It takes three optional arguments: `includecanspend`, `includecansign`, and `includewatchonly`, which determine the types of identities to include in the result. The command can be run using the Verus command-line interface or through a JSON-RPC call using `curl`. The result is a JSON array containing objects with information about each identity, including its version, flags, primary addresses, minimum signatures required, and identity address.\n\nThese commands are useful for managing and retrieving information about identities on the Verus network, and can be used to build applications and services that interact with the Verus ecosystem.",
    "#### Examples:\n```bash\n> verus getidentityhistory \"name@\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentityhistory\", \"params\": [\"name@\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getidentitytrust '[\"id\",...]'`\n#### Arguments:\n```json\n\"[\"id\",...]\"                    (strarray, optional) if specified, only returns rating values for specified IDs, otherwise all\n```\n#### Result:\n```json\n{\n \"setratings\":{\"id\":JSONRatingObject,...},    (jsonobj) an ID/ratings key/value object\n \"identitytrustmode\":<n>              (int) 0 = no restriction on sync, 1 = only sync to IDs rated approved, 2 = sync to all IDs but those on block list\n}\n```\n####Examples:\n```bash\n> verus getidentitytrust '[\"id\",...]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentitytrust\", \"params\": ['[\"id\",...]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `listidentities (includecanspend) (includecansign) (includewatchonly)`\n#### Arguments:\n  \"includecanspend\"  (bool, optional, default=true)  Include identities for which we can spend/authorize\n  \"includecansign\"   (bool, optional, default=true)  Include identities that we can only sign for but not spend\n  \"includewatchonly\"  (bool, optional, default=false)  Include identities that we can neither sign nor spend, but are either watched or are co-signers with us#### Result:\n```json\n[\n {\n  \"identity\": {\n   \"version\": n,          (integer) version number\n   \"flags\": n,           (integer) flag\n   \"primaryaddresses\": [\n    \"xxxx\"            (text) Public address that controls this ID\n   ],\n   \"minimumsignatures\": n,     (integer) Amount of signatures required to spend UTXOs on this ID\n   \"identityaddress\": \"xxxx\",  ",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]