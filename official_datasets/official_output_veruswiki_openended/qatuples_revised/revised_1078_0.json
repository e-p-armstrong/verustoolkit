[
    "What are the parameters that can be defined when creating a new currency or blockchain using Verus, and what do they control?",
    "When creating a new currency or blockchain using Verus, there are several parameters that can be defined to customize its behavior. These parameters control various aspects of the currency or blockchain, such as its initial supply, pre-allocation, block time, notarization period, and more.\n\nHere's a breakdown of the parameters:\n\n**Initial Supply and Pre-Conversion**: \nThe `initialsupply` parameter sets the total supply of the currency after the conversion of contributions, but before pre-allocation. The `prelaunchcarveout` parameter specifies the percentage of pre-converted amounts from each reserve currency that will be allocated to specific identities.\n\n**Pre-Allocation**:\nThe `preallocations` parameter is a list of identities and amounts that will be allocated from the initial supply before the currency is launched.\n\n**Gateway Converter**:\nIf the new currency is a PBaaS chain, the `gatewayconvertername` parameter specifies the name of the co-launched gateway converter currency.\n\n**Block Time and Averaging Window**:\nThe `blocktime` parameter sets the target time in seconds to average between blocks, with a default of 60 seconds. The `powaveragingwindow` parameter specifies the total number of blocks to look back when averaging for the Difficulty Adjustment Algorithm (DAA), with a default of 45 blocks.\n\n**Notarization Period**:\nThe `notarizationperiod` parameter sets the minimum period that miners and stakers must wait before posting a new notarization to the chain, with a default of 10 minutes at any block time.\n\n**Eras**:\nThe `eras` parameter is an array of objects that specify the data for each era of the currency's lifecycle. Each era object can contain the following parameters:\n\n* `reward`: the native initial block reward for each period\n* `decay`: the reward decay for each era\n* `halving`: the halving period for each era\n* `eraend`: the ending block of each era\n\n**Nodes**:\nThe `nodes` parameter is an array of objects that specify up to 5 nodes that can be used to connect to the blockchain. Each node object can contain the following parameters:\n\n* `networkaddress`: the internet, TOR, or other supported address for the node\n* `nodeidentity`: the published node identity\n\nBy defining these parameters, users can customize their new currency or blockchain to suit their specific needs and use cases.",
    " than 100%, discount on final price at launch\n \"initialsupply\" : \"xx.xx\"    (value, required for fractional) supply after conversion of contributions, before preallocation\n \"prelaunchcarveout\" : \"0.xx\",  (value, optional) identities and % of pre-converted amounts from each reserve currency\n \"preallocations\" : \"[{\"identity\":xx.xx}..]\", (list, optional) list of identities and amounts from pre-allocation\n \"gatewayconvertername\" : \"name\", (string, optional) if this is a PBaaS chain, this names a co-launched gateway converter currency\n \"blocktime\"     : n,    (int, optional) target time in seconds to average between blocks (default 60 seconds)\n \"powaveragingwindow\" : n,    (int, optional) total number of blocks to look back when averaging for DAA (default 45 blocks)\n \"notarizationperiod\" : n,    (int, optional) min period miners/stakers must wait to post new notarization to chain (default 10 min at any blocktime)\n \"eras\"     : \"objarray\",  (array, optional) data specific to each era, maximum 3\n {\n  \"reward\"   : n,       (int64, required) native initial block rewards in each period\n  \"decay\"   : n,       (int64, optional) reward decay for each era\n  \"halving\"  : n,       (int,  optional) halving period for each era\n  \"eraend\"   : n,       (int,  optional) ending block of each era\n}\n\"nodes\"     : \"[obj, ..]\", (objectarray, optional) up to 5 nodes that can be used to connect to the blockchain\n [{\n  \"networkaddress\" : \"ip:port\", (string, optional) internet, TOR, or other supported address for node\n  \"nodeidentity\" : \"name@\",   (string, optional) published node identity\n }, .. ]\n}\n```\n#### Result:\n```json\n{\n \"txid\" : \"transactionid\",    (string) The transaction id\n \"tx\"  : \"json\",         (json)  The transaction decoded as a transaction\n \"hex\" : \"data\"         ",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]