[
    "What are the various commands in Verus that enable the creation of a multisig address, estimation of transaction fees, estimation of transaction priority, and invalidation of a block, and how do these commands work?",
    "Verus provides several commands that facilitate advanced transaction management and wallet functionality. These commands include `createmultisig`, `estimatefee`, `estimatepriority`, and `invalidateblock`. Let's break down each of these commands and their usage.\n\n**Create Multisig Address (createmultisig)**\nThe `createmultisig` command creates a new multisig address that requires a specified number of signatures from a list of provided keys or addresses. This command takes two arguments: `nrequired` and `keys`. `nrequired` is the number of required signatures, and `keys` is a JSON array of Komodo addresses or hex-encoded public keys. The command returns a JSON object containing the new multisig address and the hex-encoded redemption script.\n\nExample:\n```bash\n> verus createmultisig 2 \"[\\\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\\\",\\\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\\\"]\"\n```\n**Estimate Transaction Fee (estimatefee)**\nThe `estimatefee` command estimates the approximate fee per kilobyte required for a transaction to begin confirmation within a specified number of blocks. This command takes one argument, `nblocks`, which represents the number of blocks. The command returns an estimated fee-per-kilobyte value. If there are not enough transactions and blocks to make an estimate, the minimum fee is returned.\n\nExample:\n```bash\n> verus estimatefee 6\n```\n**Estimate Transaction Priority (estimatepriority)**\nThe `estimatepriority` command estimates the approximate priority a zero-fee transaction needs to begin confirmation within a specified number of blocks. This command also takes one argument, `nblocks`. The command returns an estimated priority value. If there are not enough transactions and blocks to make an estimate, -1.0 is returned.\n\nExample:\n```bash\n> verus estimatepriority 6\n```\n**Invalidate Block (invalidateblock)**\nThe `invalidateblock` command permanently marks a block as invalid, as if it violated a consensus rule. This command takes one argument, the block hash.\n\nExample:\n```bash\n> verus invalidateblock \"block_hash\"\n```\nThese commands provide advanced functionality for managing transactions and wallets in Verus. By understanding how to use these commands, developers and users can create more complex and secure transactions, as well as optimize their transaction fees and priority.",
    "#### Arguments:\n1. nrequired  (numeric, required) The number of required signatures out of the n keys or addresses.\n2. \"keys\"    (string, required) A json array of keys which are Komodo addresses or hex-encoded public keys\n```json\n   [\n    \"key\"  (string) Komodo address or hex-encoded public key\n    ,...\n   ]\n```\n#### Result:\n```json\n{\n \"address\":\"multisigaddress\", (string) The value of the new multisig address.\n \"redeemScript\":\"script\"    (string) The string value of the hex-encoded redemption script.\n}\n```\nExamples:\nCreate a multisig address from 2 addresses\n```bash\n> verus createmultisig 2 \"[\\\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\\\",\\\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\\\"]\"\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\\\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\\\",\\\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `estimatefee nblocks`\nEstimates the approximate fee per kilobyte needed for a transaction to begin confirmation within nblocks blocks.#### Arguments:\n1. nblocks   (numeric)#### Result:\nn :  (numeric) estimated fee-per-kilobyteminimum fee is returned if not enough transactions and blocks have been observed to make an estimate.Example:\n```bash\n> verus estimatefee 6\n```### `estimatepriority nblocks`\nEstimates the approximate priority a zero-fee transaction needs to begin confirmation within nblocks blocks.#### Arguments:\n1. nblocks   (numeric)#### Result:\nn :  (numeric) estimated priority-1.0 is returned if not enough transactions and\nblocks have been observed to make an estimate.Example:\n```bash\n> verus estimatepriority 6\n```### `invalidateblock \"hash\"`\nPermanently marks a block as invalid, as if it violated a consensus rule.",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]