[
    "How can I set up and run the Verus Daemon on a Linux system, using Tmux for background thread management and optimizing the number of threads for my processor?",
    "To set up and run the Verus Daemon on a Linux system, you'll need to install the necessary dependencies and configure your system to run the daemon efficiently. Here's a step-by-step guide to help you get started:\n\n**Step 1: Install dependencies**\nFirst, you'll need to install `g++-multilib` and `tmux` on your system. `g++-multilib` is a compiler package that allows you to compile code for multiple architectures, while `tmux` is a terminal multiplexer that enables you to run multiple threads in the background. You can install these packages using the following commands:\n```\nsudo apt-get install g++-multilib -y\nsudo apt-get install tmux -y\n```\n**Step 2: Start Tmux**\nOnce you've installed `tmux`, you can start it by running the following command:\n```\ntmux\n```\nThis will launch a new `tmux` session, which will allow you to manage multiple threads in the background.\n\n**Step 3: Launch Verus Daemon**\nNext, you'll need to launch the Verus Daemon. You can do this by running the following command:\n```\n~/verus-cli/verusd -gen -genproclimit\n```\nThis command will launch the Verus Daemon with the default number of threads. If you want to specify a custom number of threads, you can add the `-genproclimit` option followed by the number of threads you want to use. For example:\n```\n~/verus-cli/verusd -gen -genproclimit=24\n```\nThis command will launch the Verus Daemon with 24 threads.\n\n**Step 4: Detach Tmux**\nOnce the Verus Daemon is running, you can detach the `tmux` session by pressing `[ctrl]&b d`. This will allow you to continue running the daemon in the background while you perform other tasks.\n\n**Tips and Optimizations**\nWhen running the Verus Daemon, it's essential to optimize the number of threads for your processor. A good rule of thumb is to set the number of threads equal to the number of cores on your processor, or double that if your processor supports hyper-threading. This will help ensure that the daemon runs efficiently and makes the most of your system's resources.\n\nBy following these steps, you should be able to set up and run the Verus Daemon on your Linux system, using `tmux` to manage background threads and optimize performance.",
    "g++-multilib -y`\n Install Tmux a terminal multiplexer with which you can run threads in the background see https://en.wikipedia.org/wiki/Tmux\n `sudo apt-get install tmux -y`\n Start tmux:\n `tmux`\n Launch Verus Daemon with or without number of threads\n (usually number of threads equals number of cores or double of that if the processor support hyper threading well)\n `~/verus-cli/verusd -gen -genproclimit`\n `~/verus-cli/verusd -gen -genproclimit=24`\n Once mining is operational \u2013 again this may take some time \u2013\n you\u2019ll see: 256 mega hashes complete - working\n then detach tmux\n`[ctrl]&b d`",
    "./raw_text_input_wiki/faq-lin01_install_linux_cli.md"
]