[
    "How do I define a new currency and a PBaaS blockchain using the Verus command line tool, and what are the implications of setting the proof protocol to PROOF_CHAINID?",
    "Defining a new currency and a PBaaS blockchain using the Verus command line tool involves creating a JSON object that describes the properties of the currency or blockchain. This JSON object is then passed to the `definecurrency` command to create the new currency or blockchain.\n\n**Defining a New Currency:**\nTo define a new currency, you create a JSON object that describes the currency's properties, such as its name, options, proof protocol, currencies it can be converted to, and initial supply. For example:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn this example, we define a new currency called \"mycoin\" with options set to 97, proof protocol set to 2 (PROOF_CHAINID), and currencies it can be converted to set to VRSCTEST and gold. The initial supply of mycoin is set to 20,000 units.\n\n**Implications of Setting Proof Protocol to PROOF_CHAINID:**\nWhen the proof protocol is set to 2 (PROOF_CHAINID), it means that the controller of the chain ID can mint new coins. This allows the controller to create new coins and add them to the supply of mycoin. For example:\n```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\nThis command mints 10,000 new mycoin units and sends them to the address \"mike@\".\n\n**Defining a PBaaS Blockchain:**\nTo define a PBaaS blockchain, you create a JSON object that describes the blockchain's properties, such as its name, options, currencies, conversions, eras, notaries, nodes, and gateway converter. For example:\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThis JSON object defines a PBaaS blockchain called \"PBaaSChain\" with options set to 330, currencies set to VRSCTEST, conversions set to 1, and eras defined with a reward, decay, halving, and era end. The notaries are set to Notary1@, Notary2@, and Notary3@, with a minimum of 2 notaries required to confirm a block. The nodes are set to Node1@ and Node2@ with their respective network addresses. The gateway converter is set to \"Bridge\" with an issuance of 1,000,000 units.\n\nThe bridge definition has overridable defaults, which can be set as follows:\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```\nThis JSON object sets the currencies to VRSCTEST, PBaaSChain, and USD, with initial contributions set to 380,228.12 VRSCTEST, 0 PBaaSChain, and 1,000,000 USD. The initial supply is set to 3,000,000 units.",
    "```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```",
    "./raw_text_input_wiki/release_notes.md"
]