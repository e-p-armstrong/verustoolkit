[
    "How do I use the `refundfailedlaunch` and `sendcurrency` commands in Verus to manage transactions and refunds on a chain?",
    "The `refundfailedlaunch` and `sendcurrency` commands are two essential tools in Verus for managing transactions and refunds on a chain.\n\n**RefundFailedLaunch Command:**\nThe `refundfailedlaunch` command is used to refund any funds sent to a chain if they are eligible for refund. This command attempts to refund all transactions for all contributors. To use this command, you need to specify the `currencyid` argument, which is the hex or chain name of the chain to refund contributions to.\n\nHere's an example of how to use the `refundfailedlaunch` command:\n```bash\nverus refundfailedlaunch \"currencyid\"\n```\nAlternatively, you can use the `curl` command to send a JSON-RPC request to the Verus daemon:\n```bash\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"refundfailedlaunch\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n**SendCurrency Command:**\nThe `sendcurrency` command is used to send one or many Verus outputs to one or many addresses on the same or another chain. This command sources funds automatically from the current wallet, which must be present. If a `fromaddress` is specified, all funds will be taken from that address; otherwise, funds may come from any source set of UTXOs controlled by the wallet.\n\nHere's an example of how to use the `sendcurrency` command:\n```bash\nverus sendcurrency \"fromaddress\" '[{\"address\":...,\"amount\":...},...]'\n```\nThe arguments for the `sendcurrency` command are:\n\n1. `fromaddress`: The VerusID or address to send the funds from. Wildcards such as `\"*\"` and `\"R*\"` are supported, as well as specifying a private address attached to an ID using `\"idname@:private\"`.\n2. `[{\"address\":...,\"amount\":...},...]`: An array of objects specifying the addresses and amounts to send to.\n3. `(minconfs)`: The minimum number of confirmations required for the transaction to be considered valid.\n4. `(feeamount)`: The fee amount to be paid for the transaction.\n5. `(returntxtemplate)`: An optional template for the transaction output.\n\nBy using these two commands, you can effectively manage transactions and refunds on a chain in Verus.",
    "### `refundfailedlaunch \"currencyid\"`\nRefunds any funds sent to the chain if they are eligible for refund.\nThis attempts to refund all transactions for all contributors.\n#### Arguments:\n```\n\"currencyid\"      (hex or chain name, required) the chain to refund contributions to\n```\n#### Result:\nExamples:\n```bash\n> verus refundfailedlaunch \"currencyid\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"refundfailedlaunch\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `sendcurrency \"fromaddress\" '[{\"address\":... ,\"amount\":...},...]' (minconfs) (feeamount) (returntxtemplate)`\nThis sends one or many Verus outputs to one or many addresses on the same or another chain.\nFunds are sourced automatically from the current wallet, which must be present, as in sendtoaddress.\nIf \"fromaddress\" is specified, all funds will be taken from that address, otherwise funds may come from any source set of UTXOs controlled by the wallet.\n#### Arguments:\n1. \"fromaddress\"       (string, required) The VerusID or address to send the funds from. \"\\*\", \"R\\*\" and \"i\\*\" wildcards are supported. Also `\"idname@:private\"` can be used to source from a balance of a private address attached to ",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]