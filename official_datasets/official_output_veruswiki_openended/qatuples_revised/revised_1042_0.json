[
    "What is the structure of a block template in Verus, and what information does it contain?",
    "In Verus, a block template is a data structure that contains information about a potential block in the blockchain. It provides the necessary details for a miner to create a valid block. The block template consists of several components, which are:\n\n1. **Transactions**: An array of non-coinbase transactions that should be included in the next block. Each transaction is represented as a JSON object with several properties:\n\t* `data`: The transaction data encoded in hexadecimal.\n\t* `hash`: The transaction hash/id encoded in little-endian hexadecimal.\n\t* `depends`: An array of numbers representing the transactions that must be present in the final block if this one is.\n\t* `fee`: The difference in value between transaction inputs and outputs (in Satoshis).\n\t* `sigops`: The total number of SigOps, as counted for purposes of block limits.\n\t* `required`: A boolean indicating whether this transaction must be in the final block.\n2. **Coinbase Transaction**: A JSON object containing information about the coinbase transaction.\n3. **Target**: The hash target.\n4. **Mintime**: The minimum timestamp appropriate for the next block time in seconds since the epoch (January 1, 1970, GMT).\n5. **Mutable**: An array of strings indicating the ways the block template may be changed, such as 'time', 'transactions', or 'prevblock'.\n6. **Noncerange**: A range of valid nonces.\n7. **Sigoplimit**: The limit of sigops in blocks.\n8. **Sizelimit**: The limit of the block size.\n\nThis information is essential for miners to create a valid block that meets the requirements of the Verus network. By providing this data, the block template enables miners to construct a block that is compatible with the network's rules and can be added to the blockchain.",
    "tents of non-coinbase transactions that should be included in the next block\n   {\n     \"data\" : \"xxxx\",      (string) transaction data encoded in hexadecimal (byte-for-byte)\n     \"hash\" : \"xxxx\",      (string) hash/id encoded in little-endian hexadecimal\n     \"depends\" : [        (array) array of numbers\n       n            (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\n       ,...\n     ],\n     \"fee\": n,          (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\n     \"sigops\" : n,        (numeric) total number of SigOps, as counted for purposes of block limits; if key is not present, sigop count is unknown and clients MUST NOT assume there aren't any\n     \"required\" : true|false   (boolean) if provided and true, this transaction must be in the final block\n   }\n   ,...\n ],\n \"coinbasetxn\" : { ... },      (json object) information for coinbase transaction\n \"target\" : \"xxxx\",         (string) The hash target\n \"mintime\" : xxx,          (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)\n \"mutable\" : [           (array of string) list of ways the block template may be changed\n   \"value\"             (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\n   ,...\n ],\n \"noncerange\" : \"00000000ffffffff\", (string) A range of valid nonces\n \"sigoplimit\" : n,         (numeric) limit of sigops in blocks\n \"sizeli",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]