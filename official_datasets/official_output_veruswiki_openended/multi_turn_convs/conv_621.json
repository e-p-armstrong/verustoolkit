[
    "## Conversation that answers the provided questions:\n**User:**\nI'm trying to work with PBaaS chains on the Verus network. Can you explain how to define a PBaaS chain using the `definecurrency` command, export an ID to a PBaaS chain, and sign transactions from multi-signature IDs on the Verus network?\n\n**AI Assistant:**\nI'd be happy to walk you through that. Here's a step-by-step guide on how to define a PBaaS chain, export an ID to a PBaaS chain, and sign transactions from multi-signature IDs on the Verus network.\n\n**Defining a PBaaS Chain:**\nTo define a PBaaS chain, you need to use the `definecurrency` command with two JSON objects: one for the PBaaS chain definition and another for the overridable defaults of the bridge. Here's the format:\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\nThis command defines a new PBaaS chain named `PBaaSChain` with the specified properties.\n\n**Exporting an ID to a PBaaS Chain:**\nTo export an ID to a PBaaS chain, you need to use the `sendcurrency` command with the `exportto` and `exportid` options. Here's the format:\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```\nThis command exports the ID `IDNAME@` to the PBaaS chain `PBaaSChainName`.\n\n**Signing Transactions from Multi-Signature IDs:**\nTo sign transactions from multi-signature IDs, you need to follow these steps:\n\n1. **Create a transaction:** Use the `sendcurrency` command to create a transaction from the multi-signature ID.\n```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n```\n2. **Get the raw transaction data:** Use the `z_getoperationstatus` command to get the raw hex transaction data.\n```\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\n3. **Sign the transaction:** Take the raw hex transaction data to each additional wallet containing the additional signing addresses/IDs and use the `signrawtransaction` command to sign the transaction.\n```\nverus signrawtransaction <raw_hex_transaction>\n```\n4. **Broadcast the signed transaction:** After the last necessary signature is applied, broadcast the signed transaction on the network using the `sendrawtransaction` command.\n```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```\nBy following these steps, you can define a PBaaS chain, export an ID to a PBaaS chain, and sign transactions from multi-signature IDs on the Verus network. Do you have any further questions about these processes?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "Explain how to define a PBaaS chain using the `definecurrency` command, export an ID to a PBaaS chain, and sign transactions from multi-signature IDs on the Verus network?",
            "Here's a step-by-step guide on how to define a PBaaS chain, export an ID to a PBaaS chain, and sign transactions from multi-signature IDs on the Verus network.\n\n**Defining a PBaaS Chain:**\nTo define a PBaaS chain, you need to use the `definecurrency` command with two JSON objects: one for the PBaaS chain definition and another for the overridable defaults of the bridge. Here's the format:\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\nThis command defines a new PBaaS chain named `PBaaSChain` with the specified properties.\n\n**Exporting an ID to a PBaaS Chain:**\nTo export an ID to a PBaaS chain, you need to use the `sendcurrency` command with the `exportto` and `exportid` options. Here's the format:\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```\nThis command exports the ID `IDNAME@` to the PBaaS chain `PBaaSChainName`.\n\n**Signing Transactions from Multi-Signature IDs:**\nTo sign transactions from multi-signature IDs, you need to follow these steps:\n\n1. **Create a transaction:** Use the `sendcurrency` command to create a transaction from the multi-signature ID.\n```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n```\n2. **Get the raw transaction data:** Use the `z_getoperationstatus` command to get the raw hex transaction data.\n```\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\n3. **Sign the transaction:** Take the raw hex transaction data to each additional wallet containing the additional signing addresses/IDs and use the `signrawtransaction` command to sign the transaction.\n```\nverus signrawtransaction <raw_hex_transaction>\n```\n4. **Broadcast the signed transaction:** After the last necessary signature is applied, broadcast the signed transaction on the network using the `sendrawtransaction` command.\n```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```\nBy following these steps, you can define a PBaaS chain, export an ID to a PBaaS chain, and sign transactions from multi-signature IDs on the Verus network.",
            "Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n#### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]