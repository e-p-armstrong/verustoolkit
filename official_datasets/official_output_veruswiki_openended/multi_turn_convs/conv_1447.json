[
    "## Conversation that answers the provided questions:\n**User:**\nHey, I'm trying to get some information about specific addresses in Verus. Can you explain how to use the `getaddressbalance` and `getaddressdeltas` commands to retrieve information about addresses, such as their current balance and changes to their balance over time?\n\n**AI Assistant:**\nThe `getaddressbalance` and `getaddressdeltas` commands in Verus are super useful for getting information about specific addresses.\n\nLet's start with the `getaddressbalance` command. This command returns the current balance of one or more addresses in satoshis, as well as the total number of satoshis received by the address, including change. The command takes a JSON object with a single property, `addresses`, which is an array of base58check encoded addresses.\n\nThe result is a JSON object with two properties: `balance`, which is the current balance in satoshis, and `received`, which is the total number of satoshis received by the address.\n\nYou can use the command in the Verus CLI by running `verus getaddressbalance '{\"addresses\": [\"address1\", \"address2\",...]}']`, replacing `address1`, `address2`, etc. with the base58check encoded addresses you want to query.\n\nAlternatively, you can use the command with `curl` by sending a JSON-RPC request to the Verus server. The request should include the `jsonrpc` version, an `id` for the request, the `method` set to `getaddressbalance`, and the `params` set to a JSON object with the `addresses` property.\n\nNow, let's move on to the `getaddressdeltas` command. This command returns all changes for one or more addresses over a specific range of block heights. The command takes a JSON object with several properties: `addresses`, which is an array of base58check encoded addresses; `start` and `end`, which specify the range of block heights; `chainInfo`, which is a boolean that determines whether to include chain information in the results; `friendlynames`, which is a boolean that determines whether to include additional friendly names for currency i-addresses; and `verbosity`, which is a number that determines the level of detail in the output.\n\nThe result is an array of JSON objects, each representing a change to an address. Each object has several properties: `satoshis`, which is the difference in satoshis; `txid`, which is the related transaction ID; `index`, which is the related input or output index; `height`, which is the block height; and `address`, which is the base58check encoded address.\n\nYou can use the command in the Verus CLI by running `verus getaddressdeltas '{\"addresses\": [\"address1\", \"address2\",...], \"start\": start_height, \"end\": end_height,...]']`, replacing `address1`, `address2`, etc. with the base58check encoded addresses you want to query, and `start_height` and `end_height` with the range of block heights you want to query.\n\nAlternatively, you can use the command with `curl` by sending a JSON-RPC request to the Verus server. The request should include the `jsonrpc` version, an `id` for the request, the `method` set to `getaddressdeltas`, and the `params` set to a JSON object with the required properties.\n\nDo you have any more questions about these commands, or would you like more information on how to use them?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "How do I use the `getaddressbalance` and `getaddressdeltas` commands in Verus to retrieve information about addresses, such as their current balance and changes to their balance over time?",
            "The `getaddressbalance` and `getaddressdeltas` commands in Verus allow you to retrieve information about specific addresses, such as their current balance and changes to their balance over time.\n\n**`getaddressbalance` Command:**\nThe `getaddressbalance` command returns the current balance of one or more addresses in satoshis, as well as the total number of satoshis received by the address, including change. The command takes a JSON object with a single property, `addresses`, which is an array of base58check encoded addresses.\n\nThe result is a JSON object with two properties: `balance`, which is the current balance in satoshis, and `received`, which is the total number of satoshis received by the address.\n\nYou can use the command in the Verus CLI by running `verus getaddressbalance '{\"addresses\": [\"address1\", \"address2\",...]}']`, replacing `address1`, `address2`, etc. with the base58check encoded addresses you want to query.\n\nAlternatively, you can use the command with `curl` by sending a JSON-RPC request to the Verus server. The request should include the `jsonrpc` version, an `id` for the request, the `method` set to `getaddressbalance`, and the `params` set to a JSON object with the `addresses` property.\n\n**`getaddressdeltas` Command:**\nThe `getaddressdeltas` command returns all changes for one or more addresses over a specific range of block heights. The command takes a JSON object with several properties: `addresses`, which is an array of base58check encoded addresses; `start` and `end`, which specify the range of block heights; `chainInfo`, which is a boolean that determines whether to include chain information in the results; `friendlynames`, which is a boolean that determines whether to include additional friendly names for currency i-addresses; and `verbosity`, which is a number that determines the level of detail in the output.\n\nThe result is an array of JSON objects, each representing a change to an address. Each object has several properties: `satoshis`, which is the difference in satoshis; `txid`, which is the related transaction ID; `index`, which is the related input or output index; `height`, which is the block height; and `address`, which is the base58check encoded address.\n\nYou can use the command in the Verus CLI by running `verus getaddressdeltas '{\"addresses\": [\"address1\", \"address2\",...], \"start\": start_height, \"end\": end_height,...]']`, replacing `address1`, `address2`, etc. with the base58check encoded addresses you want to query, and `start_height` and `end_height` with the range of block heights you want to query.\n\nAlternatively, you can use the command with `curl` by sending a JSON-RPC request to the Verus server. The request should include the `jsonrpc` version, an `id` for the request, the `method` set to `getaddressdeltas`, and the `params` set to a JSON object with the required properties.",
            "#### Arguments:\n```json\n{\n \"addresses\"\n  [\n   \"address\" (string) The base58check encoded address\n   ,...\n  ]\n}\n```\n#### Result:\n```json\n{\n \"balance\" (string) The current balance in satoshis\n \"received\" (string) The total number of satoshis received (including change)\n}\n```\nExamples:\n```bash\n> verus getaddressbalance '{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressbalance\", \"params\": [{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getaddressdeltas`\nReturns all changes for an address (requires addressindex to be enabled).#### Arguments:\n```json\n{\n \"addresses\"\n  [\n   \"address\" (string) The base58check encoded address\n   ,...\n  ]\n \"start\" (number) The start block height\n \"end\" (number) The end block height\n \"chainInfo\" (boolean) Include chain info in results, only applies if start and end specified\n \"friendlynames\" (boolean) Include additional array of friendly names keyed by currency i-addresses\n \"verbosity\" (number) (default == 0), if 1, include output information for spends, including all reserve amounts and destinations\n}\n```\n#### Result:\n```json\n[\n {\n  \"satoshis\" (number) The difference of satoshis\n  \"txid\" (string) The related txid\n  \"index\" (number) The related input or output index\n  \"height\" (number) The block height\n  \"address\" (string) The base58check encoded address\n }\n]\n```\nExamples:\n```bash\n> verus getaddressdeltas '{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressdeltas\", \"params\": [{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ]
]