[
    "## Conversation that answers the provided questions:\n**User:**\nI'm having some trouble with my testnet and I'm not sure how to reset it. Also, I need to export an ID to a PBaaS chain and sign transactions from multi-signature IDs on both testnet and mainnet. Can you walk me through the steps for each of these tasks?\n\n**AI Assistant:**\nI'd be happy to help you with that!\n\nLet's start with resetting your testnet. To do this, you'll need to delete specific directories and restart the testnet daemon or relaunch Verus Desktop. The directories to delete vary depending on your operating system:\n\n* On Linux: `~/.Komodo/vrsctest` and `~/.verustest`\n* On Mac OS: `~/Library/Application Support/Komodo/VRSC` and `~/Library/Application Support/VerusTest`\n* On Windows 10: `%AppData%\\Roaming\\Komodo\\VRSC\\` and `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\VRSC\\` and `%AppData%\\Roaming\\VerusTest`\n\nOnce you've deleted the directories, restart the testnet daemon or relaunch Verus Desktop, deactivate verustest, and re-add verustest native.\n\nNow, let's move on to exporting an ID to a PBaaS chain. You can use the following command:\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```\nThis command exports the ID `IDNAME@` to the PBaaS chain `PBaaSChainName` with an amount of 100 VRSCTEST.\n\nFinally, to sign transactions from multi-signature IDs on both testnet and mainnet, you'll need to follow these steps:\n\n1. Create a transaction using the `sendcurrency` command and specify the multi-signature ID:\n```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n```\n2. Get the raw transaction data using the `z_getoperationstatus` command:\n```\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\n3. Take the raw hex transaction data to each additional wallet(s) containing the additional signing addresses/IDs and sign the transaction using the `signrawtransaction` command:\n```\nverus signrawtransaction <raw_hex_transaction>\n```\n4. After the last necessary signature is applied, broadcast the transaction on the network using the `sendrawtransaction` command:\n```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```\nBy following these steps, you should be able to successfully export an ID to a PBaaS chain and sign transactions from multi-signature IDs on both testnet and mainnet.\n\nDo you have any further questions about these processes, or would you like clarification on any of the steps?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "How do I reset my testnet and what are the steps to export an ID to a PBaaS chain and sign transactions from multi-signature IDs on both testnet and mainnet?",
            "To reset your testnet, you need to delete specific directories and restart the testnet daemon or relaunch Verus Desktop. The directories to delete vary depending on your operating system:\n\n* On Linux: `~/.Komodo/vrsctest` and `~/.verustest`\n* On Mac OS: `~/Library/Application Support/Komodo/VRSC` and `~/Library/Application Support/VerusTest`\n* On Windows 10: `%AppData%\\Roaming\\Komodo\\VRSC\\` and `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\VRSC\\` and `%AppData%\\Roaming\\VerusTest`\n\nOnce you've deleted the directories, restart the testnet daemon or relaunch Verus Desktop, deactivate verustest, and re-add verustest native.\n\nTo export an ID to a PBaaS chain, you can use the following command:\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```\nThis command exports the ID `IDNAME@` to the PBaaS chain `PBaaSChainName` with an amount of 100 VRSCTEST.\n\nTo sign transactions from multi-signature IDs on both testnet and mainnet, you need to follow these steps:\n\n1. Create a transaction using the `sendcurrency` command and specify the multi-signature ID:\n```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n```\n2. Get the raw transaction data using the `z_getoperationstatus` command:\n```\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\n3. Take the raw hex transaction data to each additional wallet(s) containing the additional signing addresses/IDs and sign the transaction using the `signrawtransaction` command:\n```\nverus signrawtransaction <raw_hex_transaction>\n```\n4. After the last necessary signature is applied, broadcast the transaction on the network using the `sendrawtransaction` command:\n```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```\nBy following these steps, you can successfully export an ID to a PBaaS chain and sign transactions from multi-signature IDs on both testnet and mainnet.",
            "To reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/VRSC`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\VRSC\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\VRSC\\`, `%AppData%\\Roaming\\VerusTest`## Exporting an ID to a PBaaS chain\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n  ```## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]