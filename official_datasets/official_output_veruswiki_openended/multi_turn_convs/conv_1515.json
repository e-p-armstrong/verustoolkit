[
    "## Conversation that answers the provided question:\n**User:**\nHi, I have a question about Verus. What is the `kvupdate` command in Verus, and how can it be used to store a key-value pair on an asset chain?\n\n**AI Assistant:**\nThe `kvupdate` command in Verus is a powerful tool that allows users to store a key-value pair on an asset chain. This feature is only available for asset chains, and it allows users to store a key-value pair with an expiration time.\n\nTo use the `kvupdate` command, you need to provide four arguments: `key`, `value`, `days`, and `passphrase`. The `key` and `value` arguments are strings that represent the key and value you want to store, respectively. The `days` argument specifies the amount of days (or 1440 blocks) before the key expires, with a minimum expiration time of 1 day. The `passphrase` argument is an optional string that specifies a passphrase required to update the key.\n\nWhen you execute the `kvupdate` command, it returns a JSON object with information about the stored key-value pair, including the chain, block height, expiration time, flags, key, key length, value, value length, transaction fee, and transaction ID.\n\nYou can execute the `kvupdate` command using the Verus CLI or through a JSON-RPC call. For example, to store a key-value pair using the Verus CLI, you can use the following command:\n```bash\nverus kvupdate examplekey \"examplevalue\" 2 examplepassphrase\n```\nAlternatively, you can use a JSON-RPC call to execute the `kvupdate` command:\n```bash\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"kvupdate\", \"params\": [examplekey \"examplevalue\" 2 examplepassphrase] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\nOverall, the `kvupdate` command provides a convenient way to store key-value pairs on an asset chain with expiration times, which can be useful for various use cases such as storing metadata or configuration data.\n\nDo you have any more questions about the `kvupdate` command or how to use it?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What is the `kvupdate` command in Verus, and how can it be used to store a key-value pair on an asset chain?",
            "The `kvupdate` command in Verus is used to store a key-value pair on an asset chain. This feature is only available for asset chains, and it allows users to store a key-value pair with an expiration time.\n\nThe `kvupdate` command takes four arguments:\n\n1. `key`: a string that represents the key.\n2. `value`: a string that represents the value associated with the key.\n3. `days`: a numeric value that specifies the amount of days (or 1440 blocks) before the key expires. The minimum expiration time is 1 day.\n4. `passphrase`: an optional string that specifies a passphrase required to update the key.\n\nWhen the `kvupdate` command is executed, it returns a JSON object with the following properties:\n\n* `coin`: the chain on which the key is stored.\n* `height`: the block height at which the key was stored.\n* `expiration`: the block height at which the key will expire.\n* `flags`: a string that represents the amount of days the key will be stored.\n* `key`: the stored key.\n* `keylen`: the length of the stored key.\n* `value`: the stored value.\n* `valuesize`: the length of the stored value.\n* `fee`: the transaction fee paid to store the key.\n* `txid`: the transaction ID.\n\nThe `kvupdate` command can be executed using the Verus CLI or through a JSON-RPC call. For example, to store a key-value pair using the Verus CLI, you can use the following command:\n```bash\nverus kvupdate examplekey \"examplevalue\" 2 examplepassphrase\n```\nAlternatively, you can use a JSON-RPC call to execute the `kvupdate` command:\n```bash\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"kvupdate\", \"params\": [examplekey \"examplevalue\" 2 examplepassphrase] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\nOverall, the `kvupdate` command provides a way to store key-value pairs on an asset chain with expiration times, which can be useful for various use cases such as storing metadata or configuration data.",
            "### `kvupdate key \"value\" days passphrase`\nStore a key value. This feature is only available for asset chains.\n#### Arguments:\n```\n1. key           (string, required) key\n2. \"value\"         (string, required) value\n3. days           (numeric, required) amount of days(1440 blocks/day) before the key expires. Minimum 1 day\n4. passphrase        (string, optional) passphrase required to update this key\n```\n#### Result:\n```json\n{\n \"coin\": \"xxxxx\",     (string) chain the key is stored on\n \"height\": xxxxx,     (numeric) height the key was stored at\n \"expiration\": xxxxx,   (numeric) height the key will expire\n \"flags\": x,        (string) amount of days the key will be stored\n \"key\": \"xxxxx\",      (numeric) stored key\n \"keylen\": xxxxx,     (numeric) length of the key\n \"value\": \"xxxxx\"     (numeric) stored value\n \"valuesize\": xxxxx,    (string) length of the stored value\n \"fee\": xxxxx       (string) transaction fee paid to store the key\n \"txid\": \"xxxxx\"      (string) transaction id\n}\n```\nExamples:\n```bash\n> verus kvupdate examplekey \"examplevalue\" 2 examplepassphrase\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"kvupdate\", \"params\": [examplekey \"examplevalue\" 2 examplepassphrase] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `minerids needs height`### `notaries height timestamp`### `processupgradedata {upgradedata}`\nReturns the txid and index where an output is spent.",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ]
]