[
    [
        [
            "What are the options and parameters available when using the `updateidentity` and `verifyfile` commands in Verus, and how do they work?",
            "The `updateidentity` and `verifyfile` commands are two essential features in Verus that enable users to manage their identities and verify signed files.\n\n**Update Identity:**\nThe `updateidentity` command allows users to update their identity information in Verus. This command takes a JSON object as an argument, which specifies the new identity information. For example, you can update the name associated with your identity using the following command:\n```\nverus updateidentity '{\"name\" : \"myname\"}'\n```\nThere are several optional parameters that can be used with the `updateidentity` command:\n\n* `returntx`: If set to `true`, the transaction will be signed by the wallet and returned instead of being sent to the network. Defaults to `false`.\n* `tokenupdate`: If set to `true`, the tokenized ID control token will be used to update the identity, allowing changes to the revocation or recovery IDs even if the wallet holding the token does not control either. Defaults to `false`.\n* `feeoffer`: Allows specifying a non-standard fee amount to pay for the transaction.\n* `sourceoffunds`: Specifies a transparent or private address to source all funds for fees, preserving the privacy of the identity.\n\n**Verify File:**\nThe `verifyfile` command is used to verify a signed file in Verus. This command takes four arguments:\n\n1. The transparent address or identity that signed the file.\n2. The signature provided by the signer in base 64 encoding.\n3. The file path and name of the signed file, which must be available locally to the daemon.\n4. An optional `checklatest` parameter, which defaults to `false`. If set to `true`, the signature validity is checked based on the latest identity.\n\nThe `verifyfile` command returns a boolean value indicating whether the signature is verified or not. For example:\n```\nverus verifyfile \"myaddress\" \"signature\" \"path/to/file\" true\n```\nThis command would verify the signature of the file at `path/to/file` using the signature provided, and check the signature validity based on the latest identity.",
            "\"returntx\"            (bool,  optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned\n\"tokenupdate\"           (bool,  optional) defaults to false, if true, the tokenized ID control token, if one exists, will be used to update\n                           which enables changing the revocation or recovery IDs, even if the wallet holding the token does not\n                           control either.\n\"feeoffer\"            (bool,  optional) non-standard fee amount to pay for the transaction\n\"sourceoffunds\"          (string,  optional) transparent or private address to source all funds for fees to preserve privacy of the identity\n```#### Result:\n  hex string of either the txid if returnhex is false or the hex serialized transaction if returntx is trueExamples:\n```bash\n> verus updateidentity '{\"name\" : \"myname\"}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"updateidentity\", \"params\": ['{\"name\" : \"myname\"}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `verifyfile \"address or identity\" \"signature\" \"filepath/filename\" \"checklatest\"`\nVerify a signed file#### Arguments:\n1. \"t-addr or identity\" (string, required) The transparent address or identity that signed the file.\n2. \"signature\"     (string, required) The signature provided by the signer in base 64 encoding (see signfile).\n3. \"filename\"      (string, required) The file, which must be available locally to the daemon and that was signed.\n3. \"checklatest\"    (bool, optional)  If true, checks signature validity based on latest identity. defaults to false, which determines validity of signing height stored in signature.#### Result:\ntrue|false  (boolean) If the signature is verified or not.",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "3abdeaa5-d25a-4e80-ae7c-2818f67166ff"
]