[
    [
        [
            "What information does the `getnetworkinfo` command provide about the Verus network and its connections?",
            "The `getnetworkinfo` command is used to retrieve information about the Verus network and its connections. This command provides a wealth of information about the network, including:\n\n1. **Version Information**: The `version` and `subversion` fields indicate the current version of the Verus server and its subversion string, respectively.\n\n2. **Protocol Version**: The `protocolversion` field specifies the current protocol version used by the Verus network.\n\n3. **Local Services**: The `localservices` field lists the services that the node offers to the network.\n\n4. **Time Offset**: The `timeoffset` field indicates the time offset of the node.\n\n5. **Connections**: The `connections` field shows the number of connections to the node.\n\n6. **Network Information**: The `networks` field is an array that provides information about each network, including the network name (e.g., ipv4, ipv6, or onion), whether the network is limited using the `-onlynet` option, whether the network is reachable, and the proxy used for the network, if any.\n\n7. **Relay Fee**: The `relayfee` field specifies the minimum relay fee for non-free transactions in VRSC per kilobyte.\n\n8. **Local Addresses**: The `localaddresses` field is an array that lists the local addresses of the node, including the network address, port, and score.\n\n9. **Warnings**: The `warnings` field provides any network warnings, such as alert messages.\n\nTo access this information, you can use the `getnetworkinfo` command in the Verus CLI or send a JSON-RPC request using `curl` or a similar tool.\n\nThis information can be useful for monitoring the health and performance of the Verus network, as well as troubleshooting connection issues.",
            "#### Result:\n```json\n{\n \"version\": xxxxx,           (numeric) the server version\n \"subversion\": \"/MagicBean:x.y.z[-v]/\", (string) the server subversion string\n \"protocolversion\": xxxxx,       (numeric) the protocol version\n \"localservices\": \"xxxxxxxxxxxxxxxx\",  (string) the services we offer to the network\n \"timeoffset\": xxxxx,          (numeric) the time offset\n \"connections\": xxxxx,         (numeric) the number of connections\n \"networks\": [             (array) information per network\n {\n  \"name\": \"xxx\",            (string) network (ipv4, ipv6 or onion)\n  \"limited\": true|false,        (boolean) is the network limited using -onlynet?\n  \"reachable\": true|false,       (boolean) is the network reachable?\n  \"proxy\": \"host:port\"         (string) the proxy that is used for this network, or empty if none\n }\n ,...\n ],\n \"relayfee\": x.xxxxxxxx,        (numeric) minimum relay fee for non-free transactions in VRSC/kB\n \"localaddresses\": [          (array) list of local addresses\n {\n  \"address\": \"xxxx\",          (string) network address\n  \"port\": xxx,             (numeric) network port\n  \"score\": xxx             (numeric) relative score\n }\n ,...\n ]\n \"warnings\": \"...\"           (string) any network warnings (such as alert messages)\n}\n```\nExamples:\n```bash\n> verus getnetworkinfo\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getpeerinfo`\nReturns data about each connected network node as a json array of objects.",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "6a63bd02-0009-4282-a370-2c8fc6b0adf0"
]