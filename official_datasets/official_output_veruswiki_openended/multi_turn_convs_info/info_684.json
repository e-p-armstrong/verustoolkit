[
    [
        [
            "How do I sign transactions from multi-signature IDs, and what are the key features of the new Verus testnet?",
            "**Signing Transactions from Multi-Signature IDs:**\nTo sign transactions from multi-signature IDs, you need to follow these steps:\n\n1. **Create a transaction and get the raw transaction data:** Use the `sendcurrency` command to create a transaction and get the operation ID. Then, use `z_getoperationstatus` to get the raw hex transaction data.\n2. **Share the raw transaction data with additional wallets:** Take the raw hex transaction data and share it with the additional wallets containing the additional signing addresses/IDs.\n3. **Sign the raw transaction:** Use the `signrawtransaction` command to sign the raw transaction data in each additional wallet.\n4. **Broadcast the signed transaction:** After all necessary signatures are applied, use the `sendrawtransaction` command to broadcast the signed transaction on the network.\n\n**Key Features of the New Verus Testnet:**\nThe new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform that offers a range of features, including:\n\n* **Easy GUI and command-line interfaces:** Users can access the testnet through an easy-to-use GUI for basic operations or command-line interface for more advanced functions.\n* **Creation of new identities, currencies, liquidity pools, and blockchains:** Without any programming, users can create new identities, currencies, liquidity pools, and blockchains for various use cases, such as business, government, projects, or decentralized applications.\n* **Multi-chain support:** The testnet allows for sending currencies worldwide on the same chain or across blockchains with ease.\n* **Currency conversion:** Users can convert currencies to others on the network without an exchange by sending to themselves and converting along the way.\n* **Unlimited possibilities:** The Verus testnet offers an unlimited number of identities, currencies, liquidity pools, and blockchains, making it a highly flexible and scalable platform.\n* **Accessible from Verus Desktop and Verus CLI wallets:** The testnet is accessible from the released versions of Verus Desktop and Verus CLI wallets, making it easy to get started.",
            "## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "abbc941a-cc94-4b7f-9a1a-78fd92d99754"
]