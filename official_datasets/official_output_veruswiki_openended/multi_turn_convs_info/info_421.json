[
    [
        [
            "How do I sign transactions from multi-signature IDs on the Verus network, and what are the main features of the Verus testnet?",
            "Signing transactions from multi-signature IDs on the Verus network involves a few steps. Here's a step-by-step guide on how to do it:\n\n**Step 1: Create a transaction**\nFirst, you need to create a transaction using the `sendcurrency` command. Replace `<multi-signature-ID>` with the ID of your multi-signature wallet, `<destination_address>` with the address you want to send the funds to, and `<transaction_amount>` with the amount you want to send.\n```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n```\nThis command will return an operation ID.\n\n**Step 2: Get the raw transaction data**\nUse the `z_getoperationstatus` command to get the raw transaction data. Replace `<operation_id_returned_by_sendcurrency>` with the operation ID returned in the previous step.\n```\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nThis command will return the raw hex transaction data.\n\n**Step 3: Sign the transaction**\nTake the raw hex transaction data to each additional wallet containing the additional signing addresses/IDs and sign it using the `signrawtransaction` command.\n```\nverus signrawtransaction <raw_hex_transaction>\n```\n**Step 4: Broadcast the transaction**\nAfter the last necessary signature is applied, broadcast the transaction on the network using the `sendrawtransaction` command.\n```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```\n\nNow, let's talk about the main features of the Verus testnet. The Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform that allows you to create new identities, currencies, liquidity pools, and blockchains without any programming. You can send currencies worldwide on the same chain or across blockchains with ease, and even convert currencies to others on the network without an exchange. The testnet is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it offers a wide range of possibilities for decentralized applications.",
            "## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "a25b3a7d-3558-4ffe-abf7-2dd72eb01927"
]