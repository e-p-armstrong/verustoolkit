[
    [
        [
            "How do I retrieve information about a specific transaction output in Verus, and what information can I expect to receive?",
            "To retrieve information about a specific transaction output in Verus, you can use the `gettxout` command or the `getspentinfo` command. Both of these commands allow you to query the Verus blockchain for information about a specific transaction output.\n\n**getspentinfo:**\nThe `getspentinfo` command takes two arguments: `txid` and `index`. `txid` is the hexadecimal string of the transaction ID, and `index` is the spending input index. This command returns information about the transaction output, including the transaction ID, the spending input index, and other details.\n\n**gettxout:**\nThe `gettxout` command takes three arguments: `txid`, `n`, and `includemempool` (optional). `txid` is the transaction ID, `n` is the vout value, and `includemempool` is a boolean that specifies whether to include the mempool in the result. This command returns detailed information about the transaction output, including the block hash, the number of confirmations, the transaction value in VRSC, the scriptPubKey, and other details.\n\n**Expected Information:**\nWhen using either of these commands, you can expect to receive a JSON object with the following information:\n\n* `txid`: the transaction ID\n* `index`: the spending input index (for `getspentinfo`)\n* `bestblock`: the block hash\n* `confirmations`: the number of confirmations\n* `value`: the transaction value in VRSC\n* `scriptPubKey`: a JSON object with information about the scriptPubKey, including the asm, hex, reqSigs, type, and addresses\n* `version`: the version\n* `coinbase`: a boolean indicating whether the transaction is a coinbase transaction or not\n\nYou can use these commands to retrieve information about specific transaction outputs and gain insights into the Verus blockchain.",
            "#### Arguments:\n```json\n{\n \"txid\" (string) The hex string of the txid\n \"index\" (number) The start block height\n}\n```\n#### Result:\n```json\n{\n \"txid\" (string) The transaction id\n \"index\" (number) The spending input index\n ,...\n}\n```\nExamples:\n```bash\n> verus getspentinfo '{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getspentinfo\", \"params\": [{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `gettxout \"txid\" n ( includemempool )`\nReturns details about an unspent transaction output.#### Arguments:\n```\n1. \"txid\"     (string, required) The transaction id\n2. n        (numeric, required) vout value\n3. includemempool (boolean, optional) Whether to include the mempool\n```#### Result:\n```json\n{\n \"bestblock\" : \"hash\",   (string) the block hash\n \"confirmations\" : n,   (numeric) The number of confirmations\n \"value\" : x.xxx,     (numeric) The transaction value in VRSC\n \"scriptPubKey\" : {    (json object)\n   \"asm\" : \"code\",    (string)\n   \"hex\" : \"hex\",     (string)\n   \"reqSigs\" : n,     (numeric) Number of required signatures\n   \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash\n   \"addresses\" : [    (array of string) array of Komodo addresses\n    \"verusaddress\"   (string) Komodo address\n    ,...\n   ]\n },\n \"version\" : n,      (numeric) The version\n \"coinbase\" : true|false  (boolean) Coinbase or not\n}\n```\nExamples:",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "561a56c5-4f1f-4c42-b650-a69de19dac03"
]