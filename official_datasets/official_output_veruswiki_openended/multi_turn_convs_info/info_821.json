[
    [
        [
            "How can I create a next-generation NFT (non-fungible token) using Verus, and how can I create an identity with a fractional currency as its parent, using the Verus command-line interface?",
            "To create a next-generation NFT using Verus, you can use the `definecurrency` command with specific options and flags. Specifically, you need to use the `OPTION_NFT_TOKEN` and `OPTION_TOKEN` flags, and set the maximum supply to 1 satoshi. Here's an example:\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```\nThis command defines a new currency called \"ID\" with a maximum supply of 1 satoshi, which is pre-allocated to the specified recipient.\n\nTo create an identity with a fractional currency as its parent, you can use the `registernamecommitment` and `registeridentity` commands. Here's an example:\n```\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nThis command registers a name commitment for an identity with the name \"subID\", controlled by the address \"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\", and specifies the parent currency as \"vrsc-btc\". The funding source is specified as a z-address.\n\nFinally, to register the identity, you can use the `registeridentity` command:\n```\nverus -chain=vrsctest registeridentity '{ID registration with name commitment}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nThis command registers the identity with the specified name commitment, using the default fee, and specifying the funding source as a z-address.\n\nIn summary, to create a next-generation NFT, you need to define a currency with specific options and flags, and to create an identity with a fractional currency as its parent, you need to register a name commitment and an identity using the `registernamecommitment` and `registeridentity` commands, respectively.",
            "## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffunds",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "ca3cb1d2-6a18-4212-a0c1-2dfa0ba8f1ce"
]