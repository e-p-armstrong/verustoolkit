[
    [
        [
            "How do I sign transactions from multi-signature IDs on both the testnet and mainnet, and what are some advanced features of Verus, such as tokenizing ID control and creating an identity with a fractional currency as its parent?",
            "This question covers three main topics: signing transactions from multi-signature IDs, tokenizing ID control, and creating an identity with a fractional currency as its parent.\n\n**Signing Transactions from Multi-Signature IDs:**\nTo sign transactions from multi-signature IDs on both the testnet and mainnet using Verus, you need to follow these steps:\n\n1. **Create a transaction:** Use the `sendcurrency` command to create a transaction from a multi-signature ID, specifying the destination address and transaction amount.\n2. **Get the raw transaction data:** Use the `z_getoperationstatus` command to get the raw hex transaction data from the previous step.\n3. **Sign the transaction:** Take the raw hex transaction data to each additional wallet containing the additional signing addresses/IDs and use the `signrawtransaction` command to sign the transaction.\n4. **Broadcast the signed transaction:** After the last necessary signature is applied, broadcast the signed transaction on the network using the `sendrawtransaction` command.\n\n**Tokenizing ID Control (Next Generation NFT):**\nVerus allows for tokenizing ID control, which enables the creation of next-generation NFTs. To do this, you need to define a currency with specific flags and properties. Here's an example:\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```\nIn this example, the currency definition has flags `OPTION_NFT_TOKEN` and `OPTION_TOKEN`, and a max supply of 1 satoshi that is either pre-allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n\n**Creating an Identity with a Fractional Currency as its Parent:**\nVerus also allows for creating an identity with a fractional currency as its parent. To do this, you can use the `registernamecommitment` command, which now takes two more positional arguments to specify a currency parent and a funding address. Here's an example:\n```\nregisternamecommitment <name> <currency_parent> <funding_address>\n```\nIn this example, you can specify a parent currency, such as `vrsc-btc`, and a funding address. You can use quotes `\"\"` to leave fields blank, and you can use `z_addresses` to fund the name commitment and identity registration.",
            "### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "fa68755b-9c1f-4103-a1a3-7a295772b11d"
]