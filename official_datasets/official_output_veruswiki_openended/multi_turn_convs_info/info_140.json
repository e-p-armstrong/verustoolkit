[
    [
        [
            "How do I define and launch a new currency on the Verus network, and what are the steps involved in creating a new token that can be converted from an existing currency?",
            "To define and launch a new currency on the Verus network, you can use the `definecurrency` command. Here's an example of how to define a new currency called \"gold\" that can be converted from VRSCTEST:\n\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\n\nThis command defines the properties of the new currency, including its name, options, convertible currencies, conversion rates, and preallocations. In this case, the currency is called \"gold\", and it can be converted from VRSCTEST at a rate of 0.01 VRSCTEST per GOLD. The `preallocations` field is used to fund the identity of the currency with an initial amount of GOLD.\n\nBefore the currency can be launched, it must be funded with at least 10 VRSCTEST, and there must be at least 1000 VRSCTEST preconverted at the specified conversion rate. This is done as part of the mining process, and miners who participate in the launch of the currency will earn a 0.025% conversion fee.\n\nOnce the currency is launched, you can convert VRSCTEST to GOLD using the `sendcurrency` command:\n\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\n\nThis command will park the conversion until the token launches, and then you will either receive the converted amount of GOLD in your wallet, or you will have your VRSCTEST returned.\n\nIf you want to create a new token that can be converted from GOLD or VRSCTEST, you can use the `definecurrency` command again, specifying the new token's properties and conversion rates. For example:\n\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\n\nThis command defines a new token called \"mycoin\" that can be converted from VRSCTEST or GOLD, with its own conversion rates and properties.",
            "s, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "84a0a1b2-6a57-4528-9083-6713c523e765"
]