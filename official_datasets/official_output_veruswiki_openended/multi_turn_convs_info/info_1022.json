[
    [
        [
            "How do you define a new token and a PBaaS blockchain using the command line with Verus, and what are some of the key properties and options that can be configured during this process?",
            "Defining a new token and a PBaaS blockchain using the command line with Verus involves using specific commands and configuring various properties and options. Here's a breakdown of the process:\n\n**Defining a New Token:**\nTo define a new token, you can use the `definecurrency` command with Verus. For example, let's say you want to create a new token called \"mycoin\". You can define it as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn this example, the `definecurrency` command is used to create a new token called \"mycoin\" on the VRSCTEST chain. Some key properties and options that can be configured during this process include:\n\n* `name`: The name of the new token.\n* `options`: A configurable integer that determines various properties of the token.\n* `proofprotocol`: The proof protocol used by the token. In this case, it's set to 2, which means that the controller of the chain ID can mint new coins.\n* `currencies`: The currencies that can be converted to the new token.\n* `minpreconversion`: The minimum amounts of each currency required for conversion to the new token.\n* `initialsupply`: The initial supply of the new token.\n\n**Defining a PBaaS Blockchain:**\nTo define a PBaaS blockchain, you can use a JSON object to configure various properties and options. Here's an example:\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\"\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n\"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nSome key properties and options that can be configured during this process include:\n\n* `name`: The name of the PBaaS blockchain.\n* `options`: A configurable integer that determines various properties of the blockchain.\n* `currencies`: The currencies supported by the blockchain.\n* `conversions`: The conversion ratios between the blockchain's native currency and other currencies.\n* `eras`: The block reward, reward decay, halving, and end of each \"era\" in the blockchain's lifecycle.\n* `notaries`: The VerusIDs that will serve as notaries on the blockchain.\n* `minnotariesconfirm`: The minimum number of notaries needed to confirm a block.\n* `nodes`: The network addresses and identities of the nodes on the blockchain.\n* `gatewayconvertername` and `gatewayconverterissuance`: The name and issuance of the bridge that allows funds to be moved on and off the PBaaS chain.\n\nOverall, defining a new token and a PBaaS blockchain with Verus requires configuring various properties and options to suit your specific use case. By understanding these properties and options, you can create customized tokens and blockchains that meet your needs.",
            "```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "4a2986ca-1cca-4c43-9f29-81a92a9c3046"
]