[
    [
        [
            "What is the purpose of the Verus API's signing function, and what are the different parameters that can be used to customize the signing process?",
            "The Verus API's signing function is used to generate a hash of data and sign it with a private key. This function takes various parameters to customize the signing process, including:\n\n**Address:** A required parameter that specifies the transparent address or identity to use for signing.\n\n**Data:** A required parameter that specifies the data to sign, which can be a file, message, or data hash.\n\n**MMR Data:** An optional parameter that enables signing of multiple data objects using a Merkle Mountain Range (MMR). This allows for more efficient and private signing of multiple data objects.\n\n**MMR Salt:** An optional parameter that protects the privacy of leaf nodes in the MMR.\n\n**MMR Hash Type:** An optional parameter that specifies the hash type to use for the MMR, with a default of Blake2b.\n\n**Prior MMR:** An optional parameter that allows for growing an MMR by using prior hashes to construct the MMR and root without data.\n\n**VDXF Keys:** An optional parameter that specifies an array of VDXF keys or ID i-addresses.\n\n**VDXF Key Names:** An optional parameter that specifies an array of VDXF key names or fully qualified friendly IDs.\n\n**Bound Hashes:** An optional parameter that specifies an array of bound hash values.\n\n**Hash Type:** An optional parameter that specifies the hash type to use, with a default of SHA256.\n\nBy using these parameters, users can customize the signing process to fit their specific needs, including the type of data to sign, the level of privacy desired, and the specific hash types and keys to use.",
            "e, object for getvdxfid API, or friendly name ID -- no i-addresses\", ...],\n \"boundhashes\":[\"hexhash\", ...],\n \"hashtype\": \"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\",\n \"encrypttoaddress\": \"sapling address\",       granularly encrypt all data, either all decryptable with viewing key or parts using unique, SSKs\n \"createmmr\":\"bool\",                 if true, 1 or more objects will be put into a merkle mountain range and the root signed\n \"signature\":\"currentsig\"\n}\n```\nGenerates a hash (SHA256 default if \"hashtype\" not specified) of the data, returns the hash, and signs it with parameters specified\n#### Arguments:\n```json\n{\n \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to use for signing.\n \"filename\" | \"message\" | \"messagehex\" | \"messagebase64\" | \"datahash\" (string, required) Data to sign\n \"mmrdata\":[{\"filename | vdxfdata | message | serializedhex | serializedbase64 | datahash\":\"str\"}], (array, optional) Alternate to single data parameters, this enables an MMR signing\n       \"mmrsalt\":[\"salt\":\"str\"],             (string, optional) Protects privacy of leaf nodes of the MMR\n       \"mmrhashtype\":\"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\", (string, optional) Default is blake2b\n       \"priormmr\":\"[{\"idxhash\":,\"utxoref\":{}}]\",     (array, optional) When growing an MMR, the prior hashes can be used to construct the MMR and root w/o data\n \"vdxfkeys\":[\"vdxfkey\", ...],                 (array, optional) Array of vdxfkeys or ID i-addresses\n \"vdxfkeynames\":[\"vdxfkeyname\", ...],             (array, optional) Array of vdxfkey names or fully qualified friendly IDs\n \"boundhashes\":[\"hexhash\", ...],               (array, optional) Array of bound hash values\n \"hashtype\": \"str\",              ",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "17e66616-c08a-49fa-a127-079e0915e401"
]