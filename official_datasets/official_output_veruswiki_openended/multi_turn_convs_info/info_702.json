[
    [
        [
            "How does Verus enable new use cases and unlimited scale, and what are some advanced features of VerusIDs, such as locking and unlocking IDs, and how can they be used in various scenarios?",
            "Verus enables new use cases and unlimited scale through its multichain network, which allows for the creation of an unlimited number of interoperable blockchains. This is achieved through the use of Notary IDs, which provide decentralized blockchain-specific bridge confirmation, enabling public blockchains to be available to the world for merge mining and staking, as well as private, internal blockchains.\n\nThe Verus network is designed to be fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains. While there is some overhead for cross notarization, the network can support a vast number of blockchains, making it highly scalable.\n\nVerusIDs, on the other hand, offer advanced features such as locking and unlocking IDs. There are two types of locks: Time Lock and Time Delay.\n\nA Time Lock allows an ID to be locked until a specific block height is reached, after which it can be unlocked. This can be useful in scenarios where an ID needs to be restricted until certain conditions are met. For example, in a token launch, a Time Lock can be used to ensure that a certain amount of time passes before the tokens can be transferred.\n\nA Time Delay, on the other hand, defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state. This can be useful in scenarios where an ID needs to be restricted for a certain period of time before it can be unlocked again.\n\nIt's also important to note that revoking an identity will clear its locked status, regardless of the time delay or unlock height. Additionally, a locked identity cannot revoke itself, ensuring that the lock is enforced until the specified conditions are met.\n\nThese advanced features of VerusIDs provide a high degree of flexibility and control, enabling users to create complex use cases and scenarios that are not possible on other blockchain platforms.",
            " of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Q",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "afbcb32c-c8cd-4e50-9a3b-8893be4eb9dc"
]