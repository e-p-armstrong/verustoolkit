[
    [
        [
            "What are some advanced features of the Verus protocol, including tokenizing ID control, resetting a testnet, and creating an identity with a fractional currency as its parent, and how can I use them?",
            "The Verus protocol offers several advanced features that allow users to create and manage complex identity and currency systems. Here, we will explore three such features: tokenizing ID control, resetting a testnet, and creating an identity with a fractional currency as its parent.\n\n**Tokenizing ID Control:**\nTokenizing ID control allows users to create a next-generation NFT (non-fungible token) that represents control over an identity. This is achieved by defining a currency with the `OPTION_NFT_TOKEN` and `OPTION_TOKEN` flags, and a maximum supply of 1 satoshi that is either pre-allocated or pre-converted to. The command to create such a currency is:\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```\nThis command defines a currency called \"ID\" with the specified options and pre-allocation.\n\n**Resetting a Testnet:**\nTo reset a testnet, you need to delete the relevant directories and restart the testnet daemon or relaunch Verus Desktop. The directories to delete vary depending on your operating system:\n* Linux: `~/.komodo/vrsctest`, `~/.verustest`\n* Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application Support/VerusTest`\n* Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`\n\n**Creating an Identity with a Fractional Currency as its Parent:**\nVerus allows you to create an identity with a fractional currency as its parent using the `registernamecommitment` command. This command now takes two additional positional arguments to specify a currency parent and a funding address. You can use quotes `\"\"` to leave fields blank, and z_addresses to fund the name commitment and identity registration. An example of this command is:\n```\nregisternamecommitment \"vrsc-btc\" \"\" \"funding_address\"\n```\nThis command creates an identity with `vrsc-btc` as its parent currency, no referrer, and funds the name commitment and identity registration using the specified funding address.",
            "### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`# Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "c9f4c484-402c-4e91-a313-d3162d0cfb65"
]