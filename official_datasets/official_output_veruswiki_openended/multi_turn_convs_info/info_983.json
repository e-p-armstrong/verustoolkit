[
    [
        [
            "How does Verus's fractal design enable multiple interoperable blockchains, and what are the features and uses of ID locking and unlocking, as well as conversion queries in Verus?",
            "Verus's fractal design allows for an unlimited number of simultaneously operating, interoperable blockchains. This is a key feature that enables scalability and flexibility in the Verus ecosystem.\n\nOne important aspect of Verus is the ability to lock and unlock IDs. There are two types of locking mechanisms in Verus: Time Lock and Time Delay.\n\n**Time Lock**: \nA Time Lock is a mechanism that allows you to set a specific block height at which an ID will unlock. This is useful for creating a conditional unlock, where the ID will only be unlocked when a certain block height is reached. To set a Time Lock, you can use the `updateidentity` command with the `timelock` parameter set to the desired unlock block height.\n\n**Time Delay**: \nA Time Delay is a mechanism that allows you to set a delay in blocks before an ID can be unlocked. This is useful for creating a cooling-off period before an ID can be unlocked again. To set a Time Delay, you can use the `updateidentity` command with the `timelock` parameter set to the desired unlock block delay.\n\nSome important notes about ID locking and unlocking:\n\n* Revoking an identity will clear its locked status, regardless of any time delay or unlock height.\n* A locked identity cannot revoke itself.\n\nAnother important feature in Verus is the ability to perform conversion queries. The `getcurrencyconverters` API allows you to retrieve a list of currencies that meet certain liquidity thresholds. Specifically, it returns all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves.\n\nFor example, if you want to find all currencies that have a BTC/ETH market with sufficient liquidity, you can use the `getcurrencyconverters` API with the `btc` and `eth` parameters. This will return a list of currencies that meet the liquidity thresholds for those markets.",
            "k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "78e0a8d7-b68a-4d59-aba8-3e95d10e3231"
]