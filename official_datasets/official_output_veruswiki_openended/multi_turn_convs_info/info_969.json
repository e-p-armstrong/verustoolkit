[
    [
        [
            "How do I use the Verus command-line interface to perform various cross-chain operations, such as pre-converting to a new currency, sending VRSCTEST to a PBaaSChain, converting VRSCTEST to a PBaaSChain, and converting a PBaaSChain back to VRSCTEST?",
            "The Verus command-line interface provides a powerful toolset for performing various cross-chain operations. Here's a breakdown of how to use the `sendcurrency` command to perform these operations:\n\n**Pre-converting to a new currency:**\nBefore a new currency is active, you can pre-convert your VRSCTEST to the new currency using the `sendcurrency` command. The format for this command is:\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\nThis command sends 10 VRSCTEST from the address `alice@` to be pre-converted to the new currency `NEWCOIN`. If the conversion is successful, the resulting `NEWCOIN` will be sent back to `alice@`.\n\n**Sending VRSCTEST cross-chain to PBaaSChain:**\nTo send VRSCTEST from the VRSCTEST chain to a PBaaSChain, you can use the `sendcurrency` command with the `exportto` option. The format for this command is:\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\nThis command sends 10 VRSCTEST from the address `RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv` to the PBaaSChain via the Bridge.\n\n**Converting VRSCTEST cross-chain to PBaaSChain:**\nTo convert VRSCTEST to the native currency of a PBaaSChain, you can use the `sendcurrency` command with the `convertto` and `exportto` options. The format for this command is:\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\nThis command sends 10 VRSCTEST from the address `RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv` to be converted to the native currency of the PBaaSChain via the Bridge.\n\n**Converting PBaaSChain to VRSCTEST:**\nTo convert the native currency of a PBaaSChain back to VRSCTEST, you can use the `sendcurrency` command with the `convertto` and `exportto` options. The format for this command is:\n```json\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\nThis command sends 10 units of the PBaaSChain's native currency from the address `RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv` to be converted back to VRSCTEST via the Bridge.\n\nThese commands demonstrate the power and flexibility of the Verus command-line interface for performing cross-chain operations.",
            "TC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "df106ec7-e186-4c21-b4c4-1d74c1d8ba37"
]