[
    [
        [
            "How do you create a new currency in Verus, and what does setting the proofprotocol to PROOF_CHAINID allow the controller of the chain ID to do?",
            "To create a new currency in Verus, you can use the `definecurrency` command. For example, to create a new currency called \"mycoin\", you would use the following command:\n\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\n\nThis command defines a new currency named \"mycoin\" with specific properties. Some important notes about this configuration:\n\n1. `proofprotocol` being set to 2 means that it's set to PROOF_CHAINID.\n2. `options` is a configurable integer, in this case set to 97.\n3. `currencies` lists which tokens can be converted to mycoin.\n4. `\"minpreconversion\": [10000,5.1298]` defines the minimum amounts of VRSCTEST and GOLD needed to convert to mycoin, respectively.\n5. `initialsupply` sets the initial supply of mycoin to 20,000 units.\n\nSetting the `proofprotocol` to PROOF_CHAINID allows the controller of the chain ID to mint new coins. This means that the controller has the ability to create new \"mycoin\" units and distribute them as they see fit. To mint new coins, the controller would use a command like:\n\n```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\n\nThis command would mint 10,000 new \"mycoin\" units and send them to the address \"mike@\". This demonstrates how setting the `proofprotocol` to PROOF_CHAINID gives the controller of the chain ID the power to control the supply of the currency.",
            "```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "bb31285e-3c7c-485b-806a-46fd042c8531"
]