[
    [
        [
            "How do you define a new currency on the Verus platform, and what are the key components of defining a PBaaS blockchain on Verus?",
            "To define a new currency on the Verus platform, you can use the `definecurrency` command. For example, to create a new currency called \"mycoin\", you would use the following command:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nThis command defines a new currency named \"mycoin\" with the following properties:\n\n* `name`: The name of the currency, \"mycoin\".\n* `options`: An integer that defines additional properties of the currency, set to 97 in this case.\n* `proofprotocol`: The proof protocol used to validate transactions, set to 2 (PROOF_CHAINID) which allows the controller of the chain ID to mint new coins.\n* `currencies`: The currencies that can be converted to \"mycoin\", in this case VRSCTEST and GOLD.\n* `minpreconversion`: The minimum amounts of each currency required for conversion to \"mycoin\".\n* `initialsupply`: The initial supply of \"mycoin\" units, set to 20,000 in this case.\n\nTo mint new coins, the controller of the chain ID can use the `sendcurrency` command, for example:\n```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\nThis command mints 10,000 new \"mycoin\" units and sends them to the address \"mike@\".\n\nDefining a PBaaS blockchain on Verus involves specifying the properties of the blockchain, including the currencies it supports, the conversion ratios between them, the block reward and halving schedule, and the nodes and notaries that make up the network. The definition is divided into two parts: the blockchain definition and the bridge definition.\n\nThe blockchain definition includes:\n\n* `name`: The name of the blockchain, \"PBaaSChain\" in this case.\n* `options`: An integer that defines additional properties of the blockchain, set to 330 in this case.\n* `currencies`: The currencies supported by the blockchain, in this case only VRSCTEST.\n* `conversions`: The conversion ratios between the currencies, in this case a single conversion ratio of 1.\n* `eras`: The block reward and halving schedule, with a single era defined in this case.\n* `notaries`: The VerusIDs of the notaries that make up the network, with three notaries defined in this case.\n* `minnotariesconfirm`: The minimum number of notaries required to confirm a block, set to 2 in this case.\n* `nodes`: The network addresses and identities of the nodes that make up the network, with two nodes defined in this case.\n* `gatewayconvertername`: The name of the bridge, \"Bridge\" in this case.\n* `gatewayconverterissuance`: The initial supply of the bridge's native token, set to 1,000,000 in this case.\n\nThe bridge definition has overridable defaults and specifies the currencies supported by the bridge, the initial contributions to the bridge, and the initial supply of the bridge's native token.\n\nOverall, defining a new currency and a PBaaS blockchain on Verus involves specifying the properties of the currency or blockchain, including the currencies it supports, the conversion ratios between them, and the nodes and notaries that make up the network.",
            "```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "2931cfba-4e05-4e0a-959e-63d23be197ac"
]