[
    [
        [
            "What is the Verus-Ethereum Bridge, and how can I access it?",
            "The Verus-Ethereum Bridge is a tool that allows for the exchange of assets between the Verus and Ethereum blockchains. It enables a 1:1 mapping between a currency on Verus and an ERC-20 token on Ethereum, making them interchangeable. You can access the Verus-Ethereum Bridge on both the Testnet and Mainnet.",
            "# Launch currency with 1:1 mapping of ERC-20When defining a currency it can be mapped to an ERC-20 1:1. The currency on Verus and the ERC-20 on Ethereum are then always interchangeable 1 to 1. [More on the Verus-Ethereum Bridge.](/eth-bridge/)::: tip \u2194\ufe0f Verus-Ethereum Bridge \ud83d\udc68\u200d\ud83d\udd27 For Testnet! [\ud83d\udc49 Access the Verus-Ethereum Testnet Bridge](https://ethbridge.verustest.net/) (\u26a0\ufe0f Goerli testnet) :::::: tip \u2194\ufe0f Verus-Ethereum Bridge \u2705 For Mainnet! [\ud83d\udc49 Access the Verus-Ethereum Mainnet Bridge](https://eth.verusbridge.io) :::::: warning Need help setting up a currency launch? \ud83e\udd14 [\ud83d\udc49 Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord) :::### Defining the currency To create a currency of a specific name, we need a VerusID of the same name. The controller of this VerusID is the only one who can create a currency of that name, and we can only do so once.The cost for a VerusID on the Verus is ``100 VRSC`` (or 80 when using a referral). The cost to launch a currency is ``200 VRSC``. Before launching we need to have enough VRSC in the namespace VerusID.You can also use a .vETH subID. The cost to register a .vETH subID is an amount of Bridge.vETH (0.01 vETH worth).In our example we have a namespace ``MyUSDC`` with which we want to launch a currency that is mapped to the Ethereum ``USDC`` ERC-20 (on Goerli testnet, [see contract address](https://goerli.etherscan.io/address/0x98339D8C260052B7ad81c28c16C0b98420f2B46a)).Below is the command to map a currency 1:1 to an ERC-20 on Ethereum. The ``address`` field is the Ethereum smart contract address of the ERC-20 we want to map to.``` json ./verus -chain=VRSCTEST definecurrency '{   \"name\":\"MyUSDC\",   \"options\":32,   \"systemid\":\"veth\",   \"parent\":\"vrsctest\",   \"launchsystemid\":\"vrsctest\",   \"nativecurrencyid\":{     \"type\":9,     \"address\":\"0x98339D8C260052B7ad81c28c16C0b98420f2B46a\"   },    \"initialsupply\":0,   \"proofprotocol\":3 }' ```After we put in the command, we get returned a HEX. We use this HEX to launch the currency on the network. Use the command below to launch the currency:``` json ./verus -chain=VRSCTEST sendrawtransaction \"HEX\" ```Now we have to wait a few blocks for the currency to be available on the network.",
            "./raw_text_input_docs/mapping-1:1-eth.md"
        ],
        [
            "What is required to create a currency on Verus, and what is the cost?",
            "To create a currency on Verus, you need a VerusID of the same name as the currency. The controller of this VerusID is the only one who can create a currency of that name, and it can only be done once. The cost for a VerusID on the Verus network is 100 VRSC (or 80 VRSC when using a referral), and the cost to launch a currency is 200 VRSC. You also need to have enough VRSC in the namespace VerusID.",
            "# Launch currency with 1:1 mapping of ERC-20When defining a currency it can be mapped to an ERC-20 1:1. The currency on Verus and the ERC-20 on Ethereum are then always interchangeable 1 to 1. [More on the Verus-Ethereum Bridge.](/eth-bridge/)::: tip \u2194\ufe0f Verus-Ethereum Bridge \ud83d\udc68\u200d\ud83d\udd27 For Testnet! [\ud83d\udc49 Access the Verus-Ethereum Testnet Bridge](https://ethbridge.verustest.net/) (\u26a0\ufe0f Goerli testnet) :::::: tip \u2194\ufe0f Verus-Ethereum Bridge \u2705 For Mainnet! [\ud83d\udc49 Access the Verus-Ethereum Mainnet Bridge](https://eth.verusbridge.io) :::::: warning Need help setting up a currency launch? \ud83e\udd14 [\ud83d\udc49 Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord) :::### Defining the currency To create a currency of a specific name, we need a VerusID of the same name. The controller of this VerusID is the only one who can create a currency of that name, and we can only do so once.The cost for a VerusID on the Verus is ``100 VRSC`` (or 80 when using a referral). The cost to launch a currency is ``200 VRSC``. Before launching we need to have enough VRSC in the namespace VerusID.You can also use a .vETH subID. The cost to register a .vETH subID is an amount of Bridge.vETH (0.01 vETH worth).In our example we have a namespace ``MyUSDC`` with which we want to launch a currency that is mapped to the Ethereum ``USDC`` ERC-20 (on Goerli testnet, [see contract address](https://goerli.etherscan.io/address/0x98339D8C260052B7ad81c28c16C0b98420f2B46a)).Below is the command to map a currency 1:1 to an ERC-20 on Ethereum. The ``address`` field is the Ethereum smart contract address of the ERC-20 we want to map to.``` json ./verus -chain=VRSCTEST definecurrency '{   \"name\":\"MyUSDC\",   \"options\":32,   \"systemid\":\"veth\",   \"parent\":\"vrsctest\",   \"launchsystemid\":\"vrsctest\",   \"nativecurrencyid\":{     \"type\":9,     \"address\":\"0x98339D8C260052B7ad81c28c16C0b98420f2B46a\"   },    \"initialsupply\":0,   \"proofprotocol\":3 }' ```After we put in the command, we get returned a HEX. We use this HEX to launch the currency on the network. Use the command below to launch the currency:``` json ./verus -chain=VRSCTEST sendrawtransaction \"HEX\" ```Now we have to wait a few blocks for the currency to be available on the network.",
            "./raw_text_input_docs/mapping-1:1-eth.md"
        ],
        [
            "How do I define a currency that is mapped 1:1 to an ERC-20 token on Ethereum?",
            "To define a currency that is mapped 1:1 to an ERC-20 token on Ethereum, you need to use the `definecurrency` command with the required parameters. The command should include the name of the currency, options, system ID, parent, launch system ID, native currency ID, initial supply, and proof protocol. The native currency ID should include the type and Ethereum smart contract address of the ERC-20 token you want to map to.",
            "# Launch currency with 1:1 mapping of ERC-20When defining a currency it can be mapped to an ERC-20 1:1. The currency on Verus and the ERC-20 on Ethereum are then always interchangeable 1 to 1. [More on the Verus-Ethereum Bridge.](/eth-bridge/)::: tip \u2194\ufe0f Verus-Ethereum Bridge \ud83d\udc68\u200d\ud83d\udd27 For Testnet! [\ud83d\udc49 Access the Verus-Ethereum Testnet Bridge](https://ethbridge.verustest.net/) (\u26a0\ufe0f Goerli testnet) :::::: tip \u2194\ufe0f Verus-Ethereum Bridge \u2705 For Mainnet! [\ud83d\udc49 Access the Verus-Ethereum Mainnet Bridge](https://eth.verusbridge.io) :::::: warning Need help setting up a currency launch? \ud83e\udd14 [\ud83d\udc49 Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord) :::### Defining the currency To create a currency of a specific name, we need a VerusID of the same name. The controller of this VerusID is the only one who can create a currency of that name, and we can only do so once.The cost for a VerusID on the Verus is ``100 VRSC`` (or 80 when using a referral). The cost to launch a currency is ``200 VRSC``. Before launching we need to have enough VRSC in the namespace VerusID.You can also use a .vETH subID. The cost to register a .vETH subID is an amount of Bridge.vETH (0.01 vETH worth).In our example we have a namespace ``MyUSDC`` with which we want to launch a currency that is mapped to the Ethereum ``USDC`` ERC-20 (on Goerli testnet, [see contract address](https://goerli.etherscan.io/address/0x98339D8C260052B7ad81c28c16C0b98420f2B46a)).Below is the command to map a currency 1:1 to an ERC-20 on Ethereum. The ``address`` field is the Ethereum smart contract address of the ERC-20 we want to map to.``` json ./verus -chain=VRSCTEST definecurrency '{   \"name\":\"MyUSDC\",   \"options\":32,   \"systemid\":\"veth\",   \"parent\":\"vrsctest\",   \"launchsystemid\":\"vrsctest\",   \"nativecurrencyid\":{     \"type\":9,     \"address\":\"0x98339D8C260052B7ad81c28c16C0b98420f2B46a\"   },    \"initialsupply\":0,   \"proofprotocol\":3 }' ```After we put in the command, we get returned a HEX. We use this HEX to launch the currency on the network. Use the command below to launch the currency:``` json ./verus -chain=VRSCTEST sendrawtransaction \"HEX\" ```Now we have to wait a few blocks for the currency to be available on the network.",
            "./raw_text_input_docs/mapping-1:1-eth.md"
        ],
        [
            "What do I do with the HEX returned after defining a currency?",
            "After defining a currency, you will receive a HEX code. You need to use this HEX code to launch the currency on the network by using the `sendrawtransaction` command with the HEX code as an argument. Then, you need to wait a few blocks for the currency to be available on the network.",
            "# Launch currency with 1:1 mapping of ERC-20When defining a currency it can be mapped to an ERC-20 1:1. The currency on Verus and the ERC-20 on Ethereum are then always interchangeable 1 to 1. [More on the Verus-Ethereum Bridge.](/eth-bridge/)::: tip \u2194\ufe0f Verus-Ethereum Bridge \ud83d\udc68\u200d\ud83d\udd27 For Testnet! [\ud83d\udc49 Access the Verus-Ethereum Testnet Bridge](https://ethbridge.verustest.net/) (\u26a0\ufe0f Goerli testnet) :::::: tip \u2194\ufe0f Verus-Ethereum Bridge \u2705 For Mainnet! [\ud83d\udc49 Access the Verus-Ethereum Mainnet Bridge](https://eth.verusbridge.io) :::::: warning Need help setting up a currency launch? \ud83e\udd14 [\ud83d\udc49 Go to the Verus Discord #pbaas-development channel. The community is happy to assist!](https://www.verus.io/discord) :::### Defining the currency To create a currency of a specific name, we need a VerusID of the same name. The controller of this VerusID is the only one who can create a currency of that name, and we can only do so once.The cost for a VerusID on the Verus is ``100 VRSC`` (or 80 when using a referral). The cost to launch a currency is ``200 VRSC``. Before launching we need to have enough VRSC in the namespace VerusID.You can also use a .vETH subID. The cost to register a .vETH subID is an amount of Bridge.vETH (0.01 vETH worth).In our example we have a namespace ``MyUSDC`` with which we want to launch a currency that is mapped to the Ethereum ``USDC`` ERC-20 (on Goerli testnet, [see contract address](https://goerli.etherscan.io/address/0x98339D8C260052B7ad81c28c16C0b98420f2B46a)).Below is the command to map a currency 1:1 to an ERC-20 on Ethereum. The ``address`` field is the Ethereum smart contract address of the ERC-20 we want to map to.``` json ./verus -chain=VRSCTEST definecurrency '{   \"name\":\"MyUSDC\",   \"options\":32,   \"systemid\":\"veth\",   \"parent\":\"vrsctest\",   \"launchsystemid\":\"vrsctest\",   \"nativecurrencyid\":{     \"type\":9,     \"address\":\"0x98339D8C260052B7ad81c28c16C0b98420f2B46a\"   },    \"initialsupply\":0,   \"proofprotocol\":3 }' ```After we put in the command, we get returned a HEX. We use this HEX to launch the currency on the network. Use the command below to launch the currency:``` json ./verus -chain=VRSCTEST sendrawtransaction \"HEX\" ```Now we have to wait a few blocks for the currency to be available on the network.",
            "./raw_text_input_docs/mapping-1:1-eth.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "9df3c712-14e9-49d2-b378-389f788e412f"
]