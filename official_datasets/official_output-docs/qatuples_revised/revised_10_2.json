[
    "What are the two major theoretical issues that Verus' staking algorithm solves in other PoS systems?",
    "Verus' staking algorithm solves the \"Nothing at Stake\" and \"Weak Subjectivity\" problems that undermine other PoS systems.",
    "To understand the VerusHash algorithm it helps to first separate the digest from the core. We then consider the Haraka512 V2 core as an abstract digest function that takes 512 bits (64 bytes) of input and produces 256 bits (32 bytes) of output. Given such a digest function, referred to as haraka512256, the most concise implementation of VerusHash, in any language to-date, is the following Python code for the VerusHash hash digest as follows:\" ``` py # verus_hash    def verus_hash(msg):      buf = [0] * 64      length = len(msg)      for i in range(0, length, 32):        clen = min(32, length - i)        buf[32:64] = [b for b in msg[i:i + clen]] + [0] * (32 - clen)        buf[0:32] = haraka512256(buf)      return bytes(buf[0:32]) ``` ## PoS Problems Solved Verus\u2019 staking algorithm solves the two major theoretical issues undermining other PoS systems, ``Nothing at Stake`` and ``Weak Subjectivity`` by leveraging its smart transaction capabilities to remove any incentive to attempt cheating, making it a losing proposition. [Read: How Verus Solved Proof of Stake\u2019s Two Biggest Problems: Nothing at Stake and Weak Subjectivity](https://medium.com/veruscoin/how-verus-solved-nothing-at-stake-and-weak-subjectivity-proof-of-stake-problems-b4dd6a85086e)",
    "./raw_text_input_docs/verus-proof-of-power.md"
]