[
    "## Conversation that answers the provided questions:\n**User:**\nI have a question about locked VerusIDs. How can you change the unlock time of a locked VerusID after it has been set?\n\n**AI Assistant:**\nUnfortunately, once you set a lock time for a VerusID, it can't be changed. It's protected by the blockchain, and any changes to the lock time would require a modification to the blockchain itself, which is not possible.\n\n**User:**\nThat makes sense. What happens if an attacker requests to unlock a locked VerusID, but the owner of the ID doesn't do anything?\n\n**AI Assistant:**\nIf an attacker requests to unlock a locked VerusID, but the owner of the ID doesn't do anything, the ID will still unlock after the predetermined amount of time has elapsed. However, this is where the revocation and recovery authorities come into play. The owner of the ID can use the revocation authority to revoke primary authority for the ID, preventing the attacker from withdrawing the funds, and then use the recovery authority to recover primary authority to a new address, effectively swapping out the controlling address.\n\n**User:**\nThat's a good point. I was also wondering, are unlock requests for a VerusID private or public?\n\n**AI Assistant:**\nUnlock requests for a VerusID are public. They are published on the blockchain, which allows the owner of the ID to set up an alert to notify them if an unlock request has been made.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "How can you change the unlock time of a locked VerusID after it has been set?",
            "You can't. Once you set a lock time for a VerusID, it can't be changed. It's protected by the blockchain, and any changes to the lock time would require a modification to the blockchain itself, which is not possible.",
            "ID:\nLocked indefinitely\nLocked and will unlock after\n1) an unlock has been requested and then\n2) a predetermined amount of time has elapsed\nUnlocked\nA VerusID can be in one of three states.\nWhen an ID is locked, its spending power can still be revoked. Revocation overrides locking. So, let\u2019s go back to our example and figure out how to really secure our funds.\nExample, Part B\nOnce again, Bob@ holds 1000 VRSC, but this time you can:\nAssign both revocation and recovery authority to the Alice@ address. (You could give revocation and recovery to different IDs, but for this example we\u2019ll put them both on the same one.)\nLock Bob@ with the condition that it won\u2019t unlock for 24 hours after unlocking is requested. Once you set a time, it can\u2019t be changed. It\u2019s protected by the blockchain.\nWith this design, you have complete a solution if a private key for Bob@ is compromised. Let\u2019s run through that scenario again.\nFirst, Bob@ is locked, so the attacker can\u2019t spend the 1000 VRSC. Instead, the attacker first has to request that Bob@ be unlocked. But you have cleverly configured Bob@ so it won\u2019t unlock until 24 hours after a request. You can use that time to safeguard your funds.\nUse Alice@ to revoke primary authority for Bob@. That prevents the attacker from withdrawing the funds.\nCreate a new address.\nUse Alice@ to recover primary authority to the new address. Bob@ is once again a functioning ID that you have primary authority over and that holds 1000 VRSC. You\u2019ve just swapped out a controlling address.\nThe attacker is now proud owner of private keys for an address that used to control Bob@ but now controls nothing.\nWhile this scenario tames the power of the private key, it also begs the question of how you know if an attacker has made an unlock request for Bob@? The answer is that requests are public \u2014 they\u2019re published on the blockchain. You can set an alert.\nIn Summary\nTwo b",
            "./raw_text_input_medium/How Verus Tames the Wild Private Key-2020-10-11 00:02:49"
        ],
        [
            "What happens if an attacker requests to unlock a locked VerusID, but the owner of the ID doesn't do anything?",
            "If an attacker requests to unlock a locked VerusID, but the owner of the ID doesn't do anything, the ID will still unlock after the predetermined amount of time has elapsed. However, this is where the revocation and recovery authorities come into play. The owner of the ID can use the revocation authority to revoke primary authority for the ID, preventing the attacker from withdrawing the funds, and then use the recovery authority to recover primary authority to a new address, effectively swapping out the controlling address.",
            "ID:\nLocked indefinitely\nLocked and will unlock after\n1) an unlock has been requested and then\n2) a predetermined amount of time has elapsed\nUnlocked\nA VerusID can be in one of three states.\nWhen an ID is locked, its spending power can still be revoked. Revocation overrides locking. So, let\u2019s go back to our example and figure out how to really secure our funds.\nExample, Part B\nOnce again, Bob@ holds 1000 VRSC, but this time you can:\nAssign both revocation and recovery authority to the Alice@ address. (You could give revocation and recovery to different IDs, but for this example we\u2019ll put them both on the same one.)\nLock Bob@ with the condition that it won\u2019t unlock for 24 hours after unlocking is requested. Once you set a time, it can\u2019t be changed. It\u2019s protected by the blockchain.\nWith this design, you have complete a solution if a private key for Bob@ is compromised. Let\u2019s run through that scenario again.\nFirst, Bob@ is locked, so the attacker can\u2019t spend the 1000 VRSC. Instead, the attacker first has to request that Bob@ be unlocked. But you have cleverly configured Bob@ so it won\u2019t unlock until 24 hours after a request. You can use that time to safeguard your funds.\nUse Alice@ to revoke primary authority for Bob@. That prevents the attacker from withdrawing the funds.\nCreate a new address.\nUse Alice@ to recover primary authority to the new address. Bob@ is once again a functioning ID that you have primary authority over and that holds 1000 VRSC. You\u2019ve just swapped out a controlling address.\nThe attacker is now proud owner of private keys for an address that used to control Bob@ but now controls nothing.\nWhile this scenario tames the power of the private key, it also begs the question of how you know if an attacker has made an unlock request for Bob@? The answer is that requests are public \u2014 they\u2019re published on the blockchain. You can set an alert.\nIn Summary\nTwo b",
            "./raw_text_input_medium/How Verus Tames the Wild Private Key-2020-10-11 00:02:49"
        ],
        [
            "Are unlock requests for a VerusID private or public?",
            "Unlock requests for a VerusID are public. They are published on the blockchain, which allows the owner of the ID to set up an alert to notify them if an unlock request has been made.",
            "ID:\nLocked indefinitely\nLocked and will unlock after\n1) an unlock has been requested and then\n2) a predetermined amount of time has elapsed\nUnlocked\nA VerusID can be in one of three states.\nWhen an ID is locked, its spending power can still be revoked. Revocation overrides locking. So, let\u2019s go back to our example and figure out how to really secure our funds.\nExample, Part B\nOnce again, Bob@ holds 1000 VRSC, but this time you can:\nAssign both revocation and recovery authority to the Alice@ address. (You could give revocation and recovery to different IDs, but for this example we\u2019ll put them both on the same one.)\nLock Bob@ with the condition that it won\u2019t unlock for 24 hours after unlocking is requested. Once you set a time, it can\u2019t be changed. It\u2019s protected by the blockchain.\nWith this design, you have complete a solution if a private key for Bob@ is compromised. Let\u2019s run through that scenario again.\nFirst, Bob@ is locked, so the attacker can\u2019t spend the 1000 VRSC. Instead, the attacker first has to request that Bob@ be unlocked. But you have cleverly configured Bob@ so it won\u2019t unlock until 24 hours after a request. You can use that time to safeguard your funds.\nUse Alice@ to revoke primary authority for Bob@. That prevents the attacker from withdrawing the funds.\nCreate a new address.\nUse Alice@ to recover primary authority to the new address. Bob@ is once again a functioning ID that you have primary authority over and that holds 1000 VRSC. You\u2019ve just swapped out a controlling address.\nThe attacker is now proud owner of private keys for an address that used to control Bob@ but now controls nothing.\nWhile this scenario tames the power of the private key, it also begs the question of how you know if an attacker has made an unlock request for Bob@? The answer is that requests are public \u2014 they\u2019re published on the blockchain. You can set an alert.\nIn Summary\nTwo b",
            "./raw_text_input_medium/How Verus Tames the Wild Private Key-2020-10-11 00:02:49"
        ]
    ]
]