[
    "Can I use the `setban` command through a JSON-RPC request?",
    "Yes, you can use the `setban` command through a JSON-RPC request. The JSON-RPC request should contain the `setban` method and the required parameters. For example:\n\n`curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\", 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/`\n\nThis will add the IP `192.168.0.6` to the banned list for 86400 seconds (24 hours).",
    "setban \"ip(/netmask)\" \"add|remove\" (bantime) (absolute) Attempts add or remove a IP/Subnet from the banned list. Arguments: 1. \"ip(/netmask)\" (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip) 2. \"command\"   (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list 3. \"bantime\"   (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument) 4. \"absolute\"   (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT) Examples: > verus setban \"192.168.0.6\" \"add\" 86400 > verus setban \"192.168.0.0/24\" \"add\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\" 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
    "./raw_text_input_api_text/setban"
]