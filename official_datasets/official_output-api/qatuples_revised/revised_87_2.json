[
    "What information does the `kvsearch` command return when a key is found?",
    "When a key is found, the `kvsearch` command returns a JSON object containing the following information:\n- `coin`: the chain the key is stored on\n- `currentheight`: the current height of the chain\n- `key`: the key itself\n- `keylen`: the length of the key\n- `owner`: a hex string representing the owner of the key\n- `height`: the height the key was stored at\n- `expiration`: the height the key will expire\n- `flags`: 1 if the key was created with a password, 0 otherwise\n- `value`: the stored value\n- `valuesize`: the amount of characters stored",
    "kvsearch key Search for a key stored via the kvupdate command. This feature is only available for asset chains. Arguments: 1. key           (string, required) search the chain for this key Result: {  \"coin\": \"xxxxx\",     (string) chain the key is stored on  \"currentheight\": xxxxx,   (numeric) current height of the chain  \"key\": \"xxxxx\",      (string) key  \"keylen\": xxxxx,      (string) length of the key  \"owner\": \"xxxxx\"     (string) hex string representing the owner of the key  \"height\": xxxxx,      (numeric) height the key was stored at  \"expiration\": xxxxx,    (numeric) height the key will expire  \"flags\": x         (numeric) 1 if the key was created with a password; 0 otherwise.  \"value\": \"xxxxx\",     (string) stored value  \"valuesize\": xxxxx     (string) amount of characters stored } Examples: > verus kvsearch examplekey > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"kvsearch\", \"params\": [examplekey] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
    "./raw_text_input_api_text/kvsearch"
]