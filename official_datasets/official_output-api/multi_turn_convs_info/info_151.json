[
    [
        [
            "What is the purpose of the `getrawtransaction` command in Verus?",
            "The `getrawtransaction` command in Verus is used to return the raw transaction data for a given transaction ID (txid). It can be used to retrieve information about a specific transaction.",
            "getrawtransaction \"txid\" ( verbose ) NOTE: By default this function only works sometimes. This is when the tx is in the mempool or there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option. Return the raw transaction data. If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'. If verbose is non-zero, returns an Object with information about 'txid'. Arguments: 1. \"txid\"   (string, required) The transaction id 2. verbose    (numeric, optional, default=0) If 0, return a string, other return a json object Result (if verbose is not set or set to 0): \"data\"   (string) The serialized, hex-encoded data for 'txid' Result (if verbose > 0): {  \"hex\" : \"data\",    (string) The serialized, hex-encoded data for 'txid'  \"txid\" : \"id\",    (string) The transaction id (same as provided)  \"version\" : n,     (numeric) The version  \"locktime\" : ttt,    (numeric) The lock time  \"expiryheight\" : ttt,  (numeric, optional) The block height after which the transaction expires  \"vin\" : [        (array of json objects)   {    \"txid\": \"id\",  (string) The transaction id    \"vout\": n,     (numeric)     \"scriptSig\": {   (json object) The script     \"asm\": \"asm\", (string) asm     \"hex\": \"hex\"  (string) hex    },    \"sequence\": n   (numeric) The script sequence number   }   ,...  ],  \"vout\" : [       (array of json objects)   {    \"value\" : x.xxx,      (numeric) The value in VRSC    \"n\" : n,          (numeric) index    \"scriptPubKey\" : {     (json object)     \"asm\" : \"asm\",     (string) the asm     \"hex\" : \"hex\",     (string) the hex     \"reqSigs\" : n,      (numeric) The required sigs     \"type\" : \"pubkeyhash\", (string) The type, eg 'pubkeyhash'     \"addresses\" : [      (json array of string)      \"address\"     (string) transparent address      ,...     ]    }   }   ,...  ],  \"vjoinsplit\" : [    (array of json objects, only for version >= 2)   {    \"vpub_old\" : x.xxx,     (numeric) public input value in KMD    \"vpub_new\" : x.xxx,     (numeric) public output value in KMD    \"anchor\" : \"hex\",     (string) the anchor    \"nul",
            "./raw_text_input_api_text/getrawtransaction"
        ],
        [
            "What are the two possible return formats of the `getrawtransaction` command?",
            "The `getrawtransaction` command can return data in two formats: \n\n1. A string that is serialized, hex-encoded data for the given transaction ID (when verbose=0).\n2. A JSON object with information about the transaction (when verbose is non-zero).",
            "getrawtransaction \"txid\" ( verbose ) NOTE: By default this function only works sometimes. This is when the tx is in the mempool or there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option. Return the raw transaction data. If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'. If verbose is non-zero, returns an Object with information about 'txid'. Arguments: 1. \"txid\"   (string, required) The transaction id 2. verbose    (numeric, optional, default=0) If 0, return a string, other return a json object Result (if verbose is not set or set to 0): \"data\"   (string) The serialized, hex-encoded data for 'txid' Result (if verbose > 0): {  \"hex\" : \"data\",    (string) The serialized, hex-encoded data for 'txid'  \"txid\" : \"id\",    (string) The transaction id (same as provided)  \"version\" : n,     (numeric) The version  \"locktime\" : ttt,    (numeric) The lock time  \"expiryheight\" : ttt,  (numeric, optional) The block height after which the transaction expires  \"vin\" : [        (array of json objects)   {    \"txid\": \"id\",  (string) The transaction id    \"vout\": n,     (numeric)     \"scriptSig\": {   (json object) The script     \"asm\": \"asm\", (string) asm     \"hex\": \"hex\"  (string) hex    },    \"sequence\": n   (numeric) The script sequence number   }   ,...  ],  \"vout\" : [       (array of json objects)   {    \"value\" : x.xxx,      (numeric) The value in VRSC    \"n\" : n,          (numeric) index    \"scriptPubKey\" : {     (json object)     \"asm\" : \"asm\",     (string) the asm     \"hex\" : \"hex\",     (string) the hex     \"reqSigs\" : n,      (numeric) The required sigs     \"type\" : \"pubkeyhash\", (string) The type, eg 'pubkeyhash'     \"addresses\" : [      (json array of string)      \"address\"     (string) transparent address      ,...     ]    }   }   ,...  ],  \"vjoinsplit\" : [    (array of json objects, only for version >= 2)   {    \"vpub_old\" : x.xxx,     (numeric) public input value in KMD    \"vpub_new\" : x.xxx,     (numeric) public output value in KMD    \"anchor\" : \"hex\",     (string) the anchor    \"nul",
            "./raw_text_input_api_text/getrawtransaction"
        ],
        [
            "What information is included in the JSON object returned by `getrawtransaction` when verbose is non-zero?",
            "The JSON object returned by `getrawtransaction` when verbose is non-zero includes the following information:\n\n* \"hex\" : The serialized, hex-encoded data for the transaction ID.\n* \"txid\" : The transaction ID (same as provided).\n* \"version\" : The version of the transaction.\n* \"locktime\" : The lock time of the transaction.\n* \"expiryheight\" : The block height after which the transaction expires (optional).\n* \"vin\" : An array of JSON objects containing information about the transaction inputs.\n* \"vout\" : An array of JSON objects containing information about the transaction outputs.\n* \"vjoinsplit\" : An array of JSON objects containing information about the transaction's vjoinsplit (only for version >= 2).",
            "getrawtransaction \"txid\" ( verbose ) NOTE: By default this function only works sometimes. This is when the tx is in the mempool or there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option. Return the raw transaction data. If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'. If verbose is non-zero, returns an Object with information about 'txid'. Arguments: 1. \"txid\"   (string, required) The transaction id 2. verbose    (numeric, optional, default=0) If 0, return a string, other return a json object Result (if verbose is not set or set to 0): \"data\"   (string) The serialized, hex-encoded data for 'txid' Result (if verbose > 0): {  \"hex\" : \"data\",    (string) The serialized, hex-encoded data for 'txid'  \"txid\" : \"id\",    (string) The transaction id (same as provided)  \"version\" : n,     (numeric) The version  \"locktime\" : ttt,    (numeric) The lock time  \"expiryheight\" : ttt,  (numeric, optional) The block height after which the transaction expires  \"vin\" : [        (array of json objects)   {    \"txid\": \"id\",  (string) The transaction id    \"vout\": n,     (numeric)     \"scriptSig\": {   (json object) The script     \"asm\": \"asm\", (string) asm     \"hex\": \"hex\"  (string) hex    },    \"sequence\": n   (numeric) The script sequence number   }   ,...  ],  \"vout\" : [       (array of json objects)   {    \"value\" : x.xxx,      (numeric) The value in VRSC    \"n\" : n,          (numeric) index    \"scriptPubKey\" : {     (json object)     \"asm\" : \"asm\",     (string) the asm     \"hex\" : \"hex\",     (string) the hex     \"reqSigs\" : n,      (numeric) The required sigs     \"type\" : \"pubkeyhash\", (string) The type, eg 'pubkeyhash'     \"addresses\" : [      (json array of string)      \"address\"     (string) transparent address      ,...     ]    }   }   ,...  ],  \"vjoinsplit\" : [    (array of json objects, only for version >= 2)   {    \"vpub_old\" : x.xxx,     (numeric) public input value in KMD    \"vpub_new\" : x.xxx,     (numeric) public output value in KMD    \"anchor\" : \"hex\",     (string) the anchor    \"nul",
            "./raw_text_input_api_text/getrawtransaction"
        ],
        [
            "Why does the `getrawtransaction` command only work sometimes by default?",
            "The `getrawtransaction` command only works sometimes by default because it only returns data if the transaction is in the mempool or there is an unspent output in the UTXO for the transaction. To make it always work, you need to maintain a transaction index using the `-txindex` command-line option.",
            "getrawtransaction \"txid\" ( verbose ) NOTE: By default this function only works sometimes. This is when the tx is in the mempool or there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option. Return the raw transaction data. If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'. If verbose is non-zero, returns an Object with information about 'txid'. Arguments: 1. \"txid\"   (string, required) The transaction id 2. verbose    (numeric, optional, default=0) If 0, return a string, other return a json object Result (if verbose is not set or set to 0): \"data\"   (string) The serialized, hex-encoded data for 'txid' Result (if verbose > 0): {  \"hex\" : \"data\",    (string) The serialized, hex-encoded data for 'txid'  \"txid\" : \"id\",    (string) The transaction id (same as provided)  \"version\" : n,     (numeric) The version  \"locktime\" : ttt,    (numeric) The lock time  \"expiryheight\" : ttt,  (numeric, optional) The block height after which the transaction expires  \"vin\" : [        (array of json objects)   {    \"txid\": \"id\",  (string) The transaction id    \"vout\": n,     (numeric)     \"scriptSig\": {   (json object) The script     \"asm\": \"asm\", (string) asm     \"hex\": \"hex\"  (string) hex    },    \"sequence\": n   (numeric) The script sequence number   }   ,...  ],  \"vout\" : [       (array of json objects)   {    \"value\" : x.xxx,      (numeric) The value in VRSC    \"n\" : n,          (numeric) index    \"scriptPubKey\" : {     (json object)     \"asm\" : \"asm\",     (string) the asm     \"hex\" : \"hex\",     (string) the hex     \"reqSigs\" : n,      (numeric) The required sigs     \"type\" : \"pubkeyhash\", (string) The type, eg 'pubkeyhash'     \"addresses\" : [      (json array of string)      \"address\"     (string) transparent address      ,...     ]    }   }   ,...  ],  \"vjoinsplit\" : [    (array of json objects, only for version >= 2)   {    \"vpub_old\" : x.xxx,     (numeric) public input value in KMD    \"vpub_new\" : x.xxx,     (numeric) public output value in KMD    \"anchor\" : \"hex\",     (string) the anchor    \"nul",
            "./raw_text_input_api_text/getrawtransaction"
        ],
        [
            "What is the purpose of the `-txindex` command-line option in Verus?",
            "The `-txindex` command-line option in Verus is used to maintain a transaction index, which allows the `getrawtransaction` command to always return data for a given transaction ID, even if the transaction is not in the mempool or there is no unspent output in the UTXO.",
            "getrawtransaction \"txid\" ( verbose ) NOTE: By default this function only works sometimes. This is when the tx is in the mempool or there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option. Return the raw transaction data. If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'. If verbose is non-zero, returns an Object with information about 'txid'. Arguments: 1. \"txid\"   (string, required) The transaction id 2. verbose    (numeric, optional, default=0) If 0, return a string, other return a json object Result (if verbose is not set or set to 0): \"data\"   (string) The serialized, hex-encoded data for 'txid' Result (if verbose > 0): {  \"hex\" : \"data\",    (string) The serialized, hex-encoded data for 'txid'  \"txid\" : \"id\",    (string) The transaction id (same as provided)  \"version\" : n,     (numeric) The version  \"locktime\" : ttt,    (numeric) The lock time  \"expiryheight\" : ttt,  (numeric, optional) The block height after which the transaction expires  \"vin\" : [        (array of json objects)   {    \"txid\": \"id\",  (string) The transaction id    \"vout\": n,     (numeric)     \"scriptSig\": {   (json object) The script     \"asm\": \"asm\", (string) asm     \"hex\": \"hex\"  (string) hex    },    \"sequence\": n   (numeric) The script sequence number   }   ,...  ],  \"vout\" : [       (array of json objects)   {    \"value\" : x.xxx,      (numeric) The value in VRSC    \"n\" : n,          (numeric) index    \"scriptPubKey\" : {     (json object)     \"asm\" : \"asm\",     (string) the asm     \"hex\" : \"hex\",     (string) the hex     \"reqSigs\" : n,      (numeric) The required sigs     \"type\" : \"pubkeyhash\", (string) The type, eg 'pubkeyhash'     \"addresses\" : [      (json array of string)      \"address\"     (string) transparent address      ,...     ]    }   }   ,...  ],  \"vjoinsplit\" : [    (array of json objects, only for version >= 2)   {    \"vpub_old\" : x.xxx,     (numeric) public input value in KMD    \"vpub_new\" : x.xxx,     (numeric) public output value in KMD    \"anchor\" : \"hex\",     (string) the anchor    \"nul",
            "./raw_text_input_api_text/getrawtransaction"
        ]
    ],
    "will",
    "be",
    "replaced",
    "53d12902-15de-4a44-bee7-42a0d2a3a39b"
]