[
    "## Conversation that answers the provided questions:\n**User:**\nI've been reading about VerusIDs, and I'm a bit confused. Can you explain why VerusIDs are not recoverable?\n\n**AI Assistant:**\nActually, that's a misconception! VerusIDs are recoverable. Each ID includes a separate recovery authority, which defaults to the ID itself, and can recover the identity through redefining its primary state and the recovery state as well. This means that if an ID is revoked, it can be recovered by the recovery authority. So, you don't have to worry about losing access to your ID permanently.\n\n**User:**\nThat's good to know! I was also wondering, are VerusIDs completely public and lack any private features?\n\n**AI Assistant:**\nNo, VerusIDs are not completely public and do have private features. Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints. Additionally, each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide private yet selectively provable claims and attestations. So, you can have control over what information you share and with whom.\n\n**User:**\nI've been looking into VerusHash, and I was wondering, does VerusHash 2.1 completely block FPGAs from operating on the hash algorithm?\n\n**AI Assistant:**\nNo, VerusHash 2.1 does not completely block FPGAs from operating on the hash algorithm. While the algorithm is designed to equalize FPGAs and modern CPUs, FPGAs can still operate on the hash algorithm with minor modifications. In fact, Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake on the network. This way, the playing field is level for everyone.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "Can you explain why VerusIDs are not recoverable?",
            "Actually, VerusIDs are recoverable. Each ID includes a separate recovery authority, which defaults to the ID itself, and can recover the identity through redefining its primary state and the recovery state as well. This means that if an ID is revoked, it can be recovered by the recovery authority.",
            "- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.\n# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.\n# Disclaimer",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "Are VerusIDs completely public and lack any private features?",
            "No, VerusIDs are not completely public and do have private features. Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints. Additionally, each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide private yet selectively provable claims and attestations.",
            "- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.\n# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.\n# Disclaimer",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "Does VerusHash 2.1 completely block FPGAs from operating on the hash algorithm?",
            "No, VerusHash 2.1 does not completely block FPGAs from operating on the hash algorithm. While the algorithm is designed to equalize FPGAs and modern CPUs, FPGAs can still operate on the hash algorithm with minor modifications. In fact, Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake on the network.",
            "- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.\n# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.\n# Disclaimer",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]