[
    "## Conversation that answers the provided questions:\n**User:**\nI'm having some trouble with creating a multi-signature ID. When I use the `verus sendcurrency` command, how do I get the raw transaction data directly from it?\n\n**AI Assistant:**\nYou don't actually get the raw transaction data directly from the `verus sendcurrency` command. Instead, you need to use the `verus z_getoperationstatus` command with the operation ID returned by `verus sendcurrency` to get the raw transaction data. This should help you get the data you need. Do you have any other questions about this process or multi-signature IDs in general?\n\n**User:**\nAnother question I have is about tokenizing ID control. I've heard that to do this, I need to set the max supply of the currency to a value greater than 1 satoshi. Is that correct?\n\n**AI Assistant:**\nNo, that's not quite correct. To tokenize ID control, you need to set the max supply of the currency to 1 satoshi, not greater than 1 satoshi. This is specified in the currency definition with the flags OPTION_NFT_TOKEN + OPTION_TOKEN. Setting the max supply to 1 satoshi is what allows you to tokenize ID control. I hope that clears things up! Do you have any other questions about tokenizing ID control or Verus in general?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "When creating a multi-signature ID, how do you get the raw transaction data directly from the `verus sendcurrency` command?",
            "You don't get the raw transaction data directly from the `verus sendcurrency` command. Instead, you need to use the `verus z_getoperationstatus` command with the operation ID returned by `verus sendcurrency` to get the raw transaction data.",
            "## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "To tokenize ID control, do you need to set the max supply of the currency to a value greater than 1 satoshi?",
            "No, to tokenize ID control, you need to set the max supply of the currency to 1 satoshi, not greater than 1 satoshi. This is specified in the currency definition with the flags OPTION_NFT_TOKEN + OPTION_TOKEN.",
            "## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]