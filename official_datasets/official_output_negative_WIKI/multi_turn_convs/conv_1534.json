[
    "## Conversation that answers the provided questions:\n**User:**\nHey, I've been playing around with some Verus commands and I'm not entirely sure what they do. Can you help me out? Specifically, what is the purpose of the `migrate_converttoexport` command?\n\n**AI Assistant:**\nThe `migrate_converttoexport` command is used to convert a raw transaction to a cross-chain export. This is not a command to create a new blockchain, as you might have thought. It's a utility command to help with transaction processing. Do you have any other questions about this command or Verus in general?\n\n**User:**\nYeah, I've got another question. Can I use the `z_getpaymentdisclosure` command without any additional setup?\n\n**AI Assistant:**\nNo, you cannot use the `z_getpaymentdisclosure` command without additional setup. This command is an experimental feature and is disabled by default. To enable it, you need to restart verusd with the `-experimentalfeatures` and `-paymentdisclosure` command-line options, or add these two lines to the zcash.conf file: `experimentalfeatures=1` and `paymentdisclosure=1`. Have you tried enabling it before?\n\n**User:**\nOne more question. Is the `scanNotarisationsDB` command used to create a new notarization?\n\n**AI Assistant:**\nNo, the `scanNotarisationsDB` command is not used to create a new notarization. It is used to scan notarisationsdb backwards from a given height for a notarisation of a specific symbol. It's a command to query and analyze existing notarizations, not to create new ones. Do you have any more questions about Verus or its commands?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What is the purpose of the `migrate_converttoexport` command?",
            "The `migrate_converttoexport` command is used to convert a raw transaction to a cross-chain export. This is not a command to create a new blockchain, as you might have thought.",
            "### `migrate_converttoexport rawTx dest_symbol export_amount`\nConvert a raw transaction to a cross-chain export.\nIf necesary, the transaction should be funded using `fundrawtransaction`.\nFinally, the transaction should be signed using `signrawtransaction`.\nThe finished export transaction, plus the payouts, should be passed to the \"`migrate_createimporttransactio`n\" method on a KMD node to get the corresponding import transaction.### `migrate_createimporttransaction burnTx payouts`\nCreate an importTx given a burnTx and the corresponding payouts, hex encoded### `scanNotarisationsDB blockHeight symbol [blocksLimit=1440]`\nScans notarisationsdb backwards from height for a notarisation of given symbol## Disclosure\n### `z_getpaymentdisclosure \"txid\" \"js_index\" \"output_index\" (\"message\")`\nGenerate a payment disclosure for a given joinsplit output.EXPERIMENTAL FEATUREWARNING: z_getpaymentdisclosure is disabled.\nTo enable it, restart verusd with the `-experimentalfeatures` and `-paymentdisclosure` commandline options, or add these two lines to the zcash.conf file:\n```\nexperimentalfeatures=1\npaymentdisclosure=1\n```\n#### Arguments:\n```\n1. \"txid\"      (string, required)\n2. \"js_index\"    (string, required)\n3. \"output_index\"  (string, required)\n4. \"message\"     (string, optional)\n```\n#### Result:\n```\n\"paymentdisclosure\" (string) Hex data string, with \"zpd:\" prefix.\n```\nExamples:\n```bash\n> verus z_getpaymentdisclosure 96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2 0 0 \"refund\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getpaymentdisclosure\", \"params\": [\"96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2\", 0, 0, \"refund\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_validatepaymentdisclosure \"paymentdisclosure\"`\nValidates a payment disclosure.EXPERIMENTAL FEATURE",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "Can I use the `z_getpaymentdisclosure` command without any additional setup?",
            "No, you cannot use the `z_getpaymentdisclosure` command without additional setup. This command is an experimental feature and is disabled by default. To enable it, you need to restart verusd with the `-experimentalfeatures` and `-paymentdisclosure` command-line options, or add these two lines to the zcash.conf file: `experimentalfeatures=1` and `paymentdisclosure=1`.",
            "### `migrate_converttoexport rawTx dest_symbol export_amount`\nConvert a raw transaction to a cross-chain export.\nIf necesary, the transaction should be funded using `fundrawtransaction`.\nFinally, the transaction should be signed using `signrawtransaction`.\nThe finished export transaction, plus the payouts, should be passed to the \"`migrate_createimporttransactio`n\" method on a KMD node to get the corresponding import transaction.### `migrate_createimporttransaction burnTx payouts`\nCreate an importTx given a burnTx and the corresponding payouts, hex encoded### `scanNotarisationsDB blockHeight symbol [blocksLimit=1440]`\nScans notarisationsdb backwards from height for a notarisation of given symbol## Disclosure\n### `z_getpaymentdisclosure \"txid\" \"js_index\" \"output_index\" (\"message\")`\nGenerate a payment disclosure for a given joinsplit output.EXPERIMENTAL FEATUREWARNING: z_getpaymentdisclosure is disabled.\nTo enable it, restart verusd with the `-experimentalfeatures` and `-paymentdisclosure` commandline options, or add these two lines to the zcash.conf file:\n```\nexperimentalfeatures=1\npaymentdisclosure=1\n```\n#### Arguments:\n```\n1. \"txid\"      (string, required)\n2. \"js_index\"    (string, required)\n3. \"output_index\"  (string, required)\n4. \"message\"     (string, optional)\n```\n#### Result:\n```\n\"paymentdisclosure\" (string) Hex data string, with \"zpd:\" prefix.\n```\nExamples:\n```bash\n> verus z_getpaymentdisclosure 96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2 0 0 \"refund\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getpaymentdisclosure\", \"params\": [\"96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2\", 0, 0, \"refund\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_validatepaymentdisclosure \"paymentdisclosure\"`\nValidates a payment disclosure.EXPERIMENTAL FEATURE",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "Is the `scanNotarisationsDB` command used to create a new notarization?",
            "No, the `scanNotarisationsDB` command is not used to create a new notarization. It is used to scan notarisationsdb backwards from a given height for a notarisation of a specific symbol.",
            "### `migrate_converttoexport rawTx dest_symbol export_amount`\nConvert a raw transaction to a cross-chain export.\nIf necesary, the transaction should be funded using `fundrawtransaction`.\nFinally, the transaction should be signed using `signrawtransaction`.\nThe finished export transaction, plus the payouts, should be passed to the \"`migrate_createimporttransactio`n\" method on a KMD node to get the corresponding import transaction.### `migrate_createimporttransaction burnTx payouts`\nCreate an importTx given a burnTx and the corresponding payouts, hex encoded### `scanNotarisationsDB blockHeight symbol [blocksLimit=1440]`\nScans notarisationsdb backwards from height for a notarisation of given symbol## Disclosure\n### `z_getpaymentdisclosure \"txid\" \"js_index\" \"output_index\" (\"message\")`\nGenerate a payment disclosure for a given joinsplit output.EXPERIMENTAL FEATUREWARNING: z_getpaymentdisclosure is disabled.\nTo enable it, restart verusd with the `-experimentalfeatures` and `-paymentdisclosure` commandline options, or add these two lines to the zcash.conf file:\n```\nexperimentalfeatures=1\npaymentdisclosure=1\n```\n#### Arguments:\n```\n1. \"txid\"      (string, required)\n2. \"js_index\"    (string, required)\n3. \"output_index\"  (string, required)\n4. \"message\"     (string, optional)\n```\n#### Result:\n```\n\"paymentdisclosure\" (string) Hex data string, with \"zpd:\" prefix.\n```\nExamples:\n```bash\n> verus z_getpaymentdisclosure 96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2 0 0 \"refund\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getpaymentdisclosure\", \"params\": [\"96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2\", 0, 0, \"refund\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_validatepaymentdisclosure \"paymentdisclosure\"`\nValidates a payment disclosure.EXPERIMENTAL FEATURE",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ]
]