[
    "## Conversation that answers the provided questions:\n**User:**\nI have a question about submitting notarizations using the Verus command line. How can I submit an accepted notarization using the Verus command line?\n\n**AI Assistant:**\nTo submit an accepted notarization using the Verus command line, you can use the following command:\n```\nverus submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\"\n```\nThis command submits an accepted notarization to the network. You can also use the JSON-RPC API to submit the notarization using curl:\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitacceptednotarization\", \"params\": [\"{earnednotarization}\" \"{notaryevidence}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\nDo you have any other questions about submitting notarizations?\n\n**User:**\nActually, I do! What is the purpose of the `submitchallenges` command in Verus?\n\n**AI Assistant:**\nThe `submitchallenges` command in Verus is used to submit one or more cryptographic challenges to existing, unconfirmed notarizations, proving the existence of an alternate chain. This command requires that the local wallet have funds for fees. It's an important tool for ensuring the integrity of the network.\n\n**User:**\nThat makes sense. What are the arguments required for the `submitchallenges` command in Verus?\n\n**AI Assistant:**\nThe `submitchallenges` command in Verus requires a JSON array of challenges to unconfirmed notarizations on the system. Each challenge object in the array must contain the following properties:\n* `type`: the type of challenge (e.g. \"vrsc::evidence.skipchallenge\" or \"vrsc::evidence.validitychallenge\")\n* `notarizationref`: a reference to the notarization being challenged, including the transaction ID and output number\n* `forkroot`: information about the fork root\n* `challengeroot`: information about the challenge root\n* `evidence`: evidence supporting the challenge\n\n**User:**\nOkay, I think I understand. How can I submit a challenge to an unconfirmed notarization using the Verus command line?\n\n**AI Assistant:**\nTo submit a challenge to an unconfirmed notarization using the Verus command line, you can use the following command:\n```\nverus submitchallenges '[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]'\n```\nThis command submits a challenge to the specified notarization. You can also use the JSON-RPC API to submit the challenge using curl:\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitchallenges\", \"params\": [[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\nDo you have any more questions about submitting challenges?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "How can I submit an accepted notarization using the Verus command line?",
            "To submit an accepted notarization using the Verus command line, you can use the following command:\n```\nverus submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\"\n```\nThis command submits an accepted notarization to the network. You can also use the JSON-RPC API to submit the notarization using curl:\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitacceptednotarization\", \"params\": [\"{earnednotarization}\" \"{notaryevidence}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "Examples:\n```bash\n> verus submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitacceptednotarization\", \"params\": [\"{earnednotarization}\" \"{notaryevidence}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `submitchallenges [json array]`\nSubmits one or more cryptographic challenges to existing, unconfirmed notarizations, proving the existence\nof an alternate chain. Whether the alternate chain has more power than the chain with a pending notarization\nis not required, only that it has moved forward multiple blocks since the prior notarization.Requires that the local wallet have funds for fees.#### Arguments:\n\"challenges\"         (array, required) one or more challenges to unconfirmed notarizations on this system\n```json\n[\n {\n  \"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\" ||\n            \"type\":\"vrsc::evidence.validitychallenge\" || \"iCPb8ywQna7jYV2SHrGZ6vQMj7kuyWFxvb\",\n  \"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\n  \"forkroot\":{},\n  \"challengeroot\":{},\n  \"evidence\":{}\n },\n {...},\n  ...\n]\n```#### Result:\n```json\n[{\"txid\":\"hex\"}, {\"error\":\"errorstring\"}, ...]  (array) results of submitted challenge transactions\n```#### Examples:\n```bash\n> verus submitchallenges '[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitchallenges\", \"params\": [[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `submitchallenges` command in Verus?",
            "The `submitchallenges` command in Verus is used to submit one or more cryptographic challenges to existing, unconfirmed notarizations, proving the existence of an alternate chain. This command requires that the local wallet have funds for fees.",
            "Examples:\n```bash\n> verus submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitacceptednotarization\", \"params\": [\"{earnednotarization}\" \"{notaryevidence}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `submitchallenges [json array]`\nSubmits one or more cryptographic challenges to existing, unconfirmed notarizations, proving the existence\nof an alternate chain. Whether the alternate chain has more power than the chain with a pending notarization\nis not required, only that it has moved forward multiple blocks since the prior notarization.Requires that the local wallet have funds for fees.#### Arguments:\n\"challenges\"         (array, required) one or more challenges to unconfirmed notarizations on this system\n```json\n[\n {\n  \"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\" ||\n            \"type\":\"vrsc::evidence.validitychallenge\" || \"iCPb8ywQna7jYV2SHrGZ6vQMj7kuyWFxvb\",\n  \"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\n  \"forkroot\":{},\n  \"challengeroot\":{},\n  \"evidence\":{}\n },\n {...},\n  ...\n]\n```#### Result:\n```json\n[{\"txid\":\"hex\"}, {\"error\":\"errorstring\"}, ...]  (array) results of submitted challenge transactions\n```#### Examples:\n```bash\n> verus submitchallenges '[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitchallenges\", \"params\": [[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What are the arguments required for the `submitchallenges` command in Verus?",
            "The `submitchallenges` command in Verus requires a JSON array of challenges to unconfirmed notarizations on the system. Each challenge object in the array must contain the following properties:\n* `type`: the type of challenge (e.g. \"vrsc::evidence.skipchallenge\" or \"vrsc::evidence.validitychallenge\")\n* `notarizationref`: a reference to the notarization being challenged, including the transaction ID and output number\n* `forkroot`: information about the fork root\n* `challengeroot`: information about the challenge root\n* `evidence`: evidence supporting the challenge",
            "Examples:\n```bash\n> verus submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitacceptednotarization\", \"params\": [\"{earnednotarization}\" \"{notaryevidence}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `submitchallenges [json array]`\nSubmits one or more cryptographic challenges to existing, unconfirmed notarizations, proving the existence\nof an alternate chain. Whether the alternate chain has more power than the chain with a pending notarization\nis not required, only that it has moved forward multiple blocks since the prior notarization.Requires that the local wallet have funds for fees.#### Arguments:\n\"challenges\"         (array, required) one or more challenges to unconfirmed notarizations on this system\n```json\n[\n {\n  \"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\" ||\n            \"type\":\"vrsc::evidence.validitychallenge\" || \"iCPb8ywQna7jYV2SHrGZ6vQMj7kuyWFxvb\",\n  \"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\n  \"forkroot\":{},\n  \"challengeroot\":{},\n  \"evidence\":{}\n },\n {...},\n  ...\n]\n```#### Result:\n```json\n[{\"txid\":\"hex\"}, {\"error\":\"errorstring\"}, ...]  (array) results of submitted challenge transactions\n```#### Examples:\n```bash\n> verus submitchallenges '[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitchallenges\", \"params\": [[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "How can I submit a challenge to an unconfirmed notarization using the Verus command line?",
            "To submit a challenge to an unconfirmed notarization using the Verus command line, you can use the following command:\n```\nverus submitchallenges '[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]'\n```\nThis command submits a challenge to the specified notarization. You can also use the JSON-RPC API to submit the challenge using curl:\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitchallenges\", \"params\": [[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "Examples:\n```bash\n> verus submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitacceptednotarization\", \"params\": [\"{earnednotarization}\" \"{notaryevidence}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `submitchallenges [json array]`\nSubmits one or more cryptographic challenges to existing, unconfirmed notarizations, proving the existence\nof an alternate chain. Whether the alternate chain has more power than the chain with a pending notarization\nis not required, only that it has moved forward multiple blocks since the prior notarization.Requires that the local wallet have funds for fees.#### Arguments:\n\"challenges\"         (array, required) one or more challenges to unconfirmed notarizations on this system\n```json\n[\n {\n  \"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\" ||\n            \"type\":\"vrsc::evidence.validitychallenge\" || \"iCPb8ywQna7jYV2SHrGZ6vQMj7kuyWFxvb\",\n  \"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\n  \"forkroot\":{},\n  \"challengeroot\":{},\n  \"evidence\":{}\n },\n {...},\n  ...\n]\n```#### Result:\n```json\n[{\"txid\":\"hex\"}, {\"error\":\"errorstring\"}, ...]  (array) results of submitted challenge transactions\n```#### Examples:\n```bash\n> verus submitchallenges '[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitchallenges\", \"params\": [[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ]
]