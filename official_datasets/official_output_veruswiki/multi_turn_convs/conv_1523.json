[
    "## Conversation that answers the provided questions:\n**User:**\nHi, I'm working on creating a new currency in Verus and I had a question. What does `proofprotocol` being set to 2 mean when defining a new currency?\n\n**AI Assistant:**\nWhen `proofprotocol` is set to 2 when defining a new currency in Verus, it means that the proof protocol is set to PROOF_CHAINID. This means that the controller of the chain ID can mint new coins.\n\n**User:**\nOkay, that makes sense. So how can I mint new coins in a currency that has `proofprotocol` set to 2?\n\n**AI Assistant:**\nTo mint new coins in a currency that has `proofprotocol` set to 2, you can use the `sendcurrency` command with the `mintnew` option. For example:\n\n```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\n\nThis command mints 10,000 new `mycoin` coins and sends them to the address `mike@`.\n\n**User:**\nGot it, thanks for the help. I'm also working on setting up a PBaaS blockchain in Verus and I was wondering, what are the main components of a PBaaS blockchain definition in Verus?\n\n**AI Assistant:**\nThe main components of a PBaaS blockchain definition in Verus include:\n\n* `name`: the name of the blockchain\n* `options`: a configurable integer\n* `currencies`: a list of currencies that can be used on the blockchain\n* `conversions`: a list of conversion ratios between currencies\n* `eras`: a list of eras with their block reward, decay, halving, and end\n* `notaries`: a list of VerusIDs that serve as notaries on the blockchain\n* `minnotariesconfirm`: the minimum number of notaries required to confirm a block\n* `nodes`: a list of nodes on the blockchain with their network addresses and identities\n* `gatewayconvertername`: the name of the gateway converter\n* `gatewayconverterissuance`: the initial issuance of the gateway converter\n\nThese components define the structure and behavior of your PBaaS blockchain in Verus.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What does `proofprotocol` being set to 2 mean when defining a new currency in Verus?",
            "When `proofprotocol` is set to 2 when defining a new currency in Verus, it means that the proof protocol is set to PROOF_CHAINID. This means that the controller of the chain ID can mint new coins.",
            "```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "How can I mint new coins in a currency that has `proofprotocol` set to 2?",
            "To mint new coins in a currency that has `proofprotocol` set to 2, you can use the `sendcurrency` command with the `mintnew` option. For example:\n\n```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\n\nThis command mints 10,000 new `mycoin` coins and sends them to the address `mike@`.",
            "```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "What are the main components of a PBaaS blockchain definition in Verus?",
            "The main components of a PBaaS blockchain definition in Verus include:\n\n* `name`: the name of the blockchain\n* `options`: a configurable integer\n* `currencies`: a list of currencies that can be used on the blockchain\n* `conversions`: a list of conversion ratios between currencies\n* `eras`: a list of eras with their block reward, decay, halving, and end\n* `notaries`: a list of VerusIDs that serve as notaries on the blockchain\n* `minnotariesconfirm`: the minimum number of notaries required to confirm a block\n* `nodes`: a list of nodes on the blockchain with their network addresses and identities\n* `gatewayconvertername`: the name of the gateway converter\n* `gatewayconverterissuance`: the initial issuance of the gateway converter",
            "```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]