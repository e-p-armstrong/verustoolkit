[
    "## Conversation that answers the provided questions:\n**User:**\nHey, I'm playing around with Verus and I'm trying to create my own token. I've heard of the `definecurrency` command, but I'm not entirely sure how to use it. Can you help me out?\n\n**AI Assistant:**\nThe `definecurrency` command in Verus is used to create a new token with specific properties. Let me give you an example. For instance, the command:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":96, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"conversions\":[0.01, 1.0],\"minpreconversion\":[1000,1000]}'\n```\ndefines a new token called \"mycoin\" with the following properties:\n\n* `options`: an integer value that determines the behavior of the token\n* `proofprotocol`: set to 2, which means that the controller of the chain ID can mint new coins\n* `currencies`: a list of currencies that \"mycoin\" can be converted to/from\n* `conversions`: a list of conversion rates between \"mycoin\" and the listed currencies\n* `minpreconversion`: a list of minimum amounts required for conversion between \"mycoin\" and the listed currencies\n\nDo you have any specific questions about this example, or would you like to know more about a particular property?\n\n**User:**\nActually, I'm curious about the `proofprotocol` property. What does it mean when it's set to 2?\n\n**AI Assistant:**\nWhen `proofprotocol` is set to 2 in a token definition, it means that the token uses the PROOF_CHAINID proof protocol. This allows the controller of the chain ID to mint new tokens. For example, in the case of \"mycoin\", the controller can mint new tokens using the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\nThis command mints 10,000 new \"mycoin\" tokens and sends them to the address \"mike@\". Does that make sense?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What does the `definecurrency` command do in Verus, and how can I use it to create a new token?",
            "The `definecurrency` command in Verus is used to create a new token with specific properties. For example, the command:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":96, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"conversions\":[0.01, 1.0],\"minpreconversion\":[1000,1000]}'\n```\ndefines a new token called \"mycoin\" with the following properties:\n\n* `options`: an integer value that determines the behavior of the token\n* `proofprotocol`: set to 2, which means that the controller of the chain ID can mint new coins\n* `currencies`: a list of currencies that \"mycoin\" can be converted to/from\n* `conversions`: a list of conversion rates between \"mycoin\" and the listed currencies\n* `minpreconversion`: a list of minimum amounts required for conversion between \"mycoin\" and the listed currencies",
            "```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":96, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"conversions\":[0.01, 1.0],\"minpreconversion\":[1000,1000]}'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "What does it mean when `proofprotocol` is set to 2 in a token definition?",
            "When `proofprotocol` is set to 2 in a token definition, it means that the token uses the PROOF_CHAINID proof protocol. This allows the controller of the chain ID to mint new tokens. For example, in the case of \"mycoin\", the controller can mint new tokens using the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\nThis command mints 10,000 new \"mycoin\" tokens and sends them to the address \"mike@\".",
            "```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":96, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"conversions\":[0.01, 1.0],\"minpreconversion\":[1000,1000]}'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]