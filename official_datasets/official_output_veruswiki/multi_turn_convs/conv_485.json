[
    "## Conversation that answers the provided questions:\n**User:**\nI'm trying to understand the capabilities of the Verus network. What kind of blockchains are supported by the Verus network, and how do they interact with each other?\n\n**AI Assistant:**\nThe Verus network is very versatile. It supports both public blockchains and private, internal blockchains. These private blockchains can be easily set up and bridged with public currencies, allowing organizations to have their own internal blockchain networks with all the features and currencies of the public chain, but without the public access. There is no limit to the number of blockchains that can operate and interoperate on the Verus network, making it a fractal model that enables unlimited simultaneously operating, interoperable blockchains. Does that make sense? Do you have any other questions about the Verus network?\n\n**User:**\nActually, yes, I do. I want to know more about locking IDs on the Verus network. How can I lock an ID on the Verus network, and what are the different types of locks available?\n\n**AI Assistant:**\nYou can lock an ID on the Verus network using the `setidentitytimelock` command. There are two types of locks available: Time Lock and Time Delay. A Time Lock sets a specific block height at which the ID will be unlocked, while a Time Delay sets a delay in blocks before the ID can be unlocked after its flags are set back to an unlocked state. Note that revoking an identity will clear its locked status, regardless of time delay or unlock height, and a locked identity cannot revoke itself. Do you have any questions about how to use these locks or why you might want to lock an ID?\n\n**User:**\nNo, that makes sense. I think I understand the locking mechanism. I do have another question, though. What is the purpose of the `getcurrencyconverters` API, and how do I use it?\n\n**AI Assistant:**\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves. You can use this API by specifying the currencies you're interested in, for example: `verus -chain=VRSCTEST getcurrencyconverters btc eth`. This will return all currencies that have btc/eth markets at or above the liquidity threshold. The API is useful for identifying currencies with sufficient liquidity to support conversions. Do you have any other questions about the `getcurrencyconverters` API or how to use it?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What kind of blockchains are supported by the Verus network, and how do they interact with each other?",
            "The Verus network supports both public blockchains and private, internal blockchains. These private blockchains can be easily set up and bridged with public currencies, allowing organizations to have their own internal blockchain networks with all the features and currencies of the public chain, but without the public access. There is no limit to the number of blockchains that can operate and interoperate on the Verus network, making it a fractal model that enables unlimited simultaneously operating, interoperable blockchains.",
            " well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n#### Locking and Unlocking IDs\n- **Time Lock:**\n The unlockatblock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST setidentitytimelock \"id@\" '{\"unlockatblock\": <Unlock block height>}'\n```\n- **Time Delay:**\n The setunlockdelay parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST setidentitytimelock \"id@\" '{\"setunlockdelay\": <Unlock block delay>}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "How can I lock an ID on the Verus network, and what are the different types of locks available?",
            "You can lock an ID on the Verus network using the `setidentitytimelock` command. There are two types of locks available: Time Lock and Time Delay. A Time Lock sets a specific block height at which the ID will be unlocked, while a Time Delay sets a delay in blocks before the ID can be unlocked after its flags are set back to an unlocked state. Note that revoking an identity will clear its locked status, regardless of time delay or unlock height, and a locked identity cannot revoke itself.",
            " well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n#### Locking and Unlocking IDs\n- **Time Lock:**\n The unlockatblock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST setidentitytimelock \"id@\" '{\"unlockatblock\": <Unlock block height>}'\n```\n- **Time Delay:**\n The setunlockdelay parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST setidentitytimelock \"id@\" '{\"setunlockdelay\": <Unlock block delay>}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "What is the purpose of the `getcurrencyconverters` API, and how do I use it?",
            "The `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves. You can use this API by specifying the currencies you're interested in, for example: `verus -chain=VRSCTEST getcurrencyconverters btc eth`. This will return all currencies that have btc/eth markets at or above the liquidity threshold.",
            " well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n#### Locking and Unlocking IDs\n- **Time Lock:**\n The unlockatblock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST setidentitytimelock \"id@\" '{\"unlockatblock\": <Unlock block height>}'\n```\n- **Time Delay:**\n The setunlockdelay parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST setidentitytimelock \"id@\" '{\"setunlockdelay\": <Unlock block delay>}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]