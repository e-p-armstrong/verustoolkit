[
    "What information is required to define a PBaaS blockchain in Verus?",
    "To define a PBaaS blockchain in Verus, you need to provide the following information:\n\n* The name of the chain (`\"name\"`).\n* An integer value for the chain's options (`\"options\"`).\n* A list of currencies that the chain's native currency can be converted into (`\"currencies\"`).\n* A list of conversion ratios between the chain's native currency and each currency on the chain (`\"conversions\"`).\n* A list of eras, each with a block reward, reward decay, halving, and end of era (`\"eras\"`).\n* A list of notaries, which are VerusIDs that will serve as notaries on the chain (`\"notaries\"`).\n* The minimum number of notaries needed to confirm a block (`\"minnotariesconfirm\"`).\n* A list of nodes, each with a network address and node identity (`\"nodes\"`).\n* The name of the gateway converter (`\"gatewayconvertername\"`).\n* The initial issuance of the gateway converter (`\"gatewayconverterissuance\"`).\n\nAdditionally, you need to provide the bridge definition with overridable defaults, which includes:\n\n* A list of currencies supported by the bridge (`\"currencies\"`).\n* A list of initial contributions for each currency (`\"initialcontributions\"`).\n* The initial supply of the bridge's native token (`\"initialsupply\"`).",
    "#### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\"\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n#### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```",
    "./raw_text_input_wiki/release_notes.md"
]