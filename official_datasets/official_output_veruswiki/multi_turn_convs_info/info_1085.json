[
    [
        [
            "How do I create a transaction with no inputs using Verus?",
            "You can create a transaction with no inputs using the `createrawtransaction` command. The format is as follows:\n```bash\n> verus createrawtransaction \"[]\" \"{\\\"myaddress\\\":0.01}\"\n```\nThis command creates a raw transaction with no inputs and an output of 0.01 to \"myaddress\".",
            "Create a transaction with no inputs\n```bash\n> verus createrawtransaction \"[]\" \"{\\\"myaddress\\\":0.01}\"\n```\nAdd sufficient unsigned inputs to meet the output value\n```bash\n> verus fundrawtransaction \"rawtransactionhex\"\n```\nSign the transaction\n```bash\n> verus signrawtransaction \"fundedtransactionhex\"\n```\nSend the transaction\n```bash\n> verus sendrawtransaction \"signedtransactionhex\"\n```### `getrawtransaction \"txid\" ( verbose )`\nNOTE: By default this function only works sometimes. This is when the tx is in the mempool\nor there is an unspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option.Return the raw transaction data.If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.\nIf verbose is non-zero, returns an Object with information about 'txid'.#### Arguments:\n1. \"txid\"   (string, required) The transaction id\n2. verbose    (numeric, optional, default=0) If 0, return a string, other return a json objectResult (if verbose is not set or set to 0):\n\"data\"   (string) The serialized, hex-encoded data for 'txid'#### Result (if verbose > 0):\n```json\n{\n \"hex\" : \"data\",    (string) The serialized, hex-encoded data for 'txid'\n \"txid\" : \"id\",    (string) The transaction id (same as provided)\n \"version\" : n,     (numeric) The version\n \"locktime\" : ttt,    (numeric) The lock time\n \"expiryheight\" : ttt,  (numeric, optional) The block height after which the transaction expires\n \"vin\" : [        (array of json objects)\n   {\n    \"txid\": \"id\",  (string) The transaction id\n    \"vout\": n,     (numeric)\n    \"scriptSig\": {   (json object) The script\n     \"asm\": \"asm\", (string) asm\n     \"hex\": \"hex\"  (string) hex\n    },\n    \"sequence\": n   (numeric) The script sequence number\n   }\n   ,...\n ],\n \"v",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `fundrawtransaction` command in Verus?",
            "The `fundrawtransaction` command is used to add sufficient unsigned inputs to a transaction to meet the output value. It takes a raw transaction hex as an argument. For example:\n```bash\n> verus fundrawtransaction \"rawtransactionhex\"\n```\nThis command adds the necessary inputs to the transaction to make it valid.",
            "Create a transaction with no inputs\n```bash\n> verus createrawtransaction \"[]\" \"{\\\"myaddress\\\":0.01}\"\n```\nAdd sufficient unsigned inputs to meet the output value\n```bash\n> verus fundrawtransaction \"rawtransactionhex\"\n```\nSign the transaction\n```bash\n> verus signrawtransaction \"fundedtransactionhex\"\n```\nSend the transaction\n```bash\n> verus sendrawtransaction \"signedtransactionhex\"\n```### `getrawtransaction \"txid\" ( verbose )`\nNOTE: By default this function only works sometimes. This is when the tx is in the mempool\nor there is an unspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option.Return the raw transaction data.If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.\nIf verbose is non-zero, returns an Object with information about 'txid'.#### Arguments:\n1. \"txid\"   (string, required) The transaction id\n2. verbose    (numeric, optional, default=0) If 0, return a string, other return a json objectResult (if verbose is not set or set to 0):\n\"data\"   (string) The serialized, hex-encoded data for 'txid'#### Result (if verbose > 0):\n```json\n{\n \"hex\" : \"data\",    (string) The serialized, hex-encoded data for 'txid'\n \"txid\" : \"id\",    (string) The transaction id (same as provided)\n \"version\" : n,     (numeric) The version\n \"locktime\" : ttt,    (numeric) The lock time\n \"expiryheight\" : ttt,  (numeric, optional) The block height after which the transaction expires\n \"vin\" : [        (array of json objects)\n   {\n    \"txid\": \"id\",  (string) The transaction id\n    \"vout\": n,     (numeric)\n    \"scriptSig\": {   (json object) The script\n     \"asm\": \"asm\", (string) asm\n     \"hex\": \"hex\"  (string) hex\n    },\n    \"sequence\": n   (numeric) The script sequence number\n   }\n   ,...\n ],\n \"v",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "How do I sign a transaction in Verus?",
            "You can sign a transaction using the `signrawtransaction` command. It takes a funded transaction hex as an argument. For example:\n```bash\n> verus signrawtransaction \"fundedtransactionhex\"\n```\nThis command signs the transaction, making it ready to be sent to the network.",
            "Create a transaction with no inputs\n```bash\n> verus createrawtransaction \"[]\" \"{\\\"myaddress\\\":0.01}\"\n```\nAdd sufficient unsigned inputs to meet the output value\n```bash\n> verus fundrawtransaction \"rawtransactionhex\"\n```\nSign the transaction\n```bash\n> verus signrawtransaction \"fundedtransactionhex\"\n```\nSend the transaction\n```bash\n> verus sendrawtransaction \"signedtransactionhex\"\n```### `getrawtransaction \"txid\" ( verbose )`\nNOTE: By default this function only works sometimes. This is when the tx is in the mempool\nor there is an unspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option.Return the raw transaction data.If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.\nIf verbose is non-zero, returns an Object with information about 'txid'.#### Arguments:\n1. \"txid\"   (string, required) The transaction id\n2. verbose    (numeric, optional, default=0) If 0, return a string, other return a json objectResult (if verbose is not set or set to 0):\n\"data\"   (string) The serialized, hex-encoded data for 'txid'#### Result (if verbose > 0):\n```json\n{\n \"hex\" : \"data\",    (string) The serialized, hex-encoded data for 'txid'\n \"txid\" : \"id\",    (string) The transaction id (same as provided)\n \"version\" : n,     (numeric) The version\n \"locktime\" : ttt,    (numeric) The lock time\n \"expiryheight\" : ttt,  (numeric, optional) The block height after which the transaction expires\n \"vin\" : [        (array of json objects)\n   {\n    \"txid\": \"id\",  (string) The transaction id\n    \"vout\": n,     (numeric)\n    \"scriptSig\": {   (json object) The script\n     \"asm\": \"asm\", (string) asm\n     \"hex\": \"hex\"  (string) hex\n    },\n    \"sequence\": n   (numeric) The script sequence number\n   }\n   ,...\n ],\n \"v",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "How do I send a signed transaction to the Verus network?",
            "You can send a signed transaction to the Verus network using the `sendrawtransaction` command. It takes a signed transaction hex as an argument. For example:\n```bash\n> verus sendrawtransaction \"signedtransactionhex\"\n```\nThis command broadcasts the transaction to the network.",
            "Create a transaction with no inputs\n```bash\n> verus createrawtransaction \"[]\" \"{\\\"myaddress\\\":0.01}\"\n```\nAdd sufficient unsigned inputs to meet the output value\n```bash\n> verus fundrawtransaction \"rawtransactionhex\"\n```\nSign the transaction\n```bash\n> verus signrawtransaction \"fundedtransactionhex\"\n```\nSend the transaction\n```bash\n> verus sendrawtransaction \"signedtransactionhex\"\n```### `getrawtransaction \"txid\" ( verbose )`\nNOTE: By default this function only works sometimes. This is when the tx is in the mempool\nor there is an unspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option.Return the raw transaction data.If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.\nIf verbose is non-zero, returns an Object with information about 'txid'.#### Arguments:\n1. \"txid\"   (string, required) The transaction id\n2. verbose    (numeric, optional, default=0) If 0, return a string, other return a json objectResult (if verbose is not set or set to 0):\n\"data\"   (string) The serialized, hex-encoded data for 'txid'#### Result (if verbose > 0):\n```json\n{\n \"hex\" : \"data\",    (string) The serialized, hex-encoded data for 'txid'\n \"txid\" : \"id\",    (string) The transaction id (same as provided)\n \"version\" : n,     (numeric) The version\n \"locktime\" : ttt,    (numeric) The lock time\n \"expiryheight\" : ttt,  (numeric, optional) The block height after which the transaction expires\n \"vin\" : [        (array of json objects)\n   {\n    \"txid\": \"id\",  (string) The transaction id\n    \"vout\": n,     (numeric)\n    \"scriptSig\": {   (json object) The script\n     \"asm\": \"asm\", (string) asm\n     \"hex\": \"hex\"  (string) hex\n    },\n    \"sequence\": n   (numeric) The script sequence number\n   }\n   ,...\n ],\n \"v",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `getrawtransaction` command in Verus?",
            "The `getrawtransaction` command is used to retrieve the raw transaction data for a given transaction ID. It takes two arguments: the transaction ID and an optional verbose flag. For example:\n```bash\n> verus getrawtransaction \"txid\" (verbose)\n```\nIf verbose is 0, it returns a string that is serialized, hex-encoded data for the transaction ID. If verbose is non-zero, it returns a JSON object with information about the transaction.",
            "Create a transaction with no inputs\n```bash\n> verus createrawtransaction \"[]\" \"{\\\"myaddress\\\":0.01}\"\n```\nAdd sufficient unsigned inputs to meet the output value\n```bash\n> verus fundrawtransaction \"rawtransactionhex\"\n```\nSign the transaction\n```bash\n> verus signrawtransaction \"fundedtransactionhex\"\n```\nSend the transaction\n```bash\n> verus sendrawtransaction \"signedtransactionhex\"\n```### `getrawtransaction \"txid\" ( verbose )`\nNOTE: By default this function only works sometimes. This is when the tx is in the mempool\nor there is an unspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option.Return the raw transaction data.If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.\nIf verbose is non-zero, returns an Object with information about 'txid'.#### Arguments:\n1. \"txid\"   (string, required) The transaction id\n2. verbose    (numeric, optional, default=0) If 0, return a string, other return a json objectResult (if verbose is not set or set to 0):\n\"data\"   (string) The serialized, hex-encoded data for 'txid'#### Result (if verbose > 0):\n```json\n{\n \"hex\" : \"data\",    (string) The serialized, hex-encoded data for 'txid'\n \"txid\" : \"id\",    (string) The transaction id (same as provided)\n \"version\" : n,     (numeric) The version\n \"locktime\" : ttt,    (numeric) The lock time\n \"expiryheight\" : ttt,  (numeric, optional) The block height after which the transaction expires\n \"vin\" : [        (array of json objects)\n   {\n    \"txid\": \"id\",  (string) The transaction id\n    \"vout\": n,     (numeric)\n    \"scriptSig\": {   (json object) The script\n     \"asm\": \"asm\", (string) asm\n     \"hex\": \"hex\"  (string) hex\n    },\n    \"sequence\": n   (numeric) The script sequence number\n   }\n   ,...\n ],\n \"v",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What information does the `getrawtransaction` command return when verbose is set to 0?",
            "When verbose is 0, the `getrawtransaction` command returns a string that is serialized, hex-encoded data for the transaction ID.",
            "Create a transaction with no inputs\n```bash\n> verus createrawtransaction \"[]\" \"{\\\"myaddress\\\":0.01}\"\n```\nAdd sufficient unsigned inputs to meet the output value\n```bash\n> verus fundrawtransaction \"rawtransactionhex\"\n```\nSign the transaction\n```bash\n> verus signrawtransaction \"fundedtransactionhex\"\n```\nSend the transaction\n```bash\n> verus sendrawtransaction \"signedtransactionhex\"\n```### `getrawtransaction \"txid\" ( verbose )`\nNOTE: By default this function only works sometimes. This is when the tx is in the mempool\nor there is an unspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option.Return the raw transaction data.If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.\nIf verbose is non-zero, returns an Object with information about 'txid'.#### Arguments:\n1. \"txid\"   (string, required) The transaction id\n2. verbose    (numeric, optional, default=0) If 0, return a string, other return a json objectResult (if verbose is not set or set to 0):\n\"data\"   (string) The serialized, hex-encoded data for 'txid'#### Result (if verbose > 0):\n```json\n{\n \"hex\" : \"data\",    (string) The serialized, hex-encoded data for 'txid'\n \"txid\" : \"id\",    (string) The transaction id (same as provided)\n \"version\" : n,     (numeric) The version\n \"locktime\" : ttt,    (numeric) The lock time\n \"expiryheight\" : ttt,  (numeric, optional) The block height after which the transaction expires\n \"vin\" : [        (array of json objects)\n   {\n    \"txid\": \"id\",  (string) The transaction id\n    \"vout\": n,     (numeric)\n    \"scriptSig\": {   (json object) The script\n     \"asm\": \"asm\", (string) asm\n     \"hex\": \"hex\"  (string) hex\n    },\n    \"sequence\": n   (numeric) The script sequence number\n   }\n   ,...\n ],\n \"v",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "89169d48-d39a-4195-9a4c-eaa6cb3c1834"
]