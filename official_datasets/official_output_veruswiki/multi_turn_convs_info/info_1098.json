[
    [
        [
            "What is the purpose of the `decryptdata` command in Verus?",
            "The `decryptdata` command in Verus is used to decrypt encrypted data. It takes a JSON object as an argument, which contains an encrypted data descriptor that can be decrypted using wallet keys included in the descriptor.",
            "#### Arguments:\n`json object`\n```json\n{\n \"datadescriptor\": {}                      (object, required) Encrypted data descriptor to decrypt, uses wallet keys included in descriptor\n \"evk\":\"Sapling extended full viewing key\"           (evk, optional) if known, an extended viewing key to use for decoding that may not be in the descriptor\n \"ivk\":\"Sapling incoming viewing key hex\"            (ivk, optional) if known, an incoming viewing key to use for decoding\n \"txid\":\"hex\",                         (txid, optional) if data is from a tx and retrieve is true, this may be needed when the data is on the same tx as the link\n \"retrieve\": bool                        (bool, optional) Defaults to false. If true and the data passed is an encrypted or unencrypted reference\n                                            on this chain, it retrieves the data from its reference and decrypts if it can\n}\n```\n#### Result:#### Examples:\nEncrypt data\n```bash\n> verus signdata '{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'```\nDecrypt data\n```bash\n> verus decryptdata '{encrypteddatadescriptor}'\n```\nAs json rpc\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signdata\", \"params\": ['{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `dumpprivkey \"t-addr\"`\nReveals the private key corresponding to 't-addr'.\nThen the importprivkey can be used with this output#### Arguments:\n1. \"t-addr\"  (string, required) The transparent address for the private key",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "How can I encrypt data using Verus?",
            "You can encrypt data using the `signdata` command in Verus. The command takes a JSON object as an argument, which includes the address to sign with, an option to create a metadata metadata ring (MMR), and the data to be encrypted, including the message and the Sapling address to encrypt to.",
            "#### Arguments:\n`json object`\n```json\n{\n \"datadescriptor\": {}                      (object, required) Encrypted data descriptor to decrypt, uses wallet keys included in descriptor\n \"evk\":\"Sapling extended full viewing key\"           (evk, optional) if known, an extended viewing key to use for decoding that may not be in the descriptor\n \"ivk\":\"Sapling incoming viewing key hex\"            (ivk, optional) if known, an incoming viewing key to use for decoding\n \"txid\":\"hex\",                         (txid, optional) if data is from a tx and retrieve is true, this may be needed when the data is on the same tx as the link\n \"retrieve\": bool                        (bool, optional) Defaults to false. If true and the data passed is an encrypted or unencrypted reference\n                                            on this chain, it retrieves the data from its reference and decrypts if it can\n}\n```\n#### Result:#### Examples:\nEncrypt data\n```bash\n> verus signdata '{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'```\nDecrypt data\n```bash\n> verus decryptdata '{encrypteddatadescriptor}'\n```\nAs json rpc\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signdata\", \"params\": ['{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `dumpprivkey \"t-addr\"`\nReveals the private key corresponding to 't-addr'.\nThen the importprivkey can be used with this output#### Arguments:\n1. \"t-addr\"  (string, required) The transparent address for the private key",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `dumpprivkey` command in Verus?",
            "The `dumpprivkey` command in Verus is used to reveal the private key corresponding to a transparent address. This private key can then be imported using the `importprivkey` command.",
            "#### Arguments:\n`json object`\n```json\n{\n \"datadescriptor\": {}                      (object, required) Encrypted data descriptor to decrypt, uses wallet keys included in descriptor\n \"evk\":\"Sapling extended full viewing key\"           (evk, optional) if known, an extended viewing key to use for decoding that may not be in the descriptor\n \"ivk\":\"Sapling incoming viewing key hex\"            (ivk, optional) if known, an incoming viewing key to use for decoding\n \"txid\":\"hex\",                         (txid, optional) if data is from a tx and retrieve is true, this may be needed when the data is on the same tx as the link\n \"retrieve\": bool                        (bool, optional) Defaults to false. If true and the data passed is an encrypted or unencrypted reference\n                                            on this chain, it retrieves the data from its reference and decrypts if it can\n}\n```\n#### Result:#### Examples:\nEncrypt data\n```bash\n> verus signdata '{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'```\nDecrypt data\n```bash\n> verus decryptdata '{encrypteddatadescriptor}'\n```\nAs json rpc\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signdata\", \"params\": ['{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `dumpprivkey \"t-addr\"`\nReveals the private key corresponding to 't-addr'.\nThen the importprivkey can be used with this output#### Arguments:\n1. \"t-addr\"  (string, required) The transparent address for the private key",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "How can I use the `signdata` command as a JSON RPC?",
            "You can use the `signdata` command as a JSON RPC by sending a JSON object to the Verus RPC server. The JSON object should include the method `signdata`, the parameters for the command, and other required fields such as `jsonrpc` and `id`. Here is an example of how to do this using `curl`:\n```bash\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signdata\", \"params\": ['{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "#### Arguments:\n`json object`\n```json\n{\n \"datadescriptor\": {}                      (object, required) Encrypted data descriptor to decrypt, uses wallet keys included in descriptor\n \"evk\":\"Sapling extended full viewing key\"           (evk, optional) if known, an extended viewing key to use for decoding that may not be in the descriptor\n \"ivk\":\"Sapling incoming viewing key hex\"            (ivk, optional) if known, an incoming viewing key to use for decoding\n \"txid\":\"hex\",                         (txid, optional) if data is from a tx and retrieve is true, this may be needed when the data is on the same tx as the link\n \"retrieve\": bool                        (bool, optional) Defaults to false. If true and the data passed is an encrypted or unencrypted reference\n                                            on this chain, it retrieves the data from its reference and decrypts if it can\n}\n```\n#### Result:#### Examples:\nEncrypt data\n```bash\n> verus signdata '{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'```\nDecrypt data\n```bash\n> verus decryptdata '{encrypteddatadescriptor}'\n```\nAs json rpc\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signdata\", \"params\": ['{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `dumpprivkey \"t-addr\"`\nReveals the private key corresponding to 't-addr'.\nThen the importprivkey can be used with this output#### Arguments:\n1. \"t-addr\"  (string, required) The transparent address for the private key",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "f32818c1-aa47-48ab-87a3-49ca347da4f0"
]