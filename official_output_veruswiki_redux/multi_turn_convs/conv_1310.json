[
    "## Conversation that answers the provided questions:\n**User:**\nI've been playing around with Verus, and I'm having some trouble with multi-signature IDs. How do I sign transactions from multi-signature IDs on the testnet and mainnet using Verus?\n\n**AI Assistant:**\nTo sign transactions from multi-signature IDs on the testnet and mainnet, you need to follow these steps:\n\n1. Create a transaction using `verus sendcurrency` and get the raw transaction data.\n2. Use `verus z_getoperationstatus` to get the operation ID and raw hex transaction data.\n3. Take the raw hex transaction data to each additional wallet containing the additional signing addresses/IDs.\n4. Use `verus signrawtransaction` to sign the raw hex transaction data on each wallet.\n5. After the last necessary signature is applied, broadcast the signed transaction on the network using `verus sendrawtransaction`.\n\nLet me know if you have any questions about these steps or if you need further clarification!\n\n**User:**\nAnother thing I've been trying to understand is tokenizing ID control in Verus. Can you explain what that is and how it's achieved?\n\n**AI Assistant:**\nTokenizing ID control in Verus refers to the creation of a next-generation NFT (non-fungible token) that represents control over an ID. This is achieved by defining a currency with flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre-allocated or pre-converted to. The currency definition can be created using the `verus definecurrency` command.\n\nDoes that make sense? Do you have any questions about tokenizing ID control or how it works?\n\n**User:**\nOne last question, I've been trying to create an identity with a fractional currency as its parent in Verus. How do I do that?\n\n**AI Assistant:**\nTo create an identity with a fractional currency as its parent in Verus, you can use the `registernamecommitment` command, which now takes two additional positional arguments to specify a currency parent and a funding address. You can use quotes to leave fields blank, and specify a parent currency and funding address as needed. Additionally, you can use `z_addresses` to fund the name commitment and identity registration.\n\nI hope that helps! Let me know if you have any more questions or need further assistance.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "How do I sign transactions from multi-signature IDs on the testnet and mainnet using Verus?",
            "To sign transactions from multi-signature IDs on the testnet and mainnet, you need to follow these steps:\n\n1. Create a transaction using `verus sendcurrency` and get the raw transaction data.\n2. Use `verus z_getoperationstatus` to get the operation ID and raw hex transaction data.\n3. Take the raw hex transaction data to each additional wallet containing the additional signing addresses/IDs.\n4. Use `verus signrawtransaction` to sign the raw hex transaction data on each wallet.\n5. After the last necessary signature is applied, broadcast the signed transaction on the network using `verus sendrawtransaction`.",
            "## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "What is tokenizing ID control in Verus, and how is it achieved?",
            "Tokenizing ID control in Verus refers to the creation of a next-generation NFT (non-fungible token) that represents control over an ID. This is achieved by defining a currency with flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre-allocated or pre-converted to. The currency definition can be created using the `verus definecurrency` command.",
            "## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "How do I create an identity with a fractional currency as its parent in Verus?",
            "To create an identity with a fractional currency as its parent in Verus, you can use the `registernamecommitment` command, which now takes two additional positional arguments to specify a currency parent and a funding address. You can use quotes to leave fields blank, and specify a parent currency and funding address as needed. Additionally, you can use `z_addresses` to fund the name commitment and identity registration.",
            "## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]