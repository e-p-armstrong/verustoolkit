[
    "## Conversation that answers the provided questions:\n**User:**\nHey, I'm trying to understand how to manage my transactions in Verus. Can you tell me what the purpose of the `lockunspent` command is?\n\n**AI Assistant:**\nThe `lockunspent` command is used to update the list of temporarily unspendable outputs in Verus. It allows you to temporarily lock or unlock specified transaction outputs, which affects whether they are chosen by automatic coin selection when spending VRSC.\n\n**User:**\nThat makes sense. How do I use the `lockunspent` command to lock an unspent transaction?\n\n**AI Assistant:**\nTo lock an unspent transaction, you can use the `lockunspent` command with the following format:\n\n```\nverus lockunspent false \"[{\\\"txid\\\":\\\"transaction_id\\\",\\\"vout\\\":output_number}]\"\n```\n\nReplace `transaction_id` with the actual transaction ID and `output_number` with the output number of the transaction you want to lock.\n\n**User:**\nGot it! Now, how do I list all the unspent transactions in Verus?\n\n**AI Assistant:**\nEasy one! You can list all the unspent transactions in Verus using the `listunspent` command:\n\n```\nverus listunspent\n```\n\n**User:**\nAnd how do I list all the locked transactions in Verus?\n\n**AI Assistant:**\nAnother easy one! You can list all the locked transactions in Verus using the `listlockunspent` command:\n\n```\nverus listlockunspent\n```\n\n**User:**\nOkay, last question. How do I unlock a previously locked transaction in Verus?\n\n**AI Assistant:**\nTo unlock a previously locked transaction, you can use the `lockunspent` command with the `unlock` parameter set to `true`:\n\n```\nverus lockunspent true \"[{\\\"txid\\\":\\\"transaction_id\\\",\\\"vout\\\":output_number}]\"\n```\n\nReplace `transaction_id` with the actual transaction ID and `output_number` with the output number of the transaction you want to unlock.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What is the purpose of the `lockunspent` command in Verus?",
            "The `lockunspent` command is used to update the list of temporarily unspendable outputs in Verus. It allows you to temporarily lock or unlock specified transaction outputs, which affects whether they are chosen by automatic coin selection when spending VRSC.",
            "### `lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...]`\nUpdates list of temporarily unspendable outputs.\nTemporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\nA locked transaction output will not be chosen by automatic coin selection, when spending VRSC.\nLocks are stored in memory only. Nodes start with zero locked outputs, and the locked output list is always cleared (by virtue of process exit) when a node stops or fails.\nAlso see the listunspent call#### Arguments:\n1. unlock      (boolean, required) Whether to unlock (true) or lock (false) the specified transactions\n2. \"transactions\" (string, required) A json array of objects. Each object the txid (string) vout (numeric)\n```json\n   [      (json array of json objects)\n    {\n     \"txid\":\"id\",  (string) The transaction id\n     \"vout\": n     (numeric) The output number\n    }\n    ,...\n   ]\n```\n#### Result:\ntrue|false  (boolean) Whether the command was successful or notExamples:List the unspent transactions\n```bash\n> verus listunspent\n```\nLock an unspent transaction\n```bash\n> verus lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n```\nList the locked transactions\n```bash\n> verus listlockunspent\n```\nUnlock the transaction again\n```bash\n> verus lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "How do I use the `lockunspent` command to lock an unspent transaction in Verus?",
            "To lock an unspent transaction, you can use the `lockunspent` command with the following format:\n\n```\nverus lockunspent false \"[{\\\"txid\\\":\\\"transaction_id\\\",\\\"vout\\\":output_number}]\"\n```\n\nReplace `transaction_id` with the actual transaction ID and `output_number` with the output number of the transaction you want to lock.",
            "### `lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...]`\nUpdates list of temporarily unspendable outputs.\nTemporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\nA locked transaction output will not be chosen by automatic coin selection, when spending VRSC.\nLocks are stored in memory only. Nodes start with zero locked outputs, and the locked output list is always cleared (by virtue of process exit) when a node stops or fails.\nAlso see the listunspent call#### Arguments:\n1. unlock      (boolean, required) Whether to unlock (true) or lock (false) the specified transactions\n2. \"transactions\" (string, required) A json array of objects. Each object the txid (string) vout (numeric)\n```json\n   [      (json array of json objects)\n    {\n     \"txid\":\"id\",  (string) The transaction id\n     \"vout\": n     (numeric) The output number\n    }\n    ,...\n   ]\n```\n#### Result:\ntrue|false  (boolean) Whether the command was successful or notExamples:List the unspent transactions\n```bash\n> verus listunspent\n```\nLock an unspent transaction\n```bash\n> verus lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n```\nList the locked transactions\n```bash\n> verus listlockunspent\n```\nUnlock the transaction again\n```bash\n> verus lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "How do I list all the unspent transactions in Verus?",
            "You can list all the unspent transactions in Verus using the `listunspent` command:\n\n```\nverus listunspent\n```",
            "### `lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...]`\nUpdates list of temporarily unspendable outputs.\nTemporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\nA locked transaction output will not be chosen by automatic coin selection, when spending VRSC.\nLocks are stored in memory only. Nodes start with zero locked outputs, and the locked output list is always cleared (by virtue of process exit) when a node stops or fails.\nAlso see the listunspent call#### Arguments:\n1. unlock      (boolean, required) Whether to unlock (true) or lock (false) the specified transactions\n2. \"transactions\" (string, required) A json array of objects. Each object the txid (string) vout (numeric)\n```json\n   [      (json array of json objects)\n    {\n     \"txid\":\"id\",  (string) The transaction id\n     \"vout\": n     (numeric) The output number\n    }\n    ,...\n   ]\n```\n#### Result:\ntrue|false  (boolean) Whether the command was successful or notExamples:List the unspent transactions\n```bash\n> verus listunspent\n```\nLock an unspent transaction\n```bash\n> verus lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n```\nList the locked transactions\n```bash\n> verus listlockunspent\n```\nUnlock the transaction again\n```bash\n> verus lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "How do I list all the locked transactions in Verus?",
            "You can list all the locked transactions in Verus using the `listlockunspent` command:\n\n```\nverus listlockunspent\n```",
            "### `lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...]`\nUpdates list of temporarily unspendable outputs.\nTemporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\nA locked transaction output will not be chosen by automatic coin selection, when spending VRSC.\nLocks are stored in memory only. Nodes start with zero locked outputs, and the locked output list is always cleared (by virtue of process exit) when a node stops or fails.\nAlso see the listunspent call#### Arguments:\n1. unlock      (boolean, required) Whether to unlock (true) or lock (false) the specified transactions\n2. \"transactions\" (string, required) A json array of objects. Each object the txid (string) vout (numeric)\n```json\n   [      (json array of json objects)\n    {\n     \"txid\":\"id\",  (string) The transaction id\n     \"vout\": n     (numeric) The output number\n    }\n    ,...\n   ]\n```\n#### Result:\ntrue|false  (boolean) Whether the command was successful or notExamples:List the unspent transactions\n```bash\n> verus listunspent\n```\nLock an unspent transaction\n```bash\n> verus lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n```\nList the locked transactions\n```bash\n> verus listlockunspent\n```\nUnlock the transaction again\n```bash\n> verus lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "How do I unlock a previously locked transaction in Verus?",
            "To unlock a previously locked transaction, you can use the `lockunspent` command with the `unlock` parameter set to `true`:\n\n```\nverus lockunspent true \"[{\\\"txid\\\":\\\"transaction_id\\\",\\\"vout\\\":output_number}]\"\n```\n\nReplace `transaction_id` with the actual transaction ID and `output_number` with the output number of the transaction you want to unlock.",
            "### `lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...]`\nUpdates list of temporarily unspendable outputs.\nTemporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\nA locked transaction output will not be chosen by automatic coin selection, when spending VRSC.\nLocks are stored in memory only. Nodes start with zero locked outputs, and the locked output list is always cleared (by virtue of process exit) when a node stops or fails.\nAlso see the listunspent call#### Arguments:\n1. unlock      (boolean, required) Whether to unlock (true) or lock (false) the specified transactions\n2. \"transactions\" (string, required) A json array of objects. Each object the txid (string) vout (numeric)\n```json\n   [      (json array of json objects)\n    {\n     \"txid\":\"id\",  (string) The transaction id\n     \"vout\": n     (numeric) The output number\n    }\n    ,...\n   ]\n```\n#### Result:\ntrue|false  (boolean) Whether the command was successful or notExamples:List the unspent transactions\n```bash\n> verus listunspent\n```\nLock an unspent transaction\n```bash\n> verus lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n```\nList the locked transactions\n```bash\n> verus listlockunspent\n```\nUnlock the transaction again\n```bash\n> verus lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ]
]