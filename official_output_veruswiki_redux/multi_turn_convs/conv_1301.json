[
    "## Conversation that answers the provided questions:\n**User:**\nHey, I'm trying to define a new currency with Verus and I'm not sure about the `proofprotocol` option. Can you tell me what it does?\n\n**AI Assistant:**\nWhen defining a new currency with Verus, the `proofprotocol` option determines how new coins are minted. In this case, `proofprotocol` is set to 2, which is PROOF_CHAINID. This means that the controller of the chain ID can mint new coins.\n\n**User:**\nSo, what's the effect of setting `proofprotocol` to 2 when defining a new currency?\n\n**AI Assistant:**\nSetting `proofprotocol` to 2 when defining a new currency allows the controller of the chain ID to mint new coins. This can be done using the `sendcurrency` command with the `mintnew` option.\n\n**User:**\nThat's helpful. So, how can I actually mint new coins of a currency I've defined with Verus?\n\n**AI Assistant:**\nTo mint new coins of a currency you've defined with Verus, you can use the `sendcurrency` command with the `mintnew` option. For example, if you've defined a currency called \"mycoin\" with `proofprotocol` set to 2, you can mint new coins as follows:\n```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\nThis command mints 10,000 new coins of \"mycoin\" and sends them to the address \"mike@\".",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What does the `proofprotocol` option do when defining a new currency with Verus?",
            "When defining a new currency with Verus, the `proofprotocol` option determines how new coins are minted. In this example, `proofprotocol` is set to 2, which is PROOF_CHAINID. This means that the controller of the chain ID can mint new coins.",
            "```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "What is the effect of setting `proofprotocol` to 2 when defining a new currency?",
            "Setting `proofprotocol` to 2 when defining a new currency allows the controller of the chain ID to mint new coins. This can be done using the `sendcurrency` command with the `mintnew` option.",
            "```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "How can I mint new coins of a currency I've defined with Verus?",
            "To mint new coins of a currency you've defined with Verus, you can use the `sendcurrency` command with the `mintnew` option. For example, if you've defined a currency called \"mycoin\" with `proofprotocol` set to 2, you can mint new coins as follows:\n```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\nThis command mints 10,000 new coins of \"mycoin\" and sends them to the address \"mike@\".",
            "```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]