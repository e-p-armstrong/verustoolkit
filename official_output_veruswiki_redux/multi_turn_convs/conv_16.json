[
    "## Conversation that answers the provided questions:\n**User:**\nHey, I'm trying to understand how to use the `submitimports` command in Verus. Can you tell me what its purpose is?\n\n**AI Assistant:**\nThe `submitimports` command in Verus is used to accept a set of exports from another system and post them to the VRSC network. Do you have any experience with importing exports, or is this a new concept for you?\n\n**User:**\nNo, I'm new to this. What are the required arguments for the `submitimports` command?\n\n**AI Assistant:**\nThe required arguments for the `submitimports` command are:\n\n* `sourcesystemid`: the ID of the system from which the exports are coming\n* `notarizationtxid`: the ID of the transaction that notarized the exports\n* `notarizationtxoutnum`: the output number of the notarization transaction\n* `exports`: an array of export objects, each containing information about a specific export, including the height, transaction ID, output number, partial transaction proof, and transfers.\n\nDo you have any questions about these arguments, or would you like me to explain them further?\n\n**User:**\nNo, that makes sense. What is the format of the result returned by the `submitimports` command?\n\n**AI Assistant:**\nThe result of the `submitimports` command is an array of objects, each containing information about a specific import, including the currency ID, transaction ID, and output number.\n\n**User:**\nHow can I use the `submitimports` command to import exports from another system into the VRSC network?\n\n**AI Assistant:**\nYou can use the `submitimports` command to import exports from another system into the VRSC network by providing the required arguments in the correct format, either through the command line or using a JSON-RPC call. Examples of how to do this are provided in the documentation. I can also try to help you with a specific example if you'd like. Just let me know!",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What is the purpose of the `submitimports` command in Verus?",
            "The `submitimports` command in Verus is used to accept a set of exports from another system and post them to the VRSC network.",
            "### `submitimports '{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", Fresendw\"transfers\": [{transfer1}, {transfer2},...]}, ...]}'`\nAccepts a set of exports from another system to post to the VRSC network.#### Arguments:\n```json\n {\n  \"sourcesystemid\":\"systemid\"    ()\n  \"notarizationtxid\":\"txid\"     ()\n  \"notarizationtxoutnum\":n       ()\n  \"exports\": [{\n    \"height\": n,\n    \"txid\": \"hexid\",\n    \"txoutnum\": n,\n    \"partialtransactionproof\": \"hexstr\",\n    \"transfers\": [{transfer1}, {transfer2},...]\n  }, ...]\n }\n```\n#### Result:\n```json\n [{\n   \"currency\": \"currencyid\"\n   \"txid\": \"hexid\",\n   \"txoutnum\": n\n }, ...]\n```\nExamples:\n```bash\n> verus submitimports {\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]}\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitimports\", \"params\": [{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What are the required arguments for the `submitimports` command?",
            "The required arguments for the `submitimports` command are:\n\n* `sourcesystemid`: the ID of the system from which the exports are coming\n* `notarizationtxid`: the ID of the transaction that notarized the exports\n* `notarizationtxoutnum`: the output number of the notarization transaction\n* `exports`: an array of export objects, each containing information about a specific export, including the height, transaction ID, output number, partial transaction proof, and transfers.",
            "### `submitimports '{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", Fresendw\"transfers\": [{transfer1}, {transfer2},...]}, ...]}'`\nAccepts a set of exports from another system to post to the VRSC network.#### Arguments:\n```json\n {\n  \"sourcesystemid\":\"systemid\"    ()\n  \"notarizationtxid\":\"txid\"     ()\n  \"notarizationtxoutnum\":n       ()\n  \"exports\": [{\n    \"height\": n,\n    \"txid\": \"hexid\",\n    \"txoutnum\": n,\n    \"partialtransactionproof\": \"hexstr\",\n    \"transfers\": [{transfer1}, {transfer2},...]\n  }, ...]\n }\n```\n#### Result:\n```json\n [{\n   \"currency\": \"currencyid\"\n   \"txid\": \"hexid\",\n   \"txoutnum\": n\n }, ...]\n```\nExamples:\n```bash\n> verus submitimports {\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]}\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitimports\", \"params\": [{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What is the format of the result returned by the `submitimports` command?",
            "The result of the `submitimports` command is an array of objects, each containing information about a specific import, including the currency ID, transaction ID, and output number.",
            "### `submitimports '{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", Fresendw\"transfers\": [{transfer1}, {transfer2},...]}, ...]}'`\nAccepts a set of exports from another system to post to the VRSC network.#### Arguments:\n```json\n {\n  \"sourcesystemid\":\"systemid\"    ()\n  \"notarizationtxid\":\"txid\"     ()\n  \"notarizationtxoutnum\":n       ()\n  \"exports\": [{\n    \"height\": n,\n    \"txid\": \"hexid\",\n    \"txoutnum\": n,\n    \"partialtransactionproof\": \"hexstr\",\n    \"transfers\": [{transfer1}, {transfer2},...]\n  }, ...]\n }\n```\n#### Result:\n```json\n [{\n   \"currency\": \"currencyid\"\n   \"txid\": \"hexid\",\n   \"txoutnum\": n\n }, ...]\n```\nExamples:\n```bash\n> verus submitimports {\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]}\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitimports\", \"params\": [{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "How can I use the `submitimports` command to import exports from another system into the VRSC network?",
            "You can use the `submitimports` command to import exports from another system into the VRSC network by providing the required arguments in the correct format, either through the command line or using a JSON-RPC call. Examples of how to do this are provided in the documentation.",
            "### `submitimports '{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", Fresendw\"transfers\": [{transfer1}, {transfer2},...]}, ...]}'`\nAccepts a set of exports from another system to post to the VRSC network.#### Arguments:\n```json\n {\n  \"sourcesystemid\":\"systemid\"    ()\n  \"notarizationtxid\":\"txid\"     ()\n  \"notarizationtxoutnum\":n       ()\n  \"exports\": [{\n    \"height\": n,\n    \"txid\": \"hexid\",\n    \"txoutnum\": n,\n    \"partialtransactionproof\": \"hexstr\",\n    \"transfers\": [{transfer1}, {transfer2},...]\n  }, ...]\n }\n```\n#### Result:\n```json\n [{\n   \"currency\": \"currencyid\"\n   \"txid\": \"hexid\",\n   \"txoutnum\": n\n }, ...]\n```\nExamples:\n```bash\n> verus submitimports {\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]}\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitimports\", \"params\": [{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ]
]