[
    "## Conversation that answers the provided questions:\n**User:**\nHey, I'm playing around with creating a new currency on Verus. I was wondering, what does it mean to set `proofprotocol` to 2 when defining a new currency, like \"mycoin\"?\n\n**AI Assistant:**\nWhen `proofprotocol` is set to 2 when defining a new currency, it means that the proof protocol is set to PROOF_CHAINID. This allows the controller of the chain ID to mint new coins. For example, after defining \"mycoin\" with `proofprotocol` set to 2, the controller can mint new \"mycoin\" coins with a command like:\n```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\nDoes that make sense? Do you have any more questions about creating a new currency on Verus?\n\n**User:**\nThat helps, thanks! I've also been trying to understand PBaaS blockchains. What is a PBaaS blockchain, and how is it defined in Verus?\n\n**AI Assistant:**\nA PBaaS (Private Blockchain as a Service) blockchain is a type of blockchain that allows for private, permissioned blockchain networks. In Verus, a PBaaS blockchain can be defined using a JSON object that specifies various properties, such as:\n\n* `name`: The name of the chain.\n* `options`: An integer that specifies various options for the chain.\n* `currencies`: An array of currencies that can be used on the chain.\n* `conversions`: An array of conversion ratios between the chain's native currency and other currencies.\n* `eras`: An array of objects that define the block reward, reward decay, halving, and end of each era in the chain's lifecycle.\n* `notaries`: An array of VerusIDs that serve as notaries on the chain.\n* `minnotariesconfirm`: The minimum number of notaries required to confirm a block.\n* `nodes`: An array of objects that define the network addresses and IDs of the nodes on the chain.\n* `gatewayconvertername` and `gatewayconverterissuance`: Properties that define the bridge converter and its issuance.\n\nThe bridge definition has overridable defaults, which can be specified in a separate JSON object. This allows for a high degree of customization and flexibility when creating a PBaaS blockchain on Verus. Do you have any more questions about PBaaS blockchains or Verus in general?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What does it mean to set `proofprotocol` to 2 when defining a new currency, like \"mycoin\"?",
            "When `proofprotocol` is set to 2 when defining a new currency, it means that the proof protocol is set to PROOF_CHAINID. This allows the controller of the chain ID to mint new coins. For example, after defining \"mycoin\" with `proofprotocol` set to 2, the controller can mint new \"mycoin\" coins with a command like:\n```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```",
            "```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "What is a PBaaS blockchain, and how is it defined in Verus?",
            "A PBaaS (Private Blockchain as a Service) blockchain is a type of blockchain that allows for private, permissioned blockchain networks. In Verus, a PBaaS blockchain can be defined using a JSON object that specifies various properties, such as:\n\n* `name`: The name of the chain.\n* `options`: An integer that specifies various options for the chain.\n* `currencies`: An array of currencies that can be used on the chain.\n* `conversions`: An array of conversion ratios between the chain's native currency and other currencies.\n* `eras`: An array of objects that define the block reward, reward decay, halving, and end of each era in the chain's lifecycle.\n* `notaries`: An array of VerusIDs that serve as notaries on the chain.\n* `minnotariesconfirm`: The minimum number of notaries required to confirm a block.\n* `nodes`: An array of objects that define the network addresses and IDs of the nodes on the chain.\n* `gatewayconvertername` and `gatewayconverterissuance`: Properties that define the bridge converter and its issuance.\n\nThe bridge definition has overridable defaults, which can be specified in a separate JSON object.",
            "```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]