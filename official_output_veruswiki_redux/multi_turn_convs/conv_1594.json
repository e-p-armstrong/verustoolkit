[
    "## Conversation that answers the provided questions:\n**User:**\nHey, I've been playing around with the Verus CLI and I'm not entirely sure what some of the commands do. Can you help me out? Specifically, what does the `getpendingtransfers` command do, and how do I use it?\n\n**AI Assistant:**\nThe `getpendingtransfers` command in Verus returns all pending transfers for a particular chain that have not yet been aggregated into an export. You can use it by specifying the chain name as an argument, like this: `verus getpendingtransfers \"chainname\"`. If you don't specify a chain name, it will return the pending transfers for the current chain in the daemon.\n\n**User:**\nThat makes sense. What about the `getreservedeposits` command? What's the purpose of that one, and how do I use it?\n\n**AI Assistant:**\nThe `getreservedeposits` command in Verus returns all deposits under the control of a specified currency or chain. You can use it by specifying the full name or i-ID of the controlling currency as an argument, like this: `verus getreservedeposits \"currencyname\"`. This command is useful for checking deposits associated with a particular currency or chain.\n\n**User:**\nGot it. And finally, what about the `getsaplingtree` command? What does that one do, and how do I use it?\n\n**AI Assistant:**\nThe `getsaplingtree` command in Verus returns the entries for a light wallet Sapling tree state. You can use it by specifying a height or an inclusive range with an optional step at which to get the Sapling tree state, like this: `verus getsaplingtree \"n | m,n | m,n,o\"`. If you don't specify any arguments, it will return the latest currency state and height. This command is useful for checking the state of a Sapling tree.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What does the `getpendingtransfers` command do in Verus, and how do I use it?",
            "The `getpendingtransfers` command in Verus returns all pending transfers for a particular chain that have not yet been aggregated into an export. You can use it by specifying the chain name as an argument, like this: `verus getpendingtransfers \"chainname\"`. If you don't specify a chain name, it will return the pending transfers for the current chain in the daemon.",
            "### `getpendingtransfers \"chainname\"`\nReturns all pending transfers for a particular chain that have not yet been aggregated into an export.\n#### Arguments:\n```\n1. \"chainname\"           (string, optional) name of the chain to look for. no parameter returns current chain in daemon.\n```\n#### Result:\n```json\n {\n }\n```\nExamples:\n```bash\n> verus getpendingtransfers \"chainname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpendingtransfers\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getreservedeposits \"currencyname\"`\nReturns all deposits under control of the specified currency or chain. If the currency is of an external system\nor chain, all deposits will be under the control of that system or chain only, not its independent currencies.#### Arguments:\n1. \"currencyname\"    (string, optional) full name or i-ID of controlling currency#### Result:\n```json\n {\n }\n```\nExamples:\n```bash\n> verus getreservedeposits \"currencyname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreservedeposits\", \"params\": [\"currencyname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getsaplingtree \"n | m,n | m,n,o\"`\nReturns the entries for a light wallet Sapling tree state.#### Arguments:\n1. \"n\" or \"m,n\" or \"m,n,o\"     (int or string, optional) height or inclusive range with optional step at which to get the Sapling tree state. If not specified, the latest currency state and height is returned",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `getreservedeposits` command in Verus, and how do I use it?",
            "The `getreservedeposits` command in Verus returns all deposits under the control of a specified currency or chain. You can use it by specifying the full name or i-ID of the controlling currency as an argument, like this: `verus getreservedeposits \"currencyname\"`. This command is useful for checking deposits associated with a particular currency or chain.",
            "### `getpendingtransfers \"chainname\"`\nReturns all pending transfers for a particular chain that have not yet been aggregated into an export.\n#### Arguments:\n```\n1. \"chainname\"           (string, optional) name of the chain to look for. no parameter returns current chain in daemon.\n```\n#### Result:\n```json\n {\n }\n```\nExamples:\n```bash\n> verus getpendingtransfers \"chainname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpendingtransfers\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getreservedeposits \"currencyname\"`\nReturns all deposits under control of the specified currency or chain. If the currency is of an external system\nor chain, all deposits will be under the control of that system or chain only, not its independent currencies.#### Arguments:\n1. \"currencyname\"    (string, optional) full name or i-ID of controlling currency#### Result:\n```json\n {\n }\n```\nExamples:\n```bash\n> verus getreservedeposits \"currencyname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreservedeposits\", \"params\": [\"currencyname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getsaplingtree \"n | m,n | m,n,o\"`\nReturns the entries for a light wallet Sapling tree state.#### Arguments:\n1. \"n\" or \"m,n\" or \"m,n,o\"     (int or string, optional) height or inclusive range with optional step at which to get the Sapling tree state. If not specified, the latest currency state and height is returned",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What does the `getsaplingtree` command do in Verus, and how do I use it?",
            "The `getsaplingtree` command in Verus returns the entries for a light wallet Sapling tree state. You can use it by specifying a height or an inclusive range with an optional step at which to get the Sapling tree state, like this: `verus getsaplingtree \"n | m,n | m,n,o\"`. If you don't specify any arguments, it will return the latest currency state and height. This command is useful for checking the state of a Sapling tree.",
            "### `getpendingtransfers \"chainname\"`\nReturns all pending transfers for a particular chain that have not yet been aggregated into an export.\n#### Arguments:\n```\n1. \"chainname\"           (string, optional) name of the chain to look for. no parameter returns current chain in daemon.\n```\n#### Result:\n```json\n {\n }\n```\nExamples:\n```bash\n> verus getpendingtransfers \"chainname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpendingtransfers\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getreservedeposits \"currencyname\"`\nReturns all deposits under control of the specified currency or chain. If the currency is of an external system\nor chain, all deposits will be under the control of that system or chain only, not its independent currencies.#### Arguments:\n1. \"currencyname\"    (string, optional) full name or i-ID of controlling currency#### Result:\n```json\n {\n }\n```\nExamples:\n```bash\n> verus getreservedeposits \"currencyname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreservedeposits\", \"params\": [\"currencyname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getsaplingtree \"n | m,n | m,n,o\"`\nReturns the entries for a light wallet Sapling tree state.#### Arguments:\n1. \"n\" or \"m,n\" or \"m,n,o\"     (int or string, optional) height or inclusive range with optional step at which to get the Sapling tree state. If not specified, the latest currency state and height is returned",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ]
]