[
    "## Conversation that answers the provided questions:\n**User:**\nHey, I've got a question about multi-signature IDs in Verus. How can I sign a transaction from a multi-signature ID on both testnet and mainnet using Verus?\n\n**AI Assistant:**\nTo sign a transaction from a multi-signature ID, you need to follow these steps:\n\n1. Create a transaction using `verus sendcurrency` and specify the multi-signature ID, destination address, and transaction amount.\n2. Get the raw transaction data using `verus z_getoperationstatus` with the operation ID returned by `sendcurrency`.\n3. Take the raw hex transaction data to each additional wallet containing the additional signing addresses/IDs and sign it using `verus signrawtransaction`.\n4. After the last necessary signature is applied, broadcast the transaction on the network using `verus sendrawtransaction` with the raw hex signed transaction.\n\nThese steps should work for both testnet and mainnet. Do you have any questions about this process or need further clarification?\n\n**User:**\nAnother question, what are the requirements for tokenizing ID control, also known as next-generation NFTs, in Verus?\n\n**AI Assistant:**\nTo tokenize ID control in Verus, the currency definition must have the flags `OPTION_NFT_TOKEN` and `OPTION_TOKEN`, and a maximum supply of 1 satoshi that is either pre-allocated or pre-converted to. If the token is pre-allocated, the maximum pre-conversion must be 0.\n\nThese requirements are essential for creating unique, tradable tokens that represent ownership and control of an ID. Do you have any other questions about tokenizing ID control?\n\n**User:**\nHow can I create an identity with a fractional currency as its parent in Verus?\n\n**AI Assistant:**\nTo create an identity with a fractional currency as its parent, you can use the `registernamecommitment` command with two additional positional arguments to specify a currency parent and a funding address. You can leave fields blank by using quotes `\"\"`. Additionally, you can use `z_addresses` to fund the name commitment and identity registration.\n\nThis should allow you to create an identity with a fractional currency as its parent. Do you have any further questions about this process?\n\n**User:**\nI'm not entirely sure what the `OPTION_NFT_TOKEN` and `OPTION_TOKEN` flags do in a currency definition. Can you explain?\n\n**AI Assistant:**\nThe `OPTION_NFT_TOKEN` and `OPTION_TOKEN` flags in a currency definition are used to enable tokenization of ID control, which is also known as next-generation NFTs. These flags allow for the creation of unique, tradable tokens that represent ownership and control of an ID.\n\nIn other words, these flags are required to create tokens that can be used to represent ownership and control of an ID, and can be traded or transferred like any other asset.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "How can I sign a transaction from a multi-signature ID on both testnet and mainnet using Verus?",
            "To sign a transaction from a multi-signature ID, you need to follow these steps:\n\n1. Create a transaction using `verus sendcurrency` and specify the multi-signature ID, destination address, and transaction amount.\n2. Get the raw transaction data using `verus z_getoperationstatus` with the operation ID returned by `sendcurrency`.\n3. Take the raw hex transaction data to each additional wallet containing the additional signing addresses/IDs and sign it using `verus signrawtransaction`.\n4. After the last necessary signature is applied, broadcast the transaction on the network using `verus sendrawtransaction` with the raw hex signed transaction.",
            "### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "What are the requirements for tokenizing ID control, also known as next-generation NFTs, in Verus?",
            "To tokenize ID control in Verus, the currency definition must have the flags `OPTION_NFT_TOKEN` and `OPTION_TOKEN`, and a maximum supply of 1 satoshi that is either pre-allocated or pre-converted to. If the token is pre-allocated, the maximum pre-conversion must be 0.",
            "### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "How can I create an identity with a fractional currency as its parent in Verus?",
            "To create an identity with a fractional currency as its parent, you can use the `registernamecommitment` command with two additional positional arguments to specify a currency parent and a funding address. You can leave fields blank by using quotes `\"\"`. Additionally, you can use `z_addresses` to fund the name commitment and identity registration.",
            "### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "What is the purpose of the `OPTION_NFT_TOKEN` and `OPTION_TOKEN` flags in a currency definition in Verus?",
            "The `OPTION_NFT_TOKEN` and `OPTION_TOKEN` flags in a currency definition are used to enable tokenization of ID control, which is also known as next-generation NFTs. These flags allow for the creation of unique, tradable tokens that represent ownership and control of an ID.",
            "### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]