[
    "## Conversation that answers the provided questions:\n**User:**\nHey, I'm trying to figure out how to sign transactions from multi-signature IDs on Verus. Can you help me out?\n\n**AI Assistant:**\nTo sign transactions from multi-signature IDs on Verus, you need to follow these steps:\n\n1. Create a transaction using `sendcurrency` with the multi-signature ID and get the raw transaction data.\n2. Use `z_getoperationstatus` to get the operation ID and raw hex transaction data.\n3. Take the raw hex transaction data to each additional wallet containing the additional signing addresses/IDs and use `signrawtransaction` to sign the transaction.\n4. After the last necessary signature is applied, broadcast the signed transaction on the network using `sendrawtransaction`.\n\nDoes that make sense? Do you have any questions about this process or need further clarification?\n\n**User:**\nThanks, that helps a lot! What are the requirements for tokenizing ID control on Verus?\n\n**AI Assistant:**\nTo tokenize ID control on Verus, the currency definition must have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre-allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n\nDo you have any other questions about tokenizing ID control or Verus in general?\n\n**User:**\nAnother question - how do I create an identity with a fractional currency as its parent on Verus?\n\n**AI Assistant:**\nTo create an identity with a fractional currency as its parent on Verus, you can use the `registernamecommitment` command with two additional positional arguments to specify a currency parent and a funding address. You can use quotes `\"\"` to leave fields blank. The example shown specifies a parent currency, but no referrer. You can use `z_addresses` to fund the name commitment and identity registration.\n\nDoes that help? Do you have any more questions about creating identities on Verus?\n\n**User:**\nOne last question - what is the purpose of the `z_getoperationstatus` command in Verus?\n\n**AI Assistant:**\nThe `z_getoperationstatus` command in Verus is used to get the operation ID and raw hex transaction data after creating a transaction using `sendcurrency`. This data is then used to sign the transaction with additional wallets containing the necessary signing addresses/IDs.\n\nDoes that clarify things? Do you have any more questions about Verus or its commands?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "How do I sign transactions from multi-signature IDs on Verus?",
            "To sign transactions from multi-signature IDs on Verus, you need to follow these steps:\n\n1. Create a transaction using `sendcurrency` with the multi-signature ID and get the raw transaction data.\n2. Use `z_getoperationstatus` to get the operation ID and raw hex transaction data.\n3. Take the raw hex transaction data to each additional wallet containing the additional signing addresses/IDs and use `signrawtransaction` to sign the transaction.\n4. After the last necessary signature is applied, broadcast the signed transaction on the network using `sendrawtransaction`.",
            "## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "What are the requirements for tokenizing ID control on Verus?",
            "To tokenize ID control on Verus, the currency definition must have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre-allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.",
            "## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "How do I create an identity with a fractional currency as its parent on Verus?",
            "To create an identity with a fractional currency as its parent on Verus, you can use the `registernamecommitment` command with two additional positional arguments to specify a currency parent and a funding address. You can use quotes `\"\"` to leave fields blank. The example shown specifies a parent currency, but no referrer. You can use `z_addresses` to fund the name commitment and identity registration.",
            "## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "What is the purpose of the `z_getoperationstatus` command in Verus?",
            "The `z_getoperationstatus` command in Verus is used to get the operation ID and raw hex transaction data after creating a transaction using `sendcurrency`. This data is then used to sign the transaction with additional wallets containing the necessary signing addresses/IDs.",
            "## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]