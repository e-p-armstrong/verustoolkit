[
    [
        [
            "How can I create a raw transaction using the `createrawtransaction` command in Verus?",
            "To create a raw transaction, you can use the `createrawtransaction` command, which takes three arguments: a JSON array of input transactions, a JSON object of output addresses and amounts, and optionally, a locktime and expiry height. The command returns a hex-encoded raw transaction.\n\nFor example:\n```bash\n> verus createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":0.01}\"\n```\nThis command creates a raw transaction spending the output `vout` 0 of transaction `myid` and sending 0.01 VRSC to the specified address.",
            "### `createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,...} ( locktime ) ( expiryheight )`\nCreate a transaction spending the given inputs and sending to the given addresses.\nReturns hex-encoded raw transaction.\nNote that the transaction's inputs are not signed, and\nit is not stored in the wallet or transmitted to the network.#### Arguments:\n1. \"transactions\"    (string, required) A json array of json objects\n```json\n   [\n    {\n     \"txid\":\"id\",  (string, required) The transaction id\n     \"vout\":n    (numeric, required) The output number\n     \"sequence\":n  (numeric, optional) The sequence number\n    }\n    ,...\n   ]\n```\n2. \"addresses\"      (string, required) a json object with addresses as keys and amounts as values\n```json\n  {\n   \"address\": x.xxx  (numeric, required) The key is the Komodo address, the value is the VRSC amount\n   ,...\n  }\n```\n3. locktime       (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\n4. expiryheight     (numeric, optional, default=nextblockheight+20 (pre-Blossom) or nextblockheight+40 (post-Blossom)) Expiry height of transaction (if Overwinter is active)#### Result:\n\"transaction\"      (string) hex string of the transactionExamples\n```bash\n> verus createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":0.01}\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"{\\\"address\\\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `decoderawtransaction \"hexstring\"`\nReturn a JSON object representing the serialized, hex-encoded transaction.#### Arguments:\n1. \"hex\"   (string, required) The transaction hex string#### Result:\n```json\n{\n \"txid\" : \"id\",    (string) The transaction id\n \"o",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What information do I need to provide to create a raw transaction using `createrawtransaction`?",
            "To create a raw transaction, you need to provide three pieces of information:\n\n1. A JSON array of input transactions, where each input transaction includes the transaction ID (`txid`), output number (`vout`), and optionally, a sequence number.\n2. A JSON object of output addresses and amounts, where each key is a Komodo address and each value is the VRSC amount to be sent to that address.\n3. Optionally, a locktime and expiry height can be specified.",
            "### `createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,...} ( locktime ) ( expiryheight )`\nCreate a transaction spending the given inputs and sending to the given addresses.\nReturns hex-encoded raw transaction.\nNote that the transaction's inputs are not signed, and\nit is not stored in the wallet or transmitted to the network.#### Arguments:\n1. \"transactions\"    (string, required) A json array of json objects\n```json\n   [\n    {\n     \"txid\":\"id\",  (string, required) The transaction id\n     \"vout\":n    (numeric, required) The output number\n     \"sequence\":n  (numeric, optional) The sequence number\n    }\n    ,...\n   ]\n```\n2. \"addresses\"      (string, required) a json object with addresses as keys and amounts as values\n```json\n  {\n   \"address\": x.xxx  (numeric, required) The key is the Komodo address, the value is the VRSC amount\n   ,...\n  }\n```\n3. locktime       (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\n4. expiryheight     (numeric, optional, default=nextblockheight+20 (pre-Blossom) or nextblockheight+40 (post-Blossom)) Expiry height of transaction (if Overwinter is active)#### Result:\n\"transaction\"      (string) hex string of the transactionExamples\n```bash\n> verus createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":0.01}\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"{\\\"address\\\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `decoderawtransaction \"hexstring\"`\nReturn a JSON object representing the serialized, hex-encoded transaction.#### Arguments:\n1. \"hex\"   (string, required) The transaction hex string#### Result:\n```json\n{\n \"txid\" : \"id\",    (string) The transaction id\n \"o",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `decoderawtransaction` command in Verus?",
            "The `decoderawtransaction` command is used to return a JSON object representing the serialized, hex-encoded transaction. It takes a single argument, the transaction hex string, and returns a JSON object containing information about the transaction, such as the transaction ID (`txid`).",
            "### `createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,...} ( locktime ) ( expiryheight )`\nCreate a transaction spending the given inputs and sending to the given addresses.\nReturns hex-encoded raw transaction.\nNote that the transaction's inputs are not signed, and\nit is not stored in the wallet or transmitted to the network.#### Arguments:\n1. \"transactions\"    (string, required) A json array of json objects\n```json\n   [\n    {\n     \"txid\":\"id\",  (string, required) The transaction id\n     \"vout\":n    (numeric, required) The output number\n     \"sequence\":n  (numeric, optional) The sequence number\n    }\n    ,...\n   ]\n```\n2. \"addresses\"      (string, required) a json object with addresses as keys and amounts as values\n```json\n  {\n   \"address\": x.xxx  (numeric, required) The key is the Komodo address, the value is the VRSC amount\n   ,...\n  }\n```\n3. locktime       (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\n4. expiryheight     (numeric, optional, default=nextblockheight+20 (pre-Blossom) or nextblockheight+40 (post-Blossom)) Expiry height of transaction (if Overwinter is active)#### Result:\n\"transaction\"      (string) hex string of the transactionExamples\n```bash\n> verus createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":0.01}\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"{\\\"address\\\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `decoderawtransaction \"hexstring\"`\nReturn a JSON object representing the serialized, hex-encoded transaction.#### Arguments:\n1. \"hex\"   (string, required) The transaction hex string#### Result:\n```json\n{\n \"txid\" : \"id\",    (string) The transaction id\n \"o",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "b278a428-103d-4a5e-85cd-54abd6f733dc"
]