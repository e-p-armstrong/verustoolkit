[
    [
        [
            "How do I send a specific amount of Verus coins to a Verus address using the command line?",
            "You can send a specific amount of Verus coins to a Verus address using the `sendtoaddress` command. The basic format is `verus sendtoaddress \"address\" amount`, where \"address\" is the Verus address you want to send to, and \"amount\" is the amount of Verus coins you want to send.\n\nFor example, to send 0.1 Verus coins to the address \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", you would use the command `verus sendtoaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.1`.",
            "Examples:\n```bash\n> verus sendtoaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.1\n> verus sendtoaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.1 \"donation\" \"seans outpost\"\n> verus sendtoaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.1 \"\" \"\" true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `setaccount \"VRSC_address\" \"account\"`\nDEPRECATED. Sets the account associated with the given address.#### Arguments:\n1. \"VRSC_address\" (string, required) The VRSC address to be associated with an account.\n2. \"account\"     (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.Examples:\n```bash\n> verus setaccount \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" \"tabby\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setaccount\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", \"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `settxfee amount`\nSet the transaction fee per kB.#### Arguments:\n1. amount     (numeric, required) The transaction fee in VRSC/kB rounded to the nearest 0.00000001#### Result:\ntrue|false    (boolean) Returns true if successfulExamples:\n```bash\n> verus settxfee 0.00001\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_exportkey \"zaddr\"`\nReveals the zkey corresponding to 'zaddr'.\nThen the `z_importkey` can be used with this output#### Arguments:\n1. \"zaddr\"  (string, required) The zaddr for the private key#### Result:\n\"key\"         (string) The private key",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `setaccount` command in Verus, and how do I use it?",
            "The `setaccount` command in Verus is used to associate a Verus address with an account. However, this command is deprecated, which means it is no longer recommended for use.\n\nIf you still want to use it, the format is `verus setaccount \"address\" \"account\"`, where \"address\" is the Verus address you want to associate with an account, and \"account\" is the name of the account. Note that the \"account\" parameter must be an empty string to represent the default account.",
            "Examples:\n```bash\n> verus sendtoaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.1\n> verus sendtoaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.1 \"donation\" \"seans outpost\"\n> verus sendtoaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.1 \"\" \"\" true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `setaccount \"VRSC_address\" \"account\"`\nDEPRECATED. Sets the account associated with the given address.#### Arguments:\n1. \"VRSC_address\" (string, required) The VRSC address to be associated with an account.\n2. \"account\"     (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.Examples:\n```bash\n> verus setaccount \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" \"tabby\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setaccount\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", \"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `settxfee amount`\nSet the transaction fee per kB.#### Arguments:\n1. amount     (numeric, required) The transaction fee in VRSC/kB rounded to the nearest 0.00000001#### Result:\ntrue|false    (boolean) Returns true if successfulExamples:\n```bash\n> verus settxfee 0.00001\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_exportkey \"zaddr\"`\nReveals the zkey corresponding to 'zaddr'.\nThen the `z_importkey` can be used with this output#### Arguments:\n1. \"zaddr\"  (string, required) The zaddr for the private key#### Result:\n\"key\"         (string) The private key",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "How do I set the transaction fee per kB in Verus using the command line?",
            "You can set the transaction fee per kB in Verus using the `settxfee` command. The format is `verus settxfee amount`, where \"amount\" is the transaction fee in VRSC/kB rounded to the nearest 0.00000001.\n\nFor example, to set the transaction fee to 0.00001 VRSC/kB, you would use the command `verus settxfee 0.00001`.",
            "Examples:\n```bash\n> verus sendtoaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.1\n> verus sendtoaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.1 \"donation\" \"seans outpost\"\n> verus sendtoaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.1 \"\" \"\" true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `setaccount \"VRSC_address\" \"account\"`\nDEPRECATED. Sets the account associated with the given address.#### Arguments:\n1. \"VRSC_address\" (string, required) The VRSC address to be associated with an account.\n2. \"account\"     (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.Examples:\n```bash\n> verus setaccount \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" \"tabby\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setaccount\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", \"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `settxfee amount`\nSet the transaction fee per kB.#### Arguments:\n1. amount     (numeric, required) The transaction fee in VRSC/kB rounded to the nearest 0.00000001#### Result:\ntrue|false    (boolean) Returns true if successfulExamples:\n```bash\n> verus settxfee 0.00001\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_exportkey \"zaddr\"`\nReveals the zkey corresponding to 'zaddr'.\nThen the `z_importkey` can be used with this output#### Arguments:\n1. \"zaddr\"  (string, required) The zaddr for the private key#### Result:\n\"key\"         (string) The private key",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `z_exportkey` command in Verus, and how do I use it?",
            "The `z_exportkey` command in Verus is used to reveal the private key corresponding to a given z-address. The format is `verus z_exportkey \"zaddr\"`, where \"zaddr\" is the z-address for the private key.\n\nThis command is typically used in conjunction with the `z_importkey` command, which can be used with the output of `z_exportkey`.",
            "Examples:\n```bash\n> verus sendtoaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.1\n> verus sendtoaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.1 \"donation\" \"seans outpost\"\n> verus sendtoaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.1 \"\" \"\" true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `setaccount \"VRSC_address\" \"account\"`\nDEPRECATED. Sets the account associated with the given address.#### Arguments:\n1. \"VRSC_address\" (string, required) The VRSC address to be associated with an account.\n2. \"account\"     (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.Examples:\n```bash\n> verus setaccount \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" \"tabby\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setaccount\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", \"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `settxfee amount`\nSet the transaction fee per kB.#### Arguments:\n1. amount     (numeric, required) The transaction fee in VRSC/kB rounded to the nearest 0.00000001#### Result:\ntrue|false    (boolean) Returns true if successfulExamples:\n```bash\n> verus settxfee 0.00001\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_exportkey \"zaddr\"`\nReveals the zkey corresponding to 'zaddr'.\nThen the `z_importkey` can be used with this output#### Arguments:\n1. \"zaddr\"  (string, required) The zaddr for the private key#### Result:\n\"key\"         (string) The private key",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "8825a583-ab82-4ce6-bf77-ddbde91f877a"
]