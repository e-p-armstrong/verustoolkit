[
    [
        [
            "How can I pre-allocate amounts to specific VerusIDs at the launch of a currency?",
            "You can pre-allocate amounts to specific VerusIDs at the launch of a currency by using the \"preallocations\" parameter, which is an object array of VerusIDs and amounts.",
            "h percentage of proceeds for fractional currency sent to launching ID\n \"preallocations\" : \"[{\"i-address\":n}, ...]\", (objarray) VerusIDs and amounts for pre-allocation at launch\n \"initialcontributions\" : \"[n, ...]\",  (numberarray) amounts of pre-conversions reserved for launching ID\n \"idregistrationfees\" : n,       (number) base cost of IDs for this currency namespace in this currency\n \"idreferrallevels\" : n,        (int) levels of ID referrals (only for native PBaaS chains and IDs)\n \"idimportfees\" : n,          (number) fees required to import an ID to this system (only for native PBaaS chains and IDs)\n \"eras\" : \"[obj, ...]\",         (objarray) different chain phases of rewards and convertibility\n {\n  \"reward\" : \"[n, ...]\",        (int) reward start for each era in native coin\n  \"decay\" : \"[n, ...]\",        (int) exponential or linear decay of rewards during each era\n  \"halving\" : \"[n, ...]\",       (int) blocks between halvings during each era\n  \"eraend\" : \"[n, ...]\",        (int) block marking the end of each era\n  \"eraoptions\" : \"[n, ...]\",      (int) options (reserved)\n }\n \"nodes\"   : \"[obj, ..]\",  (objectarray, optional) up to 8 nodes that can be used to connect to the blockchain   [{\n    \"nodeidentity\" : \"txid\", (string, optional) internet, TOR, or other supported address for node\n    \"paymentaddress\" : n,   (int,   optional) rewards payment address\n   }, .. ]\n \"lastconfirmedcurrencystate\" : {\n  }\n \"besttxid\" : \"txid\"\n  }\n \"confirmednotarization\" : {\n  }\n \"confirmedtxid\" : \"txid\"\n}\n```\nExamples:\n```bash\n> verus getcurrency \"chainname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrency\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What is the \"initialcontributions\" parameter used for when defining a currency in Verus?",
            "The \"initialcontributions\" parameter specifies the amounts of pre-conversions reserved for the launching ID when defining a currency in Verus.",
            "h percentage of proceeds for fractional currency sent to launching ID\n \"preallocations\" : \"[{\"i-address\":n}, ...]\", (objarray) VerusIDs and amounts for pre-allocation at launch\n \"initialcontributions\" : \"[n, ...]\",  (numberarray) amounts of pre-conversions reserved for launching ID\n \"idregistrationfees\" : n,       (number) base cost of IDs for this currency namespace in this currency\n \"idreferrallevels\" : n,        (int) levels of ID referrals (only for native PBaaS chains and IDs)\n \"idimportfees\" : n,          (number) fees required to import an ID to this system (only for native PBaaS chains and IDs)\n \"eras\" : \"[obj, ...]\",         (objarray) different chain phases of rewards and convertibility\n {\n  \"reward\" : \"[n, ...]\",        (int) reward start for each era in native coin\n  \"decay\" : \"[n, ...]\",        (int) exponential or linear decay of rewards during each era\n  \"halving\" : \"[n, ...]\",       (int) blocks between halvings during each era\n  \"eraend\" : \"[n, ...]\",        (int) block marking the end of each era\n  \"eraoptions\" : \"[n, ...]\",      (int) options (reserved)\n }\n \"nodes\"   : \"[obj, ..]\",  (objectarray, optional) up to 8 nodes that can be used to connect to the blockchain   [{\n    \"nodeidentity\" : \"txid\", (string, optional) internet, TOR, or other supported address for node\n    \"paymentaddress\" : n,   (int,   optional) rewards payment address\n   }, .. ]\n \"lastconfirmedcurrencystate\" : {\n  }\n \"besttxid\" : \"txid\"\n  }\n \"confirmednotarization\" : {\n  }\n \"confirmedtxid\" : \"txid\"\n}\n```\nExamples:\n```bash\n> verus getcurrency \"chainname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrency\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What is the \"idregistrationfees\" parameter used for when defining a currency in Verus?",
            "The \"idregistrationfees\" parameter specifies the base cost of IDs for this currency namespace in this currency when defining a currency in Verus.",
            "h percentage of proceeds for fractional currency sent to launching ID\n \"preallocations\" : \"[{\"i-address\":n}, ...]\", (objarray) VerusIDs and amounts for pre-allocation at launch\n \"initialcontributions\" : \"[n, ...]\",  (numberarray) amounts of pre-conversions reserved for launching ID\n \"idregistrationfees\" : n,       (number) base cost of IDs for this currency namespace in this currency\n \"idreferrallevels\" : n,        (int) levels of ID referrals (only for native PBaaS chains and IDs)\n \"idimportfees\" : n,          (number) fees required to import an ID to this system (only for native PBaaS chains and IDs)\n \"eras\" : \"[obj, ...]\",         (objarray) different chain phases of rewards and convertibility\n {\n  \"reward\" : \"[n, ...]\",        (int) reward start for each era in native coin\n  \"decay\" : \"[n, ...]\",        (int) exponential or linear decay of rewards during each era\n  \"halving\" : \"[n, ...]\",       (int) blocks between halvings during each era\n  \"eraend\" : \"[n, ...]\",        (int) block marking the end of each era\n  \"eraoptions\" : \"[n, ...]\",      (int) options (reserved)\n }\n \"nodes\"   : \"[obj, ..]\",  (objectarray, optional) up to 8 nodes that can be used to connect to the blockchain   [{\n    \"nodeidentity\" : \"txid\", (string, optional) internet, TOR, or other supported address for node\n    \"paymentaddress\" : n,   (int,   optional) rewards payment address\n   }, .. ]\n \"lastconfirmedcurrencystate\" : {\n  }\n \"besttxid\" : \"txid\"\n  }\n \"confirmednotarization\" : {\n  }\n \"confirmedtxid\" : \"txid\"\n}\n```\nExamples:\n```bash\n> verus getcurrency \"chainname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrency\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "How can I specify different phases of rewards and convertibility for a currency in Verus?",
            "You can specify different phases of rewards and convertibility for a currency in Verus by using the \"eras\" parameter, which is an object array of different chain phases.",
            "h percentage of proceeds for fractional currency sent to launching ID\n \"preallocations\" : \"[{\"i-address\":n}, ...]\", (objarray) VerusIDs and amounts for pre-allocation at launch\n \"initialcontributions\" : \"[n, ...]\",  (numberarray) amounts of pre-conversions reserved for launching ID\n \"idregistrationfees\" : n,       (number) base cost of IDs for this currency namespace in this currency\n \"idreferrallevels\" : n,        (int) levels of ID referrals (only for native PBaaS chains and IDs)\n \"idimportfees\" : n,          (number) fees required to import an ID to this system (only for native PBaaS chains and IDs)\n \"eras\" : \"[obj, ...]\",         (objarray) different chain phases of rewards and convertibility\n {\n  \"reward\" : \"[n, ...]\",        (int) reward start for each era in native coin\n  \"decay\" : \"[n, ...]\",        (int) exponential or linear decay of rewards during each era\n  \"halving\" : \"[n, ...]\",       (int) blocks between halvings during each era\n  \"eraend\" : \"[n, ...]\",        (int) block marking the end of each era\n  \"eraoptions\" : \"[n, ...]\",      (int) options (reserved)\n }\n \"nodes\"   : \"[obj, ..]\",  (objectarray, optional) up to 8 nodes that can be used to connect to the blockchain   [{\n    \"nodeidentity\" : \"txid\", (string, optional) internet, TOR, or other supported address for node\n    \"paymentaddress\" : n,   (int,   optional) rewards payment address\n   }, .. ]\n \"lastconfirmedcurrencystate\" : {\n  }\n \"besttxid\" : \"txid\"\n  }\n \"confirmednotarization\" : {\n  }\n \"confirmedtxid\" : \"txid\"\n}\n```\nExamples:\n```bash\n> verus getcurrency \"chainname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrency\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What information can I retrieve about a currency in Verus using the `getcurrency` command?",
            "You can retrieve various information about a currency in Verus, such as its parameters, pre-allocations, initial contributions, ID registration fees, and eras, using the `getcurrency` command.",
            "h percentage of proceeds for fractional currency sent to launching ID\n \"preallocations\" : \"[{\"i-address\":n}, ...]\", (objarray) VerusIDs and amounts for pre-allocation at launch\n \"initialcontributions\" : \"[n, ...]\",  (numberarray) amounts of pre-conversions reserved for launching ID\n \"idregistrationfees\" : n,       (number) base cost of IDs for this currency namespace in this currency\n \"idreferrallevels\" : n,        (int) levels of ID referrals (only for native PBaaS chains and IDs)\n \"idimportfees\" : n,          (number) fees required to import an ID to this system (only for native PBaaS chains and IDs)\n \"eras\" : \"[obj, ...]\",         (objarray) different chain phases of rewards and convertibility\n {\n  \"reward\" : \"[n, ...]\",        (int) reward start for each era in native coin\n  \"decay\" : \"[n, ...]\",        (int) exponential or linear decay of rewards during each era\n  \"halving\" : \"[n, ...]\",       (int) blocks between halvings during each era\n  \"eraend\" : \"[n, ...]\",        (int) block marking the end of each era\n  \"eraoptions\" : \"[n, ...]\",      (int) options (reserved)\n }\n \"nodes\"   : \"[obj, ..]\",  (objectarray, optional) up to 8 nodes that can be used to connect to the blockchain   [{\n    \"nodeidentity\" : \"txid\", (string, optional) internet, TOR, or other supported address for node\n    \"paymentaddress\" : n,   (int,   optional) rewards payment address\n   }, .. ]\n \"lastconfirmedcurrencystate\" : {\n  }\n \"besttxid\" : \"txid\"\n  }\n \"confirmednotarization\" : {\n  }\n \"confirmedtxid\" : \"txid\"\n}\n```\nExamples:\n```bash\n> verus getcurrency \"chainname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrency\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "How can I retrieve information about a currency in Verus using the command line?",
            "You can retrieve information about a currency in Verus using the command line by running `verus getcurrency \"chainname\"` or by making a JSON-RPC request to the Verus node using `curl`.",
            "h percentage of proceeds for fractional currency sent to launching ID\n \"preallocations\" : \"[{\"i-address\":n}, ...]\", (objarray) VerusIDs and amounts for pre-allocation at launch\n \"initialcontributions\" : \"[n, ...]\",  (numberarray) amounts of pre-conversions reserved for launching ID\n \"idregistrationfees\" : n,       (number) base cost of IDs for this currency namespace in this currency\n \"idreferrallevels\" : n,        (int) levels of ID referrals (only for native PBaaS chains and IDs)\n \"idimportfees\" : n,          (number) fees required to import an ID to this system (only for native PBaaS chains and IDs)\n \"eras\" : \"[obj, ...]\",         (objarray) different chain phases of rewards and convertibility\n {\n  \"reward\" : \"[n, ...]\",        (int) reward start for each era in native coin\n  \"decay\" : \"[n, ...]\",        (int) exponential or linear decay of rewards during each era\n  \"halving\" : \"[n, ...]\",       (int) blocks between halvings during each era\n  \"eraend\" : \"[n, ...]\",        (int) block marking the end of each era\n  \"eraoptions\" : \"[n, ...]\",      (int) options (reserved)\n }\n \"nodes\"   : \"[obj, ..]\",  (objectarray, optional) up to 8 nodes that can be used to connect to the blockchain   [{\n    \"nodeidentity\" : \"txid\", (string, optional) internet, TOR, or other supported address for node\n    \"paymentaddress\" : n,   (int,   optional) rewards payment address\n   }, .. ]\n \"lastconfirmedcurrencystate\" : {\n  }\n \"besttxid\" : \"txid\"\n  }\n \"confirmednotarization\" : {\n  }\n \"confirmedtxid\" : \"txid\"\n}\n```\nExamples:\n```bash\n> verus getcurrency \"chainname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrency\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "1bd8cf0a-ab41-47f7-936c-8a44d75d16ab"
]