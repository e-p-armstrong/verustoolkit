[
    [
        [
            "What is the purpose of the `getcurrencyconverters` command in Verus?",
            "The `getcurrencyconverters` command is used to return the current state of one or more specified currencies, including their conversion rates and amounts.",
            "#### Arguments:\n\"currencyname\"          : \"string\" ... (string(s), one or more) all selected currencies are returned with their current state\n\"paramobject\"           : \"object\" ... (one or more parameters) advanced query with slippage options\n```json\n    {\n      \"convertto\":\"destcurrency\"       \"string\"        target currency\n      \"fromcurrency\":\"sourcecurrency\" | [...] \"string\" | object array (string(s), one or more) currencies to convert from\n      \"targetprice\":n | [n,...]        \"number(s)\" ...     (number(s), one or more) target price within slippage required\n      \"amount\":n               \"number\"        (number) amount of tocurrency needed\n      \"slippage\":n              \"number\"        (number) max slippage with no other conversions max is 50000000 == 50%\n    }\n```\nResult:\n```json\n\"[{currency1}, {currency2}]\" : \"array of objects\" (string) All currencies, last currency state, and last amount to convert if amount specified\n```\nExamples:\n```bash\n> verus getcurrencyconverters '[\"currency1\",\"currency2\",...]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrencyconverters\", \"params\": ['[\"currency1\",\"currency2\",...]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getcurrencystate \"currencynameorid\" (\"n | m,n | m,n,o\") (\"connectedsystemid\")`\nReturns the total amount of preconversions that have been confirmed on the blockchain for the specified chain.",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "How do I use the `getcurrencyconverters` command to retrieve information about multiple currencies?",
            "To retrieve information about multiple currencies using the `getcurrencyconverters` command, you need to pass an array of currency names as a string argument. For example:\n```\nverus getcurrencyconverters '[\"currency1\",\"currency2\",...]'\n```\nAlternatively, you can use the `curl` command with the `--data-binary` option to send a JSON RPC request to the Verus node.",
            "#### Arguments:\n\"currencyname\"          : \"string\" ... (string(s), one or more) all selected currencies are returned with their current state\n\"paramobject\"           : \"object\" ... (one or more parameters) advanced query with slippage options\n```json\n    {\n      \"convertto\":\"destcurrency\"       \"string\"        target currency\n      \"fromcurrency\":\"sourcecurrency\" | [...] \"string\" | object array (string(s), one or more) currencies to convert from\n      \"targetprice\":n | [n,...]        \"number(s)\" ...     (number(s), one or more) target price within slippage required\n      \"amount\":n               \"number\"        (number) amount of tocurrency needed\n      \"slippage\":n              \"number\"        (number) max slippage with no other conversions max is 50000000 == 50%\n    }\n```\nResult:\n```json\n\"[{currency1}, {currency2}]\" : \"array of objects\" (string) All currencies, last currency state, and last amount to convert if amount specified\n```\nExamples:\n```bash\n> verus getcurrencyconverters '[\"currency1\",\"currency2\",...]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrencyconverters\", \"params\": ['[\"currency1\",\"currency2\",...]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getcurrencystate \"currencynameorid\" (\"n | m,n | m,n,o\") (\"connectedsystemid\")`\nReturns the total amount of preconversions that have been confirmed on the blockchain for the specified chain.",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What are the optional parameters that can be passed to the `getcurrencyconverters` command?",
            "The `getcurrencyconverters` command accepts an optional `paramobject` argument, which is a JSON object that allows you to specify advanced query options, including:\n\n* `convertto`: the target currency\n* `fromcurrency`: one or more source currencies\n* `targetprice`: the target price within the allowed slippage\n* `amount`: the amount of the target currency needed\n* `slippage`: the maximum allowed slippage (default is 50%)",
            "#### Arguments:\n\"currencyname\"          : \"string\" ... (string(s), one or more) all selected currencies are returned with their current state\n\"paramobject\"           : \"object\" ... (one or more parameters) advanced query with slippage options\n```json\n    {\n      \"convertto\":\"destcurrency\"       \"string\"        target currency\n      \"fromcurrency\":\"sourcecurrency\" | [...] \"string\" | object array (string(s), one or more) currencies to convert from\n      \"targetprice\":n | [n,...]        \"number(s)\" ...     (number(s), one or more) target price within slippage required\n      \"amount\":n               \"number\"        (number) amount of tocurrency needed\n      \"slippage\":n              \"number\"        (number) max slippage with no other conversions max is 50000000 == 50%\n    }\n```\nResult:\n```json\n\"[{currency1}, {currency2}]\" : \"array of objects\" (string) All currencies, last currency state, and last amount to convert if amount specified\n```\nExamples:\n```bash\n> verus getcurrencyconverters '[\"currency1\",\"currency2\",...]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrencyconverters\", \"params\": ['[\"currency1\",\"currency2\",...]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getcurrencystate \"currencynameorid\" (\"n | m,n | m,n,o\") (\"connectedsystemid\")`\nReturns the total amount of preconversions that have been confirmed on the blockchain for the specified chain.",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What is the result format of the `getcurrencyconverters` command?",
            "The result of the `getcurrencyconverters` command is an array of objects, where each object represents a currency and contains its current state, last amount to convert (if specified), and other relevant information.",
            "#### Arguments:\n\"currencyname\"          : \"string\" ... (string(s), one or more) all selected currencies are returned with their current state\n\"paramobject\"           : \"object\" ... (one or more parameters) advanced query with slippage options\n```json\n    {\n      \"convertto\":\"destcurrency\"       \"string\"        target currency\n      \"fromcurrency\":\"sourcecurrency\" | [...] \"string\" | object array (string(s), one or more) currencies to convert from\n      \"targetprice\":n | [n,...]        \"number(s)\" ...     (number(s), one or more) target price within slippage required\n      \"amount\":n               \"number\"        (number) amount of tocurrency needed\n      \"slippage\":n              \"number\"        (number) max slippage with no other conversions max is 50000000 == 50%\n    }\n```\nResult:\n```json\n\"[{currency1}, {currency2}]\" : \"array of objects\" (string) All currencies, last currency state, and last amount to convert if amount specified\n```\nExamples:\n```bash\n> verus getcurrencyconverters '[\"currency1\",\"currency2\",...]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrencyconverters\", \"params\": ['[\"currency1\",\"currency2\",...]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getcurrencystate \"currencynameorid\" (\"n | m,n | m,n,o\") (\"connectedsystemid\")`\nReturns the total amount of preconversions that have been confirmed on the blockchain for the specified chain.",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `getcurrencystate` command in Verus?",
            "The `getcurrencystate` command returns the total amount of preconversions that have been confirmed on the blockchain for a specified chain, given a currency name or ID, and optionally, a specific connected system ID.",
            "#### Arguments:\n\"currencyname\"          : \"string\" ... (string(s), one or more) all selected currencies are returned with their current state\n\"paramobject\"           : \"object\" ... (one or more parameters) advanced query with slippage options\n```json\n    {\n      \"convertto\":\"destcurrency\"       \"string\"        target currency\n      \"fromcurrency\":\"sourcecurrency\" | [...] \"string\" | object array (string(s), one or more) currencies to convert from\n      \"targetprice\":n | [n,...]        \"number(s)\" ...     (number(s), one or more) target price within slippage required\n      \"amount\":n               \"number\"        (number) amount of tocurrency needed\n      \"slippage\":n              \"number\"        (number) max slippage with no other conversions max is 50000000 == 50%\n    }\n```\nResult:\n```json\n\"[{currency1}, {currency2}]\" : \"array of objects\" (string) All currencies, last currency state, and last amount to convert if amount specified\n```\nExamples:\n```bash\n> verus getcurrencyconverters '[\"currency1\",\"currency2\",...]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrencyconverters\", \"params\": ['[\"currency1\",\"currency2\",...]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getcurrencystate \"currencynameorid\" (\"n | m,n | m,n,o\") (\"connectedsystemid\")`\nReturns the total amount of preconversions that have been confirmed on the blockchain for the specified chain.",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "4a9edbe4-336b-4cdc-b701-f2d215661824"
]