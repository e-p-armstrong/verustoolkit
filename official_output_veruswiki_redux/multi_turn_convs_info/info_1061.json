[
    [
        [
            "What information does the `validateaddress` command provide about a given Verus address?",
            "The `validateaddress` command provides a JSON object with several properties that describe the given Verus address. These properties include:\n\n* `isvalid`: a boolean indicating whether the address is valid or not\n* `address`: the Verus address being validated\n* `scriptPubKey`: the hex-encoded scriptPubKey generated by the address\n* `ismine`: a boolean indicating whether the address belongs to the user or not\n* `isscript`: a boolean indicating whether the key is a script\n* `pubkey`: the hex value of the raw public key\n* `iscompressed`: a boolean indicating whether the address is compressed\n* `account`: the account associated with the address (DEPRECATED)",
            "#### Result:\n```json\n{\n \"isvalid\" : true|false,     (boolean) If the address is valid or not. If not, this is the only property returned.\n \"address\" : \"verusaddress\",  (string) The Verus address validated\n \"scriptPubKey\" : \"hex\",    (string) The hex encoded scriptPubKey generated by the address\n \"ismine\" : true|false,     (boolean) If the address is yours or not\n \"isscript\" : true|false,    (boolean) If the key is a script\n \"pubkey\" : \"publickeyhex\",  (string) The hex value of the raw public key\n \"iscompressed\" : true|false,  (boolean) If the address is compressed\n \"account\" : \"account\"     (string) DEPRECATED. The account associated with the address, \"\" is the default account\n}\n```\nExamples:\n```bash\n> verus validateaddress \"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_validateaddress \"zaddr\"`\nReturn information about the given z address.#### Arguments:\n1. \"zaddr\"   (string, required) The z address to validate",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "How can I validate a Verus address using the command line?",
            "You can validate a Verus address using the `validateaddress` command followed by the address you want to validate. For example:\n\n```\nverus validateaddress \"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\"\n```\n\nAlternatively, you can use `curl` to send a JSON-RPC request to the Verus node:\n\n```bash\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "#### Result:\n```json\n{\n \"isvalid\" : true|false,     (boolean) If the address is valid or not. If not, this is the only property returned.\n \"address\" : \"verusaddress\",  (string) The Verus address validated\n \"scriptPubKey\" : \"hex\",    (string) The hex encoded scriptPubKey generated by the address\n \"ismine\" : true|false,     (boolean) If the address is yours or not\n \"isscript\" : true|false,    (boolean) If the key is a script\n \"pubkey\" : \"publickeyhex\",  (string) The hex value of the raw public key\n \"iscompressed\" : true|false,  (boolean) If the address is compressed\n \"account\" : \"account\"     (string) DEPRECATED. The account associated with the address, \"\" is the default account\n}\n```\nExamples:\n```bash\n> verus validateaddress \"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_validateaddress \"zaddr\"`\nReturn information about the given z address.#### Arguments:\n1. \"zaddr\"   (string, required) The z address to validate",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `z_validateaddress` command?",
            "The `z_validateaddress` command is used to return information about a given z address. It takes a single argument, the z address to validate, and returns a JSON object with information about the address.",
            "#### Result:\n```json\n{\n \"isvalid\" : true|false,     (boolean) If the address is valid or not. If not, this is the only property returned.\n \"address\" : \"verusaddress\",  (string) The Verus address validated\n \"scriptPubKey\" : \"hex\",    (string) The hex encoded scriptPubKey generated by the address\n \"ismine\" : true|false,     (boolean) If the address is yours or not\n \"isscript\" : true|false,    (boolean) If the key is a script\n \"pubkey\" : \"publickeyhex\",  (string) The hex value of the raw public key\n \"iscompressed\" : true|false,  (boolean) If the address is compressed\n \"account\" : \"account\"     (string) DEPRECATED. The account associated with the address, \"\" is the default account\n}\n```\nExamples:\n```bash\n> verus validateaddress \"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_validateaddress \"zaddr\"`\nReturn information about the given z address.#### Arguments:\n1. \"zaddr\"   (string, required) The z address to validate",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "136fbe01-43d2-45ce-80ce-1c12b02e4b33"
]