[["# VerusHash 2.1\n\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.", "./raw_text_input_wiki/verushash_2.1.md"], ["# Question: How can I check my immature balance in a graphical Wallets?\n\n## Verus Desktop\n\nVerus Desktop shows your immature balance in your wallet dashboard, between the `Transparant Balance` and `Private Balance`.\n\n## Agama (Deprecated)\n1. In the Agama wallet click on the hamburger menu (the three stripes) on the top right\n2. click on `Settings`\n3. click on the item `</> CLI`\n4. Select `VRSC` as coin\n6. Type the following command: `getwalletinfo`\n7. click `Execute`\n8. scroll down and find \"immature_balance\": which will give you the amount of time-locked coins in your wallet.\n\n(submitted by @karero)\n\nNote: last revision date 2020-04-24.", "./raw_text_input_wiki/faq-allos16_how_can_i_check_my_immature_balance_in_the_gui.md"], ["# What versions of OSX/macOS are supported?\n\n## Verus Desktop\n\nCurrently only macOS 10.12.x and up are tested and supported for Verus Desktop. Installing Verus Desktop on OSX 10.11.x or earlier may be possible but the wallet does not function and never completes the initial sync.\n\n## Verus CLI wallet\n\nThe CLI wallet should run on lower versions without problems.\n\n## File location\n\n`VRSC Wallet and Data location` on Mac OS: `/Users//Library/Application Support/Komodo/VRSC`\n\n### Necessary files:\n\nLink 1: [How-To install the latest Wallet](#!/how-to/how-to_bootstrap.md)\n\n## Procedure:\n\nIf you installed on OSX 10.11.x or earlier and need to remove it:\n\n1. Quit your Wallet.\n2. Eject the wallet dmg.\n3. Make a backup of `wallet.dat` & `VRSC.conf` if necessary (Only if you had a wallet on this machine or if you used an existing `wallet.dat`)\n4. If you installed the `Agama.app` in Applications, move this to the trash.\n5. Move `~/Library/Application Support/Agama` to the trash or use the following command in terminal\n`rmdir /Users//Library/Application\\ Support/Agama`.\n6. Move `~/Library/Application Support/Komodo` to the trash or use the following command in terminal\n`rmdir /Users//Library/Application\\ Support/Komodo`.\n7. Upgrade OS.\n8. Install Agama (Check `Link1` for a smooth install)\n\n(submitted by @bigtom, edited by Oink.vrsc@)\n\nNote: last revision date 2020-02-26.", "./raw_text_input_wiki/mac-faq02_what_versions_osx.md"], ["# How to import your Lite wallet address into your native Verus Desktop?Attention: Read it completely before using.### Important General Information`verus command \"<userinput>\"` needs to be entered literally, with `<userinput>` replaced by your specific userdata. So if the text directs you to use for example `\"<Public Address>\"`, you replace that (including the `<` and `>`) with the address,\nso it looks similar to this: `\"RYX6RYU3AAvwVCNyNM4cVyGUhSMUPvKs3r\"`.This method is confirmed to work on Verus and all Komodo assetchains.## PrerequisitesIn order to convert your seedphrase into a Private key (WIF), you need to have a running native wallet first, that is fully synchronized. The earliest wallet that supports these functions is **Verus Desktop v0.6.4-beta-1**.If needed, use this guide to quickly synchronize your wallet: https://wiki.verus.io/#!how-to/how-to_bootstrap.md## Converting Seed to WIF\nIf you have a seed, you can retrieve your Private key (WIF) by having the Verus Desktop wallet convert it for you.\nTo convert your *seed phrase* in Verus Desktop, go to `settings` --> `Coin Settings`, select the chain you want to use in the top-right corner and enter the following command:\n```\nrun convertpassphrase \"word_1 word_2 word_3 ... word_n\"\n```Note: Make sure you replace `Word1 word2 word3 ... word_n` with the actual seedphrase (12 or 24 words) of the address you want to import!", "./raw_text_input_wiki/how-to_convert-seed-to-wif.md"], ["You will receive a response __similar__ to this:\n```\n{\n\"walletpassphrase\": \"seedphrase\",\n\"address\": \"RYX6RYU3AAvwVCNyNM4cVyGUhSMUPvKs3r\",\n\"pubkey\": \"02ffc2f4b071afdec631e3fb7d435a0047be14a81ea1a269e4206b0068c0c1fa6f\",\n\"privkey\": \"d899ed88e9ee2e90c2cf51cb47e7b4495ec1e1cb10763bb1c111b0bde48bf86c\",\n\"wif\": \"UwGb5KvGPfMUr1tu74Desjh87ZeJM4wq5goLyThcogeLifc5aJqT\"\n}\n```\nCopy that information and store it somewhere **SAFE**. With this information anyone having access to it will have full control over that address.The 52-character string after **\"wif\":** that is shown, is what you want to import in the next step.## Importing a single WIF for a public (transparent) address\nTo import your address, go to `settings` --> `Coin Settings`, select the chain you want to use in the top-right corner and enter the following command:\n```\nrun importprivkey \"<wif>\" \"\" true\n```\nReplace `<wif>` with the actual **wif** you got from the `convertpassphrase` command earlier.Note: Don't use the WIF from the example above, but use the one from the CLI-interface in Verus Desktop.Note: The GUI wallet will not show any progress on the import and may give messages that the RPC daemon is not reacting. It will take quite some time for the process to finish in the background, especially if the address has many transaction on it.", "./raw_text_input_wiki/how-to_convert-seed-to-wif.md"], ["## Importing multiple WIFs in one batch for public (transparent) addresses\nTo import your address, go to `settings` --> `Coin Settings`, select the chain you want to use in the top-right corner and enter the following command for every WIF except for the final one:\n```\nrun importprivkey \"<wif>\" \"\" false\n```\nImport the final WIF with this command:\n```\nrun importprivkey \"<wif>\" \"\" true\n```\nThe last command triggers the chain to rescan all addresses in your wallet, including all the addresses you just imported.\nReplace `<wif>` with the actual **wif** (like the one you got from the `convertpassphrase` command earlier).Note: Don't use the WIF from the example above, but use the one from the CLI-interface in Verus Desktop.The GUI wallet will not show any progress on the import and may give messages that the RPC daemon is not reacting. It will take quite some time for the process to finish in the background, especially if the address has many transaction on it.## Importing a single WIF for a private address\nTo import your address, go to `settings` --> `Coin Settings`, select the chain you want to use in the top-right corner and enter the following command:\n```\nrun z_importkey \"<wif>\" \"yes\" 1\n```\nReplace `<wif>` with the actual **wif** you got from the `convertpassphrase` command earlier.Note: Don't use the WIF from the example above, but use the one from the CLI-interface in Verus Desktop.The GUI wallet will not show any progress on the import and may give messages that the RPC daemon is not reacting. It will take quite some time for the process to finish in the background, especially if the address has many transaction on it.", "./raw_text_input_wiki/how-to_convert-seed-to-wif.md"], ["## Importing multiple WIFs in one batch for private addresses\nTo import your address, go to `settings` --> `Coin Settings`, select the chain you want to use in the top-right corner and enter the following command for every WIF except for the final one:\n```\nrun z_importkey \"<wif>\" \"no\"\n```\nImport the final WIF with this command:\n```\nrun z_importkey \"<wif>\" \"yes\" 1\n```\nThe last command triggers the chain to rescan all addresses in your wallet, including all the addresses you just imported.\nReplace `<wif>` with the actual **wif** (like the one you got from the `convertpassphrase` command earlier).\n\nNote: Don't use the WIF from the example above, but use the one from the CLI-interface in Verus Desktop.\n\n### The GUI wallet will not show any progress on the import and may give messages that the RPC daemon is not reacting. It will take quite some time for the process to finish in the background, especially if the address has many transaction on it.\n\nInformation compiled by Oink.vrsc@.\n\nNote: revision date 2021-05-02.", "./raw_text_input_wiki/how-to_convert-seed-to-wif.md"], ["# Question: What should I do if I end up on my own fork because of a network issue or having an old version of the wallet?This solution can be solved in 2 ways: you can simply install the latest bootstrap file (less work, big download) or search manually for the forked block and invalidate that block (time-consuming, no download needed.)## Procedure 1 (Easy, installing bootstrap)For all GUI or CLI users.\n1. Stop the wallet/mining process by cleanly shutting down the program.\n2. Update your wallet if necessary.\n3. Follow the procedure in [HOW-TO Backup, Install or Update and Bootstrap your wallet.md](#!how-to/how-to_bootstrap.md) to efficiently rectify the problem.\n4. Do not be dismayed if it seems that your mining rewards suddenly seem to come to a halt. Remember, when you mine to the wrong chain rewards can come in very quickly, but they are worth nothing.## Procedure 2 (Time consuming, no extra download)", "./raw_text_input_wiki/faq-allos19_what_should_i_do_if_i_end_up_on_my_own_fork_because_of_a_network_issue_or_having_an_old_version_of_the_wallet.md"], ["### Verus-Desktop\n1. The commands are **all** entered in the *Native Client Terminal* that is located under `Settings`, `Coin Settings`.\n2. Search for the **earliest** block that not matches the blockchain:\n  `run getblockhash <suspected blocknumber>` will show you the blockhash for the blocknumber you filled in\n  The response shown in the *Native Client Terminal* will be similar to this:\n  `5cc7844973fb95ef17f1772ea4aba579f0d8273fb0ee6064cd8e707d1056c646`\n3. Check the blockhash your command gave you against the blockhash the [explorer](https://explorer.verus.io) shows.\n4. If the blockhash from the explorer is different than yours, repeat steps 2 & 3 until you find the earliest block that is different.\n5. Use the **earliest incorrect blockhash** from your system to invalidate that block:\n  `run invalidateblock <earliest incorrect blockhash>`\n  The *Native Client Terminal* will not give feedback on this command.\n6. Now use the **correct blockhash** that the explorer gave you for the block you just locally invalidated:\n  `run reconsiderblock <correct blockhash>`\n  Again the *Native Client Terminal* will not give feedback on this command.\n7. Once your wallet connects to a node that is on the correct chain, it will quicly synchronize.\n  If needed you can either restart your wallet to force new connections or manually disconnect bad nodes.", "./raw_text_input_wiki/faq-allos19_what_should_i_do_if_i_end_up_on_my_own_fork_because_of_a_network_issue_or_having_an_old_version_of_the_wallet.md"], ["### CLI\n1. Search for the **earliest** block that not matches the blockchain:\n  `./verus getblockhash <suspected blocknumber>` will show you the blockhash for the blocknumber you filled in\n  The response will be similar to this:\n  `5cc7844973fb95ef17f1772ea4aba579f0d8273fb0ee6064cd8e707d1056c646`\n2. Check the blockhash your command gave you against the blockhash the [explorer](https://explorer.verus.io) shows.\n3. If the blockhash from the explorer is different than yours, repeat steps 1 & 2 until you find the earliest block that is different.\n4. Use the **earliest incorrect blockhash** from your system to invalidate that block:\n  `./verus invalidateblock <earliest incorrect blockhash>`\n  The deamon will not give feedback on this command.\n5. Now use the **correct blockhash** that the explorer gave you for the block you just locally invalidated:\n  `./verus reconsiderblock <correct blockhash>`\n  Again the daemon will not give feedback on this command.\n6. Once your daemon connects to a node that is on the correct chain, it will quicly synchronize.\n  If needed you can either restart your daemon to force new connections or manually disconnect bad nodes.\n\n(submitted by @jimboscott, Edited by Oink.vrsc@)\n\nNote: last revision date 2020-11-11.", "./raw_text_input_wiki/faq-allos19_what_should_i_do_if_i_end_up_on_my_own_fork_because_of_a_network_issue_or_having_an_old_version_of_the_wallet.md"], ["# Question: ERROR: Your wallet.dat is not matching the blockchain. Please restart the wallet with -reindex param.\n\nIt seems you probably trying to move coinbase coins that you must move them through a private address (zaddress) first by shielding your coinbases, which is required by Verus blockchain rules.\n\n## Procedure\n\n1. go to the \"Receive\" screen and make sure you have a private address (starting with `zs`), if you don't have that create one.\n2. Copy the new private address to your clipboard\n3. Go to the \"Mining\" screen, select Verus and select \"Shield Rewards\"\n4. Leave \"All unshielded funds\" as the source and paste the new zaddress into the destination\n5. Click on \"Continue\"\n6. Wait a while until you have a private balance showing on the Wallet screen\n7. Send again, this time from your private address to any normal transparent receive address that you have.\n\n(submitted by @keda666, solution written by mikeout.vrsc@)\n\nNote: revised 2020-04-24", "./raw_text_input_wiki/faq-allos18_your_wallet.dat_is_not_matching_the_blockchain._please_restart_the_wallet_with_-reindex_param.md"], ["# Worldwide Verifiable Digital Signatures for All!Verus digital signatures, based on Verus ID, offer the first worldwide verifiable, decentralized, single or multi-sig friendly-name signatures for content such as messages and files, authentication, and attestations, with full support for revocation and recovery in case of key loss or theft.Bitcoin, which was first to enable worldwide, P2P decentralized blockchain transactions, and most of its derivatives, offer ways to sign messages with specific private keys that can be verified against public addresses. While that does offer some limited signing capability, it does not offer capabilities that can compete with centralized services offering more sophisticated key management. A single public/private key pair lacks critical capabilities to make it suitable as an actual identity, most notable and obvious being the ability to recover from loss or theft of private keys, but arguably as important are friendly name aliases, modifiable multi-sig signing, updates, privacy, and the association of signed attestations by other identities to statements about properties of the identity.Verus ID enables free verifiable digital signatures for all through the Verus ID protocol as just one of the many new capabilities it enables. It is also the foundation upon which many new applications and additional capabilities can be built.", "./raw_text_input_wiki/signatures.md"], ["For example, using Verus ID signatures, it\u2019s possible for any journalist anywhere to sign photos, videos, and content, establish a reputation for authenticity, and counter the potential for deep-fakes to make the truth harder to find. Open source projects can now create their own identities and digitally sign their binary releases, ensuring that not only can a file be verified by hash as the one downloaded from a particular server, but by signature as the actual file initially signed by the developer or release engineer. Signatures also form the basis for any attestation of one party to the validity of another. In fact, there are so many applications for digital signatures, from things listed already, to physical entry systems, to workflow applications, to new earning opportunities that a full discussion of use cases would overwhelm these release notes.\n\nIn any case, we are happy to release digital signatures for all, and we hope you enjoy using this new, simple capability, maybe even think of a new use case you\u2019d like to pursue yourself as a business opportunity on the Verus Network!", "./raw_text_input_wiki/signatures.md"], ["# Question: How do I unshield my coin rewards and get them staking on CLI?### Important General Information`verus command \"<userinput>\"` needs to be entered literally, with `<userinput>` replaced by your specific userdata. So if the text directs you to use for example `\"<Public Address>\"`, you replace that (including the `<` and `>`) with the address,\nso it looks similar to this: `\"RYX6RYU3AAvwVCNyNM4cVyGUhSMUPvKs3r\"`.#### Remarks on Windows command line formatting:The CLI help shows the command format for Linux and MacOS. On the native windows command prompt (`cmd.com`) the formatting is different.\n* In windows command prompt, substitute the shown `'`-character with the `\"`-character.\n* In windows command prompt, substitute the shown `\"`-character with the `\\\"`-characters.\n* In windows command prompt, omit the preceding `./`.Note: As an example, in Linux the command:\n`./verus z_sendmany <my_private_address_without_quotationmarks> '[{\"address\":\"<my_transparent_address>\",\"amount\":<95.9998>}]'`\nshould be entered on the Windows command prompt as:\n`verus z_sendmany <my_private_address_without_quotationmarks> \"[{\\\"address\\\":\\\"<my_transparent_address>\\\",\\\"amount\\\":<95.9998>}]\"`", "./raw_text_input_wiki/faq-allos17_unshield_coin_rewards_and_get_them_staking_in_cli.md"], ["## Procedure:\n1) `./verus z_shieldcoinbase \"*\"` my_private_address_without_quotationmarks\nthis capture all so called coinbases, i.e. mined coins that are not yet staking.\nyou have to wait 100 blocks (minutes) after receiving them before being able to move them.\nwait for a few minutes for the tx to be confirmed.\n2) `./verus z_getbalance <my_private_address_without_quotationmarks>` this is to substract the 0.0001 VRSC fee from the balance in the next step.\n3) `./verus z_sendmany <my_private_address_without_quotationmarks> '[{\"address\":\"<my_transparent_address>\",\"amount\":<95.9998>}]'`\namount is minus 0.0001 from balance and without quotation marks.\n(4) to verify: `./verus z_gettotalbalance`\nafter a few minutes (operations from private addresses are a bit time consuming)\n\nNote: I am always using the same private address.\n\n(submitted by @karero, based on @dukeleto)\n\nNote: last revision date 2020-04-12.", "./raw_text_input_wiki/faq-allos17_unshield_coin_rewards_and_get_them_staking_in_cli.md"], ["# error while loading shared libraries: libgomp.so.1: No such file or directory\n# error while loading shared libraries: libz.so: No such file or directory\n\nWhen running `./verusd` on a Linux distro (eg Debian or Devuan), not all dependencies may be installed by default, resulting in the errormessage `error while loading shared libraries: libgomp.so.1: No such file or directory` or `error while loading shared libraries: libz.so: No such file or directory`.\n\nTo solve this you need to install the libgomp and zlib1g-dev libraries:\n`sudo apt-get install libgomp1 zlib1g-dev`\n\nSolution supplied by: Oink.vrsc@\n\nNote: revision date 2021-12-01.", "./raw_text_input_wiki/armfaq-01_libgomp.so.1.md"], ["# How-To: Restore my wallet from a backup?## Important General Information### Verus `Wallet.dat`, Chaindata & `VRSC.conf` standard locations\n * Linux:\t\t`~/.komodo/VRSC`\n * Mac OS: \t`~/Library/Application Support/Komodo/VRSC`\n * Windows 10: \t`%AppData%\\Roaming\\Komodo\\VRSC\\`\n * OS independent through Verus Desktop: Click `help`, `Show Verus data folder (default)``verus command \"<userinput>\"` needs to be entered literally, with `<userinput>` replaced by your specific userdata. So if the text directs you to use for example `\"<Public Address>\"`, you replace that (including the `<` and `>`) with the address,\nso it looks similar to this: `\"RYX6RYU3AAvwVCNyNM4cVyGUhSMUPvKs3r\"`.### Instruction Video\nExternal YouTube link: [Restoring the Verus Desktop wallet](https://youtu.be/EO6EdPY32Rk)## Procedure\n### Using a backup of your `wallet.dat`.1. Stop verusd. For Windows-Desktop or Agama, just exit and wait for it to close completely. For the linux cli run `./verus stop`, or for the windows cli run `verus stop`.\n2. Once your wallet is finished closing copy the backup of your `wallet.dat` file from your backup location to the directory listed in the start of this document (see above).\n3. Now restart your wallet by launching Verus Desktop, Agama or running verusd for the CLI.### Using a `walletexport` file.Note: The filename you replace`<mywalletimport>` with, can only contain letters and figures, no other characters, so it **cannot** have an file-extensionAttention: The command `z_importwallet` triggers the wallet to rescan in order to make all transactions to the freshly imported wallet addresses visible.\nRescanning your wallet may take a considerable time, during which your wallet may not respond to other commands. Please be patient.The `<PATH>` in the `z_importwallet` command needs to be the **full absolute** path to the file. replace `LOGINNAME` with the actual loginname.", "./raw_text_input_wiki/how-to_restore_my_wallet.md"], ["#### Verus Desktop:\n  Go to `Settings`, `Coin Settings` and click `Import native wallet backup`.\n  Click `Choose file`, browse to your backup file, select it and click `Open`\n  Click `Import` to start the inport process\n#### Agama:\n  Go to settings, scroll to the bottom and click CLI, select VRSC in that section.\n  Then below type `z_importwallet \"<PATH><mywalletimport>\"` and click the button below to run it.\n#### linux/MacOS CLI:\n  run `./verus z_importwallet \"<PATH><mywalletimport>\"`\n#### Windows CLI:\n  run `verus z_importwallet \\\"<PATH><mywalletimport>\\\"`\n\n### Using individual seeds / WIF-keys\nImporting individual keys is explained in detail in this wiki: [import your Lite wallet address into your native Verus Desktop](#!how-to/how-to_convert-seed-to-wif.md).\n\nInformation compiled by Oink.vrsc@.\n\nNote: revision date 2022-09-12.", "./raw_text_input_wiki/how-to_restore_my_wallet.md"], ["# Remarks on Windows command line formatting:\n\nThe CLI help shows the command format for Linux and MacOS. On the native windows command prompt (`cmd.com`) the formatting is different.\n\n* For windows substitute the shown `'`-character with the `\"`-character.\n * For windows substitute the shown `\"`-character with the `\\\"`-characters.\n\nNote: this only applies to giving commands from the windows command prompt. Verus Desktop will accept commands as listed.\n\nCreated by Oink.vrsc@\n\nNote: last revision date 2020-03-02.", "./raw_text_input_wiki/winfaq-01_cli_formatting.md"], ["# VerusID**VerusIDs** are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. **VerusIDs** provide plenty of opportunity for identity applications. Specifically, **VerusID** provides:### Quantum-ready friendly crypto-addresses on the worldwide Verus network\nVerusIDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.2 does not include quantum resistant signatures for transactions, Verus IDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID->destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs.### Fully Decentralized Protocol\nAnyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. Verus IDs are:", "./raw_text_input_wiki/verusid.md"], ["* Revocable -- each ID includes a revocation authority, which defaults to the identity self. If another ID is specified as the revocation authority it can be used to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft or turnover in an organization.\n\n* Recoverable -- each ID also includes a separate recovery authority, which also defaults to self. If another ID is specified as the recovery authority it can be used to recover the ID from its revoked state, with the option to alter the primary authorities used to spend and sign.\n\n* Private - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong identity, attested to with a quantum secure signature when that is available.\n\n* Powerful - Multiple addresses or other IDs can be defined as primary addresses, and any number of those may be required to spend, sign, or alter the identity (N of M). The revocation authority may only be altered by the revocation authority, and the same applies to the recovery authority, either of which may be another identity with its own N of M multisig controls for its primary addresses.", "./raw_text_input_wiki/verusid.md"], ["[gimmick: math]()\n\n# Question: I'm mining since XYZ with XYZ, why I haven't found a block yet?\n\n$$ Average Time To Find One Block = ( \\frac{NetworkHashrate}{LocalHashrate} ) * BlockTime $$\n\nOne block = 6 coins (as now)\nNetworkHashrate = retrieved by `getmininginfo` command from </>CLI\nLocalHashrate = retrieved by `getmininginfo` command\nBlockTime = 60 seconds (average)\nnote: The above formula assumes you are already mining and your hashrate is already included in the `NetworkHashrate`. For very large LocalHashrate calculations (what-if-I-had scenario) add it to the NetworkHashrate yourself.\n\nReal example with - 31 threads AMD Ryzen 5950x @ 4.4Ghz -\n\n$$ Average Time To Find One Block = ( \\frac{851125882237}{46159950} ) * 60 $$\n$$ Average Time To Find One Block = 1,106,317 seconds (307 hours or little under 13 days) $$\n\nBear in mind that these are average times to find a block. In real life you may hit a block much sooner or later after finding the last. In the long run it averages out to the values predicted.\n\n(submitted by @TexWiller, edited by Oink.vrsc@)\n\nnote: last revision date 2023-06-21", "./raw_text_input_wiki/faq-allos02_average_time_to_find_a_block_manual_calculation.md"], ["# How do I install the Verus CLI (command line interface) wallet on a brand new (hosted) Linux system?Notice: Read it completely before use.#### Important General Information`wallet.dat` location on Linux: `~/.komodo/VRSC`#### Necessary files:Link 1: [Download latest Wallet](https://verus.io/wallet)\nLink 2: [Download Verus Bootstrap](https://bootstrap.verus.io/)## Procedure:1. First make sure your system is up to date: \n `sudo apt-get update && apt-get upgrade -y`2. I suggest not to use the root account. I you have not yet done, set up a new user\n `sudo adduser newusername`\n `sudo usermod -aG sudo newusername`\n3. Switch to new username\n `su - newusername`\n4. Test the your new user actually has root (SuDo) access, e.g.:\n `sudo ls -la /root`\n You should get some lines like this:\n `drwx------ 6 root root 4096 Jul 3 15:56`\n5. Download & install the wallet binaries:\n `wget https://github.com/VerusCoin/VerusCoin/releases/download/v0.9.3/Verus-CLI-Linux-v0.9.3-amd64.tgz`\n The downloaded archive contains another archive and a signature text file, enabling the archive within to be verified (You'll need a running wallet to do that)\n Also: Verify the URL to the latest version from the [Download latest Wallet](https://verus.io/wallet) above.\n `tar -xvf Verus-CLI-Linux-v0.9.3-amd64.tgz`\n Now extract the wallet archive:\n `tar -xvf Verus-CLI-Linux-v0.9.3-amd64.tar.gz`\n Change directory to verus-cli\n `cd verus-cli`\n Fetch parameters, takes time, more on slow Internet connection\n `./fetch-params`\nCreating the chaindata directory\n `cd ~`\n `mkdir -p .komodo/VRSC`\n `cd ~/.komodo/VRSC`\nDownload the block-chain bootstrap, this considerably speeds up synchronisation of the block-chain from days to minutes... (optional)\n `wget https://bootstrap.verus.io/VRSC-bootstrap.tar.gz`\n `tar -xvf VRSC-bootstrap.tar.gz`\n Install libraries for Verus\n `sudo apt-get install libcurl3 ", "./raw_text_input_wiki/faq-lin01_install_linux_cli.md"], ["g++-multilib -y`\n Install Tmux a terminal multiplexer with which you can run threads in the background see https://en.wikipedia.org/wiki/Tmux\n `sudo apt-get install tmux -y`\n Start tmux:\n `tmux`\n Launch Verus Daemon with or without number of threads\n (usually number of threads equals number of cores or double of that if the processor support hyper threading well)\n `~/verus-cli/verusd -gen -genproclimit`\n `~/verus-cli/verusd -gen -genproclimit=24`\n Once mining is operational \u2013 again this may take some time \u2013\n you\u2019ll see: 256 mega hashes complete - working\n then detach tmux\n`[ctrl]&b d`", "./raw_text_input_wiki/faq-lin01_install_linux_cli.md"], ["Disable login with Root User\n(make sure your newly created user login works and has sudo rights)\n `sudo nano /etc/ssh/sshd_config`\nFind: PermitRootLogin yes\nAnd set to\nPermitRootLogin no\nApply new settings:\n `sudo systemctl restart sshd`\n\n(submitted by @karero, corrected by @Glennp, edited by Oink.vrsc@)\n\nNote: last revision date 2022-08-19.", "./raw_text_input_wiki/faq-lin01_install_linux_cli.md"], ["# Guide to verify a new wallet download.\n\nAttention: Read it completely before using.\n\n## Important General Information\nWallet download page: [https://verus.io/wallet](https://verus.io/wallet)\n\n## Using Verus-Desktop\n\n1. download the new version\n2. extract the archive\n3. verify the signature using the data in the `*.signature.txt`-file through your existing Verus-Desktop, *VerusID* tab, Verify Signed Data and choose to verify a file. Only continue when this verification returns True.\n4. stop your Verus-Desktop wallet\n5. install the verified installer (Windows).\n6. start your wallet.\n\n## Using CLI Wallet\n\n1. download the new version\n2. extract the archive\n3. verify the signature using the data in the `*.signature.txt`-file with the command `./verus verifyfile \"address or identity\" \"signature\" \"filepath/filename\"` command. Only continue when this verification returns True.\n4. stop your verusdaemon verus stop\n5. extract the verified archive to your current CLI-wallet location\n6. start your wallet (verusd)\n\nCompiled by: Oink@\n\nNote: creation date 2020-11-11.", "./raw_text_input_wiki/how-to_check_signatures.md"], ["# Question: What's the value of VRSC?\n\nUse with: https://veruspay.io/api/ for simple USD VRSC price, or choose options now added!\n\nOptions (values are case insensitive):\n   currency - BTC or Fiat code like USD or CAD\n   ticker - ARRR or VRSC\n   data - volume or price - volume only relevant if exchange is defined\n   exch - name of supported exchange, e.g. digitalprice - If no exchange, price is average of all supported for that coin.\n\nIf no options are set, the default is average price in USD fiat of VRSC.\n\nExamples:\n\nhttps://veruspay.io/api/ - This get's the current price of VRSC in USD, weighted against 24hr volume across all exchanges. This is the default return.\nhttps://veruspay.io/api/?exch=digitalprice&currency=cad - This will get the current price on digital price for VRSC and display in CAD fiat\nhttps://veruspay.io/api/?currency=btc - This will get the average price of VRSC in BTC, weighted by 24 hr volume across both exchanges\nhttps://veruspay.io/api/?currency=cad - This gets the current average price of VRSC in CAD, weighted by 24 hr volume across both exchanges\nhttps://veruspay.io/api/?exch=cryptobridge&data=volume - This will get the 24 volume of VRSC on CryptoBridge in the default currency of USD\nhttps://veruspay.io/api/?exch=cryptobridge&data=volume&currency=btc - This does the same but with BTC as the currency result\nhttps://veruspay.io/api/?currency=cad&ticker=arrr - Gets the average price of ARRR.\n\n(submitted by @Godballz, API created by @J Oliver Westbrook)", "./raw_text_input_wiki/faq-allos07_what_are_my_vrsc_worth.md"], ["# Welcome to Verus## The Future Is NowHere is a collection of information meant to span several platforms and services in order to keep all of us more informed on what\u2019s happening across the growing, world-wide community. It will also help to connect us, allowing us to discuss what\u2019s being worked on, what can be done to help and as a way to look ahead in a more involved way.Verus, latin for \u201cTrue\u201d, combines all of the features we believe are important in a cryptocurrency, and provides a foundation for future development. Verus is a fork of Zcash and Komodo that leverages the Komodo platform, and we appreciate the contributions and support from those teams as well as the Bitcoin developers that created a foundation for us to launch new capabilities **in a system that supports Bitcoin and Zcash compatible transaction types as well as Komodo cross chain swaps** and dPoW security enhancements.1. Verus Coin is a pure technology provider and does not endorse third party projects.\n2. Be your own bank: **you** are responsible for securing your coins and taking backups.\n3. **No VerusCoin community member, admin, or developer should __ever__, under __any__ circumstances, ask for your private keys or for you to send coins to them. Please __report__ any incident in the #community-support channel.**## The VerusCoin Community is YOU\\!If you\u2019ve been around long enough and feel a little skeptical or disillusioned from a few bad experiences elsewhere, it\u2019s totally understandable. We\u2019ve all had them and we know quite well that when unscrupulous projects abuse words like decentralization, interoperability, or protocol level solutions, it can have a *\u201cboy who cried wolf\u201d* effect.", "./raw_text_input_wiki/verus-welcome.md"], ["We believe that actions speak louder than words. Anything that may be considered hype can be backed up with functional examples. What we\u2019re doing here is genuine. We are trying to be the real deal, **just as Bitcoin started out, as an open-source, fair launched, no ICO, or pre-mined, or even dev funded project.** Despite this, a foundation has been established by and for fellow community members. There is always more to be done and the foundation regularly pays out bounties to community members that help to make the Verus vision a reality. In fact, just about everything has been designed to reinforce the community. Designed with efficiency in mind, only the miners and stakers are rewarded for securing the chains. This ensures bare minimum costs to the end user starting up a chain and the sleek UI removes the technical barrier.## NEW TO VERUS?### What we\u2019re about:Put simply, Verus is much more than any single ordinary blockchain; more of an entire ecosystem of **interconnected blockchains that all operate decentralized and at the protocol level**. Verus introduces Verus PBaaS (__**Public Blockchains as a Service**__), a true publicly notarized blockchain as a service with an easy to use built in wallet UI, designed to make it so that now anyone can start their very own full-fledged cryptocurrency so long as it can be funded or supported by miners. Newly created chains are just as secure as Verus itself and have the ability to be merge mined (up to __22x__ at once\\!)", "./raw_text_input_wiki/verus-welcome.md"], ["Benefiting both the user and the miners, self-strengthening the ecosystem and ensuring minimal fees (no room for middlemen to take a cut). Reserve backed currencies are also possible with __fractional reserve__ capabilities and since interoperability is paramount, exchanging currencies in __cross-chain transactions__ is as simple as sending coins from one wallet to a different coin\u2019s wallet. __Conversions__ are handled by a built in market maker that automatically determines price based on a predetermined curve and issues orders fairly to all buy/sells within a block, with zero spread and the added benefit of eliminating the well- established problem of front-running, just some amount of slippage based on the net buy/sell.. With reserve currencies, buyers can make buys without even needing sellers (and vice versa).\nAmazingly, everything is done at the __protocol level__ on a decentralized network, meaning Verus and it's associated chains can't be censored or stopped.## Getting started:\n### Important links:Website: [*https://verus.io*](https://verus.io)\nWallet: [*https://verus.io/wallet*](https://verus.io/wallet)\nGitHub: [*https://github.com/veruscoin*](https://github.com/veruscoin)\nExplorer: [*https://explorer.verus.io*](https://explorer.verus.io)\nDiscord: [*https://verus.io/discord*](https://verus.io/discord) Check [https://youtu.be/YVOfIMjRf30](Human Verification) if you only see one empty channel.\nBitcointalk: [*https://bitcointalk.org/index.php?topic=4070404.0*](https://bitcointalk.org/index.php?topic=4070404.0)Max Supply: 83,540,184\nAlgorithm: VerusHash 2.1 PoW/PoS - 50/50\nBlock time: 1 minute\nProof-of-Stake (PoS) ROI is currently between 6% and 8%\nHalving Frequency: roughly every two years\nNext Halving: Current ETA: Jan 2025 (Block \\#3,381,840)\nHalving Countdown: [*https:/countdown.verus.io/halving*](https://countdown.verus.io/halving)## VerusID", "./raw_text_input_wiki/verus-welcome.md"], ["VerusIDs are true self-sovereign identities and aren't simply an ID system as much as a fully functional blockchain protocol. There is no business in the protocol, but plenty of opportunity for those who use what it can do for identity applications. Verus ID provides:**Quantum ready** friendly crypto addresses on the worldwide Verus network -- VerusIDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.0 does not include quantum resistant signatures for transactions, VerusIDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID -> destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs.**Fully decentralized** -- anyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers.", "./raw_text_input_wiki/verus-welcome.md"], ["**Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.**Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.**Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.### A Built-in Decentralized Referral Program, Enabling Natural Growth.", "./raw_text_input_wiki/verus-welcome.md"], ["Verus IDs will cost Verus to acquire, 100 Verus per ID to be exact, which can be discounted to 80 Verus with referral of an existing Verus ID. The interesting twist is that all of the cost of an ID goes back into the network, either as referral fees, which are a way to get discounts or possibly even make money through referrals and built into the identity transactions themselves, or as mining and staking fees. No one besides people participating in the network as miners, stakers, or ID referrers take any proceeds from the cost of an identity. If you refer someone new and they purchase an ID with your ID as a referral, they will receive a 20% discount on the ID. In addition:1. You will receive 20 Verus directly\n2. The person who referred you, if there is one, will receive 20 Verus\n3. The person who referred person b, if there is one, will receive 20 Verus, and\n3. The miner or staker will receive the remainder of the discounted 80 Verus costAs you might expect from looking at the fact that anywhere from 20 to 100 Verus goes to miners and stakers of Verus for each new identity once identities hit mainnet, some Verus blocks may have VERY high rewards for some time. The best thing about that is that regardless of how much the Verus blockchain rewards miners over and above the pre-determined coinbase reward, it will be as a result of the **on-chain economy**, paid for by people buying identities with **no inflation** of the money supply\\! If you or your friends missed the early days of the Verus launch, **you don't want to miss this** new opportunity to be mining, staking or referring now **Verus IDs are activated on the mainnet\\!**.## VerusPay#### Blockchain-integrated payment gateway for accepting Verus Coin (VRSC) in a WooCommerce ecommerce store", "./raw_text_input_wiki/verus-welcome.md"], ["This plugin extends *WooCommerce* on *Wordpress*, adding the ability to accept cryptocurrency payments in Verus Coin (VRSC) using either an on-store wallet daemon (best for VPS or dedicated hosting stores) or manually configured VRSC addresses (best for shared hosting stores).When an order is submitted via the VerusPay gateway, the order will be placed \"on-hold\" while awaiting payment from the customer. The customer has a limited time wherein to send the payment and the store monitors the wallet/address to confirm payment received before releasing the order and redirecting the customer to the Thank You page.VerusPay uses limited API functionality for Manual Mode, to communicate with the blockchain explorer in verifying payments and with the veruspay.io API to get up-to-date price data. These API's do not receive any private data either about the store owner, store, or customer. The only data sent to the block explorer API is the public/transparent blockchain transaction and address used. For VerusPay.io API price data, only the store-set currency is sent to retrieve the current fiat exchange rate for Verus Coin.[*VerusPay installation instructions*](https://github.com/monkins1010/VerusPay/wiki)## Be a part of it allFocus on Verus\u2019 social media presence has picked up with new, fresh looking Facebook and YouTube channels so check them out and feel free to post something or simply explore the content. There\u2019s so much going on, plenty to learn about.So much so that there is an *open call to anyone and everyone out there who can submit graphical or textual content* that can be used to help support the upcoming mainnet launch.", "./raw_text_input_wiki/verus-welcome.md"], ["A stronger effort from our already wide base of members to post and utilize social media tools to help spread the word and generate new interested users is something we can all do right now. There is no better time than now and getting fresh new minds in here to discover what is being done is the first step in getting the great snowball rolling. To those of us who truly care and believe in this project, then this message is meant for you.### Looking AheadSince we are on the verge of an historical mainnet release with capabilities that have the potential to revolutionize both the financial and technical sides of fintech and send shockwaves across many industries. There are still lots of things to be done but each day we collectively push closer and closer to making it a reality.### Social Media LinksCheck out the brand **new** community website, community social media pages, new Veruscoin YouTube and Facebook pages for helpful how to or to just keep up to date with things. Speaking of how to, we can always use more helpful videos if any community members would like to take it upon themselves to chip in. The Medium page also has lots of helpful guides and there\u2019s always something to Tweet about. Be sure to drop by the discord to meet the vibrant and helpful community in real- time, where it isn\u2019t uncommon to find the developers offering assistance. Where else can you find that?We are all working together to realize something great. If you\u2019d like to join us and be a part of that special something but don\u2019t know how to, it can be as simple as checking out the links below and helping other\u2019s to understand that there\u2019s never been anything in existence quite like Verus, a complete, easy to use, fully decentralized blockchain ecosystem, designed specifically to benefit all participants in one of the most low cost yet efficient in every way, end-to-end systems to date.", "./raw_text_input_wiki/verus-welcome.md"], ["Facebook - [*https://www.facebook.com/VerusCoin/*](http://www.facebook.com/VerusCoin/)\nYouTube - [*https://www.youtube.com/channel/UC_-KCHBxaDwSgNMdE3LMThg*](https://www.youtube.com/channel/UC_-KCHBxaDwSgNMdE3LMThg)\nDiscord -[*https://verus.io/discord*](https://verus.io/discord)\nTwitter -[*https://twitter.com/veruscoin*](https://twitter.com/veruscoin)\nMedium - [*https://medium.com/@veruscoin*](https://medium.com/%40veruscoin)\nReddit -[*https://reddit.com/r/veruscoin*](https://reddit.com/r/veruscoin)\nCommunity twitter - [*https://twitter.com/VerusCommunity*](https://twitter.com/VerusCommunity)\n\n## Closing Thoughts\n\nAs a community project of just regular Joes, it can\u2019t be stressed enough how important each and every one of us all are. The true power of decentralization is putting power back in the hands of **YOU**.\n\ncreated by Rozo@ and Godballz@\n\nNote: last revision date 2022-03-09.", "./raw_text_input_wiki/verus-welcome.md"], ["# Linux pool-mining on low priority.Attention: Read it completely before use.### Links to VRSC miners:[Miners download page](https://verus.io/get-vrsc)## Procedure:In order to let your mining not interfere with other processes running on your PC, we'll need to deprioritize the mining process. This will result in your miner throttling down whenever your PC needs processing power. People have reported to be able to use CPU-heavy applications, like games, without the miner interfering, with this method.Because the Verus wallet (GUI and CLI) does a lot more than mining, it is not recommended to use this for a solo-mining setup. This is tested on Verus NHEQminer and Verus CCMiner on Ubuntu 18.04.First thing you will need is pool-mining software. The link is supplied above this procedure. Download your preferred miner, extract it to your prefered location and configure the batchfile with the pool of your choice and your own mining address.Now we'll need to adjust the batchfile to run on low priority:##### NHEQMINER:- Run your miner as you normally would, with `nice -n 19 ` placed in front of the command you normally use,\n  for example:\n   `nice -n 19 ./nheqminer -v -l pool.verus.io:9999 -u RVjvbZuqSGLGDm1B9BFkbHWySPKEx4tfjQ.Donator -p x -t 6`\n - make sure you replace the pool (`pool.verus.io:9999`) with your prefered pool and the address\n  (`RVjvbZuqSGLGDm1B9BFkbHWySPKEx4tfjQ`) with your own address. The address shown in this line is the veruscoin\n  foundation donation address. If desired change the identifier (`Donator`) to a name that easily identifies the\n  miner to you.##### CCMINER:", "./raw_text_input_wiki/faq-lin08_low_priority_mining.html.md"], ["- Run your miner as you normally would, with `nice -n 19 ` placed in front of the command you normally use,\n  for example:\n   `nice -n 19 ./ccminer -a verus -o stratum+tcp://pool.verus.io:9999 -u RVjvbZuqSGLGDm1B9BFkbHWySPKEx4tfjQ.Donator -t 6`\n - make sure you replace the pool (`stratum+tcp://pool.verus.io:9999`) with your prefered pool and the address\n  (`RVjvbZuqSGLGDm1B9BFkbHWySPKEx4tfjQ`) with your own address. The address shown in this line is the veruscoin\n  foundation donation address. If desired change the identifier (`Donator`) to a name that easily identifies the\n  miner to you.\n\nCreated by Oink.vrsc@.\n\nNote: last revision date 2020-11-11.", "./raw_text_input_wiki/faq-lin08_low_priority_mining.html.md"], ["# Question: I accidentally send funds to my b-address and cannot move those fundsFunds sent to a b-address get locked in the same manner as the original coinbase reward was. However, because they were not sent using a script to lock those coins, they can be retrieved, without waiting the full unlock period (typically between 3 and 27 months).Warning: DO NOT send to a b-address, unless you kow what you're doing.## procedure### First you need to determine the **TXID** of the locked funds.1. The easiest way is to obtain the TXID from the send transaction you did in Verus-Desktop to the b-address. Make a copy of the TXID: you will need it for this procedure\n2. The next easiest way is look up the b-address on the [explorer](https://explorer.verus.io) and examine the transactions to this address. The youngest transaction is usually the one you need. On the explorer the hash in the transaction is the TXID. Make a copy of the TXID: you will need it for this procedure\n3. In Verus Desktop, go to `Settings` --> `Coin Settings` and make sure `VRSC` is selected in the top right. Run the command:\n```bash\nrun listunspent 0 <BLOCKCOUNT> '[\"<YOUR-b-ADDRESS\"]'\n```\n Replace `<BLOCKCOUNT>` with the current blockcount your wallet is on.\n Replace `<YOUR-b-ADDRESS` with the actual b-address where the coins are.\n You will receive a result similar to this:\n ```json\n [{\n\"txid\": \"fa5962ebf61ef31867ba73b173433841f8f68578d53b4bb30cfe1432b5820f15\",\n\"vout\": 10,\n\"generated\": false,\n\"address\": \"iBSUZSgXHEGGz65GTT6BGgchtkTHoFBs57\",\n\"amount\": 2.20005763,\n\"interest\": 0,\n\"scriptPubKey\": \"050403000000cc1b04030001011504575dc6ae7484c83c0dc97a4218f88e2cbe9b659c75\",\n\"confirmations\": 159,\n\"spendable\": true\n}]\n```\nMake a copy of the TXID: you will need it for this procedurenote: The above result is an example. ***DO NOT*** use data from it.### Now we need to create a raw transaction", "./raw_text_input_wiki/faq-allos26_sent_funds_to_b-address.md"], ["To create a raw transaction, we will need to use the CLI-interface. In Verus Desktop\n`run createrawtransaction '[{\"txid\": \"yourtxid here\", \"vout\": fill in too}]' \"{\"destination addr\": <amount>}\" <current Blockheight -5>`1. adapt the above `createrawtransaction` command, making sure to subtract the 0.0001 VRSC free from the amount that is in the original TXID, similar to this example:\n```bash\nrun createrawtransaction '[{\"txid\": \"fa5962ebf61ef31867ba73b173433841f8f68578d53b4bb30cfe1432b5820f15\", \"vout\": 10}]' '{\"Oink@\": 2.20004763}' 890450\n```\nIn this example, the result is a long HEX-string:\n```json\n0400008085202f8901150f82b53214fe0cb34b3bd57885f6f841384373b173ba6718f31ef6eb6259fa0a00000000feffffff019b011d0d0000000024050403000000cc1b04030001011504575dc6ae7484c83c0dc97a4218f88e2cbe9b659c7552960d006e960d000000000000000000000000\n```\nCopy the string that your command gave as response, from the CLI interface of your wallet. You will need it in the next step.note: The above command and its result are examples. ***DO NOT*** use data from it. Use the results from your own wallet!", "./raw_text_input_wiki/faq-allos26_sent_funds_to_b-address.md"], ["2. In the CLI interface adapt and issue this command`run signrawtransaction <string from step 1>`\nIn our example, that would look like this:\n```bash\nrun signrawtransaction 0400008085202f8901150f82b53214fe0cb34b3bd57885f6f841384373b173ba6718f31ef6eb6259fa0a00000000feffffff019b011d0d0000000024050403000000cc1b04030001011504575dc6ae7484c83c0dc97a4218f88e2cbe9b659c7552960d006e960d000000000000000000000000\n```\nand your command will show a result similar to this example:\n```json\n{\n\"hex\": \"0400008085202f8901150f82b53214fe0cb34b3bd57885f6f841384373b173ba6718f31ef6eb6259fa0a000000694c67010101012102c9ca37dac14c819a99ce4a71533ab8d3d5e37643ede9c4da0981081a074f75df40531ea63fb3de6111949652111bbe524506999c97c06302715e85aa5c5813519b3eace4ac15bb3950600f968c0c555a935fd826f1a51e00bd2a7f12d035757fc5feffffff019b011d0d0000000024050403000000cc1b04030001011504575dc6ae7484c83c0dc97a4218f88e2cbe9b659c7552960d006e960d000000000000000000000000\",\n\"complete\": true\n}\n```note: The above command and its result are examples. ***DO NOT*** use data from it. Use the results from your own wallet!", "./raw_text_input_wiki/faq-allos26_sent_funds_to_b-address.md"], ["3. In the CLI interface adapt and issue this command `sendrawtransaction <\"hex\"-string from step 2>`.\nIn our example that would look like this:\n```bash\nrun sendrawtransaction 0400008085202f8901150f82b53214fe0cb34b3bd57885f6f841384373b173ba6718f31ef6eb6259fa0a000000694c67010101012102c9ca37dac14c819a99ce4a71533ab8d3d5e37643ede9c4da0981081a074f75df40531ea63fb3de6111949652111bbe524506999c97c06302715e85aa5c5813519b3eace4ac15bb3950600f968c0c555a935fd826f1a51e00bd2a7f12d035757fc5feffffff019b011d0d0000000024050403000000cc1b04030001011504575dc6ae7484c83c0dc97a4218f88e2cbe9b659c7552960d006e960d000000000000000000000000\n```\nand your command will show a result similar to this example:\n```json\n4a5202327e6ed2ce20d3b146155ec92e52fae6c4481362faf6f8a072017b41f1\n```\nThe result of this command is the TXID of the coins moving out of your b-address. You can monitor the progress in your wallet or look up the TXID in the [explorer](https://explorer.verus.io).\n\nnote: The above command and its result are examples. ***DO NOT*** use data from it. Use the results from your own wallet!\n\nSome words of advice after succesfully removing funds locked in a b-address:\n* Pay attention to which addresses you send.\n* It may be an idea to import the addresses you use into a fresh wallet, omitting all unused (b-) addresses.\n\nnote: Created 2020-11-11 by Oink.vrsc@", "./raw_text_input_wiki/faq-allos26_sent_funds_to_b-address.md"], ["# Is mining profitable?\n#### Necessary files:\nLink 1: [Verush Hashrates](https://docs.google.com/spreadsheets/d/1RrSYJDV0Mjj3X-myMC3aQDGkcipivxHsD7ZxJ3r5f_A/edit?usp=sharing)\n\n## Answer:\nMining VRSC with Verushash is at this time one of the most profitable coins to mine with your CPU.\nIf you want to know how profitable it is, you need to know a few important details about your own conditions.\n1. What hardware will I use to mine with?\n 1. CPU - If that is a fairly modern CPU with AES and AVX instructions built in.\n This will be true if your processor is produced in 2013 or later. For processors between 2008 and 2012 you need to check the specifications.\n Older processors can still mine, but they will not perform well.\n 2. GPU - It is possible to mine with fairly modern Nvidia GPU's, but since Verushash uses specific functions from the\n mentioned AES and AVX instruction sets, they will perform better than old CPUs, but worse than modern CPUs.\n 3. FPGA - Many of these semi-specialized machines can be reprogrammed to mine VRSC. They don't have the same power per processor as a CPU, but they often have multiple processors running parrallel. The stronger ones can outperform a CPU easily, but need a lot of power to do so.\n\n2. What is my energy price?\n\n3. Do I use existing hardware or do I buy?\n\nIf you know the answer to the hardware, you can look op a comparable one in the Spreadsheat from Link 1, to give you an\nidea of the performance.\n\nIf you know your energy price also, you can [calculate](#!faq-allos/faq-allos02_average_time_to_find_a_block_manual_calculation.md) an estimation of how much your hardware can earn you at this moment.\n\nIf you have to get new hardware just to mine, think about it for a moment: would you have bought new hardware anyway? If so,\nyou can use this information to get an idea what kind of hardware you want to buy.\n\nCreated by Oink.vrsc@", "./raw_text_input_wiki/faq-allos08_mining_profitability.md"], ["# Windows pool-mining on low priority.## Links to VRSC miners:[Miners download page](https://verus.io/getVRSC.html)## Procedure:In order to let your mining not interfere with other processes running on your PC, we'll need to deprioritize\nthe mining process. This will result in your miner throttling down whenever your PC needs processing power.\nPeople have reported to be able to use CPU-heavy applications, like games, without the miner interfering, with\nthis method.Because the Verus wallet (GUI and CLI) does a lot more than mining, it is not recommended to use this for a\nsolo-mining setup. This is tested on Verus NHEQminer and Verus CCMiner on Windows 10.First thing you will need is pool-mining software. The link is supplied above this procedure. Download your\npreferred miner, extract it to your prefered location and configure the batchfile with the pool of your choice\nand your own mining address.Now we'll need to adjust the batchfile to run on low priority:##### NHEQMINER:- change to the folder you extracted the download\n - edit the `start.bat`\n - Scroll down to the line, that needs to be adjusted:\n   `nheqminer.exe -v -l %PoolHost%:%Port% -u %PublicVerusCoinAddress%.%WorkerName% -t %Threads% %1 %2 %3 %4 %5 %6 %7 %8 %9`\n - adjust the line so it looks like this:\n   `%windir%\\system32\\cmd.exe /c start \"NHEQminer VRSC\" /Low \"%THIS_DIR%\\nheqminer.exe\" -v -l %PoolHost%:%Port% -u %PublicVerusCoinAddress%.%WorkerName% -t %Threads% %1 %2 %3 %4 %5 %6 %7 %8 %9`\n - save and exit the file\n - run `start.bat` to start mining##### CCMINER:", "./raw_text_input_wiki/winfaq-02_low_priority_mining.md"], ["- Change to the folder you put the three files from the downloaded archive in (`run.verushhash.bat`, `libcrypto-1_1-x64.dll` & `ccminer.exe`)\n - edit the `run.verushhash.bat`\n - The line, that needs to be adjusted:\n   `ccminer -a verus -o stratum+tcp://na.luckpool.net:3956 -u REoPcdGXthL5yeTCrJtrQv5xhYTknbFbec.Donator -p d=6 -t 8`\n - adjust the line, so it looks like:\n   `C:\\Windows\\System32\\cmd.exe /c start \"ccminerCPUv3.5 VerusPool\" /Low \"c:\\Miners\\CCminer 2.0 CPU Release 3.5\\ccminer.exe\" -a verus -o stratum+tcp://pool.verus.io:9999 -u RVjvbZuqSGLGDm1B9BFkbHWySPKEx4tfjQ.Donator -t 16`\n - make sure you replace the pool (`stratum+tcp://pool.verus.io:9999`) with your prefered pool and the address\n  (`RVjvbZuqSGLGDm1B9BFkbHWySPKEx4tfjQ`) with your own address. The address shown in this line is the veruscoin\n  foundation donation address. If desired change the identifier (`Donator`) to a name that easily identifies the\n  miner to you.\n - save and exit the file\n - run `run.verushhash.bat` to start mining.\n\nSubmitted by Oink.vrsc@\nNote: last revision date 2020-11-11.", "./raw_text_input_wiki/winfaq-02_low_priority_mining.md"], ["# Question: what are the staking pools that I can join?\n\n- [Dudezmobi](https://docs.google.com/spreadsheets/d/1Up1WbMuCR21e6TxLae6zjLJePu_RIOVZwqShRj9vVvc/edit?usp=sharing)\n- [Ginasis](https://discord.gg/4FJJRY5)\n\nA staking pool has advantages and disadvantages over solo staking:\n\n**Disadvantages**:\n 1. It causes centralization on the network\n 2. The pool owner is in control of **all** funds in the pool, including yours.\n 3. You need to trust the pool operator to share the rewards fairly.\n 4. You need to trust the pool operator to release your funds back to you on request.\n 5. You need to trust the pool operator to securely run the pool 24/7.\n\n**Advantages**:\n 1. You don't need to run your wallet 24/7 in native mode.\n\nWarning: **Do your own research** before you decide anything!\n\nNote: last revision date 2020-10-14.", "./raw_text_input_wiki/faq-allos22_staking_pools.md"], ["# Question: How do I know when an immature block will \"unlock\" (mature)?\n\n## Procedure:\n1. Get the values of the current block height (\"blocks\") and the \"blockstomaturity\" the distance to maturity of the transaction in question. (i.e. the number of blocks between current block height and where it unlocks. You can see the number is decreasing all the time, and if you add it to the current block height you'll see a constant.)\n2. Apply this formula: blockstomaturity / 1440 = days to maturity (unlocking)\n  e.g. 925558/1440=643 days\n\n(submitted by @J Oliver Westbrook, edited by @elvinsophus )", "./raw_text_input_wiki/faq-allos01_immature_block_unlock_time_calculation_manual_calculation.md"], ["# How-To Join VRSC testnet.Attention: Read it completely before using.#### Important General Information`VRSCTEST data location`:\nLinux GUI: `~/.komodo/VRSCTEST`\nMac OS: `/Users//Library/Application Support/Komodo/VRSCTEST`\nWindows 10: `%AppData%\\Roaming\\Komodo\\VRSCTEST\\`#### General remarks on CLI wallet:On Windows command line enter the commands as shown without the surrounding quotation marks\nIn Linux shell preceed the commands without surrounding quotation marks with `./`\nIn MacOS shell preceed the commands without surrounding quotation marks with `./`\nExample: the windows version `verus listtransactions` transforms in Linux or MacOS to `./verus listtransactions`.#### General remarks on Windows command line formatting:The CLI help shows the command format for Linux and MacOS.\nFor windows substitute the shown `'`-character with the `\"`-character.\nFor windows substitute the shown `\"`-character with the `\\\"`-characters.### Necessary files:Link 1: [Download latest Wallet](https://verus.io/wallet.html)## Procedure:Joining Verus testnet to test the latest capabilities before they are released to mainnet or simply test if your goals are possible without spending VRSC (testnet coins hold no value) is easy.### Download a walletThe first thing you need is a VRSC wallet. The CLI-wallet and Verus Desktop GUI wallet are available on the link above for Windows,\nLinux and MacOS. If you already have a wallet verify that the wallet is the most recent version and update if needed.### Verus Desktop Wallet ###", "./raw_text_input_wiki/how-to_join_testnet.md"], ["1. Start your Verus Desktop wallet.\n2. If you have never run Verus testnet on your system before:\n 1. Go to `settings` (cogwheel icon) and select `General Settings`.\n 2. Select `Enable VRSCTEST`.\n 3. Click `Save Changes`\n 4. Restart Verus desktop\n3. When logged in, click `Add Coin`, select `Verus Testnet` and click `Continue`.\n4. Select the startup parameters you desire (Native (Lite mode is not available on testnet), Staking, mining (specify number of threads), reindex blockchain and/or rescan wallet) and click `Add Coin`.\n\n**CLI wallet**\n1. start CLI walletdaemon using these parameters:\n  `verusd -chain=VRSCTEST` \n  Any extra parameter that you are used to for VRSC (like `-mint` or `-pubkey=`) can be appended as well.\n2. commands through the CLI are in the following format:\n  `verus -chain=VRSCTEST` \n  The only difference with the normal VRSC chain is the `-chain=VRSCTEST` option, that is added.\n\nCreated by Oink.vrsc@, inspired by 0x03.vrsc@.\n\nNote: revision date 2020-11-11.", "./raw_text_input_wiki/how-to_join_testnet.md"], ["# Options available to the Verusd coindaemon.## Important General Information#### Verus Daemon version 1.2.2-4Usage: `verusd [options]` Start Verus DaemonThe options can be issued from the command line as shown above, but they can also be stored in the `VRSC.conf` file.\nThe `VRSC.conf` file is loaded on the daemon startup and provides the standard configuration.\nOptions supplied at the command line will override any conflicting settings in the `VRSC.conf` file.\nTo use the options in the `VRSC.conf` file, omit the leading `-`-character.\nExample of a `VRSC.conf`-file:\n```\nrpcuser=user\nrpcpassword=pass\nrpcport=27486\nserver=1\ntxindex=1\nrpcallowip=127.0.0.1\nrpchost=127.0.0.1\naddnode=195.253.48.236:27485\n```## Verus `Wallet.dat`, Chaindata & `VRSC.conf` standard locationsLinux:\t\t`~/.komodo/VRSC`\nMac OS: \t`~/Library/Application Support/Komodo/VRSC`\nWindows 10: \t`%AppData%\\Roaming\\Komodo\\VRSC\\`# Options:## General Options:`-?`\n    This help message`-alerts`\n    Receive and display P2P network alerts (default: 1)`-alertnotify=<cmd>`\n    Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)`-blocknotify=<cmd>`\n    Execute command when the best block changes (%s in cmd is replaced by block hash)`-bootstrap`\n    Removes previous chain data (if present), downloads and extracts the bootstrap archive.`-checkblocks=<n>`\n    How many blocks to check at startup (default: 288, 0 = all)`-checklevel=<n>`\n    How thorough the block verification of -checkblocks is (0-4, default: 3)`-conf=<file>`\n    Specify configuration file (default: VRSC.conf)`-daemon`\n    Run in the background as a daemon and accept commands`-datadir=<dir>`\n    Specify data directory`-dbcache=<n>`\n    Set database cache size in megabytes (4 to 16384, default: 450)", "./raw_text_input_wiki/clifaq-01_verusd_options.md"], ["`-exportdir=<dir>`\n    Specify directory to be used when exporting data`-loadblock=<file>`\n    Imports blocks from external blk000??.dat file on startup`-maxorphantx=<n>`\n    Keep at most <n> unconnectable transactions in memory (default: 100)`-mempooltxinputlimit=<n>`\n    [DEPRECATED FROM OVERWINTER] Set the maximum number of transparent\n    inputs in a transaction that the mempool will accept (default: 0 = no\n    limit applied)`-par=<n>`\n    Set the number of script verification threads (-4 to 16, 0 = auto, <0 =\n    leave that many cores free, default: 0)`-pid=<file>`\n    Specify pid file (default: verusd.pid)`-prune=<n>`\n    Reduce storage requirements by pruning (deleting) old blocks. This mode\n    disables wallet support and is incompatible with `-txindex`.\n    **Warning** Reverting this setting requires re-downloading the entire blockchain.\n    (default: 0 = disable pruning blocks, >550 = target size in MiB to use\n    for block files)`-reindex`\n    Rebuild block chain index from current blk000??.dat files on startup`-sysperms`\n    Create new files with system default permissions, instead of umask 077\n    (only effective with disabled wallet functionality)## Index options:`-addressindex`\n    Maintain a full address index, used to query for the balance, txids and\n    unspent outputs for addresses (default: 1)`-idindex`\n    Maintain a full identity index, enabling queries to select IDs with\n    addresses, revocation or recovery IDs (default: 0)\n    !!! Activating requires reindexing, not compatible with bootstrap!!!`-timestampindex`\n    Maintain a timestamp index for block hashes, used to query blocks hashes\n    by a range of timestamps (default: 0)\n    !!! Activating requires reindexing, not compatible with bootstrap!!!", "./raw_text_input_wiki/clifaq-01_verusd_options.md"], ["`-spentindex`\n    Maintain a full spent index, used to query the spending txid and input\n    index for an outpoint (default: 1)`-insightexplorer`\n    If enabled, forces addressindex, spentindex and timestampindex to enabled\n    If disabled, forces timestampindex to disabled\n    (default: 0)\n    !!! Activating requires reindexing, not compatible with bootstrap!!!## Connection options:`-addnode=<ip>`\n    Add a node to connect to and attempt to keep the connection open`-banscore=<n>`\n    Threshold for disconnecting misbehaving peers (default: 100)`-bantime=<n>`\n    Number of seconds to keep misbehaving peers from reconnecting (default:\n    86400)`-bind=<addr>`\n    Bind to given address and always listen on it. Use [host]:port notation\n    for IPv6`-connect=<ip>`\n    Connect only to the specified node(s)`-discover`\n    Discover own IP addresses (default: 1 when listening and no -externalip\n    or -proxy)`-dns`\n    Allow DNS lookups for -addnode, -seednode and -connect (default: 1)`-dnsseed`\n    Query for peer addresses via DNS lookup, if low on addresses (default: 1\n    unless -connect)`-externalip=<ip>`\n    Specify your own public address`-forcednsseed`\n    Always query for peer addresses via DNS lookup (default: 0)`-listen`\n    Accept connections from outside (default: 1 if no -proxy or -connect)`-listenonion`\n    Automatically create Tor hidden service (default: 1)`-maxconnections=<n>`\n    Maintain at most <n> connections to peers (default: 384)`-maxreceivebuffer=<n>`\n    Maximum per-connection receive buffer, <n> * 1000 bytes (default: 5000)`-maxsendbuffer=<n>`\n    Maximum per-connection send buffer, <n> * 1000 bytes (default: 1000)`-onion=<ip:port>`\n    Use separate SOCKS5 proxy to reach peers via Tor hidden services\n    (default: -proxy)", "./raw_text_input_wiki/clifaq-01_verusd_options.md"], ["`-onlynet=<net>`\n    Only connect to nodes in network <net> (ipv4, ipv6 or onion)`-permitbaremultisig`\n    Relay non-P2SH multisig (default: 1)`-peerbloomfilters`\n    Support filtering of blocks and transaction with Bloom filters (default:\n    1)`-port=<port>`\n    Listen for connections on <port> (default: 7770 or testnet: 17770)`-proxy=<ip:port>`\n    Connect through SOCKS5 proxy`-proxyrandomize`\n    Randomize credentials for every proxy connection. This enables Tor\n    stream isolation (default: 1)`-seednode=<ip>`\n    Connect to a node to retrieve peer addresses, and disconnect`-timeout=<n>`\n    Specify connection timeout in milliseconds (minimum: 1, default: 5000)`-torcontrol=<ip>:<port>`\n    Tor control port to use if onion listening enabled (default:\n    127.0.0.1:9051)`-torpassword=<pass>`\n    Tor control port password (default: empty)`-tlsdisable=<0 or 1>`\n    Disable TLS connections. (default: 0)`-tlsenforcement=<0 or 1>`\n   Only connect to TLS compatible peers. (default: 0)`-tlsfallbacknontls=<0 or 1>`\n   If a TLS connection fails, the next connection attempt of the same peer\n   (based on IP address) takes place without TLS (default: 1)`-tlsvalidate=<0 or 1>`\n   Connect to peers only with valid certificates (default: 0)`-tlskeypath=<path>`\n   Full path to a private key`-tlskeypwd=<password>`\n   Password for a private key encryption (default: not set, i.e. private\n   key will be stored unencrypted)`-tlscertpath=<path>`\n   Full path to a certificate`-tlstrustdir=<path>`\n   Full path to a trusted certificates directory`-uacomment=<string>`\n    Set a User Agent to your daemon. (default: disabled/none)\n    Shows as appended text in the `\"subver\"` string on connected nodes\n    Using this option has implications on your anonymity!", "./raw_text_input_wiki/clifaq-01_verusd_options.md"], ["`-whitebind=<addr>`\n    Bind to given address and whitelist peers connecting to it. Use\n    [host]:port notation for IPv6`-whitelist=<netmask>`\n    Whitelist peers connecting from the given netmask or IP address. Can be\n    specified multiple times. Whitelisted peers cannot be DoS banned and\n    their transactions are always relayed, even if they are already in the\n    mempool, useful e.g. for a gateway## Wallet options:`-arbitragecurrencies`\n   Either a JSON array or a comma separated list of currency names.`-arbitrageaddress`\n   A valid wallet address or identity controlled by this wallet that will\n   hold the arbitrage currencies to use.`-cheatcatcher=<sapling-address>`\n    same as \"-defaultzaddr\"`-defaultid=<i-address>`\n    VerusID used for default change out and staking reward recipient`-defaultzaddr=<sapling-address>`\n    sapling address to receive fraud proof rewards and if used with\n    \"-privatechange=1\", z-change address for the sendcurrency command`-disablewallet`\n    Do not load the wallet and disable wallet RPC calls`-keypool=<n>`\n    Set key pool size to <n> (default: 100)`-maxtxfee=<amt>`\n    Maximum total fees (in VRSC) to use in a single wallet transaction;\n    setting this too low may abort large transactions (default: 0.10)`-migration`\n    Enable the Sprout to Sapling migration`-migrationdestaddress=<zaddr>`\n    Set the Sapling migration address`-paytxfee=<amt>`\n    Fee (in VRSC/kB) to add to transactions you send (default: 0.0001)`-privatechange`\n   directs all change from sendcurency or z_sendmany APIs to the\n   defaultzaddr set, if it is a valid sapling address`-rescan`\n    Rescan the block chain for missing wallet transactions on startup`-salvagewallet`\n    Attempt to recover private keys from a corrupt wallet.dat on startup", "./raw_text_input_wiki/clifaq-01_verusd_options.md"], ["`-sendfreetransactions`\n    Send transactions as zero-fee transactions if possible (default: 0)`-spendzeroconfchange`\n    Spend unconfirmed change when sending transactions (default: 1)`-storagefeefactor`\n    Defaults to 6.0, which is used for 6K outputs to price storage in a currency's TransactionExportFee (ie. 6.0 = 1 TransactionExportFee per K).`-txconfirmtarget=<n>`\n    If paytxfee is not set, include enough fee so transactions begin\n    confirmation on average within n blocks (default: 2)`-txexpirydelta`\n    Set the number of blocks after which a transaction that has not been\n    mined will become invalid (min: 4, default: 20 (pre-Blossom) or 40\n    (post-Blossom))`-upgradewallet`\n    Upgrade wallet to latest format on startup`-wallet=<file>`\n    Specify wallet file (within data directory) (default: wallet.dat)`-walletbroadcast`\n    Make the wallet broadcast transactions (default: 1)`-walletnotify=<cmd>`\n    Execute command when a wallet transaction changes (%s in cmd is replaced\n    by TxID)`-zapwallettxes=<mode>`\n    Delete all wallet transactions and only recover those parts of the\n    blockchain through -rescan on startup (1 = keep tx meta data e.g.\n    account owner and payment request information, 2 = drop tx meta data)## ZeroMQ notification options:`-zmqpubhashblock=<address>`\n    Enable publish hash block in <address>`-zmqpubhashtx=<address>`\n    Enable publish hash transaction in <address>`-zmqpubrawblock=<address>`\n    Enable publish raw block in <address>`-zmqpubrawtx=<address>`\n    Enable publish raw transaction in <address>## AMQP 1.0 notification options:\nall AMQP support options require `-experimentalfeatures`.`-amqppubhashblock=<address>`\n   Enable publish hash block in <address>`-amqppubhashtx=<address>`\n   Enable publish hash transaction in <address>", "./raw_text_input_wiki/clifaq-01_verusd_options.md"], ["`-amqppubrawblock=<address>`\n   Enable publish raw block in <address>`-amqppubrawtx=<address>`\n   Enable publish raw transaction in <address>## Debugging/Testing options:`-debug=<category>`\n    Output debugging information (default: 0, supplying <category> is\n    optional). If <category> is not supplied or if <category> = 1, output\n    all debugging information. <category> can be: addrman, alert, bench,\n    coindb, db, estimatefee, http, libevent, lock, mempool, net,\n    partitioncheck, pow, proxy, prune, rand, reindex, rpc, selectcoins, tor,\n    zmq, zrpc, zrpcunsafe (implies zrpc).`-experimentalfeatures`\n    Enable use of experimental features`-help-debug`\n    Show all debugging options (usage: --help -help-debug)`-logips`\n    Include IP addresses in debug output (default: 0)`-logtimestamps`\n    Prepend debug output with timestamp (default: 1)`-minrelaytxfee=<amt>`\n    Fees (in VRSC/kB) smaller than this are considered zero fee for relaying\n    (default: 0.000001)`-printtoconsole`\n    Send trace/debug info to console instead of debug.log file## Node relay options:`-datacarrier`\n    Relay and mine data carrier transactions (default: 1)`-datacarriersize`\n    Maximum size of data in data carrier transactions we relay and mine\n    (default: 10000)## Block creation options:`-blockminsize=<n>`\n    Set minimum block size in bytes (default: 0)`-blockmaxsize=<n>`\n    Set maximum block size in bytes (default: 2000000)`-blockprioritysize=<n>`\n    Set maximum size of high-priority/low-fee transactions in bytes\n    (default: 1000000)## Mining options:`-defaultid=<i-address>`\n   VerusID used for default change out and staking reward recipient`-equihashsolver=<name>`\n   Specify the Equihash solver to be used if enabled (default: \"default\")`-gen`\n   Mine/generate coins (default: 0)", "./raw_text_input_wiki/clifaq-01_verusd_options.md"], ["`-genproclimit=<n>`\n    Set the number of threads for coin mining if enabled (-1 = all cores,\n    default: 0)`-mineraddress=<addr>`\n    Send mined coins to a specific single address`-minetolocalwallet`\n    Require that mined blocks use a coinbase address in the local wallet\n    (default: 1)`-miningdistribution={\"addressorid\":<n>,...}`\n    destination addresses and relative amounts used as ratios to divide\n    total rewards + fees`-mint`\n    Mint/stake coins automatically (default: 0)`-pubkey=<hexpubkey>`\n    If set, mining and staking rewards will go to this address by default## PBaaS options:`-acceptfreeimportsfrom=<i-address>,<i-address>,...`\n    \"%s\" no spaces - accept underpaid imports from these PBaaS chains or\n    networks - default is empty`-allowdelayednotarizations`\n    Do not notarize in order to prevent slower notarizations (default = 0, notarize to prevent slowing down)`-alwayssubmitnotarizations`\n    Submit notarizations to notary chain whenever merge mining/staking and eligible (default = 0, only as needed)`-approvecontractupgrade=<0xf09...>`\n    When validating blocks, vote to agree to upgrade to the specific\n    contract. Default is no upgrade.`-blocktime=<n>`\n    Set target block time (in seconds) for difficulty adjustment (default: 60)`-chain=pbaaschainname`\n    loads either mainnet or resolves and loads a PBaaS chain if not vrsc or vrsctest`-miningdistributionpassthrough`\n   uses the same miningdistribution values and addresses/IDs as Verus when merge mining`-notarizationperiod=<n>`\n   Set minimum spacing consensus between cross-chain notarization, in blocks (default: 10, min 10 min)`-notaryid=<ID@>`\n   VerusID used for PBaaS and Ethereum cross-chain notarization", "./raw_text_input_wiki/clifaq-01_verusd_options.md"], ["`-notificationoracle=<i-address>`\n   VerusID monitored for network alerts, triggers, and signals. Current default is \"Verus Coin Foundation@\" for Verus and the chain ID for PBaaS chains`-powaveragingwindow=<n>`\n   Set averaging window for PoW difficulty adjustment, in blocks (default: 45)`-testnet`\n      loads PBaaS network in testmode## RPC server options:`-server`\n    Accept command line and JSON-RPC commands`-rest`\n    Accept public REST requests (default: 0)`-rpcbind=<addr>`\n    Bind to given address to listen for JSON-RPC connections. Use\n    [host]:port notation for IPv6. This option can be specified multiple\n    times (default: bind to all interfaces)`-rpcuser=<user>`\n    Username for JSON-RPC connections`-rpcpassword=<pw>`\n    Password for JSON-RPC connections`-rpcport=<port>`\n    Listen for JSON-RPC connections on <port> (default: 7771 or testnet:\n    17771)`-rpcallowip=<ip>`\n    Allow JSON-RPC connections from specified source. Valid for <ip> are a\n    single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0)\n    or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified\n    multiple times`-rpcthreads=<n>`\n    Set the number of threads to service RPC calls (default: 4)## Metrics Options (only if -daemon and -printtoconsole are not set):`-showmetrics`\n    Show metrics on stdout (default: 1 if running in a console, 0 otherwise)`-metricsui`\n    Set to 1 for a persistent metrics screen, 0 for sequential metrics\n    output (default: 1 if running in a console, 0 otherwise)`-metricsrefreshtime`\n    Number of seconds between metrics refreshes (default: 1 if running in a\n    console, 600 otherwise)# Additional debug options:\nThese are options for developers to debug/test the chain or daemon. These options are **not** for general use on users daemons.## General options:", "./raw_text_input_wiki/clifaq-01_verusd_options.md"], ["`-enforcenodebloom`\n    Enforce minimum protocol version to limit use of Bloom filters (default: 1)## Debugging/Testing options:`-checkpoints`\n    Disable expensive verification for known chain history (default: 1)`-dblogsize=<n>`\n    Flush database activity from memory pool to disk log every <n> megabytes (default: 100)`-disablesafemode`\n    Disable safemode, override a real safe mode event (default: 0)`-testsafemode`\n    Force safe mode (default: 0)`dropmessagestest=<n>`\n    Randomly drop 1 of every <n> network messages`-fuzzmessagestest=<n>`\n    Randomly fuzz 1 of every <n> network messages`-flushwallet`\n    Run a thread to flush wallet periodically (default: 1)`-stopafterblockimport`\n    Stop running after importing blocks from disk (default: 0)`-nuparams=hexBranchId:activationHeight`\n    Use given activation height for specified network upgrade (regtest-only)`-limitfreerelay=<n>`\n    Continuously rate-limit free transactions to <n>*1000 bytes per minute (default: 15)`-relaypriority`\n    Require high priority for relaying free or low-fee transactions (default: 0)`-maxsigcachesize=<n>`\n    Limit size of signature cache to <n> MiB (default: 40)`-maxtipage=<n>`\n    Maximum tip age in seconds to consider node in initial block download (default: 86400)`-printpriority`\n    Log transaction priority and fee per kB when mining blocks (default: 0)`-privdb`\n    Sets the DB_PRIVATE flag in the wallet db environment (default: 1)`-regtest`\n    Enter regression test mode, which uses a special chain in which blocks can be solved instantly. This is intended for regression testing tools and app development.## Node relay options:`-blockversion=<n>`\n    Override block version to test forking scenarios (default: 4)## RPC options:`-rpcworkqueue=<n>`\n    Set the depth of the work queue to service RPC calls (default: 16)", "./raw_text_input_wiki/clifaq-01_verusd_options.md"], ["`-rpcservertimeout=<n>`\n    Timeout during HTTP requests (default: 30)\n\ncompiled by Oink.vrsc@.\nNote: last revision date 2024-05-03.", "./raw_text_input_wiki/clifaq-01_verusd_options.md"], ["### Verus `Wallet.dat`, Chaindata & `VRSC.conf` standard locations\n * Linux:\t\t`~/.komodo/VRSC`\n * Mac OS: \t`~/Library/Application Support/Komodo/VRSC`\n * Windows 10: \t`%AppData%\\Roaming\\Komodo\\VRSC\\`\n * OS independent through Verus Desktop: Click `help`, `Show Verus data folder (default)`\n\nNote: last revision date 2020-09-30.", "./raw_text_input_wiki/faq-allos24_wallet.dat_and_vrsc.conf_location.md"], ["# Guide to change Verus-Desktop from Lite Mode to Native Mode.Attention: Read completely before use.#### Important General Information### Verus `Wallet.dat`, Chaindata & `VRSC.conf` standard locations\n * Linux:\t\t`~/.komodo/VRSC`\n * Mac OS: \t`~/Library/Application Support/Komodo/VRSC`\n * Windows 10: \t`%AppData%\\Roaming\\Komodo\\VRSC\\`\n * OS independent through Verus Desktop: Click `help`, `Show Verus data folder (default)`#### Necessary files & links:Link 1: [Download Verus Bootstrap](https://bootstrap.verus.io)\nLink 2: [Import Lite wallet address in Verus Desktop native](https://wiki.verus.io/#!how-to/how-to_convert-seed-to-wif.md)\nLink 3: [Checking the signature](https://verus.io/verify-signatures)", "./raw_text_input_wiki/how-to_lite_to_native.md"], ["## Procedure:\n1. Make sure you have your seed phrase and password you use to log into your Lite mode wallet available.\n2. First of all make a notition of your address and balance of VRSC you have in your wallet, before closing Verus Desktop.\n3. Make sure the latest version of Verus-Desktop is installed.\n 1. Download the latest Verus-Desktop.\n 2. Verify the signature of your download, so you have an untampered installer. [Link 3](https://verus.io/verify-signatures) or [Video](https://youtu.be/sFUnKCnHx98)\n 3. Run the file you just downloaded to install it.\n4. Getting Verus-Desktop ready for Native mode:\n\t1. Start Verus-Desktop and enter your profile (if not loaded automatically).\n 2. If present in your profile, `deactivate` Verus Lite.\n 3. Click `+ Add Coin`, select **Verus** from the dropdown list and continue.\n 4. Select **Native**, tick the option `bootstrap` and optionally tick the options `Start staking`, `Start Mining` and fill in the amount of threads to mine with.\n 5. Click `Add Coin`. Verus-Desktop will add Verus as Native chain to your screens.\n\t6. You may get a red warning message about Zcash params. (Verus Desktop will detect if you have the necessary ZCash parameter files and download them if needed)\n\t7. As soon as the download is finished, Verus-Desktop will continue and bring you into your wallet. It will automatically start to synchronize the blockchain. Since we already put the majority of the chain in place, this will take just a few minutes.\n6. Importing your existing Address:\n\t* This procedure is described in detail in: [Import Lite wallet address in Verus Desktop native](https://wiki.verus.io/#!how-to/how-to_convert-seed-to-wif.md).If you followed these steps, installed the bootstrap, switched from Lite to Native mode and imported your existing address into Verus-Desktop. You can now stake your balance and use Private (sapling) addresses.", "./raw_text_input_wiki/how-to_lite_to_native.md"], ["Created by Oink.vrsc@\n\nNote: last revision date 2023-06-03.", "./raw_text_input_wiki/how-to_lite_to_native.md"], ["# ERROR: Cannot Get a lock on data directory /root/.komodo/VRSC.\n\nKomodo is probably already running.\n\n## Procedure:\n\nIt just means you can't start it when it's already running. If it isn't running we can take a look at it.\nCheck to see if it is running by running:\n\n`./verus getinfo`\n\nIf it's running you'll get info back, if it isn't you'll get an error.\nIf that throws an error, it's worth checking using this command:\n\n`ps fax | grep verus`\n\nand seeing if any processes are listed besides the process you're using to search.\nYou would see verusd with a child process of komodo and all its cli arguments.\n\n(submitted by @keda666, solution written by englal.vrsc@)\n\nNote: last revision date 2020-02-26.", "./raw_text_input_wiki/faq-lin04_cannot_obtain_lock.md"], ["# My wallet is stuck on block number XXXX. It does not synchronize properly anymore.note: Read it completely before use.### Verus `Wallet.dat`, Chaindata & `VRSC.conf` standard locations\n * Linux:\t\t`~/.komodo/VRSC`\n * Mac OS: \t`~/Library/Application Support/Komodo/VRSC`\n * Windows 10: \t`%AppData%\\Roaming\\Komodo\\VRSC\\`\n * OS independent through Verus Desktop: Click `help`, `Show Verus data folder (default)`#### Usefull links:\nLink 1: [Download latest Wallet](https://verus.io/wallet.html)\nLink 2: [Show current blockheight](https://explorer.verus.io/api/getblockcount)## Procedure:\nIn case your wallet is not synchronized with the blockchain and restarting doesn't connect to any peers:Compare your blockheight with the one Link 2 above is showing to make sure you are\nnot synchronized anymore. If the blockheight of the link above is significantly higher (more than 10) than\nthe blockheight your wallet is showing, follow the rest of the procedure.\nIf the numbers are equal or close, your wallet is synchronized and the procedure below will not solve any problems.Close your wallet.\nGo to the appropriate location for your OS as mentioned above.Add a similar list to the bottom of your `VRSC.conf`, just below `rpcallowip=127.0.0.1`:\n```\n addnode=157.90.113.198:27485\n addnode=95.217.1.76:27485\n```\nSave and exit the file.\nAn up-to-date list of working nodes can be found in Verus Discord in the #tipbot channel, by messaging `/peerinfo` in that channel.After you added nodes, remove `peers.dat` that is in the VRSC folder.\n(At least rename or move to a different location).\nMake sure you don't remove any other files/folders, or you'll have to [bootstrap](http://blacksquare/#!how-to/how-to_bootstrap.md) your wallet.\nThen start your wallet as you're used to.", "./raw_text_input_wiki/faq-allos25_wallet_not_synced.md"], ["If the problem persists, continue with this WIKI: [Recover from forking, network or old wallet problems](https://wiki.verus.io/#!faq-allos/faq-allos19_what_should_i_do_if_i_end_up_on_my_own_fork_because_of_a_network_issue_or_having_an_old_version_of_the_wallet.md)\n\nSubmitted by Oink.vrsc@ & Thoskk.vrsc@\n\nNote: last revision date 2023-06-03.", "./raw_text_input_wiki/faq-allos25_wallet_not_synced.md"], ["# Verus Information Page.There's a lof of information about the Veruscoin project. We have gathered as much information and resources and bundled them into this FAQ, as to give a quick overview#### `VRSC Wallet & data location` on different OS:Linux GUI: `~/.komodo/VRSC`\nMac OS: `/Users//Library/Application Support/komodo/VRSC`\nWindows: `%AppData%\\Komodo\\VRSC\\`#### CLI binaries location in Verus Enhanced Agama installation:Note: All locations are relative to the installation location of Agama:Windows Verus binaries: `resources\\app\\assets\\bin\\win64\\verusd\\` contains `verusd` and `verus`\nWindows Komodo (and asset chains) binaries: `resources\\app\\assets\\bin\\win64\\` contains `komodod` and `komodo-cli`\nLinux Verus binaries: `resources\\app\\assets\\bin\\linux64\\verusd` contains `verusd` and `verus`\nLinux Komodo (and asset chains) binaries: `resources\\app\\assets\\bin\\linux64\\` contains `komodod` and `komodo-cli`#### CLI binaries location in Verus Desktop installation:Note: All locations are relative to the installation location of Verus Desktop:Windows Verus binaries: `\\resources\\app\\assets\\bin\\win64\\verusd\\` contains `verusd` and `verus`\nWindows Komodo (and asset chains) binaries: `\\resources\\app\\assets\\bin\\win64\\komodod` contains `komodod` and `komodo-cli`\nWindows Zcash binaries: `\\resources\\app\\assets\\bin\\win64\\zcash` contains `zcashd` and `zcash-cli`\nLinux Verus binaries: `\\resources\\app\\assets\\bin\\linux64\\verusd` contains `verusd` and `verus`\nLinux Komodo (and asset chains) binaries: `\\resources\\app\\assets\\bin\\linux64\\` contains `komodod` and `komodo-cli`#### Various links:Website: [Official VerusCoin website](https://verus.io)\nGitHub: [VerusCoin source code for the VerusCoin wallet, miner and explorer](https://github.com/veruscoin)\nBlock explorer: [Main VerusCoin Explorer](https://explorer.verus.io)\nBlock explorer: [VerusCoin Backup Explorer](https://explorer.vrsc.0x03.s", "./raw_text_input_wiki/how-to_verus_info.md"], ["ervices/)\nBlock explorer: [Explorer for all Komodo Ecosystem chains](https://dex.explorer.dexstats.info/)\nSocial Media: [Bitcointalk](https://bitcointalk.org/index.php?topic=4070404.0)\nSocial Media: [Discord](https://verus.io/discord)\nSocial Media: [Twitter](https://twitter.com/veruscoin)\nSocial Media: [Medium](https://medium.com/@veruscoin)\nSocial Media: [Reddit](https://reddit.com/r/veruscoin)\nOverview: [Chain specifications](https://cdn-images-1.medium.com/max/2000/1*GUXCVTqV455RoOQzj9FGSw.jpeg)\nMiner: [Monkins ccminer for CPU (recommended) or GPU](https://github.com/monkins1010/ccminer/releases)\nMiner: [nheqminer for Windows, Linux, and MacOS](https://github.com/VerusCoin/nheqminer/releases)\nReported mining speeds: [spreadsheet to compare hashrates](https://docs.google.com/spreadsheets/d/1RrSYJDV0Mjj3X-myMC3aQDGkcipivxHsD7ZxJ3r5f_A/edit#gid=201266774)\nMining pool: https://luckpool.net/verus\nMining pool: https://pool.verus.io/\nMining pool: https://zergpool.com/\nMining pool: https://vrsc.mcmpool.eu/\nMining pool: https://wattpool.net/\nMining pool: https://www.nlpool.nl/\nMining pool: https://vrsc.dev-codex.com/\nMining pool: http://vrsc.52hash.com/\nMining pool: https://vrsc.ciscotech.dk/\nMining pool: http://www.lepool.com.cn:8088/\nMining pool: http://verus.bcmonster.com/\nExchange: https://atomicdex.io/ (VRSC/any listed coin)\nExchange: https://app.stex.com/de/trade/pair/BTC/VRSC/1D (VRSC/BTC)\nExchange: https://safe.trade/trading/vrscbtc (VRSC/BTC, VRSC/SAFE)\nExchange: https://www.aacoin.com/#/trade?symbol=VRSC_BTC (VRSC/BTC)\nExchange: https://graviex.net/markets/vrscbtc (VRSC/BTC, VRSC/KMD, VRSC/USD)\nExchange: https://www.kuangex.com/#/exchange/vrsc_usdt (VRSC/USDT)\nGuide: [How to mine in under 5 minutes](https://medium.com/veruscoin/how-to-start-cpu-mining-verus-coin-vrsc-from-your-laptop-in-under-5-minutes-f69c9aae340e)\nWallet: [Verus Desktop releases](https://github.", "./raw_text_input_wiki/how-to_verus_info.md"], ["com/VerusCoin/Verus-Desktop/releases)\nWallet: [CLI wallet releases](https://github.com/VerusCoin/VerusCoin/releases/)\nMobile wallet: [Android Mobile Wallet](https://github.com/VerusCoin/Verus-Mobile/releases/tag/v0.1.6-beta)\nMobile wallet: [iOS Mobile Wallet](https://testflight.apple.com/join/ZS43lYcw)\nPaper wallet: [Verus Paper wallet](https://paperwallet.verus.io/)\nBootstrap: [Download Verus Bootstrap](https://bootstrap.verus.io)\nVerusPay: [VerusPay setup guide](https://veruspay.io/setup/)", "./raw_text_input_wiki/how-to_verus_info.md"], ["## Information:|||\n|---|---|\n|Platform:      |Komodo|\n|Project type:    |Decentralized public blockchain|\n|          |Open source, fair launch, no ICO|\n|          |Community driven project|\n|Privacy:      |Sapling enhanced, zk-SNARKs zero knowledge proofs|\n|Website:  ", "./raw_text_input_wiki/how-to_verus_info.md"], ["    |https://verus.io/|\n|Github:       |https://github.com/veruscoin There is the VerusCoin source code for the VerusCoin wallet, miner and explorer.|\n|Block explorers:  |https://explorer.verus.io/|\n|          |https://explorer.vrsc.0x03.services/|\n|          |https://dex.explorer.dexstats.info/|\n|Announcement:    |https://bitcointalk.org/index.php?topic=4070404.0|\n|Discord:      |https://discord.gg/VRKMP2S|\n|Twitter:      |https://twitter.com/veruscoin|\n|Medium:       |https://medium.com/@veruscoin|\n|Reddit:       |https://reddit.com/r/veruscoin|\n|Mining Algorithm:  |VerusHash 2.1 - PoW/PoS 50/50 = **Proof of Power - 51% attack resistant**|\n|          |CPU targeted, non-discriminatory, CPU/FPGA equalizing algorithm|\n|Block time:     |1 min|\n|Block reward:    |24 VRSC since 09/28/2018 (both mining and staking; next halving on Sept. 28, 2020)|\n|Total supply:    |83'540'184, no premine, no ICO.|\n|Reward emission schedule:| Started with linear ramp, changing every block for the first 10,080 blocks (0 to 384 VRSC) and then halving every month for the following 5 months, then every 2 years after that. All rewards, at or above 192 are time locked for random release between block 129,600 and 1,181,520 (3 months to 2 years and 3 months after genesis).|\n|Reward maturing:  |100 blocks to maturity|\n|PoS Period:     |150 blocks cooldown of UTXO|\n|Unique features:  |VerusID: VerusIDs are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. VerusIDs provide plenty of opportunity for identity applications.|", "./raw_text_input_wiki/how-to_verus_info.md"], ["#### Mining:", "./raw_text_input_wiki/how-to_verus_info.md"], ["VerusCoin can be mined with CPUs, GPUs and FPGAs, solo and in pools. However, the algo is carefully designed for CPUs, and they still substantially outrange GPUs.\nARM mining works in general, but although fairly efficient, without high hashrates. FPGAs can mine this coin, but don't outperform CPUs by much.##### Miners:\nBesides solo-mining with Verus Desktop or CLI wallet, you can use:\nccminer for CPU (efficient for most modern CPUs) or GPU https://github.com/monkins1010/ccminer/releases;\nnheqminer https://github.com/VerusCoin/nheqminer/releases (for Windows, Linux, and MacOS);A spreadsheet to compare hashrates can be found here: https://docs.google.com/spreadsheets/d/1RrSYJDV0Mjj3X-myMC3aQDGkcipivxHsD7ZxJ3r5f_A/edit#gid=201266774\nYou can also compare older and current algos##### Mining pools:\nhttps://pool.verus.io/ (fees will go to VERUS foundation)\nhttps://luckpool.net/verus\nhttps://zergpool.com/\nhttps://vrsc.mcmpool.eu/\nhttps://wattpool.net/\nhttps://www.nlpool.nl/\nhttps://vrsc.dev-codex.com/\nhttp://vrsc.52hash.com/\nhttps://vrsc.ciscotech.dk/\nhttp://www.lepool.com.cn:8088/\nhttps://zpool.ca/\nhttp://verus.bcmonster.com/#### Staking pools:\nhttps://discord.gg/4FJJRY5 (Ginasis Staking pool, 5% fee)\nhttps://docs.google.com/spreadsheets/d/1Up1WbMuCR21e6TxLae6zjLJePu_RIOVZwqShRj9vVvc/edit?usp=sharing (Dudezmobi Staking pool, 1% fee)\nhttps://www.aacoin.com/#/trade?symbol=VRSC_BTC (Technically not a pool, but it stakes your VRSC on the exchange, 20% fee)Price: https://veruspay.io/price/#### Exchanges:\nhttps://app.stex.com/de/trade/pair/BTC/VRSC/1D\nhttps://safe.trade/trading/vrscbtc\nhttps://www.aacoin.com/#/trade?symbol=VRSC_BTC\nhttps://graviex.net/markets/vrscbtc\nhttps://atomicdex.io/ (in Beta)\nhttps://www.kuangex.com/#/exchange/vrsc_usdt", "./raw_text_input_wiki/how-to_verus_info.md"], ["Also check out the Guide on how to mine in under 5 minutes: https://medium.com/veruscoin/how-to-start-cpu-mining-verus-coin-vrsc-from-your-laptop-in-under-5-minutes-f69c9aae340e\n\n#### Wallets:\nVerus Agama GUI wallet is a forked Agama Desktop App for multiple coins (for Win, Linux and Mac). It's been deprecated now and no longer supported;\nVerus Desktop GUI wallet is a newly developed multi-coin wallet supporting VerusID https://github.com/VerusCoin/Verus-Desktop/releases (for Win, Linux, Mac and ARM Linux);\nthe CLI wallets can be found here: https://github.com/VerusCoin/VerusCoin/releases/\nThere's also possibilities to test coming PBaaS functionality in this wallet.\n\nA beta version of the Android mobile wallet can be found here: https://github.com/VerusCoin/Verus-Mobile/releases\nA beta version of the iOS mobile wallet can be accessed via this Apple TestFlight invite https://testflight.apple.com/join/ZS43lYcw\n\nOur Paper Wallet can be accessed here: https://paperwallet.verus.io\n\nIf you need a bootstrap, you can find it here: https://bootstrap.verus.io\n(a guide how to apply is pinned in #community-support channel in Discord: https://discord.gg/VRKMP2S or in the HOW-TO & FAQ section of our website https://wiki.verus.io/how-to/how-to_bootstrap.md)\n\nFor those interested in VerusPay, a guide can be found here: https://veruspay.io/setup/\nAnd finally for those interested in running various Veruscoin services: https://github.com/VerusCoin/VerusServicesSetup\n\nInformation compiled by Thoskk.vrsc@, complemented by Godballz.vrsc@ and Oink.vrsc@.\n\nNote: revision date 2020-11-11.", "./raw_text_input_wiki/how-to_verus_info.md"], ["# Standard file location for Verus Desktop\n\nThe installer for Verus-Desktop suggests a standard location to install to, depending on the choice whether you want to install it for all users or just yourself.\n\n## Anyone who uses the computer (All Users)\n\n`%ProgramFiles%\\Verus-Desktop`\n\n## Only me:\n\n`%USERPROFILE%\\AppData\\Local\\Programs\\Verus-Desktop`\n\nNormally you don't need to worry about these locations, but in some instances you will be asked by community members providing support to look up a file in a folder in your Verus-Desktop installation.\n\nnote: changing files in these folders or subfolders may result in a corrupt installation. Only do so when instructed by our support community members.\n\n## Deamons\n\nThe daemons are located in the `komodod`, `verusd` and `zcashd` folders that can be found in the\n`resources\\app\\assets\\bin\\win64\\` subfolder of your installation folder.\n\n## Program settings\n\nVerus Desktop saves it program settings on a different folder:\n`%AppData%\\Verus-Desktop`\nThe users settings are stored in `appdata\\config.json` in the program settings folder.\n\n## Standard chain data and wallet locations\n\n#### KMD\n\n`%AppData%\\Komodo`\n\n### Verus\n\n`%AppData%\\Komodo\\VRSC`\n\n#### Komodo asset chains\nAny Komodo asset chain will create a subfolder in the KMD chain data and wallet folder, which is standard named. The names will be in capitals and are identical to the **official** asset-chain name.\n`%AppData%\\Komodo\\<CHAIN-NAME>`\n\nNote: examples\nPirate: `%AppData%\\Komodo\\PIRATE`\nUtrum: `%AppData%\\Komodo\\OOT`\nZexo: `%AppData%\\Komodo\\ZEXO`\nAnd so on...\n\nFor easy access to the binaries folders, Verus-Desktop program settings and VRSC chain folder and all binary folders, you can use the debug menu in Verus-Desktop.\n\nnote: updated at 2020-12-03 by Oink.vrsc@", "./raw_text_input_wiki/winfaq-03_verus_desktop_locations.md"], ["# Question: What reward do I get for staking (PoS) or Mining (PoW) a block?\n\nThe reward received depends of the blocknummer:\n\n##### Era 1:\n1st week: Block 0 - 10080 ==> 0 to 384 VRSC reward ==> 16,588,800 VRSC total this period (reward rising linearly and changing each block)\n##### Era 2:\n1st month: Block 10080 - 53279 ==> 384 VRSC reward ==> 8,294,400 VRSC total this period\n2nd month: Block 53280 - 96479 ==> 192 VRSC reward ==> 4,147,200 VRSC total this period\n3rd month: Block 96480 - 139679 ==> 96 VRSC reward ==> 4,147,200 VRSC total this period\n4th month: Block 139680 - 182879 ==> 48 VRSC reward ==> 2,073,600 VRSC total this period\n5th month: Block 182880 - 226079 ==> 24 VRSC reward ==> 1,036,800 VRSC total this period\n##### Era 3:\nYears 1+2: Block 226080 - 1277279 ==> 24 VRSC reward ==> 25,228,800 VRSC total this period\nYears 3+4: Block 1277280 - 2328479 ==> 12 VRSC reward ==> 12,614,400 VRSC total this period\nYears 5+6: Block 2328480 - 3379679 ==> 6 VRSC reward ==> 6,307,200 VRSC total this period\n. . . halving indefinitely every 1051200 blocks (approximately 2 years)\n\nAll rewards equal or over 192 VRSC are time locked to mature at a random block between 129,600 and 1,181,520\n\n(submitted by @keda666, edited by Oink.vrsc@)\n\nnote: last review date 2020-02-25.", "./raw_text_input_wiki/faq-allos05_reward_received_per_blocknummer.md"], ["# Question: How to consolidate multiple `wallet.dat` files in one?\n\nAttention: Read it completely before using.\n\n### Verus `Wallet.dat`, Chaindata & `VRSC.conf` standard locations\n * Linux:\t\t`~/.komodo/VRSC`\n * Mac OS: \t`~/Library/Application Support/Komodo/VRSC`\n * Windows 10: \t`%AppData%\\Roaming\\Komodo\\VRSC\\`\n * OS independent through Verus Desktop: Click `help`, `Show Verus data folder (default)`\n\n## Procedure\n\n1. With one of the wallets loaded, issue the following command: `z_exportwallet FILENAME` (ie z_exportwallet export_instance01, the filename cannot have a `.` in it.)\n2. Copy the generated file to the machine that hosts your main wallet. This file will either be in the same directory as the config file and wallet.dat file, or in a location specified by exportdir in VRSC.conf.\n3. Issue the following command (on the \"main\" verus-cli): `z_importwallet /LOCAL_PATH/EXPORTFILENAME` (ie /home/user/export_instance01)\n\nnote: Older versions of verusd required `expordir` to be set in VRSC.conf before exporting a wallet. If you get an error about your export directory not being set, please upgrade immediately.\n\n#### These commands can be given in:\n\n* CLI wallet: `./verus z_exportwallet FILENAME`& `./verus z_importwallet /LOCAL_PATH/FILENAME`\n* Verus Desktop in `settings`, `coin settings`: `run z_exportwallet FILENAME`& `run z_importwallet /LOCAL_PATH/FILENAME`\n* Verus Agama in `settings`, `<CLI>`: `z_exportwallet FILENAME`& `z_importwallet /LOCAL_PATH/FILENAME`\n\n(submitted by @TexWiller, revised by @englal)\n\nnote: last revision date 2020-09-30.", "./raw_text_input_wiki/faq-allos04_consolidate_multiple_wallet.dat_files_in_one.md"], ["# Guide to install Bootstrap for your Verus Wallet.Attention: Read it completely before using.## Important General Information### Verus `Wallet.dat`, Chaindata & `VRSC.conf` standard locations\n * Linux:\t\t`~/.komodo/VRSC`\n * Mac OS: \t`~/Library/Application Support/Komodo/VRSC`\n * Windows 10: \t`%AppData%\\Komodo\\VRSC\\`\n * OS independent through Verus Desktop: Click `help`, `Show Verus data folder (default)`Tip: The easiest way is to copy the location above and paste it into your address bar of your file browser. Your operation system will accept the input, interpret where that location is and bring you there.## Verus-Desktop Procedure\n1. In Verus-Desktop, exit your profile, by selecting the exit icon at ther top right.\n2. Wait a minute or two, allowing the wallet to close completely in the background.\n3. click `help`, `Bootstrap VRSC`. That opens up a new window.\n4. Follow the instructions and when finished successfully, select your preferred profile and enter Verus Desktop.## Verus CLI Procedure\n1. Go to the folder where your daemon is extracted (standard `verus-cli`)\n3. Shutdown `verusd` and wait for it to close completely\n4. doubleclick `fetch-bootstrap` in your file browser.\n5. Follow the instructions and when finished, start your `verusd` daemon as usual## Optional:\nWatch this video with an explanation how to accomplish the steps above: [Bootstrapping your wallet using the supplied script](https://youtu.be/xgLxzel5t04)## Manual Bootstrap Procedure### Necessary files:Link 1: [Download latest Wallet](https://verus.io/wallet.html)\nLink 2: [Download Verus Bootstrap](https://bootstrap.verus.io/)", "./raw_text_input_wiki/how-to_bootstrap.md"], ["### Procedure:\n1. Make sure your wallet is not active.\n2. If you already had you wallet running, backup essential files:\n\ta. Go to `VRSC Wallet location`\n\tb. copy `wallet.dat` to a *SAFE* location\n\tc. copy `VRSC.conf` to a *SAFE* location\n\td. Verify that both files are copied to your safe location\n3. Make sure the latest version of your Wallet for Verus is installed\n\ta. Download the latest Verus Wallet from link 1, supplied above.\n\tb. Verify the SHA256 checksum & signature of your download, to verify you have an untampered installer.\n\tc. extract the file you just downloaded to a suitable location.\n\t On MacOS and Linux you will have extracted an **AppImage** which can be run directly. Windows users need to run the **installer**.\n4. Installing the bootstrap:\n a. Download the bootstrap from Link 2.\n b. (Optional, but recommended) Verify the md5, sha256 or sha512 checksum and the signature of your download, to verify that you downloaded an untampered Bootstrap archive.\n c. Remove all files and folders from `VRSC Wallet Location` except `wallet.dat`, `debug.log`, `VRSC.conf` and if applicable `VRSC-bootstrap.*`.\n d. Extract the downloaded archive to `VRSC Wallet location`. Make absolutely sure the folders `blocks` and `chainstate` are extracted into the correct folder. If the end up in a different folder (eg. `VRSC-bootstrap`-folder) move them to `VRSC Wallet location`.\n5. If you had a VRSC wallet running before, restore essential files:\n\ta. Go to `VRSC Wallet location`\n\tb. Verify that your `wallet.dat` is bigger than the one in this folder (if any is present)\n\tc. copy `wallet.dat` from your *SAFE* location\n6. Start your wallet", "./raw_text_input_wiki/how-to_bootstrap.md"], ["If you followed these steps, you will have installed/updated the latest version of a wallet for verus, made a backup of your wallet and installed the bootstrap. If desired you can remove the downloaded bootstrap archive to free up space on your hard drive.\n\n### Optional:\nWatch this video with an explanation how to accomplish the steps above: [Bootstrapping your wallet manually](https://youtu.be/ILr8vDgfPHI)\n\nInformation compiled by Oink.vrsc@.\n\nNote: revision date 2024-04-07.", "./raw_text_input_wiki/how-to_bootstrap.md"], ["# Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):\n\n- Linux: `~/.komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`\n\nInformation compiled by Oink.vrsc@ from Verus Release Notes.\n\nNote: revision date 2023-05-15.", "./raw_text_input_wiki/how-to_reset_testnet.md"], ["# error while loading shared libraries: libgomp.so.1: No such file or directory\n# error while loading shared libraries: libz.so: No such file or directory\n\nWhen running `./verusd` on a Linux distro (eg Debian or Devuan), not all dependencies may be installed by default, resulting in the errormessage `error while loading shared libraries: libgomp.so.1: No such file or directory` or `error while loading shared libraries: libz.so: No such file or directory`.\n\nTo solve this you need to install the libgomp and zlib1g-dev libraries:\n`sudo apt-get install libgomp1 zlib1g-dev`\n\nSolution supplied by: Oink.vrsc@\n\nNote: revision date 2021-12-01.", "./raw_text_input_wiki/faq-lin09_libgomp.so.1.md"], ["# ![Verus Coin](https://wiki.verus.io/img/favicon.png \"Verus Coin Wiki\") Verus Coin Wiki\nIn this WIKI we collected the most frequently asked questions and useful guides that are related to Verus.On the bottom of each document, you may find a revision and/or creation date. If no date is mentioned the document originates from before february 12th, 2020 and may apply to older situations.If you have any questions about the information here, need help or have suggestions on the content, don't hesitate to contact us through [Discord](https://verus.io/discord).## Information\n[Verus Welcome Information](#!information/verus-welcome.md)\n[Verus Information Page](#!how-to/how-to_verus_info.md)\n[Verus Release Notes](#!information/release_notes.md) ***`UPDATED to v1.0.7`***\n[VerusIDs](#!information/verusid.md)\n[Verus Digital Signatures](#!information/signatures.md)\n[VerusHash 2.1](#!information/verushash_2.1.md)\n[VerusPay](https://github.com/monkins1010/VerusPay/wiki)\n[Verus Discord verification](https://youtu.be/YVOfIMjRf30) ***`Video`***\n[Bootstrap video](https://youtu.be/xgLxzel5t04) ***`Video`***", "./raw_text_input_wiki/index.md"], ["## How-To\n[Bootstrap your wallet](#!how-to/how-to_bootstrap.md) ***`TIP`***\n[Verifying the signature of an updated wallet](#!how-to/how-to_check_signatures.md)\n**[Backing up my wallet](#!how-to/how-to_backup_my_wallet.md)** ***`HIGHLY RECOMMENDED`***\n**[Restoring my wallet](#!how-to/how-to_restore_my_wallet.md)**\n[Change Verus-Desktop from Lite Mode to Native Mode](#!how-to/how-to_lite_to_native.md)\n[import your Lite wallet address into your native Verus Desktop](#!how-to/how-to_convert-seed-to-wif.md)\n[Verus Wallet installation guide (Linux)](#!faq-linux/faq-lin01_install_linux_cli.md)\n[Verus Beginners Staking guide (External)](https://medium.com/veruscoin/verus-beginners-staking-guide-efbbdc4de951)\n[Verus Beginners Mining guide (External)](https://medium.com/veruscoin/how-to-earn-vrsc-solo-mining-with-your-cpu-and-staking-mined-coins-aa27da76882c)\n[Shield Verus Coins via Command Line Interface](#!how-to/how-to_shield_via_cli.md)\n[Create an ID on Verus Desktop (pdf)](https://wiki.verus.io/how-to/how-to_create_verus_id_with_verus_desktop.pdf)\n[Create an ID on command Line (pdf)](http://wiki.verus.io/how-to/how-to_create_verus_id_with_cli.pdf)\n[Join Verus Testnet](#!how-to/how-to_join_testnet.md)\n[Reset Verus Testnet](#!how-to/how-to_reset_testnet.md)## Frequently Asked Questions (General)\n[How do I know when an immature block will \"unlock\" (mature)?](#!faq-allos/faq-allos01_immature_block_unlock_time_calculation_manual_calculation.md)\n[I'm mining since XYZ with XYZ, why I haven't found a block yet?](#!faq-allos/faq-allos02_average_time_to_find_a_block_manual_calculation.md)\n[How do I direct all my mined rewards to a single Verus wallet?](#!faq-allos/faq-allos03_mine_rewards_to_a_single_verus_wallet_gui_+_cli.md)\n[How to consolidate multiple `wallet.dat` files in one?](#!faq-allos/faq-allos04_consolidate_multiple_wallet.dat_files_in_one.md)\n[What reward do I get for st", "./raw_text_input_wiki/index.md"], ["aking (PoS) or Mining (PoW) a block?](#!faq-allos/faq-allos05_reward_received_per_blocknummer.md)\n[Stake estimates, halving and block-rewards](#!faq-allos/faq-allos06_pos,_halving,_block_reward.md)\n[What's the value of VRSC?](#!faq-allos/faq-allos07_what_are_my_vrsc_worth.md)\n[Is mining profitable?](#!faq-allos/faq-allos08_mining_profitability.md)\n[How do you know a block was minted (staking reward)?](#!faq-allos/faq-allos09_how_do_you_know_a_block_was_minted_staking_reward.md)\n[Useful Verus CLI commands](#!faq-allos/faq-allos10_useful_cli_commands.md)\n[How does staking work?](#!faq-allos/faq-allos13_how_does_staking_work.md)\n[How can I tell the difference between staked and mined coins?](#!faq-allos/faq-allos15_how_can_i_tell_the_difference_between_staked_and_mined_coins.md)\n[How can I check my immature balance in the Graphic User Interface?](#!faq-allos/faq-allos16_how_can_i_check_my_immature_balance_in_the_gui.md)\n[How do I unshield my coin rewards and get them staking on CLI?](#!faq-allos/faq-allos17_unshield_coin_rewards_and_get_them_staking_in_cli.md)\n[ERROR: Your wallet.dat is not matching the blockchain. Please restart the wallet with -reindex param.](#!faq-allos/faq-allos18_your_wallet.dat_is_not_matching_the_blockchain._please_restart_the_wallet_with_-reindex_param.md)\n[What should I do if I end up on my own fork because of a network issue or having an old version of the wallet?](#!faq-allos/faq-allos19_what_should_i_do_if_i_end_up_on_my_own_fork_because_of_a_network_issue_or_having_an_old_version_of_the_wallet.md)\n[I followed the previous procedure and am still having problems with my wallet.](#!faq-allos/faq-allos20_i_followed_the_procedure_in_faq_19_and_am_still_having_problems_with_my_wallet.md)\n[What are the mining pools that I can join?](#!faq-allos/faq-allos21_mining_pools.md)\n[What are the staking pools that I can join?](#!faq-allos/faq-allos22_staki", "./raw_text_input_wiki/index.md"], ["ng_pools.md)\n[Verus Wallet & VRSC.conf standard locations](#!faq-allos/faq-allos24_wallet.dat_and_vrsc.conf_location.md)\n[My wallet is stuck on block number XXXX. It does not synchronize properly anymore.](#!faq-allos/faq-allos25_wallet_not_synced.md)\n[I accidentally send funds to a B-address and cannot move those funds](#!faq-allos/faq-allos26_sent_funds_to_b-address.md)", "./raw_text_input_wiki/index.md"], ["## Frequently Asked Questions (Windows specific)\n[Remarks on Windows command line formatting](#!faq-windows/winfaq-01_cli_formatting.md)\n[Windows pool-mining on low priority](#!faq-windows/winfaq-02_low_priority_mining.md)\n[Standard locations for Verus-Desktop installations](#!faq-windows/winfaq-03_verus_desktop_locations.md)", "./raw_text_input_wiki/index.md"], ["## Frequently Asked Questions (Linux specific)\n**[Install the Linux CLI wallet](#!faq-linux/faq-lin01_install_linux_cli.md)** ***`TIP`***\n[Script calculating time to unlock for immature rewards](#!faq-linux/faq-lin02_immature_block_unlock_time.md)\n[Linux Bash scripts to make mining life easier](#!faq-linux/faq-lin03_linux_scripts_make_life_easy.md)\n[ERROR: Cannot obtain lock on data directory](#!faq-linux/faq-lin04_cannot_obtain_lock.md)\n[Cloud daily backup of Wallet.dat](#!faq-linux/faq-lin05_daily_cloud_backup.md)\n[Compile Monkins Verus enhanced CCMiner for various hardware](#!faq-linux/faq-lin06_compile_ccminer.md)\n[PHP staking interface for coinshielding nodes](#!faq-linux/faq-lin07_PHP_CLI_interface.md)\n[Low priority pool-mining](#!faq-linux/faq-lin08_low_priority_mining.html.md)\n[error while loading shared libraries: libgomp.so.1 and/or zlib1g-dev](#!faq-linux/faq-lin09_libgomp.so.1.md)\n[Standard locations for Verus Desktop installations](#!faq-linux/faq-lin10_verus_desktop_locations.md)## Frequently Asked Questions (MacOS specific)\n[ERROR: Cannot Get a lock on data directory /root/.komodo/VRSC.](#!faq-macos/mac-faq01_obtain_lock.md)\n[What versions of OSX/macOS are supported?](#!faq-macos/mac-faq02_what_versions_osx.md)\n[Start mining on MacOS](#!faq-macos/mac-faq03-mining_guide.md)\n[MacOS pool-mining on low priority](#!faq-macos/mac-faq04_low_priority_mining.md)\n[Standard locations for Verus Desktop installations](#!faq-macos/mac-faq05_verus_desktop_locations.md)## Frequently Asked Questions (ARM specific)\n**[Updating CLI wallet](#!faq-arm/armfaq-03_updating.md)**\n[Hardware and software requirements](#!faq-arm/armfaq-02_requirements.md)\n[error while loading shared libraries: libgomp.so.1 and/or libz.so](#!faq-arm/armfaq-01_libgomp.so.1.md)", "./raw_text_input_wiki/index.md"], ["## CLI wallet specific Information\n[Verusd options list](#!faq-cli/clifaq-01_verusd_options.md) ***`UPDATED to v1.2.2-4`***\n[Verus command list](#!faq-cli/clifaq-02_verus_commands.md) ***`UPDATED to v1.2.2-4`***\n[Remarks on Windows command line formatting](#!faq-windows/winfaq-01_cli_formatting.md)\n\n## Q&A Archive\n[Q&A questions channel Verus-WhiteBIT 2020-07-28](#!q-a/veruscoin-q-a-questions-20200728.html)\n[Q&A reward channel Verus-WhiteBIT 2020-07-28](#!q-a/veruscoin-q-a-reward-20200728.html)\n\nNote: last revision date 2024-05-03.", "./raw_text_input_wiki/index.md"], ["# Start mining on MacOS.Attention: Read it completely before use.`VRSC Wallet and Data location` on Mac OS: `/Users//Library/Application Support/Komodo/VRSC`### Software needed to minePrerequisite: [VerusCoin wallets](https://verus.io/wallet.html)\nNeeded: [VerusCoin miners](https://verus.io/getVRSC.html)## Prerequisites:To start mining with your Mac, you will need to have an address to mine to. Possibilities are:~~An exchange address~~ (__***NOT***__ recommended. This is asking for trouble.)\nAn address from a web-wallet\nAn address from a mobile wallet\nAn address from a Verus-Desktop Lite wallet\nAn address from a Verus-Desktop Native wallet## Procedure:To start mining on your Mac, you should already have a wallet and and access to an address to mine to. Now to start mining we will need to download the miner first:\n 1. Go to the `Veruscoin miners` link above and download `CLI nheqminer` for MacOS.\n 2. Open the download folder in finder.\n 3. doubleclick `nheqminer-MacOS-v0.8.0.tar.gz` to unpack it in your download folder.\n 4. Open the `nheqminer` folder that appeared in your download folder", "./raw_text_input_wiki/mac-faq03-mining_guide.md"], ["Now we need to configure things so the miner connects to a mining pool (listed on the download page, below the miner download) and mines to your address. In the instructions below I will use the VerusCoin community pool and the address for the Veruscoin foundation. make sure to use your own address and if desired the details of a different pool:\n 5. click `start.sh` and open with `TextEdit.app`\n 6. On the 2nd line, change `PoolHost=` into `Poolhost=pool.verus.io`\n 7. On the 3rd line, change `Port=` into 'Port=9999'\n 8. On the 4th line, change 'PublicVerusCoinAddress=' into `PublicVerusCoinAddress=RVjvbZuqSGLGDm1B9BFkbHWySPKEx4tfjQ`\n    (make sure you use your own address!!!!)\n 9. On the 5th line, change `WorkerName=` into `WorkerName=MacOS` (or any name you want to identify your system)\n\nIn the next step we will set how many processor threads the miner will use. Make sure to use less threads than your processor has virtual cores. If you allow the miner to use all cores, your system will become sluggish at times, or it may even become completely unresponsive:\n 10) On the 6th line, change `Threads=` into `Threads=7` (fill in the amount of virtual cores you want to use)\n 11) Save and exit the file.\n\nWe have all the settings ready to go, but the file we just edited is not executable right now.\n 12. Click `Start.sh` and click `copy \"Start.sh\"`\n 13. Click in an empty space in you folder and click `Paste items`, which will result in a new `start copy.sh` file.\n 14. rename `start copy.sh` to `start.command`\nNow we have an executable file that will run when you doubleclick.\n 15. Doubleclick `start.command` and your machine will start mining.\n\nCreated by Oink.vrsc@.\n\nNote: last revision date 2020-02-26.", "./raw_text_input_wiki/mac-faq03-mining_guide.md"], ["# PHP staking interface for coinshielding nodes.\nAttention: Read it completely before using.\n\n### Important General Information\n`VRSC Wallet and Data location` on Linux: `~/.komodo/VRSC`\n\n### Necessary files:\nLink 1: [Download latest Wallet](https://verus.io/wallet)\nLink 2: [Download Bootstrap](https://bootstrap.verus.io/)\nLink 3: [Go to Verus-Staking-CLI](https://github.com/kbs1/verus-staking-cli)\n\n## Procedure:\nThese tools will help you stake on your permanently running machine using Verus CLI, instead of running the Agama GUI wallet.\n\n### Features\n automatic shielding and unshielding of coinbase (staking, solo mining)\n automatic tracking of total coins generated (also present in e-mail notifications)\n optional e-mail notifications on newly generated coins\n optional periodical wallet.dat backups, also as an encrypted ZIP archive\n optional periodical wallet balance e-mail notifications\n\nInitial Verus daemon configuration\n Follow the guide in link 3 above to set-up your daemon for the first time. You will need a transparent address, a zs address and the daemon running with correct parameters (`-mint -cheatcatcher=zs...`).\n\nDo not stake with the same `wallet.dat` on multiple nodes.\n\nSubmitted by @kbs1\n\nNote: last revision date 2020-11-11.", "./raw_text_input_wiki/faq-lin07_PHP_CLI_interface.md"], ["# Linux Bash Scripts To Make Mining Life Easier.\nFollowing are some bash scriptse to help make managing your Linux-based CLI miner a bit easier. Prereq is to install mailutils (postfix) and configure with your server's FQDN and set inet_interfaces=localhost in the postfix/main.cf file.### Important General Information\n`VRSC Wallet & data location` on Linux: `~/.komodo/VRSC`\nfor wallet version prior to 0.5.7, replace verusd with komodod.## Scripts:#### MINER SRVC MONITOR & ALERT IF DOWNChecks for the verusd daemon and if it has stopped emails you.##### checkifverusdisrunning.sh```bash\n#!/bin/bash\nif pgrep -x \"verusd\" > /dev/null\nthen\n  TRUE=\"1\"\nelse\n  echo \"Merry Miner Has Stopped Mining!!! HELP!!\" | mail -s \"OUTAGE: Merry\" -a \"From: user@yourqualifieddomain.tld\" you@youremail.tld\nfi\n```#### ALERT ON NEW BLOCKS MINEDPrereq: Create a file called txHistory.txt and put 0 in it, saved to your home folder.\nThe script then compares the current wallet TX count and compares to the txHistory file...\nso first run it will enter the right number in that file overwriting your 0.\nOnly emails you if the number changes.##### checkfornewblocks.sh```bash\n#!/bin/bashhistoricalcount=$(cat /home/user/txHistory.txt)\nlivecount=$(/home/user/verus-cli/verus getwalletinfo | grep txcount | sed 's/[^0-9]*//g')if (($livecount > $historicalcount))\nthen\n  echo $livecount > /home/user/txHistory.txt\n  echo \"Merry Miner Has Mined a Total of $livecount Blocks! Woot!\" | mail -s \"Merry's Blocks: $livecount\" -a \"From: user@yourqualifieddomain.tld\" you@youremail.tld\nelse\n NOCHANGE=\"1\"\nfi\n```#### WALLET BACKUP TO SECURED EMAIL (PROTONMAIL SUGGESTED)For this script I recommend setting up a new Protonmail account with no association to any other service or your name, 2FA secure it.#### Schedule script in CRONTAB", "./raw_text_input_wiki/faq-lin03_linux_scripts_make_life_easy.md"], ["In the following, the `*/5` is every 5 min, the `0` is on the hour every hour, the `0 12` is every day at 12 PM.\n\n##### CRONTAB\n\n```bash\n# m h dom mon dow  command\n*/5 * * * * /home/user/checkfornewblocks.sh\n0 * * * * /home/user/checkifverusdisrunning.sh\n0 12 * * * /home/user/backupwallet.sh\n```\nNote: For any emails sent (for backup of dat file for example) make sure to enforce TLS security in postfix by adding the following line to your /etc/postfix/main.cf\n`smtp_tls_security_level=encrypt`\n\n(submitted by @J Oliver Westbrook)\n\nNote: last revision date 2021-03-09.", "./raw_text_input_wiki/faq-lin03_linux_scripts_make_life_easy.md"], ["Question 1: I have x amount of mature coins in my public address. How many blocks can I expect to get on average from PoS?\nQuestion 2: When is next halving, what is the block reward, and how long will it last?\nQuestion 3: How many timelocked coins have been unlocked and are mature?\n\nAnswer:\nhttps://github.com/Oink70/Staking-calculator/releases\n\nDownload this spreadsheet and keep it handy to input current blockheight and amount of coins you are staking when you want to know.\nYou can also enter a percentage for guessing how many coins are actually staking, to see when it matches your own actual average.\nSee your own percentage of total coins possible to stake, and pay attention to the number day to day, to see how your position holds up.\nThe spreadsheet will also show how many days until the next halvings.\nThe calculation of timelocked coins being unlocked is based on an average for the entire period, but should be fairly accurate, and is included in the total of staking coins.\n\nnote: Verus Desktop uses the live info from the blockchain with regards to locked coins, coins in z-addresses, current coinsupply, minimum stake age of UTXOs and staking difficulty to display real-time predictions of your profitability on your staking balance.\n\n(submitted by Cragorn.vrsc@, additions by Oink.vrsc@)\n\nnote: last revision date 2020-04-30.", "./raw_text_input_wiki/faq-allos06_pos,_halving,_block_reward.md"], ["# Standard file location for Verus Desktop\n\nThe Linux version of Verus Desktop is supplied as an AppImage, so it does not get installed, but mounted in the `/tmp` folder on execution.\nThe folder it is mounted to will look like `.mount_Verus-xxxxx` where the `xxxxx` part will be a random set of characters, changing on every start of the wallet.\n(It is a hidden folder: in order to see it, `<CTRL>-H` will toggle the display of hidden folders)\n\nNormally you don't need to worry about these locations, but in some instances you will be asked by community members providing support to look up a file in a folder in your Verus-Desktop installation.\n\nnote: changing files in these folders or subfolders may result in a corrupt installation. Only do so when instructed by our support community members.\n\n## Deamons\n\nThe daemons are located in the `komodod`, `verusd` and `zcashd` folders that can be found in the\n`resources/app/assets/bin/linux64` subfolder of your (mounted) program folder.\n\n## Program settings\n\nVerus Desktop saves it program settings on a different folder:\n`~/.verus-desktop`\nThe users settings are stored in `appdata/config.json` in the program settings folder.\n\n## Standard chain data and wallet locations\n\n#### KMD\n\n`~/.komodo`\n\n### Verus\n\n`~/.komodo/VRSC`\n\n#### Komodo asset chains\nAny Komodo asset chain will create a subfolder in the KMD chain data and wallet folder, which is standard named. The names will be in capitals and are identical to the **official** asset-chain name.\n`~/.komodo/<CHAIN-NAME>`\n\nNote: examples\nPirate: `~/.komodo/PIRATE`\nUtrum: `~/.komodo/OOT`\nZexo: `~/.komodo/ZEXO`\nAnd so on...\n\nFor easy access to the binaries folders, Verus-Desktop program settings and VRSC chain folder and all binary folders, you can use the debug menu in Verus-Desktop.\n\nnote: created at 2020-12-03 by Oink.vrsc@", "./raw_text_input_wiki/faq-lin10_verus_desktop_locations.md"], ["# Shielding Verus Coin via the CLI.Attention: Read it completely before use.Note: Shielding is no longer required for coinbase rewards after block 800200. Earlier timelocked coins will still need to be shielded in order to use them.### Important General Information`verus command \"<userinput>\"` needs to be entered literally, with `<userinput>` replaced by your specific userdata. So if the text directs you to use for example `\"<Public Address>\"`, you replace that (including the `<` and `>`) with the address,\nso it looks similar to this: `\"RYX6RYU3AAvwVCNyNM4cVyGUhSMUPvKs3r\"`.#### General remarks on CLI wallet:On Windows command line enter the commands as shown without the surrounding quotation marks\nIn Linux shell preceed the commands without surrounding quotation marks with `./`\nIn MacOS shell preceed the commands without surrounding quotation marks with `./`\nExample: the windows version `verus listtransactions` transforms in Linux or MacOS to `./verus listtransactions`.#### General remarks on Windows command line formatting:The CLI help shows the command format for Linux and MacOS.\nFor windows substitute the shown `'`-character with the `\"`-character.\nFor windows substitute the shown `\"`-character with the `\\\"`-characters.## Procedure:You must first \"shield coins\" (send from a transparent R-addr to a shielded zaddr) to be able to use them in staking, when they first unlock.\nThis is part of the Zcash protocol itself. The commands below assume you are in the Verus source code directory`verus z_shieldcoinbase`You can either use an existing zaddr or use a new zaddr. To make a new zaddr:`verus z_getnewaddress`Use the address the above command outputs in the `z_shieldcoinbase` commandTo shield all coinbase in your wallet, you can use `\"*\"` (quotes are important) and zaddr that is getting the funds:`verus z_shieldcoinbase \"*\" <YOUR zs-ADDRESS>`", "./raw_text_input_wiki/how-to_shield_via_cli.md"], ["To just shield a single address, specify that as the first argument:\n\n`verus z_shieldcoinbase <YOUR R-ADDRESS> <YOUR zs-ADDRESS>`\n\nOnce the funds have moved to the zaddr and are confirmed, you can freely send them to any address, They will be eligble for staking id sent to a transpartent address (R-address).\n\nTo send from a certain zaddr to a transparent address, use z_sendmany. The following command sends 10 Verus to a given transparent address, ID address or ID-name.\nExample: `verus z_sendmany zcZpfuzzJqmNJ3fUJekvbnyuxuJe9eAURAHrMCvN2Nr7VuWjakb1LEw6j2etPcCnr45BRot7MaMbipuS5da162BfuUkFGxx '[{\"amount\":10,\"address\":\"Verus Coin Foundation@\"}]'`\n\nNote: revision date 2020-02-12.", "./raw_text_input_wiki/how-to_shield_via_cli.md"], ["# Options available to the Verus RPC client.## Important General Information### Verus CLI version v1.2.2-4#### Usage:\n`verus [options] [command]` Issue a command to the coindaemon\n`verus [options] help` List commands\n`verus [options] help <command>` Get help for a command### Verus `Wallet.dat`, Chaindata & `VRSC.conf` standard locationsLinux:\t\t`~/.komodo/VRSC`\nMac OS: \t`~/Library/Application Support/Komodo/VRSC`\nWindows 10: \t`%AppData%\\Roaming\\Komodo\\VRSC\\`# Options:`-?` This help message`-conf=<file>` Specify configuration file (default: komodo.conf)`-datadir=<dir>` Specify data directory`-testnet` Use the test network`-regtest` Enter regression test mode, which uses a special chain in which blocks\n    can be solved instantly. This is intended for regression testing tools\n    and app development.`-rpcconnect=<ip>` Send commands to node running on <ip> (default: 127.0.0.1)`-rpcport=<port>` Connect to JSON-RPC on <port> (default: 8232 or testnet: 18232)`-rpcwait` Wait for RPC server to start`-rpcuser=<user>` Username for JSON-RPC connections`-rpcpassword=<pw>` Password for JSON-RPC connections`-rpcclienttimeout=<n>` Timeout in seconds during HTTP requests, or 0 for no timeout.\n    (default: 900)`-stdin` Read extra arguments from standard input, one per line until EOF/Ctrl-D\n    (recommended for sensitive information such as passphrases)# Commands:## Addressindex### `getaddressbalance`\nReturns the balance for an address(es) (requires addressindex to be enabled).", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n```json\n{\n \"addresses\"\n  [\n   \"address\" (string) The base58check encoded address\n   ,...\n  ]\n}\n```\n#### Result:\n```json\n{\n \"balance\" (string) The current balance in satoshis\n \"received\" (string) The total number of satoshis received (including change)\n}\n```\nExamples:\n```bash\n> verus getaddressbalance '{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressbalance\", \"params\": [{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getaddressdeltas`\nReturns all changes for an address (requires addressindex to be enabled).#### Arguments:\n```json\n{\n \"addresses\"\n  [\n   \"address\" (string) The base58check encoded address\n   ,...\n  ]\n \"start\" (number) The start block height\n \"end\" (number) The end block height\n \"chainInfo\" (boolean) Include chain info in results, only applies if start and end specified\n \"friendlynames\" (boolean) Include additional array of friendly names keyed by currency i-addresses\n \"verbosity\" (number) (default == 0), if 1, include output information for spends, including all reserve amounts and destinations\n}\n```\n#### Result:\n```json\n[\n {\n  \"satoshis\" (number) The difference of satoshis\n  \"txid\" (string) The related txid\n  \"index\" (number) The related input or output index\n  \"height\" (number) The block height\n  \"address\" (string) The base58check encoded address\n }\n]\n```\nExamples:\n```bash\n> verus getaddressdeltas '{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressdeltas\", \"params\": [{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `getaddressmempool`\nReturns all mempool deltas for an address (requires addressindex to be enabled).#### Arguments:\n```json\n{\n \"addresses\"\n  [\n   \"address\" (string) The base58check encoded address\n   ,...\n  ]\n  \"friendlynames\"  (boolean) Include additional array of friendly names keyed by currency i-addresses\n  \"verbosity\"    (number) (default == 0), if 1, include output information for spends, including all reserve amounts and destinations\n}\n```\n#### Result:\n```json\n[\n {\n  \"address\" (string) The base58check encoded address\n  \"txid\" (string) The related txid\n  \"index\" (number) The related input or output index\n  \"satoshis\" (number) The difference of satoshis\n  \"timestamp\" (number) The time the transaction entered the mempool (seconds)\n  \"prevtxid\" (string) The previous txid (if spending)\n  \"prevout\" (string) The previous transaction output index (if spending)\n }\n]\n```\nExamples:\n```bash\n> verus getaddressmempool '{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressmempool\", \"params\": [{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getaddresstxids`\nReturns the txids for an address(es) (requires addressindex to be enabled).", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n```json\n{\n \"addresses\"\n  [\n   \"address\" (string) The base58check encoded address\n   ,...\n  ]\n \"start\" (number) The start block height\n \"end\" (number) The end block height\n}\n```\n#### Result:\n```json\n[\n \"transactionid\" (string) The transaction id\n ,...\n]\n```\nExamples:\n```bash\n> verus getaddresstxids '{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddresstxids\", \"params\": [{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getaddressutxos`\nReturns all unspent outputs for an address (requires addressindex to be enabled).#### Arguments:\n```json\n{\n \"addresses\"\n  [\n   \"address\" (string) The base58check encoded address\n   ,...\n  ],\n \"chainInfo\" (boolean) Include chain info with results\n \"friendlynames\" (boolean) Include additional array of friendly names keyed by currency i-addresses\n \"verbosity\"  (number) (default == 0), if 1, include output information for spends, including all reserve amounts and destinations\n}\n```\n#### Result:\n```json\n[\n {\n  \"address\" (string) The address base58check encoded\n  \"txid\" (string) The output txid\n  \"height\" (number) The block height\n  \"outputIndex\" (number) The output index\n  \"script\" (strin) The script hex encoded\n  \"satoshis\" (number) The number of satoshis of the output\n }\n]\n```\nExamples:\n```bash\n> verus getaddressutxos '{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressutxos\", \"params\": [{\"addresses\": [\"RY5LccmGiX9bUHYGtSWQouNy1yFhc5rM87\"]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `getsnapshot`\nReturns a snapshot of (address,amount) pairs at current height (requires addressindex to be enabled).#### Arguments:\n \"top\" (number, optional) Only return this many addresses, i.e. top N richlist#### Result:\n```json\n{\n  \"addresses\": [\n  {\n   \"addr\": \"RMEBhzvATA8mrfVK82E5TgPzzjtaggRGN3\",\n   \"amount\": \"100.0\"\n  },\n  {\n   \"addr\": \"RqEBhzvATAJmrfVL82E57gPzzjtaggR777\",\n   \"amount\": \"23.45\"\n  }\n ],\n \"total\": 123.45      (numeric) Total amount in snapshot\n \"average\": 61.7,     (numeric) Average amount in each address\n \"utxos\": 14,       (number) Total number of UTXOs in snapshot\n \"total_addresses\": 2,   (number) Total number of addresses in snapshot,\n \"start_height\": 91,    (number) Block height snapshot began\n \"ending_height\": 91    (number) Block height snapsho finished,\n \"start_time\": 1531982752, (number) Unix epoch time snapshot started\n \"end_time\": 1531982752  (number) Unix epoch time snapshot finished\n}\n```\nExamples:\n```bash\n> verus getsnapshot\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getsnapshot\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```## Blockchain\n### `coinsupply <height>`\nReturn coin supply information at a given block height. If no height is given, the current height is used.#### Arguments:\n1. \"height\"   (integer, optional) Block height", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json\n{\n \"result\" : \"success\",     (string) If the request was successful.\n \"coin\" : \"VRSC\",       (string) The currency symbol of the native coin of this blockchain.\n \"height\" : 420,         (integer) The height of this coin supply data\n \"supply\" : \"777.0\",      (float) The transparent coin supply\n \"zfunds\" : \"0.777\",      (float) The shielded coin supply (in zaddrs)\n \"total\" : \"777.777\",     (float) The total coin supply, i.e. sum of supply + zfunds\n}\n```\nExamples:\n```bash\n> verus coinsupply 420\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"coinsupply\", \"params\": [420] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getbestblockhash`\nReturns the hash of the best (tip) block in the longest block chain.#### Result:\n```\n\"hex\"   (string) the block hash hex encoded\n```\nExamples\n```bash\n> verus getbestblockhash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestblockhash\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getblock \"hash|height\" ( verbosity )`\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for the block.\nIf verbosity is 1, returns an Object with information about the block.\nIf verbosity is 2, returns an Object with information about the block and information about each transaction.#### Arguments:\n1. \"hash|height\"     (string, required) The block hash or height\n2. verbosity       (numeric, optional, default=1) 0 for hex encoded data, 1 for a json object, and 2 for json object with transaction dataResult (for verbosity = 0):\n\"data\"       (string) A string that is serialized, hex-encoded data for the block.#### Results (for verbosity = 1):\n```json\n{\n \"hash\" : \"hash\",    (string) the block hash (same as provided hash)\n \"confir", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["mations\" : n,  (numeric) The number of confirmations, or -1 if the block is not on the main chain\n \"size\" : n,      (numeric) The block size\n \"height\" : n,     (numeric) The block height or index (same as provided height)\n \"version\" : n,     (numeric) The block version\n \"merkleroot\" : \"xxxx\", (string) The merkle root\n \"finalsaplingroot\" : \"xxxx\", (string) The root of the Sapling commitment tree after applying this block\n \"tx\" : [        (array of string) The transaction ids\n   \"transactionid\"   (string) The transaction id\n   ,...\n ],\n \"time\" : ttt,     (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n \"nonce\" : n,      (numeric) The nonce\n \"bits\" : \"1d00ffff\",  (string) The bits\n \"difficulty\" : x.xxx, (numeric) The difficulty\n \"previousblockhash\" : \"hash\", (string) The hash of the previous block\n \"nextblockhash\" : \"hash\"    (string) The hash of the next block\n}\n```\n#### Result (for verbosity = 2):\n```json\n{\n ...,           Same output as verbosity = 1.\n \"tx\" : [        (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result.\n     ,...\n ],\n ,...           Same output as verbosity = 1.\n}\n```\nExamples:\n```bash\n> verus getblock \"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n> verus getblock 12800\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [12800] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `getblockchaininfo`\nReturns an object containing various state info regarding block chain processing.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Note that when the chain tip is at the last block before a network upgrade activation,\nconsensus.chaintip != consensus.nextblock.#### Result:\n```json\n{\n \"chain\": \"xxxx\",      (string) current network name as defined in BIP70 (main, test, regtest)\n \"name\": \"xxxx\",       (string) current network name of blockchain ID (VRSC, VRSCTEST, PBAASNAME)\n \"chainid\": \"xxxx\",     (string) blockchain ID (i-address of the native blockchain currency)\n \"blocks\": xxxxxx,      (numeric) the current number of blocks processed in the server\n \"headers\": xxxxxx,     (numeric) the current number of headers we have validated\n \"bestblockhash\": \"...\",   (string) the hash of the currently best block\n \"difficulty\": xxxxxx,    (numeric) the current difficulty\n \"verificationprogress\": xxxx, (numeric) estimate of verification progress [0..1]\n \"chainwork\": \"xxxx\"     (string) total amount of work in active chain, in hexadecimal\n \"chainstake\": \"xxxx\"    (string) total amount of stake in active chain, in hexadecimal\n \"pruned\": \"xx\"       (boolean) when true the local chain is pruned\n \"size_on_disk\": xxxxxx,   (numeric) the estimated size of the block and undo files on disk\n \"commitments\": xxxxxx,   (numeric) the current number of note commitments in the commitment tree\n \"valuePools\": [       (array) status of valuepools\n  {\n   \"id\": \"xxxx\",      (string) name of valuepool\n   \"monitored\": xx,    (boolean)\n   \"chainValue\": xxxx,   (numeric) total coins in this valuepool\n   \"chainValueZat\": xxxx, (numeric) total sats in this valuepool\n  },\n ],\n \"softforks\": [        (array) status of softforks in progress\n   {\n    \"id\": \"xxxx\",     (string) name of softfork\n    \"version\": xx,     (numeric) block version\n    \"enforce\": {      (object) progress toward enforcing the softfork", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], [" rules for new-version blocks\n      \"status\": xx,    (boolean) true if threshold reached\n      \"found\": xx,    (numeric) number of blocks with the new version found\n      \"required\": xx,   (numeric) number of blocks required to trigger\n      \"window\": xx,    (numeric) maximum size of examined window of recent blocks\n    },\n    \"reject\": { ... }   (object) progress toward rejecting pre-softfork blocks (same fields as \"enforce\")\n   }, ...\n ],\n \"upgrades\": {        (object) status of network upgrades\n   \"xxxx\" : {        (string) branch ID of the upgrade\n    \"name\": \"xxxx\",    (string) name of upgrade\n    \"activationheight\": xxxxxx, (numeric) block height of activation\n    \"status\": \"xxxx\",   (string) status of upgrade\n    \"info\": \"xxxx\",    (string) additional information about upgrade\n   }, ...\n },\n \"consensus\": {        (object) branch IDs of the current and upcoming consensus rules\n   \"chaintip\": \"xxxxxxxx\",  (string) branch ID used to validate the current chain tip\n   \"nextblock\": \"xxxxxxxx\"  (string) branch ID that the next block will be validated under\n }\n}\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `getblockcount`\nReturns the number of blocks in the best valid block chain.#### Result:\n```\nn  (numeric) The current block count\n```\nExamples:\n```bash\n> verus getblockcount\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockcount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getblockdeltas '[\"blockhash\"]'`\nReturns information about the given block and its transactions.WARNING: getblockdeltas is disabled.\nTo enable it, restart verusd with the `-experimentalfeatures` and `-insightexplorer` commandline options, or add these two lines to the `VRSC.conf` file:\n```\nexperimentalfeatures=1\ninsightexplorer=1\n```\n#### Arguments:\n1. `[\"hash\"]`     (json, required) The block hash#### Result:\n```json\n{\n \"hash\": \"hash\",       (string) block ID\n \"confirmations\": n,     (numeric) number of confirmations\n \"size\": n,          (numeric) block size in bytes\n \"height\": n,         (numeric) block height\n \"version\": n,        (numeric) block version (e.g. 4)\n \"merkleroot\": \"hash\",    (hexstring) block Merkle root\n \"deltas\": [\n  {\n   \"txid\": \"hash\",     (hexstring) transaction ID\n   \"index\": n,       (numeric) The offset of the tx in the block\n   \"inputs\": [        (array of json objects)\n    {\n     \"address\": \"taddr\", (string) transparent address\n     \"satoshis\": n,    (numeric) negative of spend amount\n     \"index\": n,     (numeric) vin index\n     \"prevtxid\": \"hash\", (string) source utxo tx ID\n     \"prevout\": n     (numeric) source utxo index\n    }, ...\n   ],\n   \"outputs\": [       (array of json objects)\n    {\n     \"address\": \"tad", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["dr\", (string) transparent address\n     \"satoshis\": n,    (numeric) amount\n     \"index\": n      (numeric) vout index\n    }, ...\n   ]\n  }, ...\n ],\n \"time\" : n,         (numeric) The block version\n \"mediantime\": n,       (numeric) The most recent blocks' ave time\n \"nonce\" : \"nonce\",      (hex string) The nonce\n \"bits\" : \"1d00ffff\",     (hex string) The bits\n \"difficulty\": n,       (numeric) the current difficulty\n \"chainwork\": \"xxxx\"     (hex string) total amount of work in active chain\n \"previousblockhash\" : \"hash\",(hex string) The hash of the previous block\n \"nextblockhash\" : \"hash\"   (hex string) The hash of the next block\n}\n```\nExamples:\n```bash\n> verus getblockdeltas 00227e566682aebd6a7a5b772c96d7a999cadaebeaf1ce96f4191a3aad58b00b\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockdeltas\", \"params\": [\"00227e566682aebd6a7a5b772c96d7a999cadaebeaf1ce96f4191a3aad58b00b\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `getblockhash index`\nReturns hash of block in best-block-chain at index provided.#### Arguments:\n```\nindex     (numeric, required) The block index\n```\n#### Result:\n```\n\"hash\"     (string) The block hash\n```\nExamples:\n```bash\n> verus getblockhash 1000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhash\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getblockhashes timestamp`\nReturns array of hashes of blocks within the timestamp range provided.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n```json\n1. high     (numeric, required) The newer block timestamp\n2. low     (numeric, required) The older block timestamp\n3. options   (string, required) A json object\n  {\n   \"noOrphans\":true  (boolean) will only include blocks on the main chain\n   \"logicalTimes\":true  (boolean) will include logical timestamps with hashes\n  }\n```\n#### Result:\n```json\n[\n \"hash\"     (string) The block hash\n]\n[\n {\n  \"blockhash\": (string) The block hash\n  \"logicalts\": (numeric) The logical timestamp\n }\n]\n```\nExamples:\n```bash\n> verus getblockhashes 1231614698 1231024505\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockhashes\", \"params\": [1231614698, 1231024505] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n> verus getblockhashes 1231614698 1231024505 '{\"noOrphans\":false, \"logicalTimes\":true}'\n```### `getblockheader \"hash\" ( verbose )`\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\nIf verbose is true, returns an Object with information about blockheader <hash>.#### Arguments:\n```\n1. \"hash\"     (string, required) The block hash\n2. verbose      (boolean, optional, default=true) true for a json object, false for the hex encoded data\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result (for verbose = true):\n```json\n{\n \"hash\" : \"hash\",    (string) the block hash (same as provided)\n \"confirmations\" : n,  (numeric) The number of confirmations, or -1 if the block is not on the main chain\n \"height\" : n,     (numeric) The block height or index\n \"version\" : n,     (numeric) The block version\n \"merkleroot\" : \"xxxx\", (string) The merkle root\n \"finalsaplingroot\" : \"xxxx\", (string) The root of the Sapling commitment tree after applying this block\n \"time\" : ttt,     (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n \"nonce\" : n,      (numeric) The nonce\n \"bits\" : \"1d00ffff\",  (string) The bits\n \"difficulty\" : x.xxx, (numeric) The difficulty\n \"previousblockhash\" : \"hash\", (string) The hash of the previous block\n \"nextblockhash\" : \"hash\"    (string) The hash of the next block\n}\n```\n#### Result (for verbose=false):\n```\n\"data\"       (string) A string that is serialized, hex-encoded data for block 'hash'.\n```\nExamples:\n```bash\n> verus getblockheader \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockheader\", \"params\": [\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getchaintips`\nReturn information about all known tips in the block tree, including the main chain as well as orphaned branches.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json\n[\n {\n  \"height\": xxxx,     (numeric) height of the chain tip\n  \"hash\": \"xxxx\",     (string) block hash of the tip\n  \"branchlen\": 0     (numeric) zero for main chain\n  \"status\": \"active\"   (string) \"active\" for the main chain\n },\n {\n  \"height\": xxxx,\n  \"hash\": \"xxxx\",\n  \"branchlen\": 1     (numeric) length of branch connecting the tip to the main chain\n  \"status\": \"xxxx\"    (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)\n }\n]\n```\nPossible values for status:\n1. \"invalid\"        This branch contains at least one invalid block\n2. \"headers-only\"     Not all blocks for this branch are available, but the headers are valid\n3. \"valid-headers\"     All blocks are available for this branch, but they were never fully validated\n4. \"valid-fork\"      This branch is not part of the active chain, but is fully validated\n5. \"active\"        This is the tip of the active main chain, which is certainly validExamples:\n```bash\n> verus getchaintips\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintips\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getchaintxstats`Compute statistics about the total number and rate of transactions in the chain.#### Arguments:\n1. nblocks  (numeric, optional) Number of blocks in averaging window.\n2. blockhash (string, optional) The hash of the block which ends the window.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json\n{\n \"time\": xxxxx,             (numeric) The timestamp for the final block in the window in UNIX format.\n \"txcount\": xxxxx,           (numeric) The total number of transactions in the chain up to that point.\n \"window_final_block_hash\": \"...\",   (string) The hash of the final block in the window.\n \"window_block_count\": xxxxx,      (numeric) Size of the window in number of blocks.\n \"window_tx_count\": xxxxx,       (numeric) The number of transactions in the window. Only returned if \"window_block_count\" is > 0.\n \"window_interval\": xxxxx,       (numeric) The elapsed time in the window in seconds. Only returned if \"window_block_count\" is > 0.\n \"txrate\": x.xx,            (numeric) The average rate of transactions per second in the window. Only returned if \"window_interval\" is > 0.\n}\n```Examples:\n```bash\n> verus getchaintxstats\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getchaintxstats\", \"params\": [2016] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getdifficulty`\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.#### Result:\n```\nn.nnn    (numeric) the proof-of-work difficulty as a multiple of the minimum difficulty.\n```\nExamples:\n```bash\n> verus getdifficulty\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdifficulty\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getmempoolinfo`\nReturns details on the active state of the TX memory pool.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json\n{\n \"size\": xxxxx        (numeric) Current tx count\n \"bytes\": xxxxx        (numeric) Sum of all tx sizes\n \"usage\": xxxxx        (numeric) Total memory usage for the mempool\n}\n```\nExamples:\n```bash\n> verus getmempoolinfo\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmempoolinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getrawmempool ( verbose )`\nReturns all transaction ids in memory pool as a json array of string transaction ids.#### Arguments:\n1. verbose      (boolean, optional, default=false) true for a json object, false for array of transaction ids#### Result (for verbose = false):\n```json\n[           (json array of string)\n \"transactionid\"   (string) The transaction id\n ,...\n]\n```\n#### Result (for verbose = true):\n```json\n{              (json object)\n \"transactionid\" : {    (json object)\n  \"size\" : n,       (numeric) transaction size in bytes\n  \"fee\" : n,       (numeric) transaction fee in VRSC\n  \"time\" : n,       (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\n  \"height\" : n,      (numeric) block height when transaction entered pool\n  \"startingpriority\" : n, (numeric) priority when transaction entered pool\n  \"currentpriority\" : n, (numeric) transaction priority now\n  \"depends\" : [      (array) unconfirmed transactions used as inputs for this transaction\n    \"transactionid\",  (string) parent transaction id\n    ... ]\n }, ...\n}\n```\nExamples\n```bash\n> verus getrawmempool true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawmempool\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getspentinfo`\nReturns the txid and index where an output is spent.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n```json\n{\n \"txid\" (string) The hex string of the txid\n \"index\" (number) The start block height\n}\n```\n#### Result:\n```json\n{\n \"txid\" (string) The transaction id\n \"index\" (number) The spending input index\n ,...\n}\n```\nExamples:\n```bash\n> verus getspentinfo '{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getspentinfo\", \"params\": [{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `gettxout \"txid\" n ( includemempool )`\nReturns details about an unspent transaction output.#### Arguments:\n```\n1. \"txid\"     (string, required) The transaction id\n2. n        (numeric, required) vout value\n3. includemempool (boolean, optional) Whether to include the mempool\n```#### Result:\n```json\n{\n \"bestblock\" : \"hash\",   (string) the block hash\n \"confirmations\" : n,   (numeric) The number of confirmations\n \"value\" : x.xxx,     (numeric) The transaction value in VRSC\n \"scriptPubKey\" : {    (json object)\n   \"asm\" : \"code\",    (string)\n   \"hex\" : \"hex\",     (string)\n   \"reqSigs\" : n,     (numeric) Number of required signatures\n   \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash\n   \"addresses\" : [    (array of string) array of Komodo addresses\n    \"verusaddress\"   (string) Komodo address\n    ,...\n   ]\n },\n \"version\" : n,      (numeric) The version\n \"coinbase\" : true|false  (boolean) Coinbase or not\n}\n```\nExamples:", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Get unspent transactions\n```bash\n> verus listunspent\n```\nView the details\n```bash\n> verus gettxout \"txid\" 1\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```## `gettxoutproof [\"txid\",...] ( blockhash )`\nReturns a hex-encoded proof that \"txid\" was included in a block.NOTE: By default this function only works sometimes. This is when there is an\nunspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option or\nspecify the block in which the transaction is included in manually (by blockhash).Return the raw transaction data.#### Arguments:\n```json\n1. \"txids\"    (string) A json array of txids to filter\n  [\n   \"txid\"   (string) A transaction hash\n   ,...\n  ]\n```\n2. \"block hash\" (string, optional) If specified, looks for txid in the block with this hash#### Result:\n```\n\"data\"      (string) A string that is a serialized, hex-encoded data for the proof.\n```### `gettxoutsetinfo`\nReturns statistics about the unspent transaction output set.\nNote this call may take some time.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json\n{\n \"height\":n,         (numeric) The current block height (index)\n \"bestblock\": \"hex\",     (string) the best block hash hex\n \"transactions\": n,      (numeric) The number of transactions\n \"txouts\": n,         (numeric) The number of output transactions\n \"bytes_serialized\": n,    (numeric) The serialized size\n \"hash_serialized\": \"hash\",  (string) The serialized hash\n \"total_amount\": x.xxx    (numeric) The total amount\n}\n```\nExamples:\n```bash\n> verus gettxoutsetinfo\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `kvsearch key`\nSearch for a key stored via the kvupdate command. This feature is only available for asset chains.#### Arguments:\n```\n1. key           (string, required) search the chain for this key\n```\n#### Result:\n```json\n{\n \"coin\": \"xxxxx\",     (string) chain the key is stored on\n \"currentheight\": xxxxx,  (numeric) current height of the chain\n \"key\": \"xxxxx\",      (string) key\n \"keylen\": xxxxx,     (string) length of the key\n \"owner\": \"xxxxx\"     (string) hex string representing the owner of the key\n \"height\": xxxxx,     (numeric) height the key was stored at\n \"expiration\": xxxxx,   (numeric) height the key will expire\n \"flags\": x        (numeric) 1 if the key was created with a password; 0 otherwise.\n \"value\": \"xxxxx\",     (string) stored value\n \"valuesize\": xxxxx    (string) amount of characters stored\n}\n```\nExamples:\n```bash\n> verus kvsearch examplekey\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"kvsearch\", \"params\": [examplekey] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `kvupdate key \"value\" days passphrase`\nStore a key value. This feature is only available for asset chains.\n#### Arguments:\n```\n1. key           (string, required) key\n2. \"value\"         (string, required) value\n3. days           (numeric, required) amount of days(1440 blocks/day) before the key expires. Minimum 1 day\n4. passphrase        (string, optional) passphrase required to update this key\n```\n#### Result:\n```json\n{\n \"coin\": \"xxxxx\",     (string) chain the key is stored on\n \"height\": xxxxx,     (numeric) height the key was stored at\n \"expiration\": xxxxx,   (numeric) height the key will expire\n \"flags\": x,        (string) amount of days the key will be stored\n \"key\": \"xxxxx\",      (numeric) stored key\n \"keylen\": xxxxx,     (numeric) length of the key\n \"value\": \"xxxxx\"     (numeric) stored value\n \"valuesize\": xxxxx,    (string) length of the stored value\n \"fee\": xxxxx       (string) transaction fee paid to store the key\n \"txid\": \"xxxxx\"      (string) transaction id\n}\n```\nExamples:\n```bash\n> verus kvupdate examplekey \"examplevalue\" 2 examplepassphrase\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"kvupdate\", \"params\": [examplekey \"examplevalue\" 2 examplepassphrase] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `minerids needs height`### `notaries height timestamp`### `processupgradedata {upgradedata}`\nReturns the txid and index where an output is spent.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n```json\n{\n \"upgradeid\"        (string) The VDXF key identifier\n \"minimumdaemonversion\"   (string) The minimum version required for the upgrade\n \"activationheight\"     (number) The block height to activate\n \"activationtime\"      (number) Epoch time to activate, depending on upgrade\n}\n```\n#### Result:\n```json\n{\n \"txid\" (string) The transaction id\n \"index\" (number) The spending input index\n ,...\n}\n```\nExamples:\n```bash\n> verus processupgradedata '{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"processupgradedata\", \"params\": [{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `verifychain ( checklevel numblocks )`\nVerifies blockchain database.#### Arguments:\n```\n1. checklevel  (numeric, optional, 0-4, default=3) How thorough the block verification is.\n        check level 0: read from disk\n        check level 1: verify block validity\n        check level 2: verify undo validity\n        check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n        check level 4: try reconnecting blocks\n2. numblocks  (numeric, optional, default=288, 0=all) The number of blocks to check.\n```\n#### Result:\n```\ntrue|false    (boolean) Verified or not\n```\nExamples:\n```bash\n> verus verifychain\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `verifytxoutproof \"proof\"`\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\nand throwing an RPC error if the block is not in our best chain#### Arguments:\n```\n1. \"proof\"  (string, required) The hex-encoded proof generated by gettxoutproof\n```\n#### Result:\n```json\n[\"txid\"]   (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid\n```### `z_gettreestate \"hash|height\"`\nReturn information about the given block's tree state.#### Arguments:\n1. \"hash|height\"     (string, required) The block hash or height. Height can be negative where -1 is the last known valid block#### Result:\n```json\n{\n \"hash\": \"hash\",     (string) hex block hash\n \"height\": n,      (numeric) block height\n \"sprout\": {\n  \"skipHash\": \"hash\",  (string) hash of most recent block with more information\n  \"commitments\": {\n   \"finalRoot\": \"hex\", (string)\n   \"finalState\": \"hex\" (string)\n  }\n },\n \"sapling\": {\n  \"skipHash\": \"hash\",  (string) hash of most recent block with more information\n  \"commitments\": {\n   \"finalRoot\": \"hex\", (string)\n   \"finalState\": \"hex\" (string)\n  }\n }\n}\n```Examples:\n```bash\n> verus z_gettreestate \"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_gettreestate\", \"params\": [\"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n> verus z_gettreestate 12800\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_gettreestate\", \"params\": [12800] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["## Control\n### `getinfo`\nReturns an object containing various state info.\n#### Result:\n```json\n{\n \"version\": xxxxx,      (numeric) the server version\n \"protocolversion\": xxxxx,  (numeric) the protocol version\n \"VRSCversion\": \"xxxxx\",   (string) the daemon version\n \"notarized\": xxxxx,     (numeric) most recent notarization block\n \"prevMoMheight\": xxxxx,   (numeric) previous notarization block\n \"notarizedhash\": \"hash\",  (hash) notarization hash\n \"notarizedtxid\": \"hash\",  (hash) notarization txid\n \"notarizedtxid_height\": \"mempool\",\n \"KMDnotarized_height\": n,  (numeric)\n \"notarized_confirms\": n,  (numeric)\n \"blocks\": xxxxxx,      (numeric) the current number of blocks processed in the server\n \"timeoffset\": xxxxx,    (numeric) the time offset\n \"tiptime\": xxxxx,      (numeric) the time of the tip of the chain\n \"connections\": xxxxx,    (numeric) the number of connections\n \"proxy\": \"host:port\",   (string, optional) the proxy used by the server\n \"difficulty\": xxxxxx,    (numeric) the current difficulty\n \"testnet\": true|false,   (boolean) if the server is using testnet or not", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["\"keypoololdest\": xxxxxx,  (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\n \"keypoolsize\": xxxx,    (numeric) how many new keys are pre-generated\n \"paytxfee\": x.xxxx,     (numeric) the transaction fee set in VRSC/kB\n \"tls_established\": x,    (numeric) amount of TLS connections established\n \"tls_verified\": x,     (numeric) amount of verified TLS connections established\n \"relayfee\": x.xxxx,     (numeric) minimum relay fee for non-free transactions in VRSC/kB\n \"errors\": \"...\"       (string) any error messages\n \"CCid\": x,\n \"name\": \"xxxxx\",      (string) The name of chain\n \"p2pport\": xxxxx,      (numeric) number of the P2P port\n \"rpcport\": xxxxx,      (numeric) number of the RPC port\n \"magic\": xxxxx,       (numeric) chain magic number of the chain\n ...             More chain definition specific parameters, which ones depends on the chain.\n}\n```\nExamples:\n```bash\n> verus getinfo\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `help ( \"command\" )`\nList all commands, or get help for a specified command.#### Arguments:\n```\n1. \"command\"   (string, optional) The command to get help on\n```\n#### Result:\n```\n\"text\"   (string) The help text\n```### `stop`\nStop Verus server.## Crosschain### `MoMoMdata symbol kmdheight ccid`\n### `assetchainproof needs a txid`\n### `calc_MoM height MoMdepth`\n### `getNotarisationsForBlock blockHash`\nTakes a block hash and returns notarisation transactions within the block### `height_MoM height`\n### `migrate_completeimporttransaction importTx`\nTakes a cross chain import tx with proof generated on assetchain and extends proof to target chain proof root", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `migrate_converttoexport rawTx dest_symbol export_amount`\nConvert a raw transaction to a cross-chain export.\nIf necesary, the transaction should be funded using `fundrawtransaction`.\nFinally, the transaction should be signed using `signrawtransaction`.\nThe finished export transaction, plus the payouts, should be passed to the \"`migrate_createimporttransactio`n\" method on a KMD node to get the corresponding import transaction.### `migrate_createimporttransaction burnTx payouts`\nCreate an importTx given a burnTx and the corresponding payouts, hex encoded### `scanNotarisationsDB blockHeight symbol [blocksLimit=1440]`\nScans notarisationsdb backwards from height for a notarisation of given symbol## Disclosure\n### `z_getpaymentdisclosure \"txid\" \"js_index\" \"output_index\" (\"message\")`\nGenerate a payment disclosure for a given joinsplit output.EXPERIMENTAL FEATUREWARNING: z_getpaymentdisclosure is disabled.\nTo enable it, restart verusd with the `-experimentalfeatures` and `-paymentdisclosure` commandline options, or add these two lines to the zcash.conf file:\n```\nexperimentalfeatures=1\npaymentdisclosure=1\n```\n#### Arguments:\n```\n1. \"txid\"      (string, required)\n2. \"js_index\"    (string, required)\n3. \"output_index\"  (string, required)\n4. \"message\"     (string, optional)\n```\n#### Result:\n```\n\"paymentdisclosure\" (string) Hex data string, with \"zpd:\" prefix.\n```\nExamples:\n```bash\n> verus z_getpaymentdisclosure 96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2 0 0 \"refund\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getpaymentdisclosure\", \"params\": [\"96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2\", 0, 0, \"refund\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_validatepaymentdisclosure \"paymentdisclosure\"`\nValidates a payment disclosure.EXPERIMENTAL FEATURE", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["WARNING: z_validatepaymentdisclosure is disabled.\nTo enable it, restart verusd with the `-experimentalfeatures` and\n`-paymentdisclosure` commandline options, or add these two lines\nto the zcash.conf file:\n```\nexperimentalfeatures=1\npaymentdisclosure=1\n```\n#### Arguments:\n```\n1. \"paymentdisclosure\"   (string, required) Hex data string, with \"zpd:\" prefix.\n```\nExamples:\n```bash\n> verus z_validatepaymentdisclosure \"zpd:706462ff004c561a0447ba2ec51184e6c204...\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_validatepaymentdisclosure\", \"params\": [\"zpd:706462ff004c561a0447ba2ec51184e6c204...\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```## Generating\n### `generate numblocks`\nMine blocks immediately (before the RPC call returns)Note: this function can only be used on the regtest network#### Arguments:\n```\n1. numblocks  (numeric) How many blocks are generated immediately.\n```\n### Result:\n```json\n[ blockhashes ]   (array) hashes of blocks generated\n```\nExamples:Generate 11 blocks\n```bash\n> verus generate 11\n```### `getgenerate`\nReturn if the server is set to mine and/or mint coins or not. The default is false.\nIt is set with the command line argument `-gen` (or `VRSC.conf` setting `gen`) and `-mint`\nIt can also be set with the `setgenerate` call.Result\n```json\n{\n \"staking\": true|false   (boolean) If staking is on or off (see setgenerate)\n \"generate\": true|false   (boolean) If mining is on or off (see setgenerate)\n \"numthreads\": n      (numeric) The processor limit for mining. (see setgenerate)\n}\n```\n####Examples:\n```bash\n> verus getgenerate\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getgenerate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `setgenerate generate ( genproclimit )`\nSet 'generate' true to turn either mining/generation or minting/staking on and false to turn both off.\nMining is limited to 'genproclimit' processors, -1 is unlimited, setgenerate true with 0 genproclimit turns on staking\nSee the getgenerate call for the current setting.#### Arguments:\n```\n1. generate     (boolean, required) Set to true to turn on generation, off to turn off.\n2. genproclimit   (numeric, optional) Set processor limit when generation is on. Can be -1 for unlimited, 0 to turn on staking.\n```\n####Examples:Set the generation on with a limit of one processor\n```bash\n> verus setgenerate true 1\n```\nTurn minting/staking on\n```bash\n> verus setgenerate true 0\n```\nCheck the setting\n```bash\n> verus getgenerate\n```\nTurn off generation and minting\n```bash\n> verus setgenerate false\n```\nUsing json rpc\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setgenerate\", \"params\": [true, 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```## Identity### `getidentitieswithaddress '{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}'`", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n```json\n{\n  \"address\":\"validaddress\"   (string, required) returns all identities that contain the specified address in its primary addresses\n  \"fromheight\":n        (number, optional, default=0) Search for qualified identities modified from this height forward only\n  \"toheight\":n         (number, optional, default=0) Search for qualified identities only up until this height (0 == no limit)\n  \"unspent\":bool        (bool, optional, default=false) if true, this will only return active ID UTXOs as of the current block height\n}\n```\n#### Result:\n```json\n[                 (array) array of matching identities\n {identityobject},        (object) identity with additional member \"txout\" with txhash and output index\n ...\n]\n```\n####Examples:\n```bash\n> verus getidentitieswithaddress '{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentitieswithaddress\", \"params\": ['{\"address\":\"validprimaryaddress\",\"fromheight\":height, \"toheight\":height, \"unspent\":false}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getidentitieswithrecovery '{\"identityid\":\"idori-address\", \"fromheight\":height, \"toheight\":height, \"unspent\":false}'`", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n```json\n{\n  \"identityid\":\"idori-address\" (string, required) returns all identities where this ID or i-address is the recovery authority\n  \"fromheight\":n        (number, optional, default=0) Search for qualified identities modified from this height forward only\n  \"toheight\":n         (number, optional, default=0) Search for qualified identities only up until this height (0 == no limit)\n  \"unspent\":bool        (bool, optional, default=false) if true, this will only return active ID UTXOs as of the current block height\n}\n```\n#### Result:\n```json\n[                 (array) array of matching identities\n {identityobject},        (object) identity with additional member \"txout\" with txhash and output index\n ...\n]\n```\n####Examples:\n```bash\n> verus getidentitieswithrecovery '{\"identityid\":\"idori-address\",\"fromheight\":height,\"toheight\":height,\"unspent\":false}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentitieswithrecovery\", \"params\": ['{\"identityid\":\"idori-address\",\"fromheight\":height,\"toheight\":height,\"unspent\":false}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n### `getidentitieswithrevocation '{\"identityid\":\"idori-address\", \"fromheight\":height, \"toheight\":height, \"unspent\":false}'`#### Arguments:\n```json\n{\n  \"identityid\":\"idori-address\" (string, required) returns all identities where this ID or i-address is the revocation authority\n  \"fromheight\":n        (number, optional, default=0) Search for qualified identities modified from this height forward only\n  \"toheight\":n         (number, optional, default=0) Search for qualified identities only up until this height (0 == no limit)\n  \"unspent\":bool        (bool, optional, default=false) if true, this will only return active ID UTXOs as of the current block hei", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["ght\n}\n```\n#### Result:\n```json\n[                 (array) array of matching identities\n {identityobject},        (object) identity with additional member \"txout\" with txhash and output index\n ...\n]\n```\n####Examples:\n```bash\n> verus getidentitieswithrevocation '{\"identityid\":\"idori-address\",\"fromheight\":height,\"toheight\":height,\"unspent\":false}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentitieswithrevocation\", \"params\": ['{\"identityid\":\"idori-address\",\"fromheight\":height,\"toheight\":height,\"unspent\":false}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n### `getidentity \"name@ || iid\" (height) (txproof) (txproofheight)`\n#### Arguments:\n```\n \"name@ || iid\"            (string, required) name followed by \"@\" or i-address of an identity\n \"height\"               (number, optional) default=current height, return identity as of this height\n \"txproof\"              (bool, optional) default=false, if true, returns proof of ID\n \"txproofheight\"           (number, optional) default=\"height\", height from which to generate a proof\n```\n#### Result:\n```json\n{\n \"identity\": {\n  \"version\": n,          (integer) version number\n  \"flags\": n,           (integer) flag\n  \"primaryaddresses\": [\n   \"xxxx\"            (text) Public address that controls this ID\n  ],\n  \"minimumsignatures\": n,     (integer) Amount of signatures required to spend UTXOs on this ID\n  \"identityaddress\": \"xxxx\",   (text) i-address of the ID\n  \"parent\": \"xxxx\",        (text) Parent ID of the chain the ID is on\n  \"name\": \"xxxx\",         (text) The Identity Name\n  \"contentmap\": {\n  },\n  \"revocationauthority\": \"xxxx\", (text) the i-address of the identity that can revoke this ID\n  \"recoveryauthority\": \"x", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["xxx\",  (text) the i-address of the identity that can recover this ID when revoked\n  \"timelock\": 0          (integer) Timelock\n },\n \"status\": \"xxxx\",         (text) The revocation status (\"Active\"|\"Revoked\")\n \"canspendfor\": xxxx,       (boolean) Can the node running the command spend UTXOs on this ID (True|False)\n \"cansignfor\": xxxx,        (boolean) Can the node running the command sign for this ID (True|False)\n \"blockheight\": n,         (integer) blockheight the current ID info was put on the chain\n \"txid\": \"xxxx\",          (string) Transaction ID at blockheight to put the current ID data on the chain\n \"vout\": n             (integer) voutnumber of the TXID\n}\n```\n####Examples:\n```bash\n> verus getidentity \"name@\"\n> verus getidentity \"i5v3h9FWVdRFbNHU7DfcpGykQjRaHtMqu7\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentity\", \"params\": [\"name@\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `getidentitycontent \"name@ || iid\" (heightstart) (heightend) (txproofs) (txproofheight) (vdxfkey)`", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n  \"name@ || iid\"    (string, required) name followed by \"@\" or i-address of an identity\n  \"heightstart\"    (number, optional) default=0, only return content from this height forward, inclusive\n  \"heightend\"     (number, optional) default=0 which means max height, only return content up to this height,\n                      inclusive. -1 means also return values from the mempool.\n  \"txproofs\"      (bool, optional) default=false, if true, returns proof of ID\n  \"txproofheight\"   (number, optional) default=\"height\", height from which to generate a proof\n  \"vdxfkey\"      (vdxf key, optional) default=null, more selective search for specific content in ID#### Result:#### Examples:\n```bash\n> verus getidentitycontent \"name@\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentitycontent\", \"params\": [\"name@\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getidentityhistory \"name@ || iid\" (heightstart) (heightend) (txproofs) (txproofheight)`#### Arguments:\n  \"name@ || iid\"    (string, required) name followed by \"@\" or i-address of an identity\n  \"heightstart\"    (number, optional) default=0, only return content from this height forward, inclusive\n  \"heightend\"     (number, optional) default=0 which means max height, only return content up to this height,\n             inclusive. -1 means also return values from the mempool.\n  \"txproofs\"      (bool, optional) default=false, if true, returns proof of ID\n  \"txproofheight\"   (number, optional) default=\"height\", height from which to generate a proof#### Result:", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Examples:\n```bash\n> verus getidentityhistory \"name@\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentityhistory\", \"params\": [\"name@\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getidentitytrust '[\"id\",...]'`\n#### Arguments:\n```json\n\"[\"id\",...]\"                    (strarray, optional) if specified, only returns rating values for specified IDs, otherwise all\n```\n#### Result:\n```json\n{\n \"setratings\":{\"id\":JSONRatingObject,...},    (jsonobj) an ID/ratings key/value object\n \"identitytrustmode\":<n>              (int) 0 = no restriction on sync, 1 = only sync to IDs rated approved, 2 = sync to all IDs but those on block list\n}\n```\n####Examples:\n```bash\n> verus getidentitytrust '[\"id\",...]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getidentitytrust\", \"params\": ['[\"id\",...]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `listidentities (includecanspend) (includecansign) (includewatchonly)`\n#### Arguments:\n  \"includecanspend\"  (bool, optional, default=true)  Include identities for which we can spend/authorize\n  \"includecansign\"   (bool, optional, default=true)  Include identities that we can only sign for but not spend\n  \"includewatchonly\"  (bool, optional, default=false)  Include identities that we can neither sign nor spend, but are either watched or are co-signers with us#### Result:\n```json\n[\n {\n  \"identity\": {\n   \"version\": n,          (integer) version number\n   \"flags\": n,           (integer) flag\n   \"primaryaddresses\": [\n    \"xxxx\"            (text) Public address that controls this ID\n   ],\n   \"minimumsignatures\": n,     (integer) Amount of signatures required to spend UTXOs on this ID\n   \"identityaddress\": \"xxxx\",  ", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], [" (text) i-address of the ID\n   \"parent\": \"xxxx\",        (text) Parent ID of the chain the ID is on\n   \"name\": \"xxxx\",         (text) The Identity Name\n   \"contentmap\": {\n   },\n   \"revocationauthority\": \"xxxx\", (text) the i-address of the identity that can revoke this ID\n   \"recoveryauthority\": \"xxxx\",  (text) the i-address of the identity that can recover this ID when revoked\n   \"timelock\": 0          (integer) Timelock\n  },\n  \"blockheight\": n,         (integer) blockheight the current ID info was put on the chain\n  \"txid\": \"xxxx\",          (string) Transaction ID at blockheight to put the current ID data on the chain\n  \"status\": \"xxxx\",         (text) The revocation status (\"Active\"|\"Revoked\")\n  \"canspendfor\": xxxx,       (boolean) Can the node running the command spend UTXOs on this ID (True|False)\n  \"cansignfor\": xxxx,        (boolean) Can the node running the command sign for this ID (True|False)\n },\n ....\n]\n ```\nExamples:\n```bash\n> verus listidentities '{\"name\" : \"myname\"}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listidentities\", \"params\": ['{\"name\" : \"myname\"}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n### `recoveridentity \"jsonidentity\" (returntx) (tokenrecover) (feeoffer) (sourceoffunds)`\n#### Arguments:\n```\n    \"returntx\"            (bool,  optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned\n    \"tokenrevoke\"           (bool,  optional) defaults to false, if true, the tokenized ID control token, if one exists, will be used to revoke\n    \"feeoffer\"            (value, optional) non-standard fee amount to pay for the transaction\n    \"sourceoffunds\"          (string, optional) tr", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["ansparent or private address to source all funds for fees to preserve privacy of the identity\n```\n#### Result:\ntransactionid          (hexstr)", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Examples:\n```bash\n> verus recoveridentity '{\"name\" : \"myname\"}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"recoveridentity\", \"params\": ['{\"name\" : \"myname\"}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `registeridentity \"jsonidregistration\" (returntx) feeoffer sourceoffunds`\n`registeridentity` needs the values from `RegisterNameCommitment` output to register a VerusID#### Arguments:\n```json\n{\n  \"txid\": \"hexid\",        (hex, required)\n                      the transaction ID of the name committment for this ID name -\n                      Take fromRegisterNameCommitment's output - txid\n  \"namereservation\": {\n   \"name\": \"namestr\",      (string, required)\n                      the unique name in this commitment - Take from\n                      output - name\n   \"salt\": \"hexstr\",      (hex, required)\n                      salt used to hide the commitment - Take from\n                      RegisterNameCommitment's output - salt\n   \"referral\": \"identityID\",  (name@ or address, required)\n                      must be a valid ID to use as a referrer to receive a\n                      discount - Take from RegisterNameCommitment's\n                      output - referral\n   \"parent\": \"\",        (name@ or address, required)\n                      must be a valid ID. This ID can be used to revoke and recover\n                      the nameID we regsiter with this current command - Take from\n                      RegisterNameCommitment's output - parent\n   \"nameid\": \"nameID\"      (base58, required)\n                      identity address for this identity if it is created -\n                      Take from RegisterNameCommitment's output - nameid\n  },\n  \"identity\": {\n   \"name\": \"namestr\",      (string, required)\n  ", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["                     the unique name for this identity - Take from\n                      RegisterNameCommitment's output - name\n   \"parent\": \"IDParent\",    (string, required for IDs with parents other than VRSC)\n\t\t\t\t\t  the parents friendly name e.g. gravity\n   \"primaryaddresses\": [    (array of strings, required) the trasparent/public address(es)\n    \"hexstr\"\n   ],\n   \"minimumsignatures\": 1,   (int, required)\n                      MofN signatures required out of the primary addresses list\n                      to sign transactions\n   \"privateaddress\": \"hexstr\", (string, optional)\n                      shielded address associated with the VerusID being made\n   \"revocationauthority\": \"identityID\", (name@ or address, optional)\n                      The ID entered here will be able to disable your created ID\n                      in case of loss or theft. It is some existing ID which either\n                      is under your own control or the ID you trust can help you\n                      revoke in case of this ID's theft.\n   \"recoveryauthority\": \"identityID\"  (name@ or address, optional, required if \"revocationauthority\"\n                      is used)\n                      The ID entered here will be able to revive your created ID\n                      if it is revoked. It is some existing ID which either is\n                      under your own control or the ID you trust can help you\n                      revive in case of this ID's revoked.\n  }\n}\nreturntx              (bool, optional) default=false if true, retu", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["rn a transaction for additional\n                      signatures rather than committing it\nfeeoffer              (amount, optional)\n                      amount to offer miner/staker for the registration\n                      fee, if missing, uses standard price\nsourceoffunds           (addressorid, optional) optional address to use for source of funds. if not specified, transparent wildcard \"*\" is used\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n  transactionid          (hexstr)\nExamples:\n```bash\n> verus registeridentity jsonidregistration\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"registeridentity\", \"params\": [jsonidregistration] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `registernamecommitment \"name\" \"controladdress\" (\"referralidentity\") (\"parentnameorid\") (\"sourceoffunds\")`\nRegisters a name commitment, which is required as a source for the name to be used when registering an identity. The name commitment hides the name itself while ensuring that the miner who mines in the registration cannot front-run the name unless they have also registered a name commitment for the same name or are willing to forfeit the offer of payment for the chance that a commitment made now will allow them to register the name in the future.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n```\n\"name\"              (string, required) the unique name to commit to. creating a name commitment is not a\n                            registration, and if one is created for a name that exists, it may\n                            succeed, but will never be able to be used.\n\"controladdress\"         (address, required) address that will control this commitment\n\"referralidentity\"        (identity, optional)friendly name or identity address that is provided as a referral mechanism and to lower network cost of the ID\n\"parentnameorid-pbaasonly\"    (currency, optional)friendly name or currency i-address, which will be the parent of this ID and dictate issuance rules & pricing\n\"sourceoffunds\"         (addressorid, optional) optional address to use for source of funds. if not specified, transparent wildcard \"*\" is used\n```\n#### Result: obj\n```json\n{\n  \"txid\" : \"hexid\"\n  \"namereservation\" :\n  {\n    \"name\"  : \"namestr\",   (string) the unique name in this commitment\n    \"salt\"  : \"hexstr\",   (hex)  salt used to hide the commitment\n    \"referral\": \"identityaddress\", (base58) address of the referring identity if there is one\n    \"parent\" : \"namestr\",  (string) name of the parent if not Verus or Verus test\n    \"nameid\" : \"address\",  (base58) identity address for this identity if it is created\n  }\n}\n```\nExamples:\n```bash\n> verus registernamecommitment \"name\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"registernamecommitment\", \"params\": [\"name\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `revokeidentity \"nameorID\" (returntx) (tokenrevoke) (feeoffer) (sourceoffunds)`\n#### Arguments:\n```\n\"nameorID\"            (string, required) the unique name to commit to. creating a name commitment is not a registration, and if one is\n                           created for a name that exists, it may succeed, but will never be able to be used.\n\"returntx\"            (bool,  optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned\n\"tokenrevoke\"           (bool,  optional) defaults to false, if true, the tokenized ID control token, if one exists, will be used to revoke\n\"feeoffer\"            (value, optional) non-standard fee amount to pay for the transaction\n\"sourceoffunds\"          (string, optional) transparent or private address to source all funds for fees to preserve privacy of the identity```\n#### Result:\n```json\n{\n  \"txid\" : \"hexid\"\n  \"namereservation\" :\n  {\n    \"name\"  : \"namestr\",   (string) the unique name in this commitment\n    \"salt\"  : \"hexstr\",   (hex)  salt used to hide the commitment\n    \"referral\": \"identityaddress\", (base58) address of the referring identity if there is one\n    \"parent\" : \"namestr\",   (string) name of the parent if not Verus or Verus test\n    \"nameid\" : \"address\",   (base58) identity address for this identity if it is created\n  }\n}\n```\n### Examples:\n```bash\n> verus revokeidentity \"nameorID\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"revokeidentity\", \"params\": [\"nameorID\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `setidentitytimelock \"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx) (feeoffer) (sourceoffunds)`\nEnables timelocking and unlocking of funds access for an on-chain VerusID. This does not affect the lock status of VerusIDs on other chains,\nincluding VerusIDs with the same identity as this one, which has been exported to another chain.Use \"setunlockdelay\" to set a time unlock delay on an identity, which means that once the identity has been unlocked,\nnumberofblocksdelayafterunlock must then pass before the identity will be able to spend funds on this blockchain. Services\nwhich support VerusID authentication and recognize this setting may also choose to prevent funds transfers when an ID is locked.Use \"unlockatblock\" to either unlock, by passing the current block, which will still require waiting for the specified unlock\ndelay, or to set a future unlock height that immediately begins counting down. Unlike an unlock delay, which only starts counting\ndown when the ID is unlocked, an \"unlockatblock\" time lock is absolute and will automatically unlock when the specified\nblock passes.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments - either \"unlockatblock\" or \"setunlockdelay\" must be specified and not both\n```json\n{\n \"unlockatblock\"        (number, optional) unlock at an absolute block height, countdown starts when mined into a block\n \"setunlockdelay\"        (number, optional) delay this many blocks after unlock request to unlock, can only be\n                           circumvented by revoke/recover\n}\n\"returntx\"            (bool,  optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned\n\"feeoffer\"            (bool,  optional) non-standard fee amount to pay for the transaction\n\"sourceoffunds\"         (string,  optional) transparent or private address to source all funds for fees to preserve privacy of the identity\n```\n#### Result:\n  Hex string of either the txid if returnhex is false or the hex serialized transaction if returntx is true.\n  If returntx is true, the transaction will not have been submitted and must be sent with \"sendrawtransaction\"\n  after any necessary signatures are applied in the case of multisig.Examples:\n```bash\n> verus setidentitytimelock \"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx)\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setidentitytimelock\", \"params\": [\"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx)] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `setidentitytrust '{\"clearall\": bool, \"setratings\":{\"id\":JSONRatingObject,...}, \"removeratings\":[\"id\",...], \"identitytrustmode\":<n>}'`\n#### Arguments:\n```json\n{\n  \"clearall\": bool               (bool, optional) clears all wallet identity trust lists before adding, removing, or trust mode operations\n  \"setratings\":{\"id\":JSONRatingObject,...}   (obj, optional) replaces ratings for specified IDs with those given\n  \"removeratings\":[\"id\",...]          (strarray, optional) erases ratings for IDs specified\n  \"identitytrustmode\": <n>           (number, optional) 0 = no restriction on sync, 1 = only sync to IDs rated approved, 2 = sync to all IDs but those on block list\n}\n```#### Result\nno return on success, else error\n#### Examples\n```bash\n> verus setidentitytrust '{\"clearall\": bool, \"setratings\":{\"id\":JSONRatingObject,...}, \"removeratings\":[\"id\",...], \"identitytrustmode\":<n>}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setidentitytrust\", \"params\": ['{\"clearall\": bool, \"setratings\":{\"id\":JSONRatingObject,...}, \"removeratings\":[\"id\",...], \"identitytrustmode\":<n>}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `signdata 'json'`\nFull json:\n```json\n{\n \"address\":\"i-address or friendly name (t-address will result in simple signature w/indicated hash and prefix, nothing else)\",\n \"prefixstring\":\"extra string that is hashed during signature and must be supplied for verification\",\n  \"filename\":\"filepath/filename\" |\n  \"message\":\"any message\" |\n  \"vdxfdata\":\"vdxf encoded data\" |\n  \"messagehex\":\"hexdata\" |\n  \"messagebase64\":\"base64data\" |\n  \"datahash\":\"256bithex\" |\n  \"mmrdata\":[{\n   \"filename | serializedhex | serializedbase64 | vdxfdata | message | datahash\":\"str\"} |\n   \"strdata\"\n  ],\n \"vdxfkeys\": [\"vdxfkey i-address\", ...],\n \"vdxfkeynames\":[\"vdxfkeynam", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["e, object for getvdxfid API, or friendly name ID -- no i-addresses\", ...],\n \"boundhashes\":[\"hexhash\", ...],\n \"hashtype\": \"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\",\n \"encrypttoaddress\": \"sapling address\",       granularly encrypt all data, either all decryptable with viewing key or parts using unique, SSKs\n \"createmmr\":\"bool\",                 if true, 1 or more objects will be put into a merkle mountain range and the root signed\n \"signature\":\"currentsig\"\n}\n```\nGenerates a hash (SHA256 default if \"hashtype\" not specified) of the data, returns the hash, and signs it with parameters specified\n#### Arguments:\n```json\n{\n \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to use for signing.\n \"filename\" | \"message\" | \"messagehex\" | \"messagebase64\" | \"datahash\" (string, required) Data to sign\n \"mmrdata\":[{\"filename | vdxfdata | message | serializedhex | serializedbase64 | datahash\":\"str\"}], (array, optional) Alternate to single data parameters, this enables an MMR signing\n       \"mmrsalt\":[\"salt\":\"str\"],             (string, optional) Protects privacy of leaf nodes of the MMR\n       \"mmrhashtype\":\"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\", (string, optional) Default is blake2b\n       \"priormmr\":\"[{\"idxhash\":,\"utxoref\":{}}]\",     (array, optional) When growing an MMR, the prior hashes can be used to construct the MMR and root w/o data\n \"vdxfkeys\":[\"vdxfkey\", ...],                 (array, optional) Array of vdxfkeys or ID i-addresses\n \"vdxfkeynames\":[\"vdxfkeyname\", ...],             (array, optional) Array of vdxfkey names or fully qualified friendly IDs\n \"boundhashes\":[\"hexhash\", ...],               (array, optional) Array of bound hash values\n \"hashtype\": \"str\",              ", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["        (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256\n \"signature\":\"base64str\",                   (string, optional) The current signature of the message encoded in base 64 if multisig ID\n \"encrypttoaddress\":\"saplingaddress\",             (string, optional) If present, encrypts and optionally returns encrypted data.\n                                         All data can be decrypted with the incoming viewing key, and a unique decryption key can\n                                         be generated for each sub-object.\n \"createmmr\":\"bool\"                      (bool, optional)  If this is true, OR there is more than one item to sign, returns processed data, MMRs, and root signature\n}\n```\n#### Results:\n```json\n{\n \"hash\":\"hexhash\"                       (string) The hash of the message or null and returns \"hashes\", an array of hashes for an MMR\n \"hashes\":[\"hexhash\"]                     (array) Array of hashes for an MMR, alternate to \"hash\"\n \"mmrroot\":\"hexstr\"                      (string) Only returned when passed an array for signing root hash of the merkle mountain range of the objects signed\n \"vdxfkeys\":[\"vdxfkey i-address\", ...],\n \"vdxfkeynames\":[\"vdxfkeyname, object for getvdxfid API, or friendly name ID -- no i-addresses\", ...],\n \"boundhashes\":[\"hexhash\", ...],\n \"hashtype\": \"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\"\n \"signature\":\"base64sig\"                   (string) The aggregate signature of the message or mmrroot encoded in base 64 if all or partial signing successful for MMR, it is of root\n \"\"}", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["```\n#### Examples\nCreate the signature\n```bash\n> verus signdata '{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\"}'\n```\nVerify the signature\n```bash\n> verus verifydata '{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}'\n```\nAs json rpc\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signdata\", \"params\": ['{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\"}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `signfile \"address or identity\" \"filepath/filename\" \"curentsig\"`\nGenerates a SHA256D hash of the file, returns the hash, and signs the hash with the private key specified#### Arguments:\n1. \"t-addr or identity\" (string, required) The transparent address or identity to use for signing.\n2. \"filename\"    (string, required) Local file to sign\n2. \"cursig\"     (string) The current signature of the message encoded in base 64 if multisig ID#### Result:\n```json\n{\n \"hash\":\"hexhash\"     (string) The hash of the message (SHA256, NOT SHA256D)\n \"signature\":\"base64sig\" (string) The aggregate signature of the message encoded in base 64 if all or partial signing successful\n}\n```Examples:Create the signature\n```bash\n> verus signfile \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" \"filepath/filename\"\n```\nVerify the signature\n```bash\n> verus verifyfile \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" \"signature\" \"filepath/filename\"\n```\nAs json rpc\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signfile\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", \"filepath/filename\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `signmessage \"address or identity\" \"message\" \"curentsig\"`\nSign a message with the private key of a t-addr or the authorities present in this wallet for an identity#### Arguments:\n1. \"t-addr or identity\"    (string, required) The transparent address or identity to use for signing.\n2. \"message\"          (string, required) The message to create a signature of.\n2. \"cursig\"          (string) The current signature of the message encoded in base 64 if multisig ID", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json\n{\n \"hash\":\"hexhash\"     (string) The hash of the message (SHA256, NOT SHA256D)\n \"signature\":\"base64sig\" (string) The aggregate signature of the message encoded in base 64 if all or partial signing successful\n}\n```\nExamples:Create the signature\n```bash\n> verus signmessage \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" \"my message\"\n```\nVerify the signature\n```bash\n> verus verifymessage \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" \"signature\" \"my message\"\n```\nAs json rpc\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signmessage\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `updateidentity \"jsonidentity\" (returntx) (tokenupdate) (feeoffer) (sourceoffunds)`\n#### Arguments:\n```json\n{\n\t \"version\": n,          (integer, optional) version number\n   \"flags\": n,           (integer, required) flag\n   \"primaryaddresses\": [\n    \"xxxx\", ...          (text, required) Public addresses that control this ID\n   ],\n   \"minimumsignatures\": n,     (integer, required) Amount of signatures required to spend UTXOs on this ID\n   \"identityaddress\": \"xxxx\",   (text, optional) i-address of the ID\n   \"parent\": \"xxxx\",        (text, optional) Parent ID of the chain the ID is on\n   \"name\": \"xxxx\",         (text, required) the identity name\n   \"contentmap\": {\n   },\n   \"revocationauthority\": \"xxxx\", (text, optional) the i-address of the identity that can revoke this ID\n   \"recoveryauthority\": \"xxxx\",  (text, optional) the i-address of the identity that can recover this ID when revoked\n   \"timelock\": 0,         (integer, optional) timelock\n\t\t\t\"privateaddress\": \"xxxx\"    (text, optional) private address attached to the ID\n}", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["\"returntx\"            (bool,  optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned\n\"tokenupdate\"           (bool,  optional) defaults to false, if true, the tokenized ID control token, if one exists, will be used to update\n                           which enables changing the revocation or recovery IDs, even if the wallet holding the token does not\n                           control either.\n\"feeoffer\"            (bool,  optional) non-standard fee amount to pay for the transaction\n\"sourceoffunds\"          (string,  optional) transparent or private address to source all funds for fees to preserve privacy of the identity\n```#### Result:\n  hex string of either the txid if returnhex is false or the hex serialized transaction if returntx is trueExamples:\n```bash\n> verus updateidentity '{\"name\" : \"myname\"}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"updateidentity\", \"params\": ['{\"name\" : \"myname\"}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `verifyfile \"address or identity\" \"signature\" \"filepath/filename\" \"checklatest\"`\nVerify a signed file#### Arguments:\n1. \"t-addr or identity\" (string, required) The transparent address or identity that signed the file.\n2. \"signature\"     (string, required) The signature provided by the signer in base 64 encoding (see signfile).\n3. \"filename\"      (string, required) The file, which must be available locally to the daemon and that was signed.\n3. \"checklatest\"    (bool, optional)  If true, checks signature validity based on latest identity. defaults to false, which determines validity of signing height stored in signature.#### Result:\ntrue|false  (boolean) If the signature is verified or not.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Examples:\nCreate the signature\n```bash\n> verus signfile \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"filepath/filename\"\n```\nVerify the signature\n```bash\n> verus verifyfile \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"signature\" \"filepath/filename\"\n```\nAs json rpc\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifyfile\", \"params\": [\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\", \"signature\", \"filepath/filename\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `verifyhash \"address or identity\" \"signature\" \"hexhash\" \"checklatest\"`\nVerify a signed message#### Arguments:\n1. \"t-addr or identity\" (string, required) The transparent address or identity that signed the data.\n2. \"signature\"     (string, required) The signature provided by the signer in base 64 encoding (see signmessage/signfile).\n3. \"hexhash\"      (string, required) Hash of the message or file that was signed.\n3. \"checklatest\"    (bool, optional)  If true, checks signature validity based on latest identity. defaults to false, which determines validity of signing height stored in signature.#### Result:\ntrue|false  (boolean) If the signature is verified or not.Examples:Create the signature\n```bash\n> verus signfile \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"filepath/filename\"\nor\n> verus signmessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"my message\"\n```\nVerify the signature\n```bash\n> verus verifyhash \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"signature\" \"hexhash\"\n```\nAs json rpc\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifyhash\", \"params\": [\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\", \"signature\", \"hexhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `verifymessage \"address or identity\" \"signature\" \"message\" \"checklatest\"`\nVerify a signed message", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. \"t-addr or identity\" (string, required) The transparent address or identity that signed the message.\n2. \"signature\"     (string, required) The signature provided by the signer in base 64 encoding (see signmessage).\n3. \"message\"      (string, required) The message that was signed.\n3. \"checklatest\"    (bool, optional)  If true, checks signature validity based on latest identity. defaults to false, which determines validity of signing height stored in signature.#### Result:\ntrue|false  (boolean) If the signature is verified or not.Examples:Create the signature\n```bash\n> verus signmessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"my message\"\n```\nVerify the signature\n```bash\n> verus verifymessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"signature\" \"my message\"\n```\nAs json rpc\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `Verifysignature 'json'`\nChecks to see if the signature is valid and returns an error for invalid\n#### Arguments\n```json\n{\n \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to verify against the signature\n                                (t-address checks on simple signature w/hash and prefix, nothing else)\n \"prefixstring\":\"extra string that is hashed during signature and must be supplied for verification\",\n \"filename\" | \"message\" | \"messagehex\" | \"messagebase64\" | \"datahash\" (string, required) Data or hash of data signed\n \"vdxfkeys\":[\"vdxfkey\", ...],                 (array, optional) Array of vdxfkeys or ID i-addresses\n \"vdxfkeynames\":[\"vdxfkeyname\", ...],             (array, optional) Array of ", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["objects for getvdxfid API, or friendly name ID -- no i-addresses\n \"boundhashes\":[\"hexhash\", ...],               (array, optional) Array of bound hash values\n \"hashtype\"                          (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256\n \"signature\"                         (string, optional) The current signature of the message encoded in base 64\n \"checklatest\"                        (bool, optional)  If true, checks signature validity based on latest identity. defaults to false,\n                                which determines validity of signing height stored in signature.\n}\n```\n#### Results:\n```json\n{\n \"hash\":\"hexhash\"     (string) The hash of the message (SHA256, NOT SHA256D)\n \"signature\":\"base64sig\" (string) The aggregate signature of the message encoded in base 64 if all or partial signing successful\n}\n```\n#### Examples:\n```bash\n> verus verifysignature '{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifysignature\", \"params\": [{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}]}' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["## Marketplace\n### `closeoffers ('[\"offer1_txid\", \"offer2_txid\", ...]') (transparentorprivatefundsdestination) (privatefundsdestination)`\nCloses all offers listed, if they are still valid and belong to this wallet.\nAlways closes expired offers, even if no parameters are given\n#### Arguments\n1. `[\"offer1_txid\", \"offer2_txid\", ...]`   (array, optional) array of hex tx ids of offers to close\n2. transparentorprivatefundsdestination    (transparent or private address, optional) destination for closing funds\n3. privatefundsdestination          (private address, optional) destination for native funds only#### Results\nnull return### `getoffers \"currencyorid\" (iscurrency) (withtx)`\nReturns all open offers for a specific currency or ID", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments\n1. \"currencyorid\"    (string, required) The currency or ID to check for offers, both sale and purchase\n2. \"iscurrency\"     (bool, optional)  default=false, if false, this looks for ID offers, if true, currencies\n3. \"withtx\"       (bool, optional)  default=false, if true, this returns serialized hex of the exchange transaction for signing#### Result:\nall available offers for or in the indicated currency or ID are displayedExamples:\n```bash\n verus getoffers \"currencyorid\" (iscurrency)\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getoffers\", \"params\": [\"currencyorid\" (iscurrency)] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `listopenoffers (unexpired) (expired)`\nShows offers outstanding in this wallet#### Arguments\n1. unexpired        (bool, optional) default=true, list those offers in the wallet which are not expired\n2. expired         (bool, optional) default=true, list those offers in the wallet which are expired\n#### Result\nAll open offers", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `makeoffer fromaddress '{\"changeaddress\":\"transparentoriaddress\", \"expiryheight\":blockheight, \"offer\":{\"currency\":\"anycurrency\", \"amount\":...} | {\"identity\":\"idnameoriaddress\",...}', \"for\":{\"address\":..., \"currency\":\"anycurrency\", \"amount\":...} | {\"name\":\"identityforswap\",\"parent\":\"parentid\",\"primaryaddresses\":[\"R-address(s)\"],\"minimumsignatures\":1,...}}' (returntx) (feeamount)`\nThis sends a transaction which provides a completely decentralized, fully on-chain an atomic swap offer for\ndecentralized swapping of any blockchain asset, including any/multi currencies, NFTs, identities, contractual\nagreements and rights transfers, or to be used as bids for an on-chain auction of any blockchain asset(s).\nSources and destination of funds for swaps can be any valid transparent address capable of holding or controlling\nthe specific asset.#### Arguments\n1. \"fromaddress\"       (string, required) The VerusID, or wildcard address to send funds from. \"\\*\", \"R\\*\", or \"i\\*\" are valid wildcards\n2. {\n   \"changeaddress\"     (string, required) Change destination when constructing transactions\n   \"expiryheight\"     (number, optional) Block height at which this offer expires. Defaults to 20 blocks (avg 1/minute)\n   \"offer\"         (object, required) Funds description or identity name, \"address\" in this object should be an address of the person making an offer for change\n   \"for\"          (object, required) Funds description or full identity description\n  }\n3. \"returntx\"        (bool, optional) default = false, if true, returns a transaction waiting for taker completion instead of posting\n4. \"feeamount\"        (value, optional) default = 0.0001", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json\n{\n \"txid\" : \"transactionid\", The hex transaction id on success\n \"hex\" : \"serializedtx\"  If hex is requested, hex serialization of partial transaction instead of txid is returned on success\n}\n```Examples:\n```\n> verus makeoffer fromaddress '{\"changeaddress\":\"transparentoriaddress\", \"expiryheight\":blockheight, \"offer\":{\"currency\":\"anycurrency\", \"amount\":...} | {\"identity\":\"idnameoriaddress\",...}', \"for\":{\"address\":..., \"currency\":\"anycurrency\", \"amount\":...} | {\"name\":\"identityforswap\",\"parent\":\"parentid\",\"primaryaddresses\":[\"R-address(s)\"],\"minimumsignatures\":1,...}}' (returntx) (feeamount)\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"makeoffer\", \"params\": [fromaddress '{\"changeaddress\":\"transparentoriaddress\", \"expiryheight\":blockheight, \"offer\":{\"currency\":\"anycurrency\", \"amount\":...} | {\"identity\":\"idnameoriaddress\",...}', \"for\":{\"address\":..., \"currency\":\"anycurrency\", \"amount\":...} | {\"name\":\"identityforswap\",\"parent\":\"parentid\",\"primaryaddresses\":[\"R-address(s)\"],\"minimumsignatures\":1,...}}' (returntx) (feeamount)] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `takeoffer fromaddress '{\"txid\":\"txid\" | \"tx\":\"hextx\", \"changeaddress\":\"transparentoriaddress\", \"deliver\":\"fullidnameoriaddresstodeliver\" | {\"currency\":\"currencynameorid\",\"amount\":n}, \"accept\":{\"address\":\"addressorid\",\"currency\":\"currencynameorid\",\"amount\"} | {identitydefinition}}' (returntx) (feeamount)`\nIf the current wallet can afford the swap, this accepts a swap offer on the blockchain, creates a transaction\nto execute it, and posts the transaction to the blockchain.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. \"fromaddress\"     (string, required) The Sapling, VerusID, or wildcard address to send funds from, including fees for ID swaps.\n                      \"\\*\", \"R\\*\", or \"i\\*\" are valid wildcards\n2. {\n  \"txid\"        (string, required) The transaction ID for the offer to accept\n  \"tx\"         (string, required) The hex transaction to complete in order to accept the offer\n  \"deliver\"      (object, required) One of \"fullidnameoriaddresstotrade\" or {\"currency\":\"currencynameorid\", \"amount\":value}\n  \"feeamount\"     (number, optional) Specific fee amount requested instead of default miner's fee\n  }\n3. \"returntx\" (bool, optional) default = false, if true, returns a transaction waiting for taker completion instead of posting\n4. \"feeamount\" (value, optional) default = 0.0001#### Result:\n  \"txid\" : \"transactionid\" (string) The transaction id if (returntx) is false\n  \"hextx\" : \"hex\"     (string) The hexadecimal, serialized transaction if (returntx) is trueExamples:\n```\n> verus takeoffer fromaddress '{\"txid\":\"txid\" | \"tx\":\"hextx\", \"deliver\":\"fullidnameoriaddresstodeliver\" | {\"currency\":\"currencynameorid\",\"amount\"}, \"accept\":{\"address\":\"addressorid\",\"currency\":\"currencynameorid\",\"amount\"} | {identitydefinition}}' (returntx) (feeamount)\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"takeoffer\", \"params\": [fromaddress {\"txid\":\"txid\" | \"tx\":\"hextx\", \"deliver\":\"fullidnameoriaddresstodeliver\" | {\"currency\":\"currencynameorid\",\"amount\"}, \"accept\":{\"address\":\"addressorid\",\"currency\":\"currencynameorid\",\"amount\"} | {identitydefinition}} (returntx) (feeamount)] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["## Mining\n### `getblocksubsidy height`\nReturns block subsidy reward, taking into account the mining slow start and the founders reward, of block at index provided.#### Arguments:\n1. height     (numeric, optional) The block height. If not provided, defaults to the current height of the chain.#### Result:\n```json\n{\n \"miner\" : x.xxx      (numeric) The coinbase reward amount in VRSC.\n}\n```\nExamples:\n```bash\n> verus getblocksubsidy 1000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblockubsidy\", \"params\": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getblocktemplate ( \"jsonrequestobject\" )`\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\nIt returns data needed to construct a block to work on.\nSee https://en.bitcoin.it/wiki/BIP_0022 for full specification.#### Arguments:\n1. \"jsonrequestobject\"    (string, optional) A json object in the following spec\n```json\n   {\n    \"mode\":\"template\"      (string, optional) This must be set to \"template\" or omitted\n    \"miningdistribution\":{\n      \"(recipientaddress)\":n, (addressorid, relativeweight) key value to determine distribution\n      \"(recipientaddress)\":n,\n      \"...\n    \"},\n    \"capabilities\":[       (array, optional) A list of strings\n      \"support\"        (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\n      ,...\n     ]\n   }\n```#### Result:\n```json\n{\n \"version\" : n,           (numeric) The block version\n \"previousblockhash\" : \"xxxx\",   (string) The hash of current highest block\n \"finalsaplingroothash\" : \"xxxx\",  (string) The hash of the final sapling root\n \"transactions\" : [         (array) con", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["tents of non-coinbase transactions that should be included in the next block\n   {\n     \"data\" : \"xxxx\",      (string) transaction data encoded in hexadecimal (byte-for-byte)\n     \"hash\" : \"xxxx\",      (string) hash/id encoded in little-endian hexadecimal\n     \"depends\" : [        (array) array of numbers\n       n            (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\n       ,...\n     ],\n     \"fee\": n,          (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\n     \"sigops\" : n,        (numeric) total number of SigOps, as counted for purposes of block limits; if key is not present, sigop count is unknown and clients MUST NOT assume there aren't any\n     \"required\" : true|false   (boolean) if provided and true, this transaction must be in the final block\n   }\n   ,...\n ],\n \"coinbasetxn\" : { ... },      (json object) information for coinbase transaction\n \"target\" : \"xxxx\",         (string) The hash target\n \"mintime\" : xxx,          (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)\n \"mutable\" : [           (array of string) list of ways the block template may be changed\n   \"value\"             (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\n   ,...\n ],\n \"noncerange\" : \"00000000ffffffff\", (string) A range of valid nonces\n \"sigoplimit\" : n,         (numeric) limit of sigops in blocks\n \"sizeli", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["mit\" : n,          (numeric) limit of block size\n \"curtime\" : ttt,          (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)\n \"bits\" : \"xxx\",          (string) compressed target of next block\n \"height\" : n            (numeric) The height of the next block\n}\n```\nExamples:\n```bash\n> verus getblocktemplate\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblocktemplate\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `getlocalsolps`\nReturns the average local solutions per second since this node was started.\nThis is the same information shown on the metrics screen (if enabled).#### Result:\nxxx.xxxxx   (numeric) Solutions per second average", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Examples:\n```bash\n> verus getlocalsolps\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlocalsolps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getminingdistribution`\nRetrieves current mining distribution#### Arguments\nNONE#### Result:\n```\nNULL object if not set\nIf set:\n{\n \"uniquedestination1\":value  (key/number) valid destination address and relative value output to it\n \"uniquedestination2\":value  (key/number) destination address and relative value output\n ...\n}\n```#### Examples:\n```bash\n> verus getminingdistribution\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getminingdistribution\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `getmininginfo`\nReturns a json object containing mining-related information.\n#### Result:\n```\n{\n \"blocks\": nnn,       (numeric) The current block\n \"currentblocksize\": nnn,  (numeric) The last block size\n \"currentblocktx\": nnn,   (numeric) The last block transaction\n \"averageblockfees\": xxx.xxxxx (numeric) The average block fees, in addition to block reward, over the past 100 blocks\n \"difficulty\": xxx.xxxxx  (numeric) The current difficulty\n \"stakingsupply\": xxx.xxxxx (numeric) The current estimated total staking supply\n \"errors\": \"...\"      (string) Current errors\n \"generate\": true|false   (boolean) If the generation is on or off (see getgenerate or setgenerate calls)\n \"genproclimit\": n     (numeric) The processor limit for generation. -1 if no generation. (see getgenerate or setgenerate calls)\n \"localsolps\": xxx.xxxxx  (numeric) The average local solution rate in Sol/s since this node was started\n \"networksolps\": x     (numeric) The estimated network solution rate in Sol/s\n \"pooledtx\": n       (numeric) The size of the mem pool\n \"testnet\": true|false   (boolean) If using testnet or not\n \"chain\": \"xxxx\",      (string) current network name as defined in BIP70 (main, test, regtest)\n \"generate\": true|false   (boolean) If this instance is mining or staking\n \"staking\": true|false   (boolean) If staking\n \"numthreads\": n      (numeric) Number of CPU threads mining\n \"mergemining\": n      (numeric) Number of blockchains we are merge mining with\n \"mergeminedchains\": []   (optional, list of names) Blockchain names that are being merge mined with this blockchain\n}\n```\nExamples:\n```bash\n> verus getmininginfo\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmininginfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `getnetworkhashps ( blocks height )`\nDEPRECATED - left for backwards-compatibility. Use getnetworksolps instead.Returns the estimated network solutions per second based on the last n blocks.\nPass in [blocks] to override # of blocks, -1 specifies over difficulty averaging window.\nPass in [height] to estimate the network speed at the time when a certain block was found.#### Arguments:\n```\n1. blocks   (numeric, optional, default=120) The number of blocks, or -1 for blocks over difficulty averaging window.\n2. height   (numeric, optional, default=-1) To estimate at the time of the given height.\n```\n#### Result:\n```\nx       (numeric) Solutions per second estimated\n```\nExamples:\n```bash\n> verus getnetworkhashps\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkhashps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getnetworksolps ( blocks height )`\nReturns the estimated network solutions per second based on the last n blocks.\nPass in [blocks] to override # of blocks, -1 specifies over difficulty averaging window.\nPass in [height] to estimate the network speed at the time when a certain block was found.#### Arguments:\n```\n1. blocks   (numeric, optional, default=120) The number of blocks, or -1 for blocks over difficulty averaging window.\n2. height   (numeric, optional, default=-1) To estimate at the time of the given height.\n```\n#### Result:\n```\nx       (numeric) Solutions per second estimated\n```\nExamples:\n```bash\n> verus getnetworksolps\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworksolps\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `prioritisetransaction <txid> <priority delta> <fee delta>`\nAccepts the transaction into mined blocks at a higher (or lower) priority", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n```\n1. \"txid\"     (string, required) The transaction id.\n2. priority delta (numeric, required) The priority to add or subtract.\n         The transaction selection algorithm considers the tx as it would have a higher priority.\n         (priority of a transaction is calculated: coinage * value_in_satoshis / txsize)\n3. fee delta   (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).\n         The fee is not actually paid, only the algorithm for selecting transactions into a block\n         considers the transaction as it would have paid a higher (or lower) fee.\n```\n#### Results:\n```\ntrue       (boolean) Returns true\n```\nExamples:\n```bash\n> verus prioritisetransaction \"txid\" 0.0 10000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prioritisetransaction\", \"params\": [\"txid\", 0.0, 10000] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `setminingdistribution ( \"jsonminingdistribution\" )`\nSets multiple mining outputs with amounts that will be used to calculate relative outputs to each address for any reward\n#### Arguments\n```json\n{\n \"uniquedestination1\":value  (key/number, required) valid destination address and relative value output to it\n \"uniquedestination2\":value  (key/number, optional) destination address and relative value output\n ...\n}\n```\n#### Result\nNULL for success, exception otherwise\n#### Examples:\n```bash\n> verus setminingdistribution {\"myaddress\":0.5, \"otheraddress\":0.5}\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setminingdistribution\", \"params\": [{\"myaddress\":0.5, \"otheraddress\":0.5}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `submitblock \"hexdata\" ( \"jsonparametersobject\" )`\nAttempts to submit new block to network.\nThe 'jsonparametersobject' parameter is currently ignored.\nSee https://en.bitcoin.it/wiki/BIP_0022 for full specification.#### Arguments:\n```\n1. \"hexdata\"  (string, required) the hex-encoded block data to submit\n2. \"jsonparametersobject\"   (string, optional) object of optional parameters\n  {\n   \"workid\" : \"id\"  (string, optional) if the server provided a workid, it MUST be included with submissions\n  }\n```\n#### Result:\n```\n\"duplicate\" - node already has valid copy of block\n\"duplicate-invalid\" - node already has block, but it is invalid\n\"duplicate-inconclusive\" - node already has block but has not validated it\n\"inconclusive\" - node has not validated the block, it may not be on the node's current best chain\n\"rejected\" - block was rejected as invalid\nFor more information on submitblock parameters and results, see: https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki#block-submission\n```\nExamples:\n```bash\n> verus submitblock \"mydata\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```## Multichain### `addmergedblock \"hexdata\" ( \"jsonparametersobject\" )`\nAdds a fully prepared block and its header to the current merge mining queue of this daemon.\nParameters determine the action to take if adding this block would exceed the available merge mining slots.\nDefault action to take if adding would exceed available space is to replace the choice with the least ROI if this block provides more.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n```\n1. \"hexdata\"           (string, required) the hex-encoded, complete, unsolved block data to add. nTime, and nSolution are replaced.\n2. \"name\"            (string, required) chain name symbol\n3. \"rpchost\"           (string, required) host address for RPC connection\n4. \"rpcport\"           (int,  required) port address for RPC connection\n5. \"userpass\"          (string, required) credentials for login to RPC\n```\n#### Result:\n```\n\"deserialize-invalid\" - block could not be deserialized and was rejected as invalid\n\"blocksfull\"     - block did not exceed others in estimated ROI, and there was no room for an additional merge mined block\n```\nExamples:\n```bash\n> verus addmergedblock \"hexdata\" '{\"currencyid\" : \"hexstring\", \"rpchost\" : \"127.0.0.1\", \"rpcport\" : portnum}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addmergedblock\", \"params\": [\"hexdata\" '{\"currencyid\" : \"hexstring\", \"rpchost\" : \"127.0.0.1\", \"rpcport\" : portnum, \"estimatedroi\" : (verusreward/hashrate)}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `definecurrency '{\"name\": \"coinortokenname\", ..., \"nodes\":[{\"networkaddress\":\"identity\"},..]}' '({\"name\": \"fractionalgatewayname\", ..., })' ({\"name\": \"reserveonename\", ..., }) ...`\nThis defines a blockchain currency, either as an independent blockchain, or as a token on this blockchain. It also spends the identity after which this currency is named and sets a bit indicating that it has a currently active blockchain in its name.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["To create a currency of any kind, the identity it is named after must be minted on the blockchain on which the currency is created.\nOnce a currency is activated for an identity name, the same symbol may not be reused for another currency or blockchain, even if the identity is transferred, revoked or recovered, unless there is an endblock specified and the currency or blockchain has deactivated as of that end block.All funds to start the currency and for initial conversion amounts must be available to spend from the identity with the same name and ID as the currency being defined.#### Arguments:\n```json\n{\n  \"options\" : n,         (int, optional) bits (in hexadecimal):\n                     OPTION_FRACTIONAL = 1         // (1 decimal )allows reserve conversion using base calculations when set\n                     OPTION_ID_ISSUANCE = 2         // (2 decimal) clear is permissionless, if set, IDs may only be created by controlling ID\n                     OPTION_ID_STAKING = 4         // (4 decimal) all IDs on chain stake equally, rather than value-based staking\n                     OPTION_ID_REFERRALS = 8        // (8 decimal) if set, this chain supports referrals\n                     OPTION_ID_REFERRALREQUIRED = 0x10   // (16 decimal) if set, this chain requires referrals\n                     OPTION_TOKEN = 0x20          // (32 decimal) if set, this is a token, not a native currency\n                     OPTION_SINGLECURRENCY = 0x40      // (64 decimal) for PBaaS chains or gateways to potentially restrict to single currency\n                     OPTION_GATEWAY = 0x80         // (128 decimal) if set, this routes external currencies\n    ", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["                  OPTION_PBAAS = 0x100          // (256 decimal) this is a PBaaS chain definition\n                     OPTION_GATEWAY_CONVERTER = 0x200    // (512 decimal) this means that for a specific PBaaS gateway, this is the default converter and will publish prices\n                     OPTION_GATEWAY_NAMECONTROLLER = 0x400 // (1024 decimal) when not set on a gateway, top level ID and currency registration happen on launch chain\n                     OPTION_NFT_TOKEN = 0x800        // (2048 decimal) single satoshi NFT token, tokenizes control over the root ID\n                     OPTION_NO_IDS = 0x1000         // (4096 decimal) this currency cannot issue IDs\n\t\t\t\t\t\t\t\t\t\t        OPTIONS_FLAG_MASK = 0xfff\n \"name\" : \"xxxx\",         (string, required) name of existing identity with no active or pending blockchain\n \"idregistrationfees\" : \"xx.xx\", (value, required) price of an identity in native currency\n \"idreferrallevels\" : n,     (int, required) how many levels ID referrals go back in reward\n \"notaries\" : \"[identity,..]\",  (list, optional) list of identities that are assigned as chain notaries\n \"minnotariesconfirm\" : n,    (int, optional) unique notary signatures required to confirm an auto-notarization\n \"notarizationreward\" : \"xx.xx\", (value, required) default VRSC notarization reward total for first billing period\n \"proofprotocol\" : n,       (int, optional) if 2, currency can be minted by whoever controls the ID\n                         1 = PROOF_PBAASMMR - Verus MMR proof, no notaries required\n                         2 = PROOF_CHAINID - non-native only - currency has centralized control, and\n                             ", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["      can mint/burn & change weights\n                         3 = PROOF_ETHNOTARIZATION - ETH & PATRICIA TRIE proof (do not attempt without\n                                       full understanding + C++, JavaScript & Solidity dev(s))\n \"notarizationprotocol\" : n,   (int, optional) if 2, currency can be minted by whoever controls the ID\n                         1 = PROOF_PBAASMMR - Verus MMR proof, no notaries required\n                         2 = PROOF_CHAINID - chain ID is sole notary for proof, no evidence required\n                         3 = PROOF_ETHNOTARIZATION - Ethereum notarization & PATRICIA TRIE proof\n \"expiryheight\" : n,       (int, optional) block height at which the transaction expires, default: curheight + 20\n \"startblock\"  : n,       (int, optional) VRSC block must be notarized into block 1 of PBaaS chain, default curheight + 100\n \"endblock\"   : n,       (int, optional) chain or currency intended to end life after this height, 0 = no end\n \"currencies\"  : \"[\"VRSC\",..]\", (list, optional) reserve currencies backing this chain in equal amounts\n \"weights\"    : \"[\"xx.xx\",..]\",(list, optional) the weight of each reserve currency in a fractional currency\n \"conversions\"  : \"[\"xx.xx\",..]\",(list, optional) if present, must be same size as currencies. pre-launch conversion ratio overrides\n \"minpreconversion\" : \"[\"xx.xx\",..]\", (list, optional) must be same size as currencies. minimum in each currency to launch\n \"maxpreconversion\" : \"[\"xx.xx\",..]\", (list, optional) maximum in each currency allowed\n \"initialcontributions\" : \"[\"xx.xx\",..]\", (list, optional) initial contribution in each currency\n \"prelaunchdiscount\" : \"xx.xx\"  (value, optional) for fractional reserve currencies less", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], [" than 100%, discount on final price at launch\n \"initialsupply\" : \"xx.xx\"    (value, required for fractional) supply after conversion of contributions, before preallocation\n \"prelaunchcarveout\" : \"0.xx\",  (value, optional) identities and % of pre-converted amounts from each reserve currency\n \"preallocations\" : \"[{\"identity\":xx.xx}..]\", (list, optional) list of identities and amounts from pre-allocation\n \"gatewayconvertername\" : \"name\", (string, optional) if this is a PBaaS chain, this names a co-launched gateway converter currency\n \"blocktime\"     : n,    (int, optional) target time in seconds to average between blocks (default 60 seconds)\n \"powaveragingwindow\" : n,    (int, optional) total number of blocks to look back when averaging for DAA (default 45 blocks)\n \"notarizationperiod\" : n,    (int, optional) min period miners/stakers must wait to post new notarization to chain (default 10 min at any blocktime)\n \"eras\"     : \"objarray\",  (array, optional) data specific to each era, maximum 3\n {\n  \"reward\"   : n,       (int64, required) native initial block rewards in each period\n  \"decay\"   : n,       (int64, optional) reward decay for each era\n  \"halving\"  : n,       (int,  optional) halving period for each era\n  \"eraend\"   : n,       (int,  optional) ending block of each era\n}\n\"nodes\"     : \"[obj, ..]\", (objectarray, optional) up to 5 nodes that can be used to connect to the blockchain\n [{\n  \"networkaddress\" : \"ip:port\", (string, optional) internet, TOR, or other supported address for node\n  \"nodeidentity\" : \"name@\",   (string, optional) published node identity\n }, .. ]\n}\n```\n#### Result:\n```json\n{\n \"txid\" : \"transactionid\",    (string) The transaction id\n \"tx\"  : \"json\",         (json)  The transaction decoded as a transaction\n \"hex\" : \"data\"         ", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], [" (string) Raw data for signed transaction\n}\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Examples:\n```bash\n> verus definecurrency jsondefinition\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"definecurrency\", \"params\": [jsondefinition] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `estimateconversion '{\"currency\":\"name\",\"convertto\":\"name\",\"amount\":n}'`\nThis estimates conversion from one currency to another, taking into account pending conversions, fees and slippage.#### Arguments\n```json\n{\n \"currency\": \"name\"    (string, required) Name of the source currency to send in this output, defaults to\n                        native of chain\n \"amount\":amount     (numeric, required) The numeric amount of currency, denominated in source currency\n \"convertto\":\"name\",   (string, optional) Valid currency to convert to, either a reserve of a fractional, or fractional\n \"preconvert\":\"false\",  (bool, optional)  Convert to currency at market price (default=false), only works if\n                        transaction is mined before start of currency\n \"via\":\"name\",      (string, optional) If source and destination currency are reserves, via is a common fractional\n                        to convert through\n}\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result\n```json\n{\n \"inputcurrencyid\": iaddress          i-address of source currency\n \"netinputamount\": value            net amount in, after conversion fees in source cu$\n \"outputcurrencyid\": iaddress          i-address of destination currency\n \"estimatedcurrencyout\": value         estimated amount out in destination currency\n \"estimatedcurrencystate\": object        Estimation of all currency values, including pric$\n}\n```#### Examples:\n```bash\n> verus estimateconversion '{\"currency\":\"name\",\"convertto\":\"name\",\"amount\":n}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"estimateconversion\", \"params\": ['{\"currency\":\"name\",\"convertto\":\"name\",\"amount\":n}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getbestproofroot '{\"proofroots\":[\"version\":n,\"type\":n,\"systemid\":\"currencyidorname\",\"height\":n, \"stateroot\":\"hex\",\"blockhash\":\"hex\",\"power\":\"hex\"],\"lastconfirmed\":n}'`\nDetermines and returns the index of the best (most recent, valid, qualified) proof root in the list of proof roots,\nand the most recent, valid proof root.#### Arguments\n```json\n{\n \"proofroots\":         (array, required/may be empty) ordered array of proof roots, indexed on return\n [\n  {\n   \"version\":n        (int, required) version of this proof root data structure\n   \"type\":n          (int, required) type of proof root (chain or system specific)\n   \"systemid\":\"hexstr\"    (hexstr, required) system the proof root is for\n   \"height\":n         (uint32_t, required) height of this proof root\n   \"stateroot\":\"hexstr\"    (hexstr, required) Merkle or merkle-style tree root for the specified block/sequence\n   \"blockhash\":\"hexstr\"    (hexstr, required) hash identifier for the specified block/sequence\n   \"power\":\"hexstr\"      (hexstr, r", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["equired) work, stake, or combination of the two for most-work/most-power rule\n  }\n .\n .\n .\n ]\n \"currencies\":[\"id1\"]     (array, optional) currencies to query for currency states\n \"lastconfirmed\":n       (int, required) index into the proof root array indicating the last confirmed root}\n```\n#### Result:\n\"bestindex\"           (int) index of best proof root not confirmed that is provided, confirmed index, or -1\"latestproofroot\"\n                 (object) latest valid proof root of chain\"currencystates\"\n                 (int) currency states of target currency and published bridges\nExamples:\n```bash\n> verus getbestproofroot \"{\"proofroots\":[\"version\":n,\"type\":n,\"systemid\":\"currencyidorname\",\"height\":n,\"stateroot\":\"hex\",\"blockhash\":\"hex\",\"power\":\"hex\"],\"lastconfirmed\":n}\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestproofroot\", \"params\": [\"{\"proofroots\":[\"version\":n,\"type\":n,\"systemid\":\"currencyidorname\",\"height\":n,\"stateroot\":\"hex\",\"blockhash\":\"hex\",\"power\":\"hex\"],\"lastconfirmed\":n}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `getcurrency \"currencyname\"`\nReturns a complete definition for any given chain if it is registered on the blockchain. If the chain requested is NULL, chain definition of the current chain is returned.#### Arguments:\n```\n1. \"currencyname\"           (string, optional) name of the chain to look for. no parameter returns current chain in daemon.\n```\n#### Result:\n```json\n{\n \"version\" : n,             (int) version of this chain definition\n \"name\" : \"string\",           (string) name or symbol of the chain, same as passed\n \"fullyqualifiedname\" : \"string\",    (string) name or symbol of the chain with all parent namespaces, separated by \".\"\n \"currencyid\" : \"i-address\",      (string) string that represents t", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["he currency ID, same as the ID behind the currency\n \"currencyidhex\" : \"hex\",        (string) hex representation of currency ID, getcurrency API supports \"hex:currencyidhex\"\n \"parent\" : \"i-address\",        (string) parent blockchain ID\n \"systemid\" : \"i-address\",       (string) system on which this currency is considered to run\n \"launchsystemid\" : \"i-address\",    (string) system from which this currency was launched\n \"notarizationprotocol\" : n       (int) protocol number that determines variations in cross-chain or bridged notarizations\n \"proofprotocol\" : n          (int) protocol number that determines variations in cross-chain or bridged proofs\n \"startblock\" : n,           (int) block # on this chain, which must be notarized into block one of the chain\n \"endblock\" : n,            (int) block # after which, this chain's useful life is considered to be over\n \"currencies\" : \"[\"i-address\", ...]\",  (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket\n \"weights\" : \"[n, ...]\",        (numberarray) relative currency weights (only returned for a liquidity basket)\n \"conversions\" : \"[n, ...]\",      (numberarray) pre-launch conversion rates for non-fractional currencies\n \"minpreconversion\" : \"[n, ...]\",    (numberarray) minimum amounts required in pre-conversions for currency to launch\n \"currencies\" : \"[\"i-address\", ...]\",  (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket\n \"currencynames\" : \"{\"i-address\":\"fullname\",...}\", (obj) i-addresses mapped to fully qualified names of all sub-currencies\n \"initialsupply\" : n,          (number) initial currency supply for fractional currencies before preallocation or issuance\n \"prelaunchcarveout\" : n,        (number) pre-launc", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["h percentage of proceeds for fractional currency sent to launching ID\n \"preallocations\" : \"[{\"i-address\":n}, ...]\", (objarray) VerusIDs and amounts for pre-allocation at launch\n \"initialcontributions\" : \"[n, ...]\",  (numberarray) amounts of pre-conversions reserved for launching ID\n \"idregistrationfees\" : n,       (number) base cost of IDs for this currency namespace in this currency\n \"idreferrallevels\" : n,        (int) levels of ID referrals (only for native PBaaS chains and IDs)\n \"idimportfees\" : n,          (number) fees required to import an ID to this system (only for native PBaaS chains and IDs)\n \"eras\" : \"[obj, ...]\",         (objarray) different chain phases of rewards and convertibility\n {\n  \"reward\" : \"[n, ...]\",        (int) reward start for each era in native coin\n  \"decay\" : \"[n, ...]\",        (int) exponential or linear decay of rewards during each era\n  \"halving\" : \"[n, ...]\",       (int) blocks between halvings during each era\n  \"eraend\" : \"[n, ...]\",        (int) block marking the end of each era\n  \"eraoptions\" : \"[n, ...]\",      (int) options (reserved)\n }\n \"nodes\"   : \"[obj, ..]\",  (objectarray, optional) up to 8 nodes that can be used to connect to the blockchain   [{\n    \"nodeidentity\" : \"txid\", (string, optional) internet, TOR, or other supported address for node\n    \"paymentaddress\" : n,   (int,   optional) rewards payment address\n   }, .. ]\n \"lastconfirmedcurrencystate\" : {\n  }\n \"besttxid\" : \"txid\"\n  }\n \"confirmednotarization\" : {\n  }\n \"confirmedtxid\" : \"txid\"\n}\n```\nExamples:\n```bash\n> verus getcurrency \"chainname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrency\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `getcurrencyconverters \"currency1\" \"currency2\" ... | 'json object'`\nRetrieves all currencies that have at least 1000 VRSC in reserve, are >10% VRSC reserve ratio, and have all listed currencies as reserves", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n\"currencyname\"          : \"string\" ... (string(s), one or more) all selected currencies are returned with their current state\n\"paramobject\"           : \"object\" ... (one or more parameters) advanced query with slippage options\n```json\n    {\n      \"convertto\":\"destcurrency\"       \"string\"        target currency\n      \"fromcurrency\":\"sourcecurrency\" | [...] \"string\" | object array (string(s), one or more) currencies to convert from\n      \"targetprice\":n | [n,...]        \"number(s)\" ...     (number(s), one or more) target price within slippage required\n      \"amount\":n               \"number\"        (number) amount of tocurrency needed\n      \"slippage\":n              \"number\"        (number) max slippage with no other conversions max is 50000000 == 50%\n    }\n```\nResult:\n```json\n\"[{currency1}, {currency2}]\" : \"array of objects\" (string) All currencies, last currency state, and last amount to convert if amount specified\n```\nExamples:\n```bash\n> verus getcurrencyconverters '[\"currency1\",\"currency2\",...]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrencyconverters\", \"params\": ['[\"currency1\",\"currency2\",...]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getcurrencystate \"currencynameorid\" (\"n | m,n | m,n,o\") (\"connectedsystemid\")`\nReturns the total amount of preconversions that have been confirmed on the blockchain for the specified chain.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1.  \"currencynameorid\"       (string) name or i-address of currency in question\n2.  \"n\" or \"m,n\" or \"m,n,o\"     (int or string, optional) height or inclusive range with optional step at which to get the currency state. If not specified, the latest currency state and height is returned\n3.  \"connectedchainid\"       (string) optional#### Result:\n```json\n[\n {\n   \"height\": n,\n   \"blocktime\": n,\n   \"currencystate\": {\n    \"flags\" : n,\n    \"initialratio\" : n,\n    \"initialsupply\" : n,\n    \"emitted\" : n,\n    \"supply\" : n,\n    \"reserve\" : n,\n    \"currentratio\" : n,\n   }\n  },\n]\n```\nExamples:\n```bash\n> verus getcurrencystate \"currencynameorid\" (\"n\") (\"connectedchainid\")\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrencystate\", \"params\": [\"currencynameorid\" (\"n\") (\"connectedchainid\")] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getcurrencytrust '[\"currencyid\",...]'`#### Arguments\n```json\n\"[\"currencyid\",...]\"                 (strarray, optional) if specified, only returns rating values for specified currencies, otherwise all\n```#### Result\n```json\n{\n \"setratings\":{\"id\":JSONRatingObject,...},     (jsonobj) an ID/ratings key/value object\n \"currencytrustmode\":<n>              (int) 0 = no restriction on sync, 1 = only sync to IDs rated approved, 2 = sync to all IDs but those on block list\n}\n```#### Examples:\n```bash\n> verus getcurrencytrust '[\"currencyid\",...]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrencytrust\", \"params\": ['[\"currencyid\",...]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getexports \"chainname\" (heightstart) (heightend)`\nReturns pending export transfers to the specified currency from start height to end height if specified", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### Arguments:\n```\n1. \"chainname\"           (string, optional) name of the chain to look for. no parameter returns current chain in daemon.\n2. \"heightstart\"          (int, optional)   default=0 only return exports at or above this height\n3. \"heightend\"           (int, optional)   dedfault=maxheight only return exports below or at this height", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["```\n#### Result:\n```json\n[\n {\n  \"blockheight\": n,          (numeric) block height\n  \"exportid\": \"hash\",         (hexstring) transaction ID\n  \"description\": {\n   \"version\": n,           (int) version of this chain definition\n   \"exportcurrencyid\": \"xxxx\",    (text) i-address of the currency ID\n   \"numinputs\": n,          (numeric) Amount of inputs in this export\n   \"totalamounts\": {\n    \"xxxx\": xxx.xxxxxxxx,      (text) i-address of the currency ID, (numeric) the total value of the export\n                     of the currency\n    ....\n   },\n   \"totalfees\": {\n    \"xxxx\": xxx.xxxxxxxx,      (text) i-address of the currency ID, (numeric) the total fees for the export\n                     of the currency\n    ....\n   }\n  },\n  \"transfers\": [\n   {\n    \"version\": n,          (int) version of this chain definition\n    \"currencyid\": \"xxxx\",      (text) i-address of the currency ID\n    \"value\": n,           (numeric) the value this transaction\n    \"flags\": n,           (hex) flags for the currency\n    \"preconvert\": true|false,    (boolean) Shows whether the transaction is a preconversion\n    \"fees\": xxx.xxxxxxxx,      (numeric) the fees for this transaction\n    \"destinationcurrencyid\": \"xxxx\", (text) i-address of the currency ID\n    \"destination\": \"xxxx\"      (text) address of the transaction\n   },\n   ....\n  ]\n },\n {},\n ...\n]\n```\nExamples:\n```bash\n> verus getexports \"chainname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getexports\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `getimports \"chainname\" (startheight) (endheight)`\nReturns all imports into a specific currency, optionally that were imported between a specific block range.\n#### Arguments:\n```\n1. \"chainname\"           (string, optional) name of the chain to look for. no parameter returns current chain in daemon.\n2. \"heightstart\"          (int, optional)   default=0 only return exports at or above this height\n3. \"heightend\"           (int, optional)   default=maxheight only return exports below or at this height", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["```\n#### Result:\n```json\n[\n {\n  \"blockheight\": n,          (numeric) block height\n  \"importid\": \"hash\",         (hexstring) transaction ID\n  \"description\": {\n   \"version\":n,            (int) version of this chain definition\n   \"sourcesystemid\": \"xxxx\",     (text) i-address of the source system\n   \"importcurrencyid\": \"xxxx\",    (text) i-address of the currency ID\n   \"valuein\": {\n    \"xxxx\": xxx.xxxxxxxx,      (text) i-address of the currency ID, (numeric) the total value of the import\n                     of the currency\n    ....\n   },\n   \"tokensout\": {\n    \"xxxx\": xxx.xxxxxxxx,      (text) i-address of the currency ID, (numeric) the total value of the import\n                     into the currency into this currency\n   }\n  },\n  \"transfers\": [\n   {\n    \"version\": n,          (int) version of this chain definition\n    \"currencyid\": \"xxxx\",      (text) i-address of the currency ID\n    \"value\": n,           (numeric) the value this transaction\n    \"flags\": n,           (hex) flags for the currency\n    \"preconvert\": true|false,    (boolean) Shows whether the transaction is a preconversion\n    \"fees\": xxx.xxxxxxxx,      (numeric) the fees for this transaction\n    \"destinationcurrencyid\": \"xxxx\", (text) i-address of the currency ID\n    \"destination\": \"xxxx\"      (text) address of the transaction\n   },\n   ....\n   }\n  ]\n },\n {},\n ...\n]\n```\nExamples:\n```bash\n> verus getimports \"chainname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getimports\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `getinitialcurrencystate \"name\"`\nReturns the total amount of preconversions that have been confirmed on the blockchain for the specified PBaaS chain.\nThis should be used to get information about chains that are not this chain, but are being launched by it.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n```\n  \"name\"          (string, required) name or chain ID of the chain to get the export transactions for\n```\n#### Result:\n```json\n{\n \"flags\": n,           (hex) flags for the currency\n \"currencyid\": \"xxxx\",      (text) i-address of the currency ID\n \"reservecurrencies\": [\n  {\n\t\t \"currencyid\": \"xxxx\",    (text) i-address of the currency ID\n\t\t \"weight\": n,         (numeric) The weight of this currence\n\t\t \"reserves\": xxx.xxxxxxxx,  (numeric) The initial amount of this currency in reserve\n\t\t \"priceinreserve\": n     (numeric) The initial conversion rate of this reserve currency\n  }\n ],\n \"initialsupply\" : xxx.xxxxxxxx, (numeric) The initial supply of this currency\n \"emitted\" : xxx.xxxxxxx,     (numeric) The currently emitted coins of this currency\n \"supply\" : xxx.xxxxxxxx,     (numeric) The current supply of this currency\n \"currencies\": {\n  \"xxxx\": {           (text) i-address of the currency ID\n \t \"reservein\": xxx.xxxxxxxx,   \n \t \"nativein\": xxx.xxxxxxxx,\n \t \"reserveout\": xxx.xxxxxxxx,\n \t \"lastconversionprice\": xxx.xxxxxxxx,\n \t \"viaconversionprice\": xxx.xxxxxxxx,\n \t \"fees\": xxx.xxxxxxxx,\n \t \"conversionfees\": xxx.xxxxxxxx,\n   \"priorweights\": xxx.xxxxxxxx\n  },{\n   ...\n  },\n  \"primarycurrencyfees\": xxx.xxxxxxx,\n  \"primarycurrencyconversionfees\": xxx.xxxxxxx,\n  \"primarycurrencyout\": xxx.xxxxxxx,\n  \"preconvertedout\": xxx.xxxxxxx\n}\n```\nExamples:\n```bash\n> verus getinitialcurrencystate name\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinitialcurrencystate\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getlastimportfrom \"systemname\"`\nReturns the last import from a specific originating system.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n```\n  \"systemname\"        (string, required) name or ID of the system to retrieve the last import from\n```\n#### Result:\n```json\n{\n  \"lastimport\" :         (object) last import from the indicated system on this chain\n   {\n   }\n  \"lastconfirmednotarization\" :  (object) last confirmed notarization of the indicated system on this chain\n   {\n   }\n}\n```\nExamples:\n```bash\n> verus getlastimportfrom \"systemname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlastimportfrom\", \"params\": \"systemname\" }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getlaunchinfo \"currencyid\"`\nReturns the launch notarization data and partial transaction proof of the launch notarization for the specifed currencyid.#### Arguments:\n1. \"currencyid\"         (string, required) the hex-encoded ID or string name search for notarizations on#### Result:\n```json\n{\n \"currencydefinition\" : {},   (json) Full currency definition\n \"txid\" : \"hexstr\",       (hexstr) transaction ID\n \"voutnum\" : \"n\",        (number) vout index of the launch notarization\n \"transactionproof\" : {},    (json) Partial transaction proof of the launch transaction and output\n \"launchnotarization\" : {},   (json) Final CPBaaSNotarization clearing launch or refund\n \"notarynotarization\" : {},   (json) Current notarization of this chain\n}\n```Examples:\n```bash\n> verus getlaunchinfo \"currencyid\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlaunchinfo\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getnotarizationdata \"currencyid\" (getevidence) (separatecounterevidence)`\nReturns the latest PBaaS notarization data for the specifed currencyid.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Arguments\n```\n1. \"currencyid\"         (string, required) the hex-encoded ID or string name search for notarizations on\n2. \"(getevidence)\" \t      (bool, optional)  if true, returns notarization evidence as well as other data\n3. \"(separatecounterevidence)\"  (bool, optional)  if true, counter-evidence is processed and returned with proofroots\n```\n#### Result:\n```json\n{\n \"version\" : n,         (numeric) The notarization protocol version\n}\n```\nExamples:\n```bash\n> verus getnotarizationdata \"currencyid\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationdata\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getnotarizationproofs {json object}`\nReturns proofs to a caller for requested challenges. Some proofs can either independently or in combination\nwith other proofs over time invalidate or force a competing chain to provide more proofs in order to confirm\nany pending cross-chain notarization of an alternate chain that may not agree with us.* It is not valid to have a challenge request with both confirmnotarization and confirmroot.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n \"challengerequests\"      (array, required) one or more challenge requests for unconfirmed notarizations on a bridged system\n```json\n[\n {\n  \"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\",\n  \"evidence\":{CNotaryEvidence},\n  \"entropyhash\":\"hex\",\n  \"proveheight\":n,\n  \"atheight\":n\n },\n {\"type\":\"vrsc::evidence.primaryproof\" || \"iKDesmiEkEjDG61nQSZJSGhWvC8x8xA578\",\n   \"priornotarizationref\":{CUTXORef} || \"priorroot\":{CProofRoot\n },\n \"challengeroots\":\n [\n  {\n   \"indexkey\":{object},\n   \"proofroot\":{CProofRoot}\n  },\n ...\n ],\n \"evidence\":{CNotaryEvidence},\n \"entropyhash\":\"hex\",\n \"confirmnotarization\":{newnotarization}, |\n \"confirmroot\":{CPRoofRoot}},\n \"fromheight\":n,\n \"toheight\":n},\n ...\n]\n```\n#### Results:\n```json\n{\"evidence\":[{CNotaryEvidence}, ...]  (array) notary evidence challenges, including proofs for challenges requested\n```\n#### Examples:\n```bash\n> verus getnotarizationproofs '[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationproofs\", \"params\": [[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `getpendingtransfers \"chainname\"`\nReturns all pending transfers for a particular chain that have not yet been aggregated into an export.\n#### Arguments:\n```\n1. \"chainname\"           (string, optional) name of the chain to look for. no parameter returns current chain in daemon.\n```\n#### Result:\n```json\n {\n }\n```\nExamples:\n```bash\n> verus getpendingtransfers \"chainname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpendingtransfers\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getreservedeposits \"currencyname\"`\nReturns all deposits under control of the specified currency or chain. If the currency is of an external system\nor chain, all deposits will be under the control of that system or chain only, not its independent currencies.#### Arguments:\n1. \"currencyname\"    (string, optional) full name or i-ID of controlling currency#### Result:\n```json\n {\n }\n```\nExamples:\n```bash\n> verus getreservedeposits \"currencyname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreservedeposits\", \"params\": [\"currencyname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getsaplingtree \"n | m,n | m,n,o\"`\nReturns the entries for a light wallet Sapling tree state.#### Arguments:\n1. \"n\" or \"m,n\" or \"m,n,o\"     (int or string, optional) height or inclusive range with optional step at which to get the Sapling tree state. If not specified, the latest currency state and height is returned", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json\n  [\n    {\n      \"network\": \"VRSC\",\n      \"height\": n,\n      \"hash\": \"hex\"\n      \"time\": n,\n      \"tree\": \"hex\"\n    },\n  ]\n```\nExamples:\n```bash\n> verus getsaplingtree name\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getsaplingtree\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `listcurrencies ({query object}) startblock endblock`\nReturns a complete definition for any given chain if it is registered on the blockchain. If the chain requested is NULL, chain definition of the current chain is returned.#### Arguments:\n```json\n{                      (json, optional) specify valid query conditions\n  \"launchstate\" :              (\"prelaunch\" | \"launched\" | \"refund\" | \"complete\") (optional) return only currencies in that state\n  \"systemtype\" :              (\"local\" | \"imported\" | \"gateway\" | \"pbaas\")\n  \"fromsystem\" :              (\"systemnameeorid\") default is the local chain, but if currency is from another system, specify here\n  \"converter\": [\"currency1\", (\"currency2\")] (array, optional) default empty, only return fractional currency converters of one or more currencies\n}\n```\n#### Result:\n```json\n[\n {\n  \"version\" : n,             (int) version of this chain definition\n  \"name\" : \"string\",           (string) name or symbol of the chain, same as passed\n  \"fullyqualifiedname\" : \"string\",    (string) name or symbol of the chain with all parent namespaces, separated by \".\"\n  \"currencyid\" : \"i-address\",      (string) string that represents the currency ID, same as the ID behind the currency\n  \"currencyidhex\" : \"hex\",        (string) hex representation of currency ID, getcurrency API supports \"hex:currencyidhex\"\n  \"parent\" : \"i-addres", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["s\",        (string) parent blockchain ID\n  \"systemid\" : \"i-address\",       (string) system on which this currency is considered to run\n  \"launchsystemid\" : \"i-address\",    (string) system from which this currency was launched\n  \"notarizationprotocol\" : n       (int) protocol number that determines variations in cross-chain or bridged notarizations\n  \"proofprotocol\" : n          (int) protocol number that determines variations in cross-chain or bridged proofs\n  \"startblock\" : n,           (int) block # on this chain, which must be notarized into block one of the chain\n  \"endblock\" : n,            (int) block # after which, this chain's useful life is considered to be over\n  \"weights\" : \"[n, ...]\",        (numberarray) relative currency weights (only returned for a liquidity basket)\n  \"conversions\" : \"[n, ...]\",      (numberarray) pre-launch conversion rates for non-fractional currencies\n  \"minpreconversion\" : \"[n, ...]\",    (numberarray) minimum amounts required in pre-conversions for currency to launch\n  \"currencies\" : \"[\"i-address\", ...]\",  (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket\n  \"currencynames\" : \"{\"i-address\":\"fullname\",...}\", (obj) i-addresses mapped to fully qualified names of all sub-currencies\n  \"initialsupply\" : n,          (number) initial currency supply for fractional currencies before preallocation or issuance\n  \"prelaunchcarveout\" : n,        (number) pre-launch percentage of proceeds for fractional currency sent to launching ID\n  \"preallocations\" : \"[{\"i-address\":n}, ...]\", (objarray) VerusIDs and amounts for pre-allocation at launch\n  \"initialcontributions\" : \"[n, ...]\",  (numberarray) amounts of pre-conversions reserved for launching ID\n  \"idregistrationfees\" : n, ", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["      (number) base cost of IDs for this currency namespace in this currency\n  \"idreferrallevels\" : n,        (int) levels of ID referrals (only for native PBaaS chains and IDs)\n  \"idimportfees\" : n,          (number) fees required to import an ID to this system (only for native PBaaS chains and IDs)\n  \"eras\" : \"[obj, ...]\",         (objarray) different chain phases of rewards and convertibility\n  {\n   \"reward\" : \"[n, ...]\",        (int) reward start for each era in native coin\n   \"decay\" : \"[n, ...]\",        (int) exponential or linear decay of rewards during each era\n   \"halving\" : \"[n, ...]\",       (int) blocks between halvings during each era\n   \"eraend\" : \"[n, ...]\",        (int) block marking the end of each era\n   \"eraoptions\" : \"[n, ...]\",      (int) options (reserved)\n  }\n  \"nodes\"   : \"[obj, ..]\",      (objectarray, optional) up to 8 nodes that can be used to connect to the blockchain   [{\n     \"nodeidentity\" : \"txid\",     (string, optional) internet, TOR, or other supported address for node\n     \"paymentaddress\" : n,       (int,   optional) rewards payment address\n    }, .. ]\n  \"lastconfirmedcurrencystate\" : {\n   }\n  \"besttxid\" : \"txid\"\n   }\n  \"confirmednotarization\" : {\n   }\n  \"confirmedtxid\" : \"txid\"\n }, ...\n]\n```\nExamples:\n```bash\n> verus listcurrencies true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listcurrencies\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `refundfailedlaunch \"currencyid\"`\nRefunds any funds sent to the chain if they are eligible for refund.\nThis attempts to refund all transactions for all contributors.\n#### Arguments:\n```\n\"currencyid\"      (hex or chain name, required) the chain to refund contributions to\n```\n#### Result:\nExamples:\n```bash\n> verus refundfailedlaunch \"currencyid\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"refundfailedlaunch\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `sendcurrency \"fromaddress\" '[{\"address\":... ,\"amount\":...},...]' (minconfs) (feeamount) (returntxtemplate)`\nThis sends one or many Verus outputs to one or many addresses on the same or another chain.\nFunds are sourced automatically from the current wallet, which must be present, as in sendtoaddress.\nIf \"fromaddress\" is specified, all funds will be taken from that address, otherwise funds may come from any source set of UTXOs controlled by the wallet.\n#### Arguments:\n1. \"fromaddress\"       (string, required) The VerusID or address to send the funds from. \"\\*\", \"R\\*\" and \"i\\*\" wildcards are supported. Also `\"idname@:private\"` can be used to source from a balance of a private address attached to ", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["an ID.\n2. \"outputs\"         (array, required) An array of json objects representing currencies, amounts, and destinations to send.\n  ```json\n  [{\n   \"currency\": \"name\"   (string, required) Name of the source currency to send in this output, defaults to native of chain\n   \"amount\":amount    (numeric, required) The numeric amount of currency, denominated in source currency\n   \"convertto\":\"name\",  (string, optional) Valid currency to convert to, either a reserve of a fractional, or fractional\n   \"exportto\":\"name\",   (string, optional) Valid chain or system name or ID to export to\n   \"exportid\":\"false\",  (bool,  optional) if cross-chain ID, export the ID to the destination chain (will cost to export)\n   \"exportcurrency\":\"false\", (bool, optional) if cross-chain export, export the currency definition (will cost to export)\n   \"feecurrency\":\"name\", (string, optional) Valid currency that should be pulled from the current wallet and used to pay fee\n   \"via\":\"name\",     (string, optional) If source and destination currency are reserves, via is a common fractional to convert through\n   \"address\":\"dest\"    (string, required) The address and optionally chain/system after the \"@\" as a system specific destination\n   \"refundto\":\"dest\"   (string, optional) For pre-conversions, this is where refunds will go, defaults to fromaddress\n   \"memo\":memo      (string, optional) If destination is a zaddr (not supported on testnet), a string message (not hexadecimal) to include.\n   \"preconvert\":\"false\", (bool,  optional) convert to currency at market price (default=false), only works if transaction is mined before start of currency\n   \"burn\":\"false\",    (bool,  optional) destroy the currency and subtract it from the supply. Currency must be a token.\n   \"mintnew\":\"false\",   (bool,  optional) ", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["if the transaction is sent from the currency ID of a centralized currency, this creates new currency to send\n  }, ... ]\n  ```\n3. \"minconf\"         (numeric, optional, default=1) only use funds confirmed at least this many times.\n4. \"feeamount\"        (numeric, optional) specific fee amount requested instead of default miner's fee.\n5. \"returntxtemplate     (boolean, optional, default false) if true, returns transaction info without submitting the transaction to the chain.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n1. \"operationid\"     (string) An operationid to pass to z_getoperationstatus to get the result of the operation.\n2. If (returntxtemplate) is true  \n```json\n {\n  \"outputtotals\" : {currencyvaluemap}  Total outputs in all currencies the need to be input to the transaction\n  \"hextx\" : \"hexstring\"         The transaction with all specified outputs and no inputs\n }\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Examples:\n```bash\n> verus sendcurrency \"*\" '[{\"currency\":\"btc\",\"address\":\"RRehdmUV7oEAqoZnzEGBH34XysnWaBatct\" ,\"amount\":500.0},...]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendcurrency\", \"params\": [\"bob@\", [{\"currency\":\"btc\", \"address\":\"alice@quad\", \"amount\":500.0},...]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `setcurrencytrust '{\"clearall\": bool, \"setratings\":[{\"currencyid\":JSONRatingObject},...], \"removeratings\":[\"currencyid\",...], \"currencytrustmode\":<n>}`\n#### Arguments\n```json\n{\n \"clearall\": bool                  (bool, optional) clears all wallet currency trust lists before adding, removing, or trust mode operations\n \"setratings\":[{\"currencyid\":JSONRatingObject},...] (objarray, optional) replaces ratings for specified currencies with those given\n \"removeratings\":[\"currencyid\",...]         (strarray, optional) erases ratings for currencies specified\n \"currencytrustmode\": <n>              (number, optional) 0 = spend/list all currencies, 1 = only spend/list those rated approved, 2 = spend/list all but those on block list\n}\n```\n#### Result\nno return on success, else error### `submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\"`\nFinishes an almost complete notarization transaction based on the notary chain and the current wallet or pubkey.If successful in submitting the transaction based on all rules, a transaction ID is returned, otherwise, NULL.#### Arguments:\n\"earnednotarization\"       (object, required) notarization earned on the other system, which is the basis for this\n\"notaryevidence\"         (object, required) evidence and notary signatures validating the notarization#### Result:\ntxid               (hexstring) transaction ID of submitted transaction", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Examples:\n```bash\n> verus submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitacceptednotarization\", \"params\": [\"{earnednotarization}\" \"{notaryevidence}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `submitchallenges [json array]`\nSubmits one or more cryptographic challenges to existing, unconfirmed notarizations, proving the existence\nof an alternate chain. Whether the alternate chain has more power than the chain with a pending notarization\nis not required, only that it has moved forward multiple blocks since the prior notarization.Requires that the local wallet have funds for fees.#### Arguments:\n\"challenges\"         (array, required) one or more challenges to unconfirmed notarizations on this system\n```json\n[\n {\n  \"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\" ||\n            \"type\":\"vrsc::evidence.validitychallenge\" || \"iCPb8ywQna7jYV2SHrGZ6vQMj7kuyWFxvb\",\n  \"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\n  \"forkroot\":{},\n  \"challengeroot\":{},\n  \"evidence\":{}\n },\n {...},\n  ...\n]\n```#### Result:\n```json\n[{\"txid\":\"hex\"}, {\"error\":\"errorstring\"}, ...]  (array) results of submitted challenge transactions\n```#### Examples:\n```bash\n> verus submitchallenges '[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitchallenges\", \"params\": [[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `submitimports '{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", Fresendw\"transfers\": [{transfer1}, {transfer2},...]}, ...]}'`\nAccepts a set of exports from another system to post to the VRSC network.#### Arguments:\n```json\n {\n  \"sourcesystemid\":\"systemid\"    ()\n  \"notarizationtxid\":\"txid\"     ()\n  \"notarizationtxoutnum\":n       ()\n  \"exports\": [{\n    \"height\": n,\n    \"txid\": \"hexid\",\n    \"txoutnum\": n,\n    \"partialtransactionproof\": \"hexstr\",\n    \"transfers\": [{transfer1}, {transfer2},...]\n  }, ...]\n }\n```\n#### Result:\n```json\n [{\n   \"currency\": \"currencyid\"\n   \"txid\": \"hexid\",\n   \"txoutnum\": n\n }, ...]\n```\nExamples:\n```bash\n> verus submitimports {\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]}\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitimports\", \"params\": [{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `submitmergedblock \"hexdata\" ( \"jsonparametersobject\" )`\nAttempts to submit one more more new blocks to one or more networks.\nEach merged block submission may be valid for Verus and/or PBaaS merge mined chains.\nThe submitted block consists of a valid block for this chain, along with embedded headers of other PBaaS merge mined chains.\nIf the hash for this header meets targets of other chains that have been added with 'addmergedblock', this API will\nsubmit those blocks to the specified URL endpoints with an RPC 'submitmergedblock' request.\nAttempts to submit one or more new blocks to one or more networks.#### Arguments\n1. \"hexdata\"  (string, required) the hex-encoded block data to submit#### Results:\n```json\n  { rejected: \"reject reason\" }\n```\n Submission to our chain and PBaaS chains\n```json\n  { blockhash: \"hex\", accepted: true, pbaas_submissions: { \"Quantum\":\"chainID_hex\", ... } }\n```\n Submission to only PBaaS chains\n```json\n  { blockhash: \"hex\", accepted: \"pbaas\", pbaas_submissions: { \"Quantum\":\"chainID_hex\", ... } }\n```#### Examples:\n```bash\n> verus submitmergedblock \"mydata\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitmergedblock\", \"params\": [\"mydata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```## Network### `addnode \"node\" \"add|remove|onetry\"`\nAttempts add or remove a node from the addnode list.\nOr try a connection to a node once.#### Arguments:\n1. \"node\"   (string, required) The node (see getpeerinfo for nodes)\n2. \"command\" (string, required) 'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Examples:\n```bash\n> verus addnode \"192.168.0.6:8233\" \"onetry\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addnode\", \"params\": [\"192.168.0.6:8233\", \"onetry\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `clearbanned`\nClear all banned IPs.Examples:\n```bash\n> verus clearbanned\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"clearbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `disconnectnode \"node\"`\nImmediately disconnects from the specified node.#### Arguments:\n1. \"node\"   (string, required) The node (see getpeerinfo for nodes)Examples:\n```bash\n> verus disconnectnode \"192.168.0.6:8233\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"disconnectnode\", \"params\": [\"192.168.0.6:8233\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getaddednodeinfo dns ( \"node\" )`\nReturns information about the given added node, or all added nodes (note that onetry addnodes are not listed here)\nIf dns is false, only a list of added nodes will be provided, otherwise connected information will also be available.#### Arguments:\n1. dns    (boolean, required) If false, only a list of added nodes will be provided, otherwise connected information will also be available.\n2. \"node\"  (string, optional) If provided, return information about this specific node, otherwise all nodes are returned.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```\n[\n {\n  \"addednode\" : \"192.168.0.201\",     (string) The node ip address\n  \"connected\" : true|false,        (boolean) If connected\n  \"addresses\" : [\n    {\n     \"address\" : \"192.168.0.201:27485\", (string) The Verus server host and port\n     \"connected\" : \"outbound\"      (string) connection, inbound or outbound\n    }\n    ,...\n   ]\n }\n ,...\n]\n```\nExamples:\n```bash\n> verus getaddednodeinfo true\n> verus getaddednodeinfo true \"192.168.0.201\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddednodeinfo\", \"params\": [true, \"192.168.0.201\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getconnectioncount`\nReturns the number of connections to other nodes.#### Result:\nn     (numeric) The connection countExamples:\n```bash\n> verus getconnectioncount\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getconnectioncount\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getdeprecationinfo`\nReturns an object containing current version and deprecation block height. Applicable only on mainnet.#### Result:\n```json\n{\n \"version\": xxxxx,           (numeric) the server version\n \"subversion\": \"/MagicBean:x.y.z[-v]/\",   (string) the server subversion string\n \"deprecationheight\": xxxxx,      (numeric) the block height at which this version will deprecate and shut down\n}\n```\nExamples:\n```bash\n> verus getdeprecationinfo\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getdeprecationinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getnettotals`\nReturns information about network traffic, including bytes in, bytes out,\nand current time.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json\n{\n \"totalbytesrecv\": n,  (numeric) Total bytes received\n \"totalbytessent\": n,  (numeric) Total bytes sent\n \"timemillis\": t    (numeric) Total cpu time\n}\n```\nExamples:\n```bash\n> verus getnettotals\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnettotals\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getnetworkinfo`\nReturns an object containing various state info regarding P2P networking.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json\n{\n \"version\": xxxxx,           (numeric) the server version\n \"subversion\": \"/MagicBean:x.y.z[-v]/\", (string) the server subversion string\n \"protocolversion\": xxxxx,       (numeric) the protocol version\n \"localservices\": \"xxxxxxxxxxxxxxxx\",  (string) the services we offer to the network\n \"timeoffset\": xxxxx,          (numeric) the time offset\n \"connections\": xxxxx,         (numeric) the number of connections\n \"networks\": [             (array) information per network\n {\n  \"name\": \"xxx\",            (string) network (ipv4, ipv6 or onion)\n  \"limited\": true|false,        (boolean) is the network limited using -onlynet?\n  \"reachable\": true|false,       (boolean) is the network reachable?\n  \"proxy\": \"host:port\"         (string) the proxy that is used for this network, or empty if none\n }\n ,...\n ],\n \"relayfee\": x.xxxxxxxx,        (numeric) minimum relay fee for non-free transactions in VRSC/kB\n \"localaddresses\": [          (array) list of local addresses\n {\n  \"address\": \"xxxx\",          (string) network address\n  \"port\": xxx,             (numeric) network port\n  \"score\": xxx             (numeric) relative score\n }\n ,...\n ]\n \"warnings\": \"...\"           (string) any network warnings (such as alert messages)\n}\n```\nExamples:\n```bash\n> verus getnetworkinfo\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnetworkinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getpeerinfo`\nReturns data about each connected network node as a json array of objects.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json\n[\n {\n  \"id\": n,            (numeric) Peer index\n  \"addr\":\"host:port\",      (string) The ip address and port of the peer\n  \"addrlocal\":\"ip:port\",     (string) local address\n  \"services\":\"xxxxxxxxxxxxxxxx\", (string) The services offered\n  \"lastsend\": ttt,        (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send\n  \"lastrecv\": ttt,        (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive\n  \"bytessent\": n,        (numeric) The total bytes sent\n  \"bytesrecv\": n,        (numeric) The total bytes received\n  \"conntime\": ttt,        (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)\n  \"timeoffset\": ttt,       (numeric) The time offset in seconds\n  \"pingtime\": n,         (numeric) ping time\n  \"pingwait\": n,         (numeric) ping wait\n  \"version\": v,         (numeric) The peer version, such as 170002\n  \"subver\": \"/MagicBean:x.y.z[-v]/\", (string) The string version\n  \"inbound\": true|false,     (boolean) Inbound (true) or Outbound (false)\n  \"startingheight\": n,      (numeric) The starting height (block) of the peer\n  \"banscore\": n,         (numeric) The ban score\n  \"synced_headers\": n,      (numeric) The last header we have in common with this peer\n  \"synced_blocks\": n,      (numeric) The last block we have in common with this peer\n  \"inflight\": [\n    n,             (numeric) The heights of blocks we're currently asking from this peer\n    ...\n  ]\n }\n ,...\n]\n```\nExamples:\n```bash\n> verus getpeerinfo\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `listbanned`\nList all banned IPs/Subnets.Examples:\n```bash\n> verus listbanned\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listbanned\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `ping`\nRequests that a ping be sent to all other nodes, to measure ping time.\nResults provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\nPing command is handled in queue with all other commands, so it measures processing backlog, not just network ping.Examples:\n```bash\n> verus ping\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"ping\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `setban \"ip(/netmask)\" \"add|remove\" (bantime) (absolute)`\nAttempts add or remove a IP/Subnet from the banned list.#### Arguments:\n1. \"ip(/netmask)\" (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)\n2. \"command\"   (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list\n3. \"bantime\"   (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\n4. \"absolute\"   (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)Examples:\n```bash\n> verus setban \"192.168.0.6\" \"add\" 86400\n> verus setban \"192.168.0.0/24\" \"add\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setban\", \"params\": [\"192.168.0.6\", \"add\" 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```## Rawtransactions", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,...} ( locktime ) ( expiryheight )`\nCreate a transaction spending the given inputs and sending to the given addresses.\nReturns hex-encoded raw transaction.\nNote that the transaction's inputs are not signed, and\nit is not stored in the wallet or transmitted to the network.#### Arguments:\n1. \"transactions\"    (string, required) A json array of json objects\n```json\n   [\n    {\n     \"txid\":\"id\",  (string, required) The transaction id\n     \"vout\":n    (numeric, required) The output number\n     \"sequence\":n  (numeric, optional) The sequence number\n    }\n    ,...\n   ]\n```\n2. \"addresses\"      (string, required) a json object with addresses as keys and amounts as values\n```json\n  {\n   \"address\": x.xxx  (numeric, required) The key is the Komodo address, the value is the VRSC amount\n   ,...\n  }\n```\n3. locktime       (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\n4. expiryheight     (numeric, optional, default=nextblockheight+20 (pre-Blossom) or nextblockheight+40 (post-Blossom)) Expiry height of transaction (if Overwinter is active)#### Result:\n\"transaction\"      (string) hex string of the transactionExamples\n```bash\n> verus createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":0.01}\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"{\\\"address\\\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `decoderawtransaction \"hexstring\"`\nReturn a JSON object representing the serialized, hex-encoded transaction.#### Arguments:\n1. \"hex\"   (string, required) The transaction hex string#### Result:\n```json\n{\n \"txid\" : \"id\",    (string) The transaction id\n \"o", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["verwintered\" : bool  (boolean) The Overwintered flag\n \"version\" : n,     (numeric) The version\n \"versiongroupid\": \"hex\"  (string, optional) The version group id (Overwintered txs)\n \"locktime\" : ttt,    (numeric) The lock time\n \"expiryheight\" : n,   (numeric, optional) Last valid block height for mining transaction (Overwintered txs)\n \"vin\" : [        (array of json objects)\n   {\n    \"txid\": \"id\",  (string) The transaction id\n    \"vout\": n,     (numeric) The output number\n    \"scriptSig\": {   (json object) The script\n     \"asm\": \"asm\", (string) asm\n     \"hex\": \"hex\"  (string) hex\n    },\n    \"sequence\": n   (numeric) The script sequence number\n   }\n   ,...\n ],\n \"vout\" : [       (array of json objects)\n   {\n    \"value\" : x.xxx,      (numeric) The value in VRSC\n    \"n\" : n,          (numeric) index\n    \"scriptPubKey\" : {     (json object)\n     \"asm\" : \"asm\",     (string) the asm\n     \"hex\" : \"hex\",     (string) the hex\n     \"reqSigs\" : n,      (numeric) The required sigs\n     \"type\" : \"pubkeyhash\", (string) The type, eg 'pubkeyhash'\n     \"addresses\" : [      (json array of string)\n      \"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\"  (string) komodo address\n      ,...\n     ]\n    }\n   }\n   ,...\n ],\n \"vjoinsplit\" : [    (array of json objects, only for version >= 2)\n   {\n    \"vpub_old\" : x.xxx,     (numeric) public input value in KMD\n    \"vpub_new\" : x.xxx,     (numeric) public output value in KMD\n    \"anchor\" : \"hex\",     (string) the anchor\n    \"nullifiers\" : [      (json array of string)\n     \"hex\"           (string) input note nullifier\n     ,...\n    ],\n    \"commitments\" : [      (json array of string)\n     \"hex\"           (string) ou", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["tput note commitment\n     ,...\n    ],\n    \"onetimePubKey\" : \"hex\", (string) the onetime public key used to encrypt the ciphertexts\n    \"randomSeed\" : \"hex\",   (string) the random seed\n    \"macs\" : [         (json array of string)\n     \"hex\"           (string) input note MAC\n     ,...\n    ],\n    \"proof\" : \"hex\",     (string) the zero-knowledge proof\n    \"ciphertexts\" : [      (json array of string)\n     \"hex\"           (string) output note ciphertext\n     ,...\n    ]\n   }\n   ,...\n ],\n}\n```\nExamples:\n```bash\n> verus decoderawtransaction \"hexstring\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decoderawtransaction\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `decodescript \"hex\"`\nDecode a hex-encoded script.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. \"hex\"   (string) the hex encoded script#### Result:\n```json\n{\n \"asm\":\"asm\",  (string) Script public key\n \"hex\":\"hex\",  (string) hex encoded public key\n \"type\":\"type\", (string) The output type\n \"reqSigs\": n,  (numeric) The required signatures\n \"addresses\": [  (json array of string)\n   \"address\"   (string) Komodo address\n   ,...\n ],\n \"p2sh\",\"address\" (string) script address\n}\n```\nExamples:\n```bash\n> verus decodescript \"hexstring\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decodescript\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `fundrawtransaction \"hexstring\" '[{\"txid\":\"8892b6c090b51a4eed7a61b72e9c8dbf5ed5bcd5aca6c6819b630acf2cb3fc87\",\"voutnum\":1},...]' (changeaddress) (explicitfee)`\nAdd inputs to a transaction until it has enough in value to meet its out value.\nThis will not modify existing inputs, and will add one change output to the outputs.\nNote that inputs which were signed may need to be resigned after completion since in/outputs have been added.\nThe inputs added will not be signed, use signrawtransaction for that.#### Arguments:\n1. \"hexstring\"  (string, required) The hex string of the raw transaction\n2. \"objectarray\"   (UTXO list, optional) UTXOs to select from for funding\n3. \"changeaddress\"  (string, optional)   Address to send change to if there is any\n4. \"explicitfee\"   (number, optional)   Offer this instead of the default fee only when using UTXO list#### Result:\n```json\n{\n \"hex\":    \"value\", (string) The resulting raw transaction (hex-encoded string)\n \"fee\":    n,     (numeric) The fee added to the transaction\n \"changepos\": n     (numeric) The position of the added change output, or -1\n}\n\"hex\"\n```\nExamples:", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Create a transaction with no inputs\n```bash\n> verus createrawtransaction \"[]\" \"{\\\"myaddress\\\":0.01}\"\n```\nAdd sufficient unsigned inputs to meet the output value\n```bash\n> verus fundrawtransaction \"rawtransactionhex\"\n```\nSign the transaction\n```bash\n> verus signrawtransaction \"fundedtransactionhex\"\n```\nSend the transaction\n```bash\n> verus sendrawtransaction \"signedtransactionhex\"\n```### `getrawtransaction \"txid\" ( verbose )`\nNOTE: By default this function only works sometimes. This is when the tx is in the mempool\nor there is an unspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option.Return the raw transaction data.If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.\nIf verbose is non-zero, returns an Object with information about 'txid'.#### Arguments:\n1. \"txid\"   (string, required) The transaction id\n2. verbose    (numeric, optional, default=0) If 0, return a string, other return a json objectResult (if verbose is not set or set to 0):\n\"data\"   (string) The serialized, hex-encoded data for 'txid'#### Result (if verbose > 0):\n```json\n{\n \"hex\" : \"data\",    (string) The serialized, hex-encoded data for 'txid'\n \"txid\" : \"id\",    (string) The transaction id (same as provided)\n \"version\" : n,     (numeric) The version\n \"locktime\" : ttt,    (numeric) The lock time\n \"expiryheight\" : ttt,  (numeric, optional) The block height after which the transaction expires\n \"vin\" : [        (array of json objects)\n   {\n    \"txid\": \"id\",  (string) The transaction id\n    \"vout\": n,     (numeric)\n    \"scriptSig\": {   (json object) The script\n     \"asm\": \"asm\", (string) asm\n     \"hex\": \"hex\"  (string) hex\n    },\n    \"sequence\": n   (numeric) The script sequence number\n   }\n   ,...\n ],\n \"v", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["out\" : [       (array of json objects)\n   {\n    \"value\" : x.xxx,      (numeric) The value in VRSC\n    \"n\" : n,          (numeric) index\n    \"scriptPubKey\" : {     (json object)\n     \"asm\" : \"asm\",     (string) the asm\n     \"hex\" : \"hex\",     (string) the hex\n     \"reqSigs\" : n,      (numeric) The required sigs\n     \"type\" : \"pubkeyhash\", (string) The type, eg 'pubkeyhash'\n     \"addresses\" : [      (json array of string)\n      \"komodoaddress\"     (string) Komodo address\n      ,...\n     ]\n    }\n   }\n   ,...\n ],\n \"vjoinsplit\" : [    (array of json objects, only for version >= 2)\n   {\n    \"vpub_old\" : x.xxx,     (numeric) public input value in KMD\n    \"vpub_new\" : x.xxx,     (numeric) public output value in KMD\n    \"anchor\" : \"hex\",     (string) the anchor\n    \"nullifiers\" : [      (json array of string)\n     \"hex\"           (string) input note nullifier\n     ,...\n    ],\n    \"commitments\" : [      (json array of string)\n     \"hex\"           (string) output note commitment\n     ,...\n    ],\n    \"onetimePubKey\" : \"hex\", (string) the onetime public key used to encrypt the ciphertexts\n    \"randomSeed\" : \"hex\",   (string) the random seed\n    \"macs\" : [         (json array of string)\n     \"hex\"           (string) input note MAC\n     ,...\n    ],\n    \"proof\" : \"hex\",     (string) the zero-knowledge proof\n    \"ciphertexts\" : [      (json array of string)\n     \"hex\"           (string) output note ciphertext\n     ,...\n    ]\n   }\n   ,...\n ],\n \"blockhash\" : \"hash\",  (string) the block hash\n \"confirmations\" : n,   (numeric) The confirmations\n \"time\" : ttt,       (numeric) The transaction time in seco", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["nds since epoch (Jan 1 1970 GMT)\n \"blocktime\" : ttt     (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n}\n```\nExamples:\n```bash\n> verus getrawtransaction \"mytxid\"\n> verus getrawtransaction \"mytxid\" 1\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `sendrawtransaction \"hexstring\" ( allowhighfees )`\nSubmits raw transaction (serialized, hex-encoded) to local node and network.Also see createrawtransaction and signrawtransaction calls.#### Arguments:\n1. \"hexstring\"  (string, required) The hex string of the raw transaction)\n2. allowhighfees  (boolean, optional, default=false) Allow high fees#### Result:\n\"hex\"       (string) The transaction hash in hexExamples:", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Create a transaction\n```bash\n> verus createrawtransaction \"[{\\\"txid\\\" : \\\"mytxid\\\",\\\"vout\\\":0}]\" \"{\\\"myaddress\\\":0.01}\"\n```\nSign the transaction, and get back the hex\n```bash\n> verus signrawtransaction \"myhex\"\n```\nSend the transaction (signed hex)\n```bash\n> verus sendrawtransaction \"signedhex\"\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `signrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype )`\nSign inputs for raw transaction (serialized, hex-encoded).\nThe second optional argument (may be null) is an array of previous transaction outputs that this transaction depends on but may not yet be in the block chain.\nThe third optional argument (may be null) is an array of base58-encoded private keys that, if given, will be the only keys used to sign the transaction.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. \"hexstring\"   (string, required) The transaction hex string\n2. \"prevtxs\"    (string, optional) An json array of previous dependent transaction outputs\n```json\n   [        (json array of json objects, or 'null' if none provided)\n    {\n     \"txid\":\"id\",       (string, required) The transaction id\n     \"vout\":n,         (numeric, required) The output number\n     \"scriptPubKey\": \"hex\",  (string, required) script key\n     \"redeemScript\": \"hex\",  (string, required for P2SH) redeem script\n     \"amount\": value      (numeric, required) The amount spent\n    }\n    ,...\n  ]\n```\n3. \"privatekeys\"   (string, optional) A json array of base58-encoded private keys for signing\n```json\n  [         (json array of strings, or 'null' if none provided)\n   \"privatekey\"  (string) private key in base58-encoding\n   ,...\n  ]\n```\n4. \"sighashtype\"   (string, optional, default=ALL) The signature hash type. Must be one of\n    \"ALL\"\n    \"NONE\"\n    \"SINGLE\"\n    \"ALL|ANYONECANPAY\"\n    \"NONE|ANYONECANPAY\"\n    \"SINGLE|ANYONECANPAY\"\n5. \"branchid\"    (string, optional) The hex representation of the consensus branch id to sign with. This can be used to force signing with consensus rules that are ahead of the node's current height.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json:\n{\n \"hex\" : \"value\",        (string) The hex-encoded raw transaction with signature(s)\n \"complete\" : true|false,    (boolean) If the transaction has a complete set of signatures\n \"errors\" : [          (json array of objects) Script verification errors (if there are any)\n  {\n   \"txid\" : \"hash\",      (string) The hash of the referenced, previous transaction\n   \"vout\" : n,        (numeric) The index of the output to spent and used as input\n   \"scriptSig\" : \"hex\",    (string) The hex-encoded signature script\n   \"sequence\" : n,      (numeric) Script sequence number\n   \"error\" : \"text\"      (string) Verification or signing error related to the input\n  }\n  ,...\n ]\n}\n```\nExamples:\n```bash\n> verus signrawtransaction \"myhex\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransaction\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```## Util### `createmultisig nrequired [\"key\",...]`\nCreates a multi-signature address with n signature of m keys required.\nIt returns a json object with the address and redeemScript.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. nrequired  (numeric, required) The number of required signatures out of the n keys or addresses.\n2. \"keys\"    (string, required) A json array of keys which are Komodo addresses or hex-encoded public keys\n```json\n   [\n    \"key\"  (string) Komodo address or hex-encoded public key\n    ,...\n   ]\n```\n#### Result:\n```json\n{\n \"address\":\"multisigaddress\", (string) The value of the new multisig address.\n \"redeemScript\":\"script\"    (string) The string value of the hex-encoded redemption script.\n}\n```\nExamples:\nCreate a multisig address from 2 addresses\n```bash\n> verus createmultisig 2 \"[\\\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\\\",\\\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\\\"]\"\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\\\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\\\",\\\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `estimatefee nblocks`\nEstimates the approximate fee per kilobyte needed for a transaction to begin confirmation within nblocks blocks.#### Arguments:\n1. nblocks   (numeric)#### Result:\nn :  (numeric) estimated fee-per-kilobyteminimum fee is returned if not enough transactions and blocks have been observed to make an estimate.Example:\n```bash\n> verus estimatefee 6\n```### `estimatepriority nblocks`\nEstimates the approximate priority a zero-fee transaction needs to begin confirmation within nblocks blocks.#### Arguments:\n1. nblocks   (numeric)#### Result:\nn :  (numeric) estimated priority-1.0 is returned if not enough transactions and\nblocks have been observed to make an estimate.Example:\n```bash\n> verus estimatepriority 6\n```### `invalidateblock \"hash\"`\nPermanently marks a block as invalid, as if it violated a consensus rule.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. hash  (string, required) the hash of the block to mark as invalid### `jumblr_deposit \"depositaddress\"`\n### `jumblr_pause`\n### `jumblr_resume`\n### `jumblr_secret \"secretaddress\"`\n### `reconsiderblock \"hash\"`\nRemoves invalidity status of a block and its descendants, reconsider them for activation.\nThis can be used to undo the effects of invalidateblock.#### Arguments:\n1. hash  (string, required) the hash of the block to reconsider#### Result:Examples:\n```bash\n> verus invalidateblock \"blockhash\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"invalidateblock\", \"params\": [\"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `validateaddress \"verusaddress\"`\nReturn information about the given Verus address.#### Arguments:\n1. \"verusaddress\"   (string, required) The Komodo address to validate", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json\n{\n \"isvalid\" : true|false,     (boolean) If the address is valid or not. If not, this is the only property returned.\n \"address\" : \"verusaddress\",  (string) The Verus address validated\n \"scriptPubKey\" : \"hex\",    (string) The hex encoded scriptPubKey generated by the address\n \"ismine\" : true|false,     (boolean) If the address is yours or not\n \"isscript\" : true|false,    (boolean) If the key is a script\n \"pubkey\" : \"publickeyhex\",  (string) The hex value of the raw public key\n \"iscompressed\" : true|false,  (boolean) If the address is compressed\n \"account\" : \"account\"     (string) DEPRECATED. The account associated with the address, \"\" is the default account\n}\n```\nExamples:\n```bash\n> verus validateaddress \"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"validateaddress\", \"params\": [\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_validateaddress \"zaddr\"`\nReturn information about the given z address.#### Arguments:\n1. \"zaddr\"   (string, required) The z address to validate", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```\n{\n \"isvalid\" : true|false,   (boolean) If the address is valid or not. If not, this is the only property returned.\n \"address\" : \"zaddr\",     (string) The z address validated\n \"type\" : \"xxxx\",       (string) \"sprout\" or \"sapling\"\n \"ismine\" : true|false,    (boolean) If the address is yours or not\n \"payingkey\" : \"hex\",     (string) [sprout] The hex value of the paying key, a_pk\n \"transmissionkey\" : \"hex\",  (string) [sprout] The hex value of the transmission key, pk_enc\n \"diversifier\" : \"hex\",    (string) [sapling] The hex value of the diversifier, d\n \"diversifiedtransmissionkey\" : \"hex\", (string) [sapling] The hex value of pk_d\n}\n```\nExamples:\n```bash\n> verus z_validateaddress \"zcWsmqT4X2V4jgxbgiCzyrAfRT1vi1F4sn7M5Pkh66izzw8Uk7LBGAH3DtcSMJeUb2pi3W4SQF8LMKkU2cUuVP68yAGcomL\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_validateaddress\", \"params\": [\"zcWsmqT4X2V4jgxbgiCzyrAfRT1vi1F4sn7M5Pkh66izzw8Uk7LBGAH3DtcSMJeUb2pi3W4SQF8LMKkU2cUuVP68yAGcomL\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n## VDXF\n### `getvdxfid \"vdxfuri\" '{\"vdxfkey\":\"i-address or vdxfkey\", \"uint256\":\"hexstr\", \"indexnum\":0}'`\nReturns the VDXF key of the URI string. For example \"vrsc::system.currency.export\"#### Arguments:\n \"vdxfuri\"      (string, required) This message is converted from hex, the data is hashed, then returned\n```json\n{\n \"vdxfkey\":\"i-address or vdxfkey\"   (string, optional) VDXF key or i-address to combine via hash\n \"uint256\":\"32bytehex\"        (hexstr, optional) 256 bit hash to combine with hash\n \"indexnum\":int            (integer, optional) int32_t number to combine with hash\n}\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json\n{                   (object) object with both base58check and hex vdxfid values of string and parents\n \"vdxfid\"               (base58check) i-ID of the URI processed with the VDXF & all combined parameters\n \"hash160result\"           (hexstring) 20 byte hash in hex of the URL string passed in, processed with the VDXF\n \"qualifiedname\":           (object) separate name and parent ID value\n {\n  \"name\": \"namestr\"         (string) leaf name\n  \"parentid\" | \"namespace\":\"string\" (string) parent ID (or namespace if VDXF key) of name\n }\n \"bounddata\": {            (object) if additional data is bound to create the value, it is returned here {\n  \"vdxfkey\":\"i-address or vdxfkey\"  (string) i-address that was combined via hash\n  \"uint256\":\"32bytehex\"       (hexstr) 256 bit hash combined with hash\n  \"indexnum\":int           (integer) int32_t combined with hash\n }\n}```\nExamples:\n```bash\nCreate the signature\n> verus getvdxfid \"system.currency.export\"Verify the signature\n> verus getvdxfid \"idname::userdefinedgroup.subgroup.publishedname\"As json rpc\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getvdxfid\", \"params\": [\"idname::userdefinedgroup.subgroup.publishedname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```## Wallet### `addmultisigaddress nrequired [\"key\",...] ( \"account\" )`\nAdd a nrequired-to-sign multisignature address to the wallet.\nEach key is a VRSC address or hex-encoded public key.\nIf 'account' is specified (DEPRECATED), assign address to that account.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. nrequired   (numeric, required) The number of required signatures out of the n keys or addresses.\n2. \"keysobject\"  (string, required) A json array of VRSC addresses or hex-encoded public keys\n```json\n   [\n    \"address\" (string) VRSC address or hex-encoded public key\n    ...,\n   ]\n```\n3. \"account\"   (string, optional) DEPRECATED. If provided, MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.#### Result:\n\"VRSC_address\" (string) A VRSC address associated with the keys.Examples:Add a multisig address from 2 addresses\n```bash\n> verus addmultisigaddress 2 \"[\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\",\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\"]\"\n```\nAs json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"addmultisigaddress\", \"params\": [2, \"[\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\",\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `backupwallet \"destination\"`\nSafely copies `wallet.dat` to destination filename#### Arguments:\n1. \"destination\"  (string, required) The destination filename, saved in the directory set by `-exportdir` option.#### Result:\n\"path\"       (string) The full path of the destination fileExamples:\n```bash\n> verus backupwallet \"backupdata\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"backupwallet\", \"params\": [\"backupdata\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `convertpassphrase \"walletpassphrase\"`\nConverts Verus Desktop, Agama, Verus Agama, or Verus Mobile passphrase to a private key and WIF (for import with importprivkey).#### Arguments:\n1. \"walletpassphrase\"  (string, required) Wallet passphrase", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```\n\"walletpassphrase\": \"walletpassphrase\", (string) Wallet passphrase you entered\n\"address\": \"verus address\",       (string) Address corresponding to your passphrase\n\"pubkey\": \"publickeyhex\",        (string) The hex value of the raw public key\n\"privkey\": \"privatekeyhex\",       (string) The hex value of the raw private key\n\"wif\": \"wif\"              (string) The private key in WIF format to use with 'importprivkey'\n```Examples:\n```bash\n> verus convertpassphrase \"walletpassphrase\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"convertpassphrase\", \"params\": [\"walletpassphrase\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `decryptdata 'json object'` ***`NEW`***Decrypts a vdxf data descriptor, which is typically encrypted to a z-address. If the viewing key is pr$\nIf either the viewing key or the ssk are correct, the object will be returned with as much decryption $\nIf no decryption is possible, this function returns an error.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n`json object`\n```json\n{\n \"datadescriptor\": {}                      (object, required) Encrypted data descriptor to decrypt, uses wallet keys included in descriptor\n \"evk\":\"Sapling extended full viewing key\"           (evk, optional) if known, an extended viewing key to use for decoding that may not be in the descriptor\n \"ivk\":\"Sapling incoming viewing key hex\"            (ivk, optional) if known, an incoming viewing key to use for decoding\n \"txid\":\"hex\",                         (txid, optional) if data is from a tx and retrieve is true, this may be needed when the data is on the same tx as the link\n \"retrieve\": bool                        (bool, optional) Defaults to false. If true and the data passed is an encrypted or unencrypted reference\n                                            on this chain, it retrieves the data from its reference and decrypts if it can\n}\n```\n#### Result:#### Examples:\nEncrypt data\n```bash\n> verus signdata '{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'```\nDecrypt data\n```bash\n> verus decryptdata '{encrypteddatadescriptor}'\n```\nAs json rpc\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signdata\", \"params\": ['{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `dumpprivkey \"t-addr\"`\nReveals the private key corresponding to 't-addr'.\nThen the importprivkey can be used with this output#### Arguments:\n1. \"t-addr\"  (string, required) The transparent address for the private key", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n\"key\"     (string) The private keyExamples:\n```bash\n> verus dumpprivkey \"myaddress\"\n> verus importprivkey \"mykey\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpprivkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `dumpwallet \"filename\" (omitemptytaddresses)`\nDumps taddr wallet keys in a human-readable format. Overwriting an existing file is not permitted.#### Arguments:\n1. \"filename\"      (string, required) The filename, saved in folder set by verusd -exportdir option\n2. \"omitemptytaddresses\" (boolean, optional) Defaults to false. If true, export only addresses with indexed UTXOs or that control IDs in the wallet (do not use this option without being sure that all addresses of interest are included)#### Result:\n\"path\"      (string) The full path of the destination fileExamples:\n```bash\n> verus dumpwallet \"test\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"dumpwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `encryptwallet \"passphrase\"`\nWARNING: encryptwallet is disabled.\nTo enable it, restart verusd with the `-experimentalfeatures` and `-developerencryptwallet` commandline options, or add these two lines to the VRSC.conf file:\n```\nexperimentalfeatures=1\ndeveloperencryptwallet=1\n```\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\nAfter this, any calls that interact with private keys such as sending or signing will require the passphrase to be set prior the making these calls.\nUse the walletpassphrase call for this, and then walletlock call.\nIf the wallet is already encrypted, use the walletpassphrasechange call.\nNote that this will shutdown the server.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. \"passphrase\"  (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\nExamples:Encrypt you wallet\n```bash\n> verus encryptwallet \"my pass phrase\"\n```\nNow set the passphrase to use the wallet, such as for signing or sending VRSC\n```bash\n> verus walletpassphrase \"my pass phrase\"\n```\nNow we can so something like sign\n```bash\n> verus signmessage \"VRSC_address\" \"test message\"\n```\nNow lock the wallet again by removing the passphrase\n```bash\n> verus walletlock\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"encryptwallet\", \"params\": [\"my pass phrase\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getaccount \"VRSC_address\"`\nDEPRECATED. Returns the account associated with the given address.#### Arguments:\n1. \"VRSC_address\" (string, required) The VRSC address for account lookup.#### Result:\n\"accountname\"    (string) the account addressExamples:\n```bash\n> verus getaccount \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccount\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getaccountaddress \"account\"`\nDEPRECATED. Returns the current VRSC address for receiving payments to this account.#### Arguments:\n1. \"account\"    (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.#### Result:\n\"VRSC_address\"  (string) The account VRSC address", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Examples:\n```bash\n> verus getaccountaddress\n> verus getaccountaddress \"\"\n> verus getaccountaddress \"myaccount\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaccountaddress\", \"params\": [\"myaccount\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getaddressesbyaccount \"account\"`\nDEPRECATED. Returns the list of addresses for the given account.#### Arguments:\n1. \"account\" (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.#### Result:\n```json\n[           (json array of string)\n \"VRSC_address\" (string) a VRSC address associated with the given account\n ,...\n]\n```Examples:\n```bash\n> verus getaddressesbyaccount \"tabby\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getaddressesbyaccount\", \"params\": [\"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getbalance ( \"account\" minconf includeWatchonly )`\nReturns the server's total available balance.#### Arguments:\n1. \"account\"   (string, optional) DEPRECATED. If provided, it MUST be set to the empty string \"\" or to the string \"\\*\", either of which will give the total available balance. Passing any other string will result in an error.\n2. minconf     (numeric, optional, default=1) Only include transactions confirmed at least this many times.\n3. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress')#### Result:\namount       (numeric) The total amount in VRSC received for this account.Examples:", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["The total amount in the wallet\n```bash\n> verus getbalance\n```\nThe total amount in the wallet at least 5 blocks confirmed\n```bash\n> verus getbalance \"*\" 6\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbalance\", \"params\": [\"*\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getcurrencybalance \"address\" ( minconf ) ( friendlynames ) (includeshared)`Returns the balance in all currencies of a taddr, zaddr, iaddr or ID belonging to the node's wallet.CAUTION: If the wallet has only an incoming viewing key for this address, then spends cannot be\ndetected, and so the returned balance may be larger than the actual balance.#### Arguments:\n1. \"address\"    (string) The selected address. It may be a transparent, private or identity address and include `z\\*`, `R\\*`, and `i\\*` wildcards.\n2. minconf     (numeric, optional, default=1) Only include transactions confirmed at least this many times.\n3. friendlynames  (boolean, optional, default=true) use friendly names instead of i-addresses.\n4. includeshared  (bool, optional, default=false) Include outputs that can also be spent by others#### Result:\namount       (numeric) The total amount in VRSC received for this address.Examples:The total amount received by address \"myaddress\"\n```bash\n> verus getcurrencybalance \"myaddress\"\n```\nThe total amount received by address \"myaddress\" at least 5 blocks confirmed\n```bash\n> verus getcurrencybalance \"myaddress\" 5\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrencybalance\", \"params\": [\"myaddress\", 5] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getnewaddress ( \"account\" )`\nReturns a new VRSC address for receiving payments.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. \"account\"    (string, optional) DEPRECATED. If provided, it MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.#### Result:\n\"VRSC_address\"  (string) The new VRSC addressExamples:\n```bash\n> verus getnewaddress\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnewaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getrawchangeaddress`\nReturns a new VRSC address, for receiving change.\nThis is for use with raw transactions, NOT normal use.#### Result:\n\"address\"  (string) The addressExamples:\n```bash\n> verus getrawchangeaddress\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawchangeaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getreceivedbyaccount \"account\" ( minconf )`\nDEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.#### Arguments:\n1. \"account\"   (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.\n2. minconf     (numeric, optional, default=1) Only include transactions confirmed at least this many times.#### Result:\namount       (numeric) The total amount in VRSC received for this account.Examples:", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Amount received by the default account with at least 1 confirmation\n```bash\n> verus getreceivedbyaccount \"\"\n```\nAmount received at the tabby account including unconfirmed amounts with zero confirmations\n```bash\n> verus getreceivedbyaccount \"tabby\" 0\n```\nThe amount with at least 6 confirmation, very safe\n```bash\n> verus getreceivedbyaccount \"tabby\" 6\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaccount\", \"params\": [\"tabby\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getreceivedbyaddress \"VRSC_address\" ( minconf )`\nReturns the total amount received by the given VRSC address in transactions with at least minconf confirmations.#### Arguments:\n1. \"VRSC_address\" (string, required) The VRSC address for transactions.\n2. minconf       (numeric, optional, default=1) Only include transactions confirmed at least this many times.#### Result:\namount  (numeric) The total amount in VRSC received at this address.Examples:The amount from transactions with at least 1 confirmation\n```bash\n> verus getreceivedbyaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\"\n```\nThe amount including unconfirmed transactions, zero confirmations\n```bash\n> verus getreceivedbyaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0\n```\nThe amount with at least 6 confirmations, very safe\n```bash\n> verus getreceivedbyaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 6\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreceivedbyaddress\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `gettransaction \"txid\" ( includeWatchonly )`\nGet detailed information about in-wallet transaction <txid>", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. \"txid\"  (string, required) The transaction id\n2. \"includeWatchonly\"  (bool, optional, default=false) Whether to include watchonly addresses in balance calculation and details[]", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json\n{\n \"amount\" : x.xxx,    (numeric) The transaction amount in VRSC\n \"confirmations\" : n,   (numeric) The number of confirmations\n \"blockhash\" : \"hash\", (string) The block hash\n \"blockindex\" : xx,    (numeric) The block index\n \"blocktime\" : ttt,    (numeric) The time in seconds since epoch (1 Jan 1970 GMT)\n \"txid\" : \"transactionid\",  (string) The transaction id.\n \"time\" : ttt,      (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)\n \"timereceived\" : ttt,  (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)\n \"details\" : [\n  {\n   \"account\" : \"accountname\", (string) DEPRECATED. The account name involved in the transaction, can be \"\" for the default account.\n   \"address\" : \"VRSC_address\",  (string) The VRSC address involved in the transaction\n   \"category\" : \"send|receive\",  (string) The category, either 'send' or 'receive'\n   \"amount\" : x.xxx         (numeric) The amount in VRSC\n   \"vout\" : n,            (numeric) the vout value\n  }\n  ,...\n ],\n \"vjoinsplit\" : [\n  {\n   \"anchor\" : \"treestateref\",     (string) Merkle root of note commitment tree\n   \"nullifiers\" : [ string, ... ]   (string) Nullifiers of input notes\n   \"commitments\" : [ string, ... ]   (string) Note commitments for note outputs\n   \"macs\" : [ string, ... ]      (string) Message authentication tags\n   \"vpub_old\" : x.xxx         (numeric) The amount removed from the transparent value pool\n   \"vpub_new\" : x.xxx,         (numeric) The amount added to the transparent value pool\n  }\n  ,...\n ],\n \"hex\" : \"data\"     (string) Raw data for transaction\n}\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Examples:\n```bash\n> verus gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"\n> verus gettransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\" true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getunconfirmedbalance`\nReturns the server's total unconfirmed balance### `getwalletinfo`\nReturns an object containing various wallet state info.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json\n{\n \"walletversion\": xxxxx,   (numeric) the wallet version\n \"balance\": xxxxxxx,     (numeric) the total confirmed balance of the wallet in VRSC\n \"reserve_balance\": xxxxxxx, (numeric) for PBaaS reserve chains, the total confirmed reserve balance of the wallet in VRSC\n \"unconfirmed_balance\": xxx, (numeric) the total unconfirmed balance of the wallet in VRSC\n \"unconfirmed_reserve_balance\": xxx, (numeric) total unconfirmed reserve balance of the wallet in VRSC\n \"immature_balance\": xxxxxx, (numeric) the total immature balance of the wallet in VRSC\n \"immature_reserve_balance\": xxxxxx, (numeric) total immature reserve balance of the wallet in VRSC\n \"eligible_staking_balance\": xxxxxx, (numeric) eligible staking balance in VRSC\n \"reserve_balance\": {\"currency\":XXXXXX,...} (json) json with currencies and the balances\n \"txcount\": xxxxxxx,     (numeric) the total number of transactions in the wallet\n \"keypoololdest\": xxxxxx,  (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\n \"keypoolsize\": xxxx,    (numeric) how many new keys are pre-generated\n \"unlocked_until\": ttt,   (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\n \"paytxfee\": x.xxxx,     (numeric) the transaction fee configuration, set in VRSC/kB\n \"seedfp\": \"uint256\",    (string) the BLAKE2b-256 hash of the HD seed\n}\n```Examples:\n```bash\n> verus getwalletinfo\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `importaddress \"address\" ( \"label\" rescan )`\nAdds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. \"address\"     (string, required) The address\n2. \"label\"      (string, optional, default=\"\") An optional label\n3. rescan        (boolean, optional, default=true) Rescan the wallet for transactionsNote: This call can take minutes to complete if rescan is true.Examples:Import an address with rescan\n```bash\n> verus importaddress \"myaddress\"\n```\nImport using a label without rescan\n```bash\n> verus importaddress \"myaddress\" \"testing\" false\n```\nAs a JSON-RPC call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myaddress\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `importprivkey \"verusprivkey\" ( \"label\" rescan )`\nAdds a private key (as returned by dumpprivkey) to your wallet.#### Arguments:\n1. \"verusprivkey\"  (string, required) The private key (see dumpprivkey)\n2. \"label\"      (string, optional, default=\"\") An optional label\n3. rescan        (boolean, optional, default=true) Rescan the wallet for transactionsNote: This call can take minutes to complete if rescan is true.Examples:Dump a private key\n```bash\n> verus dumpprivkey \"myaddress\"\n```\nImport the private key with rescan\n```bash\n> verus importprivkey \"mykey\"\n```\nImport using a label and without rescan\n```bash\n> verus importprivkey \"mykey\" \"testing\" false\n```\nAs a JSON-RPC call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importprivkey\", \"params\": [\"mykey\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `importwallet \"filename\"`\nImports taddr keys from a wallet dump file (see dumpwallet).#### Arguments:\n1. \"filename\"  (string, required) The wallet fileExamples:", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Dump the wallet\n```bash\n> verus dumpwallet \"nameofbackup\"\n```\nImport the wallet\n```bash\n> verus importwallet \"path/to/exportdir/nameofbackup\"\n```\nImport using the json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importwallet\", \"params\": [\"path/to/exportdir/nameofbackup\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `keypoolrefill ( newsize )`\nFills the keypool.Arguments\n1. newsize   (numeric, optional, default=100) The new keypool sizeExamples:\n```bash\n> verus keypoolrefill\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"keypoolrefill\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `listaccounts ( minconf includeWatchonly)`\nDEPRECATED. Returns Object that has account names as keys, account balances as values.#### Arguments:\n1. minconf     (numeric, optional, default=1) Only include transactions with at least this many confirmations\n2. includeWatchonly (bool, optional, default=false) Include balances in watchonly addresses (see 'importaddress')#### Result:\n```json\n{           (json object where keys are account names, and values are numeric balances\n \"account\": x.xxx, (numeric) The property name is the account name, and the value is the total balance for the account.\n ...\n}\n```Examples:List account balances where there at least 1 confirmation\n```bash\n> verus listaccounts\n```\nList account balances including zero confirmation transactions\n```bash\n> verus listaccounts 0\n```\nList account balances for 6 or more confirmations\n```bash\n> verus listaccounts 6\n```\nAs json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaccounts\", \"params\": [6] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `listaddressgroupings`\nLists groups of addresses which have had their common ownership\nmade public by common use as inputs or as the resulting change\nin past transactions#### Result:\n```json\n[\n [\n  [\n   \"VRSC address\",   (string) The VRSC address\n   amount,         (numeric) The amount in VRSC\n   \"account\"       (string, optional) The account (DEPRECATED)\n  ]\n  ,...\n ]\n ,...\n]\n```Examples:\n```bash\n> verus listaddressgroupings\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `listlockunspent`\nReturns list of temporarily unspendable outputs.\nSee the lockunspent call to lock and unlock transactions for spending.Result:\n```json\n[\n {\n  \"txid\" : \"transactionid\",   (string) The transaction id locked\n  \"vout\" : n           (numeric) The vout value\n }\n ,...\n]\n```\nExamples:List the unspent transactions\n```bash\n> verus listunspent\n```\nLock an unspent transaction\n```bash\n> verus lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n```\nList the locked transactions\n```bash\n> verus listlockunspent\n```\nUnlock the transaction again\n```bash\n> verus lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `listreceivedbyaccount ( minconf includeempty includeWatchonly)`\nDEPRECATED. List balances by account.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. minconf   (numeric, optional, default=1) The minimum number of confirmations before payments are included.\n2. includeempty (boolean, optional, default=false) Whether to include accounts that haven't received any payments.\n3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').#### Result:\n```json\n[\n {\n  \"involvesWatchonly\" : true,  (bool) Only returned if imported addresses were involved in transaction\n  \"account\" : \"accountname\", (string) The account name of the receiving account\n  \"amount\" : x.xxx,       (numeric) The total amount received by addresses with this account\n  \"confirmations\" : n      (numeric) The number of confirmations of the most recent transaction included\n }\n ,...\n]\n```Examples:\n```bash\n> verus listreceivedbyaccount\n> verus listreceivedbyaccount 6 true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaccount\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `listreceivedbyaddress ( minconf includeempty includeWatchonly)`\nList balances by receiving address.#### Arguments:\n1. minconf    (numeric, optional, default=1) The minimum number of confirmations before payments are included.\n2. includeempty (numeric, optional, default=false) Whether to include addresses that haven't received any payments.\n3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json\n[\n {\n  \"involvesWatchonly\" : true,    (bool) Only returned if imported addresses were involved in transaction\n  \"address\" : \"receivingaddress\",  (string) The receiving address\n  \"account\" : \"accountname\",     (string) DEPRECATED. The account of the receiving address. The default account is \"\".\n  \"amount\" : x.xxx,         (numeric) The total amount in VRSC received by the address\n  \"confirmations\" : n        (numeric) The number of confirmations of the most recent transaction included\n }\n ,...\n]\n```Examples:\n```bash\n> verus listreceivedbyaddress\n> verus listreceivedbyaddress 6 true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listreceivedbyaddress\", \"params\": [6, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `listsinceblock ( \"blockhash\" target-confirmations includeWatchonly)`\nGet all transactions in blocks since block [blockhash], or all transactions if omitted#### Arguments:\n1. \"blockhash\"  (string, optional) The block hash to list transactions since\n2. target-confirmations:  (numeric, optional) The confirmations required, must be 1 or more\n3. includeWatchonly:    (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')\n#### Result:\n```json\n{\n \"transactions\": [\n  \"account\":\"accountname\",    (string) DEPRECATED. The account name associated with the transaction. Will be \"\" for the default account.\n  \"address\":\"VRSC_address\",  (string) The VRSC address of the transaction. Not present for move transactions (category = move).\n  \"category\":\"send|receive\",   (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.\n  \"amount\": x.xxx,     (numeric) The amount in VRSC. This is negative for the 'send' category, and for the 'move' category f", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["or moves\n                     outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.\n  \"vout\" : n,        (numeric) the vout value\n  \"fee\": x.xxx,       (numeric) The amount of the fee in VRSC. This is negative and only available for the 'send' category of transactions.\n  \"confirmations\": n,    (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.\n  \"blockhash\": \"hashvalue\",   (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.\n  \"blockindex\": n,     (numeric) The block index containing the transaction. Available for 'send' and 'receive' category of transactions.\n  \"blocktime\": xxx,     (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\n  \"txid\": \"transactionid\", (string) The transaction id. Available for 'send' and 'receive' category of transactions.\n  \"time\": xxx,       (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).\n  \"timereceived\": xxx,   (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.\n  \"comment\": \"...\",    (string) If a comment is associated with the transaction.\n  \"to\": \"...\",      (string) If a comment to is associated with the transaction.\n ],\n \"lastblock\": \"lastblockhash\"   (string) The hash of the last block\n}\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Examples:\n```bash\n> verus listsinceblock\n> verus listsinceblock \"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\" 6\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listsinceblock\", \"params\": [\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\", 6] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `listtransactions ( \"account\" count from includeWatchonly)`\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. \"account\"  (string, optional) DEPRECATED. The account name. Should be \"\\*\".\n2. count     (numeric, optional, default=10) The number of transactions to return\n3. from      (numeric, optional, default=0) The number of transactions to skip\n4. includeWatchonly (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')#### Result:\n```json\n[\n {\n  \"account\":\"accountname\",    (string) DEPRECATED. The account name associated with the transaction.\n                        It will be \"\" for the default account.\n  \"address\":\"VRSC_address\",  (string) The VRSC address of the transaction. Not present for\n                        move transactions (category = move).\n  \"category\":\"send|receive|move\", (string) The transaction category. 'move' is a local (off blockchain)\n                        transaction between accounts, and not associated with an address,\n                        transaction id or block. 'send' and 'receive' transactions are\n                        associated with an address, transaction id and block details\n  \"amount\": x.xxx,     (numeric) The amount in VRSC. This is negative for the 'send' category, and for the\n                     'move' category for moves outbound. It is positive for the 'receive' category,\n                     and for the 'move' category for inbound funds.\n  \"vout\" : n,        (numeric) the vout value\n  \"fee\": x.xxx,       (numeric) The amount of the fee in VRSC. This is negative and only available for the\n                     'send' category of transactions.\n  \"confirmations\": n,    (numeric) The number of confirmations for the transaction. Available for 'send'", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], [" and\n                     'receive' category of transactions.\n  \"blockhash\": \"hashvalue\", (string) The block hash containing the transaction. Available for 'send' and 'receive'\n                     category of transactions.\n  \"blockindex\": n,     (numeric) The block index containing the transaction. Available for 'send' and 'receive'\n                     category of transactions.\n  \"txid\": \"transactionid\", (string) The transaction id. Available for 'send' and 'receive' category of transactions.\n  \"time\": xxx,       (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\n  \"timereceived\": xxx,   (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available\n                     for 'send' and 'receive' category of transactions.\n  \"comment\": \"...\",    (string) If a comment is associated with the transaction.\n  \"otheraccount\": \"accountname\", (string) For the 'move' category of transactions, the account the funds came\n                     from (for receiving funds, positive amounts), or went to (for sending funds,\n                     negative amounts).\n  \"size\": n,        (numeric) Transaction size in bytes\n }\n]\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Examples:List the most recent 10 transactions in the systems\n```bash\n> verus listtransactions\n```\nList transactions 100 to 120\n```bash\n> verus listtransactions \"*\" 20 100\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listtransactions\", \"params\": [\"*\", 20, 100] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `listunspent ( minconf maxconf [\"address\",...] inludeshared )`\nReturns array of unspent transaction outputs with between minconf and maxconf (inclusive) confirmations.\nOptionally filter to only include txouts paid to specified addresses.\nResults are an array of Objects, each of which has:\n{txid, vout, scriptPubKey, amount, confirmations}", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. minconf     (numeric, optional, default=1) The minimum confirmations to filter\n2. maxconf     (numeric, optional, default=9999999) The maximum confirmations to filter\n3. \"addresses \"  (string) A json array of VRSC addresses to filter\n```json\n  [\n   \"address\"   (string) VRSC address\n   ,...\n  ]\n```\n4. includeshared  (bool, optional, default=false) Include outputs that can also be spent by others\nResult\n```json\n[          (array of json object)\n {\n  \"txid\" : \"txid\",     (string) the transaction id\n  \"vout\" : n,        (numeric) the vout value\n  \"generated\" : true|false (boolean) true if txout is a coinbase transaction output\n  \"address\" : \"address\",  (string) the Zcash address\n  \"account\" : \"account\",  (string) DEPRECATED. The associated account, or \"\" for the default account\n  \"scriptPubKey\" : \"key\",  (string) the script key\n  \"amount\" : x.xxx,     (numeric) the transaction amount in VRSC\n  \"confirmations\" : n,   (numeric) The number of confirmations\n  \"redeemScript\" : n    (string) The redeemScript if scriptPubKey is P2SH\n  \"spendable\" : xxx     (bool) Whether we have the private keys to spend this output\n }\n ,...\n]\n```Examples\n```bash\n> verus listunspent\n> verus listunspent 6 9999999 \"[\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\",\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\"]\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listunspent\", \"params\": [6, 9999999 \"[\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\",\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...]`\nUpdates list of temporarily unspendable outputs.\nTemporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\nA locked transaction output will not be chosen by automatic coin selection, when spending VRSC.\nLocks are stored in memory only. Nodes start with zero locked outputs, and the locked output list is always cleared (by virtue of process exit) when a node stops or fails.\nAlso see the listunspent call#### Arguments:\n1. unlock      (boolean, required) Whether to unlock (true) or lock (false) the specified transactions\n2. \"transactions\" (string, required) A json array of objects. Each object the txid (string) vout (numeric)\n```json\n   [      (json array of json objects)\n    {\n     \"txid\":\"id\",  (string) The transaction id\n     \"vout\": n     (numeric) The output number\n    }\n    ,...\n   ]\n```\n#### Result:\ntrue|false  (boolean) Whether the command was successful or notExamples:List the unspent transactions\n```bash\n> verus listunspent\n```\nLock an unspent transaction\n```bash\n> verus lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n```\nList the locked transactions\n```bash\n> verus listlockunspent\n```\nUnlock the transaction again\n```bash\n> verus lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `move \"fromaccount\" \"toaccount\" amount ( minconf \"comment\" )`\nDEPRECATED. Move a specified amount from one account in your wallet to another.#### Arguments:\n1. \"fromaccount\"  (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.\n2. \"toaccount\"   (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.\n3. amount      (numeric) Quantity of VRSC to move between accounts.\n4. minconf      (numeric, optional, default=1) Only use funds with at least this many confirmations.\n5. \"comment\"    (string, optional) An optional comment, stored in the wallet only.#### Result:\ntrue|false      (boolean) true if successful.Examples:Move 0.01 VRSC from the default account to the account named tabby\n```bash\n> verus move \"\" \"tabby\" 0.01\n```\nMove 0.01 VRSC timotei to akiko with a comment and funds have 6 confirmations\n```bash\n> verus move \"timotei\" \"akiko\" 0.01 6 \"happy birthday!\"\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"move\", \"params\": [\"timotei\", \"akiko\", 0.01, 6, \"happy birthday!\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n### `prunespentwallettransactions \"txid\"`\nRemove all txs that are spent. You can clear all txs bar one, by specifiying a txid.Please backup your wallet.dat before running this command.#### Arguments:\n1. \"txid\"  (string, optional) The transaction id to keep.#### Result:\n```json\n{\n \"total_transactions\" : n,     (numeric) Transactions in wallet of VRSC\n \"remaining_transactions\" : n,   (numeric) Transactions in wallet after clean.\n \"removed_transactions\" : n,    (numeric) The number of transactions removed.\n}\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Examples:\n```bash\n> verus prunespentwallettransactions\n> verus prunespentwallettransactions \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prunespentwallettransactions\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prunespentwallettransactions\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `rescanfromheight (height)`Rescans the current wallet from a specified height#### Arguments:\n1. \"height\"   (int, optional) Defaults to 0, height to start rescanning fromNote: This call can take minutes or even hours to complete on very large wallets and rescansExamples:Initiate rescan of entire chain\n```bash\n> verus rescanfromheight\n```\nInitiate rescan from block 1000000\n```bash\n> verus rescanfromheight 1000000\n```### `resendwallettransactions`\nImmediately re-broadcast unconfirmed wallet transactions to all peers.\nIntended only for testing; the wallet code periodically re-broadcasts automatically.\nReturns array of transaction ids that were re-broadcast.### `sendfrom \"fromaccount\" \"toVRSCaddress\" amount ( minconf \"comment\" \"comment-to\" )`\nDEPRECATED (use sendtoaddress). Sent an amount from an account to a VRSC address.\nThe amount is a real and is rounded to the nearest 0.00000001.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. \"fromaccount\"    (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.\n2. \"toVRSCaddress\" (string, required) The VRSC address to send funds to.\n3. amount        (numeric, required) The amount in VRSC (transaction fee is added on top).\n4. minconf        (numeric, optional, default=1) Only use funds with at least this many confirmations.\n5. \"comment\"      (string, optional) A comment used to store what the transaction is for.\n                   This is not part of the transaction, just kept in your wallet.\n6. \"comment-to\"    (string, optional) An optional comment to store the name of the person or organization\n                   to which you're sending the transaction. This is not part of the transaction,\n                   it is just kept in your wallet.#### Result:\n\"transactionid\"    (string) The transaction id.Examples:Send 0.01 VRSC from the default account to the address, must have at least 1 confirmation\n```bash\n> verus sendfrom \"\" \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.01\n```\nSend 0.01 from the tabby account to the given address, funds must have at least 6 confirmations\n```bash\n> verus sendfrom \"tabby\" \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.01 6 \"donation\" \"seans outpost\"\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendfrom\", \"params\": [\"tabby\", \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", 0.01, 6, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `sendmany \"fromaccount\" {\"address\":amount,...} ( minconf \"comment\" [\"address\",...] )`\nSend multiple times. Amounts are decimal numbers with at most 8 digits of precision.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. \"fromaccount\"     (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.\n2. \"amounts\"       (string, required) A json object with addresses and amounts\n```json\n  {\n   \"address\":amount  (numeric) The VRSC address is the key, the numeric amount in VRSC is the value\n   ,...\n  }\n```\n3. minconf         (numeric, optional, default=1) Only use the balance confirmed at least this many times.\n4. \"comment\"       (string, optional) A comment\n5. subtractfeefromamount  (string, optional) A json array with addresses. The fee will be equally deducted from the amount of each selected address. Those recipients will receive less VRSC than you enter in their corresponding amount field. If no addresses are specified here, the sender pays the fee.\n```json\n  [\n   \"address\"      (string) Subtract fee from this address\n   ,...\n  ]\n```#### Result:\n\"transactionid\"     (string) The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.Examples:", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Send two amounts to two different addresses:\n```bash\n> verus sendmany \"\" \"{\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\":0.01,\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\":0.02}\"\n```\nSend two amounts to two different addresses setting the confirmation and comment:\n```bash\n> verus sendmany \"\" \"{\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\":0.01,\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\":0.02}\" 6 \"testing\"\n```\nSend two amounts to two different addresses, subtract fee from amount:\n```bash\n> verus sendmany \"\" \"{\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\":0.01,\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\":0.02}\" 1 \"\" \"[\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\",\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\"]\"\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendmany\", \"params\": [\"\", \"{\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\":0.01,\\\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\\\":0.02}\", 6, \"testing\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `sendtoaddress \"VRSC_address\" amount ( \"comment\" \"comment-to\" subtractfeefromamount )`\nSend an amount to a given address. The amount is a real and is rounded to the nearest 0.00000001#### Arguments:\n1. \"VRSC_address\" (string, required) The VRSC address to send to.\n2. \"amount\"   (numeric, required) The amount in VRSC to send. eg 0.1\n3. \"comment\"   (string, optional) A comment used to store what the transaction is for. This is not part of the transaction, just kept in your wallet.\n4. \"comment-to\" (string, optional) A comment to store the name of the person or organization to which you're sending the transaction. This is not part of the transaction, just kept in your wallet.\n5. subtractfeefromamount (boolean, optional, default=false) The fee will be deducted from the amount being sent. The recipient will receive less VRSC than you enter in the amount field.#### Result:\n\"transactionid\" (string) The transaction id.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Examples:\n```bash\n> verus sendtoaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.1\n> verus sendtoaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.1 \"donation\" \"seans outpost\"\n> verus sendtoaddress \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" 0.1 \"\" \"\" true\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendtoaddress\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", 0.1, \"donation\", \"seans outpost\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `setaccount \"VRSC_address\" \"account\"`\nDEPRECATED. Sets the account associated with the given address.#### Arguments:\n1. \"VRSC_address\" (string, required) The VRSC address to be associated with an account.\n2. \"account\"     (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.Examples:\n```bash\n> verus setaccount \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" \"tabby\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setaccount\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", \"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `settxfee amount`\nSet the transaction fee per kB.#### Arguments:\n1. amount     (numeric, required) The transaction fee in VRSC/kB rounded to the nearest 0.00000001#### Result:\ntrue|false    (boolean) Returns true if successfulExamples:\n```bash\n> verus settxfee 0.00001\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_exportkey \"zaddr\"`\nReveals the zkey corresponding to 'zaddr'.\nThen the `z_importkey` can be used with this output#### Arguments:\n1. \"zaddr\"  (string, required) The zaddr for the private key#### Result:\n\"key\"         (string) The private key", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Examples:\n```bash\n> verus z_exportkey \"myaddress\"\n> verus z_importkey \"mykey\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_exportkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_exportviewingkey \"zaddr\"`\nReveals the viewing key corresponding to 'zaddr'.\nThen the `z_importviewingkey` can be used with this output#### Arguments:\n1. \"zaddr\"  (string, required) The zaddr for the viewing keyResult:\n\"vkey\"         (string) The viewing keyExamples:\n```bash\n> verus z_exportviewingkey \"myaddress\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_exportviewingkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_exportwallet \"filename\" (omitemptytaddresses)`\nExports all wallet keys, for taddr and zaddr, in a human-readable format. Overwriting an existing file is not permitted.#### Arguments:\n1. \"filename\"      (string, required) The filename, saved in folder set by verusd -exportdir option\n2. \"omitemptytaddresses\" (boolean, optional) Defaults to false. If true, export only addresses with indexed UTXOs or that control IDs in the wallet\n             (do not use this option without being sure that all addresses of interest are included)#### Result:\n\"path\"      (string) The full path of the destination fileExamples:\n```bash\n> verus z_exportwallet \"test\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_exportwallet\", \"params\": [\"test\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_getbalance \"address\" ( minconf )`\nReturns the balance of a taddr or zaddr belonging to the node's wallet.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["CAUTION: If the wallet has only an incoming viewing key for this address, then spends cannot be\ndetected, and so the returned balance may be larger than the actual balance.#### Arguments:\n1. \"address\"    (string) The selected address. It may be a transparent or private address and\n          include \"z\\*\" \"R\\*\" and \"i\\*\" wildcards. Also `\"idname@:private\"` can be used\n          to get the balance of a private address attached to an ID.\n2. minconf     (numeric, optional, default=1) Only include transactions confirmed at least this many times.#### Result:\namount       (numeric) The total amount in KMD received for this address.Examples:The total amount received by address \"myaddress\"\n```bash\n> verus z_getbalance \"myaddress\"\n```\nThe total amount received by address \"myaddress\" at least 5 blocks confirmed\n```bash\n> verus z_getbalance \"myaddress\" 5\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getbalance\", \"params\": [\"myaddress\", 5] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_getnewaddress ( type )`\nReturns a new shielded address for receiving payments.With no arguments, returns a Sapling address.#### Arguments:\n1. \"type\"     (string, optional, default=\"sapling\") The type of address. One of [\"sprout\", \"sapling\"].#### Result:\n\"VRSC_address\"  (string) The new shielded address.Examples:\n```bash\n> verus z_getnewaddress\n> verus z_getnewaddress sapling\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getnewaddress\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_getoperationresult '[\"operationid\", ... ]'`\nRetrieve the result and status of an operation which has finished, and then remove the operation from memory.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. \"operationid\"     (array, optional) A list of operation ids we are interested in. If not provided, examine all operations known to the node.#### Result:\n\"  [object, ...]\"   (array) A list of JSON objectsExamples:\n```bash\n> verus z_getoperationresult '[\"operationid\", ... ]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationresult\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_getoperationstatus '[\"operationid\", ... ]'`\nGet operation status and any associated result or error data. The operation will remain in memory.#### Arguments:\n1. \"operationid\"     (array, optional) A list of operation ids we are interested in. If not provided, examine all operations known to the node.#### Result:\n\"  [object, ...]\"   (array) A list of JSON objectsExamples:\n```bash\n> verus z_getoperationstatus '[\"operationid\", ... ]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationstatus\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_gettotalbalance ( minconf includeWatchonly )`\nReturn the total value of funds stored in the node's wallet.CAUTION: If the wallet contains any addresses for which it only has incoming viewing keys,\nthe returned private balance may be larger than the actual balance, because spends cannot\nbe detected with incoming viewing keys.#### Arguments:\n1. minconf     (numeric, optional, default=1) Only include private and transparent transactions confirmed at least this many times.\n2. includeWatchonly (bool, optional, default=false) Also include balance in watchonly addresses (see 'importaddress' and 'z_importviewingkey')", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json\n{\n \"transparent\": xxxxx,   (numeric) the total balance of transparent funds\n \"private\": xxxxx,     (numeric) the total balance of shielded funds (in both Sprout and Sapling addresses)\n \"total\": xxxxx,      (numeric) the total balance of both transparent and shielded funds\n}\n```Examples:The total amount in the wallet\n```bash\n> verus z_gettotalbalance\n```\nThe total amount in the wallet at least 5 blocks confirmed\n```bash\n> verus z_gettotalbalance 5\n```\nAs a json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_gettotalbalance\", \"params\": [5] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_importkey \"zkey\" ( rescan startHeight )`\nAdds a zkey (as returned by z_exportkey) to your wallet.#### Arguments:\n1. \"zkey\"       (string, required) The zkey (see z_exportkey)\n2. rescan       (string, optional, default=\"whenkeyisnew\") Rescan the wallet for transactions - can be \"yes\", \"no\" or \"whenkeyisnew\"\n3. startHeight    (numeric, optional, default=0) Block height to start rescan fromNote: This call can take minutes to complete if rescan is true.Examples:Export a zkey\n```bash\n> verus z_exportkey \"myaddress\"\n```\nImport the zkey with rescan\n```bash\n> verus z_importkey \"mykey\"\n```\nImport the zkey with partial rescan\n```bash\n> verus z_importkey \"mykey\" whenkeyisnew 30000\n```\nRe-import the zkey with longer partial rescan\n```bash\n> verus z_importkey \"mykey\" yes 200000\n```\nAs a JSON-RPC call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_importkey\", \"params\": [\"mykey\", \"no\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_importviewingkey \"vkey\" ( rescan startHeight )`\nAdds a viewing key (as returned by z_exportviewingkey) to your wallet.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. \"vkey\"       (string, required) The viewing key (see z_exportviewingkey)\n2. rescan       (string, optional, default=\"whenkeyisnew\") Rescan the wallet for transactions - can be \"yes\", \"no\" or \"whenkeyisnew\"\n3. startHeight    (numeric, optional, default=0) Block height to start rescan from\n4. zaddr        (string, optional, default=\"\") zaddr in case of importing viewing key for SaplingNote: This call can take minutes to complete if rescan is true.Examples:Import a viewing key\n```bash\n> verus z_importviewingkey \"vkey\"\n```\nImport the viewing key without rescan\n```bash\n> verus z_importviewingkey \"vkey\", no\n```\nImport the viewing key with partial rescan\n```bash\n> verus z_importviewingkey \"vkey\" whenkeyisnew 30000\n```\nRe-import the viewing key with longer partial rescan\n```bash\n> verus z_importviewingkey \"vkey\" yes 20000\n```\nImport the viewing key for Sapling address\n```bash\n> verus z_importviewingkey \"vkey\" no 0 \"zaddr\"\n```\nAs a JSON-RPC call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_importviewingkey\", \"params\": [\"vkey\", \"no\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_importwallet \"filename\"`\nImports taddr and zaddr keys from a wallet export file (see z_exportwallet).#### Arguments:\n1. \"filename\"  (string, required) The wallet fileExamples:Dump the wallet\n```bash\n> verus z_exportwallet \"nameofbackup\"\n```\nImport the wallet\n```bash\n> verus z_importwallet \"path/to/exportdir/nameofbackup\"\n```\nImport using the json rpc call\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_importwallet\", \"params\": [\"path/to/exportdir/nameofbackup\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `z_listaddresses ( includeWatchonly )`\nReturns the list of Sprout and Sapling shielded addresses belonging to the wallet.#### Arguments:\n1. includeWatchonly (bool, optional, default=false) Also include watchonly addresses (see 'z_importviewingkey')#### Result:\n```json\n[           (json array of string)\n \"zaddr\"      (string) a zaddr belonging to the wallet\n ,...\n]\n```\nExamples:\n```bash\n> verus z_listaddresses\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_listaddresses\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_listoperationids`\nReturns the list of operation ids currently known to the wallet.#### Arguments:\n1. \"status\"     (string, optional) Filter result by the operation's state e.g. \"success\".#### Result:\n```json\n[           (json array of string)\n \"operationid\"    (string) an operation id belonging to the wallet\n ,...\n]\n```\nExamples:\n```bash\n> verus z_listoperationids\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_listoperationids\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_listreceivedbyaddress \"address\" ( minconf )`\nReturn a list of amounts received by a zaddr belonging to the node's wallet.#### Arguments:\n1. \"address\"   (string) The private address.\n2. minconf     (numeric, optional, default=1) Only include transactions confirmed at least this many times.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json\n{\n \"txid\": \"txid\",      (string) the transaction id\n \"amount\": xxxxx,     (numeric) the amount of value in the note\n \"memo\": xxxxx,      (string) hexadecimal string representation of memo field\n \"jsindex\" (sprout) : n,   (numeric) the joinsplit index\n \"jsoutindex\" (sprout) : n,   (numeric) the output index of the joinsplit\n \"outindex\" (sapling) : n,   (numeric) the output index\n \"change\": true|false,  (boolean) true if the address that received the note is also one of the sending addresses\n}\n```Examples:\n```bash\n> verus z_listreceivedbyaddress \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_listreceivedbyaddress\", \"params\": [\"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_listunspent ( minconf maxconf includeWatchonly [\"zaddr\",...] )`\nReturns array of unspent shielded notes with between minconf and maxconf (inclusive) confirmations.\nOptionally filter to only include notes sent to specified addresses.\nWhen minconf is 0, unspent notes with zero confirmations are returned, even though they are not immediately spendable.\nResults are an array of Objects, each of which has:\n{txid, jsindex, jsoutindex, confirmations, address, amount, memo} (Sprout)\n{txid, outindex, confirmations, address, amount, memo} (Sapling)", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. minconf     (numeric, optional, default=1) The minimum confirmations to filter\n2. maxconf     (numeric, optional, default=9999999) The maximum confirmations to filter\n3. includeWatchonly (bool, optional, default=false) Also include watchonly addresses (see 'z_importviewingkey')\n4. \"addresses\"   (string) A json array of zaddrs (both Sprout and Sapling) to filter on. Duplicate addresses not allowed.\n```json\n  [\n   \"address\"   (string) zaddr\n   ,...\n  ]\n```\nResult\n```json\n[               (array of json object)\n {\n  \"txid\" : \"txid\",     (string) the transaction id\n  \"jsindex\" (sprout) : n,    (numeric) the joinsplit index\n  \"jsoutindex\" (sprout) : n,    (numeric) the output index of the joinsplit\n  \"outindex\" (sapling) : n,    (numeric) the output index\n  \"confirmations\" : n,    (numeric) the number of confirmations\n  \"spendable\" : true|false, (boolean) true if note can be spent by wallet, false if address is watchonly\n  \"address\" : \"address\",  (string) the shielded address\n  \"amount\": xxxxx,     (numeric) the amount of value in the note\n  \"memo\": xxxxx,      (string) hexademical string representation of memo field\n  \"change\": true|false,   (boolean) true if the address that received the note is also one of the sending addresses\n }\n ,...\n]\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Examples\n```bash\n> verus z_listunspent\n> verus z_listunspent 6 9999999 false \"[\\\"ztbx5DLDxa5ZLFTchHhoPNkKs57QzSyib6UqXpEdy76T1aUdFxJt1w9318Z8DJ73XzbnWHKEZP9Yjg712N5kMmP4QzS9iC9\\\",\\\"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\\\"]\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_listunspent\", \"params\": [6 9999999 false \"[\\\"ztbx5DLDxa5ZLFTchHhoPNkKs57QzSyib6UqXpEdy76T1aUdFxJt1w9318Z8DJ73XzbnWHKEZP9Yjg712N5kMmP4QzS9iC9\\\",\\\"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_mergetoaddress [\"fromaddress\", ... ] \"toaddress\" ( fee ) ( transparent_limit ) ( shielded_limit ) ( memo )`\nWARNING: z_mergetoaddress is disabled.\nTo enable it, restart verusd with the `-experimentalfeatures` and\n`-zmergetoaddress` commandline options, or add these two lines\nto the `VRSC.conf` file:\n```\nexperimentalfeatures=1\nzmergetoaddress=1\n```\nMerge multiple UTXOs and notes into a single UTXO or note. Protected coinbase UTXOs are ignored, use `z_shieldcoinbase` to combine those into a single note.This is an asynchronous operation, and UTXOs selected for merging will be locked. If there is an error, they are unlocked. The RPC call `listlockunspent` can be used to return a list of locked UTXOs.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["The number of UTXOs and notes selected for merging can be limited by the caller. If the transparent limit parameter is set to zero, and Overwinter is not yet active, the `-mempooltxinputlimit` option will determine the number of UTXOs. After Overwinter has activated `-mempooltxinputlimit` is ignored and having a transparent input limit of zero will mean limit the number of UTXOs based on the size of the transaction. Any limit is constrained by the consensus rule defining a maximum transaction size of 100000 bytes before Sapling, and 2000000 bytes once Sapling activates.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. fromaddresses     (array, required) A JSON array with addresses.\n             The following special strings are accepted inside the array:\n               - \"ANY_TADDR\":  Merge UTXOs from any t-addrs belonging to the wallet.\n               - \"ANY_SPROUT\": Merge notes from any Sprout zaddrs belonging to the wallet.\n               - \"ANY_SAPLING\": Merge notes from any Sapling zaddrs belonging to the wallet.\n             While it is possible to use a variety of different combinations of addresses and the above values,\n             it is not possible to send funds from both sprout and sapling addresses simultaneously. If a special\n             string is given, any given addresses of that type will be counted as duplicates and cause an error.\n```json\n  [\n   \"address\"     (string) Can be a t-addr or a zaddr\n   ,...\n  ]\n```\n2. \"toaddress\"      (string, required) The t-addr or zaddr to send the funds to.\n3. fee          (numeric, optional, default=0.0001) The fee amount to attach to this transaction.\n4. transparent_limit   (numeric, optional, default=50) Limit on the maximum number of UTXOs to merge. Set to 0 to use node option -mempooltxinputlimit (before Overwinter), or as many as will fit in the transaction (after Overwinter).\n5. shielded_limit    (numeric, optional, default=20 Sprout or 200 Sapling Notes) Limit on the maximum number of notes to merge. Set to 0 to merge as many as will fit in the transaction.\n6. \"memo\"        (string, optional) Encoded as hex. When toaddress is a zaddr, this will be stored in the memo field of the new note.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Result:\n```json\n{\n \"remainingUTXOs\": xxx        (numeric) Number of UTXOs still available for merging.\n \"remainingTransparentValue\": xxx  (numeric) Value of UTXOs still available for merging.\n \"remainingNotes\": xxx        (numeric) Number of notes still available for merging.\n \"remainingShieldedValue\": xxx    (numeric) Value of notes still available for merging.\n \"mergingUTXOs\": xxx         (numeric) Number of UTXOs being merged.\n \"mergingTransparentValue\": xxx   (numeric) Value of UTXOs being merged.\n \"mergingNotes\": xxx         (numeric) Number of notes being merged.\n \"mergingShieldedValue\": xxx     (numeric) Value of notes being merged.\n \"opid\": xxx             (string) An operationid to pass to z_getoperationstatus to get the result of the operation.\n}\n```Examples\n```bash\n> verus z_mergetoaddress '[\"ANY_SAPLING\", \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\"]' ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_mergetoaddress\", \"params\": [[\"ANY_SAPLING\", \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\"], \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_sendmany \"fromaddress\" [{\"address\":... ,\"amount\":...},...] ( minconf ) ( fee )`\nSend multiple times. Amounts are decimal numbers with at most 8 digits of precision.\nChange generated from a taddr flows to a new taddr address, while change generated from a zaddr returns to itself.\nWhen sending coinbase UTXOs to a zaddr, change is not allowed. The entire value of the UTXO(s) must be consumed.\nBefore Sapling activates, the maximum number of zaddr outputs is 54 due to transaction size limits.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["#### Arguments:\n1. \"fromaddress\"     (string, required) The taddr or zaddr to send the funds from. Also `\"idname@:private\"` can be used\n             to get the source from a private address attached to an ID.\n2. \"amounts\"       (array, required) An array of json objects representing the amounts to send.\n```json\n  [{\n   \"address\":address (string, required) The address is a taddr or zaddr. Also `\"idname@:private\"` can be used\n             to send to a private address attached to an ID.\n   \"amount\":amount  (numeric, required) The numeric amount in KMD is the value\n   \"memo\":memo    (string, optional) If the address is a zaddr, raw data represented in hexadecimal string format\n  }, ... ]\n```\n3. minconf        (numeric, optional, default=1) Only use funds confirmed at least this many times.\n4. fee          (numeric, optional, default=0.0001) The fee amount to attach to this transaction.#### Result:\n\"operationid\"     (string) An operationid to pass to z_getoperationstatus to get the result of the operation.Examples:\n```bash\n> verus z_sendmany \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" '[{\"address\": \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\" ,\"amount\": 5.0}]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_sendmany\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", [{\"address\": \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\" ,\"amount\": 5.0}]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["### `z_shieldcoinbase \"fromaddress\" \"tozaddress\" ( fee ) ( limit )`\nShield transparent coinbase funds by sending to a shielded zaddr. This is an asynchronous operation and utxos selected for shielding will be locked. If there is an error, they are unlocked. The RPC call `listlockunspent` can be used to return a list of locked utxos. The number of coinbase utxos selected for shielding can be limited by the caller. If the limit parameter is set to zero, and Overwinter is not yet active, the `-mempooltxinputlimit` option will determine the number of uxtos. Any limit is constrained by the consensus rule defining a maximum transaction size of 100000 bytes before Sapling, and 2000000 bytes once Sapling activates.#### Arguments:\n1. \"fromaddress\"     (string, required) The address is a taddr or \"`*`\" for all taddrs belonging to the wallet.\n2. \"toaddress\"      (string, required) The address is a zaddr.\n3. fee          (numeric, optional, default=0.0001) The fee amount to attach to this transaction.\n4. limit         (numeric, optional, default=50) Limit on the maximum number of utxos to shield. Set to 0 to use node option -mempooltxinputlimit (before Overwinter), or as many as will fit in the transaction (after Overwinter).#### Result:\n```json\n{\n \"remainingUTXOs\": xxx    (numeric) Number of coinbase utxos still available for shielding.\n \"remainingValue\": xxx    (numeric) Value of coinbase utxos still available for shielding.\n \"shieldingUTXOs\": xxx    (numeric) Number of coinbase utxos being shielded.\n \"shieldingValue\": xxx    (numeric) Value of coinbase utxos being shielded.\n \"opid\": xxx     (string) An operationid to pass to z_getoperationstatus to get the result of the operation.\n}\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Examples:\n```bash\n> verus z_shieldcoinbase \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_shieldcoinbase\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `z_viewtransaction \"txid\"`\nGet detailed shielded information about in-wallet transaction <txid>#### Arguments:\n1. \"txid\" (string, required) The transaction id#### Result:\n```json\n{\n \"txid\" : \"transactionid\",  (string) The transaction id\n \"spends\" : [\n  {\n   \"type\" : \"sprout|sapling\",   (string) The type of address\n   \"js\" : n,            (numeric, sprout) the index of the JSDescription within vJoinSplit\n   \"jsSpend\" : n,         (numeric, sprout) the index of the spend within the JSDescription\n   \"spend\" : n,          (numeric, sapling) the index of the spend within vShieldedSpend\n   \"txidPrev\" : \"transactionid\",  (string) The id for the transaction this note was created in\n   \"jsPrev\" : n,          (numeric, sprout) the index of the JSDescription within vJoinSplit\n   \"jsOutputPrev\" : n,       (numeric, sprout) the index of the output within the JSDescription\n   \"outputPrev\" : n,        (numeric, sapling) the index of the output within the vShieldedOutput\n   \"address\" : \"zcashaddress\",   (string) The Zcash address involved in the transaction\n   \"value\" : x.xxx         (numeric) The amount in VRSC\n   \"valueZat\" : xxxx        (numeric) The amount in zatoshis\n  }\n  ,...\n ],\n \"outputs\" : [\n  {\n   \"type\" : \"sprout|sapling\",   (string) The type of address\n   \"js\" :", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], [" n,            (numeric, sprout) the index of the JSDescription within vJoinSplit\n   \"jsOutput\" : n,         (numeric, sprout) the index of the output within the JSDescription\n   \"output\" : n,          (numeric, sapling) the index of the output within the vShieldedOutput\n   \"address\" : \"zcashaddress\",   (string) The Zcash address involved in the transaction\n   \"recovered\" : true|false    (boolean, sapling) True if the output is not for an address in the wallet\n   \"value\" : x.xxx         (numeric) The amount in VRSC\n   \"valueZat\" : xxxx        (numeric) The amount in zatoshis\n   \"memo\" : \"hexmemo\",       (string) Hexademical string representation of the memo field\n   \"memoStr\" : \"memo\",       (string) Only returned if memo contains valid UTF-8 text.\n  }\n  ,...\n ],\n}\n```", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Examples:\n```bash\n> verus z_viewtransaction \"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_viewtransaction\", \"params\": [\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `zcbenchmark benchmarktype samplecount`\nRuns a benchmark of the selected type samplecount times,\nreturning the running times of each sample.#### Result:\n```json\n[\n {\n  \"runningtime\": runningtime\n },\n {\n  \"runningtime\": runningtime\n }\n ...\n]\n```### `zcrawjoinsplit rawtx inputs outputs vpub_old vpub_new`\ninputs: a JSON object mapping {note: zcsecretkey, ...}\noutputs: a JSON object mapping {zcaddr: value, ...}DEPRECATED. Splices a joinsplit into rawtx. Inputs are unilaterally confidential.\nOutputs are confidential between sender/receiver. The vpub_old and vpub_new values are globally public and move transparent value into or out of the confidential value store, respectively.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["Note: The caller is responsible for delivering the output enc1 and enc2 to the appropriate recipients, as well as signing rawtxout and ensuring it is mined. (A future RPC call will deliver the confidential payments in-band on the blockchain.)\n\nOutput:\n```json\n{\n\"encryptednote1\": enc1,\n\"encryptednote2\": enc2,\n\"rawtxn\": rawtxout\n}\n```\n\n### `zcrawkeygen`\nDEPRECATED. Generate a zcaddr which can send and receive confidential values.\n\nOutput:\n```json\n{\n \"zcaddress\": zcaddr,\n \"zcsecretkey\": zcsecretkey,\n \"zcviewingkey\": zcviewingkey,\n}\n```\n\n### `zcrawreceive zcsecretkey encryptednote`\nDEPRECATED. Decrypts encryptednote and checks if the coin commitments\nare in the blockchain as indicated by the \"exists\" result.\n\nOutput:\n```json\n{\n \"amount\": value,\n \"note\": noteplaintext,\n \"exists\": exists\n}\n```\n\n### `zcsamplejoinsplit`\nPerform a joinsplit and return the JSDescription.\n\ncompiled by Oink.vrsc@, additions by Mike@, grewalsatinder@ and allbits@\n\nNote: last revision date 2024-05-03.", "./raw_text_input_wiki/clifaq-02_verus_commands.md"], ["# Question: How do you know a block was minted (staking reward)?\n\nYou can see the following characteristics:\n1. a block hash without a lot of leading zeros\n2. a last transaction that in your wallet has no fee, is from the same address that it is to, which is also the address the coinbase is to (easiest confirmation) and\n3. The POS difficulty is encoded in the low 32 bits of the nonce with 96 of the next nonce bits as zero/reserved, then a random hash at the top half\n\n(submitted by @keda666)", "./raw_text_input_wiki/faq-allos09_how_do_you_know_a_block_was_minted_staking_reward.md"], ["# MacOS pool-mining on low priority.\n\nAttention: Read it completely before use.\n\n### Useful links for VRSC mining:\n\n[Miners download page](https://verus.io/get-vrsc)\n[Miner configuration guide](#!faq-macos\\mac-faq03-mining_guide.md)\n\n## Procedure:\n\nIn order to let your mining not interfere with other processes running on your PC, we'll need to deprioritize the mining process. This will result in your miner throttling down whenever your PC needs processing power.\nPeople have reported to be able to use CPU-heavy applications, like games, without the miner interfering, with this method.\n\nBecause the Verus wallet (GUI and CLI) does a lot more than mining, it is not recommended to use this for a solo-mining setup.\n\nFirst thing you will need is pool-mining software. The link is supplied above this procedure. Download your preferred miner, extract it to your prefered location and configure the batchfile with the pool of your choice and your own mining address.\n\nNow we'll need to adjust the batchfile to run on low priority:\n\n#### NHEQMINER:\n\n- Run your miner as you normally would, with `nice -n 19 ` placed in front of the command you normally use,\n  for example:\n   `nice -n 19 ./nheqminer -v -l pool.verus.io:9999 -u RVjvbZuqSGLGDm1B9BFkbHWySPKEx4tfjQ.Donator -p x -t 6`\n - make sure you replace the pool (`pool.verus.io:9999`) with your prefered pool and the address\n  (`RVjvbZuqSGLGDm1B9BFkbHWySPKEx4tfjQ`) with your own address. The address shown in this line is the veruscoin\n  foundation donation address. If desired change the identifier (`Donator`) to a name that easily identifies the\n  miner to you.\n\nCreated by Oink.vrsc@.\n\nNote: last revision date 2020-11-11.", "./raw_text_input_wiki/mac-faq04_low_priority_mining.md"], ["# Standard file location for Verus Desktop\n\nThe installer for Verus-Desktop suggests a standard location to install to Applications\n\n## Anyone who uses the computer\n\n`/Applications/Verus-Desktop.app`\n\n## Deamons\n\nThe daemons are located in the `komodod`, `verusd` and `zcashd` folders that can be found in\n`/Applications/Verus-Desktop.app/Contents/Resources/app/assets/bin/osx`\n\n## Program settings\n\nVerus Desktop saves its program settings in your home folder:\n`~/Library/Application\\ Support/Verus-Desktop`\nThe users settings are stored in `appdata/config.json` in the program settings folder.\n\n## Standard chain data and wallet locations\n\nVerus Desktop saves its chain and wallet data in your home folder:\n#### KMD\n\n`~/Library/Application\\ Support/Komodo`\n\n### Verus\n\n`~/Library/Application\\ Support/Komodo/VRSC`\n\n#### Komodo asset chains\nAny Komodo asset chain will create a subfolder in the KMD chain data and wallet folder, which is standard named. The names will be in capitals and are identical to the **official** asset-chain name.\n`~/Library/Application\\ Support/Komodo/<CHAIN-NAME>`\n\nNote: examples\nPirate: `~/Library/Application\\ Support/Komodo/PIRATE`\nUtrum: `~/Library/Application\\ Support/Komodo/OOT`\nZexo: `~/Library/Application\\ Support/Komodo/ZEXO`\nAnd so on...\n\nFor easy access to the binaries folders, Verus-Desktop program settings and VRSC chain folder and all binary folders, you can use the help menu in Verus-Desktop.\n\nnote: created at 2020-12-03 by Oink.vrsc@", "./raw_text_input_wiki/mac-faq05_verus_desktop_locations.md"], ["# Question: I followed the procedure and am still having problems with my wallet.To completely reset your wallet in the event of a fork, particularly if you've already followed [this procedure](#!faq-allos/faq-allos19_what_should_i_do_if_i_end_up_on_my_own_fork_because_of_a_network_issue_or_having_an_old_version_of_the_wallet.md), follow the steps below.### Verus `Wallet.dat`, Chaindata & `VRSC.conf` standard locations\n * Linux:\t\t`~/.komodo/VRSC`\n * Mac OS: \t`~/Library/Application Support/Komodo/VRSC`\n * Windows 10: \t`%AppData%\\Roaming\\Komodo\\VRSC\\`\n * OS independent through Verus Desktop: Click `help`, `Show Verus data folder (default)`### Important General Information`verus command \"<userinput>\"` needs to be entered literally, with `<userinput>` replaced by your specific userdata. So if the text directs you to use for example `\"<Public Address>\"`, you replace that (including the `<` and `>`) with the address,\nso it looks similar to this: `\"RYX6RYU3AAvwVCNyNM4cVyGUhSMUPvKs3r\"`.## Procedure\n1. Open your `VRSC.conf` file for editing.\n2. Add a line to `VRSC.conf` containing\n (mac or linux)\n `exportdir=/home/<username>/`\n (or on windows)\n `exportdir=c:\\Users<username>\\Desktop\\`\n3. Save the file and stop verusd for Windows-Desktop or Agama, just exit and wait for it to close completely. For the linux cli run `./verus stop`, or for the windows cli run `verus stop`.\n4. Once your wallet is finished closing make a backup of your `wallet.dat` file somewhere safe. `wallet.dat` is located in the same directory as your configuration file (see above). To make the backup just copy it to another directory, make sure to leave the original there for the time being.\n5. Now restart your wallet by launching Verus Desktop, Agama or running verusd for the CLI.\n6. Now we'll export the wallet (this produces a different kind of file from what we did above).", "./raw_text_input_wiki/faq-allos20_i_followed_the_procedure_in_faq_19_and_am_still_having_problems_with_my_wallet.md"], ["Note: The filename you replace`<mywalletexport>` with, can only contain letters and figures, no other characters, so it **cannot** have an file-extension* Verus Desktop:\n  Go to `Settings`, `Coin Settings` en click in the textbox shown there.\n  Enter `run z_exportwallet <mywalletexport>` en press enter to execute the command.\n * Agama:\n  Go to settings, scroll to the bottom and click CLI, select VRSC in that section.\n  Then below type `z_exportwallet <mywalletexport>` and click the button below to run it.\n * linux CLI:\n  run `./verus z_exportwallet <mywalletexport>`\n * win CLI:\n  run `verus z_exportwallet <mywalletexport>`", "./raw_text_input_wiki/faq-allos20_i_followed_the_procedure_in_faq_19_and_am_still_having_problems_with_my_wallet.md"], ["The exported wallet should be a file called `mywalletexport` in the location you set for exportdir in `VRSC.conf`. Keep this file secure, it has your plaintext private keys. Verify that the file is there and isn't empty.\n7. Stop Verus again by closing Verus-Desktop, Agama or running `./verus stop` for the linux CLI or `verus.bat stop` for the windows CLI.\n8. Making ABSOLUTELY SURE you have both the `mywalletexport` file and your `wallet.dat` backup in a safe place, delete your komodo/VRSC directory and everything in it (you can optionally leave your VRSC.conf file, but everything else there should be deleted.\n9. At this point make sure you're on the latest version for your wallet by going to https://verus.io/ and checking the downloads section. If you need to upgrade do so now, before starting your wallet again.\n10. Restart your wallet by launching Verus-Desktop, Agama or running verusd for the CLI. Allow it to start syncing.\n11. Once it has begun syncing, you can import your wallet. In either case, replace <PATHTOWALLETEXPORT with the full path to your wallet export file - on windows this might look like `c:\\Users\\John\\Desktop\\mywalletexport` , on linux or mac it would look something like `/home/john/mywalletexport`.\n * Verus-Desktop:\n Go to `Settings`, `Coin Settings` en click in the textbox shown there.\n Enter `run z_importwallet <PATHTOWALLETEXPORT>` en press enter to execute the command.\n * Agama:\n  Go to settings, scroll to the bottom and click CLI, select VRSC in that section.\n  Then below type `z_importwallet <PATHTOWALLETEXPORT>` and click the button below to run it.\n * linux CLI:\n  Run `./verus z_importwallet <PATHTOWALLETEXPORT>`\n * win CLI:\n  Run `verus.bat z_importwallet <PATHTOWALLETEXPORT>`", "./raw_text_input_wiki/faq-allos20_i_followed_the_procedure_in_faq_19_and_am_still_having_problems_with_my_wallet.md"], ["Depending on the number of addresses in your wallet and how far along you are on re-syncing, this may take several minutes to complete. Your balances will adjust as the chain syncs, as it only knows about the transactions that have happened in the blocks it has received and scanned. That means your balance will adjust as new blocks are scanned and won't reflect an accurate balance until you are fully synced.\n\nNote: last revision date 2020-11-11.", "./raw_text_input_wiki/faq-allos20_i_followed_the_procedure_in_faq_19_and_am_still_having_problems_with_my_wallet.md"], ["# Release Notes## v1.0.7\nAnnouncing v1.0.7 - UPGRADE HIGHLY RECOMMENDED FOR MAINNET, MANDATORY FOR CONTINUED TESTNET USEALL PBAAS AND DEFI FUNCTIONS HAVE NOW RESUMED ON MAINNET. PLEASE MAKE SURE YOU ARE RUNNING v1.0.6 OR LATER AT THIS TIMETESTNET USERS SHOULD UPGRADE ASAP, AS USUAL. THERE WILL BE A FORKING CHANGE ON TESTNET THAT WILL ACTIVATE TO RE-ENABLE ZERO EMISSION PBAAS CHAIN CHALLENGES TOMORROW, AFTER 19:00 UTCThis release marks the completion and full resolution of the investigations that led to the PBaaS and DeFi pauses. As mentioned, all LP fees from exiting a DeFi basket\u2019s primary currency will now be properly burned into those currencies before conversion operations take place.Shortly before this announcement, all oracle notarizations that were suppressing DeFi, currency sub-ID registrations, and PBaaS chain launches were lifted from the network. That means all PBaaS functions are now live and fully operational!Please note: Though the last mandatory upgrade was v1.0.6, and this is not technically a mandatory upgrade, it does address the known and understood issue only affecting zero reward PBaaS chains that can create issues with cross-chain challenges.Until everyone is known to be on v1.0.7 or later, and we announce that such PBaaS configurations are well supported on the network, we recommend that no one launch a PBaaS chain that has zero block reward emissions. If you choose to do so anyhow, your chain should properly launch, but for about the next month, you may have issues with cross-chain function, unless you understand and plan appropriately. If launching a chain with zero emissions is important to you, and you seriously can\u2019t wait, please discuss with someone in development or support to understand your options. We don\u2019t believe that this is a critical early use case, so we actually don\u2019t expect it to be an issue for anyone.", "./raw_text_input_wiki/release_notes.md"], ["Our next step is the testnet rollout of the Ethereum bridge, and after a few days of that proving out in final testing and review, we will deploy it on mainnet as soon as we believe it is ready for permanent use. Once the Ethereum bridge is live on mainnet, if we do ever need a contract upgrade, we will announce and coordinate with network validators, as each Ethereum contract upgrade will be independently subject to Verus miner and staker approval.Thanks everyone for upgrading as soon as you are able!### Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles#### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.", "./raw_text_input_wiki/release_notes.md"], ["#### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.", "./raw_text_input_wiki/release_notes.md"], ["#### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.#### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.#### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registra", "./raw_text_input_wiki/release_notes.md"], ["tion of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n### Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n### Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n### Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset", "./raw_text_input_wiki/release_notes.md"], [" currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n### Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n### Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral c", "./raw_text_input_wiki/release_notes.md"], ["arve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n### An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n#### Locking and Unlocking IDs\n- **Time Lock:**\n The unlockatblock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST setidentitytimelock \"id@\" '{\"unlockatblock\": <Unlock block height>}'\n```\n- **Time Delay:**\n The setunlockdelay parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST setidentitytimelock \"id@\" '{\"setunlockdelay\": <Unlock block delay>}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve rati", "./raw_text_input_wiki/release_notes.md"], ["o, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["#### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRw", "./raw_text_input_wiki/release_notes.md"], ["bvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n### Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain \nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTE", "./raw_text_input_wiki/release_notes.md"], ["ST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```#### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\"\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```", "./raw_text_input_wiki/release_notes.md"], ["Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n#### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```", "./raw_text_input_wiki/release_notes.md"], ["### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffunds", "./raw_text_input_wiki/release_notes.md"], ["verus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`#### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.", "./raw_text_input_wiki/release_notes.md"], ["2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.### DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:** https://www.virustotal.com/gui/file/cf8b55cb1d903919589ec6954af80fea1b67004e5ae6e752f728e2cfe7662861/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/342afc6824046998f49587aa723cc37e5d1f2289bf31a8cf3a23b1204053cfb2/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/5e7924bdeb5e3c8a5522d1872893eba0d999b0a3cd800e3d41c4bf1fa0f61046/detection\n**Windows:** https://www.virustotal.com/gui/file/57d7a108ae21ac31ead138becdb2585c3fcf3381029024668aa6f4c803164c30/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/### Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n#### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AScPJwABQSBrd4sGek1xRmjez42/qbPn75Wf/nAyvZOQnJ8MUGk4BAk7TOVCdMJlUs/NSKes2qPpFiudO7vi78yU2FKNak3V\" \"/Downloads/Verus-CLI-Linux-v1.0.7-x86_64/Verus-CLI-Linux-v1.0.7-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AScPJwABQSBrd4sGek1xRmjez42/qbPn75Wf/nAyvZOQnJ8MUGk4BAk7TOVCdMJlUs/NSKes2qPpFiudO7vi78yU2FKNak3V\" c1fca5893785a38496af34b4cdd982cd6e8cc180992e620eaddd02fedc0ca348\n```**The result will be true if the signature is valid.**\n```\ntrue\n```", "./raw_text_input_wiki/release_notes.md"], ["## v1.0.6\nAnnouncing v1.0.6 - MANDATORY MAINNET UPGRADE WITH COMMUNITY AGREED DEADLINE ON TUESDAY, MAY 30th, 19:00 UTCAs everyone can see, there is a currency on the chain called RaceCondition, which someone has defined and is a 5% algorithmically controlled fractional reserve of Verus. While these currencies are tools, and there may be good reasons for 5% currency components or even 5% currencies in some applications, this was launched as a VERY low reserve (launched with 10 VRSC in reserves), high supply currency (100 million supply), and as volatile as the protocol allows at 5%.The extreme nature of the currency and the fact that the person who launched it exited with their entire pre-launch amount when someone else joined resulted in a behavior different than what I would expect. Someone converted into the currency, which was clearly all in the hands of one individual. That individual then converted all of the currency they got at launch to VRSC, getting the highest price they could get for all of their currency and leaving the highly volatile, 5% fractionally backed currency with far fewer reserves relative to supply than it had before, basically an exit scam for a grand total of 4 VRSC.", "./raw_text_input_wiki/release_notes.md"], ["The thing that made me take notice is that there seemed to be more reserves left and a higher price at the end of this operation than I\u2019d expect in the currency, and that turned out to be because only in the case of a straight conversion from fractional to a reserve, not in any other case, the fractional currency fees that should have been burned into the basket were not being captured. Interestingly, in this case it resulted in a form of buffer at the extreme, where the person who entered RaceCondition for 5 VRSC after it was launched and subsequently had 4 of it taken on the exit from one person converting 100,000,000 of the supply ended up with more than they would have, had the math been properly distributing those fees. This was the totality of the issue we found, and though it may not seem that serious to require a pause of DeFi, these calculations are consensus, and we take any error that we find in them, fees or otherwise, quite seriously. This update will operate on the updated rules when the oracle notifications are removed and DeFi is reactivated.The fix means that all fees, including the fractional fees on an exit from a liquidity basket are burned before conversions take place, which in this case, would enable the person who exited with 100MM RaceCondition to take 15 VRSC, instead of the 14 that they did. This is because the correct fee allocation results in a 15 SAT price, which means the person who remains holding the RaceCondition bag would have only some 100s of thousands of SATs left in reserves. On the other hand, anyone could come in and reinflate the 5% currency by converting to it. This event on the network had the effect of reducing the extreme difference between supply and reserves on RaceCondition, and it will operate as a normal 5% reserve currency should when DeFi reactivates.", "./raw_text_input_wiki/release_notes.md"], ["The lesson here is that if you\u2019re interested to learn about a basket currency, pay attention to the total reserve ratio, what currencies are in it, and see that there is enough liquidity of reserves and holder distribution for the basket to make sense. Of course baskets could be memes, but they also have real function. Make sure you take a look into how a basket works and that you have a reason before putting your hard mined, staked, won, or purchased Verus in.We will need the network to upgrade to version 1.0.6 before we can re-enable DeFi and cross-chain functions, making the ETH bridge launch possible, as well as PBaaS launches and conversions.We see that someone is launching a currency called \u201cwhales\u201d, which looks like an ID registration currency that will enable registering IDs with 3 levels of referrals in a currency that simply collects registration fees, which may start quite reasonably priced and likely get more expensive over time as fees are earned in the basket. The startblock for whales is 2561900, which should happen somewhere around 6:00 UTC on Thursday. That means that if we can upgrade and activate by Tuesday before the meeting, that person would still have time for pre-launch participation by those who would like.Thanks everyone for upgrading as soon as you are able!### Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles", "./raw_text_input_wiki/release_notes.md"], ["### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.", "./raw_text_input_wiki/release_notes.md"], ["The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n### Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay i", "./raw_text_input_wiki/release_notes.md"], ["s to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n### Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n### Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocol", "./raw_text_input_wiki/release_notes.md"], ["s.\n### Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n### Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n### An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as w", "./raw_text_input_wiki/release_notes.md"], ["ell as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\n The unlockatblock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST setidentitytimelock \"id@\" '{\"unlockatblock\": <Unlock block height>}'\n```\n- **Time Delay:**\n The setunlockdelay parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST setidentitytimelock \"id@\" '{\"setunlockdelay\": <Unlock block delay>}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":1", "./raw_text_input_wiki/release_notes.md"], ["0}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n### Defining a Currency\n#### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is a", "./raw_text_input_wiki/release_notes.md"], [" token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business,", "./raw_text_input_wiki/release_notes.md"], [" \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["#### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\"\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n#### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration", "./raw_text_input_wiki/release_notes.md"], ["```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffundsverus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`", "./raw_text_input_wiki/release_notes.md"], ["#### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.### DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:** https://www.virustotal.com/gui/file/74cdf4ce0f8a5735960f4b5ba0177080f94e9729f4f83a08133516d383518f9c/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/7eae55dc13e130d2b381e41309a5b3dc262b2326f2ae3a24fe358ace2431e697/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/26eb9299a6cb6f5d90e0f80a4eeba3e119563044c6133fa453e64a633c9bca3f/detection\n**Windows:** https://www.virustotal.com/gui/file/f93d13ba778d9b34641879d6c3d23a1bac001f3749c2756c651a3f9c9bb0d522/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["### Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n#### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"Aa0DJwABQSChXw/NphqzkcaFyWwJzhP0g+78oxZoJtFIB8CR4J+X/DcQdXTR849aOvHYkCBc1UKoTmWmrXXZs5iwjYutbcs3\" \"/Downloads/Verus-CLI-Linux-v1.0.6-x86_64/Verus-CLI-Linux-v1.0.6-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"Aa0DJwABQSChXw/NphqzkcaFyWwJzhP0g+78oxZoJtFIB8CR4J+X/DcQdXTR849aOvHYkCBc1UKoTmWmrXXZs5iwjYutbcs3\" 67cc123c25b7bf7ad01d16c1b9556f80c18fee3595f6e556d0245a67ef51263f\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n## v1.0.5\nAnnouncing v1.0.5 - MANDATORY MAINNET UPGRADE WITH DEADLINE TBD BY COMMUNITY (STRAWMAN SUGGESTION MONDAY, MAY 29th, 19:00 UTC)While preparing the cross-chain VRSC currency launch and as part of continual review, we determined that one numeric function that is used in the cross-chain challenges and is calculated differently for mainnet, due to the original launch that included the deprecated time locked rewards, was incorrect. This had never been hit, as it would have been calculated incorrectly only if multiple chains experienced a challenge of two competing forks, but in that case, it would falsely reject any challenge proof. That would mean cross-chain challenges on mainnet, even though they were fine and fully tested on testnet, could fail and block a bridge until that calculation was made correct and the network upgraded.", "./raw_text_input_wiki/release_notes.md"], ["Because we have the notification oracle technology, we triggered a rip-cord notification selectively for cross-chain that made all nodes listening to the oracle, which we expect to be near 100%, disallow cross-chain operations without affecting same chain operations. That means that all functions on the Verus network, except launching PBaaS chains or Ethereum bridges are fully functional and unhampered in any way at this time. If someone tries to launch a PBaaS chain while this oracle notification is active, all nodes following the oracle will reject such an action without incident until the notification is removed.This release, v1.0.5, properly calculates the aptly named \u201cmagic number\u201d for each chain, in the correct way on the mainnet network, and as long as the notification is set, is fully compatible with current versions on the network.Once everyone has had a chance to upgrade to v1.0.5, the network/community should agree to remove the notification from the oracle and allow PBaaS launches without false rejection of cross-chain challenges. Once we do that, and when someone launches a PBaaS chain that issues such a challenge, the network would become incompatible with Verus versions prior to 1.0.5.From our perspective, we are not aware of urgent efforts to launch a PBaaS chain in the next few days by anyone who cannot wait. All things considered, we believe that we can at least wait until the community discussion on Saturday, and that a strawman deadline would be **Monday, May 29th, at 19:00 UTC** for everyone to have upgraded. If you are urgently wanting to launch a PBaaS chain, have a plan, and are prepared to do so sooner, we invite you to join the community meeting on Saturday at 19:00 UTC and let everyone know.", "./raw_text_input_wiki/release_notes.md"], ["Having this notification remain in place until removed keeps the network running smoothly as it has been since activation, with all DeFi, multicurrency, and non-cross-chain functions enabled. Since the ETH bridge is undergoing final changes and review, is not quite ready to launch on testnet or mainnet, and will likely require at least a couple days on testnet to finish its review, we do not believe the current notification is hampering or slowing anything or anyone down at this time.\n### Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles#### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.", "./raw_text_input_wiki/release_notes.md"], ["#### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.", "./raw_text_input_wiki/release_notes.md"], ["#### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.#### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.#### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registra", "./raw_text_input_wiki/release_notes.md"], ["tion of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n### Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n### Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n### Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset", "./raw_text_input_wiki/release_notes.md"], [" currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n### Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n### Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral c", "./raw_text_input_wiki/release_notes.md"], ["arve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n### An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n#### Locking and Unlocking IDs\n- **Time Lock:**\n The unlockatblock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST setidentitytimelock \"id@\" '{\"unlockatblock\": <Unlock block height>}'\n```\n- **Time Delay:**\n The setunlockdelay parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST setidentitytimelock \"id@\" '{\"setunlockdelay\": <Unlock block delay>}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve rati", "./raw_text_input_wiki/release_notes.md"], ["o, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["#### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRw", "./raw_text_input_wiki/release_notes.md"], ["bvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n### Defining a Currency\n#### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTE", "./raw_text_input_wiki/release_notes.md"], ["ST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```#### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\"\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```", "./raw_text_input_wiki/release_notes.md"], ["Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n#### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```", "./raw_text_input_wiki/release_notes.md"], ["### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffunds", "./raw_text_input_wiki/release_notes.md"], ["verus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`#### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.", "./raw_text_input_wiki/release_notes.md"], ["2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.### DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:** https://www.virustotal.com/gui/file/c48816428e6baf6158eee0f553e587c7c7af73aa02ef7ffb4b84a2c3e72eba7a/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/7aa2923ce230e0cf96a981d5c1431b627aae2991958c380f64fffa6e7bbcabd1/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/691899be0d2cbdbd67cc58be042eec60e1f8b9f819347e026b3e556c9fc9a82a/detection\n**Windows:** https://www.virustotal.com/gui/file/6b2a03233a1eac9c27df66ee86a2490173d60248f55d5d2e35df1f1a442f6fcf/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/### Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n#### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AR/tJgABQR+VscwlZ89kaHfFayrfoMKgHCqMSLIXLTXYPCWuLbo4CTXU9zRogo75wjP2zr2nfqiWM6AiUxVPm7oUjzmwovTa\" \"/Downloads/Verus-CLI-Linux-v1.0.5-x86_64/Verus-CLI-Linux-v1.0.5-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AR/tJgABQR+VscwlZ89kaHfFayrfoMKgHCqMSLIXLTXYPCWuLbo4CTXU9zRogo75wjP2zr2nfqiWM6AiUxVPm7oUjzmwovTa\" b6d9aebadf46e8310ba2f261f1865bb54bfd96c86ef7f9922ed073cde1811cb6\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\n## v1.0.4\nAnnouncing v1.0.4 - CRITICAL, NON-MANDATORY MAINNET UPGRADE\nTHIS UPDATE IS CRITICAL FOR MAINNET DEFI OR CROSSCHAIN WALLET FUNCTIONS, AS IT RECTIFIES POTENTIAL REFUND FAILURES IN EDGE CASES - IT IS NOT REQUIRED FOR MAINNET SYNCHRONIZATION OR MAINNET FUNCTION PAST PBAAS ACTIVATION, BUT IT IS HIGHLY RECOMMENDED.DO BE SURE TO UPGRADE TO v1.0.3 OR LATER BEFORE MAY 23, 2023, EXPECTED BLOCK #2549420FOR CONTINUED TESTNET USE, UPGRADE ASAP### Mainnet improvements:\n* Properly inserts refund addresses in all cases when making DeFi or cross-chain transactions\n* Merge mining improvements from @Hellcatz for higher merge mining performance on all platforms and full pool merge mining support when used in combination with @Hellcatz and @Oink70\u2019s SNomp pool improvements\n* CLI now defaults to mainnet for all PBaaS chains unless -testnet is specified\n* 2 versions of GUI will be released for now, a mainnet and separate testnet version. Full PBaaS support in the wallet will only be for either mainnet or testnet, depending on the version used.\n* Extends deprecation height from the previous 20 weeks to 52 weeks### Testnet fixes/improvements:\n* Separate GUI release for testnet\n* Refund address fixThis the is last expected and recommended release before the mainnet activation, Tuesday at block #2549420, which will add some pool merge mining improvements. Please make sure you update to v1.0.4 or greater before the activation block.### On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles", "./raw_text_input_wiki/release_notes.md"], ["#### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.#### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.#### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.", "./raw_text_input_wiki/release_notes.md"], ["The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.#### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.#### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n### Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay", "./raw_text_input_wiki/release_notes.md"], [" is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n### Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n### Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protoc", "./raw_text_input_wiki/release_notes.md"], ["ols.\n### Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n### Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n### An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as", "./raw_text_input_wiki/release_notes.md"], [" well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n#### Locking and Unlocking IDs\n- **Time Lock:**\n The unlockatblock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST setidentitytimelock \"id@\" '{\"unlockatblock\": <Unlock block height>}'\n```\n- **Time Delay:**\n The setunlockdelay parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST setidentitytimelock \"id@\" '{\"setunlockdelay\": <Unlock block delay>}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["#### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\"", "./raw_text_input_wiki/release_notes.md"], [":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n### Defining a Currency\n#### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is", "./raw_text_input_wiki/release_notes.md"], [" a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a busines", "./raw_text_input_wiki/release_notes.md"], ["s, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["#### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\"\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n#### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration", "./raw_text_input_wiki/release_notes.md"], ["```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffundsverus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`", "./raw_text_input_wiki/release_notes.md"], ["#### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.### DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:** https://www.virustotal.com/gui/file/b1cfb315844850fdd2c89473fb7439c0c021e92d13e0a1db560303f0f83b0235/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/e90b011427be1aa5d78ac2e2d69bc96ee8c2fd8209a97cb51e19a395d0ced94f/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/be9785dfb3438de8a07c405dbfb71eca0477f45c875046a1bc561e819097d347/detection\n**Windows:** https://www.virustotal.com/gui/file/cab29d9bd73d9b1f1cd5dc86b6b6f3f13807d101ef4ae3f224d90e6788ede3b0/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["### Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n#### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AVXjJgABQR9Xa2h4vsscUcQfw7A3tjs0Bk9F7thidKhl4cjgWL5Y9W6aWeuo4ljNYYUJ6NaNo8FXC8vgP4cyNZI4ph/vMGlM\" \"/Downloads/Verus-CLI-Linux-v1.0.4-x86_64/Verus-CLI-Linux-v1.0.4-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AVXjJgABQR9Xa2h4vsscUcQfw7A3tjs0Bk9F7thidKhl4cjgWL5Y9W6aWeuo4ljNYYUJ6NaNo8FXC8vgP4cyNZI4ph/vMGlM\" 56fbb10a12eb44d7dc139ff2cc3fa6a6a231976676257a2328a2856e3421baec\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n## v1.0.3\nAnnouncing v1.0.3 - MANDATORY MAINNET UPGRADE - HOPEFULLY THE LAST IN A WHILE - ACTIVATION DATE HAS BEEN PUSHED BY 2 DAYSFOR CONTINUED MAINNET USE, UPGRADE TO v1.0.3 OR LATER BEFORE MAY 23, 2023, EXPECTED BLOCK #2549420FOR CONTINUED TESTNET USE, UPGRADE ASAP### Mainnet: fixes:\n* Fixes an issue discovered that could have resulted in behavior different than what has been tested in an edge case when mainnet activates### Testnet fixes/improvements:\n* Forgives issues pre-1.0.2 on testnet that were blocking challenge resolution by lacking complete cryptographic proof for cross-chain notarization confirmation### What\u2019s New\nv1.0.3 has extended the API fundrawtransaction to allow Verus Mobile and other applications to easily construct transactions for DeFi conversions and cross-chain operations as well.", "./raw_text_input_wiki/release_notes.md"], ["We expect at least one more non-mandatory release before the mainnet activation, Tuesday at block #2549420, which will add some pool merge mining improvements. Please make sure you update to v1.0.3 or greater before the activation block.### Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles#### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.#### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.", "./raw_text_input_wiki/release_notes.md"], ["IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.#### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.", "./raw_text_input_wiki/release_notes.md"], ["The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.#### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n### Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay ", "./raw_text_input_wiki/release_notes.md"], ["is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n### Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n### Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protoco", "./raw_text_input_wiki/release_notes.md"], ["ls.\n### Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n### Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n### An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as ", "./raw_text_input_wiki/release_notes.md"], ["well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n#### Locking and Unlocking IDs\n- **Time Lock:**\n The unlockatblock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST setidentitytimelock \"id@\" '{\"unlockatblock\": <Unlock block height>}'\n```\n- **Time Delay:**\n The setunlockdelay parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST setidentitytimelock \"id@\" '{\"setunlockdelay\": <Unlock block delay>}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["#### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":", "./raw_text_input_wiki/release_notes.md"], ["10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n### Defining a Currency\n#### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is ", "./raw_text_input_wiki/release_notes.md"], ["a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business", "./raw_text_input_wiki/release_notes.md"], [", \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["#### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\"\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n#### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration", "./raw_text_input_wiki/release_notes.md"], ["```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffundsverus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`", "./raw_text_input_wiki/release_notes.md"], ["#### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.### DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:** https://www.virustotal.com/gui/file/90e3d5d733afb7126ada94beb1e880f28af150846a5d64053d54ebc068b53cf1/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/43e52bed0f2aeda9570bef3a238fa2aab2018c0534f01bd449930f16d68b347d/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/73524e6469755c5727852ca423e1b52ed89e78f774d409e68de4d39e83166e2a/detection\n**Windows:** https://www.virustotal.com/gui/file/fe91ec477a3cfbdfd1ba2d05ce8dad48fec5b7e8e188d8f3433d87cd42f14d3a/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["### Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n#### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AebXJgABQR877X9cSmsrmj3SE08+rgCb0pvwhp7JmSh+m0r2Swg9dhC4Yyra+GWBj0A0fcPH3o7OjvB6P/BMfDsvxFeQVO7e\" \"/Downloads/Verus-CLI-Linux-v1.0.3-x86_64/Verus-CLI-Linux-v1.0.3-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AebXJgABQR877X9cSmsrmj3SE08+rgCb0pvwhp7JmSh+m0r2Swg9dhC4Yyra+GWBj0A0fcPH3o7OjvB6P/BMfDsvxFeQVO7e\" b5ddb0576ac4d1ce5d6cd3c53946b8ca89bdc4e76f680caa822b181d8660199f\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n## v1.0.2\nAnnouncing v1.0.2 - MANDATORY MAINNET UPGRADE\nUPGRADE TO v1.0.2 OR LATER IS MANDATORY FOR CONTINUED MAINNET AND TESTNET USE AFTER MAY 21, 2023, EXPECTED BLOCK #2546600### Mainnet: fixes:\n* Fixes a regression that prevented staking on locked IDs as well as modifying locked IDs### Testnet fixes/improvements:\n* Fixes issues discovered when challenges occurred on the Gravity chain that blocked resolution of cross-chain challenges.\n* Addresses all known issues discovered in testing### What\u2019s New\nv1.0.2 has no feature changes, some minor API fixes, proof improvements, and we believe the third time's a charm \ud83d\ude42. The testnet will transition to the v1.0.2 protocol with no reset required, Wednesday, May 17, 2023 0:00:00, UTC.", "./raw_text_input_wiki/release_notes.md"], ["### Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles#### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.#### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.#### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.", "./raw_text_input_wiki/release_notes.md"], ["The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.#### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.#### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n### Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay", "./raw_text_input_wiki/release_notes.md"], [" is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n### Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n### Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protoc", "./raw_text_input_wiki/release_notes.md"], ["ols.\n### Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n### Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n### An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as", "./raw_text_input_wiki/release_notes.md"], [" well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n#### Locking and Unlocking IDs\n- **Time Lock:**\n The unlockatblock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST setidentitytimelock \"id@\" '{\"unlockatblock\": <Unlock block height>}'\n```\n- **Time Delay:**\n The setunlockdelay parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST setidentitytimelock \"id@\" '{\"setunlockdelay\": <Unlock block delay>}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["#### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\"", "./raw_text_input_wiki/release_notes.md"], [":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n### Defining a Currency\n#### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is", "./raw_text_input_wiki/release_notes.md"], [" a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a busines", "./raw_text_input_wiki/release_notes.md"], ["s, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["#### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\"\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n#### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration", "./raw_text_input_wiki/release_notes.md"], ["```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffundsverus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`", "./raw_text_input_wiki/release_notes.md"], ["#### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.### DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:** https://www.virustotal.com/gui/file/47bcfc863a510ba1c2b73a90b4485bc586ab0a5b8865588a9dcda7a895bf1ce2/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/fb1f579d0f68e5bb00827a858af3665c9900939fccba89dcb9617739df3eedbd/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/95784a76519c6af601b83e346939a88487481a1eaa4ee0db67c307014631df69/detection\n**Windows:** https://www.virustotal.com/gui/file/53f06a9a5b64fd7a25f7830b013b69c95ea70ce11dbd54f1fb1058d8d5bc7c36/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["### Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n#### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AXm+JgABQR87e2irknAviTmXgC9Jfxda293fn6PtRZP2M0o2dMZ3JClcCC3Tjqy2ss+HwvBFrxvRBAI6zvLOrkd6wwdr/fIz\" \"/Downloads/Verus-CLI-Linux-v1.0.2-x86_64/Verus-CLI-Linux-v1.0.2-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AXm+JgABQR87e2irknAviTmXgC9Jfxda293fn6PtRZP2M0o2dMZ3JClcCC3Tjqy2ss+HwvBFrxvRBAI6zvLOrkd6wwdr/fIz\" 687ffc930582bbed1fffddb5aa406e580d3cb3e9eea890d6152a2c295d78e804\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n## v1.0.1\nAnnouncing v1.0.1 - MANDATORY Mainnet Upgrade, UPGRADE TO v1.0.1 OR LATER IS MANDATORY FOR CONTINUED MAINNET AND TESTNET USE AFTER MAY 21, 2023, EXPECTED BLOCK #2546600### Issues addressed\nIn addition to fixing an issue discovered by cautionfun#3236 on the current public testnet, this version also addresses an issue discovered during additional coverage testing in the oracle based, reversible rip-cord implementations to ensure the ability for the network to respond to any unexpected events quickly, safely, and without compromise to decentralization.", "./raw_text_input_wiki/release_notes.md"], ["### What\u2019s New\nIn addition to the full PBaaS protocol and all capabilities previously described, version 1.0.1 will also include some new capabilities that were previously not in the PBaaS protocol. The capabilities basically extend the idea of a centralized currency to include the ability to launch temporarily centralized currencies, including those that can issue identities. This is achieved by setting the \u201cendblock\u201d on a centralized currency launch of either a token or liquidity basket, enabling:\n 1) Minting of currency on demand by the identity of the currency as part of the `sendcurrency`command.\n 2) Burning a liquidity basket currency, but instead of affecting the supply/reserve ratio as normal burns do, the identity of a centralized currency can also burn currency to affect the reserve ratio weights of the currency.\n 3) Registering identities on a currency. When an identity is registered on a centralized currency, the fee for the registration is not burned into the currency, but sent directly to the identity of the currency. This is true for token or liquidity basket currencies. For decentralized currencies, fees are burned, which on a liquidity basket, puts them into the liquidity pool for all LPs to share in earnings, and for a standard token, reduces the supply and available future registrations on that currency.\n 4) In v1.0.1, setting the endblock of a centralized currency causes all centralized capabilities of the same ID to end, converting it in whatever state it currently is in a decentralized currency with no special control over it after that occurs by any identity on the network.\n 5) v1.0.0 did not allow a decentralized non-liquidity token to register identities. v1.0.1 does.", "./raw_text_input_wiki/release_notes.md"], ["Thanks to ejuliano#8606 for suggesting the initial idea that led to the realization that these features could be added quite easily and with very little protocol risk. All of these new capabilities have had full coverage testing and validation over the past week thanks to @Asherda\u2019s leadership on that front.Meanwhile, @alexenglish, @monkins1010, @asherda, quipacorn#5205, and others have been working on the Ethereum bridge deployment in preparation for this release. The testnet will transition to the v1.0.1 protocol with no reset required, Monday, May 8, 2023 4:00:00 PM, UTC.\n### Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles#### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.", "./raw_text_input_wiki/release_notes.md"], ["#### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.", "./raw_text_input_wiki/release_notes.md"], ["#### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.#### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.#### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registra", "./raw_text_input_wiki/release_notes.md"], ["tion of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n### Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n### Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n### Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset", "./raw_text_input_wiki/release_notes.md"], [" currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n### Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n### Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral c", "./raw_text_input_wiki/release_notes.md"], ["arve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n### An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n#### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `get", "./raw_text_input_wiki/release_notes.md"], ["currencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["#### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRw", "./raw_text_input_wiki/release_notes.md"], ["bvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n### Defining a Currency\n#### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTE", "./raw_text_input_wiki/release_notes.md"], ["ST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```#### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\"\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```", "./raw_text_input_wiki/release_notes.md"], ["Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n#### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```", "./raw_text_input_wiki/release_notes.md"], ["### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffunds", "./raw_text_input_wiki/release_notes.md"], ["verus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`#### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.", "./raw_text_input_wiki/release_notes.md"], ["2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.### DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:** https://www.virustotal.com/gui/file/4d87f5f96a475d138a5e111ca7f13ddec4da546ccceb7308b742db08ecf8fb5e/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/6269809d114d14fe133bab31f945c29407f755627bb1787655ff8973ba67b096/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/eed44b0a8110269eb5b0d3db09a999be3e1f17bd91abe11c18a7ad20c1b47708/detection\n**Windows:** https://www.virustotal.com/gui/file/8e6e96a978c3690183654b497cf7d080d72e6ecb9e0070d2283e7b69c937777a/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/### Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n#### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"Ad+PJgABQR9Zgmo5lAenuOeur65N/uzpvHTnirNh7zZ5bp2jGAfDVWT0FlZEo3TjklPzhSG8rYq1yQLQ/lCIsQaWcIF19TBB\" \"/Downloads/Verus-CLI-Linux-v1.0.1-x86_64/Verus-CLI-Linux-v1.0.1-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"Ad+PJgABQR9Zgmo5lAenuOeur65N/uzpvHTnirNh7zZ5bp2jGAfDVWT0FlZEo3TjklPzhSG8rYq1yQLQ/lCIsQaWcIF19TBB\" 7ebad8a3636a06159fd33a91c25c98538f01afcf44824a9c85fccfadd61b0c4a\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```Announcing v1.0.1 - MANDATORY Mainnet Upgrade, UPGRADE TO v1.0.1 OR LATER IS MANDATORY FOR CONTINUED MAINNET AND TESTNET USE AFTER MAY 21, 2023, EXPECTED BLOCK #2546600### Issues addressed\nIn addition to fixing an issue discovered by cautionfun#3236 on the current public testnet, this version also addresses an issue discovered during additional coverage testing in the oracle based, reversible rip-cord implementations to ensure the ability for the network to respond to any unexpected events quickly, safely, and without compromise to decentralization.", "./raw_text_input_wiki/release_notes.md"], ["### What\u2019s New\nIn addition to the full PBaaS protocol and all capabilities previously described, version 1.0.1 will also include some new capabilities that were previously not in the PBaaS protocol. The capabilities basically extend the idea of a centralized currency to include the ability to launch temporarily centralized currencies, including those that can issue identities. This is achieved by setting the \u201cendblock\u201d on a centralized currency launch of either a token or liquidity basket, enabling:\n 1) Minting of currency on demand by the identity of the currency as part of the `sendcurrency`command.\n 2) Burning a liquidity basket currency, but instead of affecting the supply/reserve ratio as normal burns do, the identity of a centralized currency can also burn currency to affect the reserve ratio weights of the currency.\n 3) Registering identities on a currency. When an identity is registered on a centralized currency, the fee for the registration is not burned into the currency, but sent directly to the identity of the currency. This is true for token or liquidity basket currencies. For decentralized currencies, fees are burned, which on a liquidity basket, puts them into the liquidity pool for all LPs to share in earnings, and for a standard token, reduces the supply and available future registrations on that currency.\n 4) In v1.0.1, setting the endblock of a centralized currency causes all centralized capabilities of the same ID to end, converting it in whatever state it currently is in a decentralized currency with no special control over it after that occurs by any identity on the network.\n 5) v1.0.0 did not allow a decentralized non-liquidity token to register identities. v1.0.1 does.", "./raw_text_input_wiki/release_notes.md"], ["Thanks to ejuliano#8606 for suggesting the initial idea that led to the realization that these features could be added quite easily and with very little protocol risk. All of these new capabilities have had full coverage testing and validation over the past week thanks to @Asherda\u2019s leadership on that front.Meanwhile, @alexenglish, @monkins1010, @asherda, quipacorn#5205, and others have been working on the Ethereum bridge deployment in preparation for this release. The testnet will transition to the v1.0.1 protocol with no reset required, Monday, May 8, 2023 4:00:00 PM, UTC.\n# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.", "./raw_text_input_wiki/release_notes.md"], ["### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.", "./raw_text_input_wiki/release_notes.md"], ["### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registratio", "./raw_text_input_wiki/release_notes.md"], ["n of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset curre", "./raw_text_input_wiki/release_notes.md"], ["ncies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-out", "./raw_text_input_wiki/release_notes.md"], ["s of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencycon", "./raw_text_input_wiki/release_notes.md"], ["verters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwb", "./raw_text_input_wiki/release_notes.md"], ["vCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n## Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTES", "./raw_text_input_wiki/release_notes.md"], ["T sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\"\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```", "./raw_text_input_wiki/release_notes.md"], ["Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```", "./raw_text_input_wiki/release_notes.md"], ["### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffunds", "./raw_text_input_wiki/release_notes.md"], ["verus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.", "./raw_text_input_wiki/release_notes.md"], ["2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.### DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:** https://www.virustotal.com/gui/file/4d87f5f96a475d138a5e111ca7f13ddec4da546ccceb7308b742db08ecf8fb5e/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/6269809d114d14fe133bab31f945c29407f755627bb1787655ff8973ba67b096/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/eed44b0a8110269eb5b0d3db09a999be3e1f17bd91abe11c18a7ad20c1b47708/detection\n**Windows:** https://www.virustotal.com/gui/file/8e6e96a978c3690183654b497cf7d080d72e6ecb9e0070d2283e7b69c937777a/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/### Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"Ad+PJgABQR9Zgmo5lAenuOeur65N/uzpvHTnirNh7zZ5bp2jGAfDVWT0FlZEo3TjklPzhSG8rYq1yQLQ/lCIsQaWcIF19TBB\" \"/Downloads/Verus-CLI-Linux-v1.0.1-x86_64/Verus-CLI-Linux-v1.0.1-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"Ad+PJgABQR9Zgmo5lAenuOeur65N/uzpvHTnirNh7zZ5bp2jGAfDVWT0FlZEo3TjklPzhSG8rYq1yQLQ/lCIsQaWcIF19TBB\" 7ebad8a3636a06159fd33a91c25c98538f01afcf44824a9c85fccfadd61b0c4a\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\n## v1.0.0\nAnnouncing v1.0.0 - PBaaS Mainnet Upgrade, UPGRADE TO v1.0.0-x MANDATORY FOR CONTINUED MAINNET AND TESTNET USE AFTER MAY 21, 2023, EXPECTED BLOCK #2546600### What\u2019s New\nThis release delivers on every part of the vision (and most stretch goals) either described in the vision paper of June 2018 or ever planned for the PBaaS release. Thanks to the incredible combined efforts of so many people in the community ranging from development, companies and projects joining and their open contributions (Valu/Arkeytyp, CHIPS, vDEX, VaultAlert, cragslist, and more) to community members supporting users to helping educate others who can contribute as well, we have run these protocols now for years as we\u2019ve improved them, and all of these capabilities will go live on the Verus mainnet May 21, 2023, with the activation expected targeting block 2546600.As a community, we\u2019ve discussed what the Verus PBaaS protocol can do for years. Now that it has existed on testnet for as long as it has, only those who have either been part of those conversations or experienced it first hand have a real sense for how much better Verus PBaaS is as a solution for cross-chain, DeFi AMMs, decentralized markets, self-sovereign provable recoverable IDs, NFT capabilities, anti-phishing, anti-MEV, scale, or just about any of the challenges people have on crypto platforms today. In fact, as we prepare for activation of this protocol that enables so many new use cases for crypto, not to mention easy onboarding when entrepreneurs discover how to really leverage VerusIDs, PBaaS is so far beyond what people are experiencing on any crypto platform today that it has been easy to dismiss our community as describing the impossible.", "./raw_text_input_wiki/release_notes.md"], ["Once we are live on mainnet and people can actually use all of this themselves, along with every project, chain and currency on the PBaaS network and EVERY ERC20 or ERC721 on Ethereum or even bridged to Ethereum, the truth of Verus will be self-evident, and those who build on Verus will more easily build faster, better, more secure apps and services with the possibility of provable identity + privacy, crowdfunded projects, businesses, economies, and public infrastructure efforts all seamlessly integrated into UIs that do not need business deals, permission, or any centralized infrastructure to connect services and users, enabling everyone to communicate in provable, private, or public ways that always include bidirectional, secure commerce of all kinds.This core capabilities of this release include (lots to learn to understand it all, but here\u2019s a partial list):1) **Mainnet PBaaS Activation MAY 21, 2023, EXPECTED BLOCK #2546600**: v1.0.0 is MANDATORY, meaning that you will need to upgrade to this release or a later version v1.0.0-x, before MAY 21, 2023 to stay reliably connected to mainnet. Testnet will also be reset within the next day, and this release will allow you to connect to the new testnet, which we see as a core development platform and staging area for the Verus PBaaS network and have no plans to reset in any foreseeable future.", "./raw_text_input_wiki/release_notes.md"], ["2) **Verus Intersystem Protocol (VIP) - Layer 0 Multichain and Inter-chain Protocol**: To our knowledge, the VIP protocol is the only fully decentralized, provable cross-chain technology available on any network that is based on cryptographic proofs of each chain with optional witnesses to confirm chain state. From what we\u2019ve been able to learn about LayerZero, Cosmos, Polkadot, Thorchain or others, VIP is different from (though closest in some ways to LayerZero), superior to, and more decentralized than all other cross-chain protocols we have seen. We can of course get into any level of discussion on the topic, but expect more descriptions and educational material to follow, now that the protocol was originally conceived of 5 years ago, and has been developed and tested/hardened for years.3) **VerusID Content Multimaps - Unlimited Provable Data for Every VerusID**: With the PBaaS upgrade, VerusIDs gain a powerful new capability that can be used for social networking, voting, oracles, publishing any information, various forms of provable attestations, ratings, and much, much more. With the scalability of PBaaS and VerusID content multimaps together, the Verus PBaaS network becomes the most scalable, permissionless, provable source of human data from which AIs can learn about humanity in the world. We don\u2019t believe anything else even comes close, and with the recent rise of AI, it feels great to have this come together as a core original goal at a very appropriate and important time in history.", "./raw_text_input_wiki/release_notes.md"], ["4) **Permissionless Chain, Token, and Liquidity Basket Currency Launches**: Whether you are looking to crowdfund an effort in a manner much like Kickstarter or IndieGoGo, sell identities to which you expect to add value or that are sub-IDs of a very cool root ID, or launch an entirely new blockchain economy and blockchain that starts with all of the Verus technology and a bridge to Verus and Ethereum from day 1, Verus is probably the best platform for you. In fact, as we were planning for the next testnet and wanted to have our own version of DAI to use in the bridge, since we want only decentralized currencies in the live mainnet bridge, we used a command to launch a token on the old testnet, exported it and all its supply to Ethereum\u2019s Goerli on the existing bridge, and that will be the DAI proxy/simulant that we will use on the new testnet. It saved us all some time, proving that Verus PBaaS will also be the easiest, most efficient way to launch even an Ethereum ERC20, whether that ERC20 represents a token, DeFi basket, or even another PBaaS blockchain \ud83d\ude42", "./raw_text_input_wiki/release_notes.md"], ["5) **Decentralized Ethereum Bridge**: Shortly after PBaaS activates on mainnet, the Ethereum bridge will launch as a decentralized gateway and 1:1 provably mapped currency called \u201cvETH\u201d on the Verus network, also available to all PBaaS chains. The Ethereum bridge will also include a 100% backed basket of 33% Verus, 33% Ethereum, and 33% DAI, which will have the following functions:\nAuto conversion of fees from Verus <-> Ethereum when sending cross chain, based on the on-chain conversion price in the liquidity basket\nPermissionless ability to register *.vETH IDs, which in addition to the normal sub-ID capability of creating a single token that has control over the ID and can be exported to Ethereum as an automatic ERC721 NFT, can alternately be used to create a \u201cmapped currency\u201d, which can be provably mapped 1:1 to any ERC20 currency on the Ethereum network by exporting it to the vETH bridge. Only Verus root IDs, and IDs of a gateway can create mapped currencies to a gateway.\nDecentralized, fair bridge launch. The vETH bridge will launch as other currencies, chains, and gateways can launch, including the bridge converter. When the bridge launches, the contracts will have a surplus of Verus that comes from the fees paid to launch the gateway. In the protocol, that surplus is first used to solve the chicken and egg problem of none of one currency on the other chain. The contracts will cover the Verus fees for all sends from Ethereum before the Bridge converter launches, the liquidity basket becomes active, and the bridge recognizes that launch. Once that happens, the remainder of \u00bd the fees (5000 VRSC) that are left over from the launch and did not go to miners and stakers or pay Verus fees for people sending from Ethereum", "./raw_text_input_wiki/release_notes.md"], ["6) **The Verus Fee Pool and Rewards**: Another technology and solution unique to Verus, the Verus Fee Pool technology goes live with PBaaS. What this means is that as people use the cross-chain, DeFi, or purchase/register IDs on the network, the miner or staker will put all fees into the on-chain \u201cfee pool\u201d, and then take 1/100th of the pool in addition to the block reward. This gives everyone incentive to still prioritize transactions based on fees, while preventing validators from gaming the fee system by washing fees-in vs. fees-out or working to reorg/rewind to capture a particularly juicy block reward. Instead, this technology aligns all validator incentives with the health/proper operation of the network and creates a circular on-chain economy that can last well beyond block rewards.For those who actually understand the challenges actual users have in crypto today, this release represents a historic move forward in public cryptographic networks and credibly and actually neutral infrastructure for society-wide human and AI collaboration and learning. As a community, this version really does realize the vision laid out in the original Verus Vision Paper, and at the same time provides much more than was described there. We are a community of individuals, and it is only because that is what we are that we have all arrived here together. The rest of the world is stuck on their Munchausen\u2019s protocols, trying to figure out how to share the front-running and back-running spoils taken from users, but Verus activation gives them a better path forward.", "./raw_text_input_wiki/release_notes.md"], ["As always, we do not promise, we describe a vision and welcome contributors from everywhere. Now that we, as a community, have delivered on the original phases of the vision together, it is time for all of us to consider what we might want to build over this incredible, geoscale, ID-enabled, fully decentralized platform. Our next efforts across the community should be to realize the promise of this network in the use cases we create, use cases that we will have an advantage creating on Verus over any other platform because it really is that much better.### Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles#### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.", "./raw_text_input_wiki/release_notes.md"], ["#### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.", "./raw_text_input_wiki/release_notes.md"], ["#### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.#### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.#### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registra", "./raw_text_input_wiki/release_notes.md"], ["tion of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n### Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n### Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n### Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset", "./raw_text_input_wiki/release_notes.md"], [" currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n### Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n### Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral c", "./raw_text_input_wiki/release_notes.md"], ["arve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n### An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n#### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `get", "./raw_text_input_wiki/release_notes.md"], ["currencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["#### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRw", "./raw_text_input_wiki/release_notes.md"], ["bvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n### Defining a Currency\n#### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTE", "./raw_text_input_wiki/release_notes.md"], ["ST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```#### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\"\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```", "./raw_text_input_wiki/release_notes.md"], ["Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n#### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```", "./raw_text_input_wiki/release_notes.md"], ["### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffunds", "./raw_text_input_wiki/release_notes.md"], ["verus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`#### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.", "./raw_text_input_wiki/release_notes.md"], ["2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.### DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:** https://www.virustotal.com/gui/file/9700f0d571c9ec1a399b424d862d601ee0a54ee3475c5a851474d3016655263c/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/a7a18bbf80c119fa027bb1df0ae423ce934b6e7448f325f1a51c8b74e968c906/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/2f1f7927e52b5a29c448021e3354a49add03bc87203726c482d75c0b90e5cf6b/detection\n**Windows:** https://www.virustotal.com/gui/file/af996552413cc186ca482e472b980a55efa21a7819e1ed2bbe5392a41f0b971a/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/### Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n#### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AY8+JgABQSBR3wd5yPxBDCKh5vnf6hc3EGmgvR9ZcfIHIlw9P1V5eCNG9jxkOMFx3Gh9s2DUIM1HDdJw7UGlNAPYWJmcnA8/\" \"/Downloads/Verus-CLI-Linux-v1.0.0-x86_64/Verus-CLI-Linux-v1.0.0-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AY8+JgABQSBR3wd5yPxBDCKh5vnf6hc3EGmgvR9ZcfIHIlw9P1V5eCNG9jxkOMFx3Gh9s2DUIM1HDdJw7UGlNAPYWJmcnA8/\" 2bd9b9387ad58ebc208cfa83513fb8b5ba3226401fe8fe1fcdba607e780cf869\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\n## v0.9.9-5\nAnnouncing v0.9.9-5 - CRITICAL PRIVACY FIX PARSING FRIENDLY PRIVATE NAMES, CRITICAL UPDATE FOR RELIABLE TESTNET OPERATION### Mainnet Changes - Wallet Hardening\nv0.9.9-5 Fixes an issue introduced in v0.9.9 during the ID name hardening work that prevented parsing id@:private to the z-address of id@ when running a native node. Instead, such an address parsed to the main id@. Since this issue could impact on-chain privacy of someone intending to send to or from a private address and using friendly names, we are considering this a critical privacy release.This version also prevents the wallet from crediting transactions that can be constructed to make a burn look like a spendable output, ensuring that unspendable funds are not added to a wallet or address balance. @Alrighttt, who has been focusing on Verus security testing, reported a way that someone might create such an output, and we appreciate that it is before we have ever seen such transactions on the public or test networks. Thanks @Alrighttt for the report and discretion that helps keep them off the network(s) altogether! We recommend that everyone update as soon as possible to version 0.9.9-5 or later.We are working towards the mainnet PBaaS upgrade version 1.0.0, but we cannot put a specific date beyond \ud83d\udd1c on its release.### What\u2019s New for TestNet\nThis release fixes hopefully the last remaining issue that was causing testnet users to experience sync issues on PBaaS chains.There are no other significant changes.### Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles", "./raw_text_input_wiki/release_notes.md"], ["#### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.#### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.#### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.", "./raw_text_input_wiki/release_notes.md"], ["The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.#### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n### Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay ", "./raw_text_input_wiki/release_notes.md"], ["is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n### Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n### Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protoco", "./raw_text_input_wiki/release_notes.md"], ["ls.\n### Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n### Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n### An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as ", "./raw_text_input_wiki/release_notes.md"], ["well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n#### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["#### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\"", "./raw_text_input_wiki/release_notes.md"], [":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n### Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is ", "./raw_text_input_wiki/release_notes.md"], ["a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a busines", "./raw_text_input_wiki/release_notes.md"], ["s, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["#### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\"\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n#### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration", "./raw_text_input_wiki/release_notes.md"], ["```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffundsverus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`", "./raw_text_input_wiki/release_notes.md"], ["#### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.### DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:** https://www.virustotal.com/gui/file/c72b18c9ad304874f47502d240b494b1b82d9d82c4953769804ccf4e434de148/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/350d646df8d6b3ec204695852cd415f1ef65e4177475cee4dbe62daab3f04906/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/177d6a8a4e2693ddd0c144f47f6dac477aedaac5a02d0b7b05e2914bb67bf43f/detection\n**Windows:** https://www.virustotal.com/gui/file/7d2fbe3b1d79988fa65a57d8310666d37fd62ac0eb3321462a8ebb249a47bf00/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["### Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n#### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"Adu/JQABQSB8RI2SQ6GBoJeUrJB1yficCCbEJ8o9oMgjS34zTJv0KD8hMX1urP+vzjMmmtBpsf/Ax1UXW+1Mz/1n665VCrXc\" \"/Downloads/Verus-CLI-Linux-v0.9.9-5-x86_64/Verus-CLI-Linux-v0.9.9-5-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"Adu/JQABQSB8RI2SQ6GBoJeUrJB1yficCCbEJ8o9oMgjS34zTJv0KD8hMX1urP+vzjMmmtBpsf/Ax1UXW+1Mz/1n665VCrXc\" 9eb4bbfc466e2a8e63cae3b90490ea6779e894ab4381256418516df96f93fab2\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n## v0.9.9-4\nAnnouncing v0.9.9-4 - RECOMMENDED FOR MAINNET, MANDATORY UPDATE FOR RELIABLE TESTNET OPERATION### Mainnet Changes\nLow level stakeguard improvements, no functional changes### What\u2019s New for TestNet\nThis release fixes an issue that was causing testnet users to experience sync issues on chains that had more than one oracle upgrade for the same capability activated.There are no other significant changes.### Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles", "./raw_text_input_wiki/release_notes.md"], ["#### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.#### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.#### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.", "./raw_text_input_wiki/release_notes.md"], ["The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.#### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.#### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n### Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay", "./raw_text_input_wiki/release_notes.md"], [" is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n### Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n### Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protoc", "./raw_text_input_wiki/release_notes.md"], ["ols.\n### Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n### Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n### An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as", "./raw_text_input_wiki/release_notes.md"], [" well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n#### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["#### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\"", "./raw_text_input_wiki/release_notes.md"], [":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n### Defining a Currency\n#### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is", "./raw_text_input_wiki/release_notes.md"], [" a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a busines", "./raw_text_input_wiki/release_notes.md"], ["s, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["#### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\"\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n#### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration", "./raw_text_input_wiki/release_notes.md"], ["```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffundsverus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`", "./raw_text_input_wiki/release_notes.md"], ["#### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.### DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:** https://www.virustotal.com/gui/file/d4e1e6fe568145b847f8a8b46fd21bb751a83bd9cd9849aae68a590e08c16d0e/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/e2730182906fd866728c23cfd5edcaa7f33a4941a730ae6d06cd193b04e9a924/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/1e4bb2641771d4121e235b5937947d8e0e28d929ed8aa79340390b2ffae11b4d/detection\n**Windows:** https://www.virustotal.com/gui/file/afb3fee31caeab77cfdbb6a8765e80ae418c25ce61002baea73f6fc3a2f75bb5/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["### Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n#### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AUqqJQABQR9eyv2N6JbDY8HAvGMn5mR2NYLW3sA0jbud0we0KNyGuAV4Upp/qPgl9265PL4ZkjBLY45BrkIstubavegqwn+u\" \"/Downloads/Verus-CLI-Linux-v0.9.9-4-x86_64/Verus-CLI-Linux-v0.9.9-4-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AUqqJQABQR9eyv2N6JbDY8HAvGMn5mR2NYLW3sA0jbud0we0KNyGuAV4Upp/qPgl9265PL4ZkjBLY45BrkIstubavegqwn+u\" f5577a74e2d279b62aa42d85359f8d608ebc1ad7464556251ea29e7a36b6472c\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n## v0.9.9-3\nAnnouncing v0.9.9-3 - FULLY OPTIONAL UPDATE FOR MAINNET, MANDATORY UPDATE FOR CONTINUED TESTNET OPERATION### Mainnet Changes - no protocol changes\nV0.9.9-3 introduces the `prunespentwallettransactions` CLI command and RPC API, providing a method for holders on testnet or mainnet of very large wallets to prune older spent transactions, which can improve performance for wallets that may be slowing down due to size. Thanks @Himu007 for the PR! There are no mainnet protocol changes in v0.9.9-3 over the prior release.", "./raw_text_input_wiki/release_notes.md"], ["### What\u2019s New for TestNet\nThis release includes an activation that allows a major upgrade to the testnet Ethereum bridge contracts that is both not expected to be needed again on testnet and not ever needed on mainnet with the new contract upgrade model. This upgrade should clear all known issues on the bridge to Goerli, meaning any remaining bridge transactions will be delivered, and the ETH bridge should then be fully functional.### The Path for PBaaS to Mainnet\nThis testnet has actually been through a lot already, more than we expected before mainnet, and this last experience, along with its full restoration of cross-chain and all function has been very useful and was the impetus for the Verus Oracle Notification technology. In the process of getting here, we implemented the necessary changes and fixes to get everything back on track, but we also have remnants of these events in the daemon, and on the final protocol, these are there to enable compatibility with the history of testnet, not because we need these upgrades on mainnet PBaaS. It gave us experience, increased confidence, and pushed us to develop a fast, decentralized network response capability. At the same time, it would be best for our code base, both on the Verus side and in the ETH contracts if that testnet history is removed from the code before mainnet activation. Doing so would make the next upgrade incompatible with today\u2019s testnet and its earlier history.As a result, we have decided that we will create one final testnet, but this time, we would do it a little differently than in the past. We will extend the pre-PBaaS upgrade on the existing testnet to a future date via the oracles. If you have started a chain and control the default oracle on any chain, please check the #pbaas-development channel for instructions on setting your oracle to extend the upgrade.", "./raw_text_input_wiki/release_notes.md"], ["We will leave the current testnet running and fully functional, as we prepare the next release, which we expect to be ready for a mainnet PBaaS activation. We will effectively abandon this testnet and leave it running long enough to overlap with the next and final testnet instance before PBaaS release. You should be able to actually send currencies over from the first testnet to the second via Ethereum\u2019s Goerli testnet, even map some VRSCTEST-CLASSIC or something else through the bridge, but we do not intend to update that daemon again, or continue to run nodes or notaries on the old test network for more than a couple weeks after the new testnet goes live.Thanks for all your help and contributions, both already made and those to come for this historic upcoming release!### Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles", "./raw_text_input_wiki/release_notes.md"], ["#### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.#### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.#### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.", "./raw_text_input_wiki/release_notes.md"], ["The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.#### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.#### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n### Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay", "./raw_text_input_wiki/release_notes.md"], [" is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n### Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n### Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protoc", "./raw_text_input_wiki/release_notes.md"], ["ols.\n### Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n### Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n### An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as", "./raw_text_input_wiki/release_notes.md"], [" well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n#### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["#### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\"", "./raw_text_input_wiki/release_notes.md"], [":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n### Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is ", "./raw_text_input_wiki/release_notes.md"], ["a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a busines", "./raw_text_input_wiki/release_notes.md"], ["s, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["#### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\"\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n#### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration", "./raw_text_input_wiki/release_notes.md"], ["```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffundsverus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`", "./raw_text_input_wiki/release_notes.md"], ["#### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.### DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:** https://www.virustotal.com/gui/file/d59a5a175ac71d43cf4c69076de70fb0a97a5cd09569c3beedd1bddd1255c872/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/0ad8752a41a29b469fa2d62d493ec088a65c7b2f514a2035fcc0e64b2ea05010/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/9d1fe67ec99f3da3d300c3294af4ad3458015f1a6b1552b7b6be83b07909626b/detection\n**Windows:** https://www.virustotal.com/gui/file/e243faa448e5f941d7fffe85fb4df12f461ed525d33521b6d774f9e9144066cd/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["### Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n#### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AcKVJQABQR8REvfAnC1o2X3i+ya+XijCwxWtNunasCWLtCP5tZsdDm9Zg0kxb8k95KWLZwH7QZMkirXreo/bNHmo+c5DeKgE\" \"/Downloads/Verus-CLI-Linux-v0.9.9-3-x86_64/Verus-CLI-Linux-v0.9.9-3-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AcKVJQABQR8REvfAnC1o2X3i+ya+XijCwxWtNunasCWLtCP5tZsdDm9Zg0kxb8k95KWLZwH7QZMkirXreo/bNHmo+c5DeKgE\" 50229f3f126cc77abaf6ea4e28d27d6c5ba25acbbaae9c6bff48b1f73924ead0\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n## v0.9.9-2\nAnnouncing v0.9.9-2 - CRITICAL SECURITY UPDATE FOR MAINNET AND REQUIRED UPDATE TO RESUME SUCCESSFUL MERGE MINING NOTARIZATION ON TESTNET#### Important Mainnet Security Updates**\nv0.9.9-2 introduces new mitigation code for the **Rab13s** vulnerability, announced by Halbourne 3 days ago as a zero day vulnerability in over 280 blockchains, including Zcash and Verus, that could allow someone to attack and bring down specific nodes that they may target through exhausting the node\u2019s resources. The Verus fix adapts a fix implemented in Zcash that also does a better job of preserving privacy while gossiping transactions around the network by making it harder to track their node of origin via listening nodes.This release also includes an important update of the OpenSSL library, which Verus uses for encrypted node connections and addresses a buffer overflow vulnerability in that library.", "./raw_text_input_wiki/release_notes.md"], ["#### What\u2019s New for TestNet\nThis release re-enables cross-chain notarization, and represents the completion of a great deal of learning from the first roll out of auto notarization. Basically, we encountered two issues:1) There was a notarization bug in a significantly updated approach that caused notarizations to fork, effectively simulating a worst case, unmitigated attack on the notarization system. While that did not cause the system to fail per se, it resulted in the generation of many perceived, although not real, notarization forks on the network.2) Due to our effort to err on the side of more evidence than we believed was sufficient with auto notarization, then optimize to reduce the proofs required, the protocol was simply taking too long and generating too large proofs to be reasonable, required, or what we need on mainnet in any real scenario.As a result, we will take a few days to change some parameters in the auto notarization protocol that will both reduce the total and maximum amount of proof required, as well as provide a sufficient level of cryptographic proof, similar in strength to the current proof model with more efficient and selective proof choices. We don\u2019t expect this important step to take long, and until then, we will leave testnet on the pre-PBaaS to mainnet preparatory state.", "./raw_text_input_wiki/release_notes.md"], ["The good news is that since we have the new Verus Notification Oracle technology, we can enable everyone running on the current testnet to remain connected as all cross-chain transactions to and from PBaaS chains will resume flowing. We are still seeing an error in BridgeKeeper, but since this release includes a mainnet security update and addresses all other known issues on testnet, we\u2019ll release this immediately and update Bridgekeeper as soon as possible. In order to merge mine PBaaS chains with Verus or the Ethereum bridge to Goerli going forward, you will need to update to v0.9.9-2, which everyone should run for mainnet anyhow.Once you update, please feel free to resume merge mining all PBaaS chains and Verus. You will need to wait for the BridgeKeeper update to be able to merge mine and stake with Ethereum\u2019s Goerli.Thanks for all your testing! We\u2019ve learned a great deal from this upgrade, and although it may feel like a delay that we took the time to learn and address it in place on the public network before moving on, this learning and consequent hardening will ensure the mainnet release will be more hardened than ever. Next steps are to upgrade auto notarization to be resilient to anything like this level of buildup over weeks automatically and prepare the mainnet release. Join us in testing everything in the #pbaas-development channel. Contribute as you learn and build, and let's all make history together!\n### Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles", "./raw_text_input_wiki/release_notes.md"], ["#### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.#### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.#### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.", "./raw_text_input_wiki/release_notes.md"], ["The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.#### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.#### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n### Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay", "./raw_text_input_wiki/release_notes.md"], [" is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n### Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n### Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protoc", "./raw_text_input_wiki/release_notes.md"], ["ols.\n### Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n### Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n### An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as", "./raw_text_input_wiki/release_notes.md"], [" well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n#### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["#### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\"", "./raw_text_input_wiki/release_notes.md"], [":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n### Defining a Currency\n#### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is", "./raw_text_input_wiki/release_notes.md"], [" a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a busines", "./raw_text_input_wiki/release_notes.md"], ["s, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["#### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\"\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n#### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration", "./raw_text_input_wiki/release_notes.md"], ["```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffundsverus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`", "./raw_text_input_wiki/release_notes.md"], ["#### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.### DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:** https://www.virustotal.com/gui/file/0e5e685be2d8a28b805ecc85cfff52114aafb593343c1221390976543e03a1de/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/adc5382cf84b84955a0601b33e634e4c3e15b9c543d1224a87785815f357646e/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/b94081663983ab4412eea7939d9ef1a5618767e586a48693dccd825a2a619d7c/detection\n**Windows:** https://www.virustotal.com/gui/file/4a4dde2751f3deae34d4795daae5a981a7541a568f59d83eece5cb895cf0ef34/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["### Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n#### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"Ae1xJQABQSCusp3AYTcIlTUklLlDl7goo3n1773y1jIR73JtLLHFgjjwpC/tvuDcJ8hdj/voxmHU2WmTKq7LkVaTAi/EZD1V\" \"/Downloads/Verus-CLI-Linux-v0.9.9-2-x86_64/Verus-CLI-Linux-v0.9.9-2-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"Ae1xJQABQSCusp3AYTcIlTUklLlDl7goo3n1773y1jIR73JtLLHFgjjwpC/tvuDcJ8hdj/voxmHU2WmTKq7LkVaTAi/EZD1V\" 51813c20a4fd94870987dec24bc41606f27bd26c29952ea12f51a8204a39ae37\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n## v0.9.9-1\nAnnouncing v0.9.9-1, MANDATORY FOR TESTNET, no mainnet changesThis release implements a fix for communication with BridgeKeeper for the Testnet Goerli Ethereum Bridge, as well as edge-case notarization improvements. We need every testnet participant to upgrade to this version as soon as possible to resume notarizations for the ETH bridge and the pbaas chains. Once enough people upgrade, the testnet upgrade can be broadcasted via oracle and we can get closer to getting pbaas on mainnet.### Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles", "./raw_text_input_wiki/release_notes.md"], ["#### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.#### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.#### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.", "./raw_text_input_wiki/release_notes.md"], ["The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.#### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.#### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n### Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay", "./raw_text_input_wiki/release_notes.md"], [" is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n### Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n### Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protoc", "./raw_text_input_wiki/release_notes.md"], ["ols.\n### Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n### Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n### An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as", "./raw_text_input_wiki/release_notes.md"], [" well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n#### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["#### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\"", "./raw_text_input_wiki/release_notes.md"], [":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n### Defining a Currency\n#### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is", "./raw_text_input_wiki/release_notes.md"], [" a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a busines", "./raw_text_input_wiki/release_notes.md"], ["s, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["#### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n#### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration", "./raw_text_input_wiki/release_notes.md"], ["```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffundsverus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`", "./raw_text_input_wiki/release_notes.md"], ["#### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.### DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:** https://www.virustotal.com/gui/file/0eae0bb549e611d24315e726e4f10a13f4c9c548c9158cb3988e036b279da4c3/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/5455afbf15a4c0caace25ffab4aa1ebd163db9ff4eec929dbdbf53a2c152535d/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/f4ce5271b9c35cba144b8f79f2552590ce805fd8265d20aa156c4bb6d04ad29e/detection\n**Windows:** https://www.virustotal.com/gui/file/faa39e0b61fab0dda9e697deafc3d3250a81c737349db7ea4f64583969135daf/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["### Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n#### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AVBfJQABQSAcInXeVZTA3kTri4vGTRQjZwceXzhrMY6bMy+vLatPSjONfaXXrDU6N2sHsiYqNuHRs+vzm9brZDmk1NlqNdNl\" \"/Downloads/Verus-CLI-Linux-v0.9.9-1-x86_64/Verus-CLI-Linux-v0.9.9-1-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AVBfJQABQSAcInXeVZTA3kTri4vGTRQjZwceXzhrMY6bMy+vLatPSjONfaXXrDU6N2sHsiYqNuHRs+vzm9brZDmk1NlqNdNl\" 3bda41e7f53ab13a0f75a45514974a20d7ca470c1ccb9fcbb9743c02c68e3642\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n## v0.9.9\nAnnouncing v0.9.9 - PBaaS Mainnet Preparation Release, MANDATORY FOR MAINNET AND CONTINUED TESTNET USE### What\u2019s New\nThere is so much new and important in v0.9.9, and we are so close to the mainnet PBaaS release that this is a hard announcement to keep to a digestible size. Key points:1. **Preparing for #LaunchPBaaS**: v0.9.9 is MANDATORY, meaning that you will need to upgrade to this release ASAP to stay reliably connected to mainnet after the first preparatory PBaaS upgrade is triggered, both for testnet and mainnet. While the current deadline for being upgraded is in 1 week, it is a soft fork that we would like to activate as soon as possible, and if we can believe that we have more than 50% of the validating network updated earlier than 1 week, we will trigger the activation with our Oracle Notification Technology described in 2. **(Mainnet + Testnet)**", "./raw_text_input_wiki/release_notes.md"], ["2. **Enabling Seamless Decentralized Network Upgrades**: This release includes a Verus invention of consensus-capable oracle notifications built into the core protocol, which enable dynamic coordinated consensus changes that can be triggered at a time decided after the actual release which enables them, all without any compromise on decentralization. The Verus Community may decide that we are ready to go earlier than one week on this upgrade and activate it, even before its scheduled time. The good news is that this first test upgrade will primarily affect testnet and prepare for the mainnet PBaaS upgrade, so it is a perfect test case for a mainnet test run before we #LaunchPBaaS. This release actually has the ability to upgrade mainnet to PBaaS, but we believe it is prudent to have at least some time on this new protocol on testnet before the v1.0 release, which will upgrade mainnet. If we make no additional changes to the protocol in this release, which we do not intend to do at this time, this version may be able to follow the v1.0 upgrade. If we determine that it cannot, the oracle upgrade technology will enable the daemon to recognize that it is not capable and request that the user upgrade to a newer version without requiring a bootstrap for the upgrade. **(Mainnet + Testnet)**", "./raw_text_input_wiki/release_notes.md"], ["3. **This upgrade fixes all known testnet issues with no reset**: Using v0.9.9, you should be able to sync fully and resume all cross-chain operations on the Verus test network, if you were not able to perform cross-chain operations or sync to the network on the prior version. As mentioned, someone seems to have mined with an intermediate version along the way on testnet and made the network unavailable without a bootstrap on the older daemon. This version should fix that issue as well as any cross-chain difficulties. Auto-notarization will be enabled on testnet in sync when the testfork executes. Until then, all witnessed cross-chain operations should be able to resume, if they have had difficulty. **(Testnet until the #LaunchPBaaS release)**", "./raw_text_input_wiki/release_notes.md"], ["4. **Bridging Blockchain Networks Without Witnesses**: v0.9.9 is the first release of any blockchain protocol anywhere that we know of which enables cryptographically provable, cross-chain bridging across Verus and all PBaaS and other connected blockchains in the network, either combined with or independent of the need for notary witnesses. With notary witnesses, cross-chain transactions complete faster, but they are also checked against cryptographic evidence, making it difficult to impossible for anyone, including notary witnesses to take any action, even colluding with validators that would go against the wishes of the most chain power. We have been referring to this new cross-chain consensus technology as \u201cauto-notarization\u201d, as that is what it actually is, but it would also be accurate to call it Proof of Proof of Power, as that is how it works. For purposes of ensuring everyone understands the state of the technology, it is fully functional and we have taken great care to ensure it is sufficiently secure, but we have not yet had the protocol proven to an academic standard. Because of that, while it provides a security fall-back against misbehaving notary witnesses and will be fully functional and we believe sufficiently secure without notary witnesses on release, we currently recommend toconsider the protocol unproven at this time and that any serious PBaaS chains be launched with operational notary witnesses until further notice.", "./raw_text_input_wiki/release_notes.md"], ["Using `\u201cnotarizationprotocol\u201d:1`, which is also the default, a chain launch can specify notary witnesses that will be used when they do their job. Even if they stop witnessing for any reason, the protocol will fail-over to auto-notarization, ensuring that cross-chain transactions still function as expected, even if just for people to move their assets to another blockchain, although significantly more slowly and based solely on cryptographic proof and challenge resolution between merge miners and stakers. This cross-chain proof and challenge protocol operates even when witnesses are also operating and if miners and stakers continue to prove a more powerful chain than the one witnesses represent, the most powerful chain can still be confirmed. **(Testnet until the #LaunchPBaaS release)**5. **Expanding L1 VerusID APIs**: This release provides a major enhancement to the identity content multimap support with two new APIs, `getidentityhistory` and `getidentitycontent` that provide real-time mempool access and also introduce self-sovereign delete operations to identity content that can be used by applications, making it easy for applications to index, organize, and aggregate an unlimited amount of user content referenced by an identity and made available to the application. This is the technology we used for oracle upgrade notifications, as all of this is available at L1, making it possible to imagine future protocols that can deal smoothly with diverse community opinions worldwide, but always respect the sovereignty and decisions of all members on the network. **(Testnet until the #LaunchPBaaS release)**", "./raw_text_input_wiki/release_notes.md"], ["6. **Introducing Restricted VerusID Staking for PBaaS Chains**: This release enables the stretch goal of restricted ID staking as an option for launching PBaaS chains. This option means that on such a PBaaS chain, only funds controlled by IDs with a parent of that PBaaS chain may stake blocks on that chain. When combined with restricted forms of ID issuance, whether approval or referral required and/or referral rewards, this capability opens up an entire new area for public/private blockchains and applications, as well as government, voting security, corporate, or organizational use cases.**(Testnet until the #LaunchPBaaS release)**\n### Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles#### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.", "./raw_text_input_wiki/release_notes.md"], ["#### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.", "./raw_text_input_wiki/release_notes.md"], ["#### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.#### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.#### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registra", "./raw_text_input_wiki/release_notes.md"], ["tion of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n### Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n### Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n### Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset", "./raw_text_input_wiki/release_notes.md"], [" currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n### Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n### Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral c", "./raw_text_input_wiki/release_notes.md"], ["arve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n### An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n#### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `get", "./raw_text_input_wiki/release_notes.md"], ["currencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["#### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRw", "./raw_text_input_wiki/release_notes.md"], ["bvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n### Defining a Currency\n#### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTE", "./raw_text_input_wiki/release_notes.md"], ["ST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```#### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```", "./raw_text_input_wiki/release_notes.md"], ["Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n#### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```", "./raw_text_input_wiki/release_notes.md"], ["### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffunds", "./raw_text_input_wiki/release_notes.md"], ["verus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`#### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.", "./raw_text_input_wiki/release_notes.md"], ["2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.### DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:** https://www.virustotal.com/gui/file/7816792bbf33f937a9ea0ef6c651005a5f9133ac60dcd3b117f9fc2d44a9a6c3/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/c4b848f380add524da457fe63e97ddd3682a156384b5d0a9605c1469fb3f66fb/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/20b6ae2af76015eafa7436bf8531f857e4d749cc2d976287bcceeff3b88a7feb/detection\n**Windows:** https://www.virustotal.com/gui/file/d75ad92d552d660719785ec53de6f9c766e6bfdd476b2b8720d001af1bd6d12a/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/### Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n#### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AbxTJQABQR+xQsQKWDOIJclDMUHezwk6ghlNOrmDZn5YWoYF4tLodgmAdZu9pefSBP4iCjAm5fFG/6qD44bP0vv1dvdEsz6e\" \"/Downloads/Verus-CLI-Linux-v0.9.9-x86_64/Verus-CLI-Linux-v0.9.9-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AbxTJQABQR+xQsQKWDOIJclDMUHezwk6ghlNOrmDZn5YWoYF4tLodgmAdZu9pefSBP4iCjAm5fFG/6qD44bP0vv1dvdEsz6e\" dc0b5adb8bf5f3375e1be7ff10dc35ba34d7af31269c5254157f5ecf0e12635b\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\nv0.9.6-2, CRITICAL UPDATE FOR MAINNET\nThis release contains a critical update for the Verus daemon. This version does not support testnet, but a future version will be released shortly to support it. For more information on running testnet, please refer to the previous release or the next one.\n# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.", "./raw_text_input_wiki/release_notes.md"], ["IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.", "./raw_text_input_wiki/release_notes.md"], ["The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is", "./raw_text_input_wiki/release_notes.md"], [" to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n", "./raw_text_input_wiki/release_notes.md"], ["## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as", "./raw_text_input_wiki/release_notes.md"], [" private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":1", "./raw_text_input_wiki/release_notes.md"], ["0}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n## Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is a t", "./raw_text_input_wiki/release_notes.md"], ["oken, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business,", "./raw_text_input_wiki/release_notes.md"], [" \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration", "./raw_text_input_wiki/release_notes.md"], ["```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffundsverus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`", "./raw_text_input_wiki/release_notes.md"], ["### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:** https://www.virustotal.com/gui/file/3ba7722ead9c8da84acad5a381cf9632a2f76fa4f170f9a5721d38919ae51e40/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/4c46c71daadfb9b0d66b0c5bc5e6b1ab2a61276dec2153ccb7e9cc096ad35e8b/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/f5eb6d1cbdde1fad413956e563ff0c7eba1f3f2aa8fb60f99d6e7ad24072d185/detection\n**Windows:** https://www.virustotal.com/gui/file/1afcb9d344271cc3bbd2946c7adaaaac25848567eda7dceecdb309a68c3792bf/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AX76JAABQSD/CpNTPN3K3j8wFcIMRYCMh8MDeIwAMK+QAFnlnQoWB2UIM3g7D97KlPAk9T7RPBoXRsUkDK9wtgPDw1XdWH6O\" \"/Downloads/Verus-CLI-Linux-v0.9.6-2-x86_64/Verus-CLI-Linux-v0.9.6-2-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AX76JAABQSD/CpNTPN3K3j8wFcIMRYCMh8MDeIwAMK+QAFnlnQoWB2UIM3g7D97KlPAk9T7RPBoXRsUkDK9wtgPDw1XdWH6O\" f7764f3299120d97a250547287d1beac9a44f4003c433072fe7c9c6cadf28630\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\nv0.9.6-1, RECOMMENDED UPDATE FOR MAINNET, CRITICAL FOR CONTINUED TESTNET AND ETHEREUM BRIDGE (GOERLI) USE**What\u2019s New**\nTHERE IS NO TESTNET RESET, AND ALL OTHER NOTES REMAIN THE SAME AS LAST RELEASE.**v0.9.6-1 has no mainnet changes and fixes the following testnet issues:**\n- Fault when initiating mining and staking on a small number of machines\n- Sync from scratch issues on testnetThis release fixes all reported issues in all community testing. There are no protocol changes, and no known changes required. All network functions should work as intended.", "./raw_text_input_wiki/release_notes.md"], ["## Verus PBaaS and DeFi RC6 - BUG BOUNTIES\nAt this time, we are not aware of any bugs or errors in the DeFi, ID, or PBaaS cross chain protocols on this version of testnet. We do not anticipate any changes to the PBaaS protocol before mainnet release, and we hope you will join us on testnet trying out all of the incredible capabilities and looking for any potential, remaining issues that can possibly be found before mainnet release. While we don\u2019t expect it to be easy to find bugs in the protocol, The Verus Coin Foundation is offering a bounty of at least 500 VRSC (possibly more for security related reports) for the first 10 people (3 still unclaimed) who are first to report any actual protocol bug before mainnet release, meaning failure of a properly executed command or API on a functioning VRSCTEST or PBaaS chain to function as intended. If anyone is first to find and describe the exploit for an exploitable security hole in any part of the protocol, the bounty will be a minimum of 1,000 VRSC, and for a serious potential security issue, 10,000 $VRSC.If you have reported a bug, since the bounties for the 0.9.5+ versions were announced, you are on the list, and someone from the Foundation will reach out to you in the near future.The rest of these release notes are the same as the prior release. We encourage you to drop by the #pbaas-development channel, help the community prepare for mainnet release this coming week, and start building your vision today!## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):", "./raw_text_input_wiki/release_notes.md"], ["- Linux: `~/.komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.", "./raw_text_input_wiki/release_notes.md"], ["IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.", "./raw_text_input_wiki/release_notes.md"], ["The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is", "./raw_text_input_wiki/release_notes.md"], [" to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n", "./raw_text_input_wiki/release_notes.md"], ["## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as", "./raw_text_input_wiki/release_notes.md"], [" private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":1", "./raw_text_input_wiki/release_notes.md"], ["0}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n## Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is a t", "./raw_text_input_wiki/release_notes.md"], ["oken, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business,", "./raw_text_input_wiki/release_notes.md"], [" \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration", "./raw_text_input_wiki/release_notes.md"], ["```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffundsverus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`", "./raw_text_input_wiki/release_notes.md"], ["### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:** https://www.virustotal.com/gui/file/3f1b2713bd7ba9ab01af59834a90720c734e773a9f73cd095a79248cc5a72b28/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/4ef4dbc1f81acb454ba27427e05bbee552b519de3564c4485b36349966c70c81/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/cee56134a3ae6ad6319405b8e058aa0ca650bfccb69436a84888a50fd5892abb/detection\n**Windows:** https://www.virustotal.com/gui/file/5a2e3252f67198cc7b4a247621dd1c8d3d5ecf1d218b2142fa08f8b52cd6c611/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"Aa2MIwABQR+fAcDKYxskjVHMQGGDUkWI4NhJdUS/cotKm8S2OucQhk0/p9FDc9OzvHtyU5FMtuhExlyNabb4+ona6dyu21uu\" \"/Downloads/Verus-CLI-Linux-v0.9.6-1-x86_64/Verus-CLI-Linux-v0.9.6-1-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"Aa2MIwABQR+fAcDKYxskjVHMQGGDUkWI4NhJdUS/cotKm8S2OucQhk0/p9FDc9OzvHtyU5FMtuhExlyNabb4+ona6dyu21uu\" 8cf1ce007e9bd2ff6d1ee68c501e82b5a22ec6eaedab1e5a3c27aa2221bd414a\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Announcing v0.9.6, HIGHLY RECOMMENDED UPDATE FOR MAINNET, MANDATORY FOR NEW, RESET TESTNET AND ETHEREUM BRIDGE (GOERLI) USE\nv0.9.6 RESETS TESTNET AND COMPLETES ALL PROTOCOL UPDATES FEATURES AND CAPABILITIES EXPECTED FOR THE MAINNET PBAAS UPGRADE. WE DO NOT HAVE ANY NEAR TERM PLAN FOR ANOTHER TESTNET RESET AFTER THE v0.9.6 UPGRADE.IF YOU HAVE USED TESTNET WITH VERSIONS PRIOR TO v0.9.6, MAKE SURE TO DELETE AND CLEAR ANY EXISTING TESTNET DATA FOLDERS AS DESCRIBED IN THE RELEASE NOTES LINKED BELOW.## What\u2019s New\n### For mainnet, v0.9.6 fixes the following issues:- An error in fee calculation that can result in nodes having difficulty accepting large, complex transactions with many z-outputs into their mempools.\n- Marketplace offers were not showing up properly under getoffers.\n- When using the `-privatechange` wallet option with a private change address, attempts to make marketplace offers could fail.", "./raw_text_input_wiki/release_notes.md"], ["### For testnet, v0.9.6 adds the following:\n- Caching and performance improvements for advanced PBaaS functions, providing enough performance to keep high transaction bandwidth and/or cross-chain throughput under load for each chain.\n- Most hardening required for the mainnet release.\n- **The Verus/Ethereum Bridge!** v0.9.6 includes the upgraded Ethereum bridge to the Goerli testnet live with all bridgekeeping, Ethereum Gas price tracking, and reward incentive capabilities for miners and stakers. Rewards for bridgekeeping are delivered both on Verus and on the Ethereum blockchain. Access the Ethereum bridge website (https://ethtest.verus.services) to move over some Goerli Ethereum or USDC, and participate in the Bridge.vETH liquidity basket launch to hold and earn fees on a basket with vETH, USDC, and VRSCTEST used as the fee converter for all cross chain transactions between Ethereum\u2019s Goerli and VRSC testnets.", "./raw_text_input_wiki/release_notes.md"], ["v0.9.6 also includes support for new parameters `-arbitragecurrencies=[\u201cVRSCTEST\u201d,\u201dvETH\u201d]` and `-arbitrageaddress=valid R-address, pubkey, or ID`. They\u2019re exciting, but don\u2019t try to use them just yet. They are for testing right now, and are preparing for an \u201cauto-arbitrage\u201d feature already supported in the protocol, but which we hope to have in the daemon before mainnet PBaaS activation that combines decentralized on-chain marketplace offers for currency with liquidity basket import processing to provide miners and stakers the opportunity to commit some amount of funds from their node wallet in common currencies to spot and leverage guaranteed arbitrage opportunities when making a block. These opportunities arise between orders on chain and liquidity basket pricing that if leveraged to earn, actually result in P2P crowdsourcing of liquidity for all baskets across the network, both from the blockchain itself as well as miners and stakers, while benefiting all participants in the following ways:\n- Miners and stakers can capture guaranteed arbitrage opportunities and arbitrage with any currency that they choose from their wallets.\n- Blockchain users can set limit orders and have them filled if they are near the market price for a currency, or if the market moves in their direction.\n- LPs and users of liquidity baskets for conversion get as close to market prices as possible on their conversions, never releasing funds from a basket before an on-chain, MEV-resistant auction takes place for the pricing of those assets.Although this release is likely to be robust enough for a mainnet, we have come this far with quality and will not rush for a few days earlier upgrade. We still plan to review and complete a small number of hardening items before PBaaS 1.0 is ready for its mainnet release.", "./raw_text_input_wiki/release_notes.md"], ["That said, this release fixes all reported issues in all community testing. Community developers, including myself are grateful for all of the testing many have contributed to to date. It has made it possible to get incredible test coverage across all network capabilities, and we appreciate all of your participation and pushing of boundaries. This release is expected to be the final PBaaS protocol that will be released on mainnet. There are no known changes required, and all functions should work as intended.The rest of these release notes are the same as the prior release. We encourage you to drop by the #pbaas-development channel, help the community prepare for mainnet release in the next couple weeks and start building your vision today!## Verus PBaaS and DeFi RC6 - BUG BOUNTIES\nAt this time, we are not aware of any bugs or errors in the DeFi, ID, or PBaaS cross chain protocols on this version of testnet. We do not anticipate any changes to the PBaaS protocol before mainnet release, and we hope you will join us on testnet trying out all the incredible capabilities and looking for any potential, remaining issues that can possibly be found before mainnet release. While we don\u2019t expect it to be easy to find bugs in the protocol, The Verus Coin Foundation is offering a bounty of at least 500 VRSC (possibly more for security related reports) for the first 10 people (7 still unclaimed) who are first to report any actual protocol bug before mainnet release, meaning failure of a properly executed command or API on a functioning VRSCTEST or PBaaS chain to function as intended. If anyone is first to find and describe the exploit for an exploitable security hole in any part of the protocol, the bounty will be a minimum of 1,000 VRSC, and for a serious potential security issue, 10,000 $VRSC.", "./raw_text_input_wiki/release_notes.md"], ["## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.", "./raw_text_input_wiki/release_notes.md"], ["### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.", "./raw_text_input_wiki/release_notes.md"], ["### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registratio", "./raw_text_input_wiki/release_notes.md"], ["n of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset curre", "./raw_text_input_wiki/release_notes.md"], ["ncies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-out", "./raw_text_input_wiki/release_notes.md"], ["s of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencycon", "./raw_text_input_wiki/release_notes.md"], ["verters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwb", "./raw_text_input_wiki/release_notes.md"], ["vCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n## Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTES", "./raw_text_input_wiki/release_notes.md"], ["T sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```", "./raw_text_input_wiki/release_notes.md"], ["Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```", "./raw_text_input_wiki/release_notes.md"], ["## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffunds", "./raw_text_input_wiki/release_notes.md"], ["verus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.", "./raw_text_input_wiki/release_notes.md"], ["2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:** https://www.virustotal.com/gui/file/20ea5429375c6c1a82a27d6de31a480187b97a52eec86aea8f4e8f6789df8e89/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/e881b3fc7d5de1a1e69da3722ac6202bf8c4e4ff8722c9cc2f0f5c587a8a0dd7/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/316a831789cb3e0cc878bab5d847c9b27850ce40feee828bc564373f2b1f59b2/detection\n**Windows:** https://www.virustotal.com/gui/file/a61fc935bf180690ab7cc34a8da54e36728acfd11a130476be66204ae251f5a6/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AQRhIwABQSCdvpJmvU7+i9gzPNBtksrPF4IFbPp+F/AfhjIwABQR+53tZoAd2tV1l/XV+Gos9acojPtHrtipWpdpQXKWqS+yRRzXA++Fec/OXT/XJpfa73IUojUhXu7C9t0X2/ldIt\" \"/Downloads/Verus-CLI-Linux-v0.9.6-x86_64/Verus-CLI-Linux-v0.9.6-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AQRhIwABQSCdvpJmvU7+i9gzPNBtksrPF4IFbPp+F/AfhjIwABQR+53tZoAd2tV1l/XV+Gos9acojPtHrtipWpdpQXKWqS+yRRzXA++Fec/OXT/XJpfa73IUojUhXu7C9t0X2/ldIt\" 2f611ce3d27cadc265f1088508f3dcb2e9262acbcbe8b20bcddc661138303be1\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\n Announcing v0.9.5-2, RECOMMENDED UPDATE FOR MAINNET - CRITICAL FOR CONTINUED TESTNET USEYOU MUST BE UPDATED TO v0.9.5 OR LATER BY BLOCK 2291830, AT APPROXIMATELY 11:00 PM UTC, SATURDAY, NOVEMBER 19th, 2022 TO RELIABLY STAY SYNCHRONIZED TO THE VERUS MAINNET. WHILE THERE MAY BE A MAINNET PBAAS UPGRADE BEFORE THAT DATE, WE RECOMMEND THAT IF YOU HAVE NOT UPGRADED YET, THAT YOU DO SO NOW.As with all v0.9.5-* releases, this release updates the Komodo notaries to season 6, with an activation height of 2291830, at approximately 11:00 PM UTC, Saturday, November 19th, 2022.## What\u2019s New\nFor mainnet, this release labels spendable transactions for the getaddressutxos RPC API, which is used by Verus Mobile. This update is critical for users that have not upgraded to v0.9.5+ before block 2291830.For testnet, v0.9.5-2 introduces minor notarization fixes that will be important for those intending to launch and witness PBaaS chains.## Ethereum Bridge\nAlthough its deployment has been delayed, there are no technical blockers, and we still expect the Ethereum bridge to be brought back up on the new Verus testnet within the next day or two. When it is up, you can access the Verus <-> Ethereum testnet bridge here: https://ethtest.verus.services/, and use your metamask to convert or send cross-chain to the Verus network from Ethereum's Goerli. To use these features you will need to get some Goerli Ethereum, either from a faucet or via the Verus testnet liquidity baskets on Verus.", "./raw_text_input_wiki/release_notes.md"], ["The rest of these release notes are the same as the prior release. We encourage you to drop by the pbaas-development channel, help the community prepare for the imminent mainnet release of the PBaaS upgrade and start building your vision today!\n## Verus PBaaS and DeFi RC5 - BUG BOUNTIES\nAt this time, we are not aware of any bugs or errors in the DeFi, ID, or PBaaS cross chain protocols on this version of testnet. We do not anticipate any changes to the PBaaS protocol before mainnet release, and we hope you will join us on testnet trying out all of the incredible capabilities and looking for any potential, remaining issues that can possibly be found before mainnet release. While we don\u2019t expect it to be easy to find bugs in the protocol, The Verus Coin Foundation is offering a bounty of at least 500 VRSC (possibly more for security related reports) for the first 10 people (7 still unclaimed) who are first to report any actual protocol bug before mainnet release, meaning failure of a properly executed command or API on a functioning VRSCTEST or PBaaS chain to function as intended. If anyone is first to find and describe the exploit for an exploitable security hole in any part of the protocol, the bounty will be a minimum of 1,000 VRSC, and for a serious potential security issue, 10,000 $VRSC.## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`", "./raw_text_input_wiki/release_notes.md"], ["# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.", "./raw_text_input_wiki/release_notes.md"], ["The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is", "./raw_text_input_wiki/release_notes.md"], [" to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n", "./raw_text_input_wiki/release_notes.md"], ["## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as", "./raw_text_input_wiki/release_notes.md"], [" private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":1", "./raw_text_input_wiki/release_notes.md"], ["0}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n## Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is a t", "./raw_text_input_wiki/release_notes.md"], ["oken, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business,", "./raw_text_input_wiki/release_notes.md"], [" \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration", "./raw_text_input_wiki/release_notes.md"], ["```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffundsverus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`", "./raw_text_input_wiki/release_notes.md"], ["### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:** https://www.virustotal.com/gui/file/efd0d50b9bc15dfec9efa1e0d4d230cf283eff2939f1eaae543306fd26b728ea/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/4f21cafbd0bdf17f38db11467701ca771af846c122eeee6531ad07de2a6371e2/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/e55fa0ed9121c15cbe39d0fe2181d0ee8402540b242f0736b22b4bd497b2eb35/detection\n**Windows:** https://www.virustotal.com/gui/file/5bcc58941c85243744be4ff7cf053c9fa0a9d3bd64afd572bd1cb5542bcf3438/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AUbeIgABQSCwKpDUADm6FXRioPN0/hUdFHhMTSolY9cgJC6P7w65KR31IKjCDkgr60IWrTRokUpYR8X97BAvZkcgKZYmPbnA\" \"/Downloads/Verus-CLI-Linux-v0.9.5-2-x86_64/Verus-CLI-Linux-v0.9.5-2-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AUbeIgABQSCwKpDUADm6FXRioPN0/hUdFHhMTSolY9cgJC6P7w65KR31IKjCDkgr60IWrTRokUpYR8X97BAvZkcgKZYmPbnA\" e3ad1a6b967ed8ce177e812409d158f8dd82039e8f994e96eddf1f35f3cc7940\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\nAnnouncing v0.9.5-1, CRITICAL UPDATE FOR MAINNET MANDATORY FOR CONTINUED TESTNET USEAs with the last release, this release updates the Komodo notaries to season 6, with an activation height of 2291830, at approximately 11:00 PM UTC, Saturday, November 19th, 2022. YOU MUST BE UPDATED TO v0.9.5 OR LATER BY THEN TO RELIABLY STAY SYNCHRONIZED TO THE VERUS MAINNET. WHILE THERE MAY BE A MAINNET PBAAS UPGRADE BEFORE THAT DATE, WE RECOMMEND THAT IF YOU HAVE NOT UPGRADED YET, THAT YOU DO SO NOW.Please make sure that if you do choose to wait for the possibility of a mainnet PBaaS upgrade before this activation that you do upgrade to the latest release before Saturday, November 19th.## What\u2019s New\nFor mainnet, this release has no material changes over v0.9.5, but is still considered critical, as mainnet users should be upgraded to v0.9.5+ before block 2291830.", "./raw_text_input_wiki/release_notes.md"], ["For testnet, v0.9.5-1 fixes an issue discovered on testnet where duplicate ID exports blocked cross-chain processing temporarily and also introduces a protocol improvement designed to make the Verus anti-MEV DeFi protocol even more resistant than what we believe was already the leading algorithm to multi-block attempts at MEV. The protocol change makes the following adjustments:Conversions and cross-chain transfers still roll-up into exports that are collected from one or more blocks of transfer transactions, but to determine when a block is the last of the prior export or first in the next requires a random bit pulled from later blocks.\nThe last miner or staker to complete a block of an export retroactively receives 10% of all fees from processing that export, including all conversions, once the rollup is processed as an import. This reward used to go to the miner or staker who processes the export, which is no longer the case.\nImport transactions can now include up to n/2 arbitrage transactions, where n is the number of reserves in a liquidity basket currency.These changes together serve to disincentivize any miner or staker from attempting to exclude a large set of transactions from a block and front run all of them, as they will have an even chance of having all of those excluded transactions put back in with their transaction, turning potential gain into potential loss. They would be better off saving their working capital to arbitrage imports by joining transactions, bringing them close to market, and earning money without risk of loss. In addition, if they do end up putting more value of transactions in a block that caps the export rollup, they will reliably earn meaningful rewards without risk of loss in that way as well.", "./raw_text_input_wiki/release_notes.md"], ["## Ethereum Bridge\nAlthough its deployment has been delayed, we expect the Ethereum bridge to be brought back up on the new Verus testnet within the next day or two. When it is up, you can access the Verus <-> Ethereum testnet bridge here: https://ethtest.verus.services, and use your metamask to convert or send cross-chain to the Verus network from Ethereum's Goerli. To use these features you will need to get some Goerli Ethereum, either from a faucet or via the Verus testnet liquidity baskets on Verus.The rest of these release notes are the same as the prior release. We encourage you to drop by the #pbaas-development channel, help the community prepare for mainnet release in the next couple weeks and start building your vision today!## Verus PBaaS and DeFi RC5 - BUG BOUNTIES\nAt this time, we are not aware of any bugs or errors in the DeFi, ID, or PBaaS cross chain protocols on this version of testnet. We do not anticipate any changes to the PBaaS protocol before mainnet release, and we hope you will join us on testnet trying out all of the incredible capabilities and looking for any potential, remaining issues that can possibly be found before mainnet release. While we don\u2019t expect it to be easy to find bugs in the protocol, The Verus Coin Foundation is offering a bounty of at least 500 VRSC (possibly more for security related reports) for the first 10 people (7 still unclaimed) who are first to report any actual protocol bug before mainnet release, meaning failure of a properly executed command or API on a functioning VRSCTEST or PBaaS chain to function as intended. If anyone is first to find and describe the exploit for an exploitable security hole in any part of the protocol, the bounty will be a minimum of 1,000 VRSC, and for a serious potential security issue, 10,000 $VRSC.", "./raw_text_input_wiki/release_notes.md"], ["## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.", "./raw_text_input_wiki/release_notes.md"], ["### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.", "./raw_text_input_wiki/release_notes.md"], ["### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registratio", "./raw_text_input_wiki/release_notes.md"], ["n of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset curre", "./raw_text_input_wiki/release_notes.md"], ["ncies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-out", "./raw_text_input_wiki/release_notes.md"], ["s of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencycon", "./raw_text_input_wiki/release_notes.md"], ["verters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwb", "./raw_text_input_wiki/release_notes.md"], ["vCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n## Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTES", "./raw_text_input_wiki/release_notes.md"], ["T sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```", "./raw_text_input_wiki/release_notes.md"], ["Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```", "./raw_text_input_wiki/release_notes.md"], ["## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffunds", "./raw_text_input_wiki/release_notes.md"], ["verus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.", "./raw_text_input_wiki/release_notes.md"], ["2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:** https://www.virustotal.com/gui/file/2d168b0c0e850e7901b80b7d0b05516f03e705e9b8c78f0aa70ac347bc4161e7/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/de0b4d0eb4230858346d68d5437b97cd26204e4a931140ec470add1fdb1edb56/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/1536642a093b525bd90ea8efccffb7a516888d323c1fb3c5a240fd11afb621bd/detection\n**Windows:** https://www.virustotal.com/gui/file/4d2705506c869bb7c5aade81ac09f29b9b67c9cb790501bdd56933f509fcfdbd/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AdzNIgABQR/6S5TFXXCNHwfznbswtSshmEbbze3i/APbgh4OYeCVECZ/ajii2GUFRGGrxfm5ZHtZ2MEPhWeyH0QcfUIymLqz\" \"/Downloads/Verus-CLI-Linux-v0.9.4-3-x86_64/Verus-CLI-Linux-v0.9.4-3-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AdzNIgABQR/6S5TFXXCNHwfznbswtSshmEbbze3i/APbgh4OYeCVECZ/ajii2GUFRGGrxfm5ZHtZ2MEPhWeyH0QcfUIymLqz\" eeaf6b6e93226d4d1f82ce544cebe780f0376eee93c8300c84a7329c55f72a8a\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Announcing v0.9.5, CRITICAL UPDATE FOR MAINNET AND TESTNETThis release updates the Komodo notaries to season 6, with an activation height of 2291830, at approximately 11:00 PM UTC, Saturday, November 19th, 2022. You must be updated to v0.9.5 or later by that time to reliably stay synchronized to the Verus mainnet. We are also working to get a mandatory update release during these next couple weeks, which will have the Verus PBaaS mainnet upgrade finalized as well. If you would prefer to wait for the PBaaS mainnet upgrade and upgrade once, we cannot guarantee that the PBaaS mainnet release will be available in the next couple weeks, but we are working to make that a reasonable choice as well. Please make sure that if you do choose to wait to upgrade that you do upgrade to the latest release before Saturday, November 19th.## New Signature Capabilities on Mainnet & Testnet\nIn addition to continued support for all of the `signmessage`, `signdata`, and `signfile` APIs, as well as their verify* counterparts, v0.9.5 introduces 2 new APIs and CLI commands, `signdata` and `verifysignature`, that encompass all of the capabilities of previous signing and verification APIs and add new capabilities for advanced signatures and verification. These new advanced capabilities were designed for community work by @allbits, designing a more powerful and flexible framework for NFTs and ID-bound legal rights and agreements. In addition to digital signing of documents or information using an ID, the new APIs enable easily binding together multiple sources of content, documents, identities, and VDXF keys together into one verifiable signature and then being able to verify that signature, including all of its specific bindings.", "./raw_text_input_wiki/release_notes.md"], ["## Verus PBaaS and DeFi RC5 - BUG BOUNTIES\nAt this time, we are not aware of any bugs or errors in the DeFi, ID, or PBaaS cross chain protocols on this version of testnet. We do not anticipate any changes to the PBaaS protocol before mainnet release, and we hope you will join us on testnet trying out all of the incredible capabilities and looking for any potential, remaining issues that can possibly be found before mainnet release. While we don\u2019t expect it to be easy to find bugs in the protocol, The Verus Coin Foundation is offering a bounty of at least 500 VRSC (possibly more for security related reports) for the first 10 people who are first to report any actual protocol bug before mainnet release, meaning failure of a properly executed command or API on a functioning VRSCTEST or PBaaS chain to function as intended. If anyone is first to find and describe the exploit for an exploitable security hole in any part of the protocol, the bounty will be a minimum of 1,000 VRSC, and for a serious potential security issue, 10,000 $VRSC.## Emoji IDs and \ud83c\udf83Chain\nIn the spirit of this release day, we have taken advantage of VerusIDs and currency emoji support and created a new, merge mineable PBaaS chain, \ud83c\udf83. It has been said that those who merge mine \ud83c\udf83chain at midnight will disappear into the crypto-metaverse, never to be seen again, become VerusID avatars, and be forever doomed to being bought and sold on the VRSCTEST marketplace for all eternity (or until the next testnet reset). YOU HAVE BEEN WARNED!", "./raw_text_input_wiki/release_notes.md"], ["We expect the Ethereum bridge to be brought back up on the new Verus testnet within the next day or two. When it is up, you can access the Verus <-> Ethereum testnet bridge here: https://ethtest.verus.services, and use your metamask to convert or send cross-chain to the Verus network from Ethereum's Goerli. To use these features you will need to get some Goerli Ethereum, either from a faucet or via the Verus testnet liquidity baskets on Verus.The rest of these release notes are the same as the prior release. We encourage you to drop by the #pbaas-development channel, help the community prepare for mainnet release in the next couple weeks and start building your vision today!## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`\n### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```", "./raw_text_input_wiki/release_notes.md"], ["# Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration```json\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```json\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffundsverus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`", "./raw_text_input_wiki/release_notes.md"], ["# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be impleme", "./raw_text_input_wiki/release_notes.md"], ["nted on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```json\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```json\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconvert", "./raw_text_input_wiki/release_notes.md"], ["ing to new currency, NEWCOIN, before it is active:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```json\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n## Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and w", "./raw_text_input_wiki/release_notes.md"], ["ill publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the c", "./raw_text_input_wiki/release_notes.md"], ["urrency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:** https://www.virustotal.com/gui/file/282f6fc1bd95ddab588dd7fbc088372404eb0f7a746633f0493a2c446fb037b9/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/6bec22fc8fa9c19a6d1b7771a7f85d2754ddf8d2c67202c3c66052d0a08f7311/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/2e1798c5e942feec9634b418db6bec94385bb47ba6892ea3af6bb88122103b92/detection\n**Windows:** https://www.virustotal.com/gui/file/20252ebb7224d51ba6048b44524b305b3522bb34f38b52424f507148a2fb463b/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"ASKRIgABQR8y/Iv9s1rJfeLS8Kdq4SxnKKFtTFXjJ/Di7QKwiejX/0WRyEl9UWUa0W4+zKiyW7fMGcGZjPm62lrpPLs8sG/P\" \"/Downloads/Verus-CLI-Linux-v0.9.4-3-x86_64/Verus-CLI-Linux-v0.9.4-3-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"ASKRIgABQR8y/Iv9s1rJfeLS8Kdq4SxnKKFtTFXjJ/Di7QKwiejX/0WRyEl9UWUa0W4+zKiyW7fMGcGZjPm62lrpPLs8sG/P\" 092e4fbc470530a7943fe080c27d9470483ea7947400d6da599a2ae3449b7ec9\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\nAnnouncing v0.9.4-5, RECOMMENDED FOR MAINNET AND TESTNETThis release fixes an RPC API issue on mainnet and testnet that can cause a daemon fault when the getaddressmempool API is used. This fault while running is only caused by non-typical API, insight explorer, or CLI use, but if it does happen, may result in the need to rescan or resync your wallet. We know of no one on mainnet affected by this issue. We recommend that all users upgrade.", "./raw_text_input_wiki/release_notes.md"], ["This release also includes a new capability for testnet, which was pioneered by CHIPS developer @Biz, who worked to modify and test the Verus PoP algorithm to support 10 second block times, which the CHIPS chain uses to enable its game application focus. These new parameters will enable the CHIPS blockchain to move to being an interoperable, merge mineable PBaaS chain with a 10 second blocktime when PBaaS goes live on mainnet. To learn how to test the new CHIPS test chain on testnet, visit the #pbaas-development channel, as the support in v0.9.4-5 is not as complete as it will be in the next and hopefully final testnet reset. In that next version, blocktime and the pow averaging window for any PBaaS chain\u2019s PoP consensus will be able to be configured between 10 seconds and 2 minutes in addition to its notarization frequency as part of the chain definition, enabling a greater variety of PBaaS use cases, transaction throughput, and application capabilities.As a reminder, you can access the Verus <-> Ethereum testnet bridge here: https://ethtest.verus.services , using your metamask, converting or sending cross chain through the Verus network from Ethereum's Goerli. To use these features you will need to get some Goerli Ethereum, either from a faucet or via the Verus testnet liquidity baskets on Verus.The rest of these release notes are the same as the prior release. We encourage you to drop by the #pbaas-development channel, help the community prepare for mainnet and start building your vision today!", "./raw_text_input_wiki/release_notes.md"], ["### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`# Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration", "./raw_text_input_wiki/release_notes.md"], ["```json\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```json\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffundsverus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles", "./raw_text_input_wiki/release_notes.md"], ["### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be impleme", "./raw_text_input_wiki/release_notes.md"], ["nted on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```json\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```json\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconvert", "./raw_text_input_wiki/release_notes.md"], ["ing to new currency, NEWCOIN, before it is active:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```json\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n## Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and w", "./raw_text_input_wiki/release_notes.md"], ["ill publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the c", "./raw_text_input_wiki/release_notes.md"], ["urrency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:** https://www.virustotal.com/gui/file/037f6aa4d508c8a5d34cf064d27f69b56e3d3825405087a3244914cba40cb254/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/e271171db246c15a3bc17f66299948eb81f451fcc84308ae0c1e518d57ee7aa5/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/103cea57b996273b85efdeb79625df84e2a8de8a3929a78b89b75d0f072677e4/detection\n**Windows:** https://www.virustotal.com/gui/file/18cf5a62e066b90b683558194d9f3dbc2a95d12cddabf0d9e29e128c06139ac1/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AZHCIQABQSBJ+t3wHNYyoWu42QrK3ncJKPdppvC2shhwDlPPR/ZKCwvu+Y8LEy8F/Wyj23ba9grVsJZQu4BCHDicQny6vIjt\" \"/Downloads/Verus-CLI-Linux-v0.9.4-3-x86_64/Verus-CLI-Linux-v0.9.4-3-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AZHCIQABQSBJ+t3wHNYyoWu42QrK3ncJKPdppvC2shhwDlPPR/ZKCwvu+Y8LEy8F/Wyj23ba9grVsJZQu4BCHDicQny6vIjt\" 413bf64c365c3fcf92c273d1a8674626284e340437fc0634872b9d0ee483f327\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\nAnnouncing v0.9.4-4, UNCHANGED FOR MAINNET -- RECOMMENDED FOR CONTINUED TESTNET USE, MANDATORY FOR CONTINUED TESTNET MERGE OR BRIDGE MININGThis release has no material mainnet changes.This release primarily upgrades the ETH bridge and also fixes a PBaaS cross-chain notarization issue that made miners and stakers consider themselves ineligible to enter cross-chain notarizations. There are no actual protocol changes.The ETH bridge upgrade introduces the ability to enter notarizations between Ethereum Goerli and VRSCTEST using bridgekeeper without an Ethereum private key in your conf file. This will enable you to still mine and potentially earn by agreeing or disagreeing with notarizations mined into the Verus blockchain, without needing to make transactions on or spend Ethereum for fees. This should also work with a free Infura account.", "./raw_text_input_wiki/release_notes.md"], ["As a reminder, you can access the Verus <-> Ethereum testnet bridge here: https://ethtest.verus.services , using your metamask, converting or sending cross chain through the Verus network from Ethereum's Goerli. To use these features you will need to get some Goerli Ethereum, either from a faucet or via the Verus testnet liquidity baskets on Verus.The rest of these release notes are the same as the prior release. Drop by the #pbaas-development channel to help us prepare for mainnet and start building your vision today!### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`# Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration", "./raw_text_input_wiki/release_notes.md"], ["```json\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```json\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffundsverus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles", "./raw_text_input_wiki/release_notes.md"], ["### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be impleme", "./raw_text_input_wiki/release_notes.md"], ["nted on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```json\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```json\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconvert", "./raw_text_input_wiki/release_notes.md"], ["ing to new currency, NEWCOIN, before it is active:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```json\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n## Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and w", "./raw_text_input_wiki/release_notes.md"], ["ill publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the c", "./raw_text_input_wiki/release_notes.md"], ["urrency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:** https://www.virustotal.com/gui/file/81692fb40d8bad1b92615884494be36a6286f0321f49f91a5f19107f61d60314/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/048fd619ed06a2002186a09f85f9dc56c6f0d3033c164b12384fd051537d05c0/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/3c178229023bcfa54579a9d2ee661696f280f46a9cab1a99f9ff0dac7d366be1/detection\n**Windows:** https://www.virustotal.com/gui/file/094560c238f21e778593fd756406773adec38ae5bc6a3770c0f9662c62e6cb27/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AfmaIQABQR8yN3LyVymt/ZRYvyuGTma3rEbxFshyLOa3zI5qAXTaz34gxj30QXiluQ5TJJ7jxQwJaLUl6bJLMvfNvlzI+KBw\" \"/Downloads/Verus-CLI-Linux-v0.9.4-3-x86_64/Verus-CLI-Linux-v0.9.4-3-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AfmaIQABQR8yN3LyVymt/ZRYvyuGTma3rEbxFshyLOa3zI5qAXTaz34gxj30QXiluQ5TJJ7jxQwJaLUl6bJLMvfNvlzI+KBw\" 7cea478ac61c8328fea9a42f8744f9112cf6723aa0f39c727c1d090f5daa5b34\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\nAnnouncing v0.9.4-3, UNCHANGED FOR MAINNET -- MANDATORY FOR CONTINUED TESTNET USEThis release has no material mainnet changes.This release upgrades the testnet protocol to fix an issue with the Ethereum bridge and VRSCTEST mining and staking. Please update to v0.9.4-3 to continue mining and staking on testnet and the Ethereum bridge. This version also fixes an issue discovered when defining Ethereum NFT mapped tokens, which are not yet supported in the released Ethereum contracts, but are updated no in the daemon and ready to use when the contracts are upgraded, hopefully in the next few days.", "./raw_text_input_wiki/release_notes.md"], ["NFT mapped tokens will allow you to define an Ethereum NFT as the token that controls revoke and recover for an ID. Similar to how you can define a token for tokenized ID control, an NFT mapped token, when defined, refers by contract and tokenid to a specific NFT on the Ethereum blockchain. Once defined as the currency for a specific ID or sub-ID and linked to the Ethereum NFT, that NFT will be able to be sent over from the Ethereum blockchain as a satoshi of that currency, sent to any address or ID on the Verus blockchain, exchanged trustlessly on the Verus on-chain P2P marketplace, and used to revoke and recover the ID which defined the token. Once the contracts are updated, you will be able to mint NFTs on Ethereum\u2019s Goerli testnet, and endow your Ethereum NFTs with all of the power of your specially named VerusID. This new technology allows you to protect your NFTs with VerusID\u2019s revoke and recover technology, bind your NFT to the pseudonymous ID you use to log into applications, use it to extend and publish much more than just the NFT, and generally take your Ethereum NFTs to the next level!The rest of these release notes are the same as the prior release. Drop by the #pbaas-development channel to help us prepare for mainnet and start building your vision today!### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`# Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration```json\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```json\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffunds", "./raw_text_input_wiki/release_notes.md"], ["verus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles", "./raw_text_input_wiki/release_notes.md"], ["### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be impleme", "./raw_text_input_wiki/release_notes.md"], ["nted on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```json\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```json\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconvert", "./raw_text_input_wiki/release_notes.md"], ["ing to new currency, NEWCOIN, before it is active:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```json\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n## Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and w", "./raw_text_input_wiki/release_notes.md"], ["ill publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the c", "./raw_text_input_wiki/release_notes.md"], ["urrency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:** https://www.virustotal.com/gui/file/623213f8bd49817d1e5196f41852846164caa93e2baad3c715878d390d90fe22/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/286ebb51f7187b2c023c140e33eb3e0d95c9ddf6ad42256c603c5cc400cd8a0f/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/245ef69a3cf4a0035eff1bed792817fbd1b7dd0a23a4c6a3506637fef20b40b4/detection\n**Windows:** https://www.virustotal.com/gui/file/2345a09fd73a0f4218584af58ac164ffdd2b8a9a14bda15af49f25a4188c649a/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AfqOIQABQR9JBWMw2o1wOS6qAHZW8D9cm0MfDSY2EZyleWFw3JbXJBnbcw0Pa4FFLeNw+kJVZPQfvsA2fEW2hukvCYly1GDb\" \"/Downloads/Verus-CLI-Linux-v0.9.4-3-x86_64/Verus-CLI-Linux-v0.9.4-3-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AfqOIQABQR9JBWMw2o1wOS6qAHZW8D9cm0MfDSY2EZyleWFw3JbXJBnbcw0Pa4FFLeNw+kJVZPQfvsA2fEW2hukvCYly1GDb\" f5d6e69708f341dac3b8170dd25083690ce6585f84c4785cbcf975560ddc21a4\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\nAnnouncing v0.9.4-2, UNCHANGED FOR MAINNET -- MANDATORY FOR TESTNET USEThis release has no material mainnet changes.THE NEW ETHEREUM BRIDGE IS EXPECTED TO BE DEFINED WITHIN THE NEXT 24 HOURS AND FOR THE BRIDGE LIQUIDITY BASKET TO LAUNCH SHORTLY AFTER DEFINITION. IF YOU LEAVE A PRIOR VERSION NODE RUNNING UNTIL AFTER THE VETH BRIDGE IS DEFINED, YOU MAY FORK AWAY DUE TO CHANGES IN THIS RELEASE AND THEN NEED TO RESYNC TO TESTNET FROM SCRATCH TO CONTINUE.For testnet, this is RC4 of the Verus PBaaS protocol, which includes some Ethereum bridge related fixes and a merge mining API change. With the API change, all merge mining nodes must upgrade to the new protocol to be compatible with each other and participate in cross-chain notarization rewards.", "./raw_text_input_wiki/release_notes.md"], ["After the Ethereum bridge has been defined, you will be able to send currencies over to Verus testnet from Ethereum\u2019s Goerli network and also participate in the launch of the Ethereum bridge liquidity basket with VETH, USDC, or VRSCTEST by using `sendcurrency` with `\u201cpreconvert\u201d:true` on the command line or through the GUI. We recommend that you get some Goerli ETH using this facet or others (https://goerli-faucet.mudit.blog/), which will make your experience of all Verus PBaaS can offer a bit more well rounded when the Ethereum bridge is available once again.Once the Goerli Ethereum liquidity basket (Bridge.vETH) activates on testnet, which is a 100% backed basket composed of 1/3rd each of Verus, Ethereum, and USDC (all testnet tokens), you can use it from Metamask on Goerli, from the Verus CLI or GUI on the vrsctest chain, or from CLI/GUI on other PBaaS chains to provide liquidity while holding Bridge.vETH, a 100% backed basket of three currencies of balanced relative value, or to pass through and convert currencies between Verus, Ethereum, USDC, and Bridge.vETH.The Brige.vETH currency also coordinates with the vETH@ gateway and enables registering `*.veth@` IDs for $5 worth of Bridge.vETH, based on its internal USDC conversion price at the time of registration. When you register `*.veth@` IDs, 0.02 VRSCTEST goes to miners and stakers, and $5 worth of Bridge.vETH is burned, reducing the total supply of Bridge.vETH for everyone without reducing reserves, and contributing to the relative value, \u201creal yield\u201d of Bridge.vETH, relative to its three reserve currencies. This is the way that all decentralized, fractional currencies which enable ID registration accept registration fees, equally benefiting all fractional currency holders/liquidity providers when IDs are registered, while providing Verus miners and stakers the identity import fee of 0.02 VRSC.", "./raw_text_input_wiki/release_notes.md"], ["`*.veth@` IDs have the ability, along with root vrsctest IDs, to make 1:1 ERC20 mapped currencies on Ethereum. They can also be used to create Tokenized ID control tokens (see notes for v0.9.4-1), as all types of IDs can, but if they are used to do that, they will have used their currency creation ability for that rather than an ERC20 mapped currency.The rest of these release notes are the same as the prior release. Drop by #pbaas-development to start building your vision on Verus and help prepare PBaaS for mainnet!### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`# Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration", "./raw_text_input_wiki/release_notes.md"], ["```json\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```json\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffundsverus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles", "./raw_text_input_wiki/release_notes.md"], ["### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be impleme", "./raw_text_input_wiki/release_notes.md"], ["nted on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```json\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```json\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconvert", "./raw_text_input_wiki/release_notes.md"], ["ing to new currency, NEWCOIN, before it is active:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```json\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n## Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and w", "./raw_text_input_wiki/release_notes.md"], ["ill publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the c", "./raw_text_input_wiki/release_notes.md"], ["urrency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/3ed2631d4cffb267afd1e5497b3eca3e23bdb8289dac0cdec9da12dbe03af969/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/6b852efe7406cbd9e9ed530d70721fec96cad53bf169cf96c6aa173d346c2349/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/8a573fe7db3bb29ff67de938e8d7d474daa1a75d5ce81a2d385233fefc0b8e8f/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/0032e7e1cd6239f4521f0f48b56339511a32555475224c266f4babe161278c24/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AcBSIQABQSBIKAh7/OaCTKSTt5djpmiQ7Mx8owKFNPdolko/8I4WB3StZhvchKRFfAAo5bV9eREGNr5Vq4z+4Fwl+ZRkw1Al\" \"/Downloads/Verus-CLI-Linux-v0.9.4-2-x86_64/Verus-CLI-Linux-v0.9.4-2-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AcBSIQABQSBIKAh7/OaCTKSTt5djpmiQ7Mx8owKFNPdolko/8I4WB3StZhvchKRFfAAo5bV9eREGNr5Vq4z+4Fwl+ZRkw1Al\" ce611f081daba33876af496c5699b669da0e35343106801e21c4ed6169460140\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\nAnnouncing v0.9.4-1 with the world\u2019s first self-sovereign, tokenized ID control technology, RECOMMENDED FOR MAINNET -- MANDATORY FOR TESTNET USEThis release has no material mainnet changes.For testnet, this is RC3 of the PBaaS protocol and is required to follow the main testnet chain. RC3 has some significant and important API additions, including the ability for any ID at all, even sub-IDs, to generate a single token as its currency. That token then enables whoever holds it to have another level of revoke/recover power over the ID, in addition to the normal revocation and recovery authorities, which also still work. This technology is now available in the pre-existing APIs, updateidentity (for changing revocation / recovery authorities), revokeidentity, and recoveryidentity. Please see help for details.", "./raw_text_input_wiki/release_notes.md"], ["In addition, we have continued to harden the protocol and fixed issues with cross-chain currency definition import/export and the new ability to burn reserves into a liquidity basket that were reported in the current testnet.The rest of these release notes are the same as the prior release. Drop by pbaas-development to start building your vision on Verus while helping get PBaaS ready for mainnet!### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`# Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration", "./raw_text_input_wiki/release_notes.md"], ["```json\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```json\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffundsverus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles", "./raw_text_input_wiki/release_notes.md"], ["### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be impleme", "./raw_text_input_wiki/release_notes.md"], ["nted on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```json\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```json\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconvert", "./raw_text_input_wiki/release_notes.md"], ["ing to new currency, NEWCOIN, before it is active:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```json\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n## Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and w", "./raw_text_input_wiki/release_notes.md"], ["ill publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the c", "./raw_text_input_wiki/release_notes.md"], ["urrency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/a202cdbdde620f9106a6ea31421f5f948f13f18ad1fa872bd64bc1e18c7b9ddd/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/eca39c1e72e71fb50dae2d6e30f1d24ca571913d4dc4c238bcf087d3983ceb6b/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/3c03bbfd007fd2bf278877bc37837232113d522479a752157d522790b0afc093/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/43915c286e9d37e220444dbd2f3d8e56ee3cadfa64f61885670fb7bc8a0a5fe4/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"Ac1PIQABQSCaobx7IQFxa4N001E/ZVHFLAlhTrJ9iJeDB+l51VvFuwXlaH+mEtfavIJLqgnALH20Ul3zkV2/Iq2EvZhjsMno\" \"/Downloads/Verus-CLI-Linux-v0.9.4-1-x86_64/Verus-CLI-Linux-v0.9.4-1-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"Ac1PIQABQSCaobx7IQFxa4N001E/ZVHFLAlhTrJ9iJeDB+l51VvFuwXlaH+mEtfavIJLqgnALH20Ul3zkV2/Iq2EvZhjsMno\" b70d6c8a0cc5d13cdcb03ad0599b960b80a596c56fdaf548c7cac04f9f89cbb9\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Announcing v0.9.4, HIGHLY RECOMMENDED FOR MAINNET -- MANDATORY FOR TESTNET USE", "./raw_text_input_wiki/release_notes.md"], ["This release fixes a mainnet issue that may, in rare cases, cause a node to deadlock.\nIt also adds the following new features to mainnet:\n- Auto TLS encrypted connections between nodes on mainnet and testnet, no action needed, but you can require that all connections be encrypted by starting the daemon with \u201c-tlsenforcement\u201d.\n- A new \u201c-idindex\u201d flag that enables 3 new APIs to lookup identities by their primary addresses or revocation and recovery addresses, `getidentitywithaddress`, `getidentitywithrevocation`, and `getidentitywithrecovery`.\n Generally improved multithreading within the daemon.\n- These improvements allow anyone to now write applications to easily graph or display public relationships between identities, transparent addresses, and transactions without compromising the privacy of private addresses, messages, or transactions between identities using name@:private endpoints, z-addresses or communicating via off-chain channels.For testnet, this is RC2 of the PBaaS protocol and has some significant and important advances and changes. In addition to a great deal of progress hardening for mainnet, v0.9.4 introduces the following new features to the PBaaS testnet:\n- All features above for mainnet\n- NFT mapped tokens and tokenized ID control - In v0.9.4, as with v0.9.3, you can use root identities to create any kind of currencies, *.veth IDs to create Ethereum mapped currencies, and what is new in v0.9.4 is that you can now use any type of ID or sub-ID to create a new kind of currency that will always have a 1 Satoshi supply and enable anyone holding it to have power over the ID that issued it. This type of currency is called tokenized ID control and can be treated like a super NFT over all copies of the source ID on all chains that were exported to other chains after the currency was created. Once the Ethereum contracts are upgraded with this capability, *.ve", "./raw_text_input_wiki/release_notes.md"], ["th or IDs with root names on the Verus blockchain can be used to create Ethereum NFT mapped currencies, which enable a Cryptopunk, Ethrock, or whatever other NFT you\u2019d like to not only be sent to Verus, held on a revocable/recoverable ID, and also permanently upleveled with ID powers, being cryptographically bound as an ID\u2019s permanent control token that can be sent to any chain or to Ethereum and back.\n This unique Verus-only technology and VerusIDs enable new models of complex, atomic and fully decentralized transactions. By using exported IDs across any number of networks and an ID control token, ownership of an unlimited array of assets across an unlimited number of networks can for the first time ever, have ownership transferred in one transaction.\n- While NFT mapped tokens are supported on the RC2 PBaaS protocol, they have not yet been implemented in the Ethereum contracts. You will not be able to send NFTs from Ethereum to Verus or PBaaS chains until that work is complete, which we do not expect to take a great deal of time.\n- Liquidity currencies now support new methods to burn currency with the following results:\n - `burnweight` - available to centralized currencies only and enables burning the primary currency to raise the reserve ratio weights of all reserves.\n - `burn` for reserve currencies - in prior releases, burn was only used for primary currencies and would reduce the supply of a currency relative to its reserves, increasing the on-chain value of the primary currency. In v0.9.4, you can now also \u201cburn\u201d reserve currencies in a liquidity basket currency, which simply donates that amount of reserve into the currency\u2019s reserves without taking any new supply in exchange. This is available to decentralized or centralized currencies.", "./raw_text_input_wiki/release_notes.md"], ["- Bridgekeeper is now available for permissionless bridge notarization and selectable in the GUI on the mining page. For CLI, we will make a Node application available for testing in the next few days.\n- RC1 cross-chain witness and notarization protocol enhanced in RC2 as follows:\n - In RC2, any notarization to be confirmed must be first posted publicly to allow for potential to prove invalidity, and then later confirmed. In the prior protocol, a witnessed notarization could be posted to a chain and accepted when first seen. Upon analysis and discussion with @allbits and others, we realized that the attack vector of even stolen notary/witness keys combined with an in-secret 51% combined hash/stake attack could be prevented if we changed the protocol to first require posting the ready to finalize data and allow notaries who recognize that there is a signature on chain for something they don\u2019t agree with (likely stolen key), to simpl", "./raw_text_input_wiki/release_notes.md"], ["y revoke their identity, which will prevent that notarization from ever being confirmed. This same security feature is supported between all PBaaS chains and has been implemented in the Ethereum contracts for witnesses as well. This new protocol also provides for other types of evidence to prevent finalization, such as proof that there exists a more powerful (most power rule) tip than one witnessed. Enabling decentralized, cross-chain most power rules are an advance in cross-chain protocols that over time will strongly protect censorship resistance qualities of any multichain protocol.\n - The above technology required changes to generalize evidence types between chains, enabling cryptographic enforcement that all notarizations are ultimately determined by miners and stakers and finalized by witnesses who must follow most power (stake+work) rules based on the protocol. Witnesses cannot finalize a chain tip unless alternating miners and stakers have posted 3 consecutive, agreeing, progressing cross-chain notarizations, without intervening disagreement, trading off more certain cross-chain transaction latency for on that depends on miners and stakers, meaning maximum decentralization and a high cost to DoS attack cross-chain, approaching impossible over any significant length of time. This approach makes the incentivized merge mining and bridge mining opportunities, as well as miner/staker participation, automatically part of and also critical to the cross-chain protocol. In v0.9.4, all users on the network may mine the Ethereum bridge via the bridgekeeper tool on the mining page in the GUI.\n - With this new protocol, all PBaaS chains on testnet will consider witnessed / finalized tips final and will not unwind past those witness points or follow a chain that disagrees with a known finalized tip. When this protocol goes live on mainnet, and for any PBaaS chain whose co", "./raw_text_input_wiki/release_notes.md"], ["mmunity opts to use the Komodo notary service, Komodo notarizations will continue to ensure a stable chain tip, but no matter what other notarizations are present, PBaaS chains will always follow their proof of power protocol and lock to their witnessed tips as well.", "./raw_text_input_wiki/release_notes.md"], ["### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```The rest of these release notes are the same as the prior release. Drop by pbaas-development to start building your vision on Verus while helping get PBaaS ready for mainnet!## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):", "./raw_text_input_wiki/release_notes.md"], ["- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`# Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration```json\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```json\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffunds", "./raw_text_input_wiki/release_notes.md"], ["verus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles", "./raw_text_input_wiki/release_notes.md"], ["### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be impleme", "./raw_text_input_wiki/release_notes.md"], ["nted on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```json\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```json\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconvert", "./raw_text_input_wiki/release_notes.md"], ["ing to new currency, NEWCOIN, before it is active:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```json\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n## Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1         // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2         // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4         // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8        // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16    // if set, this chain requires referrals\nOPTION_TOKEN = 32           // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64       // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128          // if set, this routes external currencies\nOPTION_PBAAS = 256           // this is a PBaaS chain definition\nOPTION_GATEWAY_CONVERTER = 512     // this means that for a specific PBaaS gateway, this is the default converter and w", "./raw_text_input_wiki/release_notes.md"], ["ill publish prices\nOPTION_GATEWAY_NAMECONTROLLER = 1024  // when not set on a gateway, top level ID and currency registration happen on launch chain\nOPTION_NFT_TOKEN = 2048        // single satoshi NFT token, tokenizes control over the root ID\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the c", "./raw_text_input_wiki/release_notes.md"], ["urrency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/a0bf7673ca1e740f7261fd12888edb8ef68586c48527921f6a5e272cfd6bb57a/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/269a96dd66a50fa670695bf2489eeb7dc837878e7b56a528f1c2de977524c96d/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/de243d36d6dcdb06ef70be1da3b1d58d875192de73b0a37afc6dcbbb614f2908/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/07f747e596586b9666f2ae74f0865890b4db3fb85e8d94e9e376fbd2393bc37c/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AYUoIQABQR8xuMk0N7mT6KmiXJ5VKJnZR27+udobzfV0DTlb5S98KC5mYJRITYBta+vRvYtKF2EUCaPdQZsa+pMSawjEflRN\" \"/Downloads/Verus-CLI-Linux-v0.9.4-x86_64/Verus-CLI-Linux-v0.9.4-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AYUoIQABQR8xuMk0N7mT6KmiXJ5VKJnZR27+udobzfV0DTlb5S98KC5mYJRITYBta+vRvYtKF2EUCaPdQZsa+pMSawjEflRN\" 8b2c32a13f1154a97644207076c6f73ef774c7897029b1f0d5018677645955b7\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Announcing v0.9.3, NON-MANDATORY FOR MAINNET -- MANDATORY FOR TESTNET USEThis release fixes one issue on mainnet where a node using -connect=\u201dnetworkaddress\u201d may still attempt to connect to other nodes.", "./raw_text_input_wiki/release_notes.md"], ["This update includes the first protocol release candidate for mainnet PBaaS, VerusID protocol upgrades, and Verus DeFi. In addition to some functional fixes and full web site support for mapped currencies and simple commands for mapping Verus currencies to any ERC20 currencies on Ethereum with provable, auditable 1:1 mapping and cross chain send/receive. In addition this new protocol upgrade changes some parameters of the Verus Proof of Power consensus algorithm, enabling smoother starts, restarts, and general operation of PBaaS chains, regardless of their native currency supply or emission schedule. As these consensus parameter changes would require either a testnet fork, which would not be relevant for the mainnet upgrade or a reset, accessing the v0.9.3 testnet requires that you reset your local testnet by deleting the vrsctest and pbaas data folders from the locations described below.As part of this release, we will be launching the new Ethereum bridge and enable full use of Ethereum mapped currencies on the Goerli Ethereum testnet (note that we were previously using Rinkeby). This makes it easy for any currency definition to become a fully decentralized, auditable stable coin, simply by mapping to DAI, USDT, USDC, or another stable coin on Ethereum. In addition, the new website for Metamask support and use from Ethereum now displays all mapped currency options, even those added when someone exports a currency definition to Ethereum, either as a mapped currency or for using any Verus or PBaaS currency as an ERC20.This release also resolves an issue with setting max preconversion amounts on currency launches and addresses a number of minor protocol issues found as a result of the active community testing support we are seeing on testnet.", "./raw_text_input_wiki/release_notes.md"], ["v0.9.3 RESETS TESTNET AND ADDRESSES ALL KNOWN ISSUES FOUND DURING TESTING ON THE NETWORK. FROM HERE, WE HOPE ALL COMMUNITY MEMBERS WILL JOIN IN TRYING OUT ALL FEATURES OF TESTNET TO HELP ENSURE THAT THE FINAL MAINNET RELEASE, WHICH WE ARE WORKING TOWARDS AS SOON AS IT IS CONSIDERED READY AND HARDENED, WILL BE BOTH SMOOTH AND WORLD-CHANGING.IF YOU HAVE ALREADY USED TESTNET WITH VERSIONS PRIOR TO v0.9.2, MAKE SURE TO DELETE AND CLEAR ANY EXISTING TESTNET DATA FOLDERS AS DESCRIBED BELOW.## Platform Support\n- Debian 9 (Stretch) is no longer supported\n## PROTOCOL RELEASE CANDIDATE RC1\nWith v0.9.3, The Verus PBaaS protocol, including networking, public blockchains as a service (PBaaS), VerusID extensions, and Verus DeFi, is considered release candidate RC1 for the coming mainnet upgrade. The core developer focus now remains on protocol hardening and enabling usage first, followed by user experience upgrades and supporting infrastructure such as identity and login support for lite mode, mobile and web extension wallets as well as merge mining for pool servers.## NEW PBAAS CAPABILITIES\nAll PBaaS capabilities, including for application development, are available now on the new Verus testnet. Now would be a good time for development capable projects hoping to get a head start on using Verus\u2019s transformative technologies to do a deep dive on the Verus testnet. These new capabilities in v0.9.3, as well as all those we are familiar with, available nowhere else, will be on mainnet SOON(\u2122):", "./raw_text_input_wiki/release_notes.md"], ["All fractional and centralized {\u201cproofprotocol\u201d:2} currencies can now issue as a decentralized operation, or with centralized currencies, sell, IDs using their own currency as the payment currency, with options for price, referrals, permission from the currency identity required, which means the transaction must be created or co-signed by the currency identity, or even referrals required, which means that an identity registration must have a referral and co-signature of a referring ID that is either the currency ID or another ID from that currency namespace.\nFor fully decentralized fractional currencies, ID registration is paid for by burning the specific fractional currency, reducing the supply, and raising the on-chain value of the primary currency relative to its reserves by reducing the current on-chain supply for everyone.\nThe minimum price of ID registration for fractional currencies can be set in either the fractional currency itself, or in one of its reserves, for example USDC or DAI.More than the minimum price can be paid for ID registration, which may also include VDXF key and contract bindings to allow for multiple types of content or IP licensing in a single ID namespace.\nEach currency, either centralized and/or fractional, can have multiple levels of referral support (limit of 5 levels), meaning that the ID registration fee will be reduced when referred and part of it will be divided evenly among past referrers. The remaining amount of the ID registration fee will be burned for decentralized currencies, or be sent to the currency ID for centralized currencies.", "./raw_text_input_wiki/release_notes.md"], ["While Native IDs, those registered directly from a blockchain as the name parent, will be able to launch currencies on that blockchain, and if on Verus, actual independent blockchains, IDs issued by fractional or centralized currencies cannot launch currencies, but will still be valuable as revocation and recovery IDs for all other VerusIDs as well as for personalized on-chain and cross-chain addresses with all identity and NFT features, for proofs, for brands, contract binding, on-chain marketplace trading, or login, and will have the ability to cross-prove common ownership with other IDs as well.The exception to non-native IDs creating currencies, is that *.veth gateway IDs will be available for decentralized registration from the Ethereum bridge converter and will be able to create Ethereum mapped currencies. Registration of .veth IDs will be priced at 100 USD worth of ETH to prevent misuse and support bridge liquidity, with all fees besides the 1 VRSC import fee, which goes into the mining and staking fee pool going to the bridge converter liquidity basket.All of these features are currently enabled on the v0.9.3 new testnet. Stay connected on the #pbaas-development channel and participate in the launch at no actual cost as a testnet liquidity provider and get some nice testnet IDs, launch your own currencies, or start your exclusive ID-restricted club, governance group, or business.## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):", "./raw_text_input_wiki/release_notes.md"], ["- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`# Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration```json\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```json\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffunds", "./raw_text_input_wiki/release_notes.md"], ["verus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles", "./raw_text_input_wiki/release_notes.md"], ["### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be impleme", "./raw_text_input_wiki/release_notes.md"], ["nted on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```json\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```json\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconvert", "./raw_text_input_wiki/release_notes.md"], ["ing to new currency, NEWCOIN, before it is active:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```json\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n## Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1       // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2       // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4       // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8      // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16 // if set, this chain requires referrals\nOPTION_TOKEN = 32        // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64    // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128       // if set, this routes external currencies\nOPTION_PBAAS = 256        // this is a PBaaS chain definition\nOPTION_PBAAS_CONVERTER = 512   // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the c", "./raw_text_input_wiki/release_notes.md"], ["urrency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/e3920777dc40da783d06df5cf58e3a2bec73257a6aa52e32a357697f8e2840fc/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/9ae67dfc464025af9afedaf6b11857b55f459953a376b8bd969a5e2ebb7f61e2/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/3cf73a75019c0b87b8c7551f423e687b38a8ded3d2d8b9a2e6fd65184f207417/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/ebbfbafe759afe9d40a39473bbaedd15ecd12c53d46c1b1f566b104c2af8fe05/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AYGcHwABQSCPnizC1yvgpTQCGjoVGNa6DTnFk7Y5cJk4B+UnS8ctLwtxP3HsTvqwR/Hf0TAWFqo3pDc9pBHwfnvVj9ddEDhD /Downloads/Verus-CLI-Linux-v0.9.3-x86_64/Verus-CLI-Linux-v0.9.3-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AYGcHwABQSCPnizC1yvgpTQCGjoVGNa6DTnFk7Y5cJk4B+UnS8ctLwtxP3HsTvqwR/Hf0TAWFqo3pDc9pBHwfnvVj9ddEDhD d167fe2800bfe3da70009ff3861cf2eb7415fa6fb7c3e132bde10161ac3f49dd\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Announcing v0.9.2-3, NON-MANDATORY, HIGHLY RECOMMENDED FOR MAINNET -- CRITICAL FOR TESTNET USEThis update enables full use of Ethereum mapped currencies (Rinkeby when the new bridge launches), which provides the ability for any currency to become a fully decentralized, auditable stable coin, simply by mapping to DAI, USDT, USDC, or another on Ethereum. In addition, the new website for Metamask support and use from Ethereum now displays all mapped currency options, even those added when someone exports a currency definition to Ethereum, either as a mapped currency or for using any Verus or PBaaS currency as an ERC20.", "./raw_text_input_wiki/release_notes.md"], ["This release also resolves two PBaaS chain launch issues, one that prevented no-reward chains with initial emission from being accepted and one that could allow a chain launch to go forward, even when a co-launched liquidity basket failed to get enough participation. Thanks to increased participation on testnet use, we are getting continued excellent coverage and resolving issues, which are increasingly edge conditions as we go. discovered on both mainnet and testnet and on testnet fixes an error creating transactions for sub identity registrations on fractional reserve currencies. If you already went through the testnet reset process on any version since v0.9.2, you do not need to reset testnet. The rest of these release notes are the same as the prior version.v0.9.2 RESETS TESTNET AND ADDS A COMPLETE SET OF NEW CAPABILITIES PREVIOUSLY CONSIDERED STRETCH GOALS THAT ENABLE BRANDED SUB-ID ISSUANCE WITH BOTH DECENTRALIZED AND CENTRALIZED OPTIONS AS WELL AS THE FIRST DISRUPTIVE TECHNOLOGY TO SOLVE FOR BRANDED LOYALTY IDENTITIES WITH NOVEL SOLUTIONS FOR ROYALTY AND IP LICENSING BUSINESS MODELS.IF YOU HAVE ALREADY USED TESTNET WITH VERSIONS PRIOR TO v0.9.2, MAKE SURE TO DELETE AND CLEAR ANY EXISTING TESTNET DATA FOLDERS AS DESCRIBED BELOW.FOR MAINNET (AND TESTNET), v0.9.2 PROVIDES ENHANCED PRIVACY FEATURES FOR IDENTITY CREATION## PROTOCOL FEATURE COMPLETE\nWith v0.9.2, The Verus network, public blockchains as a service (PBaaS), VerusID extensions, and Verus DeFi protocols are considered feature complete for the coming mainnet PBaaS upgrade. The core developer focus now is protocol hardening and enabling usage first, followed by user experience upgrades and supporting infrastructure such as identity and login support for lite mode, mobile and web extension wallets as well as merge mining for pool servers.", "./raw_text_input_wiki/release_notes.md"], ["## NEW 3D CROSS-CHAIN LIQUIDITY NETWORK VISUALIZER (GUI FOR TESTNET)\nIn v0.9.2 Verus Desktop, there is a new 3-dimensional cross-chain network visualizer, which shows all currency conversion and fractional network connections both on chain and cross-chain, with the ability to move around and zoom in and out in 3 dimensions. To access the visualizer, click on \u201cVisualize Network\u201d on the Metaverse tab of Verus Desktop. If you\u2019re interested in seeing the visualizer now, here\u2019s a link directly to the visualizer as part of a recent video members of the community helped make (https://youtu.be/CkgUVjx_g1M?t=43).## NEW PBAAS CAPABILITIES\nAll PBaaS capabilities, including for application development, are available now on the new Verus testnet. Our goal for interoperability on this new testnet is to launch the Ethereum/Rinkeby bridge in the next couple days. Now would be a good time for development capable projects hoping to get a head start on using Verus\u2019s transformative technologies to do a deep dive on the Verus testnet. These new capabilities in v0.9.2, as well as all those we are familiar with, available nowhere else, will be on mainnet SOON(\u2122):", "./raw_text_input_wiki/release_notes.md"], ["All fractional and centralized {\u201cproofprotocol\u201d:2} currencies can now issue as a decentralized operation, or with centralized currencies, sell, IDs using their own currency as the payment currency, with options for price, referrals, permission from the currency identity required, which means the transaction must be created or co-signed by the currency identity, or even referrals required, which means that an identity registration must have a referral and co-signature of a referring ID that is either the currency ID or another ID from that currency namespace.\nFor fully decentralized fractional currencies, ID registration is paid for by burning the specific fractional currency, reducing the supply, and raising the on-chain value of the primary currency relative to its reserves by reducing the current on-chain supply for everyone.\nThe minimum price of ID registration for fractional currencies can be set in either the fractional currency itself, or in one of its reserves, for example USDC or DAI.\nMore than the minimum price can be paid for ID registration, which may also include VDXF key and contract bindings to allow for multiple types of content or IP licensing in a single ID namespace.\nEach currency, either centralized and/or fractional, can have multiple levels of referral support (limit of 5 levels), meaning that the ID registration fee will be reduced when referred and part of it will be divided evenly among past referrers. The remaining amount of the ID registration fee will be burned for decentralized currencies, or be sent to the currency ID for centralized currencies.", "./raw_text_input_wiki/release_notes.md"], ["While Native IDs, those registered directly from a blockchain as the name parent, will be able to launch currencies on that blockchain, and if on Verus, actual independent blockchains, IDs issued by fractional or centralized currencies cannot launch currencies, but will still be valuable as revocation and recovery IDs for all other VerusIDs as well as for personalized on-chain and cross-chain addresses with all identity and NFT features, for proofs, for brands, contract binding, on-chain marketplace trading, or login, and will have the ability to cross-prove common ownership with other IDs as well.The exception to non-native IDs creating currencies, is that *.veth gateway IDs will be available for decentralized registration from the Ethereum bridge converter and will be able to create Ethereum mapped currencies. Registration of .veth IDs will be priced at a level to prevent misuse and support bridge liquidity, with all fees besides the 1 VRSC import fee, which goes into the mining and staking fee pool going to the bridge converter liquidity basket.All of these features are currently enabled on the v0.9.2 new testnet. Stay connected on the #pbaas-development channel and participate in the launch at no actual cost as a testnet liquidity provider and get some nice testnet IDs, launch your own currencies, or start your exclusive ID-restricted club, governance group, or business.## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):", "./raw_text_input_wiki/release_notes.md"], ["- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`# Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration```json\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```json\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffunds", "./raw_text_input_wiki/release_notes.md"], ["verus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles", "./raw_text_input_wiki/release_notes.md"], ["### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be impleme", "./raw_text_input_wiki/release_notes.md"], ["nted on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\n The timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\n The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```json\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```json\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconvert", "./raw_text_input_wiki/release_notes.md"], ["ing to new currency, NEWCOIN, before it is active:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```json\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n## Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1       // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2       // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4       // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8      // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16 // if set, this chain requires referrals\nOPTION_TOKEN = 32        // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64    // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128       // if set, this routes external currencies\nOPTION_PBAAS = 256        // this is a PBaaS chain definition\nOPTION_PBAAS_CONVERTER = 512   // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the c", "./raw_text_input_wiki/release_notes.md"], ["urrency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/41a5644d70f3cffe92b55f4a810ce5b05432dcdb2bb0d198d1cdb327773139cc/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/f28ba4bbfec1205c9109c8b2bc02d56e5ec221bf0fd0d6061d4dbb1b5b5fc884/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/fb8ef0d3631e524a41d7d26bd9e2cfbf0eda2d27c63cfe3a12ce6ea18f08941c/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/1583296955647a1b6d67d396526d975f662cb56c354b878dea5898c8f04979da/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AXQSHwABQR+gAuS5YkkVHiKCAjLwqpTNxAxo3wBjRDcYfQ0SqWenTgIB+HA3UUbJkC7qH5YZamiRrr3wOmFwdl6z7OPbXBDk /Downloads/Verus-CLI-Linux-v0.9.2-3-x86_64/Verus-CLI-Linux-v0.9.2-3-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AXQSHwABQR+gAuS5YkkVHiKCAjLwqpTNxAxo3wBjRDcYfQ0SqWenTgIB+HA3UUbJkC7qH5YZamiRrr3wOmFwdl6z7OPbXBDk 09acebdf580f34b322561c247ebbb60a1c975453d4766abbec9229558201a96e\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Announcing v0.9.2-2, NON-MANDATORY, HIGHLY RECOMMENDED FOR MAINNET -- CRITICAL FOR TESTNET USEThis update improves sync speed in some edge cases on both mainnet and testnet and on testnet fixes an error creating transactions for sub identity registrations on fractional reserve currencies. If you already went through the testnet reset process on any version since v0.9.2, you do not need to reset testnet. The rest of these release notes are the same as the prior version.v0.9.2 RESETS TESTNET AND ADDS A COMPLETE SET OF NEW CAPABILITIES PREVIOUSLY CONSIDERED STRETCH GOALS THAT ENABLE BRANDED SUB-ID ISSUANCE WITH BOTH DECENTRALIZED AND CENTRALIZED OPTIONS AS WELL AS THE FIRST DISRUPTIVE TECHNOLOGY TO SOLVE FOR BRANDED LOYALTY IDENTITIES WITH NOVEL SOLUTIONS FOR ROYALTY AND IP LICENSING BUSINESS MODELS.", "./raw_text_input_wiki/release_notes.md"], ["IF YOU HAVE ALREADY USED TESTNET WITH VERSIONS PRIOR TO v0.9.2, MAKE SURE TO DELETE AND CLEAR ANY EXISTING TESTNET DATA FOLDERS AS DESCRIBED BELOW.FOR MAINNET (AND TESTNET), v0.9.2 PROVIDES ENHANCED PRIVACY FEATURES FOR IDENTITY CREATION## PROTOCOL FEATURE COMPLETE\nWith v0.9.2, The Verus network, public blockchains as a service (PBaaS), VerusID extensions, and Verus DeFi protocols are considered feature complete for the coming mainnet PBaaS upgrade. The core developer focus now is protocol hardening and enabling usage first, followed by user experience upgrades and supporting infrastructure such as identity and login support for lite mode, mobile and web extension wallets as well as merge mining for pool servers.## NEW 3D CROSS-CHAIN LIQUIDITY NETWORK VISUALIZER (GUI FOR TESTNET)\nIn v0.9.2 Verus Desktop, there is a new 3-dimensional cross-chain network visualizer, which shows all currency conversion and fractional network connections both on chain and cross-chain, with the ability to move around and zoom in and out in 3 dimensions. To access the visualizer, click on \u201cVisualize Network\u201d on the Metaverse tab of Verus Desktop. If you\u2019re interested in seeing the visualizer now, here\u2019s a link directly to the visualizer as part of a recent video members of the community helped make (https://youtu.be/CkgUVjx_g1M?t=43).## NEW PBAAS CAPABILITIES\nAll PBaaS capabilities, including for application development, are available now on the new Verus testnet. Our goal for interoperability on this new testnet is to launch the Ethereum/Rinkeby bridge in the next couple days. Now would be a good time for development capable projects hoping to get a head start on using Verus\u2019s transformative technologies to do a deep dive on the Verus testnet. These new capabilities in v0.9.2, as well as all those we are familiar with, available nowhere else, will be on mainnet SOON(\u2122):", "./raw_text_input_wiki/release_notes.md"], ["All fractional and centralized {\u201cproofprotocol\u201d:2} currencies can now issue as a decentralized operation, or with centralized currencies, sell, IDs using their own currency as the payment currency, with options for price, referrals, permission from the currency identity required, which means the transaction must be created or co-signed by the currency identity, or even referrals required, which means that an identity registration must have a referral and co-signature of a referring ID that is either the currency ID or another ID from that currency namespace.\nFor fully decentralized fractional currencies, ID registration is paid for by burning the specific fractional currency, reducing the supply, and raising the on-chain value of the primary currency relative to its reserves by reducing the current on-chain supply for everyone.\nThe minimum price of ID registration for fractional currencies can be set in either the fractional currency itself, or in one of its reserves, for example USDC or DAI.\nMore than the minimum price can be paid for ID registration, which may also include VDXF key and contract bindings to allow for multiple types of content or IP licensing in a single ID namespace.\nEach currency, either centralized and/or fractional, can have multiple levels of referral support (limit of 5 levels), meaning that the ID registration fee will be reduced when referred and part of it will be divided evenly among past referrers. The remaining amount of the ID registration fee will be burned for decentralized currencies, or be sent to the currency ID for centralized currencies.", "./raw_text_input_wiki/release_notes.md"], ["While Native IDs, those registered directly from a blockchain as the name parent, will be able to launch currencies on that blockchain, and if on Verus, actual independent blockchains, IDs issued by fractional or centralized currencies cannot launch currencies, but will still be valuable as revocation and recovery IDs for all other VerusIDs as well as for personalized on-chain and cross-chain addresses with all identity and NFT features, for proofs, for brands, contract binding, on-chain marketplace trading, or login, and will have the ability to cross-prove common ownership with other IDs as well.The exception to non-native IDs creating currencies, is that *.veth gateway IDs will be available for decentralized registration from the Ethereum bridge converter and will be able to create Ethereum mapped currencies. Registration of .veth IDs will be priced at a level to prevent misuse and support bridge liquidity, with all fees besides the 1 VRSC import fee, which goes into the mining and staking fee pool going to the bridge converter liquidity basket.All of these features are currently enabled on the v0.9.2 new testnet. Stay connected on the #pbaas-development channel and participate in the launch at no actual cost as a testnet liquidity provider and get some nice testnet IDs, launch your own currencies, or start your exclusive ID-restricted club, governance group, or business.## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):", "./raw_text_input_wiki/release_notes.md"], ["- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`# Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration```json\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```json\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffunds", "./raw_text_input_wiki/release_notes.md"], ["verus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles", "./raw_text_input_wiki/release_notes.md"], ["### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be impleme", "./raw_text_input_wiki/release_notes.md"], ["nted on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\nThe timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\nThe timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```json\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```json\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconvert", "./raw_text_input_wiki/release_notes.md"], ["ing to new currency, NEWCOIN, before it is active:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```json\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n## Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1       // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2       // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4       // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8      // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16 // if set, this chain requires referrals\nOPTION_TOKEN = 32        // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64    // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128       // if set, this routes external currencies\nOPTION_PBAAS = 256        // this is a PBaaS chain definition\nOPTION_PBAAS_CONVERTER = 512   // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the c", "./raw_text_input_wiki/release_notes.md"], ["urrency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Defining a PBaaS blockchain\n```json\n {\n  \"name\": \"PBaaSChain\",\n  \"options\": 264,\n  \"currencies\": [\n   \"VRSCTEST\"\n  ],\n  \"conversions\": [\n   1\n  ],\n  \"eras\": [\n   {\n    \"reward\": 1200000000,\n    \"decay\": 0,\n    \"halving\": 0,\n    \"eraend\": 0\n   }\n  ],\n  \"notaries\": [\n   \"Notary1@\",\n   \"Notary2@\",\n   \"Notary3@\",\n  ],\n  \"minnotariesconfirm\": 2,\n  \"nodes\": [\n   {\n    \"networkaddress\": \"111.111.111.111:10000\",\n    \"nodeidentity\": \"Node1@\"\n   },\n   {\n    \"networkaddress\": \"111.111.111.112:10000\",\n    \"nodeidentity\": \"Node2@\"\n   }\n  ],\n  \"gatewayconvertername\": \"Bridge\",\n  \"gatewayconverterissuance\": 1000000\n }\n```\nThe bridge definition has overridable defaults\n```json\n {\n  \"currencies\": [\n   \"VRSCTEST\",\n   \"PBaaSChain\",\n   \"USD\"\n  ],\n  \"initialcontributions\": [\n   380228.12033701,\n   0,\n   1000000\n  ],\n  \"initialsupply\": 3000000\n }\n```Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/8c8c5240270807e16e8975032f3de5853daaddc76ff667af279ef7df05418082/detection\n **Linux-x86-64:** https://www.virustotal.com/gui/file/28b726f52f306e6c86e04563dbe7d385d3021d8acb2e0be1d586416b9d83a0f5/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/5908d9acfd3b6d2f65071dd650732f7f38f96ab9e822d90676a3f7f561821c57/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/0168e46dc9edeb65af91fe5f8842516800c60f2ea793f7cef695232c8bdcaba7/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\n https://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\n A txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AQn/HgABQR8IlODV3COH5wvsCidoZiBgBc+riVxS4jgdH4WlfJ5TnU03J9UhgJNhNG3VmqpyfNO53JIFGuYXHjEAgagdeYnO /Downloads/Verus-CLI-Linux-v0.9.2-2-x86_64/Verus-CLI-Linux-v0.9.2-2-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AQn/HgABQR8IlODV3COH5wvsCidoZiBgBc+riVxS4jgdH4WlfJ5TnU03J9UhgJNhNG3VmqpyfNO53JIFGuYXHjEAgagdeYnO 4758a04c8d9923cb7cd784cb2f91dcbcc2c38a5f95312406c097ff5b8ba30dc9\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Announcing v0.9.2-1, NO FUNCTIONAL CHANGES TO MAINNET FROM v0.9.2 -- CRITICAL FOR TESTNET USEThis update fixes an error in creating transactions for sub identity registrations on fractional reserve currencies and it fixes a synchronization issue that could prevent some clients from fully syncing testnet. The rest of these release notes are the same as the prior version.v0.9.2 RESETS TESTNET AND ADDS A COMPLETE SET OF NEW CAPABILITIES PREVIOUSLY CONSIDERED STRETCH GOALS THAT ENABLE BRANDED SUB-ID ISSUANCE WITH BOTH DECENTRALIZED AND CENTRALIZED OPTIONS AS WELL AS THE FIRST DISRUPTIVE TECHNOLOGY TO SOLVE FOR BRANDED LOYALTY IDENTITIES WITH NOVEL SOLUTIONS FOR ROYALTY AND IP LICENSING BUSINESS MODELS.IF YOU HAVE ALREADY USED TESTNET WITH VERSIONS PRIOR TO v0.9.2, MAKE SURE TO DELETE AND CLEAR ANY EXISTING TESTNET DATA FOLDERS AS DESCRIBED BELOW.", "./raw_text_input_wiki/release_notes.md"], ["FOR MAINNET (AND TESTNET), v0.9.2 PROVIDES ENHANCED PRIVACY FEATURES FOR IDENTITY CREATION## PROTOCOL FEATURE COMPLETE\nWith v0.9.2, The Verus network, public blockchains as a service (PBaaS), VerusID extensions, and Verus DeFi protocols are considered feature complete for the coming mainnet PBaaS upgrade. The core developer focus now is protocol hardening and enabling usage first, followed by user experience upgrades and supporting infrastructure such as identity and login support for lite mode, mobile and web extension wallets as well as merge mining for pool servers.## NEW 3D CROSS-CHAIN LIQUIDITY NETWORK VISUALIZER (GUI FOR TESTNET)\nIn v0.9.2 Verus Desktop, there is a new 3-dimensional cross-chain network visualizer, which shows all currency conversion and fractional network connections both on chain and cross-chain, with the ability to move around and zoom in and out in 3 dimensions. To access the visualizer, click on \u201cVisualize Network\u201d on the Metaverse tab of Verus Desktop. If you\u2019re interested in seeing the visualizer now, here\u2019s a link directly to the visualizer as part of a recent video members of the community helped make (https://youtu.be/CkgUVjx_g1M?t=43).## NEW PBAAS CAPABILITIES\nAll PBaaS capabilities, including for application development, are available now on the new Verus testnet. Our goal for interoperability on this new testnet is to launch the Ethereum/Rinkeby bridge in the next couple days. Now would be a good time for development capable projects hoping to get a head start on using Verus\u2019s transformative technologies to do a deep dive on the Verus testnet. These new capabilities in v0.9.2, as well as all those we are familiar with, available nowhere else, will be on mainnet SOON(\u2122):", "./raw_text_input_wiki/release_notes.md"], ["All fractional and centralized {\u201cproofprotocol\u201d:2} currencies can now issue as a decentralized operation, or with centralized currencies, sell, IDs using their own currency as the payment currency, with options for price, referrals, permission from the currency identity required, which means the transaction must be created or co-signed by the currency identity, or even referrals required, which means that an identity registration must have a referral and co-signature of a referring ID that is either the currency ID or another ID from that currency namespace.\nFor fully decentralized fractional currencies, ID registration is paid for by burning the specific fractional currency, reducing the supply, and raising the on-chain value of the primary currency relative to its reserves by reducing the current on-chain supply for everyone.\nThe minimum price of ID registration for fractional currencies can be set in either the fractional currency itself, or in one of its reserves, for example USDC or DAI.\nMore than the minimum price can be paid for ID registration, which may also include VDXF key and contract bindings to allow for multiple types of content or IP licensing in a single ID namespace.\nEach currency, either centralized and/or fractional, can have multiple levels of referral support (limit of 5 levels), meaning that the ID registration fee will be reduced when referred and part of it will be divided evenly among past referrers. The remaining amount of the ID registration fee will be burned for decentralized currencies, or be sent to the currency ID for centralized currencies.", "./raw_text_input_wiki/release_notes.md"], ["While Native IDs, those registered directly from a blockchain as the name parent, will be able to launch currencies on that blockchain, and if on Verus, actual independent blockchains, IDs issued by fractional or centralized currencies cannot launch currencies, but will still be valuable as revocation and recovery IDs for all other VerusIDs as well as for personalized on-chain and cross-chain addresses with all identity and NFT features, for proofs, for brands, contract binding, on-chain marketplace trading, or login, and will have the ability to cross-prove common ownership with other IDs as well.The exception to non-native IDs creating currencies, is that *.veth gateway IDs will be available for decentralized registration from the Ethereum bridge converter and will be able to create Ethereum mapped currencies. Registration of .veth IDs will be priced at a level to prevent misuse and support bridge liquidity, with all fees besides the 1 VRSC import fee, which goes into the mining and staking fee pool going to the bridge converter liquidity basket.All of these features are currently enabled on the v0.9.2 new testnet. Stay connected on the #pbaas-development channel and participate in the launch at no actual cost as a testnet liquidity provider and get some nice testnet IDs, launch your own currencies, or start your exclusive ID-restricted club, governance group, or business.## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):", "./raw_text_input_wiki/release_notes.md"], ["- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`# Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration```json\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```json\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffunds", "./raw_text_input_wiki/release_notes.md"], ["verus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles", "./raw_text_input_wiki/release_notes.md"], ["### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be impleme", "./raw_text_input_wiki/release_notes.md"], ["nted on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\nThe timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\nThe timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```json\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```json\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconvert", "./raw_text_input_wiki/release_notes.md"], ["ing to new currency, NEWCOIN, before it is active:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```json\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n## Defining a Currency\n### Currency Options\n```\nOPTION_FRACTIONAL = 1       // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2       // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4       // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8      // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16 // if set, this chain requires referrals\nOPTION_TOKEN = 32        // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64    // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128       // if set, this routes external currencies\nOPTION_PBAAS = 256        // this is a PBaaS chain definition\nOPTION_PBAAS_CONVERTER = 512   // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the c", "./raw_text_input_wiki/release_notes.md"], ["urrency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Defining a PBaaS blockchain\n```json\n {\n  \"name\": \"PBaaSChain\",\n  \"options\": 264,\n  \"currencies\": [\n   \"VRSCTEST\"\n  ],\n  \"conversions\": [\n   1\n  ],\n  \"eras\": [\n   {\n    \"reward\": 1200000000,\n    \"decay\": 0,\n    \"halving\": 0,\n    \"eraend\": 0\n   }\n  ],\n  \"notaries\": [\n   \"Notary1@\",\n   \"Notary2@\",\n   \"Notary3@\",\n  ],\n  \"minnotariesconfirm\": 2,\n  \"nodes\": [\n   {\n    \"networkaddress\": \"111.111.111.111:10000\",\n    \"nodeidentity\": \"Node1@\"\n   },\n   {\n    \"networkaddress\": \"111.111.111.112:10000\",\n    \"nodeidentity\": \"Node2@\"\n   }\n  ],\n  \"gatewayconvertername\": \"Bridge\",\n  \"gatewayconverterissuance\": 1000000\n }\n```\nThe bridge definition has overridable defaults\n```json\n {\n  \"currencies\": [\n   \"VRSCTEST\",\n   \"PBaaSChain\",\n   \"USD\"\n  ],\n  \"initialcontributions\": [\n   380228.12033701,\n   0,\n   1000000\n  ],\n  \"initialsupply\": 3000000\n }\n```Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/b236e84af64c14fe576ad82370faec59dc3e2ba1df6a587fc3317560491be602/detection\n **Linux-x86-64:** https://www.virustotal.com/gui/file/13594d432962e107130ab4dccda0241456b1d94b4116232825fe2bf254415981/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/ab1f35048024838bc61627051a6bcd908df02b16327f4c177a31c47d536e1f2b/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/bcd62e56dce40060a333e81bd2ce2ee87bfb9e41fa1494e0779924e29b5800f8/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\n https://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\n A txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AYi7HgABQR/3O5kb1Dyxwwt1tNJL6s7LU9W/griFa/zzeUechZJSaRFsVSYN9btmznD3zfEAoCnDDQiD2OoB2MwmrdhgDSJI /Downloads/Verus-CLI-Linux-v0.9.2-1-x86_64/Verus-CLI-Linux-v0.9.2-1-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AYi7HgABQR/3O5kb1Dyxwwt1tNJL6s7LU9W/griFa/zzeUechZJSaRFsVSYN9btmznD3zfEAoCnDDQiD2OoB2MwmrdhgDSJI 60c686897e4d29a2d73f31f84e01670c6ca912f0b1e6ed9124eae479ad8bd292\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n## Announcing v0.9.2, OPTIONAL, HIGHLY RECOMMENDED FOR MAINNET, MANDATORY FOR TESTNET USE - THIS IS A BIG ANNOUNCE, BUT IF YOU CARE ABOUT THE PBAAS UPGRADE, WE RECOMMEND READING IT ALL.v0.9.2 RESETS TESTNET AND ADDS A COMPLETE SET OF NEW CAPABILITIES PREVIOUSLY CONSIDERED STRETCH GOALS THAT ENABLE BRANDED SUB-ID ISSUANCE WITH BOTH DECENTRALIZED AND CENTRALIZED OPTIONS AS WELL AS THE FIRST DISRUPTIVE TECHNOLOGY TO SOLVE FOR BRANDED LOYALTY IDENTITIES WITH NOVEL SOLUTIONS FOR ROYALTY AND IP LICENSING BUSINESS MODELS.IF YOU HAVE ALREADY USED TESTNET WITH VERSIONS PRIOR TO v0.9.2, MAKE SURE TO DELETE AND CLEAR ANY EXISTING TESTNET DATA FOLDERS AS DESCRIBED BELOW.FOR MAINNET (AND TESTNET), v0.9.2 PROVIDES ENHANCED PRIVACY FEATURES FOR IDENTITY CREATION", "./raw_text_input_wiki/release_notes.md"], ["## PROTOCOL FEATURE COMPLETE\nWith v0.9.2, The Verus network, public blockchains as a service (PBaaS), VerusID extensions, and Verus DeFi protocols are considered feature complete for the coming mainnet PBaaS upgrade. The core developer focus now is protocol hardening and enabling usage first, followed by user experience upgrades and supporting infrastructure such as identity and login support for lite mode, mobile and web extension wallets as well as merge mining for pool servers.## NEW 3D CROSS-CHAIN LIQUIDITY NETWORK VISUALIZER (GUI FOR TESTNET)\nIn v0.9.2 Verus Desktop, there is a new 3-dimensional cross-chain network visualizer, which shows all currency conversion and fractional network connections both on chain and cross-chain, with the ability to move around and zoom in and out in 3 dimensions. To access the visualizer, click on \u201cVisualize Network\u201d on the Metaverse tab of Verus Desktop. If you\u2019re interested in seeing the visualizer now, here\u2019s a link directly to the visualizer as part of a recent video members of the community helped make (https://youtu.be/CkgUVjx_g1M?t=43).## NEW PBAAS CAPABILITIES\nAll PBaaS capabilities, including for application development, are available now on the new Verus testnet. Our goal for interoperability on this new testnet is to launch the Ethereum/Rinkeby bridge in the next couple days. Now would be a good time for development capable projects hoping to get a head start on using Verus\u2019s transformative technologies to do a deep dive on the Verus testnet. These new capabilities in v0.9.2, as well as all those we are familiar with, available nowhere else, will be on mainnet SOON(\u2122):", "./raw_text_input_wiki/release_notes.md"], ["All fractional and centralized {\u201cproofprotocol\u201d:2} currencies can now issue as a decentralized operation, or with centralized currencies, sell, IDs using their own currency as the payment currency, with options for price, referrals, permission from the currency identity required, which means the transaction must be created or co-signed by the currency identity, or even referrals required, which means that an identity registration must have a referral and co-signature of a referring ID that is either the currency ID or another ID from that currency namespace.\nFor fully decentralized fractional currencies, ID registration is paid for by burning the specific fractional currency, reducing the supply, and raising the on-chain value of the primary currency relative to its reserves by reducing the current on-chain supply for everyone.\nThe minimum price of ID registration for fractional currencies can be set in either the fractional currency itself, or in one of its reserves, for example USDC or DAI.\nMore than the minimum price can be paid for ID registration, which may also include VDXF key and contract bindings to allow for multiple types of content or IP licensing in a single ID namespace.\nEach currency, either centralized and/or fractional, can have multiple levels of referral support (limit of 5 levels), meaning that the ID registration fee will be reduced when referred and part of it will be divided evenly among past referrers. The remaining amount of the ID registration fee will be burned for decentralized currencies, or be sent to the currency ID for centralized currencies.", "./raw_text_input_wiki/release_notes.md"], ["While Native IDs, those registered directly from a blockchain as the name parent, will be able to launch currencies on that blockchain, and if on Verus, actual independent blockchains, IDs issued by fractional or centralized currencies cannot launch currencies, but will still be valuable as revocation and recovery IDs for all other VerusIDs as well as for personalized on-chain and cross-chain addresses with all identity and NFT features, for proofs, for brands, contract binding, on-chain marketplace trading, or login, and will have the ability to cross-prove common ownership with other IDs as well.The exception to non-native IDs creating currencies, is that *.veth gateway IDs will be available for decentralized registration from the Ethereum bridge converter and will be able to create Ethereum mapped currencies. Registration of .veth IDs will be priced at a level to prevent misuse and support bridge liquidity, with all fees besides the 1 VRSC import fee, which goes into the mining and staking fee pool going to the bridge converter liquidity basket.All of these features are currently enabled on the v0.9.2 new testnet. Stay connected on the #pbaas-development channel and participate in the launch at no actual cost as a testnet liquidity provider and get some nice testnet IDs, launch your own currencies, or start your exclusive ID-restricted club, governance group, or business.## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):", "./raw_text_input_wiki/release_notes.md"], ["- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`# Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration```json\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```json\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffunds", "./raw_text_input_wiki/release_notes.md"], ["verus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles", "./raw_text_input_wiki/release_notes.md"], ["### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be impleme", "./raw_text_input_wiki/release_notes.md"], ["nted on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\nThe timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\nThe timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```json\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```json\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconvert", "./raw_text_input_wiki/release_notes.md"], ["ing to new currency, NEWCOIN, before it is active:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```json\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n### Defining a Currency\n## Currency Options\n```\nOPTION_FRACTIONAL = 1       // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2       // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4       // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8      // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16 // if set, this chain requires referrals\nOPTION_TOKEN = 32        // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64    // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128       // if set, this routes external currencies\nOPTION_PBAAS = 256        // this is a PBaaS chain definition\nOPTION_PBAAS_CONVERTER = 512   // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the c", "./raw_text_input_wiki/release_notes.md"], ["urrency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Defining a PBaaS blockchain\n```json\n {\n  \"name\": \"PBaaSChain\",\n  \"options\": 264,\n  \"currencies\": [\n   \"VRSCTEST\"\n  ],\n  \"conversions\": [\n   1\n  ],\n  \"eras\": [\n   {\n    \"reward\": 1200000000,\n    \"decay\": 0,\n    \"halving\": 0,\n    \"eraend\": 0\n   }\n  ],\n  \"notaries\": [\n   \"Notary1@\",\n   \"Notary2@\",\n   \"Notary3@\",\n  ],\n  \"minnotariesconfirm\": 2,\n  \"nodes\": [\n   {\n    \"networkaddress\": \"111.111.111.111:10000\",\n    \"nodeidentity\": \"Node1@\"\n   },\n   {\n    \"networkaddress\": \"111.111.111.112:10000\",\n    \"nodeidentity\": \"Node2@\"\n   }\n  ],\n  \"gatewayconvertername\": \"Bridge\",\n  \"gatewayconverterissuance\": 1000000\n }\n```\nThe bridge definition has overridable defaults\n```json\n {\n  \"currencies\": [\n   \"VRSCTEST\",\n   \"PBaaSChain\",\n   \"USD\"\n  ],\n  \"initialcontributions\": [\n   380228.12033701,\n   0,\n   1000000\n  ],\n  \"initialsupply\": 3000000\n }\n```Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/a70cd7e14f4b43a0c0123fb938881ccc7900396ce14057e4887986c591a2d506/detection\n **Linux-x86-64:** https://www.virustotal.com/gui/file/26af0cebea1b579b1e7d55c3fcd927a2da1d58c4b3d4461e7039858f3f12f0f5/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/ef820935c721c11b0843e7925be5ba56b77937030028ca4ccab038c3117571a1/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/9c9d63e43e93b6c2b86a1ef2c70d62c92c9b280fa86a1c7c091b4053f48300a5/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\n https://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\n A txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AXKyHgABQSAZDjfHQ0HpRG4ORdPljczZMSDrmKVHLHy9YCAiy2wQOgW2wfl8+qJ3BbL3A4pyGyS0WDUTI7CN7LZNGxjHd47Z /Downloads/Verus-CLI-Linux-v0.9.2-x86_64/Verus-CLI-Linux-v0.9.2-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AXKyHgABQSAZDjfHQ0HpRG4ORdPljczZMSDrmKVHLHy9YCAiy2wQOgW2wfl8+qJ3BbL3A4pyGyS0WDUTI7CN7LZNGxjHd47Z 5add9cc3221ca69772a6f256036f72b14cc3652c53c15710511bdac7a533de5a\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n# ANNOUNCING PBAAS TESTNET UPGRADE v0.9.1-2, OPTIONAL FOR MAINNET USERS -- MANDATORY FOR TESTNET USERS\n### v0.9.1-2 RESETS TESTNET -- THERE ARE NO MAINNET CHANGES### IF YOU HAVE ALREADY USED TESTNET WITH VERSIONS PRIOR TO v0.9.1-2, MAKE SURE TO DELETE AND CLEAR ANY EXISTING TESTNET DATA FOLDERS AS DESCRIBED BELOW.\n## Testnet Featuring Verus PBaaS\n### The most powerful and interoperable currency, blockchain, and ERC20 launch, scale, and MEV-resistant DeFi platform to exist, all with no programming required!## Verus PBaaS Features Live on v0.9.1-2 Testnet\n- Provable or pseudonymous, identity-based currency, liquidity pool, NFT and multi-blockchain, fully decentralized network.\n- On-chain 100% decentralized, launches with fair launch and/or crowdfunding options, on-chain auto-refund option for missed targets, automatic Ethereum ERC20 contract deployment, auto-created, MEV-resistant, liquidity baskets and even auto-bridg", "./raw_text_input_wiki/release_notes.md"], ["ed, merge mineable, fully independent rent-free PBaaS blockchain launches.\n- All DeFi AMM conversions are verified via mining and staking as part of the L1 consensus protocol. All conversions in a single liquidity basket are calculated simultaneously for all transactions in any given block, meaning all participants get the same price in all directions of conversion, with a minimum conversion fee of 0.025% and a maximum of 0.05%.\n- All currencies and identities are primitives at L1 and are validated and verified on UTXO transactions, which check all inputs and outputs just as single currency L1, such as Ethereum or Bitcoin check the native currency inputs and outputs of transactions.\n- All currencies on all independent connected chains, once launched can be sent back and forth to other multi-currency capable networks (currently other independent PBaaS chains and Ethereum as ERC20s).\n- Currencies on Verus can also be defined as \"mapped currencies\", which map 1:1 to an existing currency on Ethereum (eg. DAI), and can then be sent from Ethereum with simple transactions and received and used as the new \"mapped currency\", or sent back to Ethereum and used there as the original currency.\n- Currency launches can raise funds in 3 ways. Each of these fundraising options creates a currency that is not 100% backed, and has a price that responds to market forces. 100% backed currencies do not change their relative price to the underlying basket reserve when they are converted to or from reserves. Fractionally backed currencies, which result from fundraising or endowing launch grants/pre-allocations to DAOs or entities such as foundations, whether time-locked or not, take their funding from a percentage of the reserve backing. Except in the case of a new blockchain launch, which creates new native currency for operating the proof of stake of the blockchain, any currency that uses f", "./raw_text_input_wiki/release_notes.md"], ["undraising options will be a fractionally backed currency which will appreciate when more people convert to it and depreciate when more convert from it. If a launch is refunded due to minimum participation options that are not met, no fundraising is received:\n - Pre-launch discount - all participants contributing to the launch before it goes live on its start block get a discount to the initial on-chain price of the currency. This is usually accompanied by a maximum cap on pre-conversion participation to ensure that the currency would still be in demand when it goes live.\n- Pre-launch carve-out - this enables a percentage of each of the initial participation currencies to be carved out of the launch and total reserve ratio in a price neutral manner and sent directly to the launching identity upon successful launch.\n- Pre-allocation - this enables some of the newly launched currency to be pre-allocated to one or more identities. If the currency is fractional, this happens in a price neutral manner, and again is subtracted from the reserve ratio. Recipients can optionally be time locked IDs for vesting or unlock periods.", "./raw_text_input_wiki/release_notes.md"], ["## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):", "./raw_text_input_wiki/release_notes.md"], ["- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.", "./raw_text_input_wiki/release_notes.md"], ["IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be impleme", "./raw_text_input_wiki/release_notes.md"], ["nted on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\nThe timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\nThe timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```json\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```json\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconvert", "./raw_text_input_wiki/release_notes.md"], ["ing to new currency, NEWCOIN, before it is active:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```json\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n### Defining a Currency\n## Currency Options\n```\nOPTION_FRACTIONAL = 1       // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2       // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4       // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8      // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16 // if set, this chain requires referrals\nOPTION_TOKEN = 32        // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64    // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128       // if set, this routes external currencies\nOPTION_PBAAS = 256        // this is a PBaaS chain definition\nOPTION_PBAAS_CONVERTER = 512   // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the c", "./raw_text_input_wiki/release_notes.md"], ["urrency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Defining a PBaaS blockchain\n```json\n {\n  \"name\": \"PBaaSChain\",\n  \"options\": 264,\n  \"currencies\": [\n   \"VRSCTEST\"\n  ],\n  \"conversions\": [\n   1\n  ],\n  \"eras\": [\n   {\n    \"reward\": 1200000000,\n    \"decay\": 0,\n    \"halving\": 0,\n    \"eraend\": 0\n   }\n  ],\n  \"notaries\": [\n   \"Notary1@\",\n   \"Notary2@\",\n   \"Notary3@\",\n  ],\n  \"minnotariesconfirm\": 2,\n  \"nodes\": [\n   {\n    \"networkaddress\": \"111.111.111.111:10000\",\n    \"nodeidentity\": \"Node1@\"\n   },\n   {\n    \"networkaddress\": \"111.111.111.112:10000\",\n    \"nodeidentity\": \"Node2@\"\n   }\n  ],\n  \"gatewayconvertername\": \"Bridge\",\n  \"gatewayconverterissuance\": 1000000\n }\n```\nThe bridge definition has overridable defaults\n```json\n {\n  \"currencies\": [\n   \"VRSCTEST\",\n   \"PBaaSChain\",\n   \"USD\"\n  ],\n  \"initialcontributions\": [\n   380228.12033701,\n   0,\n   1000000\n  ],\n  \"initialsupply\": 3000000\n }\n```Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/c0989e59ecee58bb1936d0cbe4f171a9b97b679730bccfae372e59575f8d9bff/detection\n **Linux-x86-64:** https://www.virustotal.com/gui/file/0cbecd05a8dca2f73f959e35206b8d07711ac9c27e9c26afc2605ca315ef825b/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/c6f262bc03d0add6e8f593f455c661b8eafb7ad4d2ee94c13d2796226f4c4a58/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/386f6dfd78419d45412a94d7c1b293a0bbd12749cd9debf62e8196ea2cc0c762/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\n https://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\n A txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AYrcHQABQSBCgRc2BNPaD7R7lXD3BRfwV2dHQ7yyJ1qB/ZDX03Jk5VoHZdMG5c/V/j1rZCVfXWQm66momTr4Ee05L+mfjf9l /Downloads/Verus-CLI-Linux-v0.9.1-2-x86_64/Verus-CLI-Linux-v0.9.1-2-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AYrcHQABQSBCgRc2BNPaD7R7lXD3BRfwV2dHQ7yyJ1qB/ZDX03Jk5VoHZdMG5c/V/j1rZCVfXWQm66momTr4Ee05L+mfjf9l 1f9e4144c48e0df53778c0a0af2dcbde57f95dd119c2348fbe3343fb4500da38\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n# ANNOUNCING MAINNET AND PBAAS TESTNET UPGRADE v0.9.1-1\n## CRITICAL FOR NOTARIES, POOLS, EXCHANGES, MANDATORY FOR TESTNET USERS, HIGHLY RECOMMENDED FOR ALL MAINNET USERS\n### v0.9.1-1 includes testnet fixes for the Ethereum bridge launch with advanced features, addresses all known issues on testnet, and includes sync improvements for testnet and mainnet.## Testnet Featuring Verus PBaaS\n### The most powerful and interoperable currency, blockchain, and ERC20 launch, scale, and MEV-resistant DeFi platform to exist, all with no programming required!### IF YOU HAVE ALREADY USED TESTNET WITH VERSIONS PRIOR TO v0.9.1, MAKE SURE TO DELETE AND CLEAR ANY EXISTING TESTNET DATA FOLDERS AS DESCRIBED BELOW.## Verus PBaaS Features Live on v0.9.1-1 Testnet\n- Provable or pseudonymous, identity-based currency, liquidity pool, NFT and multi-blockchain, fully decentralized network.\n- On-chain 100% decentralized, launches with fair la", "./raw_text_input_wiki/release_notes.md"], ["unch and/or crowdfunding options, on-chain auto-refund option for missed targets, automatic Ethereum ERC20 contract deployment, auto-created, MEV-resistant, liquidity baskets and even auto-bridged, merge mineable, fully independent rent-free PBaaS blockchain launches.\n- All DeFi AMM conversions are verified via mining and staking as part of the L1 consensus protocol. All conversions in a single liquidity basket are calculated simultaneously for all transactions in any given block, meaning all participants get the same price in all directions of conversion, with a minimum conversion fee of 0.025% and a maximum of 0.05%.\n- All currencies and identities are primitives at L1 and are validated and verified on UTXO transactions, which check all inputs and outputs just as single currency L1, such as Ethereum or Bitcoin check the native currency inputs and outputs of transactions.\n- All currencies on all independent connected chains, once launched can be sent back and forth to other multi-currency capable networks (currently other independent PBaaS chains and Ethereum as ERC20s).\n- Currencies on Verus can also be defined as \"mapped currencies\", which map 1:1 to an existing currency on Ethereum (eg. DAI), and can then be sent from Ethereum with simple transactions and received and used as the new \"mapped currency\", or sent back to Ethereum and used there as the original currency.\n- Currency launches can raise funds in 3 ways. Each of these fundraising options creates a currency that is not 100% backed, and has a price that responds to market forces. 100% backed currencies do not change their relative price to the underlying basket reserve when they are converted to or from reserves. Fractionally backed currencies, which result from fundraising or endowing launch grants/pre-allocations to DAOs or entities such as foundations, whether time-locked or not, take their funding from ", "./raw_text_input_wiki/release_notes.md"], ["a percentage of the reserve backing. Except in the case of a new blockchain launch, which creates new native currency for operating the proof of stake of the blockchain, any currency that uses fundraising options will be a fractionally backed currency which will appreciate when more people convert to it and depreciate when more convert from it. If a launch is refunded due to minimum participation options that are not met, no fundraising is received:\n - Pre-launch discount - all participants contributing to the launch before it goes live on its start block get a discount to the initial on-chain price of the currency. This is usually accompanied by a maximum cap on pre-conversion participation to ensure that the currency would still be in demand when it goes live.\n- Pre-launch carve-out - this enables a percentage of each of the initial participation currencies to be carved out of the launch and total reserve ratio in a price neutral manner and sent directly to the launching identity upon successful launch.\n- Pre-allocation - this enables some of the newly launched currency to be pre-allocated to one or more identities. If the currency is fractional, this happens in a price neutral manner, and again is subtracted from the reserve ratio. Recipients can optionally be time locked IDs for vesting or unlock periods.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.", "./raw_text_input_wiki/release_notes.md"], ["### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be impleme", "./raw_text_input_wiki/release_notes.md"], ["nted on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\nThe timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\nThe timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```json\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```json\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconvert", "./raw_text_input_wiki/release_notes.md"], ["ing to new currency, NEWCOIN, before it is active:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```json\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n### Defining a Currency\n## Currency Options\n```\nOPTION_FRACTIONAL = 1       // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2       // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4       // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8      // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16 // if set, this chain requires referrals\nOPTION_TOKEN = 32        // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64    // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128       // if set, this routes external currencies\nOPTION_PBAAS = 256        // this is a PBaaS chain definition\nOPTION_PBAAS_CONVERTER = 512   // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the c", "./raw_text_input_wiki/release_notes.md"], ["urrency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Defining a PBaaS blockchain\n```json\n {\n  \"name\": \"PBaaSChain\",\n  \"options\": 264,\n  \"currencies\": [\n   \"VRSCTEST\"\n  ],\n  \"conversions\": [\n   1\n  ],\n  \"eras\": [\n   {\n    \"reward\": 1200000000,\n    \"decay\": 0,\n    \"halving\": 0,\n    \"eraend\": 0\n   }\n  ],\n  \"notaries\": [\n   \"Notary1@\",\n   \"Notary2@\",\n   \"Notary3@\",\n  ],\n  \"minnotariesconfirm\": 2,\n  \"nodes\": [\n   {\n    \"networkaddress\": \"111.111.111.111:10000\",\n    \"nodeidentity\": \"Node1@\"\n   },\n   {\n    \"networkaddress\": \"111.111.111.112:10000\",\n    \"nodeidentity\": \"Node2@\"\n   }\n  ],\n  \"gatewayconvertername\": \"Bridge\",\n  \"gatewayconverterissuance\": 1000000\n }\n```\nThe bridge definition has overridable defaults\n```json\n {\n  \"currencies\": [\n   \"VRSCTEST\",\n   \"PBaaSChain\",\n   \"USD\"\n  ],\n  \"initialcontributions\": [\n   380228.12033701,\n   0,\n   1000000\n  ],\n  \"initialsupply\": 3000000\n }\n```Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/cf645e9513dfcbd8e2e43eb330bb9090e91fd8f33a9521a86a75f90ff998ecc1/detection\n **Linux-x86-64:** https://www.virustotal.com/gui/file/0ce97d7a308077827cea5dbfc37f48dc6d253ff5f0924db4d58abaf4068cd22e/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/0088ad441a3bed5a134d1fbf5752f8ffed31bfd226bf5142e4c41ec02e2bb46f/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/fc110cfa3ab9eab71b7661628d9d0dc4fcfdb450801c41e81576a99e35244a5e/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\n https://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\n A txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AU+tHQABQR+/ObpwL0kRP/cIf4PvNMa/GBJa2f82LrGDGF8S45GHOlfZwHM7kL5X0Qst+1IVD8O1adW8TeAlqZY6EIOh0Q5/ /Downloads/Verus-CLI-Linux-v0.9.1-1-x86_64/Verus-CLI-Linux-v0.9.1-1-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AU+tHQABQR+/ObpwL0kRP/cIf4PvNMa/GBJa2f82LrGDGF8S45GHOlfZwHM7kL5X0Qst+1IVD8O1adW8TeAlqZY6EIOh0Q5/ 62819af68f302a39a02fe17ab3b917f4c51f6286e67dc3966718fe059299ff6c\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n# ANNOUNCING NON-MANDATORY, RECOMMENDED FOR MAINNET, MANDATORY FOR TESTNET PBAAS UPGRADE v0.9.1\n## Testnet Featuring Verus PBaaS -- The most powerful and interoperable currency, blockchain, and ERC20 launch, scale, and MEV-resistant DeFi platform to exist, all with no programming required!### v0.9.1 improves mainnet bootstrap and GUI backup/restore user experience but does not upgrade mainnet protocols and is not a required update for mainnet-only users. It is required to use the public testnet. IF YOU HAVE ALREADY USED TESTNET WITH PRIOR VERSIONS, MAKE SURE TO DELETE AND CLEAR ANY EXISTING TESTNET DATA FOLDERS AS DESCRIBED BELOW.## Verus PBaaS Features Live on v0.9.1 Testnet\n- Provable or pseudonymous, identity-based currency, liquidity pool, NFT and multi-blockchain, fully decentralized network.\n- On-chain 100% decentralized, launches with fair launch and/or crowdfunding options, on-chain auto-refund option for", "./raw_text_input_wiki/release_notes.md"], [" missed targets, automatic Ethereum ERC20 contract deployment, auto-created, MEV-resistant, liquidity baskets and even auto-bridged, merge mineable, fully independent rent-free PBaaS blockchain launches.\n- All DeFi AMM conversions are verified via mining and staking as part of the L1 consensus protocol. All conversions in a single liquidity basket are calculated simultaneously for all transactions in any given block, meaning all participants get the same price in all directions of conversion, with a minimum conversion fee of 0.025% and a maximum of 0.05%.\n- All currencies and identities are primitives at L1 and are validated and verified on UTXO transactions, which check all inputs and outputs just as single currency L1, such as Ethereum or Bitcoin check the native currency inputs and outputs of transactions.\n- All currencies on all independent connected chains, once launched can be sent back and forth to other multi-currency capable networks (currently other independent PBaaS chains and Ethereum as ERC20s).\n- Currencies on Verus can also be defined as \"mapped currencies\", which map 1:1 to an existing currency on Ethereum (eg. DAI), and can then be sent from Ethereum with simple transactions and received and used as the new \"mapped currency\", or sent back to Ethereum and used there as the original currency.\n- Currency launches can raise funds in 3 ways. Each of these fundraising options creates a currency that is not 100% backed, and has a price that responds to market forces. 100% backed currencies do not change their relative price to the underlying basket reserve when they are converted to or from reserves. Fractionally backed currencies, which result from fundraising or endowing launch grants/pre-allocations to DAOs or entities such as foundations, whether time-locked or not, take their funding from a percentage of the reserve backing. Except in the case of a new ", "./raw_text_input_wiki/release_notes.md"], ["blockchain launch, which creates new native currency for operating the proof of stake of the blockchain, any currency that uses fundraising options will be a fractionally backed currency which will appreciate when more people convert to it and depreciate when more convert from it. If a launch is refunded due to minimum participation options that are not met, no fundraising is received:\n - Pre-launch discount - all participants contributing to the launch before it goes live on its start block get a discount to the initial on-chain price of the currency. This is usually accompanied by a maximum cap on pre-conversion participation to ensure that the currency would still be in demand when it goes live.\n- Pre-launch carve-out - this enables a percentage of each of the initial participation currencies to be carved out of the launch and total reserve ratio in a price neutral manner and sent directly to the launching identity upon successful launch.\n- Pre-allocation - this enables some of the newly launched currency to be pre-allocated to one or more identities. If the currency is fractional, this happens in a price neutral manner, and again is subtracted from the reserve ratio. Recipients can optionally be time locked IDs for vesting or unlock periods.", "./raw_text_input_wiki/release_notes.md"], ["## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):", "./raw_text_input_wiki/release_notes.md"], ["- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`# Additional Verus Capabilities\n- On-chain Launches of Token, Centralized Currency, and Liquidity Basket AMMs\n- On-chain Launches and Merge Mining of Independent, Connected, Interoperable Blockchains without Programming\n- On-chain Self Sovereign, Provable Identities, NFTs, and Individual or Organizational Profiles### Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.### Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.", "./raw_text_input_wiki/release_notes.md"], ["IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.### The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.### Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be impleme", "./raw_text_input_wiki/release_notes.md"], ["nted on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n- Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n- Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n### Locking and Unlocking IDs\n- **Time Lock:**\nThe timelock parameter defines the unlock height of the identity.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- **Time Delay:**\nThe timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nWill return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```json\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n```json\nverus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n```\n- **Preconvert", "./raw_text_input_wiki/release_notes.md"], ["ing to new currency, NEWCOIN, before it is active:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n```json\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n- **Converting PBaaSChain to VRSCTEST:**\n```json\nverus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n```\n### Defining a Currency\n## Currency Options\n```\nOPTION_FRACTIONAL = 1       // allows reserve conversion using base calculations when set\nOPTION_ID_ISSUANCE = 2       // clear is permissionless, if set, IDs may only be created by controlling ID\nOPTION_ID_STAKING = 4       // all IDs on chain stake equally, rather than value-based staking\nOPTION_ID_REFERRALS = 8      // if set, this chain supports referrals\nOPTION_ID_REFERRALREQUIRED = 16 // if set, this chain requires referrals\nOPTION_TOKEN = 32        // if set, this is a token, not a native currency\nOPTION_SINGLECURRENCY = 64    // for PBaaS chains or gateways to potentially restrict to single currency\nOPTION_GATEWAY = 128       // if set, this routes external currencies\nOPTION_PBAAS = 256        // this is a PBaaS chain definition\nOPTION_PBAAS_CONVERTER = 512   // this means that for a specific PBaaS gateway, this is the default converter and will publish prices\n```", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n ```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the c", "./raw_text_input_wiki/release_notes.md"], ["urrency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n ```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Defining a PBaaS blockchain\n```json\n {\n  \"name\": \"PBaaSChain\",\n  \"options\": 264,\n  \"currencies\": [\n   \"VRSCTEST\"\n  ],\n  \"conversions\": [\n   1\n  ],\n  \"eras\": [\n   {\n    \"reward\": 1200000000,\n    \"decay\": 0,\n    \"halving\": 0,\n    \"eraend\": 0\n   }\n  ],\n  \"notaries\": [\n   \"Notary1@\",\n   \"Notary2@\",\n   \"Notary3@\",\n  ],\n  \"minnotariesconfirm\": 2,\n  \"nodes\": [\n   {\n    \"networkaddress\": \"111.111.111.111:10000\",\n    \"nodeidentity\": \"Node1@\"\n   },\n   {\n    \"networkaddress\": \"111.111.111.112:10000\",\n    \"nodeidentity\": \"Node2@\"\n   }\n  ],\n  \"gatewayconvertername\": \"Bridge\",\n  \"gatewayconverterissuance\": 1000000\n }\n```\nThe bridge definition has overridable defaults\n```json\n {\n  \"currencies\": [\n   \"VRSCTEST\",\n   \"PBaaSChain\",\n   \"USD\"\n  ],\n  \"initialcontributions\": [\n   380228.12033701,\n   0,\n   1000000\n  ],\n  \"initialsupply\": 3000000\n }\n```Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/3c6ec8e701fdbfc966ae7e4606898aebd4f32538ef97ad32a94b723731becdf0/detection\n **Linux-x86-64:** https://www.virustotal.com/gui/file/ed0d96a02e617a4d5aaa3a396dd28d9b2378e7377ef9236c31946bb4afea5a3e/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/29289f0bb1c6a83b6a0a323ed867c7bb3857a33ca189397728f49ad513ce6641/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/55b8df070559fc7e4010a1b9466b4c7cce529c464eee17627f8409eaf61ac623/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\n https://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\n A txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" ARh1HQABQSDoIbL907lmsx8IkKa0e3YT88VnW6KS47hnb5NbnegPSmVwVzx09t9/Y01Y1eJWMHMILnCgrF8hdGSi/75TBfvk /Downloads/Verus-CLI-Linux-v0.9.1-x86_64/Verus-CLI-Linux-v0.9.1-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" ARh1HQABQSDoIbL907lmsx8IkKa0e3YT88VnW6KS47hnb5NbnegPSmVwVzx09t9/Y01Y1eJWMHMILnCgrF8hdGSi/75TBfvk ca05b85e8124d1c8f8a781616ef48119bca64f746715361e4e44e88b3830b911\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Announcing NON-MANDATORY, RECOMMENDED Verus v0.9.0-3. This release is considered non-mandatory but IS RECOMMENDED for mainnet users, Komodo notaries, and is recommended for testnet users to ensure the best experience with testnet.## This version fixes the following issues with v0.9.0-2\n- Adds GUI support for seeing, making, and taking offers for currency or identity trades on the VerusID tab and when searching for identities.\n- Fixes an issue where offers to buy or sell IDs were prematurely closed, even when expiry was set far in the future\n- Fixes an issue with setidentitytimelock that caused it to return an error in most cases\n- Ensures full rescanning of identities when using z_importwallet", "./raw_text_input_wiki/release_notes.md"], ["## New Command and API for Verus Vault - setidentitytimelock\nv0.9.0-2 introduced a new command and RPC API, \"setidentitytimelock\". setidentitytimelock may be used to set a time unlock delay, set a lock until a specific block height, or unlock a delayed timelock on a VerusID under your control.You can use setidentitytimelock in one of two ways:\n```\nverus setidentitytimelock '{\"unlockatblock\":1796500}' (returntx)\n```\nor\n```\nverus setidentitytimelock '{\"setunlockdelay\":1440}' (returntx)\n```\nor\n```\nverus setidentitytimelock '{\"unlockatblock\":0}' (returntx)\n```\nThe first example will lock the ID until the block specified. If the block specified is in the past, the ID will not be locked.\nThe second example will set a 1440 block unlock delay, which will be needed to wait before spending funds controlled by the ID after unlocking the ID (about one day unlock time).\nThe third example will unlock an ID that has been locked with an unlock delay, and the unlock time will be set to the block height at which the ID was unlocked + the originally set unlock delay.", "./raw_text_input_wiki/release_notes.md"], ["## Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.## Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`## Exporting an ID to a PBaaS chain\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n  ```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.## The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.## Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implement", "./raw_text_input_wiki/release_notes.md"], ["ed on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n - Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n - Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"B", "./raw_text_input_wiki/release_notes.md"], ["TC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the curre", "./raw_text_input_wiki/release_notes.md"], ["ncy must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/vrsctest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/vrsctest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n```# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/a373bb52686ec4bae4f77843e8c806179b6e20c40f1f4855ab7f76c70f9e962a/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/c77976b43222ddecbea829cf5805d6f5d0b062b52f3c7112bde5e51c94d6a5e0/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/31aad050a7f726ed359598d506805882ca48b16d0015a1d156c7b41a786bfa3b/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/bddd820126a27512872d9dd8c966fcf253fe46777288b452ce22e8dcc1352ef0/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AdJ2GwABQSCjCvnuaFl4Crj1vRK7s3gPAGa7u3OktJVrSY6NQoj002JK4IcK9xx0yQue/LK0Kg7H6L+h42BTTZb9+zeLgGVs /Downloads/Verus-CLI-Linux-v0.9.0-3-x86_64/Verus-CLI-Linux-v0.9.0-3-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AdJ2GwABQSCjCvnuaFl4Crj1vRK7s3gPAGa7u3OktJVrSY6NQoj002JK4IcK9xx0yQue/LK0Kg7H6L+h42BTTZb9+zeLgGVs fd58ff4f7f25a3eb2d48ce0b022c78162df66275c9f2257e071c5b97e9d94812\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Announcing NON-MANDATORY, RECOMMENDED Verus v0.9.0-2. This release is considered non-mandatory but IS RECOMMENDED for mainnet users, Komodo notaries, and is mandatory for testnet users to ensure reliable connection to the current testnet.## TO REMAIN CONNECTED TO THE MAINNET VERUS BLOCKCHAIN, YOU MUST UPGRADE FULL NODES TO v0.9.0 OR LATER. IF YOU HAVE NOT UPDATED AND ATTEMPTED TO STAY CONNECT TO MAINNET, YOU MAY NEED TO BOOTSTRAP OR RESYNC YOUR NATIVE WALLET OR NODE AFTER UPGRADING.", "./raw_text_input_wiki/release_notes.md"], ["## New Command and API for Verus Vault - setidentitytimelock\nv0.9.0-2 introduces a new command and RPC API, \"setidentitytimelock\". setidentitytimelock may be used to set a time unlock delay, set a lock until a specific block height, or unlock a delayed timelock on a VerusID under your control.You can use setidentitytimelock in one of two ways:\n```\nverus setidentitytimelock '{\"unlockatblock\":1796500}' (returntx)\n```\nor\n```\nverus setidentitytimelock '{\"setunlockdelay\":1440}' (returntx)\n```\nor\n```\nverus setidentitytimelock '{\"unlockatblock\":0}' (returntx)\n```\nThe first example will lock the ID until the block specified. If the block specified is in the past, the ID will not be locked.\nThe second example will set a 1440 block unlock delay, which will be needed to wait before spending funds controlled by the ID after unlocking the ID (about one day unlock time).\nThe third example will unlock an ID that has been locked with an unlock delay, and the unlock time will be set to the block height at which the ID was unlocked + the originally set unlock delay.", "./raw_text_input_wiki/release_notes.md"], ["## Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.## Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyone with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`## Exporting an ID to a PBaaS chain\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n  ```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.## The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.## Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implement", "./raw_text_input_wiki/release_notes.md"], ["ed on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n - Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n - Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"B", "./raw_text_input_wiki/release_notes.md"], ["TC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the curre", "./raw_text_input_wiki/release_notes.md"], ["ncy must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/vrsctest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/vrsctest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n```# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/94d81f9760a29d0407620a6dc0cd78af0518a34898a56e70b20224e99c4f2cb7/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/d84eca262fb1b4a44901eb6a334924cd1ab8520d479bb46b2d3b213b1b628d9e/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/9e5a0b54b634b7dd4f389de51a67eacaa1c0317981b6aa05fad5e0f4c095e409/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/b0008b14b4273f76c23f0090b19d5dbbae08758cc78094c13b811e25ba4a51af/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AQVqGwABQR/OeunkOwu/sRpFtHBBU33MD6DkvkFnM8vpFTBmNQF1m3eAtOyetX0LuTcUxjuc1KMX/vj15Y54e0OSwzYWtLAA /Downloads/Verus-CLI-Linux-v0.9.0-2-x86_64/Verus-CLI-Linux-v0.9.0-2-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AQVqGwABQR/OeunkOwu/sRpFtHBBU33MD6DkvkFnM8vpFTBmNQF1m3eAtOyetX0LuTcUxjuc1KMX/vj15Y54e0OSwzYWtLAA c814ca39dae00ca2152ab01ed3bd6b4a10e5d0b10320677f08686fb15c9bd126\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Announcing NON-MANDATORY, RECOMMENDED Verus v0.9.0-1. This release is considered non-mandatory but IS RECOMMENDED for mainnet users, Komodo notaries, and is mandatory for testnet users to ensure reliable connection to the current testnet.## TO REMAIN CONNECTED TO THE MAINNET VERUS BLOCKCHAIN, YOU MUST UPGRADE FULL NODES TO v0.9.0 OR LATER BY BLOCK 1796400, which is expected to occur on or around Monday, November 29th at 6:15PM UTC.", "./raw_text_input_wiki/release_notes.md"], ["## Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.## Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyoe with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`## Exporting an ID to a PBaaS chain\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n  ```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.## The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.## Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implement", "./raw_text_input_wiki/release_notes.md"], ["ed on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n - Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n - Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"B", "./raw_text_input_wiki/release_notes.md"], ["TC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the curre", "./raw_text_input_wiki/release_notes.md"], ["ncy must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/vrsctest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/vrsctest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n```# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/5b250aae5e5ae396a2ca74de8f59f3840098590a299c05cb26733e2d5a5b6cce/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/e8f4b9d83089e73d1f3e9e314c1d459f7fa3d28ee38cae6eaa3f17f2904be453/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/04c6d45b62873d4ff56103a07d85d0e0ffcf84416a434ce1c96e4e987132f88a/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/f9cc46ba66cd73424604fb7f596ff61f709527724d78252d283373e82c356ad4/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AXY1GwABQR+zDdT4vg66nRnK/0lvyxWRsHUf0tg6mAzJSv7a5BVrpzCjxnKr3zOPhxtrxpaNOU5duU4+69S/pqY7HSq4k6MJ /Downloads/Verus-CLI-Linux-v0.9.0-1-x86_64/Verus-CLI-Linux-v0.9.0-1-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AXY1GwABQR+zDdT4vg66nRnK/0lvyxWRsHUf0tg6mAzJSv7a5BVrpzCjxnKr3zOPhxtrxpaNOU5duU4+69S/pqY7HSq4k6MJ d2e5fc890f646773624c55797d2dd38bab35a2839ad208ec0b668d34b24b27d3\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Announcing MANDATORY Verus v0.9.0 Mainnet Release of Verus Vault and the on-chain NFT and ID Marketplace\n## TO REMAIN CONNECTED TO THE MAINNET VERUS BLOCKCHAIN, YOU MUST UPGRADE FULL NODES TO v0.9.0 OR LATER BY BLOCK 1796400, which is expected to occur on or around Monday, November 29th at 6:15PM UTC.", "./raw_text_input_wiki/release_notes.md"], ["## Verus ID and NFT Marketplace\nBuy and sell VerusIDs on-chain, advertising your offer directly to the owner of an ID or NFT, or posting the sale of your NFT on the worldwide blockchain for all the world to see. Execute transactions in a completely decentralized way. Pay or offer to pay from a transparent or zero-knowledge private address, still auditable by you. Accept payment to either as well, and best of all, execute your transactions directly, peer-to-peer without any intermediary necessary. Don\u2019t worry the on-chain model still makes room for owners to select and share proceeds with value added agents, marketing organizations, or other participants in a new economy of provable digital ownership. It\u2019s the next step in the evolution of VerusID, the most powerful self-sovereign identity and secure storage model for funds in the digital world.## Verus Vault\nWith Verus Vault you can now protect funds on a VerusID, even from theft of a private key! If you lock your VerusID with Vault you cannot spend funds from that identity at all until it is again unlocked. While locked, you can still stake those same funds on the Verus network and earn by doing so. Of course, you can also still receive funds.IT IS IMPORTANT TO NOTE THAT ENABLING REVOCATION, RECOVERY, AND ALL VERUS VAULT CAPABILITIES REQUIRE YOU TO HAVE ONE PRIMARY IDENTITY, AND AT LEAST ONE REVOCATION/RECOVERY ID CONFIGURED.", "./raw_text_input_wiki/release_notes.md"], ["A locked VerusID can always be revoked and recovered by its revocation and recovery authority identities, which circumvents the lock. At the same time, anyoe with only the primary keys, even a multisig of primary keys must first unlock, then wait for the predetermined unlock time before they can spend or access funds. This gives you, or maybe a company that specializes in watching the blockchain to whom you've assigned the revocation ID to revoke and recover whenever an unauthorized unlock occurs. That means that like a bank, setting a 24 hour unlock delay on your locked IDs actually provides the first decentralized solution to the infamous 5 dollar wrench attack.In addition to a new level of blockchain protection and decentralized funds recovery, Verus Vault provides the same security for your IDs and NFTs as well as time locks for other purposes, such as vesting schedules, trusts, and inheritance. With Verus Vault, you can now protect and recover your funds, preserving all your assets and generational blockchain wealth from common forms of crypto loss or theft, no bank required.## Testnet Reset\nTo reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\vrsctest\\`, `%AppData%\\Roaming\\VerusTest`## Exporting an ID to a PBaaS chain\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n  ```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.## The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.## Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implement", "./raw_text_input_wiki/release_notes.md"], ["ed on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n - Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n - Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"B", "./raw_text_input_wiki/release_notes.md"], ["TC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the curre", "./raw_text_input_wiki/release_notes.md"], ["ncy must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/vrsctest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/vrsctest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n```# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/66f08fb597b6e68d7c5f6c93ac444cfbaec2d03535a31f6d86d6f164d8a1bd05/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/697656f6243a66d2ba40cbef3028edbeccbe5c9b8222c36617ea89ed94b5b996/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/7bbe91e83713e57c391df8ab25e9ce95d24ede9605fdfbcd72a7d140419e5657/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/cf2e044ef9a061dbee93f12fc06c26342bbce6ea7cfa93ebed656de3d4ce3b99/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AeoZGwABQR9Qyoon3B6wDze32NWnzFLRIl5mTH+OqmWNNxvAPDB+8CUTYBVcMAfiMOT87yGhfr8gn4KrQmpTe1Mllm0yjQRu /Downloads/Verus-CLI-Linux-v0.9.0-x86_64/Verus-CLI-Linux-v0.9.0-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AeoZGwABQR9Qyoon3B6wDze32NWnzFLRIl5mTH+OqmWNNxvAPDB+8CUTYBVcMAfiMOT87yGhfr8gn4KrQmpTe1Mllm0yjQRu 2c29c3af72e33117e28ac79b060abe5d87d892c4ed7204b40125c674afd2403f\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Announcing immediate availability of GUI and CLI for all platforms of the NON-MANDATORY v0.8.0-5 UPDATE - ONLY REQUIRED FOR THOSE CONTINUING TO HELP GET TESTNET READY FOR MAINNETWe want to thank the Verus Community for bearing with the number of updates we've had to get the bridge to Ethereum working smoothly. This release both fixes the remaining known bridge issues and adds security to ensure that you don't send to an unspendable address on any network by using the wrong format for a destination.", "./raw_text_input_wiki/release_notes.md"], ["The good news is that throughout the whole process of this first bridge release on testnet, we've been able to update through the issues we've seen without a reset and have not lost a single satoshi of test funds (which is not to say it is fully hardened quite yet). At this point, we hope and believe that this is the last update in this round of testnet, which will allow us to get back to focusing on the mainnet release and not asking those testing to update until we are very close to a mainnet release.Once more, we will ask that you shut down the old version now, and we will restart the notarizations and transaction flow between Ethereum and Verus at 5 AM UTC time.Thank you to everyone who helped with all the testing and exposing of issues that enabled us to make maybe even inconveniently quick progress.If you miss the fork for this version at the above time you can get back on the correct chain by stopping Verus and deleting deleting everything other than your wallet.dat file in your data directory at:\n- Linux: `~/.Komodo/vrsctest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest` or `%AppData%\\Komodo\\vrsctest`## Exporting an ID to a PBaaS chain\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n  ```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.## The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.## Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implement", "./raw_text_input_wiki/release_notes.md"], ["ed on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n - Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n - Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"B", "./raw_text_input_wiki/release_notes.md"], ["TC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the curre", "./raw_text_input_wiki/release_notes.md"], ["ncy must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/vrsctest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/vrsctest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n```# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/ff594a0d654578f460d0668c745cbb5440c888fe506141c8d6be636aae2d89ba/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/ba5d35f051c235f7340b9e4f020a7dbdfcea714be8d906bddb45d4195b84a21e/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/cd2df860d9a2813d069a94de43af89950c4553d18b513392346b23418a7cb490/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/af461a1ee81a3dd3e6bd25cb38213d0ce16f23b690a85a71ea831e2d87af48cb/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AaObGgABQR8BNRwDtlS1dqFyJEIEJMxKmQijlwW5KWZVIrPkIEjWCjzFZak9ZBIWyrFObHHPNrdE72mVCUblg1Ap4fzMfk1D /Downloads/Verus-CLI-Linux-v0.8.0-5-x86_64/Verus-CLI-Linux-v0.8.0-5-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AaObGgABQR8BNRwDtlS1dqFyJEIEJMxKmQijlwW5KWZVIrPkIEjWCjzFZak9ZBIWyrFObHHPNrdE72mVCUblg1Ap4fzMfk1D 157349879796973a3b1dbbfd446da72126484393942cc1c87615620d1ac2ad8b\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Announcing immediate availability of GUI and CLI for all platforms of the NON-MANDATORY v0.8.0-4 UPDATE.This release has no mainnet changes, resolves issues that people using testnet have reported with the Ethereum/Rinkeby bridge, and is mandatory for those who wish to continue using testnet after transactions between the Verus and Rinkeby testnets resume flowing.", "./raw_text_input_wiki/release_notes.md"], ["If you have pending transactions on the bridge, some requested conversions may come back as refunded, and you should receive all amounts expected, less fees. We will not reset the testnet, but within an hour after this availability, the network will resume transaction imports/exports to and from Rinkeby, and anyone who continues running the old version may need to resync to testnet from scratch to continue. If you have upgraded to v0.8.0-4 or do so before connecting again to testnet, you should only see improvement without disruption.I want to thank everyone who participated already in using this testnet and bridge release. I hope we can keep that level of participation or more up, as it has been extremely helpful. Because of all that\u2019s happened on this testnet to date, we were able to make a lot of progress in finding and resolving the following testnet issues in this release:1. Enable support for much larger proofs than was previously possible from systems that either have large proofs required or significantly variable length proofs. Having this capability in the daemon will pave the way for more types of cross-chain proving in the future as well.\n2. Fix failed refunds of conversion transactions attempted after a fractional currency launches, but before it\u2019s preconversion phase is complete. If you sent transactions during this time, you may have stuck refunds that should flow after this upgrade.\n3. Ensure that currencies are marked as \u201claunch complete\u201d immediately after all preconversions have been processed, enabling normal conversions in all directions from that point forward.\n4. Fix an issue that left some import notarizations incomplete and caused cross-chain transfers to wait longer than expected after some imports.\n5. Improve and validate hardening.", "./raw_text_input_wiki/release_notes.md"], ["If you miss the fork for this version at the above time you can get back on the correct chain by stopping Verus and deleting deleting everything other than your wallet.dat file in your data directory at:\n- Linux: `~/.Komodo/vrsctest`\n- Mac OS: `~/Library/Application Support/Komodo/vrsctest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest` or `%AppData%\\Komodo\\vrsctest`## Exporting an ID to a PBaaS chain\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n  ```## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.", "./raw_text_input_wiki/release_notes.md"], ["The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.## The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.## Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is t", "./raw_text_input_wiki/release_notes.md"], ["o revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n - Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n#", "./raw_text_input_wiki/release_notes.md"], ["# Simultaneous blockchain and blockchain liquidity pool launches\n - Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as", "./raw_text_input_wiki/release_notes.md"], [" private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\"", "./raw_text_input_wiki/release_notes.md"], [":\"bob@:private\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"", "./raw_text_input_wiki/release_notes.md"], ["my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/vrsctest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/vrsctest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n```# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/c0662bb8a69114058d57a8f096170b3787e29b8ce7e9305845b005259371556a/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/1b8c8d898253ba0d665db73cbbcc05d346e2cc0160d2d99184bd4ce45167bdd3/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/d0d3a63cf95f0a5b350c14d5e4b3940ec2f1db40f240209dad18a212cfea8644/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/61fb27dda606908962f20cc9b20416e6bc066afbca81647e74a56b1395d8e645/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AfKUGgABQSA/OfjAZGEy1HhA1iTKRDvPLV+cXXbVfn+3IClAtsqIHl4Q6IuIClHsynG4FnE5ttW8rxuSNG5EXezmoMRkzxXH /Downloads/Verus-CLI-Linux-v0.8.0-4-x86_64/Verus-CLI-Linux-v0.8.0-4-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AfKUGgABQSA/OfjAZGEy1HhA1iTKRDvPLV+cXXbVfn+3IClAtsqIHl4Q6IuIClHsynG4FnE5ttW8rxuSNG5EXezmoMRkzxXH 0ca20fcf2480be882d17bc77ad693b7a4e918502bfc7c67592dfb0c32ba26199\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Announcing immediate availability of GUI and CLI for all platforms of the NON-MANDATORY v0.8.0-3 UPDATE.THIS UPDATE IS ONLY NEEDED FOR THOSE COMMUNITY MEMBERS USING TESTNET. THERE ARE NO MAINNET CHANGES IN THIS VERSION.You will need this update to stay connected to testnet once we restart bridge traffic in about an hour. If you do stay connected on the old version and fork away from testnet, you should still be able to start with a reindex and rescan after upgrade.v0.8.0 Updates include:", "./raw_text_input_wiki/release_notes.md"], ["1. Testnet reset with fixes for all reported PBaaS, DeFi, and advanced VerusID user issues. If you had reported issues, please verify that the issues you reported are addressed in this release.\n2. Support for the bidirectional Ethereum gateway/bridge, which has been testing on private networks and which we hope to launch within a day or two after first vetting it on the release testing network with community test volunteers.\n3. Support for the new `getvdxfid` RPC call, used along with your ID and published names to generate VDXF (Verus Data eXchange Format) keys, which community members used to create the world\u2019s first self-sovereign, completely decentralized, rent-free, non-cancelable social media profiles as can be seen here: https://luckpool.net/profile/identity/mike.vrsc . Work is underway to document the VDXF keys defined and used for profiles as well as the process of setting up your own. While the capability is already extremely powerful, we should remind everyone that Verus is a platform, not a social network. The core technology is exciting, but what will be even more exciting is when businesses and entrepreneurs leverage it to enable new, self-sovereign user experiences, applications, and accompanying businesses to enable the future, truly decentralized web.\n4. Fix for the Electron certificate issue in the GUI wallet, which has been affecting prices and preventing BTC fee calculation.\n5. Support for some additional, popular ERC20 currencies, in anticipation of more usage after release of the ETH bridge.\n6. Fix in GUI for calculated balances of specific addresses sometimes showing lower than actual, even though wallet balance displayed correctly.\n7. Additional hardening, fixes and improvement focused on mainnet and the Ethereum bridge.", "./raw_text_input_wiki/release_notes.md"], ["To reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/VRSC`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\VRSC\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\VRSC\\`, `%AppData%\\Roaming\\VerusTest`## Exporting an ID to a PBaaS chain\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n  ```## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```", "./raw_text_input_wiki/release_notes.md"], ["## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.## The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.## Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration o", "./raw_text_input_wiki/release_notes.md"], ["f friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n - Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currenc", "./raw_text_input_wiki/release_notes.md"], ["ies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n - Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs", "./raw_text_input_wiki/release_notes.md"], [" of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Q", "./raw_text_input_wiki/release_notes.md"], ["ueries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain", "./raw_text_input_wiki/release_notes.md"], [" to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sen", "./raw_text_input_wiki/release_notes.md"], ["dcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```", "./raw_text_input_wiki/release_notes.md"], ["Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.", "./raw_text_input_wiki/release_notes.md"], ["## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/vrsctest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/vrsctest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n```# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/gui/file/4bbaf0dbd73a748226933ccb1b101fa3874f3d5549de4fd334735d3ed0ebe50e/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/62a353c6c39512a2779629dcefc90c2d64104ad97f0af798d5269ab283e00ce7/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/1344d8d98b5e42aa1dff1dc380a8c8f20c555d296967078c9c18ae560c2cc0fc/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/c4d5998b8dd133f029387c7eff92db883e75c6024a8e868be3d2b6feca8b98a5/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AVZ7GgABQR/RKbDtXeDnzBNFkmE9eWv9WRLchaCxUchK2VOmtxqubmqobR9g3SrX0J+OSrVlsElix6RIxCxyHAGjwQ+zsvWv /Downloads/Verus-CLI-Linux-v0.8.0-3-x86_64/Verus-CLI-Linux-v0.8.0-3-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AVZ7GgABQR/RKbDtXeDnzBNFkmE9eWv9WRLchaCxUchK2VOmtxqubmqobR9g3SrX0J+OSrVlsElix6RIxCxyHAGjwQ+zsvWv dcaa6b06eef134429e7c077396bc5957228985e8ab70d2b34058d0da02721243\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Announcing immediate availability of GUI and CLI for all platforms of the NON-MANDATORY v0.8.0-2 UPDATEThis daemon release includes a fix that simplifies some bridge transactions, and is the version you should run on testnet when the Ethereum bridge does launch for a good experience.v0.8.0 Updates include:", "./raw_text_input_wiki/release_notes.md"], ["1. Testnet reset with fixes for all reported PBaaS, DeFi, and advanced VerusID user issues. If you had reported issues, please verify that the issues you reported are addressed in this release.\n2. Support for the bidirectional Ethereum gateway/bridge, which has been testing on private networks and which we hope to launch within a day or two after first vetting it on the release testing network with community test volunteers.\n3. Support for the new `getvdxfid` RPC call, used along with your ID and published names to generate VDXF (Verus Data eXchange Format) keys, which community members used to create the world\u2019s first self-sovereign, completely decentralized, rent-free, non-cancelable social media profiles as can be seen here: https://luckpool.net/profile/identity/mike.vrsc . Work is underway to document the VDXF keys defined and used for profiles as well as the process of setting up your own. While the capability is already extremely powerful, we should remind everyone that Verus is a platform, not a social network. The core technology is exciting, but what will be even more exciting is when businesses and entrepreneurs leverage it to enable new, self-sovereign user experiences, applications, and accompanying businesses to enable the future, truly decentralized web.\n4. Fix for the Electron certificate issue in the GUI wallet, which has been affecting prices and preventing BTC fee calculation.\n5. Support for some additional, popular ERC20 currencies, in anticipation of more usage after release of the ETH bridge.\n6. Fix in GUI for calculated balances of specific addresses sometimes showing lower than actual, even though wallet balance displayed correctly.\n7. Additional hardening, fixes and improvement focused on mainnet and the Ethereum bridge.", "./raw_text_input_wiki/release_notes.md"], ["To reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/VRSC`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\VRSC\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\VRSC\\`, `%AppData%\\Roaming\\VerusTest`## Exporting an ID to a PBaaS chain\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n  ```## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```", "./raw_text_input_wiki/release_notes.md"], ["## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.## The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.## Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration o", "./raw_text_input_wiki/release_notes.md"], ["f friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n - Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currenc", "./raw_text_input_wiki/release_notes.md"], ["ies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n - Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs", "./raw_text_input_wiki/release_notes.md"], [" of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Q", "./raw_text_input_wiki/release_notes.md"], ["ueries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain", "./raw_text_input_wiki/release_notes.md"], [" to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sen", "./raw_text_input_wiki/release_notes.md"], ["dcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```", "./raw_text_input_wiki/release_notes.md"], ["Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.", "./raw_text_input_wiki/release_notes.md"], ["## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/vrsctest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/vrsctest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n```# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/gui/file/5f76dafe4c5569ae6ee1ea9ebf57a348c6f0536f5c8e2269c88788d55a5eeb10/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/2bb6e95451ab19b4480422652cc4b53ea23c000a8d5c1f21efba6423c8558492/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/17029a232661259b9f0ee8daf5a9cd99e7f5899130c657fc96b103801fbb3d32/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/02f23519de5afdfa6afbcb202321f58d8e277afaa1be08781cb1130e86abf48b/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AQh2GgABQR+PYOQxgJtQzB8wwbU+VvPvLApcEfAmvJ+jI78h/qPVTnU0uJrpy4Fvc7yGCWHT1Awh3NSGRFbYQAVQB7u+5XWi /Downloads/Verus-CLI-Linux-v0.8.0-2-x86_64/Verus-CLI-Linux-v0.8.0-2-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AQh2GgABQR+PYOQxgJtQzB8wwbU+VvPvLApcEfAmvJ+jI78h/qPVTnU0uJrpy4Fvc7yGCWHT1Awh3NSGRFbYQAVQB7u+5XWi 414f4f2d090d329602584ca5c665ecf04ab00570ce997f78bd5b50e55e3dc977\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Announcing immediate availability of GUI and CLI for all platforms of the NON-MANDATORY v0.8.0-1 UPDATEThis release includes a testnet fix for the Ethereum bridge and is required for those who want to continue using the current testnet.v0.8.0 and v0.8.0-1 Updates include:", "./raw_text_input_wiki/release_notes.md"], ["1. Testnet reset with fixes for all reported PBaaS, DeFi, and advanced VerusID user issues. If you had reported issues, please verify that the issues you reported are addressed in this release.\n2. Support for the bidirectional Ethereum gateway/bridge, which has been testing on private networks and which we hope to launch within a day or two after first vetting it on the release testing network with community test volunteers.\n3. Support for the new `getvdxfid` RPC call, used along with your ID and published names to generate VDXF (Verus Data eXchange Format) keys, which community members used to create the world\u2019s first self-sovereign, completely decentralized, rent-free, non-cancelable social media profiles as can be seen here: https://luckpool.net/profile/identity/mike.vrsc . Work is underway to document the VDXF keys defined and used for profiles as well as the process of setting up your own. While the capability is already extremely powerful, we should remind everyone that Verus is a platform, not a social network. The core technology is exciting, but what will be even more exciting is when businesses and entrepreneurs leverage it to enable new, self-sovereign user experiences, applications, and accompanying businesses to enable the future, truly decentralized web.\n4. Fix for the Electron certificate issue in the GUI wallet, which has been affecting prices and preventing BTC fee calculation.\n5. Support for some additional, popular ERC20 currencies, in anticipation of more usage after release of the ETH bridge.\n6. Fix in GUI for calculated balances of specific addresses sometimes showing lower than actual, even though wallet balance displayed correctly.\n7. Additional hardening, fixes and improvement focused on mainnet and the Ethereum bridge.", "./raw_text_input_wiki/release_notes.md"], ["To reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/VRSC`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\VRSC\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\VRSC\\`, `%AppData%\\Roaming\\VerusTest`## Exporting an ID to a PBaaS chain\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n  ```## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```", "./raw_text_input_wiki/release_notes.md"], ["## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.## The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.## Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration o", "./raw_text_input_wiki/release_notes.md"], ["f friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n - Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currenc", "./raw_text_input_wiki/release_notes.md"], ["ies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n - Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs", "./raw_text_input_wiki/release_notes.md"], [" of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Q", "./raw_text_input_wiki/release_notes.md"], ["ueries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain", "./raw_text_input_wiki/release_notes.md"], [" to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sen", "./raw_text_input_wiki/release_notes.md"], ["dcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```", "./raw_text_input_wiki/release_notes.md"], ["Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.", "./raw_text_input_wiki/release_notes.md"], ["## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/vrsctest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/vrsctest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n```# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/gui/file/d4ddf18646a1b3e3af8e8b8b2bd77ec8db0394b4be1d5c074d13816a67e171e1/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/f4656745fe3b80f67abbe4180b39e3686f3ec28ec75846cf318d8cdabfdc1daa/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/ac1b3e41767fd8c3af6eef780c73bf43097e00baa0884b95097a296c3030791f/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/df371574c420534fc91344cca873f464cab8f5ff5a67f8741aadfe764c676434/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AeduGgABQSCt7p7H5gtjUkrIAAk5SX9ss9xXz5Z+Qikf61vRPnWGSyX6tLaO62BMNTKDE7sJVA9/Bp89yR1fZZ6h04ARIyYT /Downloads/Verus-CLI-Linux-v0.8.0-1-x86_64/Verus-CLI-Linux-v0.8.0-1-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AeduGgABQSCt7p7H5gtjUkrIAAk5SX9ss9xXz5Z+Qikf61vRPnWGSyX6tLaO62BMNTKDE7sJVA9/Bp89yR1fZZ6h04ARIyYT 998170ee70cca3116bc100ef1b972fd919a39b069ebd1dd5a6e1df30f9abacc1\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Announcing immediate availability of GUI and CLI for all platforms of the NON-MANDATORY, RECOMMENDED v0.8.0 UPDATE.\nThis release is mandatory for those who want to use the testnet, which will be reset as of v0.8.0.Updates include:", "./raw_text_input_wiki/release_notes.md"], ["1. Testnet reset with fixes for all reported PBaaS, DeFi, and advanced VerusID user issues. If you had reported issues, please verify that the issues you reported are addressed in this release.\n2. Support for the bidirectional Ethereum gateway/bridge, which has been testing on private networks and which we hope to launch within a day or two after first vetting it on the release testing network with community test volunteers.\n3. Support for the new `getvdxfid` RPC call, used along with your ID and published names to generate VDXF (Verus Data eXchange Format) keys, which community members used to create the world\u2019s first self-sovereign, completely decentralized, rent-free, non-cancelable social media profiles as can be seen here: https://luckpool.net/profile/identity/mike.vrsc . Work is underway to document the VDXF keys defined and used for profiles as well as the process of setting up your own. While the capability is already extremely powerful, we should remind everyone that Verus is a platform, not a social network. The core technology is exciting, but what will be even more exciting is when businesses and entrepreneurs leverage it to enable new, self-sovereign user experiences, applications, and accompanying businesses to enable the future, truly decentralized web.\n4. Fix for the Electron certificate issue in the GUI wallet, which has been affecting prices and preventing BTC fee calculation.\n5. Support for some additional, popular ERC20 currencies, in anticipation of more usage after release of the ETH bridge.\n6. Fix in GUI for calculated balances of specific addresses sometimes showing lower than actual, even though wallet balance displayed correctly.\n7. Additional hardening, fixes and improvement focused on mainnet and the Ethereum bridge.", "./raw_text_input_wiki/release_notes.md"], ["To reset your testnet make sure Verus is closed (and no testnet daemon running) and delete the following directories, then restart the testnet daemon (or relaunch Verus Desktop, deactivate verustest and re-add verustest native):- Linux: `~/.Komodo/vrsctest`, `~/.verustest`\n- Mac OS: `~/Library/Application Support/Komodo/VRSC`, `~/Library/Application\\ Support/VerusTest`\n- Windows 10: `%AppData%\\Roaming\\Komodo\\VRSC\\`, `%AppData%\\Roaming\\VerusTest` or `%AppData%\\Komodo\\VRSC\\`, `%AppData%\\Roaming\\VerusTest`## Exporting an ID to a PBaaS chain\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n  ```## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```", "./raw_text_input_wiki/release_notes.md"], ["## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.## The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.## Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration o", "./raw_text_input_wiki/release_notes.md"], ["f friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n - Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currenc", "./raw_text_input_wiki/release_notes.md"], ["ies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n - Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs", "./raw_text_input_wiki/release_notes.md"], [" of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Q", "./raw_text_input_wiki/release_notes.md"], ["ueries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain", "./raw_text_input_wiki/release_notes.md"], [" to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sen", "./raw_text_input_wiki/release_notes.md"], ["dcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```", "./raw_text_input_wiki/release_notes.md"], ["Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.", "./raw_text_input_wiki/release_notes.md"], ["## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/vrsctest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/vrsctest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n```# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/gui/file/43fefb235a9b17f36f20f2746094f21459a89aa4c2c7b48f6eb5c7d7855252c1/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/616b02da7e59dad21892298b3e0e7131196f4bc2e328ab3fb69d37b3cdc40ebd/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/a87e6af87dd2359ae01bff7be5219321d1883cda140a250d99bfc30b62d3a855/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/1b4fe15fe9185a298188d39733e271f4715e4090bbb1432ef7bc5332ff7bf823/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" Aa5ZGgABQR8UGSp8PtL3P07qUBibDAn0pyeOunSohgRFFFljIBs13zXe+9SZlZB8Tm7Xd1gF1ikjseaIcgU1gXG0sG183uwC /Downloads/Verus-CLI-Linux-v0.8.0-x86_64/Verus-CLI-Linux-v0.8.0-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" Aa5ZGgABQR8UGSp8PtL3P07qUBibDAn0pyeOunSohgRFFFljIBs13zXe+9SZlZB8Tm7Xd1gF1ikjseaIcgU1gXG0sG183uwC 0f87efe340bb97679e58eca045ff996483ba3bc579250672a74090f7cf282580\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\n# ANNOUNCING HIGHLY RECOMMENDED NON-MANDATORY, CRITICAL FOR NOTARIES AND POOLS UPDATE, v0.7.4.Version v0.7.4 can improve a node\u2019s synchronization and this version also upgrades and resets the Verus testnet, preparing it for the testnet launch of the Ethereum/Rinkeby bridge and bringing Verus PBaaS multi-chain, multi-currency, Verus Vault ID timelocking, Verus MEV-resistant DeFi, and the Ethereum bridge much closer to a mainnet ready state.This release fixes all known functionality issues reported from the previous testnet including some related to currency and blockchain launches, as well as being incorrectly able to reduce the timelock period on a Verus Vault locked ID. It also includes the ability to export an ID from one chain to another, using the \u201cexportid\u201d:true parameter in sendcurrency, enabling cross-chain use of VerusIDs. With this release, we will be resetting the Verus testnet. To use the new testnet, you must make sure to delete the vrsctest and .verustest/pbaas or VerusTest\\pbaas folders beforehand.In addition to being prepared for the Ethereum bridge launch, this release adds some new testnet capabilities, including the ability to send to IDs cross chain and export IDs from chain to chain using the `\u201cexportid\u201d:true` parameter with `sendcurrency`. IDs only need to be exported once and can then be used and managed directly as a forked ID on the destination chain.## Exporting an ID to a PBaaS chain\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n  ```", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.## The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.## Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implement", "./raw_text_input_wiki/release_notes.md"], ["ed on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n - Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n - Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"B", "./raw_text_input_wiki/release_notes.md"], ["TC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the curre", "./raw_text_input_wiki/release_notes.md"], ["ncy must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/vrsctest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/vrsctest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n```# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/0e935960b0886275c13e43a65771e4f5e89f341a450eb6f374576d26b244bf53/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/2a783bdc3367b8475d97d9da9d1b8c3510e9ab172102df39626cfd95e08d92a6/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/489fb285e70e0e58fa1f52453a16b194a743a6d8adb5f38436680c32e681e8db/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/043112c9d81dfdc57120bfd8d18516adbd836c700ec60e51455dac0a615bf276/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AdZEGQABQSCMoIi7MwgJwB2fXqry1Q2jMu8rIQUiRq+zRezdyhomTGwO1aVZN048dPAJR7dTIDUoA+osY2mx1Kfw33S8D5R7 /Downloads/Verus-CLI-Linux-v0.7.4-x86_64/Verus-CLI-Linux-v0.7.4-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AdZEGQABQSCMoIi7MwgJwB2fXqry1Q2jMu8rIQUiRq+zRezdyhomTGwO1aVZN048dPAJR7dTIDUoA+osY2mx1Kfw33S8D5R7 2b7fcb26fc38f34e1fd77e581716c1cd8b4eee1f0f01627dfd2ef56170a8e2f4\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n## Announcing NON-MANDATORY, RECOMMENDED UPDATE FOCUSED ON NETWORK CONNECTIVITY AND ROBUSTNESS IMPROVEMENTS v 0.7.3-10.\nv0.7.3-10 has very minimal updates targeted at networking robustness - faster response to notary inconsistencies and a check for detecting a corrupt index that if present, might otherwise prevent a node from staying synced.", "./raw_text_input_wiki/release_notes.md"], ["## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.## The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.## Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implement", "./raw_text_input_wiki/release_notes.md"], ["ed on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n - Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n - Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"B", "./raw_text_input_wiki/release_notes.md"], ["TC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the curre", "./raw_text_input_wiki/release_notes.md"], ["ncy must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/vrsctest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/vrsctest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n```# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/3ac4a3b7f2c27c41541ca385d1e03f77f45996ddb2363acd21802a7b7d21adb1/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/f623b2042943830f1be3e6002dcdf6592225c357c3837d850e7f60a1311d3059/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/390266baf97f9ad3c8c1286479e42675ae4e0b065b581fc5234ed3c104a96002/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/4632bb21603166253e8fcc2910e2daa7a6428b11c5203f90d1debbe210b3c9a0/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" ARJwGAABQSAEzdWu0ba5tX9dSzAPIJsuuYhh/+Fd4F3m0uPsQHLCWCr6PGjzCB+aC5uBtVxtheSL1ATWW6nDv6/OwyEDtK4V /Downloads/Verus-CLI-Linux-v0.7.3-10-x86_64/Verus-CLI-Linux-v0.7.3-10-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" ARJwGAABQSAEzdWu0ba5tX9dSzAPIJsuuYhh/+Fd4F3m0uPsQHLCWCr6PGjzCB+aC5uBtVxtheSL1ATWW6nDv6/OwyEDtK4V f99dfbd27d8b97eb14861d37371858c545a293e56ec8dd742ffa4f2365966af9\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n## Announcing immediate availability of NON-MANDATORY, RECOMMENDED ESPECIALLY FOR NOTARIES, HIGH PEER COUNT PUBLIC NODES, AND POOLS, v0.7.3-9 Verus CLI.In addition to more immediate and effective bad node banning behavior, v0.7.3-9 includes a fix for signrawtransaction that could sometimes result in failure of countersigning a multisig, ID-based raw transaction.", "./raw_text_input_wiki/release_notes.md"], ["While this release does include network robustness and a multisig fix, we were also able to upgrade Verus multisig capabilities to an ease of use and level of capability beyond other networks we are aware of today. In this release, it is now possible, on both mainnet and testnet, to issue any \u201csendcurrency\u201d command with the source being a multisig ID, for which you do not have all the keys present in your wallet. If you do, there will be a return error in operation status, from both GUI or CLI, and in that error will be the partially signed transaction, which can be used by applications or with copy and paste to send to other signers with partial authority over the source ID. On mainnet, destinations for such a transaction can include IDs, private addresses with memos to a z-address or ID:private, and transparent addresses. On testnet, such transactions can include all that is possible on mainnet as well as multiple currencies, currency conversions, and cross-chain sends.To our knowledge, this release raises the industry standard for multisig capability and its support on public blockchain protocols to a new level, even before considering the multisig revocation and recovery capabilities.## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```", "./raw_text_input_wiki/release_notes.md"], ["## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.## The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.## Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration o", "./raw_text_input_wiki/release_notes.md"], ["f friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n - Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currenc", "./raw_text_input_wiki/release_notes.md"], ["ies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n - Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs", "./raw_text_input_wiki/release_notes.md"], [" of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Q", "./raw_text_input_wiki/release_notes.md"], ["ueries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain", "./raw_text_input_wiki/release_notes.md"], [" to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sen", "./raw_text_input_wiki/release_notes.md"], ["dcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```", "./raw_text_input_wiki/release_notes.md"], ["Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.", "./raw_text_input_wiki/release_notes.md"], ["## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/vrsctest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/vrsctest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n```# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/gui/file/9b1bf2f784c08ae1d823e35591fbce52f82368e61dd7d3bccabaacc0d1495ab6/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/cf672a3d32b7578cf1f44173d7fc85f755029c738eb0f7a0e17351fba5d8a477/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/ed83e96889c39e1cd01207e917cc470133ff2dc1f23c95c8c5daf98c05d861e6/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/f3c83c88cb5b8633c54c2b5ad3fcfe1d897fe44fdd72d37478e8816814825d06/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" ARg+GAABQR/kRkEtGRrU8w0LW6gFeGNrMwEpWNIbB434GJWxYFuJHFX9pK5OthceonYqPe9WVjbZX95IpyONnzaYVndL5hfH /Downloads/Verus-CLI-Linux-v0.7.3-9-x86_64/Verus-CLI-Linux-v0.7.3-9-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" ARg+GAABQR/kRkEtGRrU8w0LW6gFeGNrMwEpWNIbB434GJWxYFuJHFX9pK5OthceonYqPe9WVjbZX95IpyONnzaYVndL5hfH 444d2c231e9d76bcff47c0f3da6822aab7c39567a2c313642675a35fcd484f7f\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\n## Announcing MANDATORY UPDATE v0.7.3-8, which will re-enable full Verus Proof of Power, including staking, at block 1576200, occuring on Thursday at approximately 5:00PM UTC time. YOU MUST UPDATE BEFORE THEN TO FOLLOW THE MAIN CHAIN.## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.## The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.## Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implement", "./raw_text_input_wiki/release_notes.md"], ["ed on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n - Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n - Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"B", "./raw_text_input_wiki/release_notes.md"], ["TC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the curre", "./raw_text_input_wiki/release_notes.md"], ["ncy must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/vrsctest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/vrsctest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n```# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/a85b5386f0c59ec851dc12f3acd789575619d9b31345b6e871f4c9aa98fcc13d/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/be2d22663f0c84ca37bd782870fd578097375d43f735ee7389ee5ded35743dc6/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/143ca9ba408ae89027a70dd0ac3770554b1937368c5e24f04233d36b5995d651/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/1a286ac9e66424d5eb33f35c2a4c3e8303a15ea7c1dc9ae808991b7456c100dd/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AW79FwABQR/Il7BalzNJsvWF64L7iXUQP9nQ1nZ60bZe9HQ5yxTH2ybQlnSSBaJd2C3iJSqemuCl36Zc12GEwHPooyUP+EWm /Downloads/Verus-CLI-Linux-v0.7.3-8-x86_64/Verus-CLI-Linux-v0.7.3-8-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AW79FwABQR/Il7BalzNJsvWF64L7iXUQP9nQ1nZ60bZe9HQ5yxTH2ybQlnSSBaJd2C3iJSqemuCl36Zc12GEwHPooyUP+EWm 7b77f2eccdd85ae2a834ea5ddfdcb70e275d9d78b9eb435cc4a1127aecf57fab\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\nAnnouncing MANDATORY UPGRADE v0.7.3-7. This release fixes the bug that was exploited by over the last day which stalled the network. You must upgrade to this release. If you shut down prior to block 15679999 you should be able to run this release without any additional steps. If your wallet continued to run after block 15679999 (or is still running) you will need to bootstrap or otherwise re-sync.", "./raw_text_input_wiki/release_notes.md"], ["## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.## The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.## Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration o", "./raw_text_input_wiki/release_notes.md"], ["f friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n - Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currenc", "./raw_text_input_wiki/release_notes.md"], ["ies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n - Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs", "./raw_text_input_wiki/release_notes.md"], [" of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Q", "./raw_text_input_wiki/release_notes.md"], ["ueries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain", "./raw_text_input_wiki/release_notes.md"], [" to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sen", "./raw_text_input_wiki/release_notes.md"], ["dcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```", "./raw_text_input_wiki/release_notes.md"], ["Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.", "./raw_text_input_wiki/release_notes.md"], ["## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/vrsctest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/vrsctest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n```# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/gui/file/172058d2b93de9bd91ff26b5c6d38828fd55c44a61f0d7439247acb800042197/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/b5f1c8c300a978936e4b555207e4d0cc371a47773affa459b4c0a0603d105d1e/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/97f852a89ed18f000ce85485a2af5a1e4b49115264666dca0bc8b1993374dd36/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/ff391d62965067a42994b41a84e16f95239a46cf0bade52efefd2a5c95e2a194/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AUX2FwABQR//3tYmE7EmZs5gVUIQCLdy8VI4D1/MBM53bRLpq3C2cXLScU4bdJek6orr9VQE5vPGnuR568r5uM2cVpBjzyGB /Downloads/Verus-CLI-Linux-v0.7.3-7-x86_64/Verus-CLI-Linux-v0.7.3-7-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AUX2FwABQR//3tYmE7EmZs5gVUIQCLdy8VI4D1/MBM53bRLpq3C2cXLScU4bdJek6orr9VQE5vPGnuR568r5uM2cVpBjzyGB b2edf4d8501851b655e62fe4c188589f9602d595837b1dec74825de4911022bc\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\nAnnouncing MANDATORY UPGRADE v0.7.3-6, REQUIRED FOR KOMODO NOTARY SEASON 5. Notaries, pools, and exchanges should upgrade to this version as soon as possible, before notary changes take effect on block 1562500. Failing to update will not prevent connection to the network, but updating in a timely manner will ensure a stronger, notarized connection to the Verus blockchain.## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.## The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.## Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implement", "./raw_text_input_wiki/release_notes.md"], ["ed on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n - Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n - Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"B", "./raw_text_input_wiki/release_notes.md"], ["TC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the curre", "./raw_text_input_wiki/release_notes.md"], ["ncy must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/vrsctest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/vrsctest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n```# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/gui/file/4bba9bcf3ac9f6c497af79debc4b2c022dbaef166b035b1848149c0e9871ddff/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/f8589343298ec7bfbaf94060addeb7c37e538ed7a70d987f567936f54bcb31c0/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/bca3b56057bb70b6c22040925d512ccb7e56b2b3e07bdb8120633f8cd1d51f5d/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/7ed190ffeea201a864739214dc6fc0369408a420f020d59a43035d092ed177fb/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" Ab7DFwABQSCAskYMLjJd/Ej48rkhX4DPyAizzGXksKD/0Hh2JWau3hgKLsaUBx6dqlbAf4RBdfENtRdPXLVcf66YOhH1pi05 /Downloads/Verus-CLI-Linux-v0.7.3-6-x86_64/Verus-CLI-Linux-v0.7.3-6-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" Ab7DFwABQSCAskYMLjJd/Ej48rkhX4DPyAizzGXksKD/0Hh2JWau3hgKLsaUBx6dqlbAf4RBdfENtRdPXLVcf66YOhH1pi05 00a651a40cdd453614abac914f793f18284f1738deee67ac332310f72c479b64\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\nAnnouncing NON-MANDATORY GUI upgrade v0.7.3-5, required to continue participating in the PBaaS enabled testnet. v0.7.3-5 resolves an ID wallet sync issue for mainnet that could occur when recovering a revoked ID, causing the wallet to double count some amounts. This issue could not result in either loss of funds nor a security issue. This release also resolves all known testnet issues on the current testnet and does not require a testnet reset.", "./raw_text_input_wiki/release_notes.md"], ["## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.## The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.## Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration o", "./raw_text_input_wiki/release_notes.md"], ["f friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n - Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currenc", "./raw_text_input_wiki/release_notes.md"], ["ies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n - Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs", "./raw_text_input_wiki/release_notes.md"], [" of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Q", "./raw_text_input_wiki/release_notes.md"], ["ueries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain", "./raw_text_input_wiki/release_notes.md"], [" to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sen", "./raw_text_input_wiki/release_notes.md"], ["dcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```", "./raw_text_input_wiki/release_notes.md"], ["Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.", "./raw_text_input_wiki/release_notes.md"], ["## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/vrsctest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/vrsctest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n```# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/gui/file/f172e3e2bc2605e8d9ce8edfeca1b3946ba07fc605ee9f781d4dcae6d9a6a007/detection\n**Linux-x86-64:** https://www.virustotal.com/gui/file/8ae30dcd2ae5be047f9575188f53e34bf348691e908a4b3ba99c75371fd94bbe/detection\n**Linux-ARM64:** https://www.virustotal.com/gui/file/669d415ffeec29253b744a12bac8498aa8ef64ec3ee7dcccb78718699ba6909a/detection\n**Windows:**\nhttps://www.virustotal.com/gui/file/084a202bdecadd0579924120cfc39b1de6eec461a50b7cf1ec0c7edb2004ad87/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AUo/FwABQR/8Mse5lnb7stZDIBtVu6/Wy3NyvKNKpyZv/2chp7bm1g9umtlqqpv6Zd3D8xMtLHjiOZpXgam8NpvR9g1WqvFO /Downloads/Verus-CLI-Linux-v0.7.3-5-x86_64/Verus-CLI-Linux-v0.7.3-5-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AUo/FwABQR/8Mse5lnb7stZDIBtVu6/Wy3NyvKNKpyZv/2chp7bm1g9umtlqqpv6Zd3D8xMtLHjiOZpXgam8NpvR9g1WqvFO 26b1c75156b4795505afc1236c1817bfa1dc15497d7ae952709b7345dd08659e\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\nAnnouncing NON-MANDATORY CLI upgrade v0.7.3-4, required for to continue participating in the PBaaS enabled testnet. Mainnet features are effectively unchanged from v0.7.3-3## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.", "./raw_text_input_wiki/release_notes.md"], ["## The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.## Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implemented on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n - Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-ca", "./raw_text_input_wiki/release_notes.md"], ["pable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n - Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockchain, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of ", "./raw_text_input_wiki/release_notes.md"], ["their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain network is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST upda", "./raw_text_input_wiki/release_notes.md"], ["teidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"add", "./raw_text_input_wiki/release_notes.md"], ["ress\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, t", "./raw_text_input_wiki/release_notes.md"], ["he only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```", "./raw_text_input_wiki/release_notes.md"], ["Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.", "./raw_text_input_wiki/release_notes.md"], ["## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/vrsctest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/vrsctest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n```# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/178eabac12e068ac214b7a4c5e6313abff42cdb8b5314583b1a36521d1e14fd4/detection\n**Linux-x86-64:** https://www.virustotal.com/#/file/ec422d6e0354a7ff62b785ba1381eef11da5c7d9eaf18e39838c6a69e206e5e8/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/d23e728d52bea80bc781108497d013daddd356af3968ec367eff075486b96ed9/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/fbcf6ad4f09c33962fe9d3677a582cc66587dc8b3cd19fe9e523a075004ae240/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AUo/FwABQR/8Mse5lnb7stZDIBtVu6/Wy3NyvKNKpyZv/2chp7bm1g9umtlqqpv6Zd3D8xMtLHjiOZpXgam8NpvR9g1WqvFO /Downloads/Verus-CLI-Linux-v0.7.3-4-x86_64/Verus-CLI-Linux-v0.7.3-4-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AUo/FwABQR/8Mse5lnb7stZDIBtVu6/Wy3NyvKNKpyZv/2chp7bm1g9umtlqqpv6Zd3D8xMtLHjiOZpXgam8NpvR9g1WqvFO 26b1c75156b4795505afc1236c1817bfa1dc15497d7ae952709b7345dd08659e\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\n## Mainnet Updates\nv0.7.3-3 is a CRITICAL update with fixes for potential, targeted DOS attacks that do not affect overall network security, but should be considered mandatory for exchanges, pools, and businesses using the Verus network. Previous 0.7.3-x releases should no longer be used and should be replaced by this version.While this release includes testnet functionality for Verus PBaaS, described below. This is a mainnet focused release that does not fix any issues on testnet. Testnet issues will be address in upcoming optional releases.## New Verus Multicurrency, Multichain, DeFi Enabled Testnet\nWith an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.The new Verus testnet is a full-featured, intrinsically decentralized multi-chain blockchain platform with an unlimited number of identities, currencies, liquidity pools, and blockchains. It is accessible from the released versions of Verus Desktop and Verus CLI wallets, and it is the beginning of a new age in crypto. There are so many things you can do with Verus that you cannot with any other cryptocurrency platform, and you can try them all today.", "./raw_text_input_wiki/release_notes.md"], ["As Verus PBaaS offers completely new capabilities that go beyond today\u2019s decentralized platforms in many fundamental ways, the worldwide Verus community put its energy into creation, rather than convincing everyone that its capabilities are possible. Members across the Verus worldwide community have worked hard to make this all possible, and we are more than excited that you can now experience it firsthand. If you have an interest in the future of crypto, you owe it to yourself to learn about Verus, an unlimited scale, decentralized future with truth and privacy for all.## The Verus testnet, available in the Verus Desktop or cli wallets as the VRSCTEST coin, has the following capabilities, which to our knowledge are unique in crypto today.## Self sovereign, revocable, recoverable identities (currently on mainnet) VerusID\n- Enables permissionless registration of friendly name strong identities and funds addresses that are simultaneously fully self-sovereign, revocable, and recoverable.\n## Staking-capable time locking and theft prevention (Verus Vault)\n- Enables identities to be locked, preventing any funds under their control from being spent while locked, but still allowing seamless staking of funds. When locked, a user specifies an unlock delay, typically long enough to notice when someone who might have compromised a user\u2019s keys would have to unlock the ID before spending. The only way to circumvent the unlock delay is to revoke and recover an ID. Users may also choose to create and use fresh private keys when unlocking an ID as well. This enables virtually theft proof workflow and a solution to inheritance, trusts, vesting schedules, the 5$ wrench attack, and identity theft. IDs may be used as friendly name cryptocurrency addresses for all currencies on all Verus PBaaS blockchains in the Verus network. The VerusID protocol is a protocol, which can also be implement", "./raw_text_input_wiki/release_notes.md"], ["ed on non-Verus systems.\n## Multi-currency, user created, decentralized tokens and merge-mineable, interoperable blockchains without programming\n - Enables any user with an ID to create their own token currency or even full fledged, multi-currency, ID-issuing 50% POW/50% POS, 51% hash attack resistant blockchain that can send and receive from the Verus chain which launched it. All PBaaS chains run from the same daemon, and projects may choose to join the worldwide Verus community in improving the daemon. In doing so, they will start with a complete, multi-currency, ID-capable blockchain with DeFi capabilities that is merge-mineable and stakeable with other blockchains in the Verus network.\n## Consensus integrated DeFi liquidity pools and fractional currency baskets\n- Any ID owner may define Verus DeFi fractional basket currencies with one or more asset currencies backing the liquidity pool at a fractional percentage ranging from 5% to 100% backing. The Verus DeFi protocol ensures that all currency conversions that use a particular liquidity pool and are mined into one block are solved and priced simultaneously, addressing the problems of miner extracted value (MEV) and front-running, while providing fee-based DeFi integrated incentives to miners and stakers, ensuring smooth consensus operation and fee conversion capabilities by integrating DeFi liquidity pools directly into the consensus and cross-chain bridge protocols.\n## Simultaneous blockchain and blockchain liquidity pool launches\n - Launch of a world class, worldwide, merge-mineable blockchain along with a fully decentralized or centralized \u201cbridge\u201d converter liquidity pool as part of defining a new blockchain. Bridge converter currencies have the same flexibility as other fractional 100% asset backed or partially asset backed currencies, but is bound to the launch of the new blockchain, runs on the new blockcha", "./raw_text_input_wiki/release_notes.md"], ["in, and all fees generated via cross chain fee conversions or general use of the liquidity pool are earned on the new blockchain with no rent going back to the Verus blockchain, only seamless connectivity.\n## Blockchain-based, crowdfunding currency launches with minimum participation or automatic refunds, including for dual launches (blockchain and bridge)\n- Set required minimum levels of worldwide participation in your preferred currencies on chain. If by the start time of your blockchain, minimums are not met, all participants will automatically get a refund of all of their pre-conversions, less the network fees. The launch options also provide for maximum participation in one or more currencies, pre-launch discounts, price neutral pre-allocations to select IDs that increase the fractional reserve ratio to issue currencies, similarly price neutral carve-outs of proceeds, and pre-launch discounts for early participants. Using VerusIDs, launches can also include vesting schedules in the pre-allocations as well.\n## An interoperable, multichain network for new use cases and unlimited scale**\n- The Verus multi-currency, multi-chain network allows the creation of an unlimited number of interoperable blockchains in the Verus network. Notary IDs, specified at chain definition, provide decentralized blockchain-specific bridge confirmation, enabling public blockchains available to the world for merge mining and staking, as well as private, internal blockchains, which are easy to setup with easy bridging of public currencies into an organization and onto their internal private network and back, with all features and currencies of the public chain but none of the access. There is no limit on the number of blockchains that may continuously operate and interoperate on the Verus network. While there is some overhead for cross notarization, the model for the Verus blockchain networ", "./raw_text_input_wiki/release_notes.md"], ["k is fractal, enabling an unlimited number of simultaneously operating, interoperable blockchains.\n## Locking and Unlocking IDs\n- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n## Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.", "./raw_text_input_wiki/release_notes.md"], ["## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all private wallet funds to two recipients with friendly-name z-addresses (alice@:private and bob@:private):**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*Z\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@:private\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@:private\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC using IDs as a funding source:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*i\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"B", "./raw_text_input_wiki/release_notes.md"], ["TC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```json\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```\n- **Sending VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"exportto\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting VRSCTEST cross-chain to PBaaSChain:**\n ```json\n verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"PBaaSChain\",\"exportto\":\"Bridge.PBaaSChain\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n- **Converting PBaaSChain to VRSCTEST:**\n ```json\n verus -chain=PBaaSChain sendcurrency \"*\" '[{\"address\":\"RXLYm4J6qi7yam9zXtkEkRwbvCrnWKGZuv\",\"amount\":10, \"convertto\":\"VRSCTEST\",\"exportto\":\"VRSCTEST\",\"via\":\"Bridge.PBaaSChain\"}]'\n ```\n## Defining a Currency", "./raw_text_input_wiki/release_notes.md"], ["To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the curre", "./raw_text_input_wiki/release_notes.md"], ["ncy must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```", "./raw_text_input_wiki/release_notes.md"], ["## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/vrsctest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/vrsctest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n```# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/a89c74194eca46de3b6dc5fe4f996a8d4b2dc67e523fb8923f28d635fb4348fc/detection\n**Linux-x86-64:** https://www.virustotal.com/#/file/37facf48634f61639248801a0862b751cde571701ad95d20dea438860e4877ad/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/6d8468ac74996f52068e03a38d5c98f58e80fbf034c18a8bdb9eb5ab60782712/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/6365be1b0af8b9d924111b4c014b2653c338e4e8717c47056b599f68e81a2931/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AakaFwABQR+eYI49GX0y/z1x0Abr375LlHTD01ADTTBfA5D9uVhGvTtILdO+DwOmnWgWw6twtNQ3RBOs+jVHkVe04grz+NAO /Downloads/Verus-CLI-Linux-v0.7.3-3-x86_64/Verus-CLI-Linux-v0.7.3-3-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AakaFwABQR+eYI49GX0y/z1x0Abr375LlHTD01ADTTBfA5D9uVhGvTtILdO+DwOmnWgWw6twtNQ3RBOs+jVHkVe04grz+NAO 2db05535dbc92292e18aab2e2d0a057322fcca42e7ee106ef16e267063201765\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\nAnnouncing MANDATORY CLI upgrade v0.7.2-8 - THIS UPDATE IS CONSIDERED MANDATORY - ALL NODE OPERATORS SHOULD UPDATE AS SOON AS POSSIBLE\nThis release includes the following improvements and updates:\n- Critical updates\n- Fixed fetch-bootstrap temp file cleanup on Windows.\n- Fixed fetch-bootstrap checksum verification on MacOS", "./raw_text_input_wiki/release_notes.md"], ["## The Verus DeFi Testnet -- THERE IS NO TESTNET RESET\nAll new 'sendcurrency' features described above now work on both mainnet and testnet. In addition, testnet can source funds for DeFi features from private z-addresses as well.This is the most groundbreaking testnet the Verus project has ever released, and we believe it holds the potential to improve and reshape the DeFi industry. There are truly so many new capabilities and blockchain firsts working now on testnet that it\u2019s hard to adequately cover them all. Below is a list of new capabilities active on the v0.7.2 testnet that will be on mainnet in the near future when considered fully hardened, tested, and ready for worldwide, public scale. Until then, Verus testnet is a fully decentralized blockchain network with 50% proof of work, 50% proof of stake, worldwide availability, and is running all of the new Verus protocols that are being tested and hardened for mainnet. All currencies and assets on the Verus testnet have absolutely no value and may be reset at any time in the interest of testing for mainnet. If you would like a representative basket of Verus testnet currencies that you can use to try out all of the new protocols from anywhere in the world, simply visit the Verus Discord and ask in the #pbaas-development channel. You can use this link as an invite to the Verus Discord: https://discord.gg/gecZsCf", "./raw_text_input_wiki/release_notes.md"], ["- **DeFi and cross-currency liquidity integrated with blockchain processing, fees, VerusID, and Verus PoP, 51% hash-attack resistant consensus algorithm** - This is a massive set of platform capabilities that take DeFi further than any project in crypto today. We will list it here and describe it below. Using it is simple. Understanding the implications of what such a protocol can do when rent free and integrated in a truly decentralized public blockchain is a process of realizations that is likely to be similar to layers of an onion. We will do our best to explain below.- **System-wide queries for fractional basket currencies for arbitrage, investment discovery, or conversion bargain hunting** - The new RPC API, `getcurrencyconverters` (final name at mainnet, TBD), enables instant queries of any full node for all registered currencies above a fixed liquidity threshold that contain one or more reserve currencies. This new API enables wallets or applications to easily query the entire blockchain network of fractional currencies, determine which provides the best conversion rate at acceptable liquidity, and either convert at the best possible rates worldwide, or select only better-than-market rates and arbitrage to earn.- **Enhanced VerusIDs with Verus Vault technology** - This capability extends the already groundbreaking VerusID revocable, recoverable, provable, friendly name blockchain addresses and identities to include an advanced time lock capability that does not prevent staking on locked funds, enabling easy implementation of things like vesting, trusts, protocols for theft-proofing funds, simplifying estate planning, and much more. With Verus Vault technology, your funds, identity, and estate planning can be done in a fully self-sovereign manner, with the peace of mind in knowing you are protected from lost or stolen private keys.", "./raw_text_input_wiki/release_notes.md"], ["- **Verus Fee Pooling technology** A sustainable mining and staking fee and revenue model while strengthening, rather than creating risk of weakening blockchain security, by preserving immediate incentive to maximize per-block fees, while smoothing fee distribution to miners and stakers over time, fully addressing the legitimate concerns expressed and still not addressed by Vitalik Buterin with respect to ETH and ETH 2.0 (https://blog.ethereum.org/2016/07/27/inflation-transaction-fees-cryptocurrency-monetary-policy/). In the fee pooling model, which is an extremely powerful, yet simple solution to enabling a mining and staking economy, all fees are gathered from transactions in a block as usual, then the fees, also calculated as usual, are added to a common, persistent pool of collected fees, and the current block miner or staker takes up to 1% of the aggregate fee pool.### Verus Vault - Advanced Time Locking of Identities\nOn the new Verus testnet, we have introduced a capability we cal Verus Vault, which both provides options for a theft-resistant workflow of identity management, but also enables many use cases from trusts to vesting schedules, to escrow alternatives, estate planning and more. The concept is simple, but the ramifications when combined with the already unique revocation and recovery capabilities offered by VerusID on mainnet are immense.", "./raw_text_input_wiki/release_notes.md"], ["The Verus Vault use case, which was originally described in the conception of the feature, is the ability to timelock an ID, which would prevent any spending of any funds controlled by that ID, while still allowing the ID and all its funds to be used for staking. If the timelock was set for one day when locked, the unlock operation itself will require a waiting period of one day, which can only be circumvented by a revocation followed by recovery operation. In practice, this means that even if someone compromises your private keys while an ID is locked, they cannot spend any of the funds (though they could stake them and delegate rewards to another address, which you could immediately see) unless they unlock the ID first and wait one day. If you notice that your ID has been unlocked by someone other than you, you can revoke and recover before any funds are lost at all. If you wanted to get extremely secure, to the point of covering a case where someone may steal your private keys without you knowing and then lay in wait until you unlock your identity, so they can pounce on your funds before you lock it again, you can actually modify the controlling private keys of an identity before unlocking it, which ensures that the unlocked funds become usable again under the control of freshly made, uncompromised keys. While we believe this unique Verus technology actually provides for fully theft-proof workflows and protection of all assets on the network under the control of an ID, we will generally refer to the technology as \"theft-resistant\" and disclaim all guarantees of fitness for any particular purpose as part of the \"experimental software\" disclaimer.", "./raw_text_input_wiki/release_notes.md"], ["In addition to use cases related to theft resistance and delayed lock opening, Verus Vault can be used to provide more standard forms of time-locking by simply time locking and unlocking in one operation, leaving the unlock period immediately counting down. This capability could be used to provide time locked funds to team members, children, employees, or structured in a way to provide time locked deal and payment terms. The uses for this technology are certainly beyond those that we have already thought of, and we look forward to seeing how people leverage this powerful new protocol capability.- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**", "./raw_text_input_wiki/release_notes.md"], ["The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all wallet funds to two recipients (alice@ and bob@):**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```## Defining a CurrencyTo create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n", "./raw_text_input_wiki/release_notes.md"], ["./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```\n# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/1b0f4d17cd324f2beb9618b4b9d1162996b2c63b6986d0ae9004abd65aa0a0cf/detection\n**Linux-x86-64:** https://www.virustotal.com/#/file/c42ac46640370876e8f31f7a5c02543715c55060380400572facd145c46d010f/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/c93b0945ff66656d1f336aa329139ae695c421145e826d3b63434b4cd7f78910/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/cf644a10e6cd3a0246380dc275289679122581bbb47dd4c3ac9e873ce112a97a/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AbRHFQABQSBEyhS6Ohi6c4XfZfcM2xvlBkdH3CVtRMBiKgVaX6Z1SShf7c27DiBGveW60y0UQ455O5oZedXxvBybddEWIFi/ /Downloads/Verus-CLI-Linux-v0.7.2-8-x86_64/Verus-CLI-Linux-v0.7.2-8-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AbRHFQABQSBEyhS6Ohi6c4XfZfcM2xvlBkdH3CVtRMBiKgVaX6Z1SShf7c27DiBGveW60y0UQ455O5oZedXxvBybddEWIFi/ 727f6f7e2055adffde5928e17a50ffb99ec5ba45e8bc6cc543cbcdd7d6cbd15a\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\nAnnouncing NON-MANDATORY CLI upgrade v0.7.2-7, with fixes necessary to continue participating in the current testnet. Mainnet features are effectively unchanged from v0.7.2-6.## The Verus DeFi Testnet -- THERE IS NO TESTNET RESET\nAll new 'sendcurrency' features described above now work on both mainnet and testnet. In addition, testnet can source funds for DeFi features from private z-addresses as well.", "./raw_text_input_wiki/release_notes.md"], ["This is the most groundbreaking testnet the Verus project has ever released, and we believe it holds the potential to improve and reshape the DeFi industry. There are truly so many new capabilities and blockchain firsts working now on testnet that it\u2019s hard to adequately cover them all. Below is a list of new capabilities active on the v0.7.2 testnet that will be on mainnet in the near future when considered fully hardened, tested, and ready for worldwide, public scale. Until then, Verus testnet is a fully decentralized blockchain network with 50% proof of work, 50% proof of stake, worldwide availability, and is running all of the new Verus protocols that are being tested and hardened for mainnet. All currencies and assets on the Verus testnet have absolutely no value and may be reset at any time in the interest of testing for mainnet. If you would like a representative basket of Verus testnet currencies that you can use to try out all of the new protocols from anywhere in the world, simply visit the Verus Discord and ask in the #pbaas-development channel. You can use this link as an invite to the Verus Discord: https://discord.gg/gecZsCf- **DeFi and cross-currency liquidity integrated with blockchain processing, fees, VerusID, and Verus PoP, 51% hash-attack resistant consensus algorithm** - This is a massive set of platform capabilities that take DeFi further than any project in crypto today. We will list it here and describe it below. Using it is simple. Understanding the implications of what such a protocol can do when rent free and integrated in a truly decentralized public blockchain is a process of realizations that is likely to be similar to layers of an onion. We will do our best to explain below.", "./raw_text_input_wiki/release_notes.md"], ["- **System-wide queries for fractional basket currencies for arbitrage, investment discovery, or conversion bargain hunting** - The new RPC API, `getcurrencyconverters` (final name at mainnet, TBD), enables instant queries of any full node for all registered currencies above a fixed liquidity threshold that contain one or more reserve currencies. This new API enables wallets or applications to easily query the entire blockchain network of fractional currencies, determine which provides the best conversion rate at acceptable liquidity, and either convert at the best possible rates worldwide, or select only better-than-market rates and arbitrage to earn.- **Enhanced VerusIDs with Verus Vault technology** - This capability extends the already groundbreaking VerusID revocable, recoverable, provable, friendly name blockchain addresses and identities to include an advanced time lock capability that does not prevent staking on locked funds, enabling easy implementation of things like vesting, trusts, protocols for theft-proofing funds, simplifying estate planning, and much more. With Verus Vault technology, your funds, identity, and estate planning can be done in a fully self-sovereign manner, with the peace of mind in knowing you are protected from lost or stolen private keys.", "./raw_text_input_wiki/release_notes.md"], ["- **Verus Fee Pooling technology** A sustainable mining and staking fee and revenue model while strengthening, rather than creating risk of weakening blockchain security, by preserving immediate incentive to maximize per-block fees, while smoothing fee distribution to miners and stakers over time, fully addressing the legitimate concerns expressed and still not addressed by Vitalik Buterin with respect to ETH and ETH 2.0 (https://blog.ethereum.org/2016/07/27/inflation-transaction-fees-cryptocurrency-monetary-policy/). In the fee pooling model, which is an extremely powerful, yet simple solution to enabling a mining and staking economy, all fees are gathered from transactions in a block as usual, then the fees, also calculated as usual, are added to a common, persistent pool of collected fees, and the current block miner or staker takes up to 1% of the aggregate fee pool.### Verus Vault - Advanced Time Locking of Identities\nOn the new Verus testnet, we have introduced a capability we cal Verus Vault, which both provides options for a theft-resistant workflow of identity management, but also enables many use cases from trusts to vesting schedules, to escrow alternatives, estate planning and more. The concept is simple, but the ramifications when combined with the already unique revocation and recovery capabilities offered by VerusID on mainnet are immense.", "./raw_text_input_wiki/release_notes.md"], ["The Verus Vault use case, which was originally described in the conception of the feature, is the ability to timelock an ID, which would prevent any spending of any funds controlled by that ID, while still allowing the ID and all its funds to be used for staking. If the timelock was set for one day when locked, the unlock operation itself will require a waiting period of one day, which can only be circumvented by a revocation followed by recovery operation. In practice, this means that even if someone compromises your private keys while an ID is locked, they cannot spend any of the funds (though they could stake them and delegate rewards to another address, which you could immediately see) unless they unlock the ID first and wait one day. If you notice that your ID has been unlocked by someone other than you, you can revoke and recover before any funds are lost at all. If you wanted to get extremely secure, to the point of covering a case where someone may steal your private keys without you knowing and then lay in wait until you unlock your identity, so they can pounce on your funds before you lock it again, you can actually modify the controlling private keys of an identity before unlocking it, which ensures that the unlocked funds become usable again under the control of freshly made, uncompromised keys. While we believe this unique Verus technology actually provides for fully theft-proof workflows and protection of all assets on the network under the control of an ID, we will generally refer to the technology as \"theft-resistant\" and disclaim all guarantees of fitness for any particular purpose as part of the \"experimental software\" disclaimer.", "./raw_text_input_wiki/release_notes.md"], ["In addition to use cases related to theft resistance and delayed lock opening, Verus Vault can be used to provide more standard forms of time-locking by simply time locking and unlocking in one operation, leaving the unlock period immediately counting down. This capability could be used to provide time locked funds to team members, children, employees, or structured in a way to provide time locked deal and payment terms. The uses for this technology are certainly beyond those that we have already thought of, and we look forward to seeing how people leverage this powerful new protocol capability.- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**", "./raw_text_input_wiki/release_notes.md"], ["The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all wallet funds to two recipients (alice@ and bob@):**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```## Defining a CurrencyTo create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n", "./raw_text_input_wiki/release_notes.md"], ["./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```\n# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/23aa86c409d0e625b1323db2ea1cfc70a35a3798eeb07ff34644dc85df86a526/detection\n**Linux-x86-64:** https://www.virustotal.com/#/file/0b41b7d91fcbdd37aeb9d5b233e346cb47ca6f25f6b267745b68696eddf9eda4/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/5d009b9d7e88669eb92374a82b05d8bf842214e113476a7244002d79aeb7819f/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/29e06e25f887311e8fcbfd597406df19280f75e1aa2d5bff4516e4cd4ced3456/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AeLPFAABQR+s98mnsOWxeaCcqPQ/Fc8d5cZh8QJtbz/ZGXqAtlKtyx1fV2HX2wO755f3O6qeT+Oyvk8SAK2bTA+rFOVsUQAk /Downloads/Verus-CLI-Linux-v0.7.2-7-amd64/Verus-CLI-Linux-v0.7.2-7-x86_64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AeLPFAABQR+s98mnsOWxeaCcqPQ/Fc8d5cZh8QJtbz/ZGXqAtlKtyx1fV2HX2wO755f3O6qeT+Oyvk8SAK2bTA+rFOVsUQAk d24732b7d81eabdb15ea8bb775c6d833117f934694628a2e8c3c09fb7d8fa601\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\nAnnouncing NON-MANDATORY CLI upgrade v0.7.2-6, with primarily testnet improvements. Mainnet features are effectively unchanged from v0.7.2-4, with only \"z*\" added as a new, supported wildcard to the `z_getbalance` API.\nThis release includes the following improvements and updates for testnet:\n- Add `getcurrencybalance` API to get multi-currency balances on transparent/private addresses and identities.\n- Optimize multi-currency operators and UTXO selection\n- Display unlocked balance in `getwalletinfo`\n- Add support for \"z*\" wildcard in `z_getbalance`\n## The Verus DeFi Testnet -- THERE IS NO TESTNET RESET\nAll new 'sendcurrency' features described above now work on both mainnet and testnet. In addition, testnet can source funds for DeFi features from private z-addresses as well.", "./raw_text_input_wiki/release_notes.md"], ["This is the most groundbreaking testnet the Verus project has ever released, and we believe it holds the potential to improve and reshape the DeFi industry. There are truly so many new capabilities and blockchain firsts working now on testnet that it\u2019s hard to adequately cover them all. Below is a list of new capabilities active on the v0.7.2 testnet that will be on mainnet in the near future when considered fully hardened, tested, and ready for worldwide, public scale. Until then, Verus testnet is a fully decentralized blockchain network with 50% proof of work, 50% proof of stake, worldwide availability, and is running all of the new Verus protocols that are being tested and hardened for mainnet. All currencies and assets on the Verus testnet have absolutely no value and may be reset at any time in the interest of testing for mainnet. If you would like a representative basket of Verus testnet currencies that you can use to try out all of the new protocols from anywhere in the world, simply visit the Verus Discord and ask in the #pbaas-development channel. You can use this link as an invite to the Verus Discord: https://discord.gg/gecZsCf- **DeFi and cross-currency liquidity integrated with blockchain processing, fees, VerusID, and Verus PoP, 51% hash-attack resistant consensus algorithm** - This is a massive set of platform capabilities that take DeFi further than any project in crypto today. We will list it here and describe it below. Using it is simple. Understanding the implications of what such a protocol can do when rent free and integrated in a truly decentralized public blockchain is a process of realizations that is likely to be similar to layers of an onion. We will do our best to explain below.", "./raw_text_input_wiki/release_notes.md"], ["- **System-wide queries for fractional basket currencies for arbitrage, investment discovery, or conversion bargain hunting** - The new RPC API, `getcurrencyconverters` (final name at mainnet, TBD), enables instant queries of any full node for all registered currencies above a fixed liquidity threshold that contain one or more reserve currencies. This new API enables wallets or applications to easily query the entire blockchain network of fractional currencies, determine which provides the best conversion rate at acceptable liquidity, and either convert at the best possible rates worldwide, or select only better-than-market rates and arbitrage to earn.- **Enhanced VerusIDs with Verus Vault technology** - This capability extends the already groundbreaking VerusID revocable, recoverable, provable, friendly name blockchain addresses and identities to include an advanced time lock capability that does not prevent staking on locked funds, enabling easy implementation of things like vesting, trusts, protocols for theft-proofing funds, simplifying estate planning, and much more. With Verus Vault technology, your funds, identity, and estate planning can be done in a fully self-sovereign manner, with the peace of mind in knowing you are protected from lost or stolen private keys.", "./raw_text_input_wiki/release_notes.md"], ["- **Verus Fee Pooling technology** A sustainable mining and staking fee and revenue model while strengthening, rather than creating risk of weakening blockchain security, by preserving immediate incentive to maximize per-block fees, while smoothing fee distribution to miners and stakers over time, fully addressing the legitimate concerns expressed and still not addressed by Vitalik Buterin with respect to ETH and ETH 2.0 (https://blog.ethereum.org/2016/07/27/inflation-transaction-fees-cryptocurrency-monetary-policy/). In the fee pooling model, which is an extremely powerful, yet simple solution to enabling a mining and staking economy, all fees are gathered from transactions in a block as usual, then the fees, also calculated as usual, are added to a common, persistent pool of collected fees, and the current block miner or staker takes up to 1% of the aggregate fee pool.### Verus Vault - Advanced Time Locking of Identities\nOn the new Verus testnet, we have introduced a capability we cal Verus Vault, which both provides options for a theft-resistant workflow of identity management, but also enables many use cases from trusts to vesting schedules, to escrow alternatives, estate planning and more. The concept is simple, but the ramifications when combined with the already unique revocation and recovery capabilities offered by VerusID on mainnet are immense.", "./raw_text_input_wiki/release_notes.md"], ["The Verus Vault use case, which was originally described in the conception of the feature, is the ability to timelock an ID, which would prevent any spending of any funds controlled by that ID, while still allowing the ID and all its funds to be used for staking. If the timelock was set for one day when locked, the unlock operation itself will require a waiting period of one day, which can only be circumvented by a revocation followed by recovery operation. In practice, this means that even if someone compromises your private keys while an ID is locked, they cannot spend any of the funds (though they could stake them and delegate rewards to another address, which you could immediately see) unless they unlock the ID first and wait one day. If you notice that your ID has been unlocked by someone other than you, you can revoke and recover before any funds are lost at all. If you wanted to get extremely secure, to the point of covering a case where someone may steal your private keys without you knowing and then lay in wait until you unlock your identity, so they can pounce on your funds before you lock it again, you can actually modify the controlling private keys of an identity before unlocking it, which ensures that the unlocked funds become usable again under the control of freshly made, uncompromised keys. While we believe this unique Verus technology actually provides for fully theft-proof workflows and protection of all assets on the network under the control of an ID, we will generally refer to the technology as \"theft-resistant\" and disclaim all guarantees of fitness for any particular purpose as part of the \"experimental software\" disclaimer.", "./raw_text_input_wiki/release_notes.md"], ["In addition to use cases related to theft resistance and delayed lock opening, Verus Vault can be used to provide more standard forms of time-locking by simply time locking and unlocking in one operation, leaving the unlock period immediately counting down. This capability could be used to provide time locked funds to team members, children, employees, or structured in a way to provide time locked deal and payment terms. The uses for this technology are certainly beyond those that we have already thought of, and we look forward to seeing how people leverage this powerful new protocol capability.- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**", "./raw_text_input_wiki/release_notes.md"], ["The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all wallet funds to two recipients (alice@ and bob@):**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```## Defining a CurrencyTo create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n", "./raw_text_input_wiki/release_notes.md"], ["./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```\n# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/b9f6e82a0e31dae0fe109023812d47a14f5b906d3ae3bbd1c0384f527c039a39/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/c7dab849dae13ec1a4af896724291c268972df961391dbe00beacd9517ded108/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/984889d97a3c15566997e7a125cedde3dcb221ff7c259bc060caa9246f90f8cd/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/59e80853b669da2ee4c397c280af56d9bb68a159ea15cfaa386cdb1cafeb522d/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AV6kEwABQR85s2Rs3BjLBikfd0gDQ3CeUxJwRDzx0Y+DocPn5SzWdxq6W45PVDVDFBRPUzKY48mC8krb/mNau66rXn4hDbb4 /Downloads/Verus-CLI-Linux-v0.7.2-6-amd64/Verus-CLI-Linux-v0.7.2-6-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AV6kEwABQR85s2Rs3BjLBikfd0gDQ3CeUxJwRDzx0Y+DocPn5SzWdxq6W45PVDVDFBRPUzKY48mC8krb/mNau66rXn4hDbb4 f20c5e9620b483721396485e8005b8ac64ed832d8a05c6b56665f0d5a3b584ca\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\nAnnouncing NON-MANDATORY CLI upgrade v0.7.2-5, with fixes that only apply to testnet. Mainnet features are unchanged from v0.7.2-4.\nThis release includes the following improvements and updates:\n- Fix testnet transaction funding issue for multi-currency `sendcurrency` commands\n- Fix testnet currency conversions## The Verus DeFi Testnet -- THERE IS NO TESTNET RESET\nAll new 'sendcurrency' features described above now work on both mainnet and testnet. In addition, testnet can source funds for DeFi features from private z-addresses as well.", "./raw_text_input_wiki/release_notes.md"], ["This is the most groundbreaking testnet the Verus project has ever released, and we believe it holds the potential to improve and reshape the DeFi industry. There are truly so many new capabilities and blockchain firsts working now on testnet that it\u2019s hard to adequately cover them all. Below is a list of new capabilities active on the v0.7.2 testnet that will be on mainnet in the near future when considered fully hardened, tested, and ready for worldwide, public scale. Until then, Verus testnet is a fully decentralized blockchain network with 50% proof of work, 50% proof of stake, worldwide availability, and is running all of the new Verus protocols that are being tested and hardened for mainnet. All currencies and assets on the Verus testnet have absolutely no value and may be reset at any time in the interest of testing for mainnet. If you would like a representative basket of Verus testnet currencies that you can use to try out all of the new protocols from anywhere in the world, simply visit the Verus Discord and ask in the #pbaas-development channel. You can use this link as an invite to the Verus Discord: https://discord.gg/gecZsCf- **DeFi and cross-currency liquidity integrated with blockchain processing, fees, VerusID, and Verus PoP, 51% hash-attack resistant consensus algorithm** - This is a massive set of platform capabilities that take DeFi further than any project in crypto today. We will list it here and describe it below. Using it is simple. Understanding the implications of what such a protocol can do when rent free and integrated in a truly decentralized public blockchain is a process of realizations that is likely to be similar to layers of an onion. We will do our best to explain below.", "./raw_text_input_wiki/release_notes.md"], ["- **System-wide queries for fractional basket currencies for arbitrage, investment discovery, or conversion bargain hunting** - The new RPC API, `getcurrencyconverters` (final name at mainnet, TBD), enables instant queries of any full node for all registered currencies above a fixed liquidity threshold that contain one or more reserve currencies. This new API enables wallets or applications to easily query the entire blockchain network of fractional currencies, determine which provides the best conversion rate at acceptable liquidity, and either convert at the best possible rates worldwide, or select only better-than-market rates and arbitrage to earn.- **Enhanced VerusIDs with Verus Vault technology** - This capability extends the already groundbreaking VerusID revocable, recoverable, provable, friendly name blockchain addresses and identities to include an advanced time lock capability that does not prevent staking on locked funds, enabling easy implementation of things like vesting, trusts, protocols for theft-proofing funds, simplifying estate planning, and much more. With Verus Vault technology, your funds, identity, and estate planning can be done in a fully self-sovereign manner, with the peace of mind in knowing you are protected from lost or stolen private keys.", "./raw_text_input_wiki/release_notes.md"], ["- **Verus Fee Pooling technology** A sustainable mining and staking fee and revenue model while strengthening, rather than creating risk of weakening blockchain security, by preserving immediate incentive to maximize per-block fees, while smoothing fee distribution to miners and stakers over time, fully addressing the legitimate concerns expressed and still not addressed by Vitalik Buterin with respect to ETH and ETH 2.0 (https://blog.ethereum.org/2016/07/27/inflation-transaction-fees-cryptocurrency-monetary-policy/). In the fee pooling model, which is an extremely powerful, yet simple solution to enabling a mining and staking economy, all fees are gathered from transactions in a block as usual, then the fees, also calculated as usual, are added to a common, persistent pool of collected fees, and the current block miner or staker takes up to 1% of the aggregate fee pool.### Verus Vault - Advanced Time Locking of Identities\nOn the new Verus testnet, we have introduced a capability we cal Verus Vault, which both provides options for a theft-resistant workflow of identity management, but also enables many use cases from trusts to vesting schedules, to escrow alternatives, estate planning and more. The concept is simple, but the ramifications when combined with the already unique revocation and recovery capabilities offered by VerusID on mainnet are immense.", "./raw_text_input_wiki/release_notes.md"], ["The Verus Vault use case, which was originally described in the conception of the feature, is the ability to timelock an ID, which would prevent any spending of any funds controlled by that ID, while still allowing the ID and all its funds to be used for staking. If the timelock was set for one day when locked, the unlock operation itself will require a waiting period of one day, which can only be circumvented by a revocation followed by recovery operation. In practice, this means that even if someone compromises your private keys while an ID is locked, they cannot spend any of the funds (though they could stake them and delegate rewards to another address, which you could immediately see) unless they unlock the ID first and wait one day. If you notice that your ID has been unlocked by someone other than you, you can revoke and recover before any funds are lost at all. If you wanted to get extremely secure, to the point of covering a case where someone may steal your private keys without you knowing and then lay in wait until you unlock your identity, so they can pounce on your funds before you lock it again, you can actually modify the controlling private keys of an identity before unlocking it, which ensures that the unlocked funds become usable again under the control of freshly made, uncompromised keys. While we believe this unique Verus technology actually provides for fully theft-proof workflows and protection of all assets on the network under the control of an ID, we will generally refer to the technology as \"theft-resistant\" and disclaim all guarantees of fitness for any particular purpose as part of the \"experimental software\" disclaimer.", "./raw_text_input_wiki/release_notes.md"], ["In addition to use cases related to theft resistance and delayed lock opening, Verus Vault can be used to provide more standard forms of time-locking by simply time locking and unlocking in one operation, leaving the unlock period immediately counting down. This capability could be used to provide time locked funds to team members, children, employees, or structured in a way to provide time locked deal and payment terms. The uses for this technology are certainly beyond those that we have already thought of, and we look forward to seeing how people leverage this powerful new protocol capability.- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**", "./raw_text_input_wiki/release_notes.md"], ["The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all wallet funds to two recipients (alice@ and bob@):**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```## Defining a CurrencyTo create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n", "./raw_text_input_wiki/release_notes.md"], ["./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```\n# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/9b115c8bbad22397b6f211ab41c4b0cfb7dd99fd675e5680f6b0e6b4154eaefc/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/530b4b20799f1f4a4ed814c0a899740ae97fce39bb42067b3fb983cca37a9f3c/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/e774acb721f294f2ac355514994d98564a57691e23b415811f4e9d2cd9d88ef3/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/74e812b08df6e9c1499ea3eef06267c31a502fedb09584b4693875c013a617cf/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" ATh2EwABQSCZ/hlR7AeMdT6iPkL2OZXZVk5dQ66E8CXWq05376CHdCDoXi26dqXxiOQrLTaX+jDZ3uBUC3nTBGm0MN5pFKSM /Downloads/Verus-CLI-Linux-v0.7.2-5-amd64/Verus-CLI-Linux-v0.7.2-5-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" ATh2EwABQSCZ/hlR7AeMdT6iPkL2OZXZVk5dQ66E8CXWq05376CHdCDoXi26dqXxiOQrLTaX+jDZ3uBUC3nTBGm0MN5pFKSM ebf3f8b2209c9a2e76f6f18f0aeba70532d3766e6a49d2cf5a165e1ea1ba02bb\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\n## v0.7.2-4 WITH THE WORLD'S FIRST FRIENDLY-NAME, zk-SNARK ADDRESSES FOR MAINNET AND TESTNET\nAnnouncing NON-MANDATORY CLI upgrade v0.7.2-4 with the world's first friendly-name private z-address support for sending and receiving funds and messages, including the following improvements and updates:\n- `sendcurrency` can now use sapling addresses as native currency funding sources and destinations for any transaction.\n- An identity's z-address can now be referenced as a funding source or destination by appending `:private` to an ID (eg. `\"idname@:private\"`). This form of z-address will also be able to be used with the z_getbalance command.\n- New wildcards can also be used as funds sources in the 'sendcurrency' command and parameters to z_getbalance that include:\n  - All transparent addresses in the wallet (both R-addresses and IDs)\n    `\"*\"``\n  - All R-addresses in the wallet\n    `\"R*\"`\n  - All IDs controlled by the wallet\n    `\"i*\"`\n- `sendcurrency` will now be an asynchronous API that will return an operation ID, as `z_sendmany` does, and complete in the background. It will also have its status available through `z_getoperationstatus`.**NOTE:** Due to the zero knowledge nature of z-addresses, a z-address is an endpoint in your VerusID which can be changed if you revoke and recover an ID, funds held on a private address or endpoint are not able to be redirected to the newly recovered ID unless you still have control over the z-address itself. Transparent funds controlled by an ID are recovered when the ID is revoked and recovered, even if you have lost the keys. This is a fundamental limitation of zero-knowledge privacy, not an error and not something to be fixed. Please consider this when using friendly-name private addresses as funds and not just message endpoints.", "./raw_text_input_wiki/release_notes.md"], ["## The Verus DeFi Testnet -- THERE IS NO TESTNET RESET\nAll new 'sendcurrency' features described above now work on both mainnet and testnet. In addition, testnet can source funds for DeFi features from private z-addresses as well.This is the most groundbreaking testnet the Verus project has ever released, and we believe it holds the potential to improve and reshape the DeFi industry. There are truly so many new capabilities and blockchain firsts working now on testnet that it\u2019s hard to adequately cover them all. Below is a list of new capabilities active on the v0.7.2 testnet that will be on mainnet in the near future when considered fully hardened, tested, and ready for worldwide, public scale. Until then, Verus testnet is a fully decentralized blockchain network with 50% proof of work, 50% proof of stake, worldwide availability, and is running all of the new Verus protocols that are being tested and hardened for mainnet. All currencies and assets on the Verus testnet have absolutely no value and may be reset at any time in the interest of testing for mainnet. If you would like a representative basket of Verus testnet currencies that you can use to try out all of the new protocols from anywhere in the world, simply visit the Verus Discord and ask in the #pbaas-development channel. You can use this link as an invite to the Verus Discord: https://discord.gg/gecZsCf", "./raw_text_input_wiki/release_notes.md"], ["- **DeFi and cross-currency liquidity integrated with blockchain processing, fees, VerusID, and Verus PoP, 51% hash-attack resistant consensus algorithm** - This is a massive set of platform capabilities that take DeFi further than any project in crypto today. We will list it here and describe it below. Using it is simple. Understanding the implications of what such a protocol can do when rent free and integrated in a truly decentralized public blockchain is a process of realizations that is likely to be similar to layers of an onion. We will do our best to explain below.- **System-wide queries for fractional basket currencies for arbitrage, investment discovery, or conversion bargain hunting** - The new RPC API, `getcurrencyconverters` (final name at mainnet, TBD), enables instant queries of any full node for all registered currencies above a fixed liquidity threshold that contain one or more reserve currencies. This new API enables wallets or applications to easily query the entire blockchain network of fractional currencies, determine which provides the best conversion rate at acceptable liquidity, and either convert at the best possible rates worldwide, or select only better-than-market rates and arbitrage to earn.- **Enhanced VerusIDs with Verus Vault technology** - This capability extends the already groundbreaking VerusID revocable, recoverable, provable, friendly name blockchain addresses and identities to include an advanced time lock capability that does not prevent staking on locked funds, enabling easy implementation of things like vesting, trusts, protocols for theft-proofing funds, simplifying estate planning, and much more. With Verus Vault technology, your funds, identity, and estate planning can be done in a fully self-sovereign manner, with the peace of mind in knowing you are protected from lost or stolen private keys.", "./raw_text_input_wiki/release_notes.md"], ["- **Verus Fee Pooling technology** A sustainable mining and staking fee and revenue model while strengthening, rather than creating risk of weakening blockchain security, by preserving immediate incentive to maximize per-block fees, while smoothing fee distribution to miners and stakers over time, fully addressing the legitimate concerns expressed and still not addressed by Vitalik Buterin with respect to ETH and ETH 2.0 (https://blog.ethereum.org/2016/07/27/inflation-transaction-fees-cryptocurrency-monetary-policy/). In the fee pooling model, which is an extremely powerful, yet simple solution to enabling a mining and staking economy, all fees are gathered from transactions in a block as usual, then the fees, also calculated as usual, are added to a common, persistent pool of collected fees, and the current block miner or staker takes up to 1% of the aggregate fee pool.### Verus Vault - Advanced Time Locking of Identities\nOn the new Verus testnet, we have introduced a capability we cal Verus Vault, which both provides options for a theft-resistant workflow of identity management, but also enables many use cases from trusts to vesting schedules, to escrow alternatives, estate planning and more. The concept is simple, but the ramifications when combined with the already unique revocation and recovery capabilities offered by VerusID on mainnet are immense.", "./raw_text_input_wiki/release_notes.md"], ["The Verus Vault use case, which was originally described in the conception of the feature, is the ability to timelock an ID, which would prevent any spending of any funds controlled by that ID, while still allowing the ID and all its funds to be used for staking. If the timelock was set for one day when locked, the unlock operation itself will require a waiting period of one day, which can only be circumvented by a revocation followed by recovery operation. In practice, this means that even if someone compromises your private keys while an ID is locked, they cannot spend any of the funds (though they could stake them and delegate rewards to another address, which you could immediately see) unless they unlock the ID first and wait one day. If you notice that your ID has been unlocked by someone other than you, you can revoke and recover before any funds are lost at all. If you wanted to get extremely secure, to the point of covering a case where someone may steal your private keys without you knowing and then lay in wait until you unlock your identity, so they can pounce on your funds before you lock it again, you can actually modify the controlling private keys of an identity before unlocking it, which ensures that the unlocked funds become usable again under the control of freshly made, uncompromised keys. While we believe this unique Verus technology actually provides for fully theft-proof workflows and protection of all assets on the network under the control of an ID, we will generally refer to the technology as \"theft-resistant\" and disclaim all guarantees of fitness for any particular purpose as part of the \"experimental software\" disclaimer.", "./raw_text_input_wiki/release_notes.md"], ["In addition to use cases related to theft resistance and delayed lock opening, Verus Vault can be used to provide more standard forms of time-locking by simply time locking and unlocking in one operation, leaving the unlock period immediately counting down. This capability could be used to provide time locked funds to team members, children, employees, or structured in a way to provide time locked deal and payment terms. The uses for this technology are certainly beyond those that we have already thought of, and we look forward to seeing how people leverage this powerful new protocol capability.- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**", "./raw_text_input_wiki/release_notes.md"], ["The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all wallet funds to two recipients (alice@ and bob@):**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```## Defining a CurrencyTo create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n", "./raw_text_input_wiki/release_notes.md"], ["./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\n## Testnet Reset Instructions\n**Please delete the following directories before launching the testnet:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```", "./raw_text_input_wiki/release_notes.md"], ["**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n\"%APPDATA%\"\\VerusTest\n```**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```\n# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/c7dfc60b6ec87eb96f53d4961123be6a13a08f94a862005fee8ea27a1b67f7b1/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/34c5155bb6dc2229340d8a9c38a2272a10961e89453d89e9199c367fc15d2267/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/22b6ac8cbbf8f0fc99344ab397df14b031bdcc9ede3975ca644e1b8ace2d9496/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/5ea98824ef1ec2d6cd144fcc01c86fc56cf9652fcdbd9f7f956fbe2850da93cf/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AUdCEwABQR/riPCH6AtcsHHlq1S+hzLqdIbwswLsMNZlQvZM3zuXVBBP2LHlILu26ry+0/XRNtdX152Ym2lANInbT13470eK /Downloads/Verus-CLI-Linux-v0.7.2-4-amd64/Verus-CLI-Linux-v0.7.2-4-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AUdCEwABQR/riPCH6AtcsHHlq1S+hzLqdIbwswLsMNZlQvZM3zuXVBBP2LHlILu26ry+0/XRNtdX152Ym2lANInbT13470eK ece5000684a135c841397d6a382ef1f643dcf52f4f8fabce2e66b9d86007af6f\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\nAnnouncing NON-MANDATORY upgrade v0.7.2-3 with the following improvements and fixes:\n- Fixes a rare issue in wallet synchronization for IDs that have been transferred between wallets in a specific combination of transfers and spends of prior outputs. In the cases seen, the wallet maintained some outputs as unspent, when in fact they were spent on the blockchain. We have seen a very small number of people hit this issue after transferring IDs between owners and/or separate wallets and having spent prior outputs on transactions that still have valid UTXOs to the ID. If you have encountered such an issue, this version will properly synchronize the wallet with a full rescan. If you have not, use of this version will prevent the issue from ever occurring.\n- Stricter updateidentity paramater checks to ensure that revocation and recovery IDs are already registered, valid IDs on the blockchain before accepting a change## Testnet Reset\nThe testnet was deleted and relaunched on v0.7.2-2. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO v0.7.2-2, PLEASE FOLLOW THE INSTRUCTIONS AT THE BOTTOM OF THE RELEASE NOTES BEFORE RUNNING THIS UPDATE**", "./raw_text_input_wiki/release_notes.md"], ["## The New Verus DeFi Testnet\nThis is the most groundbreaking testnet the Verus project has ever announced, and we believe it holds the potential to improve and reshape the DeFi industry. There are truly so many new capabilities and blockchain firsts working now on testnet that it\u2019s hard to adequately cover them all. Below is a list of new capabilities active on the v0.7.2 testnet that will be on mainnet in the near future when considered fully hardened, tested, and ready for worldwide, public scale. Until then, Verus testnet is a fully decentralized blockchain network with 50% proof of work, 50% proof of stake, worldwide availability, and is running all of the new Verus protocols that are being tested and hardened for mainnet. All currencies and assets on the Verus testnet have absolutely no value and may be reset at any time in the interest of testing for mainnet. If you would like a representative basket of Verus testnet currencies that you can use to try out all of the new protocols from anywhere in the world, simply visit the Verus Discord and ask in the #pbaas-development channel. You can use this link as an invite to the Verus Discord: https://discord.gg/gecZsCf- **DeFi and cross-currency liquidity integrated with blockchain processing, fees, VerusID, and Verus PoP, 51% hash-attack resistant consensus algorithm** - This is a massive set of platform capabilities that take DeFi further than any project in crypto today. We will list it here and describe it below. Using it is simple. Understanding the implications of what such a protocol can do when rent free and integrated in a truly decentralized public blockchain is a process of realizations that is likely to be similar to layers of an onion. We will do our best to explain below.", "./raw_text_input_wiki/release_notes.md"], ["- **System-wide queries for fractional basket currencies for arbitrage, investment discovery, or conversion bargain hunting** - The new RPC API, `getcurrencyconverters` (final name at mainnet, TBD), enables instant queries of any full node for all registered currencies above a fixed liquidity threshold that contain one or more reserve currencies. This new API enables wallets or applications to easily query the entire blockchain network of fractional currencies, determine which provides the best conversion rate at acceptable liquidity, and either convert at the best possible rates worldwide, or select only better-than-market rates and arbitrage to earn.- **Enhanced VerusIDs with Verus Vault technology** - This capability extends the already groundbreaking VerusID revocable, recoverable, provable, friendly name blockchain addresses and identities to include an advanced time lock capability that does not prevent staking on locked funds, enabling easy implementation of things like vesting, trusts, protocols for theft-proofing funds, simplifying estate planning, and much more. With Verus Vault technology, your funds, identity, and estate planning can be done in a fully self-sovereign manner, with the peace of mind in knowing you are protected from lost or stolen private keys.", "./raw_text_input_wiki/release_notes.md"], ["- **Verus Fee Pooling technology** A sustainable mining and staking fee and revenue model while strengthening, rather than creating risk of weakening blockchain security, by preserving immediate incentive to maximize per-block fees, while smoothing fee distribution to miners and stakers over time, fully addressing the legitimate concerns expressed and still not addressed by Vitalik Buterin with respect to ETH and ETH 2.0 (https://blog.ethereum.org/2016/07/27/inflation-transaction-fees-cryptocurrency-monetary-policy/). In the fee pooling model, which is an extremely powerful, yet simple solution to enabling a mining and staking economy, all fees are gathered from transactions in a block as usual, then the fees, also calculated as usual, are added to a common, persistent pool of collected fees, and the current block miner or staker takes up to 1% of the aggregate fee pool.### Verus Vault - Advanced Time Locking of Identities\nOn the new Verus testnet, we have introduced a capability we cal Verus Vault, which both provides options for a theft-resistant workflow of identity management, but also enables many use cases from trusts to vesting schedules, to escrow alternatives, estate planning and more. The concept is simple, but the ramifications when combined with the already unique revocation and recovery capabilities offered by VerusID on mainnet are immense.", "./raw_text_input_wiki/release_notes.md"], ["The Verus Vault use case, which was originally described in the conception of the feature, is the ability to timelock an ID, which would prevent any spending of any funds controlled by that ID, while still allowing the ID and all its funds to be used for staking. If the timelock was set for one day when locked, the unlock operation itself will require a waiting period of one day, which can only be circumvented by a revocation followed by recovery operation. In practice, this means that even if someone compromises your private keys while an ID is locked, they cannot spend any of the funds (though they could stake them and delegate rewards to another address, which you could immediately see) unless they unlock the ID first and wait one day. If you notice that your ID has been unlocked by someone other than you, you can revoke and recover before any funds are lost at all. If you wanted to get extremely secure, to the point of covering a case where someone may steal your private keys without you knowing and then lay in wait until you unlock your identity, so they can pounce on your funds before you lock it again, you can actually modify the controlling private keys of an identity before unlocking it, which ensures that the unlocked funds become usable again under the control of freshly made, uncompromised keys. While we believe this unique Verus technology actually provides for fully theft-proof workflows and protection of all assets on the network under the control of an ID, we will generally refer to the technology as \"theft-resistant\" and disclaim all guarantees of fitness for any particular purpose as part of the \"experimental software\" disclaimer.", "./raw_text_input_wiki/release_notes.md"], ["In addition to use cases related to theft resistance and delayed lock opening, Verus Vault can be used to provide more standard forms of time-locking by simply time locking and unlocking in one operation, leaving the unlock period immediately counting down. This capability could be used to provide time locked funds to team members, children, employees, or structured in a way to provide time locked deal and payment terms. The uses for this technology are certainly beyond those that we have already thought of, and we look forward to seeing how people leverage this powerful new protocol capability.- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**", "./raw_text_input_wiki/release_notes.md"], ["The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all wallet funds to two recipients (alice@ and bob@):**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```## Defining a CurrencyTo create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n", "./raw_text_input_wiki/release_notes.md"], ["./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\n## Testnet Reset Instructions\n**Please delete the following directories before launching the testnet:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```", "./raw_text_input_wiki/release_notes.md"], ["**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n\"%APPDATA%\"\\VerusTest\n```**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```\n# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/84c176f9730b6105c7e8c75e91dc2750bc836a99d1ff7424199217b3b97c2285/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/15c8e29508364f247f6475a0e73472fedbb6c726f563fa0c0fe9d176674eed79/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/17c2388076edcd86a631badb4efc6bc27994fc62472b08ed82026377b7dfce3b/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/e15b4dfe2bf1e8099e58ba5557cf89342b3e412bb111a035d6a06ab957e257a2/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AZ3ZEgABQSBWDFw2fO8xPGO+g25zaO/DZRoS8p4zs/1lvfiEVMqi9j1pP/UbkGNfjzB4292fVkT4BSA/4uh9pxw6ngQJG/w1 /Downloads/Verus-CLI-Linux-v0.7.2-3-amd64/Verus-CLI-Linux-v0.7.2-3-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AZ3ZEgABQSBWDFw2fO8xPGO+g25zaO/DZRoS8p4zs/1lvfiEVMqi9j1pP/UbkGNfjzB4292fVkT4BSA/4uh9pxw6ngQJG/w1 82d1a30f848bb5703080c70027ad1475f97129b17da96f8ee89de7dde2f53b4a\n```**The result will be true if the signature is valid.**\n```\ntrue\n```", "./raw_text_input_wiki/release_notes.md"], ["Verus v0.7.2-2 is a mandatory for pools and notaries, but not generally mandatory Verus node and wallet upgrade, with support for the new Verus testnet (VRSCTEST) with fully decentralized finance, advanced ID capabilities, and DeFi liquidity system integrated into the new network protocol. While most of the changes in this release are focused on testnet, the mainnet support does include some improvements and a fix for the getblocktemplate API used by pools## Testnet Reset\nThe testnet was deleted and relaunched on v0.7.2-2. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO v0.7.2-2, PLEASE FOLLOW THE INSTRUCTIONS AT THE BOTTOM OF THE RELEASE NOTES BEFORE RUNNING THIS UPDATE**## The New Verus DeFi Testnet\nThis is the most groundbreaking testnet the Verus project has ever announced, and we believe it holds the potential to improve and reshape the DeFi industry. There are truly so many new capabilities and blockchain firsts working now on testnet that it\u2019s hard to adequately cover them all. Below is a list of new capabilities active on the v0.7.2 testnet that will be on mainnet in the near future when considered fully hardened, tested, and ready for worldwide, public scale. Until then, Verus testnet is a fully decentralized blockchain network with 50% proof of work, 50% proof of stake, worldwide availability, and is running all of the new Verus protocols that are being tested and hardened for mainnet. All currencies and assets on the Verus testnet have absolutely no value and may be reset at any time in the interest of testing for mainnet. If you would like a representative basket of Verus testnet currencies that you can use to try out all of the new protocols from anywhere in the world, simply visit the Verus Discord and ask in the #pbaas-development channel. You can use this link as an invite to the Verus Discord: https://discord.gg/gecZsCf", "./raw_text_input_wiki/release_notes.md"], ["- **DeFi and cross-currency liquidity integrated with blockchain processing, fees, VerusID, and Verus PoP, 51% hash-attack resistant consensus algorithm** - This is a massive set of platform capabilities that take DeFi further than any project in crypto today. We will list it here and describe it below. Using it is simple. Understanding the implications of what such a protocol can do when rent free and integrated in a truly decentralized public blockchain is a process of realizations that is likely to be similar to layers of an onion. We will do our best to explain below.- **System-wide queries for fractional basket currencies for arbitrage, investment discovery, or conversion bargain hunting** - The new RPC API, `getcurrencyconverters` (final name at mainnet, TBD), enables instant queries of any full node for all registered currencies above a fixed liquidity threshold that contain one or more reserve currencies. This new API enables wallets or applications to easily query the entire blockchain network of fractional currencies, determine which provides the best conversion rate at acceptable liquidity, and either convert at the best possible rates worldwide, or select only better-than-market rates and arbitrage to earn.- **Enhanced VerusIDs with Verus Vault technology** - This capability extends the already groundbreaking VerusID revocable, recoverable, provable, friendly name blockchain addresses and identities to include an advanced time lock capability that does not prevent staking on locked funds, enabling easy implementation of things like vesting, trusts, protocols for theft-proofing funds, simplifying estate planning, and much more. With Verus Vault technology, your funds, identity, and estate planning can be done in a fully self-sovereign manner, with the peace of mind in knowing you are protected from lost or stolen private keys.", "./raw_text_input_wiki/release_notes.md"], ["- **Verus Fee Pooling technology** A sustainable mining and staking fee and revenue model while strengthening, rather than creating risk of weakening blockchain security, by preserving immediate incentive to maximize per-block fees, while smoothing fee distribution to miners and stakers over time, fully addressing the legitimate concerns expressed and still not addressed by Vitalik Buterin with respect to ETH and ETH 2.0 (https://blog.ethereum.org/2016/07/27/inflation-transaction-fees-cryptocurrency-monetary-policy/). In the fee pooling model, which is an extremely powerful, yet simple solution to enabling a mining and staking economy, all fees are gathered from transactions in a block as usual, then the fees, also calculated as usual, are added to a common, persistent pool of collected fees, and the current block miner or staker takes up to 1% of the aggregate fee pool.### Verus Vault - Advanced Time Locking of Identities\nOn the new Verus testnet, we have introduced a capability we cal Verus Vault, which both provides options for a theft-resistant workflow of identity management, but also enables many use cases from trusts to vesting schedules, to escrow alternatives, estate planning and more. The concept is simple, but the ramifications when combined with the already unique revocation and recovery capabilities offered by VerusID on mainnet are immense.", "./raw_text_input_wiki/release_notes.md"], ["The Verus Vault use case, which was originally described in the conception of the feature, is the ability to timelock an ID, which would prevent any spending of any funds controlled by that ID, while still allowing the ID and all its funds to be used for staking. If the timelock was set for one day when locked, the unlock operation itself will require a waiting period of one day, which can only be circumvented by a revocation followed by recovery operation. In practice, this means that even if someone compromises your private keys while an ID is locked, they cannot spend any of the funds (though they could stake them and delegate rewards to another address, which you could immediately see) unless they unlock the ID first and wait one day. If you notice that your ID has been unlocked by someone other than you, you can revoke and recover before any funds are lost at all. If you wanted to get extremely secure, to the point of covering a case where someone may steal your private keys without you knowing and then lay in wait until you unlock your identity, so they can pounce on your funds before you lock it again, you can actually modify the controlling private keys of an identity before unlocking it, which ensures that the unlocked funds become usable again under the control of freshly made, uncompromised keys. While we believe this unique Verus technology actually provides for fully theft-proof workflows and protection of all assets on the network under the control of an ID, we will generally refer to the technology as \"theft-resistant\" and disclaim all guarantees of fitness for any particular purpose as part of the \"experimental software\" disclaimer.", "./raw_text_input_wiki/release_notes.md"], ["In addition to use cases related to theft resistance and delayed lock opening, Verus Vault can be used to provide more standard forms of time-locking by simply time locking and unlocking in one operation, leaving the unlock period immediately counting down. This capability could be used to provide time locked funds to team members, children, employees, or structured in a way to provide time locked deal and payment terms. The uses for this technology are certainly beyond those that we have already thought of, and we look forward to seeing how people leverage this powerful new protocol capability.- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**", "./raw_text_input_wiki/release_notes.md"], ["The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all wallet funds to two recipients (alice@ and bob@):**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```## Defining a CurrencyTo create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n", "./raw_text_input_wiki/release_notes.md"], ["./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\n## Testnet Reset Instructions\n**Please delete the following directories before launching the testnet:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```", "./raw_text_input_wiki/release_notes.md"], ["**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n\"%APPDATA%\"\\VerusTest\n```**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```\n# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/84c176f9730b6105c7e8c75e91dc2750bc836a99d1ff7424199217b3b97c2285/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/746bcadd639964ff0782f81f38fce1c3bd3d6c5be36660ca9710e44e69d99a1a/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/035a8df1be988dbed30c8f1a95b88836d6a4454cf4779269409e70751cb5c67b/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/64ea435716eb01e5ac278bd70b0d47a583b20b063848429c7a436bbfb63cd184/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AV1AEgABQSAsdDnDMsHH8QbwB3LZGCNFuQofET4ZKnEAJsiLbm74kTJyG7Vr3qk5DwMQF3ThcoaYbWKfG1npYRtus5cijbqc /Downloads/Verus-CLI-Linux-v0.7.2-2-amd64/Verus-CLI-Linux-v0.7.2-2-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AV1AEgABQSAsdDnDMsHH8QbwB3LZGCNFuQofET4ZKnEAJsiLbm74kTJyG7Vr3qk5DwMQF3ThcoaYbWKfG1npYRtus5cijbqc 9d4a31ebce0ea8e720a590d16af04d5790da12ec08e6a13858cb0048bab97a73\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\n**This update is required to continue participating on the testnet launched in v0.7.2**Verus v0.7.2-1 is a non-mandatory but highly recommended Verus node and wallet upgrade, with fully decentralized finance and liquidity system activated on the new Verus testnet. While most of the new capabilities in this release are focused on testnet, the mainnet support does include some performance improvements and also fixes an issue that may occur in an edge case of revocation and recovery of IDs, which can result in a revoked ID being irrecoverable from an earlier version than v0.7.2.## Testnet Reset\nThe testnet was deleted and relaunched on v0.7.2. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO v0.7.2, PLEASE FOLLOW THE INSTRUCTIONS AT THE BOTTOM OF THE RELEASE NOTES BEFORE RUNNING THIS UPDATE**", "./raw_text_input_wiki/release_notes.md"], ["## The New Verus DeFi Testnet\nThis is the most groundbreaking testnet the Verus project has ever announced, and we believe it holds the potential to improve and reshape the DeFi industry. There are truly so many new capabilities and blockchain firsts working now on testnet that it\u2019s hard to adequately cover them all. Below is a list of new capabilities active on the v0.7.2 testnet that will be on mainnet in the near future when considered fully hardened, tested, and ready for worldwide, public scale. Until then, Verus testnet is a fully decentralized blockchain network with 50% proof of work, 50% proof of stake, worldwide availability, and is running all of the new Verus protocols that are being tested and hardened for mainnet. All currencies and assets on the Verus testnet have absolutely no value and may be reset at any time in the interest of testing for mainnet. If you would like a representative basket of Verus testnet currencies that you can use to try out all of the new protocols from anywhere in the world, simply visit the Verus Discord and ask in the #pbaas-development channel. You can use this link as an invite to the Verus Discord: https://discord.gg/gecZsCf- **DeFi and cross-currency liquidity integrated with blockchain processing, fees, VerusID, and Verus PoP, 51% hash-attack resistant consensus algorithm** - This is a massive set of platform capabilities that take DeFi further than any project in crypto today. We will list it here and describe it below. Using it is simple. Understanding the implications of what such a protocol can do when rent free and integrated in a truly decentralized public blockchain is a process of realizations that is likely to be similar to layers of an onion. We will do our best to explain below.", "./raw_text_input_wiki/release_notes.md"], ["- **System-wide queries for fractional basket currencies for arbitrage, investment discovery, or conversion bargain hunting** - The new RPC API, `getcurrencyconverters` (final name at mainnet, TBD), enables instant queries of any full node for all registered currencies above a fixed liquidity threshold that contain one or more reserve currencies. This new API enables wallets or applications to easily query the entire blockchain network of fractional currencies, determine which provides the best conversion rate at acceptable liquidity, and either convert at the best possible rates worldwide, or select only better-than-market rates and arbitrage to earn.- **Enhanced VerusIDs with Verus Vault technology** - This capability extends the already groundbreaking VerusID revocable, recoverable, provable, friendly name blockchain addresses and identities to include an advanced time lock capability that does not prevent staking on locked funds, enabling easy implementation of things like vesting, trusts, protocols for theft-proofing funds, simplifying estate planning, and much more. With Verus Vault technology, your funds, identity, and estate planning can be done in a fully self-sovereign manner, with the peace of mind in knowing you are protected from lost or stolen private keys.", "./raw_text_input_wiki/release_notes.md"], ["- **Verus Fee Pooling technology** A sustainable mining and staking fee and revenue model while strengthening, rather than creating risk of weakening blockchain security, by preserving immediate incentive to maximize per-block fees, while smoothing fee distribution to miners and stakers over time, fully addressing the legitimate concerns expressed and still not addressed by Vitalik Buterin with respect to ETH and ETH 2.0 (https://blog.ethereum.org/2016/07/27/inflation-transaction-fees-cryptocurrency-monetary-policy/). In the fee pooling model, which is an extremely powerful, yet simple solution to enabling a mining and staking economy, all fees are gathered from transactions in a block as usual, then the fees, also calculated as usual, are added to a common, persistent pool of collected fees, and the current block miner or staker takes up to 1% of the aggregate fee pool.### Verus Vault - Advanced Time Locking of Identities\nOn the new Verus testnet, we have introduced a capability we cal Verus Vault, which both provides options for a theft-resistant workflow of identity management, but also enables many use cases from trusts to vesting schedules, to escrow alternatives, estate planning and more. The concept is simple, but the ramifications when combined with the already unique revocation and recovery capabilities offered by VerusID on mainnet are immense.", "./raw_text_input_wiki/release_notes.md"], ["The Verus Vault use case, which was originally described in the conception of the feature, is the ability to timelock an ID, which would prevent any spending of any funds controlled by that ID, while still allowing the ID and all its funds to be used for staking. If the timelock was set for one day when locked, the unlock operation itself will require a waiting period of one day, which can only be circumvented by a revocation followed by recovery operation. In practice, this means that even if someone compromises your private keys while an ID is locked, they cannot spend any of the funds (though they could stake them and delegate rewards to another address, which you could immediately see) unless they unlock the ID first and wait one day. If you notice that your ID has been unlocked by someone other than you, you can revoke and recover before any funds are lost at all. If you wanted to get extremely secure, to the point of covering a case where someone may steal your private keys without you knowing and then lay in wait until you unlock your identity, so they can pounce on your funds before you lock it again, you can actually modify the controlling private keys of an identity before unlocking it, which ensures that the unlocked funds become usable again under the control of freshly made, uncompromised keys. While we believe this unique Verus technology actually provides for fully theft-proof workflows and protection of all assets on the network under the control of an ID, we will generally refer to the technology as \"theft-resistant\" and disclaim all guarantees of fitness for any particular purpose as part of the \"experimental software\" disclaimer.", "./raw_text_input_wiki/release_notes.md"], ["In addition to use cases related to theft resistance and delayed lock opening, Verus Vault can be used to provide more standard forms of time-locking by simply time locking and unlocking in one operation, leaving the unlock period immediately counting down. This capability could be used to provide time locked funds to team members, children, employees, or structured in a way to provide time locked deal and payment terms. The uses for this technology are certainly beyond those that we have already thought of, and we look forward to seeing how people leverage this powerful new protocol capability.- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**", "./raw_text_input_wiki/release_notes.md"], ["The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all wallet funds to two recipients (alice@ and bob@):**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\":\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```## Defining a CurrencyTo create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n", "./raw_text_input_wiki/release_notes.md"], ["./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\n## Testnet Reset Instructions\n**Please delete the following directories before launching the testnet:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```", "./raw_text_input_wiki/release_notes.md"], ["**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n\"%APPDATA%\"\\VerusTest\n```**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```\n# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/8de6ae82139b99f0fbea6d48e3dbe1659b134bb9cb48d053eec1b79b040efb07/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/719f95e355b4429cffaf43e573e0bb517042790cb79f6c926e58fc57c7cda9f6/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/00e095873cf6975dd9fd4ad3fa53b0960c745f65edd45ae7b9b0dcd8fe91499a/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/4a95a6ecbfff65f758c0c64af2712d679e99e5dd5d52a50a321d5a7cceb645c6/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AWUvEgABQSCHGrmIokvjGdV5CIVcarS7VKfkYyBOm1iCJWkqb/gZS06XyEwk3cQa9wuRdqH0Fs4rpwOw6QLFmxVwoIWOD6Qe /Downloads/Verus-CLI-Linux-v0.7.2-1-amd64/Verus-CLI-Linux-v0.7.2-1-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AWUvEgABQSCHGrmIokvjGdV5CIVcarS7VKfkYyBOm1iCJWkqb/gZS06XyEwk3cQa9wuRdqH0Fs4rpwOw6QLFmxVwoIWOD6Qe 3d2b27e47ffac9a5eb5053853cf4b7175a289fb850f6a040dcb92cdffe0a388f\n```**The result will be true if the signature is valid.**\n```\ntrue\n```", "./raw_text_input_wiki/release_notes.md"], ["We are excited to announce Verus v0.7.2, non-mandatory but highly recommended Verus node and wallet upgrade, with fully decentralized finance and liquidity system activated on the new Verus testnet. While most of the new capabilities in this release are focused on testnet, the mainnet support does include some performance improvements and also fixes an issue that may occur in an edge case of revocation and recovery of IDs, which can result in a revoked ID being irrecoverable from an earlier version than v0.7.2.## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE FOLLOW THE INSTRUCTIONS AT THE BOTTOM OF THE RELEASE NOTES BEFORE RUNNING THIS UPDATE**", "./raw_text_input_wiki/release_notes.md"], ["## The New Verus DeFi Testnet\nThis is the most groundbreaking testnet the Verus project has ever announced, and we believe it holds the potential to improve and reshape the DeFi industry. There are truly so many new capabilities and blockchain firsts working now on testnet that it\u2019s hard to adequately cover them all. Below is a list of new capabilities active on the v0.7.2 testnet that will be on mainnet in the near future when considered fully hardened, tested, and ready for worldwide, public scale. Until then, Verus testnet is a fully decentralized blockchain network with 50% proof of work, 50% proof of stake, worldwide availability, and is running all of the new Verus protocols that are being tested and hardened for mainnet. All currencies and assets on the Verus testnet have absolutely no value and may be reset at any time in the interest of testing for mainnet. If you would like a representative basket of Verus testnet currencies that you can use to try out all of the new protocols from anywhere in the world, simply visit the Verus Discord and ask in the #pbaas-development channel. You can use this link as an invite to the Verus Discord: https://discord.gg/gecZsCf- **DeFi and cross-currency liquidity integrated with blockchain processing, fees, VerusID, and Verus PoP, 51% hash-attack resistant consensus algorithm** - This is a massive set of platform capabilities that take DeFi further than any project in crypto today. We will list it here and describe it below. Using it is simple. Understanding the implications of what such a protocol can do when rent free and integrated in a truly decentralized public blockchain is a process of realizations that is likely to be similar to layers of an onion. We will do our best to explain below.", "./raw_text_input_wiki/release_notes.md"], ["- **System-wide queries for fractional basket currencies for arbitrage, investment discovery, or conversion bargain hunting** - The new RPC API, `getcurrencyconverters` (final name at mainnet, TBD), enables instant queries of any full node for all registered currencies above a fixed liquidity threshold that contain one or more reserve currencies. This new API enables wallets or applications to easily query the entire blockchain network of fractional currencies, determine which provides the best conversion rate at acceptable liquidity, and either convert at the best possible rates worldwide, or select only better-than-market rates and arbitrage to earn.- **Enhanced VerusIDs with Verus Vault technology** - This capability extends the already groundbreaking VerusID revocable, recoverable, provable, friendly name blockchain addresses and identities to include an advanced time lock capability that does not prevent staking on locked funds, enabling easy implementation of things like vesting, trusts, protocols for theft-proofing funds, simplifying estate planning, and much more. With Verus Vault technology, your funds, identity, and estate planning can be done in a fully self-sovereign manner, with the peace of mind in knowing you are protected from lost or stolen private keys.", "./raw_text_input_wiki/release_notes.md"], ["- **Verus Fee Pooling technology** A sustainable mining and staking fee and revenue model while strengthening, rather than creating risk of weakening blockchain security, by preserving immediate incentive to maximize per-block fees, while smoothing fee distribution to miners and stakers over time, fully addressing the legitimate concerns expressed and still not addressed by Vitalik Buterin with respect to ETH and ETH 2.0 (https://blog.ethereum.org/2016/07/27/inflation-transaction-fees-cryptocurrency-monetary-policy/). In the fee pooling model, which is an extremely powerful, yet simple solution to enabling a mining and staking economy, all fees are gathered from transactions in a block as usual, then the fees, also calculated as usual, are added to a common, persistent pool of collected fees, and the current block miner or staker takes up to 1% of the aggregate fee pool.### Verus Vault - Advanced Time Locking of Identities\nOn the new Verus testnet, we have introduced a capability we cal Verus Vault, which both provides options for a theft-resistant workflow of identity management, but also enables many use cases from trusts to vesting schedules, to escrow alternatives, estate planning and more. The concept is simple, but the ramifications when combined with the already unique revocation and recovery capabilities offered by VerusID on mainnet are immense.", "./raw_text_input_wiki/release_notes.md"], ["The Verus Vault use case, which was originally described in the conception of the feature, is the ability to timelock an ID, which would prevent any spending of any funds controlled by that ID, while still allowing the ID and all its funds to be used for staking. If the timelock was set for one day when locked, the unlock operation itself will require a waiting period of one day, which can only be circumvented by a revocation followed by recovery operation. In practice, this means that even if someone compromises your private keys while an ID is locked, they cannot spend any of the funds (though they could stake them and delegate rewards to another address, which you could immediately see) unless they unlock the ID first and wait one day. If you notice that your ID has been unlocked by someone other than you, you can revoke and recover before any funds are lost at all. If you wanted to get extremely secure, to the point of covering a case where someone may steal your private keys without you knowing and then lay in wait until you unlock your identity, so they can pounce on your funds before you lock it again, you can actually modify the controlling private keys of an identity before unlocking it, which ensures that the unlocked funds become usable again under the control of freshly made, uncompromised keys. While we believe this unique Verus technology actually provides for fully theft-proof workflows and protection of all assets on the network under the control of an ID, we will generally refer to the technology as \"theft-resistant\" and disclaim all guarantees of fitness for any particular purpose as part of the \"experimental software\" disclaimer.", "./raw_text_input_wiki/release_notes.md"], ["In addition to use cases related to theft resistance and delayed lock opening, Verus Vault can be used to provide more standard forms of time-locking by simply time locking and unlocking in one operation, leaving the unlock period immediately counting down. This capability could be used to provide time locked funds to team members, children, employees, or structured in a way to provide time locked deal and payment terms. The uses for this technology are certainly beyond those that we have already thought of, and we look forward to seeing how people leverage this powerful new protocol capability.- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**", "./raw_text_input_wiki/release_notes.md"], ["The `sendcurrency` API can be used to send and convert funds.\n- **Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n  ```\n- **Sending VRSCTEST from all wallet funds to two recipients (alice@ and bob@):**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@\",\"amount\":10}]'\n  ```\n- **Converting VRSCTEST to a fractional basket currency, VRSC-BTC:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"VRSC-BTC\"}]'\n  ```\n- **Converting VRSCTEST to another reserve, BTC through a fractional currency, VRSC-BTC:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"BTC\",\"via\",\"VRSC-BTC\"}]'\n  ```\n- **Preconverting to new currency, NEWCOIN, before it is active:**\n  ```\n  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n  ```## Defining a CurrencyTo create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n", "./raw_text_input_wiki/release_notes.md"], ["./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\n## Testnet Reset Instructions\n**Please delete the following directories before launching the testnet:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```", "./raw_text_input_wiki/release_notes.md"], ["**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n\"%APPDATA%\"\\VerusTest\n```**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```\n# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/9bbb4067fc3b047fd95acd1fa3504a3e6fd6af6aa78510c251b73caf0f7d7557/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/335e72dd777655cec07bf470a315b607f15cf7447e356a41fd997fcb1854cf90/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/7f81d7ec26702be237a02de8c6fab63c776e36683ff10ce5638ce92bf5f3a40b/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/78318a873f9ffb4d620df9768fc369ca1dea1603288b5259769b4372ed979cdd/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" ARgrEgABQSBGafKV5NB9DxKiq3p45BQwC/+qkka54hIUejd6c4hP1BjSiUi1lris2Z3LACS7HyjOjLINKwXL4qvWnPSwLTmG /Downloads/Verus-CLI-Linux-v0.7.2-amd64/Verus-CLI-Linux-v0.7.2-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" ARgrEgABQSBGafKV5NB9DxKiq3p45BQwC/+qkka54hIUejd6c4hP1BjSiUi1lris2Z3LACS7HyjOjLINKwXL4qvWnPSwLTmG e7cee9dc4786b02cc9756a63f783a876d7a3fedd7127ca6d1cc54f1418a919a0\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\n## New in v0.7.1-5\nThis non-mandatory release is compatible with mainnet with mininal changes from v0.7.1-1. It contains fixes necessary to continue participating in the testnet launched in v0.7.1-1, without reset of your wallet or holdings, if you started using the VRSCTEST multi-currency testnet in v0.7.1-1 or later. You should be able to synchronize easily, but if you are unable to synchronize VRSCTEST shortly after connecting, try deleting the data in your VRSCTEST folder, and retain the wallet.dat file.# Verus Testnet with Multi-currency Fractional Reserves and Currency Launch Protocol\nVerus multi-currency fractional reserve baskets are UTXO-based, fractional reserve currencies with anti-front running, simultaneously solved, provably fair liquidity system for all currencies and tokens in or imported into the PBaaS system.While Verus daemon v0.7.1-5 has no improvements for mainnet operation, it offers full support for the new Verus Testnet multi-currency technology preview. On testnet, the new \"sendcurrency\" API, which is already available on Verus mainnet in its simplified form, is enhanced with new multi-currency parameters. The first parameter, \"currency\":\"currencyname\" - where the default on testnet for currency name is \"vrsctest\", specifies the source currency of the send. The next, \"convertto\":\"currencyname\", allows conversion from one currency to either a fractional currency where it is a reserve or a reserve of the fractional currency of the source.", "./raw_text_input_wiki/release_notes.md"], ["# Enhancements to TestNet Protocols for Increased Scale, Currency Burn Functions, and Centralized Fractional Currencies\nVersion v0.7.1-5 is not yet considered hardened for mainnet, but has increased scale over previous versions in addition to the ability to apply both fractional and centralized attributes to a currency. This allows price neutral minting by the currency controller through automatic reductions of the reserve ratio of all currencies. This version also enables a new parameter to the \"sendcurrency\" API called \"burn\". If \"burn\" is set to 1, a currency sent, which must be a token or fractional currency is officially removed from that currency's supply. In the case of a fractional currency, this will have the effect of increasing the on-chain price for all holders, depending on the amount burned.# An end to front running\nConversion will always be at the same rate as all conversions processed in one group of transactions. There is also no spread between the conversion to and from a currency. All transactions in a aggregation of import blocks, which will be detailed in later documentation, are simultaneously solved in all currency conversion directions and all converted at the same rate, all getting the same price in each direction as any person who may be exchanging in the other.", "./raw_text_input_wiki/release_notes.md"], ["There is a fee, 0.025% for conversions, 100% of which goes to miners and stakers. While it is not yet implemented, we also intend to add an implied volatility fee, which will be charged variably on imbalanced blocks of transactions, making blocks that change the price of a currency significantly pay more of an implied volatility fee, and ensuring that relatively volatile currency baskets offset any potential impermanent loss to liquidity providers risk with earnings from implied volatility fees. At the same time, currency baskets that are less volatile relative to the constituent currencies will typically have lower implied volatility fees and lower earnings for liquidity providers to offset a lower risk of impermanent loss.# The Best Way to Launch a Currency\nCurrency launches with Kickstarter-like minimums to activate or, if not met, automatically refund, dynamic currency launch pricing, based on participation, pre-launch participation price discounts, pre-conversion reserve currency carveouts, and price-neutral launch pre-allocations, all specified in easy to understand commands and parameters, no programming necessary!Currencies can be launched to accept a range of other currencies and with or without fractional reserve capabilities. Verus import/export protocol was designed to make integration with other block chains provable and easy, and there are already external bridges in progress that expect to enable automatic send/receive of any Verus network token between Verus and ETH/ERC20 tokens, where currencies can be sent between Verus and ETH, expressed as Verus currencies on the Verus network, and exposed automatically on ETH as an ERC20 token.", "./raw_text_input_wiki/release_notes.md"], ["# Preparing for Multi-chain, Dynamic Merge Mining\nWhile this 0.7.1 testnet enables on-chain token currency definition, the same advances will soon be available on the Verus merge mining and multi-chain technology which was running on testnet last year. When enabled, this will make it possible for Verus network chains to operate fully independently, yet be dynamically merge mineable along with Verus and up to 20 other Verus network blockchains on a single hash, earning rewards and powering all chains simultaneously. All network blockchains will provide the same fractional currency capabilities, both for on-chain tokens as well as native zk-SNARK supporting currencies as well.## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n**Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n**Sending VRSCTEST from all wallet funds to two recipients (alice@ and bob@):**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@\",\"amount\":10}]'\n```\n**Converting VRSCTEST to another currency, TESTCOIN:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"TESTCOIN\"}]'\n```\n**Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```## Defining a CurrencyTo create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's", "./raw_text_input_wiki/release_notes.md"], [" hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted t", "./raw_text_input_wiki/release_notes.md"], ["o with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":96, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"conversions\":[0.01, 1.0],\"minpreconversion\":[1000,1000]}'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n\"%APPDATA%\"\\VerusTest\n```**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```\n# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/8114d40ea20883a728640905f282e4017da8b3f98d373ab8230be68ba6f3a89a/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/8344a259a176124f44255a01344fa40917ee217b2d260f6f14480ebec94dd75f/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/592a3983cc35519f52001309db326e7a6e114a754aa4dfd75dbb738eb512879a/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/8c52846d8e26223a95214ff01cde849ab5a7c94105aafe4cb8e66c537c8c35b8/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AXAkEQABQR/tMlFb0UpI3f6Y610spPi50zVSGpWwzNV49QF0sUavujInLrw3Ej9wt6iPf/KrjpSLELJVcH8UWXBRkm4Yhh6b /Downloads/Verus-CLI-Linux-v0.7.1-5-amd64/Verus-CLI-Linux-v0.7.1-5-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AXAkEQABQR/tMlFb0UpI3f6Y610spPi50zVSGpWwzNV49QF0sUavujInLrw3Ej9wt6iPf/KrjpSLELJVcH8UWXBRkm4Yhh6b e70862ae89f0d7968fee0d19e730e74917a3f322da8e1e9f45a2484bc9a95aa7\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n## New in v0.7.1-4\nThis non-mandatory release is compatible with mainnet with mininal changes from v0.7.1-1. It contains fixes necessary to continue participating in the testnet launched in v0.7.1-1, without reset of your wallet or holdings, if you started using the VRSCTEST multi-currency testnet in v0.7.1-1 or later. You should be able to synchronize easily, but if you are unable to synchronize VRSCTEST shortly after connecting, try deleting the data in your VRSCTEST folder, and retain the wallet.dat file.# Verus Testnet with Multi-currency Fractional Reserves and Currency Launch Protocol\nVerus multi-currency fractional reserve baskets are UTXO-based, fractional reserve currencies with anti-front running, simultaneously solved, provably fair liquidity system for all currencies and tokens in or imported into the PBaaS system.", "./raw_text_input_wiki/release_notes.md"], ["While Verus daemon v0.7.1-4 has no improvements for mainnet operation, it offers full support for the new Verus Testnet multi-currency technology preview. On testnet, the new \"sendcurrency\" API, which is already available on Verus mainnet in its simplified form, is enhanced with new multi-currency parameters. The first parameter, \"currency\":\"currencyname\" - where the default on testnet for currency name is \"vrsctest\", specifies the source currency of the send. The next, \"convertto\":\"currencyname\", allows conversion from one currency to either a fractional currency where it is a reserve or a reserve of the fractional currency of the source.# Enhancements to TestNet Protocols for Increased Scale, Currency Burn Functions, and Centralized Fractional Currencies\nVersion v0.7.1-4 is not yet considered hardened for mainnet, but has increased scale over previous versions in addition to the ability to apply both fractional and centralized attributes to a currency. This allows price neutral minting by the currency controller through automatic reductions of the reserve ratio of all currencies. This version also enables a new parameter to the \"sendcurrency\" API called \"burn\". If \"burn\" is set to 1, a currency sent, which must be a token or fractional currency is officially removed from that currency's supply. In the case of a fractional currency, this will have the effect of increasing the on-chain price for all holders, depending on the amount burned.", "./raw_text_input_wiki/release_notes.md"], ["# An end to front running\nConversion will always be at the same rate as all conversions processed in one group of transactions. There is also no spread between the conversion to and from a currency. All transactions in a aggregation of import blocks, which will be detailed in later documentation, are simultaneously solved in all currency conversion directions and all converted at the same rate, all getting the same price in each direction as any person who may be exchanging in the other.There is a fee, 0.025% for conversions, 100% of which goes to miners and stakers. While it is not yet implemented, we also intend to add an implied volatility fee, which will be charged variably on imbalanced blocks of transactions, making blocks that change the price of a currency significantly pay more of an implied volatility fee, and ensuring that relatively volatile currency baskets offset any potential impermanent loss to liquidity providers risk with earnings from implied volatility fees. At the same time, currency baskets that are less volatile relative to the constituent currencies will typically have lower implied volatility fees and lower earnings for liquidity providers to offset a lower risk of impermanent loss.# The Best Way to Launch a Currency\nCurrency launches with Kickstarter-like minimums to activate or, if not met, automatically refund, dynamic currency launch pricing, based on participation, pre-launch participation price discounts, pre-conversion reserve currency carveouts, and price-neutral launch pre-allocations, all specified in easy to understand commands and parameters, no programming necessary!", "./raw_text_input_wiki/release_notes.md"], ["Currencies can be launched to accept a range of other currencies and with or without fractional reserve capabilities. Verus import/export protocol was designed to make integration with other block chains provable and easy, and there are already external bridges in progress that expect to enable automatic send/receive of any Verus network token between Verus and ETH/ERC20 tokens, where currencies can be sent between Verus and ETH, expressed as Verus currencies on the Verus network, and exposed automatically on ETH as an ERC20 token.# Preparing for Multi-chain, Dynamic Merge Mining\nWhile this 0.7.1 testnet enables on-chain token currency definition, the same advances will soon be available on the Verus merge mining and multi-chain technology which was running on testnet last year. When enabled, this will make it possible for Verus network chains to operate fully independently, yet be dynamically merge mineable along with Verus and up to 20 other Verus network blockchains on a single hash, earning rewards and powering all chains simultaneously. All network blockchains will provide the same fractional currency capabilities, both for on-chain tokens as well as native zk-SNARK supporting currencies as well.## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**", "./raw_text_input_wiki/release_notes.md"], ["The `sendcurrency` API can be used to send and convert funds.\n**Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n**Sending VRSCTEST from all wallet funds to two recipients (alice@ and bob@):**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@\",\"amount\":10}]'\n```\n**Converting VRSCTEST to another currency, TESTCOIN:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"TESTCOIN\"}]'\n```\n**Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```## Defining a CurrencyTo create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocation\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the curre", "./raw_text_input_wiki/release_notes.md"], ["ncy must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":96, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"conversions\":[0.01, 1.0],\"minpreconversion\":[1000,1000]}'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n\"%APPDATA%\"\\VerusTest\n```", "./raw_text_input_wiki/release_notes.md"], ["**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```\n# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/baba5b1731867dd6af01894a33cdb82e22a3c5970f7e55a1a277e3ee1378d7ba/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/0b2dbe6de69f18d631330d51e78a22e5e59df43ae49f05bad0eaabc4b91581f8/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/f34ee571cfd090d151bd46965d6585eaa339386af43df23ae0b20c040517c0f3/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/a27703796965270bbe1c8067b5a33f445375ebc08b78b7c33ca2f41ef09f075f/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AVEGEQABQSDgax8VEtroSX/nc2mIh9s7iipkyP6zfItclRbbsGyX9zctzA7pluFyEb1LDpJ70fReiaZ7hu6OxcdK6HsSU7Nv /Downloads/Verus-CLI-Linux-v0.7.1-4-amd64/Verus-CLI-Linux-v0.7.1-4-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AVEGEQABQSDgax8VEtroSX/nc2mIh9s7iipkyP6zfItclRbbsGyX9zctzA7pluFyEb1LDpJ70fReiaZ7hu6OxcdK6HsSU7Nv d3d04a488ab18ebfd758b06e9f8462e1ff657de6a78258752efc4c5f9d46463f\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\n## New in v0.7.1-3\n- This non-mandatory release is compatible with mainnet with mininal changes from v0.7.1-1. It contains fixes necessary to continue participating in the testnet launched in v0.7.1-1 and 0.7.1-2, without reset of your wallet or holdings, if you started using the VRSCTEST multi-currency testnet in v0.7.1-1 or \"-2\". You should be able to synchronize easily, but if you are unable to synchronize VRSCTEST shortly after connecting, try deleting the data in your VRSCTEST folder, and retain the wallet.dat file.\n- Improved staking supply calculation# Verus Testnet with Multi-currency Fractional Reserves and Currency Launch Protocol\nVerus multi-currency fractional reserve baskets are UTXO-based, fractional reserve currencies with anti-front running, simultaneously solved, provably fair liquidity system for all currencies and tokens in or imported into the PBaaS system.While Verus daemon v0.7.1-3 has minor improvements for mainnet operation, it offers full support for the new Verus Testnet multi-currency technology preview. On testnet, the new \"sendcurrency\" API, which is already available on Verus mainnet in its simplified form, is enhanced with new multi-currency parameters. The first parameter, \"currency\":\"currencyname\" - where the default on testnet for currency name is \"vrsctest\", specifies the source currency of the send. The next, \"convertto\":\"currencyname\", allows conversion from one currency to either a fractional currency where it is a reserve or a reserve of the fractional currency of the source.", "./raw_text_input_wiki/release_notes.md"], ["# Enhancements to TestNet Protocols for Increased Scale, Currency Burn Functions, and Centralized Fractional Currencies\nVersion v0.7.1-3 is not yet considered hardened for mainnet, but has increased scale over previous versions in addition to the ability to apply both fractional and centralized attributes to a currency. This allows price neutral minting by the currency controller through automatic reductions of the reserve ratio of all currencies. This version also enables a new parameter to the \"sendcurrency\" API called \"burn\". If \"burn\" is set to 1, a currency sent, which must be a token or fractional currency is officially removed from that currency's supply. In the case of a fractional currency, this will have the effect of increasing the on-chain price for all holders, depending on the amount burned.# An end to front running\nConversion will always be at the same rate as all conversions processed in one group of transactions. There is also no spread between the conversion to and from a currency. All transactions in a aggregation of import blocks, which will be detailed in later documentation, are simultaneously solved in all currency conversion directions and all converted at the same rate, all getting the same price in each direction as any person who may be exchanging in the other.", "./raw_text_input_wiki/release_notes.md"], ["There is a fee, 0.025% for conversions, 100% of which goes to miners and stakers. While it is not yet implemented, we also intend to add an implied volatility fee, which will be charged variably on imbalanced blocks of transactions, making blocks that change the price of a currency significantly pay more of an implied volatility fee, and ensuring that relatively volatile currency baskets offset any potential impermanent loss to liquidity providers risk with earnings from implied volatility fees. At the same time, currency baskets that are less volatile relative to the constituent currencies will typically have lower implied volatility fees and lower earnings for liquidity providers to offset a lower risk of impermanent loss.# The Best Way to Launch a Currency\nCurrency launches with Kickstarter-like minimums to activate or, if not met, automatically refund, dynamic currency launch pricing, based on participation, pre-launch participation price discounts, pre-conversion reserve currency carveouts, and price-neutral launch pre-allocations, all specified in easy to understand commands and parameters, no programming necessary!Currencies can be launched to accept a range of other currencies and with or without fractional reserve capabilities. Verus import/export protocol was designed to make integration with other block chains provable and easy, and there are already external bridges in progress that expect to enable automatic send/receive of any Verus network token between Verus and ETH/ERC20 tokens, where currencies can be sent between Verus and ETH, expressed as Verus currencies on the Verus network, and exposed automatically on ETH as an ERC20 token.", "./raw_text_input_wiki/release_notes.md"], ["# Preparing for Multi-chain, Dynamic Merge Mining\nWhile this 0.7.1 testnet enables on-chain token currency definition, the same advances will soon be available on the Verus merge mining and multi-chain technology which was running on testnet last year. When enabled, this will make it possible for Verus network chains to operate fully independently, yet be dynamically merge mineable along with Verus and up to 20 other Verus network blockchains on a single hash, earning rewards and powering all chains simultaneously. All network blockchains will provide the same fractional currency capabilities, both for on-chain tokens as well as native zk-SNARK supporting currencies as well.## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**The `sendcurrency` API can be used to send and convert funds.\n**Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n**Sending VRSCTEST from all wallet funds to two recipients (alice@ and bob@):**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@\",\"amount\":10}]'\n```\n**Converting VRSCTEST to another currency, TESTCOIN:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"TESTCOIN\"}]'\n```\n**Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```## Defining a CurrencyTo create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's", "./raw_text_input_wiki/release_notes.md"], [" hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocation\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to", "./raw_text_input_wiki/release_notes.md"], [" with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":96, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"conversions\":[0.01, 1.0],\"minpreconversion\":[1000,1000]}'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n\"%APPDATA%\"\\VerusTest\n```**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```\n# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/66a86cd778033c507263d787b5577f43ad99e8362f6d44437480265ef1e9c062/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/c654c929ad3ee93fda0bdbbd6f42d8f296231bccd119b0bae62b874e82c54bb5/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/ac2a202cda3e6531f078d644a4f81d5e31b09368f1f21cc69ff06be0a31ebba2/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/516776ea4c48dffec7f140c0f328587d292612187685fe78b007a60269de0600/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AcYAEQABQR8mgNgm19xS1rpDzEZnHPKUiTW5uzw4/mTbLae/Ir/dbDKtpCF+ACXWBww7NGIKZc6y87V4Jz2jAgU9A2l8sgQf /Downloads/Verus-CLI-Linux-v0.7.1-3-amd64/Verus-CLI-Linux-v0.7.1-3-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AcYAEQABQR8mgNgm19xS1rpDzEZnHPKUiTW5uzw4/mTbLae/Ir/dbDKtpCF+ACXWBww7NGIKZc6y87V4Jz2jAgU9A2l8sgQf 3987a67ee8cb2b7f41ac53b2d6137979fb9bd4d35a246b6549192ba55f77d716\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n## New in v0.7.1-2\n- This non-mandatory release is compatible with mainnet with no changes from v0.7.1-1. It contains fixes necessary to continue participating in the testnet launched in v0.7.1-1, without reset of your wallet or holdings, if you started using the VRSCTEST multi-currency testnet in v0.7.1-1. You should be able to synchronize easily, but if you are unable to synchronize VRSCTEST shortly after connecting, try deleting the data in your VRSCTEST folder, and retain the wallet.dat file# Verus Testnet with Multi-currency Fractional Reserves and Currency Launch Protocol\nVerus multi-currency fractional reserve baskets are UTXO-based, fractional reserve currencies with anti-front running, simultaneously solved, provably fair liquidity system for all currencies and tokens in or imported into the PBaaS system.", "./raw_text_input_wiki/release_notes.md"], ["While Verus daemon v0.7.1-2 has minor improvements for mainnet operation, it offers full support for the new Verus Testnet multi-currency technology preview. On testnet, the new \"sendcurrency\" API, which is already available on Verus mainnet in its simplified form, is enhanced with new multi-currency parameters. The first parameter, \"currency\":\"currencyname\" - where the default on testnet for currency name is \"vrsctest\", specifies the source currency of the send. The next, \"convertto\":\"currencyname\", allows conversion from one currency to either a fractional currency where it is a reserve or a reserve of the fractional currency of the source.# An end to front running\nConversion will always be at the same rate as all conversions processed in one group of transactions. There is also no spread between the conversion to and from a currency. All transactions in a aggregation of import blocks, which will be detailed in later documentation, are simultaneously solved in all currency conversion directions and all converted at the same rate, all getting the same price in each direction as any person who may be exchanging in the other.There is a fee, 0.025% for conversions, 100% of which goes to miners and stakers. While it is not yet implemented, we also intend to add an implied volatility fee, which will be charged variably on imbalanced blocks of transactions, making blocks that change the price of a currency significantly pay more of an implied volatility fee, and ensuring that relatively volatile currency baskets offset any potential impermanent loss to liquidity providers risk with earnings from implied volatility fees. At the same time, currency baskets that are less volatile relative to the constituent currencies will typically have lower implied volatility fees and lower earnings for liquidity providers to offset a lower risk of impermanent loss.", "./raw_text_input_wiki/release_notes.md"], ["# The Best Way to Launch a Currency\nCurrency launches with Kickstarter-like minimums to activate or, if not met, automatically refund, dynamic currency launch pricing, based on participation, pre-launch participation price discounts, pre-conversion reserve currency carveouts, and price-neutral launch pre-allocations, all specified in easy to understand commands and parameters, no programming necessary!Currencies can be launched to accept a range of other currencies and with or without fractional reserve capabilities. Verus import/export protocol was designed to make integration with other block chains provable and easy, and there are already external bridges in progress that expect to enable automatic send/receive of any Verus network token between Verus and ETH/ERC20 tokens, where currencies can be sent between Verus and ETH, expressed as Verus currencies on the Verus network, and exposed automatically on ETH as an ERC20 token.# Preparing for Multi-chain, Dynamic Merge Mining\nWhile this 0.7.1 testnet enables on-chain token currency definition, the same advances will soon be available on the Verus merge mining and multi-chain technology which was running on testnet last year. When enabled, this will make it possible for Verus network chains to operate fully independently, yet be dynamically merge mineable along with Verus and up to 20 other Verus network blockchains on a single hash, earning rewards and powering all chains simultaneously. All network blockchains will provide the same fractional currency capabilities, both for on-chain tokens as well as native zk-SNARK supporting currencies as well.## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**", "./raw_text_input_wiki/release_notes.md"], ["The `sendcurrency` API can be used to send and convert funds.\n**Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n**Sending VRSCTEST from all wallet funds to two recipients (alice@ and bob@):**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@\",\"amount\":10}]'\n```\n**Converting VRSCTEST to another currency, TESTCOIN:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"TESTCOIN\"}]'\n```\n**Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```## Defining a CurrencyTo create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocation\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the curre", "./raw_text_input_wiki/release_notes.md"], ["ncy must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":96, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"conversions\":[0.01, 1.0],\"minpreconversion\":[1000,1000]}'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n\"%APPDATA%\"\\VerusTest\n```", "./raw_text_input_wiki/release_notes.md"], ["**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```\n# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/1f9cb1fe4ba5aef4a0859aebd2b89001c72e1482fd27a99e1ee67f8de11011a7/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/ccc03d8a038bf21af83d873f3f814024b54f4cdbf3113f37f19ed8e7b2885a84/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/857f8e01a0ef59f779ec7c19f97a4399067399e1b28a616a3ad51a93eca0b707/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/bbc7fddee170a738fa066e56547c5804e444fe51962fdac565a14e5a4d6cc199/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AQm0EAABQR8S/gEslZAXyvOmsbZ1iHKTDXFlABnJNPMCUXXNzwd57xW3IHjcumslSyi+JKkkhbWX6eXxkFcMICW8wQRE7i8k /Downloads/Verus-CLI-Linux-v0.7.1-1-amd64/Verus-CLI-Linux-v0.7.1-1-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" ARrVEAABQSC8iC2EZWSLJ1VbjWVUkiQtKAcZCuq0GTiGd2BK4WIJ/k1H1a/3gSoTTD+L38mt9TaIHi2EKcH2CBLTQ6fmtdGb 9c8e0dcc69d9cc604a0c1fd43c82d6eb965aaf52aed2c8d770f8241e25be021b\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n## New in v0.7.1-1\n- Re-launched VRSCTEST with fixes. Make sure you delete your VRSCTEST data before connecting to the testnet.# Verus Testnet with Multi-currency Fractional Reserves and Currency Launch Protocol\nVerus multi-currency fractional reserve baskets are UTXO-based, fractional reserve currencies with anti-front running, simultaneously solved, provably fair liquidity system for all currencies and tokens in or imported into the PBaaS system.", "./raw_text_input_wiki/release_notes.md"], ["While Verus daemon v0.7.1-1 has minor improvements for mainnet operation, it offers full support for the new Verus Testnet multi-currency technology preview. On testnet, the new \"sendcurrency\" API, which is already available on Verus mainnet in its simplified form, is enhanced with new multi-currency parameters. The first parameter, \"currency\":\"currencyname\" - where the default on testnet for currency name is \"vrsctest\", specifies the source currency of the send. The next, \"convertto\":\"currencyname\", allows conversion from one currency to either a fractional currency where it is a reserve or a reserve of the fractional currency of the source.# An end to front running\nConversion will always be at the same rate as all conversions processed in one group of transactions. There is also no spread between the conversion to and from a currency. All transactions in a aggregation of import blocks, which will be detailed in later documentation, are simultaneously solved in all currency conversion directions and all converted at the same rate, all getting the same price in each direction as any person who may be exchanging in the other.There is a fee, 0.025% for conversions, 100% of which goes to miners and stakers. While it is not yet implemented, we also intend to add an implied volatility fee, which will be charged variably on imbalanced blocks of transactions, making blocks that change the price of a currency significantly pay more of an implied volatility fee, and ensuring that relatively volatile currency baskets offset any potential impermanent loss to liquidity providers risk with earnings from implied volatility fees. At the same time, currency baskets that are less volatile relative to the constituent currencies will typically have lower implied volatility fees and lower earnings for liquidity providers to offset a lower risk of impermanent loss.", "./raw_text_input_wiki/release_notes.md"], ["# The Best Way to Launch a Currency\nCurrency launches with Kickstarter-like minimums to activate or, if not met, automatically refund, dynamic currency launch pricing, based on participation, pre-launch participation price discounts, pre-conversion reserve currency carveouts, and price-neutral launch pre-allocations, all specified in easy to understand commands and parameters, no programming necessary!Currencies can be launched to accept a range of other currencies and with or without fractional reserve capabilities. Verus import/export protocol was designed to make integration with other block chains provable and easy, and there are already external bridges in progress that expect to enable automatic send/receive of any Verus network token between Verus and ETH/ERC20 tokens, where currencies can be sent between Verus and ETH, expressed as Verus currencies on the Verus network, and exposed automatically on ETH as an ERC20 token.# Preparing for Multi-chain, Dynamic Merge Mining\nWhile this 0.7.1 testnet enables on-chain token currency definition, the same advances will soon be available on the Verus merge mining and multi-chain technology which was running on testnet last year. When enabled, this will make it possible for Verus network chains to operate fully independently, yet be dynamically merge mineable along with Verus and up to 20 other Verus network blockchains on a single hash, earning rewards and powering all chains simultaneously. All network blockchains will provide the same fractional currency capabilities, both for on-chain tokens as well as native zk-SNARK supporting currencies as well.## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**", "./raw_text_input_wiki/release_notes.md"], ["The `sendcurrency` API can be used to send and convert funds.\n**Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n**Sending VRSCTEST from all wallet funds to two recipients (alice@ and bob@):**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@\",\"amount\":10}]'\n```\n**Converting VRSCTEST to another currency, TESTCOIN:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"TESTCOIN\"}]'\n```\n**Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```## Defining a CurrencyTo create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocation\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the curre", "./raw_text_input_wiki/release_notes.md"], ["ncy must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":96, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"conversions\":[0.01, 1.0],\"minpreconversion\":[1000,1000]}'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n\"%APPDATA%\"\\VerusTest\n```", "./raw_text_input_wiki/release_notes.md"], ["**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```\n# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/e94319a3ad2b81825b0ce231deb1117ac28ae897ecee1dfb0fe424c198db7d06/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/a9eb0f6a0bec1feb8e156410e0ccdbb7139e16a4b10bdea5e939b30ad834f50f/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/f17a5af4d09123d3f11f3682929fdc92f46f474463134fbdc1c2da4e56bdf8f6/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/aafa51f1d6068d65a80715db668e7e7e39b9d9437005de957d08f7300094a20c/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AQm0EAABQR8S/gEslZAXyvOmsbZ1iHKTDXFlABnJNPMCUXXNzwd57xW3IHjcumslSyi+JKkkhbWX6eXxkFcMICW8wQRE7i8k /Downloads/Verus-CLI-Linux-v0.7.1-1-amd64/Verus-CLI-Linux-v0.7.1-1-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" ATbAEAABQR/kpmoY0p915MY2NhXkl7O/wiDt/cjVfBKuvd0CdV5a4AFX5CnctBuOMEwCyiowyzYNPDanzSzE277ZDbMNH5We 95e70c52caeafffb0c9715aa28588068c9178c89fca2f60313074db052022a33\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Verus Testnet with Multi-currency Fractional Reserves and Currency Launch Protocol\nVerus multi-currency fractional reserve baskets are UTXO-based, fractional reserve currencies with anti-front running, simultaneously solved, provably fair liquidity system for all currencies and tokens in or imported into the PBaaS system.", "./raw_text_input_wiki/release_notes.md"], ["While Verus daemon v0.7.1 has minor improvements for mainnet operation, it offers full support for the new Verus Testnet multi-currency technology preview. On testnet, the new \"sendcurrency\" API, which is already available on Verus mainnet in its simplified form, is enhanced with new multi-currency parameters. The first parameter, \"currency\":\"currencyname\" - where the default on testnet for currency name is \"vrsctest\", specifies the source currency of the send. The next, \"convertto\":\"currencyname\", allows conversion from one currency to either a fractional currency where it is a reserve or a reserve of the fractional currency of the source.# An end to front running\nConversion will always be at the same rate as all conversions processed in one group of transactions. There is also no spread between the conversion to and from a currency. All transactions in a aggregation of import blocks, which will be detailed in later documentation, are simultaneously solved in all currency conversion directions and all converted at the same rate, all getting the same price in each direction as any person who may be exchanging in the other.There is a fee, 0.025% for conversions, 100% of which goes to miners and stakers. While it is not yet implemented, we also intend to add an implied volatility fee, which will be charged variably on imbalanced blocks of transactions, making blocks that change the price of a currency significantly pay more of an implied volatility fee, and ensuring that relatively volatile currency baskets offset any potential impermanent loss to liquidity providers risk with earnings from implied volatility fees. At the same time, currency baskets that are less volatile relative to the constituent currencies will typically have lower implied volatility fees and lower earnings for liquidity providers to offset a lower risk of impermanent loss.", "./raw_text_input_wiki/release_notes.md"], ["# The Best Way to Launch a Currency\nCurrency launches with Kickstarter-like minimums to activate or, if not met, automatically refund, dynamic currency launch pricing, based on participation, pre-launch participation price discounts, pre-conversion reserve currency carveouts, and price-neutral launch pre-allocations, all specified in easy to understand commands and parameters, no programming necessary!Currencies can be launched to accept a range of other currencies and with or without fractional reserve capabilities. Verus import/export protocol was designed to make integration with other block chains provable and easy, and there are already external bridges in progress that expect to enable automatic send/receive of any Verus network token between Verus and ETH/ERC20 tokens, where currencies can be sent between Verus and ETH, expressed as Verus currencies on the Verus network, and exposed automatically on ETH as an ERC20 token.# Preparing for Multi-chain, Dynamic Merge Mining\nWhile this 0.7.1 testnet enables on-chain token currency definition, the same advances will soon be available on the Verus merge mining and multi-chain technology which was running on testnet last year. When enabled, this will make it possible for Verus network chains to operate fully independently, yet be dynamically merge mineable along with Verus and up to 20 other Verus network blockchains on a single hash, earning rewards and powering all chains simultaneously. All network blockchains will provide the same fractional currency capabilities, both for on-chain tokens as well as native zk-SNARK supporting currencies as well.## Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**", "./raw_text_input_wiki/release_notes.md"], ["The `sendcurrency` API can be used to send and convert funds.\n**Sending VRSCTEST from a single address (bob@) to a single recipient (alice@):**\n```\nverus -chain=VRSCTEST sendcurrency \"bob@\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10}]'\n```\n**Sending VRSCTEST from all wallet funds to two recipients (alice@ and bob@):**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"currency\":\"vrsctest\",\"address\":\"alice@\",\"amount\":10},{\"currency\":\"VRSCTEST\",\"address\":\"bob@\",\"amount\":10}]'\n```\n**Converting VRSCTEST to another currency, TESTCOIN:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"bob@\",\"amount\":10, \"convertto\":\"TESTCOIN\"}]'\n```\n**Preconverting to new currency, NEWCOIN, before it is active:**\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"alice@\",\"amount\":10, \"convertto\":\"NEWCOIN\", \"preconvert\":true, \"refundto\":\"alice@\"}]'\n```## Defining a CurrencyTo create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocation\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the curre", "./raw_text_input_wiki/release_notes.md"], ["ncy must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":96, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"conversions\":[0.01, 1.0],\"minpreconversion\":[1000,1000]}'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n\"%APPDATA%\"\\VerusTest\n```", "./raw_text_input_wiki/release_notes.md"], ["**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```\n# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/7a46a8f579b45a08eaf9a20f138ff75c80590740959803c8c93a5f54810af3ad/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/26cb5bd36f7dcd4c8db49baaf427afea0aa87dc518dfac3bac93950d204944f9/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/2b07c7505f0c67d8957420677f85bb2a1947029494b01c2707fdb3d0c2644aaa/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/1bf02b7b5022f3b4e9b072e604a6a94656a9dc9188d1625e557fe304bdf04067/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AQm0EAABQR8S/gEslZAXyvOmsbZ1iHKTDXFlABnJNPMCUXXNzwd57xW3IHjcumslSyi+JKkkhbWX6eXxkFcMICW8wQRE7i8k /Downloads/Verus-CLI-Linux-v0.7.1-amd64/Verus-CLI-Linux-v0.7.1-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AQm0EAABQR8S/gEslZAXyvOmsbZ1iHKTDXFlABnJNPMCUXXNzwd57xW3IHjcumslSyi+JKkkhbWX6eXxkFcMICW8wQRE7i8k 26cb5bd36f7dcd4c8db49baaf427afea0aa87dc518dfac3bac93950d204944f9\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\nAt block 1053660, the Verus Mainnet Protocol upgraded to the new Komodo Notary Nodes for Komodo dPoW notarization, season 4, and a number of new capabilities, as well as a change to the Verus Proof of Power staking and mining hash that is now live on Verus mainnet.## The network upgrade activated the following features:\n- Added support for season 4 Komodo notary node operators- Coinbase shielding will no longer be required on any coinbases from the past that have not yet been shielded.", "./raw_text_input_wiki/release_notes.md"], ["- Staking will now work on all normal ID balances, enabling full use of IDs for storing and staking funds.- A new \u201csendcurrency\u201d API for the command line provides more control when sending from and to multiple addresses or identities.- \u201cupdateidentity` will now be able to change the case of characters in the name of a VerusID in the global locale.- Revocation identity will now lose all control over an ID after revocation, including the ability to still change the revocation identity itself, which it used to retain. After revocation now, the recovery identity will have full control over the revoked ID.- Staking and hashing consensus protocol updates with VerusHash 2.2## New in v0.7.0-4\n- Validate ID destination on `sendfrom`, `sendtoaddress`, `sendmany`, and `z_sendmany`# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/97fec5a44e617452d48e13f0c00736430d904a72d85fc61731fd01452de77880/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/3c8134361c965ab87751f817a097c1825ca61e2a521bfd1ed9382fbc44638920/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/c5c70239f6cb94cd1ab8cb109597f609a198f1bce644fa3434f50426f9fa8724/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/418d4da1a4113b29f7c7ce490f8aa527d6217f2d85fd10ff639b33110ab5eba0/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AR1XEAABQR8XbEix6eohYN9m6BbLjcdUkCZH/NYw1/mfBq/mIT6SewPg4PvaJHsUIO8FLB8kQDpa9eKglWJN9DTfvpWlMH9Z /Downloads/Verus-CLI-Linux-v0.7.0-4-amd64/Verus-CLI-Linux-v0.7.0-4-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AR1XEAABQR8XbEix6eohYN9m6BbLjcdUkCZH/NYw1/mfBq/mIT6SewPg4PvaJHsUIO8FLB8kQDpa9eKglWJN9DTfvpWlMH9Z 3c8134361c965ab87751f817a097c1825ca61e2a521bfd1ed9382fbc44638920\n```**The result will be true if the signature is valid.**\n```\ntrue\n```At block 1053660, the Verus Mainnet Protocol upgraded to the new Komodo Notary Nodes for Komodo dPoW notarization, season 4, and a number of new capabilities, as well as a change to the Verus Proof of Power staking and mining hash that is now live on Verus mainnet.Although the network is running smoothly after the upgrade, an issue was identified and resolved in this release. In addition, a couple of user features, including restoring \"-pubkey=hexpubkey\" as a parameter for redirecting staking and mining rewards are included.## The network upgrade activated the following features:\n- Added support for season 4 Komodo notary node operators- Coinbase shielding will no longer be required on any coinbases from the past that have not yet been shielded.- Staking will now work on all normal ID balances, enabling full use of IDs for storing and staking funds.", "./raw_text_input_wiki/release_notes.md"], ["- A new \ufffd`sendcurrency` API for the command line provides more control when sending from and to multiple addresses or identities.- `updateidentity` will now be able to change the case of characters in the name of a VerusID in the global locale.- Revocation identity will now lose all control over an ID after revocation, including the ability to still change the revocation identity itself, which it used to retain. After revocation now, the recovery identity will have full control over the revoked ID.- Staking and hashing consensus protocol updates with VerusHash 2.2# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/08254d35e8693eb304b35d1cee55f03761b78ad76dc5e25d6e42b300fcdd4e50/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/aa4842153c54510626b171128265059da30ae2bbfca974ceecc4348abb67e544/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/8a23406c8726ccf2fced09a20f298590d334ea00dbbca02eeadfae3eb8349d95/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/d274514424e2334a7695e74c20569e9267158f22303021539060da6d82ab482c/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AfQaEAABQR9cFt4qNU1KD14hlvClLhfICrm9LWuzcyW8Wh+zsu/BOQji9pUp0PRBnEEH4aQWlfRgeS4j2sByVDix3VMwj2aM /Downloads/Verus-CLI-Linux-v0.7.0-3-amd64/Verus-CLI-Linux-v0.7.0-3-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AfQaEAABQR9cFt4qNU1KD14hlvClLhfICrm9LWuzcyW8Wh+zsu/BOQji9pUp0PRBnEEH4aQWlfRgeS4j2sByVDix3VMwj2aM d509506edcf48a3ba64d814916f98e46105a0f6b437635cf5d2f2247e1574d7a\n```**The result will be true if the signature is valid.**\n```\ntrue\n```", "./raw_text_input_wiki/release_notes.md"], ["**MAKE SURE TO UPGRADE BY June 14TH, OR YOU MAY NEED TO RESYNCHRONIZE THE BLOCKCHAIN IF YOU ARE RUNNING IN NATIVE MODE.**At block 1053660, the Verus Mainnet Protocol will upgrade to the new Komodo Notary Nodes for Komodo dPoW notarization, season 4, and a number of new capabilities, as well as a change to the Verus Proof of Power staking and mining hash will go live on the Verus mainnet as well.## The network upgrade will activate the following features:\n- Added support for season 4 Komodo notary node operators- Coinbase shielding will no longer be required on any coinbases from the past that have not yet been shielded.- Staking will now work on all normal ID balances, enabling full use of IDs for storing and staking funds.- A new `sendcurrency` API for the command line provides more control when sending from and to multiple addresses or identities.- `updateidentity` will now be able to change the case of characters in the name of a VerusID in the global locale.- Revocation identity will now lose all control over an ID after revocation, including the ability to still change the revocation identity itself, which it used to retain. After revocation now, the recovery identity will have full control over the revoked ID.- Staking and hashing consensus protocol updates with VerusHash 2.2## Notable Changes:\n- Fix Komodo S4 notary count\n- `sendcurrency` does not require coinbase funds to be shielded.# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/74ccab3336fc62efb8fb4cf1a37f3c50eba59030c906bf5475227e9276d29e4b/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/3cc1b3fd86368bb6a6c69f385e3411495974f4920dda96d9e8e6d48ef3aa0143/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/300379f4530e3a7f9379a55ffb3bb88ff7c1cb7806421bbfa8f3c1bb588bece7/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/56dfa302af9a6185406c3db7102b75c77e67187d8d674b3c47374f8c28b90056/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AfcIEAABQSBXNoiaxzhPSEo99oIkVNEWvQP1ebMA5l4TNOlsUzi+DjoO9AcsQjAG9gF/HuVJlS5gAgaQN28Pwj6ExYWoY/dm /Downloads/Verus-CLI-Linux-v0.7.0-1-amd64/Verus-CLI-Linux-v0.7.0-1-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AfcIEAABQSBXNoiaxzhPSEo99oIkVNEWvQP1ebMA5l4TNOlsUzi+DjoO9AcsQjAG9gF/HuVJlS5gAgaQN28Pwj6ExYWoY/dm 0587c3da3d0f64015be98e097353a24d0581b9fbc1f3a788adf31a408c643023\n```**The result will be true if the signature is valid.**\n```\ntrue\n```**MAKE SURE TO UPGRADE BY June 14TH, OR YOU MAY NEED TO RESYNCHRONIZE THE BLOCKCHAIN IF YOU ARE RUNNING IN NATIVE MODE.**At block 1053660, the Verus Mainnet Protocol will upgrade to the new Komodo Notary Nodes for Komodo dPoW notarization, season 4, and a number of new capabilities, as well as a change to the Verus Proof of Power staking and mining hash will go live on the Verus mainnet as well.## The network upgrade will activate the following features:\n- Added support for season 4 Komodo notary node operators", "./raw_text_input_wiki/release_notes.md"], ["- Coinbase shielding will no longer be required on any coinbases from the past that have not yet been shielded.- Staking will now work on all normal ID balances, enabling full use of IDs for storing and staking funds.- A new `sendcurrency` API for the command line provides more control when sending from and to multiple addresses or identities.- `updateidentity` will now be able to change the case of characters in the name of a VerusID in the global locale.- Revocation identity will now lose all control over an ID after revocation, including the ability to still change the revocation identity itself, which it used to retain. After revocation now, the recovery identity will have full control over the revoked ID.- Staking and hashing consensus protocol updates with VerusHash 2.2# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/67f38974426e598b60f3cc97ca4a0fd80f8291e24c6738ecea59ddf0055172e1/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/29919bf5117ec7aa88b86eae07e83d203909cd92a8cbb0a02911633e761cdff0/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/a9d5f4cff70ba5b7be4d236ae692affa846336a44f6ba1a398742d87fe3ec352/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/7a7634d3bcc29b9a10190fd58a37be53ef686f7cb80293a0c4feb6aed9a056b4/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" Afn5DwABQSBdcb9HEXsztsaPQLtxhwA1U31x7ahYamF+DqxIn3j+pk/WQEv79ewYd5pDgjp5AJ/cpKWIfCVi468j1PbZ5WeJ /Downloads/Verus-CLI-Linux-v0.7.0-amd64/Verus-CLI-Linux-v0.7.0-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" Afn5DwABQSBdcb9HEXsztsaPQLtxhwA1U31x7ahYamF+DqxIn3j+pk/WQEv79ewYd5pDgjp5AJ/cpKWIfCVi468j1PbZ5WeJ f769349015e0f4b8a6da9b071e3342f2043bd6eec35a69a97de7c7b4fd910148\n```**The result will be true if the signature is valid.**\n```\ntrue\n```This is a mainnet release with fix to prevent any recurrence of the recent minor fork at block 1002417 and integrated support for the new PBaaS testnet. This release is approved for use on mainnet nodes, and it is being released on Github prior to full GUI wallet release v0.6.5-2 to enable exchanges, pools, and infrastructure nodes to update immediately, as needed.## Notable Changes:\n- Added `getsaplingtree` API\n- Added support for Verus Testnet with PBaaS Multi-currency Tokens\n- Resolved multi-block reorg issue on mainnet that can prevent successful reorg in rare, otherwise valid cases## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```", "./raw_text_input_wiki/release_notes.md"], ["**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n\"%APPDATA%\"\\VerusTest\n```**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```# Verus PBaaS Multi-currency Tokens (TestNet only)The testnet supports a completely new capability of token definitions and token launches (Kickstarter/Gofundme style, ICO, ITO, IPO, etc.). These tokens can be sent through the Verus protocol using the new 'sendcurrency' API, which works for all currencies in the Verus network. Tokens can be used as reserve currencies for other currencies as well. Token launches can accept multiple other coins or tokens for conversion to the new token with payment to the token ID. Each token can have a different conversion price for pre-launch participation as well as minimums and maximums of participation. If minimums are not met by the currency's startblock, all participation will be refunded, less a minimal transfer/network fee, which was already allocated to miners/stakers.Tokens can be controlled by the blockchain and used for many purposes, including payment models, tickets, point systems, etc., or they can be partially blockchain controlled, centralized tokens, with currencies that are mintable at any time by the ID behind them. The controlling ID can also receive receive aggregated outgoing transactions to external systems that both burn coins and pass account data in the process. This will allow applications to control currency supplies on the public network, whether these applications are external, decentralized networks or centralized custodial systems, in many typical use cases of tokens, including club coins, game tokens, token launches, etc., no programming is required.## Defining a CurrencyTo create a currency of a specific name, you need ", "./raw_text_input_wiki/release_notes.md"], ["an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocation\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either ", "./raw_text_input_wiki/release_notes.md"], ["find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":96, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"conversions\":[0.01, 1.0],\"minpreconversion\":[1000,1000]}'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/9221506334ae6562d31f441202a5cbc019e6790ebec06c61ddaedebd9425db92/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/2e03e9442d34fe118cbeb586a5cff0567e98cdb4c6bda7cedf110f7456f7c62c/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/ac5d54de262512ff02405da2d6182fe4741d3929d8218a333024e2649e42123c/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/f5223182d7dc042bf0cfc383586d34327d3cd3c0955fa0db92812d41146f2298/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation@\" AfeNDwABQR+hVp1D3jZymlkW4NrwdJbsh4jQDxxXf44WNf6QZoXY/UiU1WFy9RM+/pkCC1IQfCXF6I9ey3B/3DofrvzKKAsV /Downloads/Verus-CLI-Linux-v0.6.5-2-amd64/Verus-CLI-Linux-v0.6.5-2-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation@\" AfeNDwABQR+hVp1D3jZymlkW4NrwdJbsh4jQDxxXf44WNf6QZoXY/UiU1WFy9RM+/pkCC1IQfCXF6I9ey3B/3DofrvzKKAsV 99d7451472bc1fb34359d17e524d7755defbd279b0c2569a67231f8b7a37f9ff\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\nThis release is intended for use in the VRSCTEST only. Mainnet approved testnet release is not yet available## Notable Changes:\n- Check for creation of invalid staking transactions# Verus Testnet PBaaS Multi-currency TokensThe testnet supports a completely new capability of token definitions and token launches (Kickstarter/Gofundme style, ICO, ITO, IPO, etc.). These tokens can be sent through the Verus protocol using the new 'sendcurrency' API, which works for all currencies in the Verus network. Tokens can be used as reserve currencies for other currencies as well. Token launches can accept multiple other coins or tokens for conversion to the new token with payment to the token ID. Each token can have a different conversion price for pre-launch participation as well as minimums and maximums of participation. If minimums are not met by the currency's startblock, all participation will be refunded, less a minimal transfer/network fee, which was already allocated to miners/stakers.Tokens can be controlled by the blockchain and used for many purposes, including payment models, tickets, point systems, etc., or they can be partially blockchain controlled, centralized tokens, with currencies that are mintable at any time by the ID behind them. The controlling ID can also receive receive aggregated outgoing transactions to external systems that both burn coins and pass account data in the process. This will allow applications to control currency supplies on the public network, whether these applications are external, decentralized networks or centralized custodial systems, in many typical use cases of tokens, including club coins, game tokens, token launches, etc., no programming is required.## Defining a CurrencyTo create a currency of a specific name, you need an ID of the same name. The controller of this", "./raw_text_input_wiki/release_notes.md"], [" ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocation\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have m", "./raw_text_input_wiki/release_notes.md"], ["y VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":96, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"conversions\":[0.01, 1.0],\"minpreconversion\":[1000,1000]}'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/64f4f431c73cc8d28da48ee5adaa8fddb07ca20339706c1aa953abe8819cbbd4/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/bfa5cdbbf35495f9e6e4c8a71da7a05c41795c844aecf0d05817f7e5ee32f2aa/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/3c71f41cf03ea85fbc3d7c46b6fae18b9458bdd66d06f9dd16eea3a4dc0b3e05/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/c671dff603e3a0219c9bd8403b8ac1efddb0485621dfce9b802e975b4d7652cc\n/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Testing@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted textfile.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Testing@\" AcBbDwABQSAhpO83zww8L/K3dZTImWLcF8D/u93GyeQFCtKRoiZbb10cvNCMVDN/13S74mZUGCekQQV9t4fzChTy1mJ/DKKk /Downloads/Verus-CLI-Linux-v0.6.5-amd64/Verus-CLI-Linux-v0.6.5-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Testing@\" AcBbDwABQSAhpO83zww8L/K3dZTImWLcF8D/u93GyeQFCtKRoiZbb10cvNCMVDN/13S74mZUGCekQQV9t4fzChTy1mJ/DKKk b589a80b79a022f24524e113ccd5b7841d137fb198c5e64618c7a3ed867feb62\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\nThis release is intended for use in the VRSCTEST only. Mainnet approved testnet release is not yet available# Verus Testnet PBaaS Multi-currency TokensThe testnet supports a completely new capability of token definitions and token launches (Kickstarter/Gofundme style, ICO, ITO, IPO, etc.). These tokens can be sent through the Verus protocol using the new 'sendcurrency' API, which works for all currencies in the Verus network. Tokens can be used as reserve currencies for other currencies as well. Token launches can accept multiple other coins or tokens for conversion to the new token with payment to the token ID. Each token can have a different conversion price for pre-launch participation as well as minimums and maximums of participation. If minimums are not met by the currency's startblock, all participation will be refunded, less a minimal transfer/network fee, which was already allocated to miners/stakers.Tokens can be controlled by the blockchain and used for many purposes, including payment models, tickets, point systems, etc., or they can be partially blockchain controlled, centralized tokens, with currencies that are mintable at any time by the ID behind them. The controlling ID can also receive receive aggregated outgoing transactions to external systems that both burn coins and pass account data in the process. This will allow applications to control currency supplies on the public network, whether these applications are external, decentralized networks or centralized custodial systems, in many typical use cases of tokens, including club coins, game tokens, token launches, etc., no programming is required.## Defining a CurrencyTo create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can", "./raw_text_input_wiki/release_notes.md"], [" only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocation\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin", "./raw_text_input_wiki/release_notes.md"], [", which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":96, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"conversions\":[0.01, 1.0],\"minpreconversion\":[1000,1000]}'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/f0cfd8bcd39b69e23481d265fb8789d27ae6e655ee168acb06573268ded74185/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/eb259e23a629cac31789621cf4e917905ac43ba722e47f82f8dc0360d4f6ba72/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/ea0b8244bb8c6ddea4eb0eac51e50aa9dfd57ebb0c17696f44c3e21b3d99320c/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/80bc1d1c574a91708cbb4f13be9ba110cccc0c4fd8555bc4378737660eef6d06\n/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted textfile.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AT9MDwABQR+giVSMbRiq3p60hCUVfEdm/yPLZYjX1Eh+ufvtnpDPhyjvjUGQRClss+mQohhXPxfWY5oqIzfioqJsnHHlo2XH /Downloads/Verus-CLI-Linux-v0.6.5-amd64/Verus-CLI-Linux-v0.6.5-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AT9MDwABQR+giVSMbRiq3p60hCUVfEdm/yPLZYjX1Eh+ufvtnpDPhyjvjUGQRClss+mQohhXPxfWY5oqIzfioqJsnHHlo2XH 60020bfebbb2ced560c5d1e1333c43d9f80c4db4797812213ae04ad39df99c22\n```", "./raw_text_input_wiki/release_notes.md"], ["**The result will be true if the signature is valid.**\n```\ntrue\n```\n## New in v0.6.4-3\n- Added `z_viewtransaction` api: Gets detailed shielded information about an in-wallet transaction# Verus CLI v0.6.4-3### Worldwide Verifiable Digital Signatures for All!\nVerus digital signatures, based on Verus ID, offer the first worldwide verifiable, decentralized, single or multi-sig friendly-name signatures for content such as messages and files, authentication, and attestations, with full support for revocation and recovery in case of key loss or theft.Bitcoin, which was first to enable worldwide, P2P decentralized blockchain transactions, and most of its derivatives, offer ways to sign messages with specific private keys that can be verified against public addresses. While that does offer some limited signing capability, it does not offer capabilities that can compete with centralized services offering more sophisticated key management. A single public/private key pair lacks critical capabilities to make it suitable as an actual identity, most notable and obvious being the ability to recover from loss or theft of private keys, but arguably as important are friendly name aliases, modifiable multi-sig signing, updates, privacy, and the association of signed attestations by other identities to statements about properties of the identity.Verus ID enables free verifiable digital signatures for all through the Verus ID protocol as just one of the many new capabilities it enables. It is also the foundation upon which many new applications and additional capabilities can be built.", "./raw_text_input_wiki/release_notes.md"], ["For example, using Verus ID signatures, it\u2019s possible for any journalist anywhere to sign photos, videos, and content, establish a reputation for authenticity, and counter the potential for deep-fakes to make the truth harder to find. Open source projects can now create their own identities and digitally sign their binary releases, ensuring that not only can a file be verified by hash as the one downloaded from a particular server, but by signature as the actual file initially signed by the developer or release engineer. Signatures also form the basis for any attestation of one party to the validity of another. In fact, there are so many applications for digital signatures, from things listed already, to physical entry systems, to workflow applications, to new earning opportunities that a full discussion of use cases would overwhelm these release notes.In any case, we are happy to release digital signatures for all, and we hope you enjoy using this new, simple capability, maybe even think of a new use case you\u2019d like to pursue yourself as a business opportunity on the Verus Network!# Verus ID\nVerus IDs are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. Verus IDs provide plenty of opportunity for identity applications. Specifically, Verus ID provides:", "./raw_text_input_wiki/release_notes.md"], ["### Quantum-ready friendly crypto-addresses on the worldwide Verus network\nVerus IDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.2 does not include quantum resistant signatures for transactions, Verus IDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID->destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs.### Fully Decentralized Protocol\nAnyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. Verus IDs are:- **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.", "./raw_text_input_wiki/release_notes.md"], ["- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/c93d7f3ee35502a2dd9eaf87d76b253c6ee8e1b62c256103a267082daf3fa7f9/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/4346c377e8a6d95aae7abb289703a32ee1288786586a01fd0da6595c34d33ac9/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/131ec86c7a4024648d33c80992cfbd1708743fd4d1b9087234df6410d34ecb91/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/6d57ec0805dc0f56604be718c83e61fe57fea9e640fcc3fb28e2bc8784619864/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted textfile.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" ATPPDgABQR/xBtY9wU+RmBJqX5Y6AWdPlw9nJShSAFpyGzu50ufFR3pTC1s1Wyk96zGTCZqMUzaurrbtu4ysrKZNr7FUq/O/ /Downloads/Verus-CLI-Linux-v0.6.4-3-amd64/Verus-CLI-Linux-v0.6.4-3-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" ATPPDgABQR/xBtY9wU+RmBJqX5Y6AWdPlw9nJShSAFpyGzu50ufFR3pTC1s1Wyk96zGTCZqMUzaurrbtu4ysrKZNr7FUq/O/ 3e5cc7bea46c6869545a0a886d66fdbf21fb2800761e3dca6f626046681ee26e\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n## New in v0.6.4-1\n- Added `convertpassphrase` api, allowing wif key exports of electrum wallet passphrases# Verus CLI v0.6.4-1### Worldwide Verifiable Digital Signatures for All!\nVerus digital signatures, based on Verus ID, offer the first worldwide verifiable, decentralized, single or multi-sig friendly-name signatures for content such as messages and files, authentication, and attestations, with full support for revocation and recovery in case of key loss or theft.", "./raw_text_input_wiki/release_notes.md"], ["Bitcoin, which was first to enable worldwide, P2P decentralized blockchain transactions, and most of its derivatives, offer ways to sign messages with specific private keys that can be verified against public addresses. While that does offer some limited signing capability, it does not offer capabilities that can compete with centralized services offering more sophisticated key management. A single public/private key pair lacks critical capabilities to make it suitable as an actual identity, most notable and obvious being the ability to recover from loss or theft of private keys, but arguably as important are friendly name aliases, modifiable multi-sig signing, updates, privacy, and the association of signed attestations by other identities to statements about properties of the identity.Verus ID enables free verifiable digital signatures for all through the Verus ID protocol as just one of the many new capabilities it enables. It is also the foundation upon which many new applications and additional capabilities can be built.", "./raw_text_input_wiki/release_notes.md"], ["For example, using Verus ID signatures, it\u2019s possible for any journalist anywhere to sign photos, videos, and content, establish a reputation for authenticity, and counter the potential for deep-fakes to make the truth harder to find. Open source projects can now create their own identities and digitally sign their binary releases, ensuring that not only can a file be verified by hash as the one downloaded from a particular server, but by signature as the actual file initially signed by the developer or release engineer. Signatures also form the basis for any attestation of one party to the validity of another. In fact, there are so many applications for digital signatures, from things listed already, to physical entry systems, to workflow applications, to new earning opportunities that a full discussion of use cases would overwhelm these release notes.In any case, we are happy to release digital signatures for all, and we hope you enjoy using this new, simple capability, maybe even think of a new use case you\u2019d like to pursue yourself as a business opportunity on the Verus Network!# Verus ID\nVerus IDs are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. Verus IDs provide plenty of opportunity for identity applications. Specifically, Verus ID provides:", "./raw_text_input_wiki/release_notes.md"], ["### Quantum-ready friendly crypto-addresses on the worldwide Verus network\nVerus IDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.2 does not include quantum resistant signatures for transactions, Verus IDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID->destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs.### Fully Decentralized Protocol\nAnyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. Verus IDs are:- **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.", "./raw_text_input_wiki/release_notes.md"], ["- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/21dff79a0060325787c96b4aaaf9becd161fe958cb4428adbc82d9bd1edb07cc/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/c4d339cc8a85b3beb240b3ea4692a7630124441305cf07cf7890724277df67f7/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/f8e92c5acf1fe5e0f317d4d0bbc8288c03b2ce4c21791a33ff5f2de60c385ca8/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/d4c883ff9aa87e4e0356e66d44952a50e7bbff6fd8120a93b799510e20644a5a/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AcFjDQABQSDvcPZH+EBJHnQR491hRjINjwGtaVf3S8wFwNAY0KwYF1Qj3z0kndcLIJKqDCVKWj5RarHjCApwUGbjYK4x29Uc /Downloads/Verus-CLI-Linux-v0.6.4-amd64/Verus-CLI-Linux-v0.6.4-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AcFjDQABQSDvcPZH+EBJHnQR491hRjINjwGtaVf3S8wFwNAY0KwYF1Qj3z0kndcLIJKqDCVKWj5RarHjCApwUGbjYK4x29Uc 0cbd162064918fb63a8914c0cf963e0eb310fcd100daa7433a9066c6806491e1\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n## New in v0.6.4\n- Estimated active staking supply displayed in output from `getmininginfo`\n- Average block fees for last 100 blocks displayed in `getmininginfo` output\n- Immature coins, including time locked coins displayed in `coinsupply` output\n- Eligible staking balance, with consideration for all disqualifying factors displayed in `getwalletinfo` output\n- `z_exportwallet` as wallet backup now accepts boolean parameter to remove all addresses with no UTXOs or Identities in the backup\n- Staking performance is improved\n- Fixed rare condition of improper ID wallet synchronization of transferred or revoked IDs# Verus CLI v0.6.4", "./raw_text_input_wiki/release_notes.md"], ["### Worldwide Verifiable Digital Signatures for All!\nVerus digital signatures, based on Verus ID, offer the first worldwide verifiable, decentralized, single or multi-sig friendly-name signatures for content such as messages and files, authentication, and attestations, with full support for revocation and recovery in case of key loss or theft.Bitcoin, which was first to enable worldwide, P2P decentralized blockchain transactions, and most of its derivatives, offer ways to sign messages with specific private keys that can be verified against public addresses. While that does offer some limited signing capability, it does not offer capabilities that can compete with centralized services offering more sophisticated key management. A single public/private key pair lacks critical capabilities to make it suitable as an actual identity, most notable and obvious being the ability to recover from loss or theft of private keys, but arguably as important are friendly name aliases, modifiable multi-sig signing, updates, privacy, and the association of signed attestations by other identities to statements about properties of the identity.Verus ID enables free verifiable digital signatures for all through the Verus ID protocol as just one of the many new capabilities it enables. It is also the foundation upon which many new applications and additional capabilities can be built.", "./raw_text_input_wiki/release_notes.md"], ["For example, using Verus ID signatures, it\u2019s possible for any journalist anywhere to sign photos, videos, and content, establish a reputation for authenticity, and counter the potential for deep-fakes to make the truth harder to find. Open source projects can now create their own identities and digitally sign their binary releases, ensuring that not only can a file be verified by hash as the one downloaded from a particular server, but by signature as the actual file initially signed by the developer or release engineer. Signatures also form the basis for any attestation of one party to the validity of another. In fact, there are so many applications for digital signatures, from things listed already, to physical entry systems, to workflow applications, to new earning opportunities that a full discussion of use cases would overwhelm these release notes.In any case, we are happy to release digital signatures for all, and we hope you enjoy using this new, simple capability, maybe even think of a new use case you\u2019d like to pursue yourself as a business opportunity on the Verus Network!# Verus ID\nVerus IDs are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. Verus IDs provide plenty of opportunity for identity applications. Specifically, Verus ID provides:", "./raw_text_input_wiki/release_notes.md"], ["### Quantum-ready friendly crypto-addresses on the worldwide Verus network\nVerus IDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.2 does not include quantum resistant signatures for transactions, Verus IDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID->destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs.### Fully Decentralized Protocol\nAnyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. Verus IDs are:- **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.", "./raw_text_input_wiki/release_notes.md"], ["- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/c90815f194641646e069824711fca2dc1f7a9cd6ba5bd5016bdcdcbff8a1f190/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/5ea61dee317688aee255f6f5255d62d0307517196098ace354881a49ee36a3c3/detection\n**Linux-ARM64:** https://www.virustotal.com/#/file/3e9e463afed0eaa737a6fbd51438d5e828fccd4ca3d4be74751e79fe3eecc119/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/a3b8980fa5044177976e53e30bb3142c9ed78d982fede9d4cf015417dfa35f8a/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation@\".\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AYpdDQABQR9QSLDca3cCXdpZhNtUyVL3GdFM4248ka0Nhpp0d+/yAGmH7pmBXfcyObnInU5cxGjgbe5n2wLZRKmllS/zPM6q /Downloads/Verus-CLI-Linux-v0.6.4-amd64/Verus-CLI-Linux-v0.6.4-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AYpdDQABQR9QSLDca3cCXdpZhNtUyVL3GdFM4248ka0Nhpp0d+/yAGmH7pmBXfcyObnInU5cxGjgbe5n2wLZRKmllS/zPM6q 60df4018e329cc6748379369d02943b1ff4e7b21363beedb2624ea2770fba1b9\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n### Notable Changes\n- Improved coinsupply API speed and added accurate immature funds count# Verus CLI v0.6.2-1### Worldwide Verifiable Digital Signatures for All!\nVerus digital signatures, based on Verus ID, offer the first worldwide verifiable, decentralized, single or multi-sig friendly-name signatures for content such as messages and files, authentication, and attestations, with full support for revocation and recovery in case of key loss or theft.", "./raw_text_input_wiki/release_notes.md"], ["Bitcoin, which was first to enable worldwide, P2P decentralized blockchain transactions, and most of its derivatives, offer ways to sign messages with specific private keys that can be verified against public addresses. While that does offer some limited signing capability, it does not offer capabilities that can compete with centralized services offering more sophisticated key management. A single public/private key pair lacks critical capabilities to make it suitable as an actual identity, most notable and obvious being the ability to recover from loss or theft of private keys, but arguably as important are friendly name aliases, modifiable multi-sig signing, updates, privacy, and the association of signed attestations by other identities to statements about properties of the identity.Verus ID enables free verifiable digital signatures for all through the Verus ID protocol as just one of the many new capabilities it enables. It is also the foundation upon which many new applications and additional capabilities can be built.", "./raw_text_input_wiki/release_notes.md"], ["For example, using Verus ID signatures, it\u2019s possible for any journalist anywhere to sign photos, videos, and content, establish a reputation for authenticity, and counter the potential for deep-fakes to make the truth harder to find. Open source projects can now create their own identities and digitally sign their binary releases, ensuring that not only can a file be verified by hash as the one downloaded from a particular server, but by signature as the actual file initially signed by the developer or release engineer. Signatures also form the basis for any attestation of one party to the validity of another. In fact, there are so many applications for digital signatures, from things listed already, to physical entry systems, to workflow applications, to new earning opportunities that a full discussion of use cases would overwhelm these release notes.In any case, we are happy to release digital signatures for all, and we hope you enjoy using this new, simple capability, maybe even think of a new use case you\u2019d like to pursue yourself as a business opportunity on the Verus Network!# Verus ID\nVerus IDs are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. Verus IDs provide plenty of opportunity for identity applications. Specifically, Verus ID provides:", "./raw_text_input_wiki/release_notes.md"], ["### Quantum-ready friendly crypto-addresses on the worldwide Verus network\nVerus IDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.2 does not include quantum resistant signatures for transactions, Verus IDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID->destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs.### Fully Decentralized Protocol\nAnyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. Verus IDs are:- **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.", "./raw_text_input_wiki/release_notes.md"], ["- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/4cf0e9684029faaa29b87277cbe19f85b40a059d6a04ae9861d94beb6d95c56a/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/6bb4ebb2c4d5e0b59a52fb060d4b06596843955b3814dbf1c858a3e5d6be2ea9/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/bd2fd47bb22dbe81bb34d74c04182d03e7e72f83a0cb254acb0b869d8ee07091/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation@\".\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation@\" AZPmDAABQR/rW5EvSr1wxFw4FP+FBgTbNoZJKROpreBeH8dGQx4YJFcjz40LDSBqWfufFFEFmaZGWNNWY3QVIp3jwU7qyLfu /Downloads/Verus-CLI-Linux-v0.6.2-1-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation@\" AZPmDAABQR/rW5EvSr1wxFw4FP+FBgTbNoZJKROpreBeH8dGQx4YJFcjz40LDSBqWfufFFEFmaZGWNNWY3QVIp3jwU7qyLfu 6bb4ebb2c4d5e0b59a52fb060d4b06596843955b3814dbf1c858a3e5d6be2ea9\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Verus CLI v0.6.2\n### Worldwide Verifiable Digital Signatures for All!\nVerus digital signatures, based on Verus ID, offer the first worldwide verifiable, decentralized, single or multi-sig friendly-name signatures for content such as messages and files, authentication, and attestations, with full support for revocation and recovery in case of key loss or theft.", "./raw_text_input_wiki/release_notes.md"], ["Bitcoin, which was first to enable worldwide, P2P decentralized blockchain transactions, and most of its derivatives, offer ways to sign messages with specific private keys that can be verified against public addresses. While that does offer some limited signing capability, it does not offer capabilities that can compete with centralized services offering more sophisticated key management. A single public/private key pair lacks critical capabilities to make it suitable as an actual identity, most notable and obvious being the ability to recover from loss or theft of private keys, but arguably as important are friendly name aliases, modifiable multi-sig signing, updates, privacy, and the association of signed attestations by other identities to statements about properties of the identity.Verus ID enables free verifiable digital signatures for all through the Verus ID protocol as just one of the many new capabilities it enables. It is also the foundation upon which many new applications and additional capabilities can be built.", "./raw_text_input_wiki/release_notes.md"], ["For example, using Verus ID signatures, it\u2019s possible for any journalist anywhere to sign photos, videos, and content, establish a reputation for authenticity, and counter the potential for deep-fakes to make the truth harder to find. Open source projects can now create their own identities and digitally sign their binary releases, ensuring that not only can a file be verified by hash as the one downloaded from a particular server, but by signature as the actual file initially signed by the developer or release engineer. Signatures also form the basis for any attestation of one party to the validity of another. In fact, there are so many applications for digital signatures, from things listed already, to physical entry systems, to workflow applications, to new earning opportunities that a full discussion of use cases would overwhelm these release notes.In any case, we are happy to release digital signatures for all, and we hope you enjoy using this new, simple capability, maybe even think of a new use case you\u2019d like to pursue yourself as a business opportunity on the Verus Network!# Verus ID\nVerus IDs are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. Verus IDs provide plenty of opportunity for identity applications. Specifically, Verus ID provides:", "./raw_text_input_wiki/release_notes.md"], ["### Quantum-ready friendly crypto-addresses on the worldwide Verus network\nVerus IDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.2 does not include quantum resistant signatures for transactions, Verus IDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID->destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs.### Fully Decentralized Protocol\nAnyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. Verus IDs are:- **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.", "./raw_text_input_wiki/release_notes.md"], ["- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/32742e2b62aa446f6772ae68706626a953652c1766ac118cfb612ac6707bc48d/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/0eb57c65fc05daa34a55863f12987d4127cd8dd8c8fdce36df206e900598c9fe/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/9aab61dc575c25e71df5c1c6d8c1eeb56d0b818e6a5d18378a412a7e929c810a/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/", "./raw_text_input_wiki/release_notes.md"], ["## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation@\".\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation@\" AfLZDAABQR9H2eDMg7vKCrf7KmJt/4+8Vi4FMJSrer93IUNCMhkw63JHnCXrIv1GysI3nhkY3qoCXGpWQiIBlk6pzA/+Ztg8 /Downloads/Verus-CLI-Linux-v0.6.2-amd64.tar.gz\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation@\" AfLZDAABQR9H2eDMg7vKCrf7KmJt/4+8Vi4FMJSrer93IUNCMhkw63JHnCXrIv1GysI3nhkY3qoCXGpWQiIBlk6pzA/+Ztg8 0eb57c65fc05daa34a55863f12987d4127cd8dd8c8fdce36df206e900598c9fe\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\n# Notable Changes\n- z_importviewingkey and z_exportviewingkey for Sapling to enable confidential, verifiable, and transparent voting# Verus ID\nVerusIDs are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. VerusIDs provide plenty of opportunity for identity applications. Specifically, VerusID provides:", "./raw_text_input_wiki/release_notes.md"], ["### Quantum-ready friendly crypto-addresses on the worldwide Verus network\nVerusIDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.0 does not include quantum resistant signatures for transactions, VerusIDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID->destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs.### Fully Decentralized Protocol\nAnyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. VerusIDs are:- **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.", "./raw_text_input_wiki/release_notes.md"], ["- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.\n# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.\n# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/e1884e04a3d5932b99e3bfcb8a34cd3ed4034340367a5fade0b831eda6a0daa2/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/b514dbcf8ae804efe16ea5080751e3c0e6702a6db59b38eb7994c9a5fdc81c4c/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/b5fb64cad0bb29ab76b0215b7050beee2919bcb1b6eef6bd52436d665fa3a051/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\nAt block 800200, The Verus mainnet protocol was updated to include VerusID. This update is the latest for the upgraded Verus mainnet.# Notable Changes\n- Fix accretion of coinbases in mempool# Verus ID\nVerusIDs are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. VerusIDs provide plenty of opportunity for identity applications. Specifically, VerusID provides:", "./raw_text_input_wiki/release_notes.md"], ["### Quantum-ready friendly crypto-addresses on the worldwide Verus network\nVerusIDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.0 does not include quantum resistant signatures for transactions, VerusIDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID->destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs.### Fully Decentralized Protocol\nAnyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. VerusIDs are:- **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.", "./raw_text_input_wiki/release_notes.md"], ["- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.\n# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.\n# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/6dc2eb44ee294829c6f14e38349ccd1f8ba2bf683b93c0cda328c9bbdd588bab/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/ba3014f6ae1298fea11258474eb053b8841b1be04db911e4a3e2f80990ac42c3/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/596ef34389d9aa801936da73f39f7ac6c85878f9b927321537e850deae4f614f/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\nAt block 800200, The Verus mainnet protocol was updated to include VerusID. This update is the latest for the upgraded Verus mainnet.# Notable Changes\n- Improved staking check# Verus ID\nVerusIDs are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. VerusIDs provide plenty of opportunity for identity applications. Specifically, VerusID provides:", "./raw_text_input_wiki/release_notes.md"], ["### Quantum-ready friendly crypto-addresses on the worldwide Verus network\nVerusIDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.0 does not include quantum resistant signatures for transactions, VerusIDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID->destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs.### Fully Decentralized Protocol\nAnyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. VerusIDs are:- **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.", "./raw_text_input_wiki/release_notes.md"], ["- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.\n# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.\n# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/387f4933627c7ad774c19ede52aba9d2ca65b27dca49e6dc6ee5bc471cbebcb0/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/fc157e8826f9f547e8ff54eed6ccd1cf8c314104e90a46f39464a9484c9597fb/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/ff10726405536584fa9be5c2989c8365aaa5eaa79bb5bd6cd603d9e2f979e8dc/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\nAt block 800200, The Verus mainnet protocol was updated to include VerusID. This update is the latest for the upgraded Verus mainnet.This release fixes an issue that does not generally affect the Verus network, but can corrupt individual wallets in the case of a specific type of reorg occurrence that is relatively rare, but can happen. We STRONGLY RECOMMEND that all users upgrade to version 0.6.0-6 asap.This release includes activation support for VerusID, and relative adjustment to the CPU and FPGA-equalizing VerusHash 2.1 Algorithm# Verus ID\nVerusIDs are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. VerusIDs provide plenty of opportunity for identity applications. Specifically, VerusID provides:", "./raw_text_input_wiki/release_notes.md"], ["### Quantum-ready friendly crypto-addresses on the worldwide Verus network\nVerusIDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.0 does not include quantum resistant signatures for transactions, VerusIDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID->destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs.### Fully Decentralized Protocol\nAnyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. VerusIDs are:- **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.", "./raw_text_input_wiki/release_notes.md"], ["- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.\n# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.\n# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/c4415da8270a48944cd29507129085a677ea09ba3cf014f93393a9f6fe08391c/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/599b02ca94c9409f4167c15f7c5203b909f38c43693df702bb0dd92d7cdbe098/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/75b8aee40a5394f6b99ab0ac815b8973cc475d83bedb6e24cb7e37996553bd7c/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\n**THIS UPDATE FIXES AN OVERLY AGGRESSIVE BLOCK REJECTION IN THE VerusID PROTOCOL, AND IS A MANDATORY UPDATE FOR THE UPGRADED VERUS MAINNET**This release includes activation support for VerusID, and relative adjustment to the CPU and FPGA-equalizing VerusHash 2.1 Algorithm**AT BLOCK 800200, THE VERUS MAINNET PROTOCOL WAS UPDATED TO INCLUDE VerusID. THIS UPDATE IS THE LATEST UPDATE FOR THE UPGRADED VERUS MAINNET**# Verus ID\nVerusIDs are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. VerusIDs provide plenty of opportunity for identity applications. Specifically, VerusID provides:", "./raw_text_input_wiki/release_notes.md"], ["### Quantum-ready friendly crypto-addresses on the worldwide Verus network\nVerusIDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.0 does not include quantum resistant signatures for transactions, VerusIDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID->destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs.### Fully Decentralized Protocol\nAnyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. VerusIDs are:- **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.", "./raw_text_input_wiki/release_notes.md"], ["- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.\n# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.\n# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/8d9a74da37c9b1be5f416c2f2f92f772b086da01770d8ed6a118778f87a7e568/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/27aa9d8d4a89dadf1a87928664eef7dc70ef92624d62596ee6e699b064f17daa/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/e8f9b060d37e7028714d8c078705c8d6ceaef51b0d6f4c121cfbe40ab781b16f/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\n# Notable Changes\n- Alleviate peer banning behavior\n- Staking enhancementsThis release includes activation support for VerusID, and relative adjustment to the CPU and FPGA-equalizing VerusHash 2.1 Algorithm**AT BLOCK 800200, THE VERUS MAINNET PROTOCOL WAS UPDATED TO INCLUDE VerusID. THIS UPDATE IS THE LATEST UPDATE FOR THE UPGRADED VERUS MAINNET**# Verus ID\nVerusIDs are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. VerusIDs provide plenty of opportunity for identity applications. Specifically, VerusID provides:", "./raw_text_input_wiki/release_notes.md"], ["### Quantum-ready friendly crypto-addresses on the worldwide Verus network\nVerusIDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.0 does not include quantum resistant signatures for transactions, VerusIDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID->destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs.### Fully Decentralized Protocol\nAnyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. VerusIDs are:- **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.", "./raw_text_input_wiki/release_notes.md"], ["- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.\n# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.\n# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/a3c9e986b441a4973c15a3578fb713578b294b19077feedb2182a78270560d52/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/3075c0ebc2337e36ce4d815a6a0d2a2715dcea2118cf7b70822061c60264c7e3/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/594cf99ecc390e580edfbec4f7c73f45c959515030d256afb16e07074ba142e4/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\n# Notable Changes\n* This update fixes an issue which would ban nodes too aggressively, resulting in disconnection from the chain and potential to fork away from the main chain. This should be considered a mandatory update.\n- Add cansign and canspend to getidentityThis release includes activation support for VerusID, and relative adjustment to the CPU and FPGA-equalizing VerusHash 2.1 Algorithm**AT BLOCK 800200, THE VERUS MAINNET PROTOCOL HARDFORKED. THIS UPDATE IS MANDATORY TO REMAIN ON THE VERUS MAINNET.# Verus ID\nVerusIDs are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. VerusIDs provide plenty of opportunity for identity applications. Specifically, VerusID provides:", "./raw_text_input_wiki/release_notes.md"], ["### Quantum-ready friendly crypto-addresses on the worldwide Verus network\nVerusIDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.0 does not include quantum resistant signatures for transactions, VerusIDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID->destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs.### Fully Decentralized Protocol\nAnyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. VerusIDs are:- **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.", "./raw_text_input_wiki/release_notes.md"], ["- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.\n# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.\n# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/a82b8cfb4207b6a8e05300bc91c0363dbad0de7e3f5a1a57043b641ba4852b2e/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/1246d439115b7578ddd47f8427a93f3ebad9a637d0735ed1db31003a9a3f53be/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/2ca4b8bef8ad3e23bb896593be1509cf85619f2a6b87e72f9e59b99b52b63810/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\n# Notable Changes\n* Enable optional VRSC or VRSCTEST chains as parent of an ID. For example, bob@ is equivalent to `bob.vrsc@` or, on testnet, `bob.vrsctest@`\n* Update stratum protocol for mining to include solution information for miner, which enables smooth autoswitch and prepares for PBaaS merge mining\n* Minor issues, including listidentities issue on Mac and compatibility with pool mining, even on block numbers under 16 to prepare for PBaaSThis release includes activation support for VerusID, and relative adjustment to the CPU and FPGA-equalizing VerusHash 2.1 Algorithm**AT BLOCK 800200, THE VERUS MAINNET PROTOCOL WILL HARDFORK, AND THIS UPDATE IS MANDATORY TO REMAIN ON THE VERUS MAINNET. MAKE SURE TO UPGRADE BY DECEMBER 15TH, OR YOU MAY NEED TO RESYNCHRONIZE THE BLOCKCHAIN IF YOU ARE RUNNING IN NATIVE MODE**# Verus ID\nVerusIDs are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. VerusIDs provide plenty of opportunity for identity applications. Specifically, VerusID provides:", "./raw_text_input_wiki/release_notes.md"], ["### Quantum-ready friendly crypto-addresses on the worldwide Verus network\nVerusIDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.0 does not include quantum resistant signatures for transactions, VerusIDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID->destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs.### Fully Decentralized Protocol\nAnyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. VerusIDs are:- **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.", "./raw_text_input_wiki/release_notes.md"], ["- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.\n# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.\n# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/8a7f7bf3df09fa352979b1b92b3eea99fc802bce41f4349cfdeb3f25792233ce/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/de2961c3d4c0a00ce565989721d25b3abcf1e9e70b511c5cdb4e343005b13cc4/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/74bbe68954498821f079a9a611cf6b8b8f8deb10f9a6e2feb594deba5c5ed7b1/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\nThanks to @hellcatz and his constant development, improvement, and support of LuckPool.net for Verus and other coins they mine, we have fixed an issue that would have allowed the old hash algorithm to be used after the VerusID and VerusHash 2.1 network activation.This release includes activation support for VerusID, and relative adjustment to the CPU and FPGA-equalizing VerusHash 2.1 Algorithm**AT BLOCK 800200, THE VERUS MAINNET PROTOCOL WILL HARDFORK, AND THIS UPDATE IS MANDATORY TO REMAIN ON THE VERUS MAINNET. MAKE SURE TO UPGRADE BY DECEMBER 15TH, OR YOU MAY NEED TO RESYNCHRONIZE THE BLOCKCHAIN IF YOU ARE RUNNING IN NATIVE MODE**# Verus ID\nVerusIDs are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. VerusIDs provide plenty of opportunity for identity applications. Specifically, VerusID provides:", "./raw_text_input_wiki/release_notes.md"], ["### Quantum-ready friendly crypto-addresses on the worldwide Verus network\nVerusIDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.0 does not include quantum resistant signatures for transactions, VerusIDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID->destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs.### Fully Decentralized Protocol\nAnyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. VerusIDs are:- **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.", "./raw_text_input_wiki/release_notes.md"], ["- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.\n# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.\n# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/021e59635bb77ccb8de45b017f5e07b1d71ab55e8f508e3a68aca96f7c9c2f5b/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/2c39e4fc74ba9a1874d5d3b9d957543c83ecca50f80f0be8f844b6a599a8b65c/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/9f6a11ab3621496a0210d531167351a66c7b7881dfb405872b82db73c9094efe/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\nThis release includes activation support for VerusID, and relative adjustment to the CPU and FPGA-equalizing VerusHash 2.1 Algorithm.**AT BLOCK 800200, THE VERUS MAINNET PROTOCOL WILL HARDFORK, AND THIS UPDATE IS MANDATORY TO REMAIN ON THE VERUS MAINNET. MAKE SURE TO UPGRADE BY DECEMBER 15TH, OR YOU MAY NEED TO RESYNCHRONIZE THE BLOCKCHAIN IF YOU ARE RUNNING IN NATIVE MODE**# Verus ID\nVerusIDs are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. VerusIDs provide plenty of opportunity for identity applications. Specifically, VerusID provides:", "./raw_text_input_wiki/release_notes.md"], ["### Quantum-ready friendly crypto-addresses on the worldwide Verus network\nVerusIDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.0 does not include quantum resistant signatures for transactions, VerusIDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. Verus IDs can also be used to publish ID->destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs.### Fully Decentralized Protocol\nAnyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. VerusIDs are:- **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.", "./raw_text_input_wiki/release_notes.md"], ["- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.\n# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.\n# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/bfa8df164e7ac5a1e7ea10e7abec275059df247fd9d62258e32b28777c40baf4/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/644b4e30c681f2268f18e9e258c696a8ab4ae53964bca4b0a2d256e407b464ec/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/f9ad88116f33a1cc27ff75a4eb6108873a4ab3820759d0998b7a3a0e69d4d9b3/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\n# Notable Changes\n- Set content hashes will be a key/value map instead of an array\n- Improve invalid block and invalid transaction handling.# Verus ID and VerusHash 2.1 Network Upgrade\nThis is the third release candidate (RC3) for the next major upgrade to the Verus network. It is considered fully ready for testing on both VRSCTEST testnet and VRSC mainnet. While this release is likely to work fine on mainnet through the coming activation, it is not yet an official release that you should expect to support mainnet activation. If you install this version, please make sure to upgrade to an official release before network activation, which will happen at block 800200, expected to be mined or staked on December 15th.\nThis release enables two technology upgrades, one that would be considered big news to most cryptocurrency projects, an improvement to the FPGA-equalizing hash algorithm, and a revolutionary, new decentralized identity technology, Verus IDs, that will disrupt today\u2019s centralized systems with the most secure, quantum ready, fully decentralized, self-sovereign digital identity system in the world.\n## Verus ID\nVerus ID includes built-in privacy at the core through integration of zk-SNARKs, and provides a revolutionary improvement to blockchain address security, making it possible to actually recover your money after losing your keys, secure against identity and key theft, prove things about yourself without having to show more details than needed, and transfer assets to heirs as part of", "./raw_text_input_wiki/release_notes.md"], [" your estate.\nThis release also introduces a new smart transaction technology that is unique to the Verus network and replaces its use of Komodo compatible crypto-conditions. The Verus ID system was made possible through the use of Verus Smart Transactions, which will be available for everyone to use on their own blockchains in the upcoming PBaaS network upgrade. Verus Smart Transactions use standard Bitcoin style serialization rather than the ASN.1 used in crypto conditions, which makes support on lite or mobile wallets simpler to implement than the crypto-condition protocol, which is still used on the Verus network for Stake Guard.\n## VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.", "./raw_text_input_wiki/release_notes.md"], ["# Verus ID - A Better Blockchain Identity Technology\nIf you\u2019ve been around crypto for even a little while, you\u2019ll start to hear things like \u201cnot your keys, not your coins\u201d, \u201close your keys, lose your coins\u201d. If you lose your keys, no one will ever be able to recover your money.In fact, trading off decentralized, censorship resistant public systems for this risk to your cryptocurrency assets is such a fundamental issue in blockchain systems today that it is considered an acceptable price for having the benefit of full control over your own funds and blockchain assets.Verus ID provides an elegant solution to these previously unsolved, fundamental problems, and also provides quantum-ready friendly identity names and blockchain funds addresses as self-sovereign, revocable, recoverable identities that provide the following advantages over today\u2019s blockchain systems:1. Identity and currency address are one and the same. Your friendly name can be used as both a reference to who you are and an on-chain destination for any funds transfer.\n2. Each identity must have a set of addresses (1 or more) and a minimum number of signatures required from those addresses to spend or sign on behalf of an identity. Each identity also refers to two additional identities that have authority over:\n  - **Primary** - this is the self identity and may modify any part of the identit", "./raw_text_input_wiki/release_notes.md"], ["y except its name, its parent, which is derived from the blockchain on which it is defined, and unless it is also one of the two other authorities, it may not modify any data under their control, including the identity of the other authorities once specified.\n  - **Revocation** - this identity may revoke the primary identity, which will also revoke access to all funds and transactions under its control, but it may not spend any funds or sign on behalf of the identity.\n  - **Recovery** - this authority may redefine/recover a revoked identity, but it may not change the revocation authority, nor may it modify an unrevoked identity at all.\n3. Identities are transferable by defining them with primary addresses with private keys, which are under another party\u2019s control. When identities are transferred, the revocation and recovery authorities may or may not be modified as well, as long as the party updating the ID has the authority to do so.\n4. If an identity is transferred from one party to another, all funds in transactions that are under the control of that identity will also transfer to the party to which control is being transferred. In the native wallet, these changes are automatically reflected in the wallet balance and visibility of the balance of an identity using `z_getbalance identity@\u201d`.\n5. If later, a new address type or signature algorithm, such as one that is quantum secure s added to the Verus blockchain, all transactions sent to an identity that is updated to be under the control of the new address type will be subject to its spend conditions as well. That means that if you have 1000 transactions sent to your identity name/address, an upgrade to a quantum secure address, when they are available, will retroactively secure all 1000 transactions under the control of that address.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["## Making a new identity\nArguably, the hardest part of the new Verus identity technology is just making your first identity, especially without a GUI. Once you have your own identity, a lot becomes easier, not the least of which is the ability to send money to a friendly name instead of a base58 blockchain address or hash. For example, once you have your identity, either of the following commands will work as well as just about any other CLI command that takes an address:\n```\n./verus -chain=VRSCTEST z_sendmany bob@ \u2018[{\u201caddress\u201d:\u201dalice@\u201d, \u201camount\u201d:100}]\u2019\n```\nor\n```\n./verus -chain=VRSCTEST sendtoaddress alice@ 100\n```\nMaking a Verus ID requires two steps, steps that are designed to prevent potentially selfish miners from replacing your purchase of an ID from the Verus blockchain with their own purchase of the same name instead. To prevent this name \u201cfront running\u201d, you must first commit to a name that you wish to have in your identity as its friendly name. Friendly names are unique to a blockchain, so if someone already has a specific name you must have, you will need to either be the first to purchase that name from the blockchain or acquire it from the controlling individual or organization.Creating a name commitment registers your commitment, but keeps the name completely secret until you register it and reveal your commitment. When you register a name, you must pay 100 VRSC or 100 VRSCTEST, unless you have a referral from someone who already has an identity. With a referral, the price is 80 VRSC or 80 VRSCTEST. When you register an identity with the CLI wallet, the correct amount of money, 100 VRSC without and 80 VRSC with a referral is automatically spent along with your registration. The funds for a referral are distributed as follows:", "./raw_text_input_wiki/release_notes.md"], ["- 20 VRSC to the referrer\u2019s ID\n- 20 VRSC to the referrer\u2019s referrer\u2019s ID\n- 20 VRSC to the referrer\u2019s referrer\u2019s referrer\u2019s ID\n- 20 VRSC to the miner of the block in which the ID is mined100% of all funds that are not paid to referrers go to miners or stakers of the blockchain.## To create an identity:", "./raw_text_input_wiki/release_notes.md"], ["Create your commitment with the following command:\n```\n./verus -chain=VRSCTEST registernamecommitment Name youraddressorid referrerfriendlyname@\nThat will respond with something like:\n{\n \"txid\": \"377576f8ada1acc2aeb013ddf7a9ad86756cb990d4c5fc70b5a9a0fca43d727e\",\n \"namereservation\": {\n  \"name\": \"Name\",\n  \"salt\": \"7b981f0a1ff2593167ef078150d0116335a7f329f9403b0abaeca30a42d8876a\",\n  \"referral\": \"iSJLKp1hvn51Zg2Y6FBKjzLs9AAy7fomWN\",\n  \"parent\": \"\",\n  \"nameid\": \"iDXx9FPrAS5k2XCGss6FFmDQQMsts63uUg\"\n }\n}\n```\nYou then wait for the commitment to be mined into a block, then use the information returned above as follows:\n```\n./verus -chain=VRSCTEST registeridentity '{\"txid\":\"377576f8ada1acc2aeb013ddf7a9ad86756cb990d4c5fc70b5a9a0fca43d727e\", \"namereservation\": {\n  \"name\": \"Name\", \"salt\": \"7b981f0a1ff2593167ef078150d0116335a7f329f9403b0abaeca30a42d8876a\", \"referral\":\"referrerfriendlyname@\"}, \"identity\":{\"name\":\"Name\", \"primaryaddresses\":[\"RKo5u8N1sStZu81fU8kaxhoDcFcJmNEwSp\"], \"minimumsignatures\":1, \"privateaddress\":\"zs14y0aa096em2as6n4fauyumqeywz45rfpze38c39fksgtjsac9vmms7fmstcylpaalm7rseu8838\"}}'\n```\nAs long as you have enough funds and you are registering a new identity on the blockchain, you will be able to use your new identity in place of an address as soon as the transaction created by the registration command is mined into the blockchain.\nYou may list the identities in your wallet with the command `listidentities`, and you may display specific identities with the command `getidentity`. If you have the authority, or use identities under your control as revocation or recovery authorities for other identities, you may also revoke and recovery identities as well.", "./raw_text_input_wiki/release_notes.md"], ["## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n\"%APPDATA%\"\\VerusTest\n```**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/512b039b4cfd1a561372c0858c1c592efcab9a7d0bcba9fc2a9f2a298e77bb8c/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/d3ab563b621a6953be5b0e3405d27608425f8fd7491d7dd0fcb347d0b535d265/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/8f6b826b008ad66397cd4091a52fccc0ff1c8b3b54e2f7f73249e1ef92296f73/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\n# Notable Changes\n- Improved Identity synchronization\n- Cleaned up debug log output\n- Set block space limit for Identities# Verus ID and VerusHash 2.1 Network Upgrade\nThis is the second release candidate (RC2) for the next major upgrade to the Verus network. It is considered fully ready for testing on both VRSCTEST testnet and VRSC mainnet. While this release is likely to work fine on mainnet through the coming activation, it is not yet an official release that you should expect to support mainnet activation. If you install this version, please make sure to upgrade to an official release before network activation, which will happen at block 800200, expected to be mined or staked on December 15th.\nThis release enables two technology upgrades, one that would be considered big news to most cryptocurrency projects, an improvement to the FPGA-equalizing hash algorithm, and a revolutionary, new decentralized identity technology, Verus IDs, that will disrupt today\u2019s centralized systems with the most secure, quantum ready, fully decentralized, self-sovereign digital identity system in the world.\n## Verus ID\nVerus ID includes built-in privac", "./raw_text_input_wiki/release_notes.md"], ["y at the core through integration of zk-SNARKs, and provides a revolutionary improvement to blockchain address security, making it possible to actually recover your money after losing your keys, secure against identity and key theft, prove things about yourself without having to show more details than needed, and transfer assets to heirs as part of your estate.\nThis release also introduces a new smart transaction technology that is unique to the Verus network and replaces its use of Komodo compatible crypto-conditions. The Verus ID system was made possible through the use of Verus Smart Transactions, which will be available for everyone to use on their own blockchains in the upcoming PBaaS network upgrade. Verus Smart Transactions use standard Bitcoin style serialization rather than the ASN.1 used in crypto conditions, which makes support on lite or mobile wallets simpler to implement than the crypto-condition protocol, which is still used on the Verus network for Stake Guard.\n## VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy star", "./raw_text_input_wiki/release_notes.md"], ["ts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.", "./raw_text_input_wiki/release_notes.md"], ["# Verus ID - A Better Blockchain Identity Technology\nIf you\u2019ve been around crypto for even a little while, you\u2019ll start to hear things like \u201cnot your keys, not your coins\u201d, \u201close your keys, lose your coins\u201d. If you lose your keys, no one will ever be able to recover your money.In fact, trading off decentralized, censorship resistant public systems for this risk to your cryptocurrency assets is such a fundamental issue in blockchain systems today that it is considered an acceptable price for having the benefit of full control over your own funds and blockchain assets.Verus ID provides an elegant solution to these previously unsolved, fundamental problems, and also provides quantum-ready friendly identity names and blockchain funds addresses as self-sovereign, revocable, recoverable identities that provide the following advantages over today\u2019s blockchain systems:1. Identity and currency address are one and the same. Your friendly name can be used as both a reference to who you are and an on-chain destination for an", "./raw_text_input_wiki/release_notes.md"], ["y funds transfer.\n2. Each identity must have a set of addresses (1 or more) and a minimum number of signatures required from those addresses to spend or sign on behalf of an identity. Each identity also refers to two additional identities that have authority over:\n  - **Primary** - this is the self identity and may modify any part of the identity except its name, its parent, which is derived from the blockchain on which it is defined, and unless it is also one of the two other authorities, it may not modify any data under their control, including the identity of the other authorities once specified.\n  - **Revocation** - this identity may revoke the primary identity, which will also revoke access to all funds and transactions under its control, but it may not spend any funds or sign on behalf of the identity.\n  - **Recovery** - this authority may redefine/recover a revoked identity, but it may not change the revocation authority, nor may it modify an unrevoked identity at all.\n3. Identities are transferable by defining them with primary addresses with private keys, which are under another party\u2019s control. When identities are transferred, the revocation and recovery authorities may or may not be modified as well, as long as the party updating the ID has the authority to do so.\n4. If an identity is transferred from one party to another, all funds in transactions that are under the control of that identity will also transfer to the party to which control is being transferred. In the native wallet, these changes are automatically reflected in the wallet balance and visibility of the balance of an identity using `z_getbalance identity@\u201d`.\n5. If later, a new address type or signature algorithm, such as one that is quantum secure s added to the Verus blockchain, all transactions sent to an identity that is updated to be under the control of the new address type will be ", "./raw_text_input_wiki/release_notes.md"], ["subject to its spend conditions as well. That means that if you have 1000 transactions sent to your identity name/address, an upgrade to a quantum secure address, when they are available, will retroactively secure all 1000 transactions under the control of that address.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["## Making a new identity\nArguably, the hardest part of the new Verus identity technology is just making your first identity, especially without a GUI. Once you have your own identity, a lot becomes easier, not the least of which is the ability to send money to a friendly name instead of a base58 blockchain address or hash. For example, once you have your identity, either of the following commands will work as well as just about any other CLI command that takes an address:\n```\n./verus -chain=VRSCTEST z_sendmany bob@ \u2018[{\u201caddress\u201d:\u201dalice@\u201d, \u201camount\u201d:100}]\u2019\n```\nor\n```\n./verus -chain=VRSCTEST sendtoaddress alice@ 100\n```\nMaking a Verus ID requires two steps, steps that are designed to prevent potentially selfish miners from replacing your purchase of an ID from the Verus blockchain with their own purchase of the same name instead. To prevent this name \u201cfront running\u201d, you must first commit to a name that you wish to have in your identity as its friendly name. Friendly names are unique to a blockchain, so if someone already has a specific name you must have, you will need to either be the first to purchase that name from the blockchain or acquire it from the controlling individual or organization.Creating a name commitment registers your commitment, but keeps the name completely secret until you register it and reveal your commitment. When you register a name, you must pay 100 VRSC or 100 VRSCTEST, unless you have a referral from someone who already has an identity. With a referral, the price is 80 VRSC or 80 VRSCTEST. When you register an identity with the CLI wallet, the correct amount of money, 100 VRSC without and 80 VRSC with a referral is automatically spent along with your registration. The funds for a referral are distributed as follows:", "./raw_text_input_wiki/release_notes.md"], ["- 20 VRSC to the referrer\u2019s ID\n- 20 VRSC to the referrer\u2019s referrer\u2019s ID\n- 20 VRSC to the referrer\u2019s referrer\u2019s referrer\u2019s ID\n- 20 VRSC to the miner of the block in which the ID is mined100% of all funds that are not paid to referrers go to miners or stakers of the blockchain.## To create an identity:", "./raw_text_input_wiki/release_notes.md"], ["Create your commitment with the following command:\n```\n./verus -chain=VRSCTEST registernamecommitment Name youraddressorid referrerfriendlyname@\nThat will respond with something like:\n{\n \"txid\": \"377576f8ada1acc2aeb013ddf7a9ad86756cb990d4c5fc70b5a9a0fca43d727e\",\n \"namereservation\": {\n  \"name\": \"Name\",\n  \"salt\": \"7b981f0a1ff2593167ef078150d0116335a7f329f9403b0abaeca30a42d8876a\",\n  \"referral\": \"iSJLKp1hvn51Zg2Y6FBKjzLs9AAy7fomWN\",\n  \"parent\": \"\",\n  \"nameid\": \"iDXx9FPrAS5k2XCGss6FFmDQQMsts63uUg\"\n }\n}\n```\nYou then wait for the commitment to be mined into a block, then use the information returned above as follows:\n```\n./verus -chain=VRSCTEST registeridentity '{\"txid\":\"377576f8ada1acc2aeb013ddf7a9ad86756cb990d4c5fc70b5a9a0fca43d727e\", \"namereservation\": {\n  \"name\": \"Name\", \"salt\": \"7b981f0a1ff2593167ef078150d0116335a7f329f9403b0abaeca30a42d8876a\", \"referral\":\"referrerfriendlyname@\"}, \"identity\":{\"name\":\"Name\", \"primaryaddresses\":[\"RKo5u8N1sStZu81fU8kaxhoDcFcJmNEwSp\"], \"minimumsignatures\":1, \"privateaddress\":\"zs14y0aa096em2as6n4fauyumqeywz45rfpze38c39fksgtjsac9vmms7fmstcylpaalm7rseu8838\"}}'\n```\nAs long as you have enough funds and you are registering a new identity on the blockchain, you will be able to use your new identity in place of an address as soon as the transaction created by the registration command is mined into the blockchain.\nYou may list the identities in your wallet with the command `listidentities`, and you may display specific identities with the command `getidentity`. If you have the authority, or use identities under your control as revocation or recovery authorities for other identities, you may also revoke and recovery identities as well.", "./raw_text_input_wiki/release_notes.md"], ["## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n\"%APPDATA%\"\\VerusTest\n```**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/fac7a41048e010a5f7bc4b61c121fec0b73316a9c35929cfc0beae353b4ca843/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/8aa4b6435a25338c150316c5bbb2c6cb6650f3e48e2d9bfe4c0c95a9a2784c53/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/186b0a524d2ece4f3a6360050a3cb9c883ca239cdf6b82e99046b45f0c5a6e75/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\n# Verus ID and VerusHash 2.1 Network Upgrade\nThis is the first release candidate (RC1) for the next major upgrade to the Verus network. It is considered fully ready for testing on both VRSCTEST testnet and VRSC mainnet. While this release is likely to work fine on mainnet through the coming activation, it is not yet an official release that you should expect to support mainnet activation. If you install this version, please make sure to upgrade to an official release before network activation, which will happen at block 800200, expected to be mined or staked on December 15th.\nThis release enables two technology upgrades, one that would be considered big news to most cryptocurrency projects, an improvement to the FPGA-equalizing hash algorithm, and a revolutionary, new decentralized identity technology, Verus IDs, that will disrupt today\u2019s centralized systems with the most secure, quantum ready, fully decentralized, self-sovereign digital identity system in the world.\n## Verus ID\nVerus ID includes built-in privacy at the core through integration of zk-SNARKs, and provides a revolutionary improvement to blockchain address security, ma", "./raw_text_input_wiki/release_notes.md"], ["king it possible to actually recover your money after losing your keys, secure against identity and key theft, prove things about yourself without having to show more details than needed, and transfer assets to heirs as part of your estate.\nThis release also introduces a new smart transaction technology that is unique to the Verus network and replaces its use of Komodo compatible crypto-conditions. The Verus ID system was made possible through the use of Verus Smart Transactions, which will be available for everyone to use on their own blockchains in the upcoming PBaaS network upgrade. Verus Smart Transactions use standard Bitcoin style serialization rather than the ASN.1 used in crypto conditions, which makes support on lite or mobile wallets simpler to implement than the crypto-condition protocol, which is still used on the Verus network for Stake Guard.\n## VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards", "./raw_text_input_wiki/release_notes.md"], [", begin streaming from the network.", "./raw_text_input_wiki/release_notes.md"], ["# Verus ID - A Better Blockchain Identity Technology\nIf you\u2019ve been around crypto for even a little while, you\u2019ll start to hear things like \u201cnot your keys, not your coins\u201d, \u201close your keys, lose your coins\u201d. If you lose your keys, no one will ever be able to recover your money.In fact, trading off decentralized, censorship resistant public systems for this risk to your cryptocurrency assets is such a fundamental issue in blockchain systems today that it is considered an acceptable price for having the benefit of full control over your own funds and blockchain assets.Verus ID provides an elegant solution to these previously unsolved, fundamental problems, and also provides quantum-ready friendly identity names and blockchain funds addresses as self-sovereign, revocable, recoverable identities that provide the following advantages over today\u2019s blockchain systems:1. Identity and currency address are one and the same. Your friendly name can be used as both a reference to who you are and an on-chain destination for any funds transfer.\n2. Each identity must have a set of addresses (1 or more) and a minimum number of signatures required from those addresses to spend or sign on behalf of an identity. Each identity also refers to two additional identities that have authority over:\n  - **Primary** - this is the self identity and may modify any part of the identity except its name, its parent, which is derived from the blockchain on which it is defined, and unless it is also one of the two other authorities, it may n", "./raw_text_input_wiki/release_notes.md"], ["ot modify any data under their control, including the identity of the other authorities once specified.\n  - **Revocation** - this identity may revoke the primary identity, which will also revoke access to all funds and transactions under its control, but it may not spend any funds or sign on behalf of the identity.\n  - **Recovery** - this authority may redefine/recover a revoked identity, but it may not change the revocation authority, nor may it modify an unrevoked identity at all.\n3. Identities are transferable by defining them with primary addresses with private keys, which are under another party\u2019s control. When identities are transferred, the revocation and recovery authorities may or may not be modified as well, as long as the party updating the ID has the authority to do so.\n4. If an identity is transferred from one party to another, all funds in transactions that are under the control of that identity will also transfer to the party to which control is being transferred. In the native wallet, these changes are automatically reflected in the wallet balance and visibility of the balance of an identity using `z_getbalance identity@\u201d`.\n5. If later, a new address type or signature algorithm, such as one that is quantum secure s added to the Verus blockchain, all transactions sent to an identity that is updated to be under the control of the new address type will be subject to its spend conditions as well. That means that if you have 1000 transactions sent to your identity name/address, an upgrade to a quantum secure address, when they are available, will retroactively secure all 1000 transactions under the control of that address.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["## Making a new identity\nArguably, the hardest part of the new Verus identity technology is just making your first identity, especially without a GUI. Once you have your own identity, a lot becomes easier, not the least of which is the ability to send money to a friendly name instead of a base58 blockchain address or hash. For example, once you have your identity, either of the following commands will work as well as just about any other CLI command that takes an address:\n```\n./verus -chain=VRSCTEST z_sendmany bob@ \u2018[{\u201caddress\u201d:\u201dalice@\u201d, \u201camount\u201d:100}]\u2019\n```\nor\n```\n./verus -chain=VRSCTEST sendtoaddress alice@ 100\n```\nMaking a Verus ID requires two steps, steps that are designed to prevent potentially selfish miners from replacing your purchase of an ID from the Verus blockchain with their own purchase of the same name instead. To prevent this name \u201cfront running\u201d, you must first commit to a name that you wish to have in your identity as its friendly name. Friendly names are unique to a blockchain, so if someone already has a specific name you must have, you will need to either be the first to purchase that name from the blockchain or acquire it from the controlling individual or organization.Creating a name commitment registers your commitment, but keeps the name completely secret until you register it and reveal your commitment. When you register a name, you must pay 100 VRSC or 100 VRSCTEST, unless you have a referral from someone who already has an identity. With a referral, the price is 80 VRSC or 80 VRSCTEST. When you register an identity with the CLI wallet, the correct amount of money, 100 VRSC without and 80 VRSC with a referral is automatically spent along with your registration. The funds for a referral are distributed as follows:", "./raw_text_input_wiki/release_notes.md"], ["- 20 VRSC to the referrer\u2019s ID\n- 20 VRSC to the referrer\u2019s referrer\u2019s ID\n- 20 VRSC to the referrer\u2019s referrer\u2019s referrer\u2019s ID\n- 20 VRSC to the miner of the block in which the ID is mined100% of all funds that are not paid to referrers go to miners or stakers of the blockchain.## To create an identity:", "./raw_text_input_wiki/release_notes.md"], ["Create your commitment with the following command:\n```\n./verus -chain=VRSCTEST registernamecommitment Name youraddressorid referrerfriendlyname@\nThat will respond with something like:\n{\n \"txid\": \"377576f8ada1acc2aeb013ddf7a9ad86756cb990d4c5fc70b5a9a0fca43d727e\",\n \"namereservation\": {\n  \"name\": \"Name\",\n  \"salt\": \"7b981f0a1ff2593167ef078150d0116335a7f329f9403b0abaeca30a42d8876a\",\n  \"referral\": \"iSJLKp1hvn51Zg2Y6FBKjzLs9AAy7fomWN\",\n  \"parent\": \"\",\n  \"nameid\": \"iDXx9FPrAS5k2XCGss6FFmDQQMsts63uUg\"\n }\n}\n```\nYou then wait for the commitment to be mined into a block, then use the information returned above as follows:\n```\n./verus -chain=VRSCTEST registeridentity '{\"txid\":\"377576f8ada1acc2aeb013ddf7a9ad86756cb990d4c5fc70b5a9a0fca43d727e\", \"namereservation\": {\n  \"name\": \"Name\", \"salt\": \"7b981f0a1ff2593167ef078150d0116335a7f329f9403b0abaeca30a42d8876a\", \"referral\":\"referrerfriendlyname@\"}, \"identity\":{\"name\":\"Name\", \"primaryaddresses\":[\"RKo5u8N1sStZu81fU8kaxhoDcFcJmNEwSp\"], \"minimumsignatures\":1, \"privateaddress\":\"zs14y0aa096em2as6n4fauyumqeywz45rfpze38c39fksgtjsac9vmms7fmstcylpaalm7rseu8838\"}}'\n```\nAs long as you have enough funds and you are registering a new identity on the blockchain, you will be able to use your new identity in place of an address as soon as the transaction created by the registration command is mined into the blockchain.\nYou may list the identities in your wallet with the command `listidentities`, and you may display specific identities with the command `getidentity`. If you have the authority, or use identities under your control as revocation or recovery authorities for other identities, you may also revoke and recovery identities as well.", "./raw_text_input_wiki/release_notes.md"], ["## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n\"%APPDATA%\"\\VerusTest\n```**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/7f1762616b2a7221c256f02ebebd6724f7b490887f86835e7093701e93720c00/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/a350815413d6279b1b09c332185536a5d7f8225c588d27cb99cb354aeee659e4/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/e58fd29884468b97d8320bbfe960b0fee3439e9025f0e78fc358dfb45465f4aa/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\nThis release is intended for use in the VRSCTEST network. Mainnet use is still being tested.\n# Notable Changes\n- Add blockchain rule to consider any identities without primary addresses or nonzero minimum number of signatures as invalid.# Verus ID - A Better Blockchain Identity Technology\nIf you\u2019ve been around crypto for even a little while, you\u2019ll start to hear things like \u201cnot your keys, not your coins\u201d, \u201close your keys, lose your coins\u201d. If you lose your keys, no one will ever be able to recover your money.In fact, trading off decentralized, censorship resistant public systems for this risk to your cryptocurrency assets is such a fundamental issue in blockchain systems today that it is considered an acceptable price for having the benefit of full control over your own funds and blockchain assets.Verus ID provides an elegant solution to these previously unsolved, fundamental problems, and also provides quantum-ready friendly identity names and blockchain funds addresses as self-sovereign, revocable, recoverable identities that provide the following advantages over today\u2019s blockchain systems:1. Identity and currency address are one", "./raw_text_input_wiki/release_notes.md"], [" and the same. Your friendly name can be used as both a reference to who you are and an on-chain destination for any funds transfer.\n2. Each identity must have a set of addresses (1 or more) and a minimum number of signatures required from those addresses to spend or sign on behalf of an identity. Each identity also refers to two additional identities that have authority over:\n  - **Primary** - this is the self identity and may modify any part of the identity except its name, its parent, which is derived from the blockchain on which it is defined, and unless it is also one of the two other authorities, it may not modify any data under their control, including the identity of the other authorities once specified.\n  - **Revocation** - this identity may revoke the primary identity, which will also revoke access to all funds and transactions under its control, but it may not spend any funds or sign on behalf of the identity.\n  - **Recovery** - this authority may redefine/recover a revoked identity, but it may not change the revocation authority, nor may it modify an unrevoked identity at all.\n3. Identities are transferable by defining them with primary addresses with private keys, which are under another party\u2019s control. When identities are transferred, the revocation and recovery authorities may or may not be modified as well, as long as the party updating the ID has the authority to do so.\n4. If an identity is transferred from one party to another, all funds in transactions that are under the control of that identity will also transfer to the party to which control is being transferred. In the native wallet, these changes are automatically reflected in the wallet balance and visibility of the balance of an identity using \u201cz_getbalance identity@\u201d.\n5. If later, a new address type or signature algorithm, such as one that is quantum secure s added to the Verus blockch", "./raw_text_input_wiki/release_notes.md"], ["ain, all transactions sent to an identity that is updated to be under the control of the new address type will be subject to its spend conditions as well. That means that if you have 1000 transactions sent to your identity name/address, an upgrade to a quantum secure address, when they are available, will retroactively secure all 1000 transactions under the control of that address.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["## Making a new identity\nArguably, the hardest part of the new Verus identity technology is just making your first identity, especially without a GUI. Once you have your own identity, a lot becomes easier, not the least of which is the ability to send money to a friendly name instead of a base58 blockchain address or hash. For example, once you have your identity, either of the following commands will work as well as just about any other CLI command that takes an address:\n```\n./verus -chain=VRSCTEST z_sendmany bob@ \u2018[{\u201caddress\u201d:\u201dalice@\u201d, \u201camount\u201d:100}]\u2019\n```\nor\n```\n./verus -chain=VRSCTEST sendtoaddress alice@ 100\n```\nMaking a Verus ID requires two steps, steps that are designed to prevent potentially selfish miners from replacing your purchase of an ID from the Verus blockchain with their own purchase of the same name instead. To prevent this name \u201cfront running\u201d, you must first commit to a name that you wish to have in your identity as its friendly name. Friendly names are unique to a blockchain, so if someone already has a specific name you must have, you will need to either be the first to purchase that name from the blockchain or acquire it from the controlling individual or organization.Creating a name commitment registers your commitment, but keeps the name completely secret until you register it and reveal your commitment. When you register a name, you must pay 100 VRSC or 100 VRSCTEST, unless you have a referral from someone who already has an identity. With a referral, the price is 80 VRSC or 80 VRSCTEST. When you register an identity with the CLI wallet, the correct amount of money, 100 VRSC without and 80 VRSC with a referral is automatically spent along with your registration. The funds for a referral are distributed as follows:", "./raw_text_input_wiki/release_notes.md"], ["- 20 VRSC to the referrer\u2019s ID\n- 20 VRSC to the referrer\u2019s referrer\u2019s ID\n- 20 VRSC to the referrer\u2019s referrer\u2019s referrer\u2019s ID\n- 20 VRSC to the miner of the block in which the ID is mined100% of all funds that are not paid to referrers go to miners or stakers of the blockchain.## To create an identity:", "./raw_text_input_wiki/release_notes.md"], ["Create your commitment with the following command:\n```\n./verus -chain=VRSCTEST registernamecommitment Name youraddressorid referrerfriendlyname@\nThat will respond with something like:\n{\n \"txid\": \"377576f8ada1acc2aeb013ddf7a9ad86756cb990d4c5fc70b5a9a0fca43d727e\",\n \"namereservation\": {\n  \"name\": \"Name\",\n  \"salt\": \"7b981f0a1ff2593167ef078150d0116335a7f329f9403b0abaeca30a42d8876a\",\n  \"referral\": \"iSJLKp1hvn51Zg2Y6FBKjzLs9AAy7fomWN\",\n  \"parent\": \"\",\n  \"nameid\": \"iDXx9FPrAS5k2XCGss6FFmDQQMsts63uUg\"\n }\n}\n```\nYou then wait for the commitment to be mined into a block, then use the information returned above as follows:\n```\n./verus -chain=VRSCTEST registeridentity '{\"txid\":\"377576f8ada1acc2aeb013ddf7a9ad86756cb990d4c5fc70b5a9a0fca43d727e\", \"namereservation\": {\n  \"name\": \"Name\", \"salt\": \"7b981f0a1ff2593167ef078150d0116335a7f329f9403b0abaeca30a42d8876a\", \"referral\":\"referrerfriendlyname@\"}, \"identity\":{\"name\":\"Name\", \"primaryaddresses\":[\"RKo5u8N1sStZu81fU8kaxhoDcFcJmNEwSp\"], \"minimumsignatures\":1, \"privateaddress\":\"zs14y0aa096em2as6n4fauyumqeywz45rfpze38c39fksgtjsac9vmms7fmstcylpaalm7rseu8838\"}}'\n```\nAs long as you have enough funds and you are registering a new identity on the blockchain, you will be able to use your new identity in place of an address as soon as the transaction created by the registration command is mined into the blockchain.\nYou may list the identities in your wallet with the command `listidentities`, and you may display specific identities with the command `getidentity`. If you have the authority, or use identities under your control as revocation or recovery authorities for other identities, you may also revoke and recovery identities as well.", "./raw_text_input_wiki/release_notes.md"], ["## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n\"%APPDATA%\"\\VerusTest\n```**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/5cc801f027d86a59d4d70de91697fa86d96ca5034f957c81c0a2f7895a5a5677/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/0a989ab93e059fc778475498459b9de0484557ee8f44feb2fe418c58d976c38a/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/2a661915722798ba65ca84990707c4f6cea1f390a79f717adc83c8b50861b581/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\nThis release is intended for use in the VRSCTEST network. Mainnet use is still being tested.\n# Verus ID - A Better Blockchain Identity Technology\nIf you\u2019ve been around crypto for even a little while, you\u2019ll start to hear things like \u201cnot your keys, not your coins\u201d, \u201close your keys, lose your coins\u201d. If you lose your keys, no one will ever be able to recover your money.In fact, trading off decentralized, censorship resistant public systems for this risk to your cryptocurrency assets is such a fundamental issue in blockchain systems today that it is considered an acceptable price for having the benefit of full control over your own funds and blockchain assets.Verus ID provides an elegant solution to these previously unsolved, fundamental problems, and also provides quantum-ready friendly identity names and blockchain funds addresses as self-sovereign, revocable, recoverable identities that provide the following advantages over today\u2019s blockchain systems:1. Identity and currency address are one and the same. Your friendly name can be used as both a reference to who you are and an on-chain destination for any funds transfer.\n2. Each ide", "./raw_text_input_wiki/release_notes.md"], ["ntity must have a set of addresses (1 or more) and a minimum number of signatures required from those addresses to spend or sign on behalf of an identity. Each identity also refers to two additional identities that have authority over:\n  - **Primary** - this is the self identity and may modify any part of the identity except its name, its parent, which is derived from the blockchain on which it is defined, and unless it is also one of the two other authorities, it may not modify any data under their control, including the identity of the other authorities once specified.\n  - **Revocation** - this identity may revoke the primary identity, which will also revoke access to all funds and transactions under its control, but it may not spend any funds or sign on behalf of the identity.\n  - **Recovery** - this authority may redefine/recover a revoked identity, but it may not change the revocation authority, nor may it modify an unrevoked identity at all.\n3. Identities are transferable by defining them with primary addresses with private keys, which are under another party\u2019s control. When identities are transferred, the revocation and recovery authorities may or may not be modified as well, as long as the party updating the ID has the authority to do so.\n4. If an identity is transferred from one party to another, all funds in transactions that are under the control of that identity will also transfer to the party to which control is being transferred. In the native wallet, these changes are automatically reflected in the wallet balance and visibility of the balance of an identity using \u201cz_getbalance identity@\u201d.\n5. If later, a new address type or signature algorithm, such as one that is quantum secure s added to the Verus blockchain, all transactions sent to an identity that is updated to be under the control of the new address type will be subject to its spend condition", "./raw_text_input_wiki/release_notes.md"], ["s as well. That means that if you have 1000 transactions sent to your identity name/address, an upgrade to a quantum secure address, when they are available, will retroactively secure all 1000 transactions under the control of that address.", "./raw_text_input_wiki/release_notes.md"], ["", "./raw_text_input_wiki/release_notes.md"], ["## Making a new identity\nArguably, the hardest part of the new Verus identity technology is just making your first identity, especially without a GUI. Once you have your own identity, a lot becomes easier, not the least of which is the ability to send money to a friendly name instead of a base58 blockchain address or hash. For example, once you have your identity, either of the following commands will work as well as just about any other CLI command that takes an address:\n```\n./verus -chain=VRSCTEST z_sendmany bob@ \u2018[{\u201caddress\u201d:\u201dalice@\u201d, \u201camount\u201d:100}]\u2019\n```\nor\n```\n./verus -chain=VRSCTEST sendtoaddress alice@ 100\n```\nMaking a Verus ID requires two steps, steps that are designed to prevent potentially selfish miners from replacing your purchase of an ID from the Verus blockchain with their own purchase of the same name instead. To prevent this name \u201cfront running\u201d, you must first commit to a name that you wish to have in your identity as its friendly name. Friendly names are unique to a blockchain, so if someone already has a specific name you must have, you will need to either be the first to purchase that name from the blockchain or acquire it from the controlling individual or organization.Creating a name commitment registers your commitment, but keeps the name completely secret until you register it and reveal your commitment. When you register a name, you must pay 100 VRSC or 100 VRSCTEST, unless you have a referral from someone who already has an identity. With a referral, the price is 80 VRSC or 80 VRSCTEST. When you register an identity with the CLI wallet, the correct amount of money, 100 VRSC without and 80 VRSC with a referral is automatically spent along with your registration. The funds for a referral are distributed as follows:", "./raw_text_input_wiki/release_notes.md"], ["- 20 VRSC to the referrer\u2019s ID\n- 20 VRSC to the referrer\u2019s referrer\u2019s ID\n- 20 VRSC to the referrer\u2019s referrer\u2019s referrer\u2019s ID\n- 20 VRSC to the miner of the block in which the ID is mined100% of all funds that are not paid to referrers go to miners or stakers of the blockchain.## To create an identity:", "./raw_text_input_wiki/release_notes.md"], ["Create your commitment with the following command:\n```\n./verus -chain=VRSCTEST registernamecommitment Name youraddressorid referrerfriendlyname@\nThat will respond with something like:\n{\n \"txid\": \"377576f8ada1acc2aeb013ddf7a9ad86756cb990d4c5fc70b5a9a0fca43d727e\",\n \"namereservation\": {\n  \"name\": \"Name\",\n  \"salt\": \"7b981f0a1ff2593167ef078150d0116335a7f329f9403b0abaeca30a42d8876a\",\n  \"referral\": \"iSJLKp1hvn51Zg2Y6FBKjzLs9AAy7fomWN\",\n  \"parent\": \"\",\n  \"nameid\": \"iDXx9FPrAS5k2XCGss6FFmDQQMsts63uUg\"\n }\n}\n```\nYou then wait for the commitment to be mined into a block, then use the information returned above as follows:\n```\n./verus -chain=VRSCTEST registeridentity '{\"txid\":\"377576f8ada1acc2aeb013ddf7a9ad86756cb990d4c5fc70b5a9a0fca43d727e\", \"namereservation\": {\n  \"name\": \"Name\", \"salt\": \"7b981f0a1ff2593167ef078150d0116335a7f329f9403b0abaeca30a42d8876a\", \"referral\":\"referrerfriendlyname@\"}, \"identity\":{\"name\":\"Name\", \"primaryaddresses\":[\"RKo5u8N1sStZu81fU8kaxhoDcFcJmNEwSp\"], \"minimumsignatures\":1, \"privateaddress\":\"zs14y0aa096em2as6n4fauyumqeywz45rfpze38c39fksgtjsac9vmms7fmstcylpaalm7rseu8838\"}}'\n```\nAs long as you have enough funds and you are registering a new identity on the blockchain, you will be able to use your new identity in place of an address as soon as the transaction created by the registration command is mined into the blockchain.\nYou may list the identities in your wallet with the command `listidentities`, and you may display specific identities with the command `getidentity`. If you have the authority, or use identities under your control as revocation or recovery authorities for other identities, you may also revoke and recovery identities as well.", "./raw_text_input_wiki/release_notes.md"], ["## Testnet Reset\nThe testnet was deleted and relaunched on this release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO THIS, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n\"%APPDATA%\"\\VerusTest\n```**Launching the testnet:**\n```\n./verusd -chain=VRSCTEST\n```# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/23ae5a14f89a0806f1a6ac143c01a2a46bc3ddbe39136534444824e02b94329c/detection\n**Linux-AMD64:** https://www.virustotal.com/#/file/82bf9054feaf39e750a98542086bf5e5217ce18200bd8ff40e509bbb4db00ac3/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/e18d521cf928025dc935a6b280909cd4aaf06ed77fb60a0af5f43f92ddeb2805/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\n# IMPORTANT SECURITY/PRIVACY UPDATE\n[Version 0.5.9](https://github.com/VerusCoin/VerusCoin/releases/tag/v0.5.9) incorporated a fix for the Zcash protocol issue described in: https://z.cash/support/security/announcements/security-announcement-2019-09-24/Updating to v0.5.9 or more recent version is considered CRITICAL, not mandatory. We recommended that all users upgrade to this version of the Verus CLI or GUI wallet immediately and discontinue use of previous wallets.# Notable Changes\n- Fixed address parsing in getrawtransaction# Testnet Reset\nThe testnet was deleted and relaunched on the 0.5.9 release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO 0.5.9, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest\n```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n\"%APPDATA%\"\\VerusTest\n```", "./raw_text_input_wiki/release_notes.md"], ["# Public Blockchains as a Service (PBaaS) and Verus Reserve cross-chain currency conversion technology -- Technology PreviewThe Verus public testnet enables anyone to make new blockchains and currencies, each with scale and operational independence, zk-SNARK privacy, automatic wallet support, and 100% liquid conversion between VRSCTEST currency at any volume. Sending currencies cross-chain or converting between currencies is as easy as sending a cryptocurrency in less advanced systems today, except that the new Verus protocol enables you to include another blockchain as part of your destination and convert a fractional reserve currency to and from its reserve, according to its exact price along the way. All conversions are fully decentralized, require a standard protocol fee of 0.01%, which goes 100% to miners and stakers of the network, and calculates one price per block for all buys and sells in that block with zero spread.With no costs beyond public blockchain network fees, Verus PBaaS Reserve technology enables any organization of any size to make a fractional reserve currency of its own on an independent, uncluttered blockchain with cross-chain interoperability, and immediately useful for payments and conversion to other currencies from within the Verus wallet. 100% of the 0.01% fees for such conversions go directly to the miners and stakers of the organization's new chain, and those miners and stakers also have the option of merge mining up to 14 other blockchains and coins while mining their own project, improving efficiency, profitability, and shared liquidity for everyone involved. Each blockchain is independent and connected through the Verus Reserve protocol\n.\n**Launching the testnet:**\n```\n./verus -chain=VRSCTEST\n```# Chain definition:", "./raw_text_input_wiki/release_notes.md"], ["- Maximum of 3 eras\n- Minimum 500 blocks worth of notarizations.\n- Minimum of 0.01 VRSCTEST per block of notarization.\nVRSCTEST are needed in wallet to make a chain.**Sample chain definition:**\n```\n./verusd -chain=VRSCTEST definechain '{\"name\":\"RESERVEWITHPREMINE\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\",\"premine\":50000000000000,\"initialcontribution\":5000000000000,\"conversion\":100000000,\"minpreconvert\":45000000000000,\"maxpreconvert\":100000000000000,\"launchfee\":0,\"billingperiod\":14400,\"notarizationreward\":100000000000,\"eras\":[{\"reward\":5000000000,\"decay\":0,\"halving\":0,\"eraend\":0,\"eraoptions\":1}],\"nodes\":[{\"networkaddress\":\"ipaddress:port\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\"},\n{\"networkaddress\":\"2ndipaddress:port\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\"}]}'\n```The example above defines a chain that emits a premine to the indicated address and also converts all contributions up to a maximum amount to the native chain currency at launch at a 100%, 1:1 conversion price. All contributions will enter the currency's reserve deposits, and the more contributions on this chain, the higher the starting reserve ratio will be. If the minimum contributions are not met, the chain will fail to start and all contributions can be spent back to the original contributors.", "./raw_text_input_wiki/release_notes.md"], ["The initial price in reserve at chain launch will start at 1.0, but there will be some fees to be paid in the early blocks that will come in as reserve currency. All fees in reserve that are converted to a fractional reserve currency are effective purchases of the fractional reserve currency, and based on a reversible formula, a currency's price will rise or fall on conversion from or to reserves with a level of volatility that is inversely related to the reserve ratio. A currency with a reserve ratio of 1 will never change its price when converting to or from its reserve. A currency with a reserve of 0.1 or 10% will rise or fall fairly quickly when converted to or from, depending on the amount of conversion relative to the total currency reserves on deposit.**Once a chain is made, anyone running the local VRSCTEST chain can connect to any defined chain with the command:**\n```\n./verusd -chain=SOMECOIN\n```\nOn first connection, a local config file is created, and VRSCTEST will not need to run to connect. However, it will be needed to merge mine.The presence of a correct config file for any chain, which are kept in .verustest/PBAAS/CHAINNAME, which is the home directory for a PBaaS chain, enables the chain to load as an independent chain.## Here are a few examples of cross-chain operations using the command line:**Participating in a blockchain launch and converting from reserve before the chain has started (refund address is optional and will default to paymentaddress):**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"preconvert\": 1}'\n```", "./raw_text_input_wiki/release_notes.md"], ["**Sending unconverted VRSCTEST to an address on the RESERVEWITHPREMINE chain for later conversion to/from the native coin.**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000}'\n```**Sending reserve to another chain and converting a coin from reserve to that chain's native currency at the current market price.**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"tonative\": 1}'\n```**Sending reserve currency to an address on the current PBaaS reserve chain with no cross-chain operation, Reserve currency on a PBaaS chain is equivalent to and convertible between the native VRSCTEST currency, but may also be sent to and used on PBaaS reserve chains. It will arrive as reserve currency.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000}'\n```**Sending native currency to an address on a PBaaS reserve chain and converting it to reserve currency at the same time at the current market price.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"toreserve\": 1}'\n```**Sending reserve currency to an address on a PBaaS reserve chain and converting it to native currency at the same time at the current price. It will arrive as native currency.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"tonative\": 1}'\n```", "./raw_text_input_wiki/release_notes.md"], ["**Getting the current price in reserve and other currency statistics for the most recent block.**\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate\n```\n**... a specific block.**\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate blocknum\n```\n**... a range with a specific period between**.\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate startblocknum,endblocknum,blockstostep\n```\n**Refunding contributions made to a failed PbaaS chain launch**.\n```\nverus -chain=VRSCTEST refundfailedlaunch CHAINNAME\n```\n# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/13dbc2ac7d64f5bf507187b343359c6afc082138bd37d27ae42180b1e5150e49/detection\n**Linux:** https://www.virustotal.com/#/file/d6e6b789457ba789bc98385bc444d16c2d8d56f1fe04beeb6fe2bdfadb36b664/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/c0490311446822c8667a202cad64d90539a45ed84da8a90d7d616df4bbcfe995/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\n# IMPORTANT SECURITY/PRIVACY UPDATE\n[Version 0.5.9](https://github.com/VerusCoin/VerusCoin/releases/tag/v0.5.9) incorporated a fix for the Zcash protocol issue described in: https://z.cash/support/security/announcements/security-announcement-2019-09-24/Updating to v0.5.9 or more recent version is considered CRITICAL, not mandatory. We recommended that all users upgrade to this version of the Verus CLI or GUI wallet immediately and discontinue use of previous wallets.# Notable Changes\n- Avoid re-indexing whenever possible# Testnet Reset\nThe testnet was deleted and relaunched on the 0.5.9 release. **IF YOU HAVE LAST LAUNCHED VRSCTEST FROM A VERSION PRIOR TO 0.5.9, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest```**Windows**\n```\n\"%APPDATA%\"\\Komodo\\VRSCTEST\n\"%APPDATA%\"\\VerusTest\n```# Public Blockchains as a Service (PBaaS) and Verus Reserve cross-chain currency conversion technology -- Technology Preview", "./raw_text_input_wiki/release_notes.md"], ["The Verus public testnet enables anyone to make new blockchains and currencies, each with scale and operational independence, zk-SNARK privacy, automatic wallet support, and 100% liquid conversion between VRSCTEST currency at any volume. Sending currencies cross-chain or converting between currencies is as easy as sending a cryptocurrency in less advanced systems today, except that the new Verus protocol enables you to include another blockchain as part of your destination and convert a fractional reserve currency to and from its reserve, according to its exact price along the way. All conversions are fully decentralized, require a standard protocol fee of 0.01%, which goes 100% to miners and stakers of the network, and calculates one price per block for all buys and sells in that block with zero spread.With no costs beyond public blockchain network fees, Verus PBaaS Reserve technology enables any organization of any size to make a fractional reserve currency of its own on an independent, uncluttered blockchain with cross-chain interoperability, and immediately useful for payments and conversion to other currencies from within the Verus wallet. 100% of the 0.01% fees for such conversions go directly to the miners and stakers of the organization's new chain, and those miners and stakers also have the option of merge mining up to 14 other blockchains and coins while mining their own project, improving efficiency, profitability, and shared liquidity for everyone involved. Each blockchain is independent and connected through the Verus Reserve protocol\n.\n**Launching the testnet:**\n```\n./verus -chain=VRSCTEST\n```# Chain definition:- Maximum of 3 eras\n- Minimum 500 blocks worth of notarizations.\n- Minimum of 0.01 VRSCTEST per block of notarization.\nVRSCTEST are needed in wallet to make a chain.", "./raw_text_input_wiki/release_notes.md"], ["**Sample chain definition:**\n```\n./verusd -chain=VRSCTEST definechain '{\"name\":\"RESERVEWITHPREMINE\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\",\"premine\":50000000000000,\"initialcontribution\":5000000000000,\"conversion\":100000000,\"minpreconvert\":45000000000000,\"maxpreconvert\":100000000000000,\"launchfee\":0,\"billingperiod\":14400,\"notarizationreward\":100000000000,\"eras\":[{\"reward\":5000000000,\"decay\":0,\"halving\":0,\"eraend\":0,\"eraoptions\":1}],\"nodes\":[{\"networkaddress\":\"ipaddress:port\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\"},\n{\"networkaddress\":\"2ndipaddress:port\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\"}]}'\n```The example above defines a chain that emits a premine to the indicated address and also converts all contributions up to a maximum amount to the native chain currency at launch at a 100%, 1:1 conversion price. All contributions will enter the currency's reserve deposits, and the more contributions on this chain, the higher the starting reserve ratio will be. If the minimum contributions are not met, the chain will fail to start and all contributions can be spent back to the original contributors.", "./raw_text_input_wiki/release_notes.md"], ["The initial price in reserve at chain launch will start at 1.0, but there will be some fees to be paid in the early blocks that will come in as reserve currency. All fees in reserve that are converted to a fractional reserve currency are effective purchases of the fractional reserve currency, and based on a reversible formula, a currency's price will rise or fall on conversion from or to reserves with a level of volatility that is inversely related to the reserve ratio. A currency with a reserve ratio of 1 will never change its price when converting to or from its reserve. A currency with a reserve of 0.1 or 10% will rise or fall fairly quickly when converted to or from, depending on the amount of conversion relative to the total currency reserves on deposit.**Once a chain is made, anyone running the local VRSCTEST chain can connect to any defined chain with the command:**\n```\n./verusd -chain=SOMECOIN\n```\nOn first connection, a local config file is created, and VRSCTEST will not need to run to connect. However, it will be needed to merge mine.The presence of a correct config file for any chain, which are kept in .verustest/PBAAS/CHAINNAME, which is the home directory for a PBaaS chain, enables the chain to load as an independent chain.## Here are a few examples of cross-chain operations using the command line:**Participating in a blockchain launch and converting from reserve before the chain has started (refund address is optional and will default to paymentaddress):**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"preconvert\": 1}'\n```", "./raw_text_input_wiki/release_notes.md"], ["**Sending unconverted VRSCTEST to an address on the RESERVEWITHPREMINE chain for later conversion to/from the native coin.**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000}'\n```**Sending reserve to another chain and converting a coin from reserve to that chain's native currency at the current market price.**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"tonative\": 1}'\n```**Sending reserve currency to an address on the current PBaaS reserve chain with no cross-chain operation, Reserve currency on a PBaaS chain is equivalent to and convertible between the native VRSCTEST currency, but may also be sent to and used on PBaaS reserve chains. It will arrive as reserve currency.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000}'\n```**Sending native currency to an address on a PBaaS reserve chain and converting it to reserve currency at the same time at the current market price.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"toreserve\": 1}'\n```**Sending reserve currency to an address on a PBaaS reserve chain and converting it to native currency at the same time at the current price. It will arrive as native currency.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"tonative\": 1}'\n```", "./raw_text_input_wiki/release_notes.md"], ["**Getting the current price in reserve and other currency statistics for the most recent block.**\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate\n```\n**... a specific block.**\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate blocknum\n```\n**... a range with a specific period between**.\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate startblocknum,endblocknum,blockstostep\n```\n**Refunding contributions made to a failed PbaaS chain launch**.\n```\nverus -chain=VRSCTEST refundfailedlaunch CHAINNAME\n```\n# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/341d9d06eed1c8df0057d56f853667e9738e8ec89cd6329a84c81543d38582fe/detection\n**Linux:** https://www.virustotal.com/#/file/eaf521b19ff4c6d8bfc84d25a59ae6ac745003f3927ed3fc71d5a6af883b32c7/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/10e6bb5be7b7aa33bb57beb6105a5477e8f863c8f3d2b487f239ede9864dbbfc/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\n# IMPORTANT SECURITY/PRIVACY UPDATE\nThis update incorporates a fix for the Zcash protocol issue described in: https://z.cash/support/security/announcements/security-announcement-2019-09-24/In addition, this version also includes updates to Sapling functionality, including the Sprout to Sapling migration APIs added to the Zcash protocol up to and including version 2.0.7-3 of Zcash. The issue fixed by this update does not expose any funds to theft or counterfeit, but it does fix a vulnerability that an attacker may exploit to probe for information regarding a specific node's control over private keys. Since the issue resolved does not put funds directly at risk, this update is considered CRITICAL, not mandatory. We recommended that all users upgrade to this version of the Verus CLI or GUI wallet immediately and discontinue use of previous wallets.# Notable Changes\n- Integrated Zcash updates from Sapling release to 2.0.7-3\n- Added Sprout to Sapling upgrade API\n- Including support for PBaaS multi-chain test network with permissionless blockchain launches, reserve currency conversion protocols, merge mining, and easy cross-chain transactions.", "./raw_text_input_wiki/release_notes.md"], ["# Testnet Reset\nThe testnet will be deleted and relaunched for this release. **IF YOU HAVE PREVIOUSLY LAUNCHED VRSCTEST, PLEASE DELETE THE FOLLOWING DIRECTORIES BEFORE RUNNING THIS NEW UPDATE:**\n**Linux:**\n```\n~/.komodo/VRSCTEST\n~/.verustest\n```**MacOS**\n```\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069/\u2068Komodo/VRSCTEST\n \u2068Users\u2069/\u2068{YourUserName}/\u2068Library\u2069/\u2068Application Support\u2069\u2068/VerusTest```**Windows**\n```\n%APPDATA%\\Komodo\\VRSCTEST\n%APPDATA%\\VerusTest\n```# Public Blockchains as a Service (PBaaS) and Verus Reserve cross-chain currency conversion technology -- Technology PreviewThe Verus public testnet enables anyone to make new blockchains and currencies, each with scale and operational independence, zk-SNARK privacy, automatic wallet support, and 100% liquid conversion between VRSCTEST currency at any volume. Sending currencies cross-chain or converting between currencies is as easy as sending a cryptocurrency in less advanced systems today, except that the new Verus protocol enables you to include another blockchain as part of your destination and convert a fractional reserve currency to and from its reserve, according to its exact price along the way. All conversions are fully decentralized, require a standard protocol fee of 0.01%, which goes 100% to miners and stakers of the network, and calculates one price per block for all buys and sells in that block with zero spread.", "./raw_text_input_wiki/release_notes.md"], ["With no costs beyond public blockchain network fees, Verus PBaaS Reserve technology enables any organization of any size to make a fractional reserve currency of its own on an independent, uncluttered blockchain with cross-chain interoperability, and immediately useful for payments and conversion to other currencies from within the Verus wallet. 100% of the 0.01% fees for such conversions go directly to the miners and stakers of the organization's new chain, and those miners and stakers also have the option of merge mining up to 14 other blockchains and coins while mining their own project, improving efficiency, profitability, and shared liquidity for everyone involved. Each blockchain is independent and connected through the Verus Reserve protocol\n.\n**Launching the testnet:**\n```\n./verus -chain=VRSCTEST\n```# Chain definition:- Maximum of 3 eras\n- Minimum 500 blocks worth of notarizations.\n- Minimum of 0.01 VRSCTEST per block of notarization.\nVRSCTEST are needed in wallet to make a chain.**Sample chain definition:**\n```\n./verusd -chain=VRSCTEST definechain '{\"name\":\"RESERVEWITHPREMINE\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\",\"premine\":50000000000000,\"initialcontribution\":5000000000000,\"conversion\":100000000,\"minpreconvert\":45000000000000,\"maxpreconvert\":100000000000000,\"launchfee\":0,\"billingperiod\":14400,\"notarizationreward\":100000000000,\"eras\":[{\"reward\":5000000000,\"decay\":0,\"halving\":0,\"eraend\":0,\"eraoptions\":1}],\"nodes\":[{\"networkaddress\":\"ipaddress:port\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\"},\n{\"networkaddress\":\"2ndipaddress:port\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\"}]}'\n```", "./raw_text_input_wiki/release_notes.md"], ["The example above defines a chain that emits a premine to the indicated address and also converts all contributions up to a maximum amount to the native chain currency at launch at a 100%, 1:1 conversion price. All contributions will enter the currency's reserve deposits, and the more contributions on this chain, the higher the starting reserve ratio will be. If the minimum contributions are not met, the chain will fail to start and all contributions can be spent back to the original contributors.The initial price in reserve at chain launch will start at 1.0, but there will be some fees to be paid in the early blocks that will come in as reserve currency. All fees in reserve that are converted to a fractional reserve currency are effective purchases of the fractional reserve currency, and based on a reversible formula, a currency's price will rise or fall on conversion from or to reserves with a level of volatility that is inversely related to the reserve ratio. A currency with a reserve ratio of 1 will never change its price when converting to or from its reserve. A currency with a reserve of 0.1 or 10% will rise or fall fairly quickly when converted to or from, depending on the amount of conversion relative to the total currency reserves on deposit.**Once a chain is made, anyone running the local VRSCTEST chain can connect to any defined chain with the command:**\n```\n./verusd -chain=SOMECOIN\n```\nOn first connection, a local config file is created, and VRSCTEST will not need to run to connect. However, it will be needed to merge mine.The presence of a correct config file for any chain, which are kept in .verustest/PBAAS/CHAINNAME, which is the home directory for a PBaaS chain, enables the chain to load as an independent chain.## Here are a few examples of cross-chain operations using the command line:", "./raw_text_input_wiki/release_notes.md"], ["**Participating in a blockchain launch and converting from reserve before the chain has started (refund address is optional and will default to paymentaddress):**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"preconvert\": 1}'\n```**Sending unconverted VRSCTEST to an address on the RESERVEWITHPREMINE chain for later conversion to/from the native coin.**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000}'\n```**Sending reserve to another chain and converting a coin from reserve to that chain's native currency at the current market price.**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"tonative\": 1}'\n```**Sending reserve currency to an address on the current PBaaS reserve chain with no cross-chain operation, Reserve currency on a PBaaS chain is equivalent to and convertible between the native VRSCTEST currency, but may also be sent to and used on PBaaS reserve chains. It will arrive as reserve currency.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000}'\n```**Sending native currency to an address on a PBaaS reserve chain and converting it to reserve currency at the same time at the current market price.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"toreserve\": 1}'\n```", "./raw_text_input_wiki/release_notes.md"], ["**Sending reserve currency to an address on a PBaaS reserve chain and converting it to native currency at the same time at the current price. It will arrive as native currency.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"tonative\": 1}'\n```**Getting the current price in reserve and other currency statistics for the most recent block.**\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate\n```\n**... a specific block.**\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate blocknum\n```\n**... a range with a specific period between**.\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate startblocknum,endblocknum,blockstostep\n```\n**Refunding contributions made to a failed PbaaS chain launch**.\n```\nverus -chain=VRSCTEST refundfailedlaunch CHAINNAME\n```\n# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/341d9d06eed1c8df0057d56f853667e9738e8ec89cd6329a84c81543d38582fe/detection\n**Linux:** https://www.virustotal.com/#/file/eaf521b19ff4c6d8bfc84d25a59ae6ac745003f3927ed3fc71d5a6af883b32c7/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/10e6bb5be7b7aa33bb57beb6105a5477e8f863c8f3d2b487f239ede9864dbbfc/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\n# Notable Changes\n- Properly distribute initial contributions on non-reserve chains\n- Show chain name on failure to notarize\n- Continue attempting to notarize after running out of notary rewards\n- Fix getdefinedchains currency state# Public Blockchains as a Service (PBaaS) and Verus Reserve cross-chain currency conversion technology -- Technology Preview", "./raw_text_input_wiki/release_notes.md"], ["The Verus public testnet enables anyone to make new blockchains and currencies, each with scale and operational independence, zk-SNARK privacy, automatic wallet support, and 100% liquid conversion between VRSCTEST currency at any volume. Sending currencies cross-chain or converting between currencies is as easy as sending a cryptocurrency in less advanced systems today, except that the new Verus protocol enables you to include another blockchain as part of your destination and convert a fractional reserve currency to and from its reserve, according to its exact price along the way. All conversions are fully decentralized, require a standard protocol fee of 0.01%, which goes 100% to miners and stakers of the network, and calculates one price per block for all buys and sells in that block with zero spread.With no costs beyond public blockchain network fees, Verus PBaaS Reserve technology enables any organization of any size to make a fractional reserve currency of its own on an independent, uncluttered blockchain with cross-chain interoperability, and immediately useful for payments and conversion to other currencies from within the Verus wallet. 100% of the 0.01% fees for such conversions go directly to the miners and stakers of the organization's new chain, and those miners and stakers also have the option of merge mining up to 14 other blockchains and coins while mining their own project, improving efficiency, profitability, and shared liquidity for everyone involved. Each blockchain is independent and connected through the Verus Reserve protocol\n.\n**Launching the testnet:**\n```\n./verus -chain=VRSCTEST\n```# Chain definition:- Maximum of 3 eras\n- Minimum 500 blocks worth of notarizations.\n- Minimum of 0.01 VRSCTEST per block of notarization.\nVRSCTEST are needed in wallet to make a chain.", "./raw_text_input_wiki/release_notes.md"], ["**Sample chain definition:**\n```\n./verusd -chain=VRSCTEST definechain '{\"name\":\"RESERVEWITHPREMINE\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\",\"premine\":50000000000000,\"initialcontribution\":5000000000000,\"conversion\":100000000,\"minpreconvert\":45000000000000,\"maxpreconvert\":100000000000000,\"launchfee\":0,\"billingperiod\":14400,\"notarizationreward\":100000000000,\"eras\":[{\"reward\":5000000000,\"decay\":0,\"halving\":0,\"eraend\":0,\"eraoptions\":1}],\"nodes\":[{\"networkaddress\":\"ipaddress:port\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\"},\n{\"networkaddress\":\"2ndipaddress:port\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\"}]}'\n```The example above defines a chain that emits a premine to the indicated address and also converts all contributions up to a maximum amount to the native chain currency at launch at a 100%, 1:1 conversion price. All contributions will enter the currency's reserve deposits, and the more contributions on this chain, the higher the starting reserve ratio will be. If the minimum contributions are not met, the chain will fail to start and all contributions can be spent back to the original contributors.", "./raw_text_input_wiki/release_notes.md"], ["The initial price in reserve at chain launch will start at 1.0, but there will be some fees to be paid in the early blocks that will come in as reserve currency. All fees in reserve that are converted to a fractional reserve currency are effective purchases of the fractional reserve currency, and based on a reversible formula, a currency's price will rise or fall on conversion from or to reserves with a level of volatility that is inversely related to the reserve ratio. A currency with a reserve ratio of 1 will never change its price when converting to or from its reserve. A currency with a reserve of 0.1 or 10% will rise or fall fairly quickly when converted to or from, depending on the amount of conversion relative to the total currency reserves on deposit.**Once a chain is made, anyone running the local VRSCTEST chain can connect to any defined chain with the command:**\n```\n./verusd -chain=SOMECOIN\n```\nOn first connection, a local config file is created, and VRSCTEST will not need to run to connect. However, it will be needed to merge mine.The presence of a correct config file for any chain, which are kept in .verustest/PBAAS/CHAINNAME, which is the home directory for a PBaaS chain, enables the chain to load as an independent chain.## Here are a few examples of cross-chain operations using the command line:**Participating in a blockchain launch and converting from reserve before the chain has started (refund address is optional and will default to paymentaddress):**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"preconvert\": 1}'\n```", "./raw_text_input_wiki/release_notes.md"], ["**Sending unconverted VRSCTEST to an address on the RESERVEWITHPREMINE chain for later conversion to/from the native coin.**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000}'\n```**Sending reserve to another chain and converting a coin from reserve to that chain's native currency at the current market price.**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"tonative\": 1}'\n```**Sending reserve currency to an address on the current PBaaS reserve chain with no cross-chain operation, Reserve currency on a PBaaS chain is equivalent to and convertible between the native VRSCTEST currency, but may also be sent to and used on PBaaS reserve chains. It will arrive as reserve currency.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000}'\n```**Sending native currency to an address on a PBaaS reserve chain and converting it to reserve currency at the same time at the current market price.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"toreserve\": 1}'\n```**Sending reserve currency to an address on a PBaaS reserve chain and converting it to native currency at the same time at the current price. It will arrive as native currency.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"tonative\": 1}'\n```", "./raw_text_input_wiki/release_notes.md"], ["**Getting the current price in reserve and other currency statistics for the most recent block.**\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate\n```\n**... a specific block.**\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate blocknum\n```\n**... a range with a specific period between**.\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate startblocknum,endblocknum,blockstostep\n```\n**Refunding contributions made to a failed PbaaS chain launch**.\n```\nverus -chain=VRSCTEST refundfailedlaunch CHAINNAME\n```\n# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nThis release includes the ability to connect to and use the Verus Testnet with easy multi-chain network, cross-chain send, and in-wallet currency conversion capabilities that go beyond any blockchain system or cryptocurrency available today. Don't take our word for it. Just give it a try when you're not using the other mainstream wallet featuresTry out cross-chain sends, create and exchange your own reserve currencies and merge mine up to 15 chains at once on the VerusCoin testnet!# Notable Changes\n- Added Testnet support for Public Blockchains as a Service (PBaaS) and Verus Reserve cross-chain currency conversion technology# Public Blockchains as a Service (PBaaS) and Verus Reserve cross-chain currency conversion technology -- Technology Preview", "./raw_text_input_wiki/release_notes.md"], ["The Verus public testnet enables anyone to make new blockchains and currencies, each with scale and operational independence, zk-SNARK privacy, automatic wallet support, and 100% liquid conversion between VRSCTEST currency at any volume. Sending currencies cross-chain or converting between currencies is as easy as sending a cryptocurrency in less advanced systems today, except that the new Verus protocol enables you to include another blockchain as part of your destination and convert a fractional reserve currency to and from its reserve, according to its exact price along the way. All conversions are fully decentralized, require a standard protocol fee of 0.01%, which goes 100% to miners and stakers of the network, and calculates one price per block for all buys and sells in that block with zero spread.With no costs beyond public blockchain network fees, Verus PBaaS Reserve technology enables any organization of any size to make a fractional reserve currency of its own on an independent, uncluttered blockchain with cross-chain interoperability, and immediately useful for payments and conversion to other currencies from within the Verus wallet. 100% of the 0.01% fees for such conversions go directly to the miners and stakers of the organization's new chain, and those miners and stakers also have the option of merge mining up to 14 other blockchains and coins while mining their own project, improving efficiency, profitability, and shared liquidity for everyone involved. Each blockchain is independent and connected through the Verus Reserve protocol\n.\n**Launching the testnet:**\n```\n./verus -chain=VRSCTEST\n```# Chain definition:- Maximum of 3 eras\n- Minimum 500 blocks worth of notarizations.\n- Minimum of 0.01 VRSCTEST per block of notarization.\nVRSCTEST are needed in wallet to make a chain.", "./raw_text_input_wiki/release_notes.md"], ["**Sample chain definition:**\n```\n./verusd -chain=VRSCTEST definechain '{\"name\":\"RESERVEWITHPREMINE\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\",\"premine\":50000000000000,\"initialcontribution\":5000000000000,\"conversion\":100000000,\"minpreconvert\":45000000000000,\"maxpreconvert\":100000000000000,\"launchfee\":0,\"billingperiod\":14400,\"notarizationreward\":100000000000,\"eras\":[{\"reward\":5000000000,\"decay\":0,\"halving\":0,\"eraend\":0,\"eraoptions\":1}],\"nodes\":[{\"networkaddress\":\"ipaddress:port\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\"},\n{\"networkaddress\":\"2ndipaddress:port\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\"}]}'\n```The example above defines a chain that emits a premine to the indicated address and also converts all contributions up to a maximum amount to the native chain currency at launch at a 100%, 1:1 conversion price. All contributions will enter the currency's reserve deposits, and the more contributions on this chain, the higher the starting reserve ratio will be. If the minimum contributions are not met, the chain will fail to start and all contributions can be spent back to the original contributors.", "./raw_text_input_wiki/release_notes.md"], ["The initial price in reserve at chain launch will start at 1.0, but there will be some fees to be paid in the early blocks that will come in as reserve currency. All fees in reserve that are converted to a fractional reserve currency are effective purchases of the fractional reserve currency, and based on a reversible formula, a currency's price will rise or fall on conversion from or to reserves with a level of volatility that is inversely related to the reserve ratio. A currency with a reserve ratio of 1 will never change its price when converting to or from its reserve. A currency with a reserve of 0.1 or 10% will rise or fall fairly quickly when converted to or from, depending on the amount of conversion relative to the total currency reserves on deposit.**Once a chain is made, anyone running the local VRSCTEST chain can connect to any defined chain with the command:**\n```\n./verusd -chain=SOMECOIN\n```\nOn first connection, a local config file is created, and VRSCTEST will not need to run to connect. However, it will be needed to merge mine.The presence of a correct config file for any chain, which are kept in .verustest/PBAAS/CHAINNAME, which is the home directory for a PBaaS chain, enables the chain to load as an independent chain.## Here are a few examples of cross-chain operations using the command line:**Participating in a blockchain launch and converting from reserve before the chain has started (refund address is optional and will default to paymentaddress):**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"preconvert\": 1}'\n```", "./raw_text_input_wiki/release_notes.md"], ["**Sending unconverted VRSCTEST to an address on the RESERVEWITHPREMINE chain for later conversion to/from the native coin.**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000}'\n```**Sending reserve to another chain and converting a coin from reserve to that chain's native currency at the current market price.**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"tonative\": 1}'\n```**Sending reserve currency to an address on the current PBaaS reserve chain with no cross-chain operation, Reserve currency on a PBaaS chain is equivalent to and convertible between the native VRSCTEST currency, but may also be sent to and used on PBaaS reserve chains. It will arrive as reserve currency.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000}'\n```**Sending native currency to an address on a PBaaS reserve chain and converting it to reserve currency at the same time at the current market price.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"toreserve\": 1}'\n```**Sending reserve currency to an address on a PBaaS reserve chain and converting it to native currency at the same time at the current price. It will arrive as native currency.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"tonative\": 1}'\n```", "./raw_text_input_wiki/release_notes.md"], ["**Getting the current price in reserve and other currency statistics for the most recent block.**\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate\n```\n**... a specific block.**\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate blocknum\n```\n**... a range with a specific period between**.\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate startblocknum,endblocknum,blockstostep\n```\n**Refunding contributions made to a failed PbaaS chain launch**.\n```\nverus -chain=VRSCTEST refundfailedlaunch CHAINNAME\n```\n# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/462a2014bdd120eb155b964fe1f22910671ade38e26ff4372e64341e9613dff5/detection\n**Linux:** https://www.virustotal.com/#/file/6b1b3b848ab12c471d0469db37e5f8059aee565550d9e1c38fd97a55d493f184/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/878ee7b0ed79d20f03994cf6322345be4a9f857aa4326ceb564d4ec51edd53ef/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\n***Please note that this is a test release intended to use for testing and development with public blockchains as a service (PBaaS). THIS HAS NOT BEEN TESTED FOR USE ON MAINNET.***The Verus public testnet enables anyone to make new blockchains and currencies, each with scale and operational independence, zk-SNARK privacy, automatic wallet support, and 100% liquid conversion between VRSCTEST currency at any volume. Sending currencies cross-chain or converting between currencies is as easy as sending a cryptocurrency in less advanced systems today, except that the new Verus protocol enables you to include another blockchain as part of your destination and convert a fractional reserve currency to and from its reserve, according to its exact price along the way. All conversions are fully decentralized, require a standard protocol fee of 0.01%, which goes 100% to miners and stakers of the network, and calculates one price per block for all buys and sells in that block with zero spread.", "./raw_text_input_wiki/release_notes.md"], ["Verus PBaaS Reserve technology enables any organization of any size to make a currency with its own blockchain, support it in world class wallets, develop its own applications, and use it for payments worldwide that can be converted to the reserve currency without ever having to leave the blockchain network. Each blockchain is independent and connected through the Verus Reserve protocol.\n# Notable Changes\n- Minor fix to export transactions# Chain definition:- Maximum of 3 eras\n- Minimum 500 blocks worth of notarizations.\n- Minimum of 0.01 VRSCTEST per block of notarization.\nVRSCTEST are needed in wallet to make a chain.**Sample chain definition:**\n```\n./verusd -chain=VRSCTEST definechain '{\"name\":\"RESERVEWITHPREMINE\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\",\"premine\":50000000000000,\"initialcontribution\":5000000000000,\"conversion\":100000000,\"minpreconvert\":45000000000000,\"maxpreconvert\":100000000000000,\"launchfee\":0,\"billingperiod\":14400,\"notarizationreward\":100000000000,\"eras\":[{\"reward\":5000000000,\"decay\":0,\"halving\":0,\"eraend\":0,\"eraoptions\":1}],\"nodes\":[{\"networkaddress\":\"ipaddress:port\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\"},\n{\"networkaddress\":\"2ndipaddress:port\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\"}]}'\n```The example above defines a chain that emits a premine to the indicated address and also converts all contributions up to a maximum amount to the native chain currency at launch at a 100%, 1:1 conversion price. All contributions will enter the currency's reserve deposits, and the more contributions on this chain, the higher the starting reserve ratio will be. If the minimum contributions are not met, the chain will fail to start and all contributions can be spent back to the original contributors.", "./raw_text_input_wiki/release_notes.md"], ["The initial price in reserve at chain launch will start at 1.0, but there will be some fees to be paid in the early blocks that will come in as reserve currency. All fees in reserve that are converted to a fractional reserve currency are effective purchases of the fractional reserve currency, and based on a reversible formula, a currency's price will rise or fall on conversion from or to reserves with a level of volatility that is inversely related to the reserve ratio. A currency with a reserve ratio of 1 will never change its price when converting to or from its reserve. A currency with a reserve of 0.1 or 10% will rise or fall fairly quickly when converted to or from, depending on the amount of conversion relative to the total currency reserves on deposit.**Once a chain is made, anyone running the local VRSCTEST chain can connect to any defined chain with the command:**\n```\n./verusd -chain=SOMECOIN\n```\nOn first connection, a local config file is created, and VRSCTEST will not need to run to connect. However, it will be needed to merge mine.The presence of a correct config file for any chain, which are kept in .verustest/PBAAS/CHAINNAME, which is the home directory for a PBaaS chain, enables the chain to load as an independent chain.## Here are a few examples of cross-chain operations using the command line:**Participating in a blockchain launch and converting from reserve before the chain has started (refund address is optional and will default to paymentaddress):**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"preconvert\": 1}'\n```", "./raw_text_input_wiki/release_notes.md"], ["**Sending unconverted VRSCTEST to an address on the RESERVEWITHPREMINE chain for later conversion to/from the native coin.**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000}'\n```**Sending reserve to another chain and converting a coin from reserve to that chain's native currency at the current market price.**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"tonative\": 1}'\n```**Sending reserve currency to an address on the current PBaaS reserve chain with no cross-chain operation, Reserve currency on a PBaaS chain is equivalent to and convertible between the native VRSCTEST currency, but may also be sent to and used on PBaaS reserve chains. It will arrive as reserve currency.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000}'\n```**Sending native currency to an address on a PBaaS reserve chain and converting it to reserve currency at the same time at the current market price.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"toreserve\": 1}'\n```**Sending reserve currency to an address on a PBaaS reserve chain and converting it to native currency at the same time at the current price. It will arrive as native currency.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"tonative\": 1}'\n```", "./raw_text_input_wiki/release_notes.md"], ["**Getting the current price in reserve and other currency statistics for the most recent block.**\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate\n```\n**... a specific block.**\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate blocknum\n```\n**... a range with a specific period between**.\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate startblocknum,endblocknum,blockstostep\n```\n**Refunding contributions made to a failed PbaaS chain launch**.\n```\nverus -chain=VRSCTEST refundfailedlaunch CHAINNAME\n```\n# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n***Please note that this is a test release intended to use for testing and development with public blockchains as a service (PBaaS). THIS HAS NOT BEEN TESTED FOR USE ON MAINNET.***", "./raw_text_input_wiki/release_notes.md"], ["The Verus public testnet enables anyone to make new blockchains and currencies, each with scale and operational independence, zk-SNARK privacy, automatic wallet support, and 100% liquid conversion between VRSCTEST currency at any volume. Sending currencies cross-chain or converting between currencies is as easy as sending a cryptocurrency in less advanced systems today, except that the new Verus protocol enables you to include another blockchain as part of your destination and convert a fractional reserve currency to and from its reserve, according to its exact price along the way. All conversions are fully decentralized, require a standard protocol fee of 0.01%, which goes 100% to miners and stakers of the network, and calculates one price per block for all buys and sells in that block with zero spread.Verus PBaaS Reserve technology enables any organization of any size to make a currency with its own blockchain, support it in world class wallets, develop its own applications, and use it for payments worldwide that can be converted to the reserve currency without ever having to leave the blockchain network. Each blockchain is independent and connected through the Verus Reserve protocol.\n# Notable Changes\n- Fixed daemon output export error message on VRSCTEST\n- Fixed fees bouncing back from a reserve send to Verus and allow exports to continue if done incorrectly\n- Include currency state in chain definitions for both getchaindefinition and getdefinedchains# Chain definition:- Maximum of 3 eras\n- Minimum 500 blocks worth of notarizations.\n- Minimum of 0.01 VRSCTEST per block of notarization.\nVRSCTEST are needed in wallet to make a chain.", "./raw_text_input_wiki/release_notes.md"], ["**Sample chain definition:**\n```\n./verusd -chain=VRSCTEST definechain '{\"name\":\"RESERVEWITHPREMINE\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\",\"premine\":50000000000000,\"initialcontribution\":5000000000000,\"conversion\":100000000,\"minpreconvert\":45000000000000,\"maxpreconvert\":100000000000000,\"launchfee\":0,\"billingperiod\":14400,\"notarizationreward\":100000000000,\"eras\":[{\"reward\":5000000000,\"decay\":0,\"halving\":0,\"eraend\":0,\"eraoptions\":1}],\"nodes\":[{\"networkaddress\":\"ipaddress:port\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\"},\n{\"networkaddress\":\"2ndipaddress:port\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\"}]}'\n```The example above defines a chain that emits a premine to the indicated address and also converts all contributions up to a maximum amount to the native chain currency at launch at a 100%, 1:1 conversion price. All contributions will enter the currency's reserve deposits, and the more contributions on this chain, the higher the starting reserve ratio will be. If the minimum contributions are not met, the chain will fail to start and all contributions can be spent back to the original contributors.", "./raw_text_input_wiki/release_notes.md"], ["The initial price in reserve at chain launch will start at 1.0, but there will be some fees to be paid in the early blocks that will come in as reserve currency. All fees in reserve that are converted to a fractional reserve currency are effective purchases of the fractional reserve currency, and based on a reversible formula, a currency's price will rise or fall on conversion from or to reserves with a level of volatility that is inversely related to the reserve ratio. A currency with a reserve ratio of 1 will never change its price when converting to or from its reserve. A currency with a reserve of 0.1 or 10% will rise or fall fairly quickly when converted to or from, depending on the amount of conversion relative to the total currency reserves on deposit.**Once a chain is made, anyone running the local VRSCTEST chain can connect to any defined chain with the command:**\n```\n./verusd -chain=SOMECOIN\n```\nOn first connection, a local config file is created, and VRSCTEST will not need to run to connect. However, it will be needed to merge mine.The presence of a correct config file for any chain, which are kept in .verustest/PBAAS/CHAINNAME, which is the home directory for a PBaaS chain, enables the chain to load as an independent chain.## Here are a few examples of cross-chain operations using the command line:**Participating in a blockchain launch and converting from reserve before the chain has started (refund address is optional and will default to paymentaddress):**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"preconvert\": 1}'\n```", "./raw_text_input_wiki/release_notes.md"], ["**Sending unconverted VRSCTEST to an address on the RESERVEWITHPREMINE chain for later conversion to/from the native coin.**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000}'\n```**Sending reserve to another chain and converting a coin from reserve to that chain's native currency at the current market price.**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"tonative\": 1}'\n```**Sending reserve currency to an address on the current PBaaS reserve chain with no cross-chain operation, Reserve currency on a PBaaS chain is equivalent to and convertible between the native VRSCTEST currency, but may also be sent to and used on PBaaS reserve chains. It will arrive as reserve currency.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000}'\n```**Sending native currency to an address on a PBaaS reserve chain and converting it to reserve currency at the same time at the current market price.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"toreserve\": 1}'\n```**Sending reserve currency to an address on a PBaaS reserve chain and converting it to native currency at the same time at the current price. It will arrive as native currency.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"tonative\": 1}'\n```", "./raw_text_input_wiki/release_notes.md"], ["**Getting the current price in reserve and other currency statistics for the most recent block.**\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate\n```\n**... a specific block.**\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate blocknum\n```\n**... a range with a specific period between**.\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate startblocknum,endblocknum,blockstostep\n```\n**Refunding contributions made to a failed PbaaS chain launch**.\n```\nverus -chain=VRSCTEST refundfailedlaunch CHAINNAME\n```\n# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n***Please note that this is a test release intended to use for testing and development with public blockchains as a service (PBaaS). THIS HAS NOT BEEN TESTED FOR USE ON MAINNET.***", "./raw_text_input_wiki/release_notes.md"], ["The Verus public testnet enables anyone to make new blockchains and currencies, each with scale and operational independence, zk-SNARK privacy, automatic wallet support, and 100% liquid conversion between VRSCTEST currency at any volume. Sending currencies cross-chain or converting between currencies is as easy as sending a cryptocurrency in less advanced systems today, except that the new Verus protocol enables you to include another blockchain as part of your destination and convert a fractional reserve currency to and from its reserve, according to its exact price along the way. All conversions are fully decentralized, require a standard protocol fee of 0.01%, which goes 100% to miners and stakers of the network, and calculates one price per block for all buys and sells in that block with zero spread.Verus PBaaS Reserve technology enables any organization of any size to make a currency with its own blockchain, support it in world class wallets, develop its own applications, and use it for payments worldwide that can be converted to the reserve currency without ever having to leave the blockchain network. Each blockchain is independent and connected through the Verus Reserve protocol.\n# Notable Changes\n- Added command `refundfailedlaunch` to refund all contributions made to PBaaS chain to VRSCTEST after a failed chain start block.- Fixed wallet scan issue that could prevent a wallet from recognizing reserve coins sent to it on a PBaaS chain. If you have such a wallet, a rescan with the new update should make your coins appear.# Chain definition:- Maximum of 3 eras\n- Minimum 500 blocks worth of notarizations.\n- Minimum of 0.01 VRSCTEST per block of notarization.\nVRSCTEST are needed in wallet to make a chain.", "./raw_text_input_wiki/release_notes.md"], ["**Sample chain definition:**\n```\n./verusd -chain=VRSCTEST definechain '{\"name\":\"RESERVEWITHPREMINE\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\",\"premine\":50000000000000,\"initialcontribution\":5000000000000,\"conversion\":100000000,\"minpreconvert\":45000000000000,\"maxpreconvert\":100000000000000,\"launchfee\":0,\"billingperiod\":14400,\"notarizationreward\":100000000000,\"eras\":[{\"reward\":5000000000,\"decay\":0,\"halving\":0,\"eraend\":0,\"eraoptions\":1}],\"nodes\":[{\"networkaddress\":\"ipaddress:port\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\"},\n{\"networkaddress\":\"2ndipaddress:port\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\"}]}'\n```The example above defines a chain that emits a premine to the indicated address and also converts all contributions up to a maximum amount to the native chain currency at launch at a 100%, 1:1 conversion price. All contributions will enter the currency's reserve deposits, and the more contributions on this chain, the higher the starting reserve ratio will be. If the minimum contributions are not met, the chain will fail to start and all contributions can be spent back to the original contributors.", "./raw_text_input_wiki/release_notes.md"], ["The initial price in reserve at chain launch will start at 1.0, but there will be some fees to be paid in the early blocks that will come in as reserve currency. All fees in reserve that are converted to a fractional reserve currency are effective purchases of the fractional reserve currency, and based on a reversible formula, a currency's price will rise or fall on conversion from or to reserves with a level of volatility that is inversely related to the reserve ratio. A currency with a reserve ratio of 1 will never change its price when converting to or from its reserve. A currency with a reserve of 0.1 or 10% will rise or fall fairly quickly when converted to or from, depending on the amount of conversion relative to the total currency reserves on deposit.**Once a chain is made, anyone running the local VRSCTEST chain can connect to any defined chain with the command:**\n```\n./verusd -chain=SOMECOIN\n```\nOn first connection, a local config file is created, and VRSCTEST will not need to run to connect. However, it will be needed to merge mine.The presence of a correct config file for any chain, which are kept in .verustest/PBAAS/CHAINNAME, which is the home directory for a PBaaS chain, enables the chain to load as an independent chain.## Here are a few examples of cross-chain operations using the command line:**Participating in a blockchain launch and converting from reserve before the chain has started (refund address is optional and will default to paymentaddress):**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"preconvert\": 1}'\n```", "./raw_text_input_wiki/release_notes.md"], ["**Sending unconverted VRSCTEST to an address on the RESERVEWITHPREMINE chain for later conversion to/from the native coin.**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000}'\n```**Sending reserve to another chain and converting a coin from reserve to that chain's native currency at the current market price.**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"tonative\": 1}'\n```**Sending reserve currency to an address on the current PBaaS reserve chain with no cross-chain operation, Reserve currency on a PBaaS chain is equivalent to and convertible between the native VRSCTEST currency, but may also be sent to and used on PBaaS reserve chains. It will arrive as reserve currency.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000}'\n```**Sending native currency to an address on a PBaaS reserve chain and converting it to reserve currency at the same time at the current market price.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"toreserve\": 1}'\n```**Sending reserve currency to an address on a PBaaS reserve chain and converting it to native currency at the same time at the current price. It will arrive as native currency.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"tonative\": 1}'\n```", "./raw_text_input_wiki/release_notes.md"], ["**Getting the current price in reserve and other currency statistics for the most recent block.**\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate\n```\n**... a specific block.**\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate blocknum\n```\n**... a range with a specific period between**.\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate startblocknum,endblocknum,blockstostep\n```\n**Refunding contributions made to a failed PbaaS chain launch**.\n```\nverus -chain=VRSCTEST refundfailedlaunch CHAINNAME\n```\n# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nPlease note that this is a test release intended to use for testing and development with public blockchains as a service (PBaaS). THIS HAS NOT BEEN TESTED FOR USE ON MAINNET.", "./raw_text_input_wiki/release_notes.md"], ["Verus public testnet enables anyone to make new blockchains and currencies, each with scale and operational independence, zk-SNARK privacy, automatic wallet support, and 100% liquid conversion between VRSCTEST currency at any volume. Sending currencies cross-chain or converting between currencies is as easy as sending a cryptocurrency in less advanced systems today, except that the new Verus protocol enables you to include another blockchain as part of your destination and convert a fractional reserve currency to and from its reserve, according to its exact price along the way. All conversions are fully decentralized, require a standard protocol fee of 0.01%, which goes 100% to miners and stakers of the network, and calculates one price per block for all buys and sells in that block with zero spread.Verus PBaaS Reserve technology enables any organization of any size to make a currency with its own blockchain, support it in world class wallets, develop its own applications, and use it for payments worldwide that can be converted to the reserve currency without ever having to leave the blockchain network. Each blockchain is independent and connected through the Verus Reserve protocol.", "./raw_text_input_wiki/release_notes.md"], ["**Sample chain definition**:\n```\n./verusd -chain=VRSCTEST definechain '{\"name\":\"RESERVEWITHPREMINE\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\",\"premine\":50000000000000,\"initialcontribution\":5000000000000,\"conversion\":100000000,\"minpreconvert\":45000000000000,\"maxpreconvert\":100000000000000,\"launchfee\":0,\"billingperiod\":14400,\"notarizationreward\":100000000000,\"eras\":[{\"reward\":5000000000,\"decay\":0,\"halving\":0,\"eraend\":0,\"eraoptions\":1}],\"nodes\":[{\"networkaddress\":\"ipaddress:port\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\"},\n{\"networkaddress\":\"2ndipaddress:port\",\"paymentaddress\":\"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\"}]}'\n```\nMaximum of 3 eras\nMinimum 500 blocks worth of notarizations.\nMinimum of 0.01 VRSCTEST per block of notarization.\nVRSCTEST are needed in wallet to make a chain.The example above defines a chain that emits a premine to the indicated address and also converts all contributions up to a maximum amount to the native chain currency at launch at a 100%, 1:1 conversion price. All contributions will enter the currency's reserve deposits, and the more contributions on this chain, the higher the starting reserve ratio will be. If the minimum contributions are not met, the chain will fail to start and all contributions can be spent back to the original contributors.", "./raw_text_input_wiki/release_notes.md"], ["The initial price in reserve at chain launch will start at 1.0, but there will be some fees to be paid in the early blocks that will come in as reserve currency. All fees in reserve that are converted to a fractional reserve currency are effective purchases of the fractional reserve currency, and based on a reversible formula, a currency's price will rise or fall on conversion from or to reserves with a level of volatility that is inversely related to the reserve ratio. A currency with a reserve ratio of 1 will never change its price when converting to or from its reserve. A currency with a reserve of 0.1 or 10% will rise or fall fairly quickly when converted to or from, depending on the amount of conversion relative to the total currency reserves on deposit.**Once a chain is made, anyone running the local VRSCTEST chain can connect to any defined chain with the command:**\n```\n./verusd -chain=SOMECOIN\n```\nOn first connection, a local config file is created, and VRSCTEST will not need to run to connect. However, it will be needed to merge mine.The presence of a correct config file for any chain, which are kept in .verustest/PBAAS/CHAINNAME, which is the home directory for a PBaaS chain, enables the chain to load as an independent chain.## Here are a few examples of cross-chain operations using the command line:**Participating in a blockchain launch and converting from reserve before the chain has started (refund address is optional and will default to paymentaddress):**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"preconvert\": 1}'\n```", "./raw_text_input_wiki/release_notes.md"], ["**Sending unconverted VRSCTEST to an address on the RESERVEWITHPREMINE chain for later conversion to/from the native coin.**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000}'\n```**Sending reserve to another chain and converting a coin from reserve to that chain's native currency at the current market price.**\n```\n./verus -chain=VRSCTEST sendreserve '{\"name\": \"RESERVEWITHPREMINE\", \"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"refundaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"tonative\": 1}'\n```**Sending reserve currency to an address on the current PBaaS reserve chain with no cross-chain operation, Reserve currency on a PBaaS chain is equivalent to and convertible between the native VRSCTEST currency, but may also be sent to and used on PBaaS reserve chains. It will arrive as reserve currency.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000}'\n```**Sending native currency to an address on a PBaaS reserve chain and converting it to reserve currency at the same time at the current market price.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"toreserve\": 1}'\n```**Sending reserve currency to an address on a PBaaS reserve chain and converting it to native currency at the same time at the current price. It will arrive as native currency.**\n```\n./verus -chain=RESERVEWITHPREMINE sendreserve '{\"paymentaddress\": \"R9LkTaMn1XpjeorE4RjM6pMcy5Nxkx9jPM\", \"amount\":5000, \"tonative\": 1}'\n```", "./raw_text_input_wiki/release_notes.md"], ["**Getting the current price in reserve and other currency statistics for the most recent block.**\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate\n```\n**... a specific block.**\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate blocknum\n```\n**... a range with a specific period between**.\n```\n./verus -chain=RESERVEWITHPREMINE getcurrencystate startblocknum,endblocknum,blockstostep\n```# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n# Notable Changes\n- Removed redundant debug output# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/f469ceee35e3abd616c3323907af5019379b45618f35693113f55cbf42afdaaa/detection\n**Linux:** https://www.virustotal.com/#/file/5d2a68970ec9e8eeaabde49f719e95342506ee46e37589094fed96e369a3f84e/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/bd26b50c5ce9a085e02fe6ec76f8d2c16d2b190d16493606f9690485aad22eac/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\n# Notable Changes\n- Removed redundant debug output# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/4de5aa22de6d43554f3456abe690c4ca1405e3326748dda14710d85f66634919/detection\n**Linux:** https://www.virustotal.com/#/file/4f5bc9cc22046b675fea304155026cc2c951ad4760ee5a2e27b42b5db8e4765d/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/787d46b30681e86c20d1875ab3c18c3253168a680c801c64de7a9f43b8b2db2c/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\nThis release does not support the PBaaS testnet. To participate in the Pbaas testnet, please use the [PBaaS Cross-chain Technology Preview](https://github.com/VerusCoin/VerusCoin/releases/tag/v0.6.0.12-PBaaS-Cross-chain-Technology-Preview).\n# Notable Changes\nRenamed komodod and komodo-cli to verusd and verus and removed wrappers.\nMinor staking improvements.\nFix longest chain reporting\nFix getchaintips bug\nPreparations for Pbaas# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/3a04de7202aff21afb8005d462b9d5acf577bae8705ec308de56c720f40841d5/detection\n**Linux:** https://www.virustotal.com/#/file/3351d8fd49ac074605d776f147c0906d149ac936418512c1940465f233d8f9c0/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/d1bdee20f375dad722b71851f69588062cd9e3760ed653957096080de9d0b3d0/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\nPlease note that this is a test release intended to use for testing and development with public blockchains as a service (PBaaS). Although this version does also work with Verus mainnet, it does not support PBaaS on mainnet and is not an official release. As always, use at your own risk. Do not use as main wallet", "./raw_text_input_wiki/release_notes.md"], ["**Sample chain definition**:\n```\n./verusd -chain=VRSCTEST definechain '{ \"name\":\"SOMECOIN\", \"eras\": [{\"reward\" : 10000000000}], \"notarizationreward\" : 1440000000, \"billingperiod\" : 1440, \"nodes\" : [{\"nodeaddress\" : \"127.0.0.1:2500\", \"paymentaddress\" : \"\"}, {\"nodeaddress\" : \"127.0.0.1:2501\", \"paymentaddress\" : \"RDyDzC5JB66Y29fzBkamywqEn1PJXTzj8B\"}]}'\n```\nMaximum of 3 eras\nMinimum 500 blocks worth of notarizations.\nMinimum of 0.01 VRSCTEST per block of notarization.\nVRSCTEST are needed in wallet to make a chain.**Once a chain is made, anyone running the local VRSCTEST chain can connect to any defined chain with the command:**\n```\n./verusd-chain=SOMECOIN\n```\nOn first connection, a local config file is created, and VRSCTEST will not need to run to connect. However, it will be needed to merge mine.The presence of a correct config file for any chain, which are kept in .verustest/PBAAS/CHAINNAME, which is the home directory for a PBaaS chain, enables the chain to load as an independent chain.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nPlease note that this is a test release intended to use for testing and development with public blockchains as a service (PBaaS). Although this version does also work with Verus mainnet, it does not support PBaaS on mainnet and is not an official release. As always, use at your own risk. Do not use as main wallet**Sample chain definition**:\n```\n./verusd -chain=VRSCTEST definechain '{ \"name\":\"SOMECOIN\", \"eras\": [{\"reward\" : 10000000000}], \"notarizationreward\" : 1440000000, \"billingperiod\" : 1440, \"nodes\" : [{\"nodeaddress\" : \"127.0.0.1:2500\", \"paymentaddress\" : \"\"}, {\"nodeaddress\" : \"127.0.0.1:2501\", \"paymentaddress\" : \"RDyDzC5JB66Y29fzBkamywqEn1PJXTzj8B\"}]}'\n```\nMaximum of 3 eras\nMinimum 500 blocks worth of notarizations.\nMinimum of 0.01 VRSCTEST per block of notarization.\nVRSCTEST are needed in wallet to make a chain.**Once a chain is made, anyone running the local VRSCTEST chain can connect to any defined chain with the command:**\n```\n./verusd-chain=SOMECOIN\n```\nOn first connection, a local config file is created, and VRSCTEST will not need to run to connect. However, it will be needed to merge mine.The presence of a correct config file for any chain, which are kept in .verustest/PBAAS/CHAINNAME, which is the home directory for a PBaaS chain, enables the chain to load as an independent chain.# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nPlease note that this is a test release intended to use for testing and development with public blockchains as a service (PBaaS). Although this version does also work with Verus mainnet, it does not support PBaaS on mainnet and is not an official release. As always, use at your own risk. Do not use as main wallet", "./raw_text_input_wiki/release_notes.md"], ["**Sample chain definition**:\n```\n./verusd -chain=VRSCTEST definechain '{ \"name\":\"SOMECOIN\", \"eras\": [{\"reward\" : 10000000000}], \"notarizationreward\" : 1440000000, \"billingperiod\" : 1440, \"nodes\" : [{\"nodeaddress\" : \"127.0.0.1:2500\", \"paymentaddress\" : \"\"}, {\"nodeaddress\" : \"127.0.0.1:2501\", \"paymentaddress\" : \"RDyDzC5JB66Y29fzBkamywqEn1PJXTzj8B\"}]}'\n```\nMaximum of 3 eras\nMinimum 500 blocks worth of notarizations.\nMinimum of 0.01 VRSCTEST per block of notarization.\nVRSCTEST are needed in wallet to make a chain.**Once a chain is made, anyone running the local VRSCTEST chain can connect to any defined chain with the command:**\n```\n./verusd-chain=SOMECOIN\n```\nOn first connection, a local config file is created, and VRSCTEST will not need to run to connect. However, it will be needed to merge mine.The presence of a correct config file for any chain, which are kept in .verustest/PBAAS/CHAINNAME, which is the home directory for a PBaaS chain, enables the chain to load as an independent chain.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nPlease note that this is a test release intended to use for testing and development with public blockchains as a service (PBaaS). Although this version does also work with Verus mainnet, it does not support PBaaS on mainnet and is not an official release. As always, use at your own risk. Do not use as main wallet**Sample chain definition**:\n```\n./verusd -chain=VRSCTEST definechain '{ \"name\":\"SOMECOIN\", \"eras\": [{\"reward\" : 10000000000}], \"notarizationreward\" : 1440000000, \"billingperiod\" : 1440, \"nodes\" : [{\"nodeaddress\" : \"127.0.0.1:2500\", \"paymentaddress\" : \"\"}, {\"nodeaddress\" : \"127.0.0.1:2501\", \"paymentaddress\" : \"RDyDzC5JB66Y29fzBkamywqEn1PJXTzj8B\"}]}'\n```\nMaximum of 3 eras\nMinimum 500 blocks worth of notarizations.\nMinimum of 0.01 VRSCTEST per block of notarization.\nVRSCTEST are needed in wallet to make a chain.**Once a chain is made, anyone running the local VRSCTEST chain can connect to any defined chain with the command:**\n```\n./verusd-chain=SOMECOIN\n```\nOn first connection, a local config file is created, and VRSCTEST will not need to run to connect. However, it will be needed to merge mine.The presence of a correct config file for any chain, which are kept in .verustest/PBAAS/CHAINNAME, which is the home directory for a PBaaS chain, enables the chain to load as an independent chain.# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nApproximate release height was set too low on the last release. Please be sure to upgrade your VerusCoin daemon and/or Agama wallet to avoid disconnecting from the network**Linux Dependencies**\nUbuntu 16.04/Xenial:\n```\nsudo apt install libcurl4-openssl-dev\n```\nUbuntu 18.04/Bionic+\n```\nsudo apt install libcurl4\n```", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/a358156eaf210f594c214a309d6c201d0ccf9e7806065563b483a22e80dff791/detection\n**Linux:** https://www.virustotal.com/#/file/e745633c99499a3cf968bc2f2c2d2fc56ecdc8d2996a2cf4fb43feff452acb71/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/2e3cbb2b9f38bccbf49061dce480d267c35f7d7ae5172fcda2c3a5afefd86736/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\nPlease note that this is a test release intended to use with test chains. We do not advise using it for main net.\nDo not use as main wallet**Sample chain definition**:\n```\n./komodo-cli -chain=VRSCTEST definechain '{ \"name\":\"SOMECOIN\", \"eras\": [{\"reward\" : 10000000000}], \"notarizationreward\" : 1440000000, \"billingperiod\" : 1440, \"nodes\" : [{\"nodeaddress\" : \"127.0.0.1:2500\", \"paymentaddress\" : \"\"}, {\"nodeaddress\" : \"127.0.0.1:2501\", \"paymentaddress\" : \"RDyDzC5JB66Y29fzBkamywqEn1PJXTzj8B\"}]}'\n```\nMaximum of 3 eras\nMinimum 500 blocks worth of notarizations.\nMinimum of 0.01 VRSCTEST per block of notarization.\nVRSCTEST are needed in wallet to make a chain.**Once a chain is made, anyone running the local VRSCTEST chain can connect to any defined chain with the command:**\n```\n./komodod -chain=SOMECOIN\n```\nOn first connection, a local config file is created, and VRSCTEST will not need to run to connect. However, it will be needed to merge mine.The presence of a correct config file for any chain, which are kept in .verustest/PBAAS/CHAINNAME, which is the home directory for a PBaaS chain, enables the chain to load as an independent chain.# Disclaimer", "./raw_text_input_wiki/release_notes.md"], ["This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nPlease note that this is a test release intended to use with test chains. We do not advise using it for main net.\nDo not use as main wallet**Sample chain definition**:\n```\n./komodo-cli -chain=VRSCTEST definechain '{ \"name\":\"SOMECOIN\", \"eras\": [{\"reward\" : 10000000000}], \"notarizationreward\" : 1440000000, \"billingperiod\" : 1440, \"nodes\" : [{\"nodeaddress\" : \"127.0.0.1:2500\", \"paymentaddress\" : \"\"}, {\"nodeaddress\" : \"127.0.0.1:2501\", \"paymentaddress\" : \"RDyDzC5JB66Y29fzBkamywqEn1PJXTzj8B\"}]}'\n```\nMaximum of 3 eras\nMinimum 500 blocks worth of notarizations.\nMinimum of 0.01 VRSCTEST per block of notarization.\nVRSCTEST are not paid out yet, but they are needed them in wallet to make a chain.", "./raw_text_input_wiki/release_notes.md"], ["**Once a chain is made, anyone running the local VRSCTEST chain can connect to any defined chain with the command:**\n```\n./komodod -chain=SOMECOIN\n```\nOn first connection, a local config file is created, and VRSCTEST will not need to run to connect. However, it will be needed to merge mine.The presence of a correct config file for any chain, which are kept in .verustest/PBAAS/CHAINNAME, which is the home directory for a PBaaS chain, enables the chain to load as an independent chain.# DisclaimerThis is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n# IMPORTANT: CRITICAL UPDATE -- UPGRADE IMMEDIATELYThis release fixes a security vulnerability discovered in a dependent library**MAKE SURE TO UPGRADE TO 0.5.6 OR GREATER ASAP.**", "./raw_text_input_wiki/release_notes.md"], ["**Linux Dependencies**\nUbuntu 16.04/Xenial:\n```\nsudo apt install libcurl4-openssl-dev\n```\nUbuntu 18.04/Bionic+\n```\nsudo apt install libcurl4\n```This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:**\nhttps://www.virustotal.com/#/file/d873c1b7ccb6dc1a7df28d301c28cb810bc9df6c328f90b3165933b9985a0307/detection\n**Linux:** https://www.virustotal.com/#/file/e5074eda5ad79e17ae766d67896d3d0e218aef6db4054b5f442be6a679f49209/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/ebf07aacc896b4acb3aa39655f4ad370af1ccb3220199db9f01f5251d6867949/detection", "./raw_text_input_wiki/release_notes.md"], ["Avast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\nv0.5.5c introduces a portability fix for a fault on some CPUs that did not support optimized mining when attempting to mine. This allows mining on CPUs that don't support optimizations, although they will be relatively slow.**MAKE SURE TO UPGRADE TO 0.5.5 OR GREATER ASAP. See 0.5.5 release for details**This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "./raw_text_input_wiki/release_notes.md"], ["**MacOS:**\nhttps://www.virustotal.com/#/file/bb689d033f8cd9c6c5a81d0f5aa473cbd47956e56faff3ba31488f76c9d1d638/detection\n**Linux:** https://www.virustotal.com/#/file/9e42f4313be2b03eaaef4d8add50766663dc53caff7953d02ddffff92cc344b4/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/370b69673e6f6226dcf4ecd262aa62c859b7d2f2d8466afe5f4f6fe8cc0f7313/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\nv0.5.5b introduces bug fixes for staking status not reverting to true after performing a z-transaction..**MAKE SURE TO UPGRADE TO 0.5.5 OR GREATER ASAP. See 0.5.5 release for details**This is experimental and unfinished software. Use at your own risk! No warranty for any kind of damage!\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The enclosed copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "./raw_text_input_wiki/release_notes.md"], ["THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.**MacOS:** https://www.virustotal.com/#/file/d96bd2afb5db178dbc07cbe1708892e3d08c6b7984c32a0064a3dcfb2d2943dc/detection\n**Linux:** https://www.virustotal.com/#/file/1b08617478b2b84c3d1181a6f93f9bc6359ac57e2c434acd8e57d8b603988a9f/detection\n**Windows:**\nhttps://www.virustotal.com/#/file/040fa02e57c2e55fd0f5fc70ef8b8ea7c38e54c10fa16e967a147c9614d1fe50/detectionAvast and Kaspersky may flag the software as \"not-a-virus\" or \"PUP\". These are warnings that you are installing mining software, which may be installed by a third party to exploit your PC.\nTo find out more about the false positives, review the following resources:\nhttps://blog.malwarebytes.com/detections/pup-optional-bitcoinminer/\nhttps://www.kaspersky.com/blog/not-a-virus/18015/\n# IMPORTANT: CRITICAL UPDATE -- UPGRADE IMMEDIATELY****COMBINATION SECURITY FIX AND INITIAL PBaaS PREPARATION****", "./raw_text_input_wiki/release_notes.md"], ["During an audit, a potential security issue was recently identified and fixed. This version both fixes the security issue in question immediately, and also uses this as an opportunity to include some early PBaaS functionality that while not fully enabled, will allow us to test future PBaaS functionality on the main Verus chain in the near future. There is no activation date for these fixes. They are important and immediate. There has been no exploitation of this issue yet, and to our knowledge, details are not known outside of core developers. We recommend immediate upgrade of all Verus wallets.Increased number of outbound connections from 4 to 5.\nFixed CLI bug displaying 0 mega hashes done when it was hashing just fine.\nFixed zfunds calculation on coinsupply RPC\nFixed bug preventing Mac builds from mining with the enhancements introduced in v0.5.3Linux and Windows only release, MacOS on the way, Mac users should remain on version 5.1\nTo upgrade your wallet, run the agama-upgrade script included and enter the directory of your Verus Enhanced Agama app\nFixed one not fully portable call in the portable code\n# IMPORTANT****THIS IS A MANDATORY UPDATE, AND IF YOU DO NOT UPDATE, YOU WILL BE UNABLE TO ACCESS THE MAIN VERUS CHAIN AFTER BLOCK 310000.****\n# VerusHash 2.0New **VerusHash 2.0**, designed to close the performance gap between CPU, GPU, and FPGA.# Verus Agama ImprovementsFull support of any Komodo asset running natively alongside Verus Coin. This is done by separating out the daemon for Komodo, allowing both the Verus daemon and the Komodo daemon to run simultaneously.", "./raw_text_input_wiki/release_notes.md"], ["https://medium.com/veruscoin/veruscoin-0-5-0-official-release-notes-6d371095dc7a\nv0.4.0h fixes address indexes for the insight explorer and some APIs, as well as a rare segfault in network reorg edge cases from the cheatcatcher.\nVersion 0.4.0g includes all improvements in 0.4.0f and an expiry on stake transactions to allow deletion from wallets later\nVersion 0.4.0f includes all improvements in 0.4.0e.\nIn addition, it provides more detail about stake (winner of the contest) and mint (staked reward) transactions in Agama GUI as well as CLI listtransactions. It also introduces safeguards against any possibility of double staking behavior caused by forks and reorgs and the ability to set the maximum number of transparent and private transactions in Agama in settings->App config.\n0.4.0e fixes issues and introduces a much cleaner view of staking transactions and minted coinbases in the Agama GUI. The following community reported issues are resolved:\n1. Coinbase shielding problems to Sapling and sometimes to Sprout private addresses are resolved\n2. Staking will again default to sending the coinbase to the address that staked the reward unless **-pubkey=66charpubkey** is set. The public key of an address where you would like the coinbases to go can be determined using **\"validateaddress\"** either in the CLI or GUI.\n3. Agama GUI no longer shows ins and outs or multiple lines for a staking transaction. Instead, it now displays an easy to understand single line for each \"stake\" transaction and also easily distinguishes between mined and minted coinbases once they are mature.\n## 0.4.0c - released 10/29/2018", "./raw_text_input_wiki/release_notes.md"], ["- All versions of the Verus Coin wallet from **0.4.0** and later have support for **Sapling high performance zero knowledge transactions**, which will activate on the Verus Coin Network at block **227520**. In addition to basic Sapling support, 0.4.0c includes support for Sapling compatible, transparent mobile transactions. **For lite mode usage on the Verus Coin or Zcash networks, you will need Verus Enhanced Agama v 0.4.0c.**- In addition to Sapling and support for Stake Guard transactions, which all versions **0.4.0** or later have, 0.4.0c also includes a powerful *\u201cCheat Catcher\u201d* that can earn money as miners and stakers who use it protect the Verus Coin network by catching stakers who are staking for rewards in a selfish way that does not contribute to converging the network on one blockchain. **The new \u201cCheat Catcher\u201d support requires a Sapling z-address, either passed in to the CLI wallet with the \u201c-cheatcatcher=zaddress\u201d option, or added in the Settings->App config of the enhanced Agama GUI.**", "./raw_text_input_wiki/release_notes.md"], ["- Once your cheat catcher address has been set, a **full node wallet that is mining OR staking, will also be looking for forks where the same winning coins may be posted on two different forks, signed by the same person.** If this is ever discovered, the the mining or staking wallet will create a transaction that has cryptographic evidence of the cheating and submit it for shielding to the cheat catcher\u2019s address. That means that while staking or mining, anyone who has a Sapling cheat catcher address set, may periodically find an additional shielded coinbase or two in their cheat catching address. **Earning cheat catching rewards does not new create coins, but actually takes them from cheaters, so DON\u2019T CHEAT :) !** Earning a cheat catching reward can also occur whether or not you earn a block reward and is available equally across the network to all miners and stakers, more dependent on who happens to observe the cheating fork and catches the cheater than on staking or mining power.## Version 0.4.0c also fixes the following issues reported in prior versions:\n- Wallet balance can get out of sync with blockchain when staking\n- Some non-Latin usernames cause failure to load\n- When used to load KMD in GUI Agama, Komodo stops accruing interest after transfer\n### IF YOUR WALLET IS OUT OF SYNC, YOU CAN RESCAN TO FIX THE PROBLEM.", "./raw_text_input_wiki/release_notes.md"], ["## For CLI:\n- Simply add the parameter **\u201c-rescan\u201d** when starting the daemon.\n## For GUI:\n- Close the application, wait for the GUI to close, then restart the GUI\n- When restarting, select **\u201cActivate Coin\u201d**, not a dropdown shortcut\non the \u201cActivate Coin\u201d screen, select **\u201cVerus\u201d** and select **\u201cNative mode\u201d**\n- Choose the **\u201cdaemon param: rescan\u201d** option\nclick **\u201cActivate Coin\u201d**\n## Fixes:\n- Solves an issue where pool may exceed getblocktemplate's ability to keep up with work queue when network is under stress\n- Fix to verus bash script to allow execution from external directories\n## Fixed:\n- Komodo compatibility## Verus Coin 0.4.0 - Release Notes\n# IMPORTANT\nIF TWO OF YOUR MACHINES STAKE BLOCKS WITH THE SAME COINS, EACH ON A SEPARATE FORK, YOU CAN NOW LOSE YOUR BLOCK REWARD TO A CHEAT-CATCHER.STAKING IS NOW OFF BY DEFAULT TO PREVENT MULTI-MACHINE STAKING OF THE SAME COINS OR ADDRESSES. YOU CAN EASILY ENABLE STAKING WITH THE \u201c-mint\u201d PARAMETER TO verusd, \u201csetgenerate true 0\u201d WITH \u201cverus\u201d CLI, OR THE STAKING BUTTON IN THE GUI.ONLY STAKE ANY ADDRESS OR WALLET ON ONE COMPUTER AT A TIME, NOT MORE, UNLESS YOU CAN BE ABSOLUTELY SURE THEY ARE IN SYNC AND ON THE SAME CHAIN AT EVERY BLOCK. YOU CAN STILL MINE ON AS MANY MACHINES AS YOU\u2019D LIKE.", "./raw_text_input_wiki/release_notes.md"], ["### Sapling\nVerus Coin 0.4.0 includes support for Sapling addresses and transactions, including memory usage reduction of near 98% and performance improvements over previous z-transactions typically 40-50x. As with Zcash Sapling upgrade rules, older \u201cSprout\u201d addresses and \u201cSapling\u201d addresses may not be mixed in the same transaction. That means if you have Verus Coin that you would like to move from an older Sprout z-address to a Sapling z-address, you must first send it to a transparent address, then to the Sapling z-address. Sapling addresses can be used for shielding coinbase transactions or other functions. Retrieving viewing keys for Sapling addresses, which is not required for normal transactions, is not yet supported, and will be included in the next Sapling technology update.### Crypto-conditions and StakeGuard\nVerus-enhanced, Komodo crypto-condition technology, enabling smart transactions and new types of on-chain functionalities. Verus has enhanced the original crypto-condition technology to make integration with standard transactions easier and enable things like StakeGuard, the Verus nothing-at-stake solution. In later releases, the same technology will enable PBaaS, voting, identity capabilities, and more.", "./raw_text_input_wiki/release_notes.md"], ["### Cheat Catcher\nIn addition to Stake Guard, which supports the nothing at stake solution, this version of Verus includes an early, functional version of the Cheat Catcher, a system that enables every miner or staker to catch stake cheating, when someone stakes two blocks with the same coins on two or more forks. With this version, all known orphaned stake transactions are compared to successful stakes when they mature, and if the orphan was trying to stake the exact same coins but on a different fork and the real fork at the same time, the miner of the block that is 100 blocks later, when that coinbase matures, will mine or stake a spend transaction for that cheat into the block, and send it to a sapling address the miner or staker has set in their wallet. If your wallet catches and spends a cheat transaction the reward for that coinbase will be automatically shielded to your address at the same time as you win the block. The early Cheat Catcher does not broadcast cheating transactions, and it will not catch all possible cheats on the network. It will make it a statistically losing proposition to cheat. This means you should not stake the same addresses on more than one computer at a time. Doing so creates the possibility that you will stake on two forks with the same coins, which puts your earnings at risk. Future cheat catcher implementations will excel at catching cheats on the network.### Stake Delegation\nIn the new Verus network protocol that activates at the same time as Sapling, you can now set the parameter -pubkey in the command line wallet, which will redirect both mining AND staking rewards to the public key of an address, which can be obtained from an address with the \u201cvalidatekey\u201d command.- Timing improvements for more efficient staking\n- Improved support for synchronizing with non-VRSC KMD-family coins\n- Non-mandatory", "./raw_text_input_wiki/release_notes.md"], ["This release should make a huge difference in global network synchronization, mining, and staking, which should provide a strong foundation as the network grows. In addition, it has significant efficiency improvements for both mining and staking. Here is a rundown of the improvements in this version:\nNew in both command line and GUI:\n1. Reconfigured connection ratios, better seed node discovery built in. Default outgoing connections now 4, default incoming for full node 384. If your machine can handle it, you can help the network and broadcast your stakes more quickly to increase the number of connections in your VRSC.conf with \"maxconnections=n\", where n is the number you wish to use.\n2. Improved lag detection. If your wallet detects a lag, it immediately stops attempting to mine or stake and devotes maximum resources to catching up. Rather than continuing to mine or stake, which may contribute to further lag, this action ensures mining and staking occurs on a viable tip of the chain.\n3. Improved staking efficiency. This version raises the default priority of the staking thread, ensuring that the staking process is fast and efficient, even in cases where it would have also lagged with mining or other machine load.\n4. All updates and improvements from Komodo Platform as of 1.5 weeks ago have been merged.\nPreparing for unlocked era.\nFirst release with verus-cli\nLinux, Mac and Windows variants built and distributed for the VerusCoin Launch.", "./raw_text_input_wiki/release_notes.md"], ["# How-To: Backup my wallet?## Important General Information## Video:\nWatch this video with an explanation how to accomplish the steps below: [Backup your wallet](https://youtu.be/ygPsdK8Trck)### Verus `Wallet.dat`, Chaindata & `VRSC.conf` standard locations\n * Linux:\t\t`~/.komodo/VRSC`\n * Mac OS: \t`~/Library/Application Support/Komodo/VRSC`\n * Windows 10: \t`%AppData%\\Roaming\\Komodo\\VRSC\\`\n * OS independent through Verus Desktop: Click `help`, `Show Verus data folder (default)`### Instruction Video\nExternal YouTube link: [Backing up the Verus Desktop wallet](https://youtu.be/ygPsdK8Trck)## Preferred method: Exporting your walletNote: The filename you replace`<mywalletexport>` with, can only contain letters and figures, no other characters, so it **cannot** have a file-extension!*#### Verus Desktop:\n Go to `Settings`, `Coin Settings` and click `Export native wallet backup`.\n Confirm that you want to export after reading the pop-up.\n The green message will tell you where the backup is and what it's name is.\n#### linux/MacOS CLI:\n run `./verus z_exportwallet \"<mywalletexport>\"`\n#### windows CLI:\n run `verus z_exportwallet \"<mywalletexport>\"`Attention: Pay attention to the feedback this command gives you: it will mention the location where the export file is saved.The exported wallet should be a file called `<mywalletexport>`, standard in the same directory as your `wallet.dat`. Keep this file secure, it has your plaintext private keys. Verify that the file is there and isn't empty.## Alternate method: Backing up your walletNote: The filename you replace`<DestinationFileName>` with, can only contain letters and figures, no other characters, so it **cannot** have an file-extension", "./raw_text_input_wiki/how-to_backup_my_wallet.md"], ["#### Verus Desktop:\n  Go to `Settings`, `Coin Settings` and click the text box\n  type `run backupwallet \"<DestinationFileName>\"`\n#### linux/MacOS CLI:\n  run `./verus backupwallet \"<DestinationFileName>\"`\n#### windows CLI:\n  run `verus backupwallet \"<DestinationFileName>\"`\n\nAttention: Pay attention to the feedback this command gives you: it will mention the location where the backup file is saved.\n\nThe backup wallet should be a file called `<DestinationFileName>`, standard in the same directory as your `wallet.dat`. Keep this file secure, it enables full access to all your addresses.\nVerify that the file is present and that it is the same size as your `wallet.dat`.\n\n## Extra info for **non-Verus** chains\n\n#### Extra line in `<coin>.conf` required\n**Non-Verus** chains like **Komodo** and its asset chains and **Zcash**, need this entry in the coins configuration file to specify the export directory, before you started your wallet.\n`exportdir=<dir>`\n\n#### For Komodo the base directory is `komodo`.\n* Linux:\t\t`~/.Komodo`\n* Mac OS: \t`~/Library/Application Support/Komodo`\n* Windows 10: \t`%AppData%\\Roaming\\Komodo`\nFor Komodo asset chains it is a folder/directory in the `komodo` base directory (eg `komodo/PIRATE`) with the **official** coin designation.\n\n#### For Zcash the base directory is `zcash` instead of komodo.\n* Linux:\t\t`~/.Zcash`\n* Mac OS: \t`~/Library/Application Support/Zcash`\n* Windows 10: \t`%AppData%\\Roaming\\Zcash`\n\n#### **non-Verus** chains Verus Desktop\n* **before** executing the command in the `run ...` commands, select the appropriate coin in the top right corner.\n\nInformation compiled by Oink.vrsc@.\n\nNote: revision date 2022-09-12.", "./raw_text_input_wiki/how-to_backup_my_wallet.md"], ["# Useful Verus CLI commands.\nNote: This list is by no means complete, it highlites only the most commonly used commands. A complete list of commands can be obtained by running `verus help`### Important General Information`verus command \"<userinput>\"` needs to be entered literally, with `<userinput>` replaced by your specific userdata. So if the text directs you to use for example `\"<Public Address>\"`, you replace that (including the `<` and `>`) with the address,\nso it looks similar to this: `\"RYX6RYU3AAvwVCNyNM4cVyGUhSMUPvKs3r\"`.##### General remarks on CLI wallet:\nOn Windows command line enter the commands as shown without the surrounding quotation marks\nIn Linux shell preceed the commands without surrounding quotation marks with ./\nIn MacOS shell preceed the commands without surrounding quotation marks with ./\nfor example the windows version verus listtransactions transforms in Linux or MacOS to ./verus listtransactions.#####General remarks on Windows command line formatting:\nThe CLI help shows the command format for Linux and MacOS.\nFor windows substitute the shown '-character with the \"-character.\nFor windows substitute the shown \"-character with the \\\"-characters.## Handy verus-cli commands:\nGetting a new Public address:\n`verus getnewaddress`Listing your available public addresses:\n`verus listaddressgroupings`Getting a new Private address:\n`verus z_getnewaddress`Listing your available private addresses:\n`verus z_listaddresses`Importing a VRSC private key of a R-address into your wallet:\n`verus importprivkey \"<PRIVATE_KEY>\"`Importing a VRSC private key of a z-address into your wallet:\n`verus z_importkey \"<PRIVATE_KEY>\"`Getting your current VRSC balance:\n`verus getbalance`or for somewhat more information:\n`verus z_gettotalbalance`or for any specific address:\n`verus z_getbalance \"<z-, i- or P-ADDRESS>\"`", "./raw_text_input_wiki/faq-allos10_useful_cli_commands.md"], ["get info about your wallet, (immature & staking) balances:\n`verus getwalletinfo`\n\nSending VRSC coins from your verus wallet to and another VRSC address (only public address in this case, seperate command for z-addresses I think):\n`verus sendtoaddress \"<VRSC_address>\" <AMOUNT> \"<Some comments here>\"`\n\nListing the latest VRSC transactions:\n`verus listtransactions`\n\nShield reward coins from all public addresses:\n`verus z_shieldcoinbase \"*\" \"<z-ADDRESS>\"`\n\nTransfer X VRSX from any (P-, i- and z-) address to any (P-, i- and z-) address:\n`verus z_sendmany \"<z-, i- or P-ADDRESS>\" '[{\"amount\":<X>, \"address\":\"<Z-, i- or P-ADDRESS>\"}]'`\n\nCheck the Operation Status of your z_sendmany command (or z_shieldconbase):\n`verus z_getoperationstatus`\n\nDisclaimer: Always read up before using a verus-cli command, more info on each command can be found using the following:\n`verus help`\n\nAdded by @Crupti, @Oliver Westbrook and Oink.vrsc@\nnote: last revision date 2020-05-09.", "./raw_text_input_wiki/faq-allos10_useful_cli_commands.md"], ["# Question: How does staking work?\n\nYou'll start staking with the first VRSCs that are not time locked + in your public / transparent wallet + 150 blocks old (or about 2.5 hours).\n\nYour chances to win a block: Your coins in your public/transparent wallet / Total staking supply in public/transparent wallets (which is max. about 485.000 VRSC from the first (sunrise) week as long as the rewards were below 192)\n\nRemember: There will be only one reward every minute. It\u2019s going to be either mining or staking, so on average 720 mining and 720 staking rewards every day.\n\nExample: I have 300 coins in a public/transparent address / 300.000 in public wallets (let's assume some part is lost/not staking or in private wallets), so that would be 1/1000 x 720 of a chance or around average 1,4 days for a staking block rewards. Hash power does not influence staking reward.\n\nRegarding the Verus debug.log: \u201c<DATE> No eligible staking transaction found\u201c. It means that you are staking but have not received a reward yet. @miketout will change the message soon.\n\nRegarding time locked coins:\nThe Zcash protocol requires you to send all coins received by mining (on wallet, not pool mining) or staking (reward transactions, also on wallet, not pool staking) once unlocked to a private address and then to a public/transparent address before you can use them either for staking or for making transactions (that\u2019s how you make use of your rewarded coins = coinbase coins). So, once your coins loose their time lock, you can unlock those coins as described in [\"Shield Verus Coins via Command Line Interface]\"(#!how-to/how-to_shield_via_cli.md). Once you've transferred the coins from your private address back to (one of) your public / transparent address(es) and you\u2019ll automatically start staking.\n\n(submitted by @karero, edited by Oink.vrsc@)\n\nnote: last revision date 2020-02-25.", "./raw_text_input_wiki/faq-allos13_how_does_staking_work.md"], ["# Question: What are the mining pools that I can join?\n\n[luckpool.net](https://luckpool.net/verus)\n[pool.verus.io](https://pool.verus.io)\n[zergpool.com](https://zergpool.com/)\n[wattpool.net](https://wattpool.net/ui/verus/stats)\n[vrsc.ciscotech.dk](https://vrsc.ciscotech.dk/)\n[www.lepool.com.cn](http://www.lepool.com.cn:8088/)\n[www.zhuaao.com](http://www.zhuaao.com:8880/)\n[aod-tech.com](https://cryptopools.aod-tech.com/)\n[verus.alphatechit.co.uk](https://verus.alphatechit.co.uk/)\n[MadCatMining (currently inactive)](https://vrsc.mcmpool.eu/)\n\nThe statistics of the known public pools can be checked here:\n[Mining Pool Stats](https://miningpoolstats.stream/veruscoin)\n\nPayouts from mining pools do not need to be shielded first. The mining pool has already taken care of that.\n\nNote: last revision date 2020-11-08.", "./raw_text_input_wiki/faq-allos21_mining_pools.md"], ["# How do I know when an immature block will \"unlock\" (mature)?\n\nYou can use the following scripts to automate it (prints, for each block, how many blocks remaining and the estimated date).\nKeep in mind that the actual number of blocks per day is not always exactly 1440. It varies and the estimated dates may change slightly over time. Below you will find the Linux script that will calculate the extimated time for you:\n\n## Script:\n\n```bash\n\n#!/bin/bash\n\n#Config\nverus_path=\"/XXXX/verus-cli/\"\nverus_cli=\"verus\"\n\nget_transactions=( $($verus_path$verus_cli listtransactions \"\" 1000 0|grep blockstomaturity|sed 's/.e: //;s/,//g'|awk '{ print $2 }'|sort -n) )\ncur_block=( $($verus_path$verus_cli getmininginfo|grep blocks\":|sed 's/.e: //;s/,//g'|awk '{ print $2 }') )\narr_idx=\"0\"\n\nfor i in \"${get_transactions[@]}\"\ndo\n    days_to_mature=$(( ($i )/1440 ))\n    mature_to_date=$(date +\"%m-%d-%Y\" -d \"+$days_to_mature days\")\n    echo \"\"Block #\" $arr_idx \"will mature in approximately\"$days_to_mature \"days\" \"(\" $mature_to_date \")\" \"\n    ((arr_idx++))\ndone\n```\n\nYou'll need to enter the correct path to your verus directory and you will need to have the verus daemon running in order to sucessfully run this script.\n\n(submitted by @TexWiller, edited by @bigtom, reviewed by @Englal)\n\nNote: last revision date 2020-04-24.", "./raw_text_input_wiki/faq-lin02_immature_block_unlock_time.md"], ["# \ufeffQuestion: How can I tell the difference between staked and mined coins?\n\n## CLI:\n\nYou can check this in the VerusExplorer https://explorer.verus.io/\n1. Check last 10 transactions in the </>CLI. Use `listtransactions`.\n2. Copy the blockhash of the received award\n3. Add it at the end of https://explorer.verus.io/api/getblock?\n\nHint: An example: https://explorer.verus.io/api/getblock?hash=9e6fa91356211a554c580c90ec9c2067dd420ff74c7d33481775793f7b0e7f03 \u2013 so this one is minted....\n\n## Verus Desktop:\n\nIn Verus Desktop, simply go to your Mining Dashboard and enter into Verus details.\nScroll down to the bottom of the page. It will list the rewards as `mined` or `minted` in green.\nThe TXIDs that staked the minted rewards are shown in blue.\n\n## Verus Agama (Deprecated):\n\nIn the GUI you can also click yourself thru to that information.\n1. Click on the magnifying glass all the way on the right of the transaction.\n2. On the pop-up click on \"Open in the VRSC Explorer\" bottom left.\n3. In the VRSC explorer click on the block hash value (in light blue) \u2013 now the block hash is displayed as the title of the box.\n4. Click on the info \"i\" on the right and click on \"search\": in the result displayed for blocktype 'mined' or 'minted'.(edited)\n\n(submitted by karero, edited by Oink.vrsc@)\n\nNote: last revision date 2020-11-11.", "./raw_text_input_wiki/faq-allos15_how_can_i_tell_the_difference_between_staked_and_mined_coins.md"], ["# Compile Monkins Verus enhanced CCMiner for various hardware\n\nRead it completely before using.\n\n## Important General Information\n\nThis guide is aimed towards Debian based Linux distributions. If you are using a different kind of distribution\n(eg RPM-based, like CentOS) you will need to install the dependancies using a procedure that fits your\nspecific distribution.\n\nThere are 3 active branches in ccminer github repo:\n `ARM`       (for 64bit ARM chips with AES intrinsic)\n `Verus2.2`    (standard x86-64 pc's)\n `Verus2.2gpu`   (GPUs)\n\nNote: Replace `ARM` in the `git clone` line below with the branchname above you want to use.\n\n## Procedure:\n\nInstall dependencies (specific for Debian-based distributions):\n```bash\nsudo apt-get install libcurl4-openssl-dev libssl-dev libjansson-dev automake autotools-dev build-essential git\n```\nFor GPU-miner compilation additional sources are required (Not needed for CPU or ARM):\n```bash\nwget http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run\nsudo sh cuda_10.2.89_440.33.01_linux.run\n```\nDownload the source and compile:\n```bash\ngit clone --single-branch -b ARM https://github.com/monkins1010/ccminer.git\ncd ccminer\nchmod +x build.sh\nchmod +x configure.sh\nchmod +x autogen.sh\n./build.sh\n```\nAnd finally starting the miner (Change pool, address & workername to your own liking):\n```bash\n./ccminer -a verus -o stratum+tcp://pool.verus.io:9999 -u RVjvbZuqSGLGDm1B9BFkbHWySPKEx4tfjQ.donator -p x\n```\n\nInfo from @Chris - Monkins1010 LOUD Mining.\n\nNote: last revision date 2021-04-20.", "./raw_text_input_wiki/faq-lin06_compile_ccminer.md"], ["# Hardware and Software requirement for ARM.\nThere are minimum requirements on your hardware and software for running a Verus Wallet on ARM-devices. If your platform does not meet the minimum requirements, you may not be able to run the required software.The listed requirements are for running **one** chain. Additional PBaaS chains require more resources.## Verus Wallet on CLI#### Absolute minimum requirements:\n* 64-bit processor\n* 64-bit Operating system (Raspbian is standard 32 bit)\n* 2 GB memory + 6 GB Swap available to the CLI Wallet\n* 20 GB storage space for Verus Blockchain and CLI wallet\n* internet connectivity\n* `libgomp1` and `zlib1g-dev` libraries installed#### Recommended requirements\n* 64-bit processor with AES functions enabled\n* 64-bit Operation system (Raspbian is standard 32 bit)\n* 4 GB memory or more + 6 GB Swap available to the CLI Wallet\n* 50 GB storage on a *fast* medium (like NVMe device) for the Verus Blockchain & CLI wallet. This supplies room for blockchain growth over time and the ability to bootstrap the wallet.\n* internet connectivity\n* `libgomp1` and `zlib1g-dev` libraries installed## Verus Wallet on GUI\n#### Absolute minimum requirements:\n* 64-bit processor\n* 64-bit Operating system (Raspbian is standard 32 bit) with GUI interface\n* 2 GB memory + 8 GB Swap available to the Verus Desktop Wallet\n* 25 GB storage space for Verus Blockchain and Verus Desktop.\n* internet connectivity\n* `libgomp1` and `zlib1g-dev` libraries installed", "./raw_text_input_wiki/armfaq-02_requirements.md"], ["#### Recommended requirements\n* 64-bit processor with AES functions enabled\n* 64-bit Operation system (Raspbian is standard 32 bit) ) with GUI interface\n* 8 GB memory or more + 6 GB Swap available to the CLI Wallet\n* 50 GB storage on a *fast* medium (like NVMe device) for the Verus Blockchain & CLI wallet. This supplies room for blockchain growth over time and the ability to bootstrap the wallet.\n* internet connectivity\n* `libgomp1` and `zlib1g-dev` libraries installed\n\n## Staking\n#### Absolute minimum requirements:\n* All requirements to run a wallet\n\n#### Recommended requirements\n* All requirements to run a wallet\n* A fully configured and functioning NTP client, to keep your clock synchronized\n* Low latency internet connectivity\n\n## Solo Mining\n#### Absolute minimum requirements:\n* All requirements to run a wallet\n\n#### Recommended requirements\n* All requirements to run a wallet\n* 64-bit processor with AES functions enabled\n* Low latency internet connectivity\n\n## Pool Mining\n* 64-bit processor with AES functions enabled\n* 64-bit Operation system (Raspbian is standard 32 bit)\n* ARM release of CCMiner or NHEQminer\n* Low latency internet connectivity\n* A public address to mine to\n* A public mining pool to connect to\n\nNote: Revision date 2023-01-12.", "./raw_text_input_wiki/armfaq-02_requirements.md"], ["# ERROR: Cannot Get a lock on data directory /root/.komodo/VRSC.\n\nKomodo is probably already running.\n\n## Procedure:\n\nIt just means you can't start it when it's already running. If it isn't running we can take a look at it.\nCheck to see if it is running by running:\n\n`./verus getinfo`\n\nIf it's running you'll get info back, if it isn't you'll get an error.\nIf that throws an error, it's worth checking using this command:\n\n`ps fax | grep verus`\n\nand seeing if any processes are listed besides the process you're using to search.\nYou would see verusd with a child process of komodo and all its cli arguments.\n\n(submitted by @keda666, solution written by englal.vrsc@)\n\nNote: last revision date 2020-02-26.", "./raw_text_input_wiki/mac-faq01_obtain_lock.md"], ["# Question: How do I direct all my solo mined rewards to a single Verus wallet?Attention: Read it completely before using.## Verus `Wallet.dat`, Chaindata & `VRSC.conf` standard locations\n * Linux:\t\t`~/.komodo/VRSC`\n * Mac OS: \t`~/Library/Application Support/Komodo/VRSC`\n * Windows 10: \t`%AppData%\\Roaming\\Komodo\\VRSC\\`\n * OS independent through Verus Desktop: Click `help`, `Show Verus data folder (default)`## Prerequisites\n* Have a __native__ VRSC wallet running## In Verus Desktop\nIn Verus Desktop, there is at this moment no way to enter an address to mine to. However, editing the `VRSC.conf` can be done to achive our goal:\n* In the receive window of your wallet, click the hamburger (three vertical dots) next to the address you want to receive your rewards in and click `Copy Public Key`.\n* Close down Verus Desktop.\n* Edit `VRSC.conf`(see standard locations at the top) and add the line `pubkey=THELONGSTRINGCOPIED`.\n* Save and exit.\n* Start Verus Desktop as you normally do.## In Agama Wallet\nStep 1 - First get your wallet address you want to mine to:\n* If you don't have an address, click \"Receive\", click \"Get New Address\" and choose \"Transparent Address\" from the drop down.Step 2 - Next we need to retrieve our pubkey,\n* click on the hamburg next to the address that you want to receive the rewards in and click `copy pubkey`Step 3 - Set your PubKey\n* Go to 'Settings', 'App Config (config.json)' and enter your pubkey(THELONGSTRINGCOPIED) into the 'Pubkey VRSC mining key' field.\n* Click 'Save app config' to save these settings.\n* Restart Agama", "./raw_text_input_wiki/faq-allos03_mine_rewards_to_a_single_verus_wallet_gui_+_cli.md"], ["## In Verus CLI\nStep 1 - First get your wallet address you want to mine to:\nYou can find an address if you already have previous transactions, or you can create a new one. To find an address from a previous transaction, use the command line verus listtransactions and copy the address found after \"address\".\nTo generate a new wallet address, use the command line `verus getnewaddress` and a new address will be created.\n\nStep 2 - Next, using your new address, enter the command with verus-cli `verus validateaddress`. From the output find the long string after \"pubkey\", copy without the quotation marks.\n\nStep 3 - Set your PubKey\n* Option 1: use this pubkey when starting your daemon by adding the following line to the end of your command, just before the \"&\" sign: -pubkey=THELONGSTRINGCOPIED\n* Option 2: edit your `VRSC.conf` and add the line `pubkey=THELONGSTRINGCOPIED`. Then start your whallet as you are used to.\n\nYour rewards will now be mined to that address. It would be a good idea to keep notes and associate the wallet address with the pubkey...also to double check that you did validate the correct pubkey for the wallet address, making sure you made no errors.\n\n(submitted by @Oliver Westbrook, edited by Oink.vrsc@)\n\nnote: last revision date 2020-02-24.", "./raw_text_input_wiki/faq-allos03_mine_rewards_to_a_single_verus_wallet_gui_+_cli.md"], ["# How to make a cloud daily backup of wallet.dat?\nNote: I use Google Cloud for my staking wallet and backups but the script works regardless of what you use; if you have timelocked coins, you will have to keep your wallet.dat file secure for a long, long time: it's crucial to maintain secure the staking instance as well as the storage..### Important General Information\n`VRSC Wallet and Data location` on Linux: `~/.komodo/VRSC`## Procedure:\nIf you use GCloud:\n* create a new directory where we'll upload the backups (ie: mkdir /home/user/backup)\n* create a storage bucket via GCloud console (ie bucket_verus)\n* mount the bucket on your local machine (syntax is: gcsfuse ; ie gcsfuse bucket_verus /home/user/backup)The script can be crontab scheduled to run daily or you can run it manually; if you schedule it, you have to hardcode the encryption passphrase; otherwise you can input it manually each time. You will have to install gnupg2 to encrypt (`sudo apt-get install gnupg2 gnupg-agent`). As always: be sure to fully understand what the script does and why I left some echos to demonstration/test purposes, you can sefely remove all of them.\n```bash\n#!/bin/bash# Customize the SOURCE and the DEST folders\nSOURCE_FOLDER=/home/XXXXX/.komodo/VRSC/\nDEST_FOLDER=/home/XXXX/backup/BCK_DATE=date +%Y-%m-%d.%H:%MSOURCE_FILE=wallet.dat\nDEST_FILE=$SOURCEFILE\"\"$BCK_DATEENCRYPT_EXT=\".gpg\"# all echo are for test purposes, feel free to delete them\necho check variable\necho SOURCE - $SOURCE_FOLDER\necho SOURCE_FILE - $SOURCE_FILE\necho DEST FILE - $DEST_FILE\necho DEST - $DEST_FOLDER\necho TO_BE_DEL - $DEST_FOLDER$SOURCE_FILEsleep 1cp $SOURCE_FOLDER$SOURCE_FILE $DEST_FOLDER$DEST_FILE\nsleep 1\n# Customize the passphrase!!\ngpg2 --batch --yes -c --cipher-algo AES256 --passphrase=\"XXXXXX\" $DEST_FOLDER$DEST_FILE\nsleep 1\nrm $DEST_FOLDER$DEST_FILE", "./raw_text_input_wiki/faq-lin05_daily_cloud_backup.md"], ["# Keep only last 6 days - BE SURE to fully understand how it works, as every \"rm\" command!\nfind $DEST_FOLDER/wallet* -type f -mtime +6 -exec rm {} ;\n```\n\n(submitted by @TexWiller)\n\nNote: last revision date 2020-02-26.", "./raw_text_input_wiki/faq-lin05_daily_cloud_backup.md"], ["# Updating the ARM CLI wallet.Attention: Read it completely before use.## Necessary files:Link 1: [Download latest Wallet](https://verus.io/wallet)## Verus `Wallet.dat`, Chaindata & `VRSC.conf` standard locations\n * ARM Linux:\t\t`~/.komodo/VRSC`Note: Due to the size of the blockchain, on an ARM installation this directory is usually stored on a mounted external hard drive.\nThis will have its own file path that was specified when the drive was mounted.\nThus the path to `~/.komodo/VRSC` directory is likely to be user-specified & thus non-standard on an ARM.---(NB This version is aimed at inexperienced users, so it includes the associated routine/basic Linux commands.\nYou will need access to the relevant directories, which may require sudo priveleges)(NB Raspberry Pi ARM boards lack some instruction sets to mine, though the Pi3 & Pi4 are ARM64 & can be used as staking devices if an ARM64 operating system is installed)---## Procedure:", "./raw_text_input_wiki/armfaq-03_updating.md"], ["1. Navigate to the directory which contains the verus daemon binary file (the default is in the home directory - ie ~/verus-cli)\n    cd verus-cli\n2. Check the Verus daemon is running - you will need to keep it running to check the downloaded file's signature\n    top\n  (`verusd` should appear as one of the processes in the list. If you need to start it use the command `./verusd`.)\n3. Download the latest ARM64 version. Check https://verus.io/wallet/command-wallet\n  (The commands below are for v0.7.3-10) Don't forget to change the version number to whichever one you are updating.\n    wget https://github.com/VerusCoin/VerusCoin/releases/download/v0.7.3-10/Verus-CLI-Linux-v0.7.3-10-arm64.tgz\n4. unpack/unzip the download into the signature file and the binaries tar/zipped file\n    tar -xvf Verus-CLI-Linux-v0.7.3-10-arm64.tgz\n5. Check it has unpacked/unzipped & open the signature file\n    ls -la\n    cat Verus-CLI-Linux-v0.7.3-3-arm64.tar.gz.signature.txt-file\n  This will display the signature information to verify the downloaded file is authentic.6. CHECK the signature by using the data in the signature file\n    ./verus verifyfile \"Verus Coin Foundation Releases@\" \"[signature string from signature.txt-file]\" [your home directory file path]Verus-CLI-Linux-v0.7.3-10-arm64.tar.gz\n  The return should be **`true`**. If you have an issue add \"\" around the file path.", "./raw_text_input_wiki/armfaq-03_updating.md"], ["7. STOP the Verus daemon\n    ./verus stop\n  Check whether it has stopped running with this command. (To be doubly sure you can also look in the debug file in the )\n    top\n  (This time `verusd` should **NOT** appear in this list.)\n8. Rename the old versions of the binaries (replace the version numbers with the version being replaced)\n  (This ensures you can easily revert to the old version by renaming these files.)\n    mv verus verus-v0.7.3-9\n    mv verusd verusd-v0.7.2-9\n9. Check they have been renamed\n    ls-la\n10. Unpack/unzip the binaries for the latest version\n    tar -xvf Verus-CLI-Linux-v0.7.3-10-arm64.tar.gz\n11. Check if they have unpacked/unzipped in the directory\n    ls -la\n12. If the directory where your Verus wallet.dat, Chaindata & VRSC.conf files are stored is in a non standard place - eg on a mounted external hard drive - you may have a datadir specified in your VRSC.conf file.\n  Navigate to that directory to check your datadir is still correct. The VRSC.conf file may have been overidden in the update. This ensures the Verus daemon knows where to find the blockchain you have currently saved on your system.\n    cat VRSC.conf\n  If it requires editing, use nano to edit this file\n    nano VRSC.conf\n  & append this to the VRSC.conf file :  \n    datadir=[your custom file path for your mounted hard drive]\n13. Start the Verus daemon again on the new version (add any other start options from https://wiki.verus.io/#!faq-cli/clifaq-01_verusd_options.md)\n    ./verusd\n14. Check the version\n    ./ verus getwalletinfo\n15. Once you are satisfied the new version is working, clean up the older binares (from step 8) by deleting them (or just move them to another directory using the same mv command as step 8)\n    rm verus verus-v0.7.3-9\n    rm verus verusd-v0.7.3-9", "./raw_text_input_wiki/armfaq-03_updating.md"], ["Information compiled by `Mercadinaut.vrsc@`.\n\nNote: creation date 2021-05-16.", "./raw_text_input_wiki/armfaq-03_updating.md"]]