[
    "What is the \"eras\" parameter used for when defining a new chain on Verus?",
    "The \"eras\" parameter is an optional array of objects that specifies data specific to each era of the chain. Each era object can contain parameters such as \"reward\", \"decay\", \"halving\", and \"eraend\", which define the block reward, reward decay, halving period, and ending block of each era, respectively.",
    " than 100%, discount on final price at launch\n \"initialsupply\" : \"xx.xx\"    (value, required for fractional) supply after conversion of contributions, before preallocation\n \"prelaunchcarveout\" : \"0.xx\",  (value, optional) identities and % of pre-converted amounts from each reserve currency\n \"preallocations\" : \"[{\"identity\":xx.xx}..]\", (list, optional) list of identities and amounts from pre-allocation\n \"gatewayconvertername\" : \"name\", (string, optional) if this is a PBaaS chain, this names a co-launched gateway converter currency\n \"blocktime\"     : n,    (int, optional) target time in seconds to average between blocks (default 60 seconds)\n \"powaveragingwindow\" : n,    (int, optional) total number of blocks to look back when averaging for DAA (default 45 blocks)\n \"notarizationperiod\" : n,    (int, optional) min period miners/stakers must wait to post new notarization to chain (default 10 min at any blocktime)\n \"eras\"     : \"objarray\",  (array, optional) data specific to each era, maximum 3\n {\n  \"reward\"   : n,       (int64, required) native initial block rewards in each period\n  \"decay\"   : n,       (int64, optional) reward decay for each era\n  \"halving\"  : n,       (int,  optional) halving period for each era\n  \"eraend\"   : n,       (int,  optional) ending block of each era\n}\n\"nodes\"     : \"[obj, ..]\", (objectarray, optional) up to 5 nodes that can be used to connect to the blockchain\n [{\n  \"networkaddress\" : \"ip:port\", (string, optional) internet, TOR, or other supported address for node\n  \"nodeidentity\" : \"name@\",   (string, optional) published node identity\n }, .. ]\n}\n```\n#### Result:\n```json\n{\n \"txid\" : \"transactionid\",    (string) The transaction id\n \"tx\"  : \"json\",         (json)  The transaction decoded as a transaction\n \"hex\" : \"data\"         ",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]