[
    "How can I use the `verifyfile` command as a JSON RPC call?",
    "You can use the `verifyfile` command as a JSON RPC call by sending a POST request to the Verus daemon with the following format:\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifyfile\", \"params\": [\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\", \"signature\", \"filepath/filename\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n\nReplace `myusername` with your actual username, and `RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z` with the actual transparent address or identity that signed the file, `signature` with the actual signature, and `filepath/filename` with the actual file path and name.",
    "verifyfile \"address or identity\" \"signature\" \"filepath/filename\" \"checklatest\"\n\nVerify a signed file\n\nArguments:\n1. \"t-addr or identity\" (string, required) The transparent address or identity that signed the file.\n2. \"signature\"    (string, required) The signature provided by the signer in base 64 encoding (see signfile).\n3. \"filename\"    (string, required) The file, which must be available locally to the daemon and that was signed.\n3. \"checklatest\"   (bool, optional)  If true, checks signature validity based on latest identity. defaults to false,\n                     which determines validity of signing height stored in signature.\n\nResult:\ntrue|false  (boolean) If the signature is verified or not.\n\nExamples:\n\nCreate the signature\n> verus signfile \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"filepath/filename\"\n\nVerify the signature\n> verus verifyfile \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"signature\" \"filepath/filename\"\n\nAs json rpc\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifyfile\", \"params\": [\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\", \"signature\", \"filepath/filename\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
    "./raw_text_input_api_text/verifyfile"
]