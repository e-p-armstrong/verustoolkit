[
    [
        [
            "What is the purpose of the `decryptdata` command in Verus?",
            "The `decryptdata` command in Verus is used to decrypt a vdxf data descriptor, which is typically encrypted to a z-address. It attempts to decrypt the data descriptor using the viewing key, and if possible, any nested encryptions.",
            "decryptdata '{\n         \"datadescriptor\": {},\n         \"evk\":\"Optional Sapling extended full viewing key\",\n         \"ivk\":\"Optional hex incoming viewing key\",\n         \"txid\":\"hex\",\n         \"retrieve\": bool\n       }Decrypts a vdxf data descriptor, which is typically encrypted to a z-address. If the viewing key is present, it is decrypted, and any nested encryptions are attempted as well.\nIf either the viewing key or the ssk are correct, the object will be returned with as much decryption as possible completed.\nIf no decryption is possible, this function returns an error.Arguments:\n{\n  \"datadescriptor\": {}                      (object, required) Encrypted data descriptor to decrypt, uses wallet keys included in descriptor\n  \"evk\":\"Sapling extended full viewing key\"           (evk, optional) if known, an extended viewing key to use for decoding that may not be in the descriptor\n  \"ivk\":\"Sapling incoming viewing key hex\"            (ivk, optional) if known, an incoming viewing key to use for decoding\n  \"txid\":\"hex\",                         (txid, optional) if data is from a tx and retrieve is true, this may be needed when the data is on the same tx as the link\n  \"retrieve\": bool                        (bool, optional) Defaults to false. If true and the data passed is an encrypted or unencrypted reference\n                                             on this chain, it retrieves the data from its reference and decrypts if it can\n}Result:Examples:Encrypt data\n> verus signdata '{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'Decrypt data\n> verus decryptdata '{encrypteddatadescriptor}'",
            "./raw_text_input_api_text/decryptdata"
        ],
        [
            "What are the required and optional arguments for the `decryptdata` command?",
            "The required argument for the `decryptdata` command is the `datadescriptor` object, which is the encrypted data descriptor to be decrypted. The optional arguments are:\n\n* `evk`: an extended viewing key to use for decoding\n* `ivk`: an incoming viewing key to use for decoding\n* `txid`: the transaction ID, needed if the data is from a transaction and `retrieve` is true\n* `retrieve`: a boolean flag, defaulting to false, which if true, retrieves the data from its reference and decrypts it if possible",
            "decryptdata '{\n         \"datadescriptor\": {},\n         \"evk\":\"Optional Sapling extended full viewing key\",\n         \"ivk\":\"Optional hex incoming viewing key\",\n         \"txid\":\"hex\",\n         \"retrieve\": bool\n       }Decrypts a vdxf data descriptor, which is typically encrypted to a z-address. If the viewing key is present, it is decrypted, and any nested encryptions are attempted as well.\nIf either the viewing key or the ssk are correct, the object will be returned with as much decryption as possible completed.\nIf no decryption is possible, this function returns an error.Arguments:\n{\n  \"datadescriptor\": {}                      (object, required) Encrypted data descriptor to decrypt, uses wallet keys included in descriptor\n  \"evk\":\"Sapling extended full viewing key\"           (evk, optional) if known, an extended viewing key to use for decoding that may not be in the descriptor\n  \"ivk\":\"Sapling incoming viewing key hex\"            (ivk, optional) if known, an incoming viewing key to use for decoding\n  \"txid\":\"hex\",                         (txid, optional) if data is from a tx and retrieve is true, this may be needed when the data is on the same tx as the link\n  \"retrieve\": bool                        (bool, optional) Defaults to false. If true and the data passed is an encrypted or unencrypted reference\n                                             on this chain, it retrieves the data from its reference and decrypts if it can\n}Result:Examples:Encrypt data\n> verus signdata '{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'Decrypt data\n> verus decryptdata '{encrypteddatadescriptor}'",
            "./raw_text_input_api_text/decryptdata"
        ],
        [
            "What happens if either the viewing key or the ssk are correct when using the `decryptdata` command?",
            "If either the viewing key or the ssk are correct, the object will be returned with as much decryption as possible completed.",
            "decryptdata '{\n         \"datadescriptor\": {},\n         \"evk\":\"Optional Sapling extended full viewing key\",\n         \"ivk\":\"Optional hex incoming viewing key\",\n         \"txid\":\"hex\",\n         \"retrieve\": bool\n       }Decrypts a vdxf data descriptor, which is typically encrypted to a z-address. If the viewing key is present, it is decrypted, and any nested encryptions are attempted as well.\nIf either the viewing key or the ssk are correct, the object will be returned with as much decryption as possible completed.\nIf no decryption is possible, this function returns an error.Arguments:\n{\n  \"datadescriptor\": {}                      (object, required) Encrypted data descriptor to decrypt, uses wallet keys included in descriptor\n  \"evk\":\"Sapling extended full viewing key\"           (evk, optional) if known, an extended viewing key to use for decoding that may not be in the descriptor\n  \"ivk\":\"Sapling incoming viewing key hex\"            (ivk, optional) if known, an incoming viewing key to use for decoding\n  \"txid\":\"hex\",                         (txid, optional) if data is from a tx and retrieve is true, this may be needed when the data is on the same tx as the link\n  \"retrieve\": bool                        (bool, optional) Defaults to false. If true and the data passed is an encrypted or unencrypted reference\n                                             on this chain, it retrieves the data from its reference and decrypts if it can\n}Result:Examples:Encrypt data\n> verus signdata '{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'Decrypt data\n> verus decryptdata '{encrypteddatadescriptor}'",
            "./raw_text_input_api_text/decryptdata"
        ],
        [
            "What if no decryption is possible when using the `decryptdata` command?",
            "If no decryption is possible, the `decryptdata` command will return an error.",
            "decryptdata '{\n         \"datadescriptor\": {},\n         \"evk\":\"Optional Sapling extended full viewing key\",\n         \"ivk\":\"Optional hex incoming viewing key\",\n         \"txid\":\"hex\",\n         \"retrieve\": bool\n       }Decrypts a vdxf data descriptor, which is typically encrypted to a z-address. If the viewing key is present, it is decrypted, and any nested encryptions are attempted as well.\nIf either the viewing key or the ssk are correct, the object will be returned with as much decryption as possible completed.\nIf no decryption is possible, this function returns an error.Arguments:\n{\n  \"datadescriptor\": {}                      (object, required) Encrypted data descriptor to decrypt, uses wallet keys included in descriptor\n  \"evk\":\"Sapling extended full viewing key\"           (evk, optional) if known, an extended viewing key to use for decoding that may not be in the descriptor\n  \"ivk\":\"Sapling incoming viewing key hex\"            (ivk, optional) if known, an incoming viewing key to use for decoding\n  \"txid\":\"hex\",                         (txid, optional) if data is from a tx and retrieve is true, this may be needed when the data is on the same tx as the link\n  \"retrieve\": bool                        (bool, optional) Defaults to false. If true and the data passed is an encrypted or unencrypted reference\n                                             on this chain, it retrieves the data from its reference and decrypts if it can\n}Result:Examples:Encrypt data\n> verus signdata '{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'Decrypt data\n> verus decryptdata '{encrypteddatadescriptor}'",
            "./raw_text_input_api_text/decryptdata"
        ],
        [
            "Can you provide an example of how to use the `decryptdata` command?",
            "Here is an example of how to use the `decryptdata` command:\n```\nverus decryptdata '{encrypteddatadescriptor}'\n```\nThis command will attempt to decrypt the provided `encrypteddatadescriptor`.",
            "decryptdata '{\n         \"datadescriptor\": {},\n         \"evk\":\"Optional Sapling extended full viewing key\",\n         \"ivk\":\"Optional hex incoming viewing key\",\n         \"txid\":\"hex\",\n         \"retrieve\": bool\n       }Decrypts a vdxf data descriptor, which is typically encrypted to a z-address. If the viewing key is present, it is decrypted, and any nested encryptions are attempted as well.\nIf either the viewing key or the ssk are correct, the object will be returned with as much decryption as possible completed.\nIf no decryption is possible, this function returns an error.Arguments:\n{\n  \"datadescriptor\": {}                      (object, required) Encrypted data descriptor to decrypt, uses wallet keys included in descriptor\n  \"evk\":\"Sapling extended full viewing key\"           (evk, optional) if known, an extended viewing key to use for decoding that may not be in the descriptor\n  \"ivk\":\"Sapling incoming viewing key hex\"            (ivk, optional) if known, an incoming viewing key to use for decoding\n  \"txid\":\"hex\",                         (txid, optional) if data is from a tx and retrieve is true, this may be needed when the data is on the same tx as the link\n  \"retrieve\": bool                        (bool, optional) Defaults to false. If true and the data passed is an encrypted or unencrypted reference\n                                             on this chain, it retrieves the data from its reference and decrypts if it can\n}Result:Examples:Encrypt data\n> verus signdata '{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'Decrypt data\n> verus decryptdata '{encrypteddatadescriptor}'",
            "./raw_text_input_api_text/decryptdata"
        ]
    ],
    "will",
    "be",
    "replaced",
    "8f7efee1-0bb9-4b49-931d-8bdb79c18057"
]