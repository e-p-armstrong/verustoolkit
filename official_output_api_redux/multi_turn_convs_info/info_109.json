[
    [
        [
            "What is the purpose of the `verifychain` command in Verus?",
            "The `verifychain` command is used to verify the blockchain database in Verus. It checks the integrity of the blockchain by verifying the blocks in the database.",
            "verifychain ( checklevel numblocks )\n\nVerifies blockchain database.\n\nArguments:\n1. checklevel  (numeric, optional, 0-4, default=3) How thorough the block verification is.\n2. numblocks  (numeric, optional, default=288, 0=all) The number of blocks to check.\n\nResult:\ntrue|false    (boolean) Verified or not\n\nExamples:\n> verus verifychain \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/verifychain"
        ],
        [
            "What are the arguments that can be passed to the `verifychain` command?",
            "The `verifychain` command takes two optional arguments: `checklevel` and `numblocks`.\n\n* `checklevel` is a numeric value between 0 and 4 that determines how thorough the block verification is. The default value is 3.\n* `numblocks` is a numeric value that specifies the number of blocks to check. The default value is 288, and a value of 0 means to check all blocks.",
            "verifychain ( checklevel numblocks )\n\nVerifies blockchain database.\n\nArguments:\n1. checklevel  (numeric, optional, 0-4, default=3) How thorough the block verification is.\n2. numblocks  (numeric, optional, default=288, 0=all) The number of blocks to check.\n\nResult:\ntrue|false    (boolean) Verified or not\n\nExamples:\n> verus verifychain \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/verifychain"
        ],
        [
            "What is the result of running the `verifychain` command?",
            "The result of running the `verifychain` command is a boolean value indicating whether the blockchain was verified successfully (`true`) or not (`false`).",
            "verifychain ( checklevel numblocks )\n\nVerifies blockchain database.\n\nArguments:\n1. checklevel  (numeric, optional, 0-4, default=3) How thorough the block verification is.\n2. numblocks  (numeric, optional, default=288, 0=all) The number of blocks to check.\n\nResult:\ntrue|false    (boolean) Verified or not\n\nExamples:\n> verus verifychain \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/verifychain"
        ],
        [
            "How can I use the `verifychain` command to verify my blockchain database?",
            "You can use the `verifychain` command by running it in the Verus command-line interface or by sending a JSON-RPC request to the Verus server. The command can be used with or without arguments, depending on your specific needs. For example, you can run `verus verifychain` to verify the blockchain with the default settings, or you can specify custom values for `checklevel` and `numblocks` to customize the verification process.",
            "verifychain ( checklevel numblocks )\n\nVerifies blockchain database.\n\nArguments:\n1. checklevel  (numeric, optional, 0-4, default=3) How thorough the block verification is.\n2. numblocks  (numeric, optional, default=288, 0=all) The number of blocks to check.\n\nResult:\ntrue|false    (boolean) Verified or not\n\nExamples:\n> verus verifychain \n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifychain\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/verifychain"
        ]
    ],
    "will",
    "be",
    "replaced",
    "03f36fca-1d95-4962-8dc8-1bfff0c37e80"
]