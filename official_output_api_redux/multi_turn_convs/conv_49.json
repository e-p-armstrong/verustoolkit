[
    "## Conversation that answers the provided questions:\n**User:**\nHey, I'm trying to figure out how to use the `sendrawtransaction` command in Verus. Can you tell me what it's for?\n\n**AI Assistant:**\nThe `sendrawtransaction` command submits a raw transaction (serialized, hex-encoded) to the local node and network. It takes a hex string of the raw transaction as an argument and returns the transaction hash in hex.\n\n**User:**\nThat makes sense. What arguments do I need to provide for the `sendrawtransaction` command?\n\n**AI Assistant:**\nThe `sendrawtransaction` command requires two arguments: \n1. \"hexstring\" (string, required): The hex string of the raw transaction.\n2. allowhighfees (boolean, optional, default=false): Allow high fees.\n\n**User:**\nGot it! So, how do I actually use the `sendrawtransaction` command to send a signed transaction?\n\n**AI Assistant:**\nTo send a signed transaction using the `sendrawtransaction` command, you need to follow these steps:\n1. Create a transaction using the `createrawtransaction` command.\n2. Sign the transaction using the `signrawtransaction` command.\n3. Send the signed transaction using the `sendrawtransaction` command, passing the signed hex string as an argument.\n\n**User:**\nThat's helpful. Can I use the `sendrawtransaction` command as a JSON RPC call?\n\n**AI Assistant:**\nYes, you can use the `sendrawtransaction` command as a JSON RPC call. The format of the call would be:\n\n`curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/`\n\nReplace \"myusername\" with your actual username and \"signedhex\" with the signed hex string of the transaction.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What is the purpose of the `sendrawtransaction` command in Verus?",
            "The `sendrawtransaction` command submits a raw transaction (serialized, hex-encoded) to the local node and network. It takes a hex string of the raw transaction as an argument and returns the transaction hash in hex.",
            "sendrawtransaction \"hexstring\" ( allowhighfees )\n\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\n\nAlso see createrawtransaction and signrawtransaction calls.\n\nArguments:\n1. \"hexstring\"  (string, required) The hex string of the raw transaction)\n2. allowhighfees  (boolean, optional, default=false) Allow high fees\n\nResult:\n\"hex\"       (string) The transaction hash in hex\n\nExamples:\n\nCreate a transaction\n> verus createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"\nSign the transaction, and get back the hex\n> verus signrawtransaction \"myhex\"\n\nSend the transaction (signed hex)\n> verus sendrawtransaction \"signedhex\"\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/sendrawtransaction"
        ],
        [
            "What are the arguments required for the `sendrawtransaction` command?",
            "The `sendrawtransaction` command requires two arguments:\n\n1. \"hexstring\" (string, required): The hex string of the raw transaction.\n2. allowhighfees (boolean, optional, default=false): Allow high fees.",
            "sendrawtransaction \"hexstring\" ( allowhighfees )\n\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\n\nAlso see createrawtransaction and signrawtransaction calls.\n\nArguments:\n1. \"hexstring\"  (string, required) The hex string of the raw transaction)\n2. allowhighfees  (boolean, optional, default=false) Allow high fees\n\nResult:\n\"hex\"       (string) The transaction hash in hex\n\nExamples:\n\nCreate a transaction\n> verus createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"\nSign the transaction, and get back the hex\n> verus signrawtransaction \"myhex\"\n\nSend the transaction (signed hex)\n> verus sendrawtransaction \"signedhex\"\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/sendrawtransaction"
        ],
        [
            "How do I use the `sendrawtransaction` command to send a signed transaction?",
            "To send a signed transaction using the `sendrawtransaction` command, you need to follow these steps:\n\n1. Create a transaction using the `createrawtransaction` command.\n2. Sign the transaction using the `signrawtransaction` command.\n3. Send the signed transaction using the `sendrawtransaction` command, passing the signed hex string as an argument.",
            "sendrawtransaction \"hexstring\" ( allowhighfees )\n\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\n\nAlso see createrawtransaction and signrawtransaction calls.\n\nArguments:\n1. \"hexstring\"  (string, required) The hex string of the raw transaction)\n2. allowhighfees  (boolean, optional, default=false) Allow high fees\n\nResult:\n\"hex\"       (string) The transaction hash in hex\n\nExamples:\n\nCreate a transaction\n> verus createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"\nSign the transaction, and get back the hex\n> verus signrawtransaction \"myhex\"\n\nSend the transaction (signed hex)\n> verus sendrawtransaction \"signedhex\"\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/sendrawtransaction"
        ],
        [
            "Can I use the `sendrawtransaction` command as a JSON RPC call?",
            "Yes, you can use the `sendrawtransaction` command as a JSON RPC call. The format of the call would be:\n\n`curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/`\n\nReplace \"myusername\" with your actual username and \"signedhex\" with the signed hex string of the transaction.",
            "sendrawtransaction \"hexstring\" ( allowhighfees )\n\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\n\nAlso see createrawtransaction and signrawtransaction calls.\n\nArguments:\n1. \"hexstring\"  (string, required) The hex string of the raw transaction)\n2. allowhighfees  (boolean, optional, default=false) Allow high fees\n\nResult:\n\"hex\"       (string) The transaction hash in hex\n\nExamples:\n\nCreate a transaction\n> verus createrawtransaction \"[{\"txid\" : \"mytxid\",\"vout\":0}]\" \"{\"myaddress\":0.01}\"\nSign the transaction, and get back the hex\n> verus signrawtransaction \"myhex\"\n\nSend the transaction (signed hex)\n> verus sendrawtransaction \"signedhex\"\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/sendrawtransaction"
        ]
    ]
]