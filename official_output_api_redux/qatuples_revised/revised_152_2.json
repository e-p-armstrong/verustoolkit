[
    "What is the difference between the result formats of the `getrawtransaction` command when `verbose` is 0 and when it is non-zero?",
    "When `verbose` is 0, the `getrawtransaction` command returns a string that is the serialized, hex-encoded data for the transaction ID. When `verbose` is non-zero, the command returns a JSON object with detailed information about the transaction, including the transaction ID, version, lock time, expiration height, inputs, and outputs.",
    "getrawtransaction \"txid\" ( verbose )NOTE: By default this function only works sometimes. This is when the tx is in the mempool\nor there is an unspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option.Return the raw transaction data.If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.\nIf verbose is non-zero, returns an Object with information about 'txid'.Arguments:\n1. \"txid\"   (string, required) The transaction id\n2. verbose    (numeric, optional, default=0) If 0, return a string, other return a json objectResult (if verbose is not set or set to 0):\n\"data\"   (string) The serialized, hex-encoded data for 'txid'Result (if verbose > 0):\n{\n \"hex\" : \"data\",    (string) The serialized, hex-encoded data for 'txid'\n \"txid\" : \"id\",    (string) The transaction id (same as provided)\n \"version\" : n,     (numeric) The version\n \"locktime\" : ttt,    (numeric) The lock time\n \"expiryheight\" : ttt,  (numeric, optional) The block height after which the transaction expires\n \"vin\" : [        (array of json objects)\n   {\n    \"txid\": \"id\",  (string) The transaction id\n    \"vout\": n,     (numeric) \n    \"scriptSig\": {   (json object) The script\n     \"asm\": \"asm\", (string) asm\n     \"hex\": \"hex\"  (string) hex\n    },\n    \"sequence\": n   (numeric) The script sequence number\n   }\n   ,...\n ],\n \"vout\" : [       (array of json objects)\n   {\n    \"value\" : x.xxx,      (numeric) The value in VRSC\n    \"n\" : n,          (numeric) index\n    \"scriptPubKey\" : {     (json object)\n     \"asm\" : \"asm\",     (string) the asm\n     \"hex\" : \"hex\",     (string) the hex\n     \"reqSigs\" : n,      (numeric) The required sigs\n     \"type\" : \"pubkeyhash\"",
    "./raw_text_input_api_text/getrawtransaction"
]