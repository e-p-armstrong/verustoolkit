[
    "What does the \"proofprotocol\" field control in Verus, and what are the different options for this field?",
    "The \"proofprotocol\" field controls the proof protocol used by the identity. There are three options:\n\n1. PROOF_PBAASMMR (1): uses Verus MMR proof, and no notaries are required.\n2. PROOF_CHAINID (2): allows for centralized control of the currency, and the controller can mint, burn, and change weights.\n3. PROOF_ETHNOTARIZATION (3): uses ETH and PATRICIA TRIE proof, but requires a full understanding of C++, JavaScript, and Solidity development.\n\nEach proof protocol has its own implications for the identity and its usage.",
    "\"name\" : \"xxxx\",       (string, required) name of existing identity with no active or pending blockchain\n     \"idregistrationfees\" : \"xx.xx\", (value, required) price of an identity in native currency\n     \"idreferrallevels\" : n,     (int, required) how many levels ID referrals go back in reward\n     \"notaries\" : \"[identity,..]\", (list, optional) list of identities that are assigned as chain notaries\n     \"minnotariesconfirm\" : n,    (int, optional) unique notary signatures required to confirm an auto-notarization\n     \"notarizationreward\" : \"xx.xx\", (value, required) default VRSC notarization reward total for first billing period\n     \"proofprotocol\" : n,      (int,  optional) if 2, currency can be minted by whoever controls the ID\n                              1 = PROOF_PBAASMMR - Verus MMR proof, no notaries required\n                              2 = PROOF_CHAINID - non-native only - currency has centralized control, and\n                                        can mint/burn & change weights\n                              3 = PROOF_ETHNOTARIZATION - ETH & PATRICIA TRIE proof (do not attempt without\n                                            full understanding + C++, JavaScript & Solidity dev(s))",
    "./raw_text_input_api_text/definecurrency"
]