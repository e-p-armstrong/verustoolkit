signdata '{"address":"i-address or friendly name to sign with (t-address will result in simple signature w/indicated hash and prefix, nothing else)",
           "prefixstring":"extra string that is hashed during signature and must be supplied for verification",
             "filename":"filepath/filename" |
             "message":"any message" |
             "vdxfdata":"vdxf encoded data" |
             "messagehex":"hexdata" |
             "messagebase64":"base64data" |
             "datahash":"256bithex" |
             "mmrdata":[{"filename | serializedhex | serializedbase64 | vdxfdata | message | datahash":"str"} | "strdata"],
             "mmrsalt":[array of "salt" to match the mmrdata],
             "mmrhash":"sha256" | "sha256D" | "blake2b" | "keccak256",
             "priormmr":"[array of mmr hashes prior to this data and optional prior tx reference for rev-linked MMR data]",           "vdxfkeys":["vdxfkey i-address", ...],
           "vdxfkeynames":["vdxfkeyname, object for getvdxfid API, or friendly name ID -- no i-addresses", ...],
           "boundhashes":["hexhash", ...],
           "hashtype": "sha256" | "sha256D" | "blake2b" | "keccak256",
           "encrypttoaddress": "sapling address",              granularly encrypt all data, either all decryptable with viewing key or parts using unique, SSKs
           "createmmr":"bool",                                 if true, 1 or more objects will be put into a merkle mountain range and the root signed
           "signature":"currentsig"}'


Generates a hash (SHA256 default if "hashtype" not specified) of the data, returns the hash, and signs it with parameters specified

Arguments:
{
  "address":"t-addr or identity"                               (string, required) The transparent address or identity to use for signing.
  "filename" | "message" | "messagehex" | "messagebase64" | "datahash" (string, optional) Data to sign
  "mmrdata":[{"filename | vdxfdata | message | serializedhex | serializedbase64 | datahash":"str"}], (array, optional) Alternate to single data parameters, this enables an MMR signing
             "mmrsalt":["salt":"str"],                       (string, optional) Protects privacy of leaf nodes of the MMR
             "mmrhashtype":"sha256" | "sha256D" | "blake2b" | "keccak256", (string, optional) Default is blake2b
             "priormmr":"[{"idxhash":,"utxoref":{}}]",   (array, optional)  When growing an MMR, the prior hashes can be used to construct the MMR and root w/o data
  "vdxfkeys":["vdxfkey", ...],                                 (array, optional)  Array of vdxfkeys or ID i-addresses
  "vdxfkeynames":["vdxfkeyname", ...],                         (array, optional)  Array of vdxfkey names or fully qualified friendly IDs
  "boundhashes":["hexhash", ...],                              (array, optional)  Array of bound hash values
  "hashtype":"str",                                            (string, optional) one of: "sha256", "sha256D", "blake2b", "keccak256", defaults to sha256
  "signature":"base64str",                                     (string, optional) The current signature of the message encoded in base 64 if multisig ID
  "encrypttoaddress":"saplingaddress",                         (string, optional) If present, encrypts and optionally returns encrypted data.
                                                                                   All data can be decrypted with the incoming viewing key, and a unique decryption key can
                                                                                   be generated for each sub-object.
  "createmmr":"bool",                                          (bool, optional)   If this is true, OR there is more than one item to sign, returns processed data, MMRs, and root signature
}

Result:
{
  "hash":"hexhash"         (string) The hash of the message or null and returns "hashes", an array of hashes for an MMR
  "hashes":["hexhash"]     (array)  Array of hashes for an MMR, alternate to "hash"
  "mmrroot":"hexstr"       (string) Only returned when passed an array for signing root hash of the merkle mountain range of the objects signed
  "vdxfkeys":["vdxfkey i-address", ...],
  "vdxfkeynames":["vdxfkeyname, object for getvdxfid API, or friendly name ID -- no i-addresses", ...],
  "boundhashes":["hexhash", ...],
  "hashtype": "sha256" | "sha256D" | "blake2b" | "keccak256"
  "signature":"base64sig"  (string) The aggregate signature of the message or mmrroot encoded in base 64 if all or partial signing successful for MMR, it is of root
  ""}

Examples:

Create the signature
> verus signdata '{"address":"Verus Coin Foundation.vrsc@", "message":"hello world"}'

Verify the signature
> verus verifysignature '{"address":"Verus Coin Foundation.vrsc@", "message":"hello world", "signature":"base64sig"}'

As json rpc
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "signdata", "params": ['{"address":"Verus Coin Foundation.vrsc@", "message":"hello world"}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/