definecurrency '{"name": "coinortokenname", ..., "nodes":[{"networkaddress":"identity"},..]}'\
                '({"name": "fractionalgatewayname", ..., })' ({"name": "reserveonename", ..., }) ...

This defines a blockchain currency, either as an independent blockchain, or as a token on this blockchain. It also spends
the identity after which this currency is named and sets a bit indicating that it has a currently active blockchain in its name.

To create a currency of any kind, the identity it is named after must be minted on the blockchain on which the currency is created.
Once a currency is activated for an identity name, the same symbol may not be reused for another currency or blockchain, even
if the identity is transferred, revoked or recovered, unless there is an endblock specified and the currency or blockchain has
deactivated as of that end block.

All funds to start the currency and for initial conversion amounts must be available to spend from the identity with the same
name and ID as the currency being defined.

Arguments
      {
         "options" : n,                  (int,    optional) bits (in hexadecimal):
                                                             1 = FRACTIONAL
                                                             2 = IDRESTRICTED
                                                             4 = IDSTAKING
                                                             8 = IDREFERRALS
                                                             0x10 = IDREFERRALSREQUIRED
                                                             0x20 = TOKEN
                                                             0x40 = RESERVED
                                                             0x100 = IS_PBAAS_CHAIN

         "name" : "xxxx",              (string, required) name of existing identity with no active or pending blockchain
         "idregistrationfees" : "xx.xx", (value, required) price of an identity in native currency
         "idreferrallevels" : n,         (int, required) how many levels ID referrals go back in reward
         "notaries" : "[identity,..]", (list, optional) list of identities that are assigned as chain notaries
         "minnotariesconfirm" : n,       (int, optional) unique notary signatures required to confirm an auto-notarization
         "notarizationreward" : "xx.xx", (value,  required) default VRSC notarization reward total for first billing period
         "proofprotocol" : n,            (int,    optional) if 2, currency can be minted by whoever controls the ID
                                                           1 = PROOF_PBAASMMR - Verus MMR proof, no notaries required
                                                           2 = PROOF_CHAINID - non-native only - currency has centralized control, and
                                                                               can mint/burn & change weights
                                                           3 = PROOF_ETHNOTARIZATION - ETH & PATRICIA TRIE proof (do not attempt without
                                                                                       full understanding + C++, JavaScript & Solidity dev(s))

         "notarizationprotocol" : n,            (int,    optional) if 2, currency can be minted by whoever controls the ID
                                                           1 = PROOF_PBAASMMR - Verus MMR proof, no notaries required
                                                           2 = PROOF_CHAINID - chain ID is sole notary for proof, no evidence required
                                                           3 = PROOF_ETHNOTARIZATION - Ethereum notarization & PATRICIA TRIE proof

         "expiryheight"  : n,            (int,    optional) block height at which the transaction expires, default: curheight + 20
         "startblock"    : n,            (int,    optional) VRSC block must be notarized into block 1 of PBaaS chain, default: expiryheight
         "endblock"      : n,            (int,    optional) chain or currency intended to end life after this height, 0 = no end
         "currencies"    : "["VRSC",..]", (list, optional) reserve currencies backing this chain in equal amounts
         "weights"       : "["xx.xx",..]", (list, optional) the weight of each reserve currency in a fractional currency
         "conversions"   : "["xx.xx",..]", (list, optional) if present, must be same size as currencies. pre-launch conversion ratio overrides
         "minpreconversion" : "["xx.xx",..]", (list, optional) must be same size as currencies. minimum in each currency to launch
         "maxpreconversion" : "["xx.xx",..]", (list, optional) maximum in each currency allowed
         "initialcontributions" : "["xx.xx",..]", (list, optional) initial contribution in each currency
         "prelaunchdiscount" : "xx.xx" (value, optional) for fractional reserve currencies less than 100%, discount on final price at launch
         "initialsupply" : "xx.xx"    (value, required for fractional) supply after conversion of contributions, before preallocation
         "prelaunchcarveout" : "0.xx", (value, optional) identities and % of pre-converted amounts from each reserve currency
         "preallocations" : "[{"identity":xx.xx}..]", (list, optional)  list of identities and amounts from pre-allocation
         "gatewayconvertername" : "name", (string, optional) if this is a PBaaS chain, this names a co-launched gateway converter currency
         "blocktime"          : n, (int, optional) target time in seconds to average between blocks (default 60 seconds)
         "powaveragingwindow" : n, (int, optional) total number of blocks to look back when averaging for DAA (default 45 blocks)
         "notarizationperiod" : n, (int, optional) min period miners/stakers must wait to post new notarization to chain (default 10 min at any blocktime)
         "eras"          : "objarray", (array, optional) data specific to each era, maximum 3
         {
            "reward"     : n,           (int64,  required) native initial block rewards in each period
            "decay"      : n,           (int64,  optional) reward decay for each era
            "halving"    : n,           (int,    optional) halving period for each era
            "eraend"     : n,           (int,    optional) ending block of each era
         }
         "nodes"         : "[obj, ..]", (objectarray, optional) up to 5 nodes that can be used to connect to the blockchain         [{
            "networkaddress" : "ip:port", (string,  optional) internet or other supported address for node
            "nodeidentity" : "name@",  (string, optional) published node identity
         }, .. ]
      }

Result:
{
  "txid" : "transactionid", (string) The transaction id
  "tx"   : "json",          (json)   The transaction decoded as a transaction
  "hex"  : "data"           (string) Raw data for signed transaction
}

Examples:
> verus definecurrency jsondefinition
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "definecurrency", "params": [jsondefinition] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/