[
    [
        [
            "How do you validate a Bitcoin address using the `z_validateaddress` command?",
            "The `z_validateaddress` command is not used to validate Bitcoin addresses. It is used to validate Zcash-style addresses, specifically those starting with \"zc\". The command returns information about the address, including its type (sprout or sapling), whether it is a valid address, and other details related to Zcash addresses.",
            "#### Result:\n```\n{\n \"isvalid\" : true|false,   (boolean) If the address is valid or not. If not, this is the only property returned.\n \"address\" : \"zaddr\",     (string) The z address validated\n \"type\" : \"xxxx\",       (string) \"sprout\" or \"sapling\"\n \"ismine\" : true|false,    (boolean) If the address is yours or not\n \"payingkey\" : \"hex\",     (string) [sprout] The hex value of the paying key, a_pk\n \"transmissionkey\" : \"hex\",  (string) [sprout] The hex value of the transmission key, pk_enc\n \"diversifier\" : \"hex\",    (string) [sapling] The hex value of the diversifier, d\n \"diversifiedtransmissionkey\" : \"hex\", (string) [sapling] The hex value of pk_d\n}\n```\nExamples:\n```bash\n> verus z_validateaddress \"zcWsmqT4X2V4jgxbgiCzyrAfRT1vi1F4sn7M5Pkh66izzw8Uk7LBGAH3DtcSMJeUb2pi3W4SQF8LMKkU2cUuVP68yAGcomL\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_validateaddress\", \"params\": [\"zcWsmqT4X2V4jgxbgiCzyrAfRT1vi1F4sn7M5Pkh66izzw8Uk7LBGAH3DtcSMJeUb2pi3W4SQF8LMKkU2cUuVP68yAGcomL\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n## VDXF\n### `getvdxfid \"vdxfuri\" '{\"vdxfkey\":\"i-address or vdxfkey\", \"uint256\":\"hexstr\", \"indexnum\":0}'`\nReturns the VDXF key of the URI string. For example \"vrsc::system.currency.export\"#### Arguments:\n \"vdxfuri\"      (string, required) This message is converted from hex, the data is hashed, then returned\n```json\n{\n \"vdxfkey\":\"i-address or vdxfkey\"   (string, optional) VDXF key or i-address to combine via hash\n \"uint256\":\"32bytehex\"        (hexstr, optional) 256 bit hash to combine with hash\n \"indexnum\":int            (integer, optional) int32_t number to combine with hash\n}\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "Can you use the `z_validateaddress` command to validate a VDXF key?",
            "No, the `z_validateaddress` command is used to validate Zcash-style addresses, not VDXF keys. The `getvdxfid` command is used to work with VDXF keys and URIs, and it has a different purpose and syntax than the `z_validateaddress` command.",
            "#### Result:\n```\n{\n \"isvalid\" : true|false,   (boolean) If the address is valid or not. If not, this is the only property returned.\n \"address\" : \"zaddr\",     (string) The z address validated\n \"type\" : \"xxxx\",       (string) \"sprout\" or \"sapling\"\n \"ismine\" : true|false,    (boolean) If the address is yours or not\n \"payingkey\" : \"hex\",     (string) [sprout] The hex value of the paying key, a_pk\n \"transmissionkey\" : \"hex\",  (string) [sprout] The hex value of the transmission key, pk_enc\n \"diversifier\" : \"hex\",    (string) [sapling] The hex value of the diversifier, d\n \"diversifiedtransmissionkey\" : \"hex\", (string) [sapling] The hex value of pk_d\n}\n```\nExamples:\n```bash\n> verus z_validateaddress \"zcWsmqT4X2V4jgxbgiCzyrAfRT1vi1F4sn7M5Pkh66izzw8Uk7LBGAH3DtcSMJeUb2pi3W4SQF8LMKkU2cUuVP68yAGcomL\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_validateaddress\", \"params\": [\"zcWsmqT4X2V4jgxbgiCzyrAfRT1vi1F4sn7M5Pkh66izzw8Uk7LBGAH3DtcSMJeUb2pi3W4SQF8LMKkU2cUuVP68yAGcomL\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n## VDXF\n### `getvdxfid \"vdxfuri\" '{\"vdxfkey\":\"i-address or vdxfkey\", \"uint256\":\"hexstr\", \"indexnum\":0}'`\nReturns the VDXF key of the URI string. For example \"vrsc::system.currency.export\"#### Arguments:\n \"vdxfuri\"      (string, required) This message is converted from hex, the data is hashed, then returned\n```json\n{\n \"vdxfkey\":\"i-address or vdxfkey\"   (string, optional) VDXF key or i-address to combine via hash\n \"uint256\":\"32bytehex\"        (hexstr, optional) 256 bit hash to combine with hash\n \"indexnum\":int            (integer, optional) int32_t number to combine with hash\n}\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "8d521906-83ff-4516-88a6-dbe5040d3f47"
]