[
    [
        [
            "Can you explain how to use the `z_gettreestate` command to verify a transaction proof?",
            "The `z_gettreestate` command is not used to verify a transaction proof. The `verifytxoutproof` command is used to verify that a proof points to a transaction in a block, returning the transaction it commits to and throwing an RPC error if the block is not in our best chain. The `z_gettreestate` command is used to return information about the given block's tree state.",
            "### `verifytxoutproof \"proof\"`\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\nand throwing an RPC error if the block is not in our best chain#### Arguments:\n```\n1. \"proof\"  (string, required) The hex-encoded proof generated by gettxoutproof\n```\n#### Result:\n```json\n[\"txid\"]   (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid\n```### `z_gettreestate \"hash|height\"`\nReturn information about the given block's tree state.#### Arguments:\n1. \"hash|height\"     (string, required) The block hash or height. Height can be negative where -1 is the last known valid block#### Result:\n```json\n{\n \"hash\": \"hash\",     (string) hex block hash\n \"height\": n,      (numeric) block height\n \"sprout\": {\n  \"skipHash\": \"hash\",  (string) hash of most recent block with more information\n  \"commitments\": {\n   \"finalRoot\": \"hex\", (string)\n   \"finalState\": \"hex\" (string)\n  }\n },\n \"sapling\": {\n  \"skipHash\": \"hash\",  (string) hash of most recent block with more information\n  \"commitments\": {\n   \"finalRoot\": \"hex\", (string)\n   \"finalState\": \"hex\" (string)\n  }\n }\n}\n```Examples:\n```bash\n> verus z_gettreestate \"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_gettreestate\", \"params\": [\"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n> verus z_gettreestate 12800\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_gettreestate\", \"params\": [12800] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "What is the result of the `verifytxoutproof` command if the proof is valid?",
            "The result of the `verifytxoutproof` command if the proof is valid is not an empty array. Instead, it returns an array of txid(s) which the proof commits to. If the proof is invalid, it returns an empty array.",
            "### `verifytxoutproof \"proof\"`\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\nand throwing an RPC error if the block is not in our best chain#### Arguments:\n```\n1. \"proof\"  (string, required) The hex-encoded proof generated by gettxoutproof\n```\n#### Result:\n```json\n[\"txid\"]   (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid\n```### `z_gettreestate \"hash|height\"`\nReturn information about the given block's tree state.#### Arguments:\n1. \"hash|height\"     (string, required) The block hash or height. Height can be negative where -1 is the last known valid block#### Result:\n```json\n{\n \"hash\": \"hash\",     (string) hex block hash\n \"height\": n,      (numeric) block height\n \"sprout\": {\n  \"skipHash\": \"hash\",  (string) hash of most recent block with more information\n  \"commitments\": {\n   \"finalRoot\": \"hex\", (string)\n   \"finalState\": \"hex\" (string)\n  }\n },\n \"sapling\": {\n  \"skipHash\": \"hash\",  (string) hash of most recent block with more information\n  \"commitments\": {\n   \"finalRoot\": \"hex\", (string)\n   \"finalState\": \"hex\" (string)\n  }\n }\n}\n```Examples:\n```bash\n> verus z_gettreestate \"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_gettreestate\", \"params\": [\"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n> verus z_gettreestate 12800\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_gettreestate\", \"params\": [12800] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "Can you use the `z_gettreestate` command to get information about a specific transaction?",
            "No, the `z_gettreestate` command is not used to get information about a specific transaction. It is used to return information about the given block's tree state, such as the block hash, height, and commitment information for Sprout and Sapling.",
            "### `verifytxoutproof \"proof\"`\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\nand throwing an RPC error if the block is not in our best chain#### Arguments:\n```\n1. \"proof\"  (string, required) The hex-encoded proof generated by gettxoutproof\n```\n#### Result:\n```json\n[\"txid\"]   (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid\n```### `z_gettreestate \"hash|height\"`\nReturn information about the given block's tree state.#### Arguments:\n1. \"hash|height\"     (string, required) The block hash or height. Height can be negative where -1 is the last known valid block#### Result:\n```json\n{\n \"hash\": \"hash\",     (string) hex block hash\n \"height\": n,      (numeric) block height\n \"sprout\": {\n  \"skipHash\": \"hash\",  (string) hash of most recent block with more information\n  \"commitments\": {\n   \"finalRoot\": \"hex\", (string)\n   \"finalState\": \"hex\" (string)\n  }\n },\n \"sapling\": {\n  \"skipHash\": \"hash\",  (string) hash of most recent block with more information\n  \"commitments\": {\n   \"finalRoot\": \"hex\", (string)\n   \"finalState\": \"hex\" (string)\n  }\n }\n}\n```Examples:\n```bash\n> verus z_gettreestate \"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_gettreestate\", \"params\": [\"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n> verus z_gettreestate 12800\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_gettreestate\", \"params\": [12800] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "c2c08463-6ab6-436e-b7de-5f37df2cbaf7"
]