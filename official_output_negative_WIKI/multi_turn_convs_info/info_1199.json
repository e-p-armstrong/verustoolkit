[
    [
        [
            "Can you explain why the `createrawtransaction` command stores the transaction in the wallet and transmits it to the network?",
            "The `createrawtransaction` command does not store the transaction in the wallet and transmit it to the network. In fact, the command returns a hex-encoded raw transaction, but the transaction's inputs are not signed, and it is not stored in the wallet or transmitted to the network. The command is used to create a transaction spending the given inputs and sending to the given addresses, but it does not complete the transaction or broadcast it to the network.",
            "### `createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,...} ( locktime ) ( expiryheight )`\nCreate a transaction spending the given inputs and sending to the given addresses.\nReturns hex-encoded raw transaction.\nNote that the transaction's inputs are not signed, and\nit is not stored in the wallet or transmitted to the network.#### Arguments:\n1. \"transactions\"    (string, required) A json array of json objects\n```json\n   [\n    {\n     \"txid\":\"id\",  (string, required) The transaction id\n     \"vout\":n    (numeric, required) The output number\n     \"sequence\":n  (numeric, optional) The sequence number\n    }\n    ,...\n   ]\n```\n2. \"addresses\"      (string, required) a json object with addresses as keys and amounts as values\n```json\n  {\n   \"address\": x.xxx  (numeric, required) The key is the Komodo address, the value is the VRSC amount\n   ,...\n  }\n```\n3. locktime       (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\n4. expiryheight     (numeric, optional, default=nextblockheight+20 (pre-Blossom) or nextblockheight+40 (post-Blossom)) Expiry height of transaction (if Overwinter is active)#### Result:\n\"transaction\"      (string) hex string of the transactionExamples\n```bash\n> verus createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":0.01}\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"{\\\"address\\\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `decoderawtransaction \"hexstring\"`\nReturn a JSON object representing the serialized, hex-encoded transaction.#### Arguments:\n1. \"hex\"   (string, required) The transaction hex string#### Result:\n```json\n{\n \"txid\" : \"id\",    (string) The transaction id\n \"o",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "How do I use the `decoderawtransaction` command to create a new transaction?",
            "The `decoderawtransaction` command is not used to create a new transaction. Instead, it is used to return a JSON object representing the serialized, hex-encoded transaction. It takes a hex string as an input and decodes it into a JSON object that represents the transaction. It does not create a new transaction, but rather interprets an existing one.",
            "### `createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,...} ( locktime ) ( expiryheight )`\nCreate a transaction spending the given inputs and sending to the given addresses.\nReturns hex-encoded raw transaction.\nNote that the transaction's inputs are not signed, and\nit is not stored in the wallet or transmitted to the network.#### Arguments:\n1. \"transactions\"    (string, required) A json array of json objects\n```json\n   [\n    {\n     \"txid\":\"id\",  (string, required) The transaction id\n     \"vout\":n    (numeric, required) The output number\n     \"sequence\":n  (numeric, optional) The sequence number\n    }\n    ,...\n   ]\n```\n2. \"addresses\"      (string, required) a json object with addresses as keys and amounts as values\n```json\n  {\n   \"address\": x.xxx  (numeric, required) The key is the Komodo address, the value is the VRSC amount\n   ,...\n  }\n```\n3. locktime       (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\n4. expiryheight     (numeric, optional, default=nextblockheight+20 (pre-Blossom) or nextblockheight+40 (post-Blossom)) Expiry height of transaction (if Overwinter is active)#### Result:\n\"transaction\"      (string) hex string of the transactionExamples\n```bash\n> verus createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":0.01}\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"{\\\"address\\\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `decoderawtransaction \"hexstring\"`\nReturn a JSON object representing the serialized, hex-encoded transaction.#### Arguments:\n1. \"hex\"   (string, required) The transaction hex string#### Result:\n```json\n{\n \"txid\" : \"id\",    (string) The transaction id\n \"o",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ],
        [
            "Can you explain why the `createrawtransaction` command requires a private key as an argument?",
            "The `createrawtransaction` command does not require a private key as an argument. The command takes three arguments: \"transactions\", \"addresses\", and two optional arguments \"locktime\" and \"expiryheight\". None of these arguments are a private key. The command creates a raw transaction, but it does not sign the transaction, which would require a private key.",
            "### `createrawtransaction [{\"txid\":\"id\",\"vout\":n},...] {\"address\":amount,...} ( locktime ) ( expiryheight )`\nCreate a transaction spending the given inputs and sending to the given addresses.\nReturns hex-encoded raw transaction.\nNote that the transaction's inputs are not signed, and\nit is not stored in the wallet or transmitted to the network.#### Arguments:\n1. \"transactions\"    (string, required) A json array of json objects\n```json\n   [\n    {\n     \"txid\":\"id\",  (string, required) The transaction id\n     \"vout\":n    (numeric, required) The output number\n     \"sequence\":n  (numeric, optional) The sequence number\n    }\n    ,...\n   ]\n```\n2. \"addresses\"      (string, required) a json object with addresses as keys and amounts as values\n```json\n  {\n   \"address\": x.xxx  (numeric, required) The key is the Komodo address, the value is the VRSC amount\n   ,...\n  }\n```\n3. locktime       (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\n4. expiryheight     (numeric, optional, default=nextblockheight+20 (pre-Blossom) or nextblockheight+40 (post-Blossom)) Expiry height of transaction (if Overwinter is active)#### Result:\n\"transaction\"      (string) hex string of the transactionExamples\n```bash\n> verus createrawtransaction \"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\" \"{\\\"address\\\":0.01}\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createrawtransaction\", \"params\": [\"[{\\\"txid\\\":\\\"myid\\\",\\\"vout\\\":0}]\", \"{\\\"address\\\":0.01}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `decoderawtransaction \"hexstring\"`\nReturn a JSON object representing the serialized, hex-encoded transaction.#### Arguments:\n1. \"hex\"   (string, required) The transaction hex string#### Result:\n```json\n{\n \"txid\" : \"id\",    (string) The transaction id\n \"o",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "15a57704-4d26-4e16-a117-e74b8985facf"
]