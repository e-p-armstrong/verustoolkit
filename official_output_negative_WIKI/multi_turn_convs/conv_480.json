[
    "## Conversation that answers the provided questions:\n**User:**\nI have some questions about VerusIDs. Can you explain why VerusIDs are not recoverable?\n\n**AI Assistant:**\nActually, I think there might be some misunderstanding. VerusIDs are recoverable. Each ID includes a separate recovery authority, which defaults to self, and can recover the identity by redefining its primary state and recovery state. Although it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.\n\n**User:**\nThat's good to know. I was also wondering, how do VerusIDs make all private information publicly accessible?\n\n**AI Assistant:**\nVerusIDs don't actually make all private information publicly accessible. In fact, each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide private yet selectively provable claims and attestations.\n\n**User:**\nThanks for clarifying those points. I've also heard about VerusHash 2.0, but I'm not entirely sure what it does. Can you explain the purpose of VerusHash 2.0, and how it affects the performance of FPGAs and CPUs?\n\n**AI Assistant:**\nVerusHash 2.0 is an algorithm that was developed to equalize the performance of FPGAs and modern CPUs on the Verus network. It was designed to prevent FPGAs from dominating CPUs in terms of performance, and has successfully met its goal of keeping FPGA performance for the price under 2x of CPU.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "Can you explain why VerusIDs are not recoverable?",
            "Actually, VerusIDs are recoverable. Each ID includes a separate recovery authority, which defaults to self, and can recover the identity by redefining its primary state and recovery state. Although it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.",
            "- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.\n# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.\n# Disclaimer",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "How do VerusIDs make all private information publicly accessible?",
            "VerusIDs do not make all private information publicly accessible. In fact, each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide private yet selectively provable claims and attestations.",
            "- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.\n# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.\n# Disclaimer",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "What is the purpose of VerusHash 2.0, and how does it affect the performance of FPGAs and CPUs?",
            "VerusHash 2.0 is an algorithm that was developed to equalize the performance of FPGAs and modern CPUs on the Verus network. It was designed to prevent FPGAs from dominating CPUs in terms of performance, and has successfully met its goal of keeping FPGA performance for the price under 2x of CPU.",
            "- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.\n# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.\n# Disclaimer",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]