[
    "## Conversation that answers the provided questions:\n**User:**\nI'm trying to figure out how to sign transactions from multi-signature IDs. Do I need to broadcast the raw transaction data on the network before applying the necessary signatures?\n\n**AI Assistant:**\nNo, that's not correct. According to the correct procedure, you should first apply the necessary signatures to the raw transaction data using `verus signrawtransaction <raw_hex_transaction>` and then broadcast the signed transaction on the network using `verus sendrawtransaction <raw_hex_signed_transaction>`. This way, you can ensure that the necessary signatures are applied before broadcasting the transaction to the network.\n\n**User:**\nOkay, got it! Another question: Can I create a tokenized ID control with a max supply of more than 1 satoshi?\n\n**AI Assistant:**\nNo, that's not correct. When creating a tokenized ID control, the max supply must be 1 satoshi, which can be either pre-allocated or pre-converted to. This is specified in the currency definition using the OPTION_NFT_TOKEN and OPTION_TOKEN flags. So, you can't create a tokenized ID control with a max supply greater than 1 satoshi.\n\n**User:**\nLast question: When creating an identity with a fractional currency as its parent, do I need to specify a referrer address?\n\n**AI Assistant:**\nNo, that's not correct. You can leave the referrer field blank by using quotes `\"\"`. The `registernamecommitment` command allows this, and an example is specifying a parent currency (vrsc-btc) without a referrer. So, you don't need to specify a referrer address in this case.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "When signing transactions from multi-signature IDs, do I need to broadcast the raw transaction data on the network before applying the necessary signatures?",
            "No, that's not correct. According to the correct procedure, you should first apply the necessary signatures to the raw transaction data using `verus signrawtransaction <raw_hex_transaction>` and then broadcast the signed transaction on the network using `verus sendrawtransaction <raw_hex_signed_transaction>`.",
            "## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "Can I create a tokenized ID control with a max supply of more than 1 satoshi?",
            "No, that's not correct. When creating a tokenized ID control, the max supply must be 1 satoshi, which can be either pre-allocated or pre-converted to. This is specified in the currency definition using the OPTION_NFT_TOKEN and OPTION_TOKEN flags.",
            "## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "When creating an identity with a fractional currency as its parent, do I need to specify a referrer address?",
            "No, that's not correct. You can leave the referrer field blank by using quotes `\"\"`. The `registernamecommitment` command allows this, and an example is specifying a parent currency (vrsc-btc) without a referrer.",
            "## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]