[
    "## Conversation that answers the provided questions:\n**User:**\nHey there, I've got a question about using multisig IDs on the Verus network. How do I use a single private key to sign a transaction from a multisig ID?\n\n**AI Assistant:**\nActually, you can't use a single private key to sign a transaction from a multisig ID on the Verus network. To sign a transaction from a multisig ID, you need to have multiple signers with partial authority over the source ID. If you have all the keys present in your wallet, there will be a return error in operation status, and you'll need to use the partially signed transaction to send to other signers. Does that make sense?\n\n**User:**\nI think I understand. But I've got another question. Can I use the `verus sendcurrency` command with a multisig ID as the destination on both mainnet and testnet?\n\n**AI Assistant:**\nNo, the `verus sendcurrency` command with a multisig ID is used as the source, not the destination. You can use this command to issue a \"sendcurrency\" command with the source being a multisig ID, and then have multiple signers with partial authority over the source ID sign the transaction. So, it's the other way around!\n\n**User:**\nOkay, got it. One more question. Is it possible to perform cross-chain sends on mainnet with the new multisig capabilities?\n\n**AI Assistant:**\nNo, cross-chain sends are only possible on testnet with the new multisig capabilities, not on mainnet. On mainnet, destinations for such a transaction can include IDs, private addresses with memos to a z-address or ID:private, and transparent addresses. So, you'll have to use testnet for cross-chain sends with multisig IDs.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "How do I use a single private key to sign a transaction from a multisig ID on the Verus network?",
            "You can't actually use a single private key to sign a transaction from a multisig ID on the Verus network. To sign a transaction from a multisig ID, you need to have multiple signers with partial authority over the source ID. If you have all the keys present in your wallet, there will be a return error in operation status, and you'll need to use the partially signed transaction to send to other signers.",
            "While this release does include network robustness and a multisig fix, we were also able to upgrade Verus multisig capabilities to an ease of use and level of capability beyond other networks we are aware of today. In this release, it is now possible, on both mainnet and testnet, to issue any \u201csendcurrency\u201d command with the source being a multisig ID, for which you do not have all the keys present in your wallet. If you do, there will be a return error in operation status, from both GUI or CLI, and in that error will be the partially signed transaction, which can be used by applications or with copy and paste to send to other signers with partial authority over the source ID. On mainnet, destinations for such a transaction can include IDs, private addresses with memos to a z-address or ID:private, and transparent addresses. On testnet, such transactions can include all that is possible on mainnet as well as multiple currencies, currency conversions, and cross-chain sends.To our knowledge, this release raises the industry standard for multisig capability and its support on public blockchain protocols to a new level, even before considering the multisig revocation and recovery capabilities.## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "Can I use the `verus sendcurrency` command with a multisig ID as the destination on both mainnet and testnet?",
            "No, the `verus sendcurrency` command with a multisig ID is used as the source, not the destination. You can use this command to issue a \"sendcurrency\" command with the source being a multisig ID, and then have multiple signers with partial authority over the source ID sign the transaction.",
            "While this release does include network robustness and a multisig fix, we were also able to upgrade Verus multisig capabilities to an ease of use and level of capability beyond other networks we are aware of today. In this release, it is now possible, on both mainnet and testnet, to issue any \u201csendcurrency\u201d command with the source being a multisig ID, for which you do not have all the keys present in your wallet. If you do, there will be a return error in operation status, from both GUI or CLI, and in that error will be the partially signed transaction, which can be used by applications or with copy and paste to send to other signers with partial authority over the source ID. On mainnet, destinations for such a transaction can include IDs, private addresses with memos to a z-address or ID:private, and transparent addresses. On testnet, such transactions can include all that is possible on mainnet as well as multiple currencies, currency conversions, and cross-chain sends.To our knowledge, this release raises the industry standard for multisig capability and its support on public blockchain protocols to a new level, even before considering the multisig revocation and recovery capabilities.## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "Is it possible to perform cross-chain sends on mainnet with the new multisig capabilities?",
            "No, cross-chain sends are only possible on testnet with the new multisig capabilities, not on mainnet. On mainnet, destinations for such a transaction can include IDs, private addresses with memos to a z-address or ID:private, and transparent addresses.",
            "While this release does include network robustness and a multisig fix, we were also able to upgrade Verus multisig capabilities to an ease of use and level of capability beyond other networks we are aware of today. In this release, it is now possible, on both mainnet and testnet, to issue any \u201csendcurrency\u201d command with the source being a multisig ID, for which you do not have all the keys present in your wallet. If you do, there will be a return error in operation status, from both GUI or CLI, and in that error will be the partially signed transaction, which can be used by applications or with copy and paste to send to other signers with partial authority over the source ID. On mainnet, destinations for such a transaction can include IDs, private addresses with memos to a z-address or ID:private, and transparent addresses. On testnet, such transactions can include all that is possible on mainnet as well as multiple currencies, currency conversions, and cross-chain sends.To our knowledge, this release raises the industry standard for multisig capability and its support on public blockchain protocols to a new level, even before considering the multisig revocation and recovery capabilities.## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]