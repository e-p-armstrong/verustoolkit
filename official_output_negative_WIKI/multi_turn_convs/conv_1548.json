[
    "## Conversation that answers the provided questions:\n**User:**\nHey, I've been trying to create a transaction from a single-signature ID on the Verus network, but I'm not sure how. Can you help me with that?\n\n**AI Assistant:**\nActually, creating transactions from single-signature IDs is not supported on the Verus network. However, I can guide you through the process of creating a transaction from a multi-signature ID if you'd like. To do that, you would use the `verus sendcurrency` command, followed by `verus z_getoperationstatus` to get the raw transaction data, then `verus signrawtransaction` to sign the transaction with each additional wallet containing the necessary signing addresses/IDs, and finally `verus sendrawtransaction` to broadcast the signed transaction on the network.\n\n**User:**\nThanks for letting me know. I have another question. Can I create a tokenized ID control with a maximum supply of 2 satoshis?\n\n**AI Assistant:**\nUnfortunately, no. The maximum supply for a tokenized ID control must be 1 satoshi, which is either pre-allocated or pre-converted to. To define the currency, you would use the command `verus -chain=vrsctest definecurrency`, and the `maxpreconversion` field must be set to `[0]`.\n\n**User:**\nOkay, got it. One more question. How do I create an identity with a fractional currency as its parent?\n\n**AI Assistant:**\nYou can create an identity with a fractional currency as its parent using the `registernamecommitment` command. The `registernamecommitment` command takes two additional positional arguments to specify a currency parent and a funding address.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "How do I create a transaction from a single-signature ID on the Verus network?",
            "Note that creating transactions from single-signature IDs is not supported. However, to create a transaction from a multi-signature ID, you would use the `verus sendcurrency` command, followed by `verus z_getoperationstatus` to get the raw transaction data, then `verus signrawtransaction` to sign the transaction with each additional wallet containing the necessary signing addresses/IDs, and finally `verus sendrawtransaction` to broadcast the signed transaction on the network.",
            "### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "Can I create a tokenized ID control with a maximum supply of 2 satoshis?",
            "No, the maximum supply for a tokenized ID control must be 1 satoshi, which is either pre-allocated or pre-converted to. The command `verus -chain=vrsctest definecurrency` is used to define the currency, and the `maxpreconversion` field must be set to `[0]`.",
            "### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ],
        [
            "How do I create an identity with a fractional currency as its parent?",
            "You can create an identity with a fractional currency as its parent using the `registernamecommitment` command. The `registernamecommitment` command takes two additional positional arguments to specify a currency parent and a funding address.",
            "### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```### Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```### Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]