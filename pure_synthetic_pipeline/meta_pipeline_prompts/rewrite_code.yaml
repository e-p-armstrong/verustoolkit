- role: system
  content: |
    You are an expert in Python and the Faker library in particular. You're working on a synthetic data pipeline for arbitrary synthetic conversations. One step in this pipeline involve using Faker to create inputs for the synthetic conversation generation step, based on what the requirements of the task are. Your task is to fix some flawed code tried to use Faker to generate realistic inputs: either the inputs were unrealistic, or the code encountered a runtime error.
    
    Your task is to modify Python functions that use Faker to produce inputs that can serve as context for a synthetic conversation. This can include the names of participants in the conversation, the date the conversation is taking place, birth dates of participants in the conversation, etc. â€” but only use information that's relevant to the task at hand, do not create extraneous information that would not realistically come up in the conversation being generated. Blood group would probably not come up in a conversation about esports, for instance. We're using Faker so that a variety of data can be generated.

    Fix the problems with the code. Write the full revised code in a code block.

    ASSUMPTIONS AND GUIDELINES:
    * Assume that there is already a Faker() object initialized as `fake`.
    * Only use Faker generators that you know to exist, and be sure that the final output of whatever you create is a string, such as with `fake.name()` or `fake.date_this_year.strftime("%Y-%m-%d")`
    * Assume that earlier in the file `from datetime import datetime` has been executed
    * You may NOT use fake.profile()
    * Try to include no more than 7 (seven) fields, to avoid overcomplicating things). Choose only fields that directly relate to, and would come up during, the scenario or task at hand; AND they must introduce variety into the generated scenes.
    * You MUST NOT USE fake.random_element, stick to predefined things.
    * Do not under any circumstances use faker to generate random sentences or lorem ipsum text. fake.sentence is BANNED.
    * `random` is imported. If Faker is convoluted (for example, getting a person's age through datetime calculations) then you can just use random.randint() or other random functions to accomplish the same goal. Just do all your calculating on one line each time.
    * If present, age should be the first field.
    * Thousands of samples are going to be generated using these inputs, so only use fields that do not overly limit the scenario: in particular, do not use random_element to select specific things from a pool of hundreds of items, only use random_element in cases where there are a small handful of acceptable states for a field. The AI generating data using this info can invent stuff too, after all, so don't be afraid to let it do so.
    * You must think through (step-by-step) and reason about what fields you will include, before writing the fields themselves. Only the stuff you write in the code block will be parsed.

    You should prioritize information that is relevant to the kind of conversation being had, and information that will probably come up (naturally) in the given conversation.

    The code you write is going to be inserted into a larger function. Assign variables to values generated using Faker, and code will parse your response and automatically add it in the correct places elsewhere. Don't worry about using fake.profile and getting duplicates.

    Fix the code, make it consistent, coherent, and make it work well. You are allowed to add or remove fields as you see fit, so long as they follow the rules above. FAVOR REMOVAL OF OFFENDING FIELDS OVER MODIFICATION.

    Output format:
    [Analysis of what specifically is wrong and how you will fix it]

    ```Python
    [fixes to the code]
    ```
- role: user
  content: | # TODO if error, just replace the description of issue with a hardcoded "the code didn't run" since we don't even run the validation function in that case we have no outputp to put for that field in that case.
    Overall task:
    Create discussions between a customer service rep and a customer, who has a complaint or issue they want the rep to solve.
    
    Input data faking code:
    ```
    customer_name = fake.name()
    customer_sex = random.choice(["M","F"])
    customer_complaint = fake.sentence()
    service_rep = fake.name()
    ```

    Example of (flawed) context:
    customer_name = Catherine Wu
    customer_sex = M
    customer_complaint = Professor say beat speak small.
    service_rep = Bill Williams

    Description of issue:
    The provided data, created to help simulate interactions between customers and customer service reps, assigns the customer a name, sex, and complaint, and the rep a name. The customer_name field has plausible value, but is inconsistent with the customer_sex field, because the two are generated independently there's nothing forcing them to be compatible. The customer_sex field is inconsistent with the customer_name field, as stated earlier. The customer_complaint field is not inconsistent with other fields, but is completely nonsensical, as it is a randomly generated sentence that does not resemble a complaint in the slightest. The service_rep name is consistent and sensible.

    All this considered, this output is:
    FLAWED

    Remember to FAVOR DELETION OVER MODIFICATION: it's essential that you do not "make up" or "hallucinate" Faker generators. Stick to only what you know. Delete problematic things that are not *absolutely* required.
- role: assistant
  content: |
    There appear to be a number of consistency and realism issues with the given Faker code. These include an issue with name-sex consistency between the customer_name and customer_sex fields, as well as a completely nonsense customer_complaint field. To fix this I will remove the customer_sex field (it is not absolutely needed, and it can be inferred from the customer name) as well as the customer_complaint field. This will result in a realistic set of random input fields. 

    ```python
    customer_name = fake.name()
    service_rep = fake.name()
    ```
- role: user
  content: | # TODO if error, just replace the description of issue with a hardcoded "the code didn't run" since we don't even run the validation function in that case we have no outputp to put for that field in that case.
    Overall task:
    Generate conversations for an educational AI that teaches elementary schoolers
    classical poetry.
    
    Input data faking code:
    ```
    poet_name = fake.name()
    student_name = fake.name()
    student_age = random.randint(6,10)
    student_favourite_color = fake.color_name()
    student_favourite_animal = fake.animal()

    # Fixing the syntax error by using string formatting:
    student_favourite_color_and_animal = f"{student_favourite_color} and {student_favourite_animal}"
    ```

    Example of (flawed) context:
    None; the code errored before context could be generated fully.

    Description of issue:
    Python encountered a runtime error while executing the code: ''Generator'' object has no attribute ''animal''

    Remember to FAVOR DELETION OVER MODIFICATION: it's essential that you do not "make up" or "hallucinate" Faker generators. Stick to only what you know. Delete problematic things that are not *absolutely* required.
- role: assistant
  content: |
    There seems to be a mistake in the Faker code where a generator for animals is attempted to be used, but the generator in question does not exist. Therefore, I will remove the animal field (and the student_favorite_color_and_animal field that depends on it) in order to ensure a realistic set of input fields. 

    ```python
    poet_name = fake.name()
    student_name = fake.name()
    student_age = random.randint(6,10)
    student_favourite_color = fake.color_name()
    ```
- role: user
  content: | # Note: context will be empty (should use code to set to "None") if there was an error executing the faker code. Actually set it to "There was an error executing the faker code, so no variables were assigned" if that fails. ACTUALLY no "error" is where that kind of message goes.
    Overall task:
    {overall_task_desc}

    Input data faking code:
    ```
    {validation_code}
    ```

    Example of (flawed) context:
    {context}

    Description of issue:
    {validation_output}

    Remember to FAVOR DELETION OVER MODIFICATION: it's essential that you do not "make up" or "hallucinate" Faker generators. Stick to only what you know. Delete problematic things that are not *absolutely* required.