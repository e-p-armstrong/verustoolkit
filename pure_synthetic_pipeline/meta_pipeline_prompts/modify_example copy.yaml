- role: system
  content: | # TODO add code to truncate the output of this to 10 fields at most
    You are an expert writer of instructions, and you help AI understand instructions by writing representative examples for them to study. This is prompt engineering. Your objective is to write a single, detailed example for the given task, fulfilling all requirements and aptly demonstrating any special modifiers ("Mutators") that may be present.

    **GUIDELINES TIPS & PROMPTING PLAYBOOK**
    * Favor length and detail over brevity
    * Ensure that the example you create is sufficiently different from any other examples already written, so that the AI understands to produce a wide variety of outputs.
    * However, while the content of your example should be varied, the overall structure should be the same as other examples (if present). This helps ensure quality conversations by preventing anything from going "off the rails". So the example you write should be "similar but different".
    * Fully comply with the given instructions.
    * The inputs for each example are fixed; you must create a sensible output, according to the instructions, given the 
    
    TODO !EA - output indicator
- role: user
  content: | # Prompts with no few-shot are perhaps most flexable but least reliable. I'm working on a synthetic data pipeline for arbitrary synthetic data. One step involves having an AI use Faker to create inputs for the synthetic conversation generation step, based on what the requirements of the task are. 
    ### CONTEXT BEHIND EXAMPLE -- This is the full prompt as of this moment:
    {full_prompt}

    ### YOU ARE MODIFYING THE EXAMPLE:
    {example_to_modify}

    ### REASONING BEHIND THE MODIFICATION:
    {reasoning}
- role: assistant
  content: |
    In the context of creating synthetic conversations simulating a suicide helpline, information about the caller is particularly relevant. Their age and sex are likely to determine some of their circumstances as well as the crisis counsellor's approach. The caller's name is likely to come up during the call. The caller's occupation may also play a role in their depression, as might their relationship status. No more information will be included because it may needlessly constrain the scenario. Finally, the crisis counsellor may tell the caller their name, in order to establish greater understanding. I will generate these fields using Faker.
    ```python
    caller_age = random.randint(18,90)
    caller_profile = fake.profile(fields=['name','sex','job'])
    caller_name = caller_profile['name']
    caller_sex = caller_profile['sex']
    caller_occupation = caller_profile['job']
    caller_relationship_status = fake.random_element(elements=('single', 'married', 'divorced', 'widowed', 'in a relationship'))
    crisis_counsellor_name = fake.name()
    ```
- role: user
  content: |
    Requirements for the synthetic dataset that you must extrapolate specific, high-quality requirements from:
    Create conversations between an AI dating advisor and an adolescent (between 16 and 18) in need of advice.
- role: assistant
  content: |
    When creating synthetic conversations simulating interactions between AI dating advisors, and adolescents between 16 and 18 years of age, the user's name, age, and sex are likely to come up. They are not guaranteed to have a job at that age, so I will not assign an occupation to them. Additional information about the user may constrain the scenario too much. The dating advisor, even if they're an AI, likely has a name too and may share it to build rapport, so it will be included.
    ```python
    user_age = random.randint(16,18)
    user_profile = fake.profile(fields=['name','sex'])
    user_name = user_profile['name']
    user_sex = user_profile['sex']
    dating_advisor_name = fake.name()
    ```
- role: user
  content: | # Prompts with no few-shot are perhaps most flexable but least reliable. I'm working on a synthetic data pipeline for arbitrary synthetic data. One step involves having an AI use Faker to create inputs for the synthetic conversation generation step, based on what the requirements of the task are. 
    ### CONTEXT BEHIND EXAMPLE -- This is the full prompt as of this moment:
    {full_prompt}

    ### YOU ARE MODIFYING THE EXAMPLE:
    {example_to_modify}

    ### REASONING BEHIND THE MODIFICATION:
    {reasoning}