[
    "How do I define a PBaaS blockchain on the Verus network, and what are the key components of the definition?",
    "To define a PBaaS blockchain on the Verus network, you need to create a JSON object that specifies the properties of the blockchain. This object is then passed to the `definecurrency` command using the Verus command-line interface.\n\nThe key components of the PBaaS blockchain definition are:\n\n1. **Name**: The name of the blockchain, in this case, \"PBaaSChain\".\n2. **Options**: An integer that specifies the options for the blockchain, in this case, 264.\n3. **Currencies**: An array of currencies that can be converted to the native currency of the blockchain, in this case, [\"VRSCTEST\"].\n4. **Conversions**: An array of conversion ratios between the native currency and each currency on the chain, in this case, [1].\n5. **Eras**: An array of objects that define the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle.\n6. **Notaries**: An array of VerusIDs that will serve as notaries on the chain.\n7. **Min Notaries Confirm**: The minimum number of notaries needed to confirm a block, in this case, 2.\n8. **Nodes**: An array of objects that describe the network addresses of the nodes on the chain, as well as their IDs.\n9. **Gateway Converter Name**: The name of the bridge that will be used to move funds on and off the PBaaS chain, in this case, \"Bridge\".\n10. **Gateway Converter Issuance**: The initial issuance of the bridge's native token, in this case, 1000000.\n\nIn addition to the blockchain definition, you also need to define the bridge's overridable defaults. This includes:\n\n1. **Currencies**: An array of currencies that the bridge supports, including the native coins of the chains being bridged.\n2. **Initial Contributions**: An array of initial liquidity for each currency in the bridge.\n3. **Initial Supply**: The initial supply for the bridge's native token.\n\nOnce you have defined the PBaaS blockchain and the bridge's overridable defaults, you can pass them to the `definecurrency` command to create the blockchain on the Verus network.",
    "### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```",
    "./raw_text_input_wiki/release_notes.md"
]