[
    "How do I register an identity on the Verus network, and what are some limitations to be aware of when working with multi-currency identities?",
    "To register an identity on the Verus network, you can use the `registeridentity` command with the `verus` executable. The command takes several parameters, including the transaction ID of the name reservation, the name reservation details, the identity details, and the private key to use for signing.\n\nHere's an example of what the command might look like:\n```\nverus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": {... }, \"identity\": {... }}' false 0 <private_key>\n```\nThe `namereservation` section includes details such as the name, parent, salt, and referral information, while the `identity` section includes details such as the primary addresses, minimum signatures, name, and parent.\n\nIt's also important to note that if a currency's ID issuance requires permission from the currency's identity, then the identity must sign the name commitment and identity registration. This can be done by using the parent identity to fund the transactions, or by receiving a raw transaction to give to the identity owner to sign by setting `returntx` to `true`.\n\nAdditionally, there are some limitations to be aware of when working with multi-currency identities. One important limitation is that you cannot create a currency from an ID that has a properly encoded i-address as its actual name, rather than its calculated ID. This is because using an i-address as a name will cause problems whenever an i-address or name may be used, and will not be supported for creating currencies. To avoid confusion, it's recommended to avoid using i-addresses as names for IDs.\n\nOverall, registering an identity on the Verus network requires careful attention to the details of the `registeridentity` command, as well as awareness of the limitations and potential pitfalls of working with multi-currency identities.",
    "verus -chain=vrsctest registeridentity '{\"txid\": \"67635331cbccb7a2cbf408a9e97b3f8986133964e0315a8b9fd237a5fd95ac8f\",\"namereservation\": { \"version\": 1, \"name\": \"ID\", \"parent\": \"i84mndBk2Znydpgm9T9pTjVvBnHkhErzLt\", \"salt\": \"b7070f2ca7495e49c85ab41b5a368150e2c217be6d08cc4102a1b682cddb6f01\", \"referral\": \"\"},\"identity\":{\"primaryaddresses\":[\"RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr\"],\"minimumsignatures\":1,\"name\":\"ID\",\"parent\":\"vrsc-btc@\"}}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\nIf a currency's ID issuance require permission from the currency's identity then it must sign the name commitment and identity registration. Either use the parent identity to fund those transactions, or receive a raw transaction to give the identity owner to sign by setting `returntx` to `true`#### Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.",
    "./raw_text_input_wiki/release_notes.md"
]