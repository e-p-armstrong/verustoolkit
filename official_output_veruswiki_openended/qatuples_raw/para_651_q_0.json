[
    "What are the steps to define a PBaaS blockchain on the Verus platform, and how do you export an ID to a PBaaS chain?",
    "Defining a PBaaS blockchain on the Verus platform involves creating a JSON object that specifies the properties of the blockchain, including its name, options, currencies, conversions, eras, notaries, nodes, and gateway converter details. Here's a breakdown of the components:\n\n* **Name**: The name of the PBaaS chain, in this case \"PBaaSChain\".\n* **Options**: An integer value, in this case 264, that specifies the options for the chain.\n* **Currencies**: An array of currencies that can be used on the chain, in this case only \"VRSCTEST\".\n* **Conversions**: An array of conversion ratios between the chain's native currency and other currencies, in this case only 1.\n* **Eras**: An array of era definitions, each specifying the reward, decay, halving, and end of the era.\n* **Notaries**: An array of VerusIDs that will serve as notaries on the chain.\n* **Minnotariesconfirm**: The minimum number of notaries required to confirm a block.\n* **Nodes**: An array of node definitions, each specifying the network address and node identity.\n* **Gateway converter**: The name and issuance details of the gateway converter, which enables the transfer of funds on and off the chain.\n\nTo define the PBaaS chain, you need to pass two JSON objects to the `definecurrency` command: one for the chain definition and one for the bridge definition. The bridge definition specifies the currencies supported, initial contributions, and initial supply.\n\nOnce the PBaaS chain is defined, you can export an ID to the chain using the `sendcurrency` command. This command requires the address of the ID to be exported, the name of the PBaaS chain, and the amount of currency to be transferred.\n\nHere's an example of the command to export an ID to a PBaaS chain:\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```\nThis command exports the ID \"IDNAME@\" to the PBaaS chain \"PBaaSChainName\" with an amount of 100 VRSCTEST.",
    "### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```",
    "./raw_text_input_wiki/release_notes.md"
]