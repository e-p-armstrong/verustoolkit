[
    "How does Verus' multisig capabilities enable users to create and sign transactions from multi-signature IDs, and what features make it stand out from other networks?",
    "Verus' latest release has significantly upgraded its multisig capabilities, making it possible to issue \"sendcurrency\" commands with a multisig ID as the source, even if not all the necessary keys are present in your wallet. This means that you can create a transaction with a multisig ID and then share the partially signed transaction with other signers who have partial authority over the source ID.\n\nHere's how it works:\n\n1. **Create the transaction**: Use the `verus sendcurrency` command to create a transaction with a multisig ID as the source. The destination can be an ID, a private address with a memo, or a transparent address.\n\n2. **Get the raw transaction data**: Use the `verus z_getoperationstatus` command to get the raw transaction data.\n\n3. **Share the raw transaction data**: Share the raw transaction data with other signers who have partial authority over the source ID.\n\n4. **Sign the transaction**: Each signer uses the `verus signrawtransaction` command to sign the transaction.\n\n5. **Broadcast the signed transaction**: Once all necessary signatures are applied, the final signer broadcasts the signed transaction on the network using the `verus sendrawtransaction` command.\n\nWhat makes Verus' multisig capabilities stand out is its ease of use and level of capability. It allows for multisig transactions to be created and signed without requiring all the necessary keys to be present in one wallet. Additionally, on testnet, Verus supports multiple currencies, currency conversions, and cross-chain sends, making it a highly versatile and powerful tool.",
    "While this release does include network robustness and a multisig fix, we were also able to upgrade Verus multisig capabilities to an ease of use and level of capability beyond other networks we are aware of today. In this release, it is now possible, on both mainnet and testnet, to issue any \u201csendcurrency\u201d command with the source being a multisig ID, for which you do not have all the keys present in your wallet. If you do, there will be a return error in operation status, from both GUI or CLI, and in that error will be the partially signed transaction, which can be used by applications or with copy and paste to send to other signers with partial authority over the source ID. On mainnet, destinations for such a transaction can include IDs, private addresses with memos to a z-address or ID:private, and transparent addresses. On testnet, such transactions can include all that is possible on mainnet as well as multiple currencies, currency conversions, and cross-chain sends.To our knowledge, this release raises the industry standard for multisig capability and its support on public blockchain protocols to a new level, even before considering the multisig revocation and recovery capabilities.## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n  ```\n  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n  ```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n  ```\n  verus signrawtransaction <raw_hex_transaction>\n  ```\nAfter the last necessary signature is applied, broadcast on the network using:\n  ```\n  verus sendrawtransaction <raw_hex_signed_transaction>\n  ```",
    "./raw_text_input_wiki/release_notes.md"
]