[
    "What are the `getsaplingtree` and `listcurrencies` commands in Verus, and how do they work?",
    "The `getsaplingtree` and `listcurrencies` commands are two important commands in Verus that allow you to retrieve information about the blockchain.\n\n**getsaplingtree:**\nThe `getsaplingtree` command is used to retrieve the sapling tree for a given blockchain height. The sapling tree is a data structure that contains information about the state of the blockchain at a particular height. The command takes a single argument, `name`, which specifies the name of the blockchain for which to retrieve the sapling tree.\n\nThe result of the `getsaplingtree` command is a JSON object that contains information about the blockchain at the specified height, including the network, height, hash, time, and tree.\n\nYou can use the `getsaplingtree` command in two ways: either by running `verus getsaplingtree name` directly, or by using the JSON-RPC interface with `curl`. For example:\n```bash\n> verus getsaplingtree name\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getsaplingtree\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n**listcurrencies:**\nThe `listcurrencies` command is used to retrieve a list of currencies that match a given set of criteria. The command takes an optional query object as an argument, which allows you to specify conditions for which currencies to return.\n\nThe query object can contain several fields, including:\n\n* `launchstate`: specifies the launch state of the currencies to return (e.g. \"prelaunch\", \"launched\", \"refund\", or \"complete\")\n* `systemtype`: specifies the type of system that the currencies are part of (e.g. \"local\", \"imported\", \"gateway\", or \"pbaas\")\n* `fromsystem`: specifies the system from which to retrieve currencies (default is the local chain)\n* `converter`: specifies an array of currencies for which to return fractional currency converters\n\nThe result of the `listcurrencies` command is a JSON array of objects, each containing information about a currency that matches the specified criteria. The objects contain fields such as `version`, `name`, `fullyqualifiedname`, `currencyid`, `currencyidhex`, and `parent`.\n\nFor example, you can use the `listcurrencies` command to retrieve a list of all currencies that are part of a particular system, or to retrieve a list of currencies that are in a specific launch state.",
    "#### Result:\n```json\n  [\n    {\n      \"network\": \"VRSC\",\n      \"height\": n,\n      \"hash\": \"hex\"\n      \"time\": n,\n      \"tree\": \"hex\"\n    },\n  ]\n```\nExamples:\n```bash\n> verus getsaplingtree name\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getsaplingtree\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `listcurrencies ({query object}) startblock endblock`\nReturns a complete definition for any given chain if it is registered on the blockchain. If the chain requested is NULL, chain definition of the current chain is returned.#### Arguments:\n```json\n{                      (json, optional) specify valid query conditions\n  \"launchstate\" :              (\"prelaunch\" | \"launched\" | \"refund\" | \"complete\") (optional) return only currencies in that state\n  \"systemtype\" :              (\"local\" | \"imported\" | \"gateway\" | \"pbaas\")\n  \"fromsystem\" :              (\"systemnameeorid\") default is the local chain, but if currency is from another system, specify here\n  \"converter\": [\"currency1\", (\"currency2\")] (array, optional) default empty, only return fractional currency converters of one or more currencies\n}\n```\n#### Result:\n```json\n[\n {\n  \"version\" : n,             (int) version of this chain definition\n  \"name\" : \"string\",           (string) name or symbol of the chain, same as passed\n  \"fullyqualifiedname\" : \"string\",    (string) name or symbol of the chain with all parent namespaces, separated by \".\"\n  \"currencyid\" : \"i-address\",      (string) string that represents the currency ID, same as the ID behind the currency\n  \"currencyidhex\" : \"hex\",        (string) hex representation of currency ID, getcurrency API supports \"hex:currencyidhex\"\n  \"parent\" : \"i-addres",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]