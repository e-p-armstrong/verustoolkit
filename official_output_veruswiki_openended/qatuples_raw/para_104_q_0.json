[
    "How do I use Verus commands to retrieve information about the blockchain, such as the coin supply, best block hash, and block details?",
    "Verus provides several commands that allow you to retrieve information about the blockchain. Here are some examples:\n\n**Coin Supply:** To retrieve information about the coin supply, you can use the `coinsupply` command. This command takes a single argument, the height of the coin supply data. The result is a JSON object that contains the currency symbol of the native coin, the height of the coin supply data, the transparent coin supply, the shielded coin supply, and the total coin supply.\n\nFor example, you can use the following command to retrieve the coin supply at height 420:\n```\nverus coinsupply 420\n```\nOr, you can use the JSON-RPC API to make the same request:\n```bash\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"coinsupply\", \"params\": [420] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n**Best Block Hash:** To retrieve the hash of the best (tip) block in the longest block chain, you can use the `getbestblockhash` command. This command takes no arguments and returns a string that is the block hash hex encoded.\n\nFor example:\n```\nverus getbestblockhash\n```\nOr, you can use the JSON-RPC API to make the same request:\n```bash\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestblockhash\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n**Block Details:** To retrieve information about a specific block, you can use the `getblock` command. This command takes two arguments: the block hash or height, and an optional verbosity level. The verbosity level can be 0, 1, or 2, and determines the level of detail in the response.\n\nFor example, to retrieve information about a block with hash \"hash\" or height 420, you can use the following command:\n```\nverus getblock \"hash\" 1\n```\nOr, you can use the JSON-RPC API to make the same request:\n```bash\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"hash\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\nThe response will depend on the verbosity level. If verbosity is 0, the response will be a string that is serialized, hex-encoded data for the block. If verbosity is 1, the response will be a JSON object with information about the block. If verbosity is 2, the response will be a JSON object with information about the block and information about each transaction.",
    "#### Result:\n```json\n{\n \"result\" : \"success\",     (string) If the request was successful.\n \"coin\" : \"VRSC\",       (string) The currency symbol of the native coin of this blockchain.\n \"height\" : 420,         (integer) The height of this coin supply data\n \"supply\" : \"777.0\",      (float) The transparent coin supply\n \"zfunds\" : \"0.777\",      (float) The shielded coin supply (in zaddrs)\n \"total\" : \"777.777\",     (float) The total coin supply, i.e. sum of supply + zfunds\n}\n```\nExamples:\n```bash\n> verus coinsupply 420\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"coinsupply\", \"params\": [420] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getbestblockhash`\nReturns the hash of the best (tip) block in the longest block chain.#### Result:\n```\n\"hex\"   (string) the block hash hex encoded\n```\nExamples\n```bash\n> verus getbestblockhash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getbestblockhash\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getblock \"hash|height\" ( verbosity )`\nIf verbosity is 0, returns a string that is serialized, hex-encoded data for the block.\nIf verbosity is 1, returns an Object with information about the block.\nIf verbosity is 2, returns an Object with information about the block and information about each transaction.#### Arguments:\n1. \"hash|height\"     (string, required) The block hash or height\n2. verbosity       (numeric, optional, default=1) 0 for hex encoded data, 1 for a json object, and 2 for json object with transaction dataResult (for verbosity = 0):\n\"data\"       (string) A string that is serialized, hex-encoded data for the block.#### Results (for verbosity = 1):\n```json\n{\n \"hash\" : \"hash\",    (string) the block hash (same as provided hash)\n \"confir",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]