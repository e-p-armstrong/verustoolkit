[
    "What are the different components of a currency definition in Verus, and how can I access currency information using the `getcurrency` command?",
    "In Verus, a currency definition is a comprehensive description of a currency, including its properties, behavior, and rules. A currency definition consists of several components, which are:\n\n1. **Pre-allocation**: This specifies the percentage of proceeds for fractional currency sent to the launching ID, as well as pre-allocation amounts for VerusIDs at launch.\n2. **Initial Contributions**: This defines the amounts of pre-conversions reserved for the launching ID.\n3. **ID Registration Fees**: This is the base cost of IDs for this currency namespace in this currency.\n4. **ID Referral Levels**: This specifies the levels of ID referrals, only applicable for native PBaaS chains and IDs.\n5. **ID Import Fees**: This defines the fees required to import an ID to this system, only applicable for native PBaaS chains and IDs.\n6. **Eras**: This describes different chain phases of rewards and convertibility, including reward start, decay, halving, and era end.\n7. **Nodes**: This is an optional component that specifies up to 8 nodes that can be used to connect to the blockchain, including node identity, payment address, and other details.\n8. **Last Confirmed Currency State**: This component is reserved for future use.\n9. **Best TXID**: This is the best transaction ID for the currency.\n10. **Confirmed Notarization**: This component is reserved for future use.\n11. **Confirmed TXID**: This is the confirmed transaction ID for the currency.\n\nTo access currency information using the `getcurrency` command, you can use the following methods:\n\n1. Using the Verus command-line interface: `verus getcurrency \"chainname\"`\n2. Using the Verus JSON-RPC API: `curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrency\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/`\n\nThese commands will retrieve the currency definition and provide detailed information about the currency's properties and behavior.",
    "h percentage of proceeds for fractional currency sent to launching ID\n \"preallocations\" : \"[{\"i-address\":n}, ...]\", (objarray) VerusIDs and amounts for pre-allocation at launch\n \"initialcontributions\" : \"[n, ...]\",  (numberarray) amounts of pre-conversions reserved for launching ID\n \"idregistrationfees\" : n,       (number) base cost of IDs for this currency namespace in this currency\n \"idreferrallevels\" : n,        (int) levels of ID referrals (only for native PBaaS chains and IDs)\n \"idimportfees\" : n,          (number) fees required to import an ID to this system (only for native PBaaS chains and IDs)\n \"eras\" : \"[obj, ...]\",         (objarray) different chain phases of rewards and convertibility\n {\n  \"reward\" : \"[n, ...]\",        (int) reward start for each era in native coin\n  \"decay\" : \"[n, ...]\",        (int) exponential or linear decay of rewards during each era\n  \"halving\" : \"[n, ...]\",       (int) blocks between halvings during each era\n  \"eraend\" : \"[n, ...]\",        (int) block marking the end of each era\n  \"eraoptions\" : \"[n, ...]\",      (int) options (reserved)\n }\n \"nodes\"   : \"[obj, ..]\",  (objectarray, optional) up to 8 nodes that can be used to connect to the blockchain   [{\n    \"nodeidentity\" : \"txid\", (string, optional) internet, TOR, or other supported address for node\n    \"paymentaddress\" : n,   (int,   optional) rewards payment address\n   }, .. ]\n \"lastconfirmedcurrencystate\" : {\n  }\n \"besttxid\" : \"txid\"\n  }\n \"confirmednotarization\" : {\n  }\n \"confirmedtxid\" : \"txid\"\n}\n```\nExamples:\n```bash\n> verus getcurrency \"chainname\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrency\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]