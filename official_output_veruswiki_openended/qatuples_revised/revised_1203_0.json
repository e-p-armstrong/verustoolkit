[
    "How do I create, fund, sign, and send a transaction using the Verus command line interface, and how can I retrieve the raw transaction data using the `getrawtransaction` command?",
    "To create a transaction using the Verus command line interface, you can follow these steps:\n\n**Step 1: Create a transaction with no inputs**\nYou can create a transaction with no inputs using the `createrawtransaction` command. For example:\n```bash\n> verus createrawtransaction \"[]\" \"{\\\"myaddress\\\":0.01}\"\n```\nThis command creates a new transaction with no inputs and a single output of 0.01 units to the address `myaddress`.\n\n**Step 2: Add sufficient unsigned inputs to meet the output value**\nTo add sufficient unsigned inputs to meet the output value, you can use the `fundrawtransaction` command. For example:\n```bash\n> verus fundrawtransaction \"rawtransactionhex\"\n```\nThis command adds unsigned inputs to the transaction to meet the output value.\n\n**Step 3: Sign the transaction**\nTo sign the transaction, you can use the `signrawtransaction` command. For example:\n```bash\n> verus signrawtransaction \"fundedtransactionhex\"\n```\nThis command signs the transaction using your private key.\n\n**Step 4: Send the transaction**\nTo send the transaction, you can use the `sendrawtransaction` command. For example:\n```bash\n> verus sendrawtransaction \"signedtransactionhex\"\n```\nThis command broadcasts the signed transaction to the Verus network.\n\n**Retrieving Raw Transaction Data using `getrawtransaction`**\nYou can retrieve the raw transaction data using the `getrawtransaction` command. For example:\n```bash\n> verus getrawtransaction \"txid\" (verbose)\n```\nThe `getrawtransaction` command returns the raw transaction data for a given transaction ID (`txid`). If `verbose` is set to 0, the command returns a string that is serialized, hex-encoded data for the transaction. If `verbose` is set to a non-zero value, the command returns a JSON object with information about the transaction, including the transaction ID, version, locktime, expiry height, input and output information, and script data.\n\nBy default, the `getrawtransaction` command only works if the transaction is in the mempool or if there is an unspent output in the UTXO for the transaction. To make it always work, you need to maintain a transaction index using the `-txindex` command line option.",
    "Create a transaction with no inputs\n```bash\n> verus createrawtransaction \"[]\" \"{\\\"myaddress\\\":0.01}\"\n```\nAdd sufficient unsigned inputs to meet the output value\n```bash\n> verus fundrawtransaction \"rawtransactionhex\"\n```\nSign the transaction\n```bash\n> verus signrawtransaction \"fundedtransactionhex\"\n```\nSend the transaction\n```bash\n> verus sendrawtransaction \"signedtransactionhex\"\n```### `getrawtransaction \"txid\" ( verbose )`\nNOTE: By default this function only works sometimes. This is when the tx is in the mempool\nor there is an unspent output in the utxo for this transaction. To make it always work,\nyou need to maintain a transaction index, using the -txindex command line option.Return the raw transaction data.If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.\nIf verbose is non-zero, returns an Object with information about 'txid'.#### Arguments:\n1. \"txid\"   (string, required) The transaction id\n2. verbose    (numeric, optional, default=0) If 0, return a string, other return a json objectResult (if verbose is not set or set to 0):\n\"data\"   (string) The serialized, hex-encoded data for 'txid'#### Result (if verbose > 0):\n```json\n{\n \"hex\" : \"data\",    (string) The serialized, hex-encoded data for 'txid'\n \"txid\" : \"id\",    (string) The transaction id (same as provided)\n \"version\" : n,     (numeric) The version\n \"locktime\" : ttt,    (numeric) The lock time\n \"expiryheight\" : ttt,  (numeric, optional) The block height after which the transaction expires\n \"vin\" : [        (array of json objects)\n   {\n    \"txid\": \"id\",  (string) The transaction id\n    \"vout\": n,     (numeric)\n    \"scriptSig\": {   (json object) The script\n     \"asm\": \"asm\", (string) asm\n     \"hex\": \"hex\"  (string) hex\n    },\n    \"sequence\": n   (numeric) The script sequence number\n   }\n   ,...\n ],\n \"v",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]