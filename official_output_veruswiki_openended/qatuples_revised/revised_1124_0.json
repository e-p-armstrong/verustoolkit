[
    "What information does the `getinitialcurrencystate` command in Verus provide about a currency, and how can I use it to retrieve this information?",
    "The `getinitialcurrencystate` command in Verus is used to retrieve the initial state of a currency on a specific chain. This command takes a single argument, `name`, which is the name or chain ID of the chain for which you want to retrieve the currency state.\n\nWhen you run this command, it will return a JSON object containing a wealth of information about the currency. Here's a breakdown of what you can expect to find in this object:\n\n* `flags`: A hexadecimal value representing the flags for the currency.\n* `currencyid`: The i-address of the currency ID.\n* `reservecurrencies`: An array of objects, each representing a reserve currency. Each object contains the currency ID, weight, reserves, and price in reserve for that currency.\n* `initialsupply`: The initial supply of the currency.\n* `emitted`: The currently emitted coins of the currency.\n* `supply`: The current supply of the currency.\n* `currencies`: An object containing information about each currency that can be converted to or from the target currency. This includes the reserve in, native in, reserve out, last conversion price, via conversion price, fees, conversion fees, and prior weights for each currency.\n* `primarycurrencyfees`, `primarycurrencyconversionfees`, `primarycurrencyout`, and `preconvertedout`: Additional information about the primary currency and its conversion fees and outputs.\n\nYou can use this command in two ways: either by running `verus getinitialcurrencystate name` directly in the Verus command line, or by making a JSON-RPC request to the Verus daemon using a tool like `curl`. For example, you could run `curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinitialcurrencystate\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/`.",
    "#### Arguments:\n```\n  \"name\"          (string, required) name or chain ID of the chain to get the export transactions for\n```\n#### Result:\n```json\n{\n \"flags\": n,           (hex) flags for the currency\n \"currencyid\": \"xxxx\",      (text) i-address of the currency ID\n \"reservecurrencies\": [\n  {\n\t\t \"currencyid\": \"xxxx\",    (text) i-address of the currency ID\n\t\t \"weight\": n,         (numeric) The weight of this currence\n\t\t \"reserves\": xxx.xxxxxxxx,  (numeric) The initial amount of this currency in reserve\n\t\t \"priceinreserve\": n     (numeric) The initial conversion rate of this reserve currency\n  }\n ],\n \"initialsupply\" : xxx.xxxxxxxx, (numeric) The initial supply of this currency\n \"emitted\" : xxx.xxxxxxx,     (numeric) The currently emitted coins of this currency\n \"supply\" : xxx.xxxxxxxx,     (numeric) The current supply of this currency\n \"currencies\": {\n  \"xxxx\": {           (text) i-address of the currency ID\n \t \"reservein\": xxx.xxxxxxxx,   \n \t \"nativein\": xxx.xxxxxxxx,\n \t \"reserveout\": xxx.xxxxxxxx,\n \t \"lastconversionprice\": xxx.xxxxxxxx,\n \t \"viaconversionprice\": xxx.xxxxxxxx,\n \t \"fees\": xxx.xxxxxxxx,\n \t \"conversionfees\": xxx.xxxxxxxx,\n   \"priorweights\": xxx.xxxxxxxx\n  },{\n   ...\n  },\n  \"primarycurrencyfees\": xxx.xxxxxxx,\n  \"primarycurrencyconversionfees\": xxx.xxxxxxx,\n  \"primarycurrencyout\": xxx.xxxxxxx,\n  \"preconvertedout\": xxx.xxxxxxx\n}\n```\nExamples:\n```bash\n> verus getinitialcurrencystate name\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getinitialcurrencystate\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getlastimportfrom \"systemname\"`\nReturns the last import from a specific originating system.",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]