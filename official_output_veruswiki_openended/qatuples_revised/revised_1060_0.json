[
    "How do I prioritize a transaction and set multiple mining outputs using the Verus command-line interface, and what are the arguments and results of these commands?",
    "To prioritize a transaction and set multiple mining outputs using the Verus command-line interface, you can use the `prioritisetransaction` and `setminingdistribution` commands, respectively.\n\n**Prioritizing a Transaction:**\nThe `prioritisetransaction` command allows you to modify the priority of a transaction, making it more or less likely to be included in a block. The command takes three arguments: the transaction ID (`txid`), a priority delta, and a fee delta.\n\n* `txid` is the unique identifier of the transaction you want to prioritize.\n* The priority delta is a numeric value that increases or decreases the priority of the transaction. The transaction selection algorithm will consider the transaction as if it had a higher priority.\n* The fee delta is a numeric value (in satoshis) that increases or decreases the fee of the transaction. The fee is not actually paid, but the algorithm for selecting transactions into a block considers the transaction as if it had paid a higher (or lower) fee.\n\nThe result of the `prioritisetransaction` command is a boolean value (`true`) indicating that the command was successful.\n\nHere's an example of how to prioritize a transaction:\n```bash\n> verus prioritisetransaction \"txid\" 0.0 10000\n```\n**Setting Multiple Mining Outputs:**\nThe `setminingdistribution` command allows you to set multiple mining outputs with amounts that will be used to calculate relative outputs to each address for any reward. The command takes a single argument, which is a JSON object that maps destination addresses to relative value outputs.\n\n* Each key in the JSON object is a unique destination address, and each value is the relative value output to that address.\n\nThe result of the `setminingdistribution` command is NULL for success, or an exception otherwise.\n\nHere's an example of how to set multiple mining outputs:\n```bash\n> verus setminingdistribution {\"myaddress\":0.5, \"otheraddress\":0.5}\n```\nNote that you can also use the `curl` command to send JSON-RPC requests to the Verus daemon, as shown in the examples.",
    "#### Arguments:\n```\n1. \"txid\"     (string, required) The transaction id.\n2. priority delta (numeric, required) The priority to add or subtract.\n         The transaction selection algorithm considers the tx as it would have a higher priority.\n         (priority of a transaction is calculated: coinage * value_in_satoshis / txsize)\n3. fee delta   (numeric, required) The fee value (in satoshis) to add (or subtract, if negative).\n         The fee is not actually paid, only the algorithm for selecting transactions into a block\n         considers the transaction as it would have paid a higher (or lower) fee.\n```\n#### Results:\n```\ntrue       (boolean) Returns true\n```\nExamples:\n```bash\n> verus prioritisetransaction \"txid\" 0.0 10000\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"prioritisetransaction\", \"params\": [\"txid\", 0.0, 10000] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `setminingdistribution ( \"jsonminingdistribution\" )`\nSets multiple mining outputs with amounts that will be used to calculate relative outputs to each address for any reward\n#### Arguments\n```json\n{\n \"uniquedestination1\":value  (key/number, required) valid destination address and relative value output to it\n \"uniquedestination2\":value  (key/number, optional) destination address and relative value output\n ...\n}\n```\n#### Result\nNULL for success, exception otherwise\n#### Examples:\n```bash\n> verus setminingdistribution {\"myaddress\":0.5, \"otheraddress\":0.5}\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setminingdistribution\", \"params\": [{\"myaddress\":0.5, \"otheraddress\":0.5}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]