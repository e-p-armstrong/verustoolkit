[
    "How do I define a PBaaS blockchain and export an ID to it using the Verus command line?",
    "Defining a PBaaS blockchain and exporting an ID to it using the Verus command line involves several steps. Here's a detailed breakdown of the process.\n\n**Defining a PBaaS Blockchain:**\nTo define a PBaaS blockchain, you need to create a JSON object that describes the chain's properties. This JSON object should include the following information:\n\n* `name`: the name of the chain\n* `options`: an integer that specifies the chain's options\n* `currencies`: an array of currencies that the chain's native currency can be converted into\n* `conversions`: an array of conversion ratios between the chain's native currency and each currency on the chain\n* `eras`: an array of objects that define the block reward, reward decay, halving, and end of each era in the chain's lifecycle\n* `notaries`: an array of VerusIDs that will serve as notaries on the chain\n* `minnotariesconfirm`: an integer that specifies the minimum number of notaries needed to confirm a block\n* `nodes`: an array of objects that describe the network addresses and IDs of the nodes on the chain\n* `gatewayconvertername`: the name of the bridge that allows funds to be moved on and off the chain\n* `gatewayconverterissuance`: the initial issuance of the bridge's native token\n\nHere's an example of what the JSON object might look like:\n```json\n{\n  \"name\": \"PBaaSChain\",\n  \"options\": 264,\n  \"currencies\": [\n    \"VRSCTEST\"\n  ],\n  \"conversions\": [\n    1\n  ],\n  \"eras\": [\n    {\n      \"reward\": 1200000000,\n      \"decay\": 0,\n      \"halving\": 0,\n      \"eraend\": 0\n    }\n  ],\n  \"notaries\": [\n    \"Notary1@\",\n    \"Notary2@\",\n    \"Notary3@\"\n  ],\n  \"minnotariesconfirm\": 2,\n  \"nodes\": [\n    {\n      \"networkaddress\": \"111.111.111.111:10000\",\n      \"nodeidentity\": \"Node1@\"\n    },\n    {\n      \"networkaddress\": \"111.111.111.112:10000\",\n      \"nodeidentity\": \"Node2@\"\n    }\n  ],\n  \"gatewayconvertername\": \"Bridge\",\n  \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults, which are specified in a separate JSON object. This object includes the following information:\n\n* `currencies`: an array of currencies that the bridge supports\n* `initialcontributions`: an array of initial liquidity contributions for each currency\n* `initialsupply`: the initial supply of the bridge's native token\n\nHere's an example of what the bridge definition JSON object might look like:\n```json\n{\n  \"currencies\": [\n    \"VRSCTEST\",\n    \"PBaaSChain\",\n    \"USD\"\n  ],\n  \"initialcontributions\": [\n    380228.12033701,\n    0,\n    1000000\n  ],\n  \"initialsupply\": 3000000\n}\n```\nOnce you have created these JSON objects, you can pass them to the `definecurrency` command to define the PBaaS blockchain.\n\n**Exporting an ID to a PBaaS Chain:**\nTo export an ID to a PBaaS chain, you can use the `sendcurrency` command. This command requires the following information:\n\n* `address`: the VerusID of the ID you want to export\n* `exportto`: the name of the PBaaS chain you want to export to\n* `exportid`: a boolean that specifies whether to export the ID\n* `amount`: the amount of currency to export\n* `currency`: the currency to export\n\nHere's an example of what the `sendcurrency` command might look like:\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```\nThis command exports the specified ID to the PBaaS chain, along with the specified amount of currency.",
    "#### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\"\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n#### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```",
    "./raw_text_input_wiki/release_notes.md"
]