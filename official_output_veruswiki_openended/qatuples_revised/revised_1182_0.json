[
    "What information can I get about my peers using the `getpeerinfo` command in Verus, and how can I access this information?",
    "The `getpeerinfo` command in Verus returns a list of objects, each containing information about a connected peer. This command provides a detailed view of your node's connections to other nodes in the Verus network.\n\nEach object in the list represents a connected peer and contains the following information:\n\n* `id`: a numeric index of the peer\n* `addr`: the IP address and port of the peer\n* `addrlocal`: the local IP address and port\n* `services`: a string representing the services offered by the peer\n* `lastsend` and `lastrecv`: the timestamps of the last send and receive operations, respectively, in seconds since the Unix epoch (January 1, 1970, GMT)\n* `bytessent` and `bytesrecv`: the total bytes sent and received, respectively\n* `conntime`: the connection time in seconds since the Unix epoch\n* `timeoffset`: the time offset in seconds\n* `pingtime` and `pingwait`: the ping time and ping wait, respectively\n* `version`: the peer's version number\n* `subver`: a string representing the peer's version\n* `inbound`: a boolean indicating whether the connection is inbound (true) or outbound (false)\n* `startingheight`: the starting height (block) of the peer\n* `banscore`: the ban score\n* `synced_headers` and `synced_blocks`: the last header and block, respectively, that are in common with this peer\n* `inflight`: an array of block heights that are currently being requested from this peer\n\nYou can access this information using the `verus` command-line interface or by making a JSON-RPC request to the Verus node. For example, you can use the following command to get the peer information:\n```\nverus getpeerinfo\n```\nAlternatively, you can use `curl` to make a JSON-RPC request:\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\nThis will return the same information as the `getpeerinfo` command.",
    "#### Result:\n```json\n[\n {\n  \"id\": n,            (numeric) Peer index\n  \"addr\":\"host:port\",      (string) The ip address and port of the peer\n  \"addrlocal\":\"ip:port\",     (string) local address\n  \"services\":\"xxxxxxxxxxxxxxxx\", (string) The services offered\n  \"lastsend\": ttt,        (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send\n  \"lastrecv\": ttt,        (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive\n  \"bytessent\": n,        (numeric) The total bytes sent\n  \"bytesrecv\": n,        (numeric) The total bytes received\n  \"conntime\": ttt,        (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)\n  \"timeoffset\": ttt,       (numeric) The time offset in seconds\n  \"pingtime\": n,         (numeric) ping time\n  \"pingwait\": n,         (numeric) ping wait\n  \"version\": v,         (numeric) The peer version, such as 170002\n  \"subver\": \"/MagicBean:x.y.z[-v]/\", (string) The string version\n  \"inbound\": true|false,     (boolean) Inbound (true) or Outbound (false)\n  \"startingheight\": n,      (numeric) The starting height (block) of the peer\n  \"banscore\": n,         (numeric) The ban score\n  \"synced_headers\": n,      (numeric) The last header we have in common with this peer\n  \"synced_blocks\": n,      (numeric) The last block we have in common with this peer\n  \"inflight\": [\n    n,             (numeric) The heights of blocks we're currently asking from this peer\n    ...\n  ]\n }\n ,...\n]\n```\nExamples:\n```bash\n> verus getpeerinfo\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpeerinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]