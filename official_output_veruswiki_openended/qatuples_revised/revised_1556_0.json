[
    "How do I define a new token and a PBaaS blockchain, and what are the implications of setting the `proofprotocol` to `PROOF_CHAINID` when defining a new token?",
    "Defining a new token and a PBaaS blockchain involves using the `definecurrency` command with Verus. Let's break down the process step by step.\n\n**Defining a New Token:**\nTo define a new token, you need to use the `definecurrency` command with a JSON object that specifies the token's properties. For example, let's say you want to define a new token called `mycoin`. You can do this with the following command:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nThis command defines a new token named \"mycoin\" with the following properties:\n\n* `name`: The name of the token, which is `mycoin` in this case.\n* `options`: An integer that specifies additional options for the token, which is set to 33 in this case.\n* `proofprotocol`: This specifies the proof protocol used by the token, which is set to 2 (PROOF_CHAINID) in this case. This means that the controller of the chain ID can mint new coins.\n* `currencies`: An array of currencies that can be converted to `mycoin`, which includes `vrsctest` and `gold` in this case.\n* `minpreconversion`: An array that specifies the minimum amounts of each currency required to convert to `mycoin`.\n* `initialsupply`: The initial supply of `mycoin`, which is set to 20,000 units in this case.\n\n**Implications of Setting `proofprotocol` to `PROOF_CHAINID`:**\nBy setting `proofprotocol` to 2 (PROOF_CHAINID), you are allowing the controller of the chain ID to mint new coins. This means that the controller can create new coins as needed, which can be useful in certain scenarios.\n\nFor example, let's say you want to mint 10,000 new `mycoin` units and send them to an address called `mike@`. You can do this with the following command:\n```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\nThis command mints 10,000 new `mycoin` units and sends them to the `mike@` address.\n\n**Defining a PBaaS Blockchain:**\nDefining a PBaaS blockchain involves creating a JSON object that specifies the blockchain's properties. Here's an example of how to define a PBaaS blockchain:\n```json\n{\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\"\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThis JSON object specifies the properties of the PBaaS blockchain, including its name, options, currencies, conversions, eras, notaries, minimum notaries required to confirm a block, nodes, and gateway converter properties.\n\nThe bridge definition has overridable defaults, which are specified in a separate JSON object:\n```json\n{\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```\nThis JSON object specifies the currencies supported by the bridge, the initial contributions to each currency, and the initial supply of the bridge's native token.",
    "```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```#### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\"\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```",
    "./raw_text_input_wiki/release_notes.md"
]