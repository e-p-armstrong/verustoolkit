[
    "What are the different components of a transaction in Verus, and what information do they contain?",
    "In Verus, a transaction is composed of several components that contain various pieces of information. Here's a breakdown of each component and what they contain:\n\n**Overwintered Flag:** \nThe `verwintered` flag is a boolean value that indicates whether the transaction is Overwintered or not. Overwintered transactions have additional features and security measures.\n\n**Version:** \nThe `version` field is a numeric value that represents the version of the transaction format.\n\n**Version Group ID:** \nThe `versiongroupid` field is an optional string that specifies the version group ID for Overwintered transactions.\n\n**Lock Time:** \nThe `locktime` field is a numeric value that represents the lock time for the transaction.\n\n**Expiry Height:** \nThe `expiryheight` field is an optional numeric value that specifies the last valid block height for mining the transaction (only applicable to Overwintered transactions).\n\n**Inputs (vin):** \nThe `vin` field is an array of JSON objects that contain information about the transaction inputs. Each input object contains the following fields:\n\n* `txid`: the transaction ID\n* `vout`: the output number\n* `scriptSig`: a JSON object that contains the script information, including `asm` (assembly code) and `hex` (hexadecimal code)\n* `sequence`: the script sequence number\n\n**Outputs (vout):** \nThe `vout` field is an array of JSON objects that contain information about the transaction outputs. Each output object contains the following fields:\n\n* `value`: the value of the output in VRSC\n* `n`: the index of the output\n* `scriptPubKey`: a JSON object that contains the script public key information, including:\n\t+ `asm`: the assembly code\n\t+ `hex`: the hexadecimal code\n\t+ `reqSigs`: the required signatures\n\t+ `type`: the type of script (e.g., `pubkeyhash`)\n\t+ `addresses`: an array of strings representing the Komodo addresses associated with the output\n\n**Joinsplit (vjoinsplit):** \nThe `vjoinsplit` field is an array of JSON objects that contain information about the joinsplit transactions (only applicable to transactions with version >= 2). Each joinsplit object contains the following fields:\n\n* `vpub_old`: the public input value in KMD\n* `vpub_new`: the public output value in KMD\n* `anchor`: the anchor value in hexadecimal code\n* `nullifiers`: an array of strings representing the input note nullifiers\n* `commitments`: an array of strings representing the output commitments\n\nThese components work together to form a complete transaction in Verus, providing the necessary information for the network to process and validate the transaction.",
    "verwintered\" : bool  (boolean) The Overwintered flag\n \"version\" : n,     (numeric) The version\n \"versiongroupid\": \"hex\"  (string, optional) The version group id (Overwintered txs)\n \"locktime\" : ttt,    (numeric) The lock time\n \"expiryheight\" : n,   (numeric, optional) Last valid block height for mining transaction (Overwintered txs)\n \"vin\" : [        (array of json objects)\n   {\n    \"txid\": \"id\",  (string) The transaction id\n    \"vout\": n,     (numeric) The output number\n    \"scriptSig\": {   (json object) The script\n     \"asm\": \"asm\", (string) asm\n     \"hex\": \"hex\"  (string) hex\n    },\n    \"sequence\": n   (numeric) The script sequence number\n   }\n   ,...\n ],\n \"vout\" : [       (array of json objects)\n   {\n    \"value\" : x.xxx,      (numeric) The value in VRSC\n    \"n\" : n,          (numeric) index\n    \"scriptPubKey\" : {     (json object)\n     \"asm\" : \"asm\",     (string) the asm\n     \"hex\" : \"hex\",     (string) the hex\n     \"reqSigs\" : n,      (numeric) The required sigs\n     \"type\" : \"pubkeyhash\", (string) The type, eg 'pubkeyhash'\n     \"addresses\" : [      (json array of string)\n      \"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\"  (string) komodo address\n      ,...\n     ]\n    }\n   }\n   ,...\n ],\n \"vjoinsplit\" : [    (array of json objects, only for version >= 2)\n   {\n    \"vpub_old\" : x.xxx,     (numeric) public input value in KMD\n    \"vpub_new\" : x.xxx,     (numeric) public output value in KMD\n    \"anchor\" : \"hex\",     (string) the anchor\n    \"nullifiers\" : [      (json array of string)\n     \"hex\"           (string) input note nullifier\n     ,...\n    ],\n    \"commitments\" : [      (json array of string)\n     \"hex\"           (string) ou",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]