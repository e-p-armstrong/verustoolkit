[
    "How do I verify the authenticity of a downloaded Verus package to ensure it has not been tampered with, and what are the implications of the PBaaS protocol updates on ID control technology?",
    "Verifying the authenticity of a downloaded Verus package involves extracting the archive, verifying the signature using the extracted text file, and then extracting the archive to the desired directory. To do this, you can use the `verifyfile` or `verifyhash` commands provided by Verus.\n\n**Verifying File Directly:**\nYou can use the `verifyfile` command to verify the signature of the extracted archive directly. The command takes three arguments: the ID of the signer (in this case, \"Verus Coin Foundation Releases@\"), the signature, and the path to the file to be verified. Here's an example:\n\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AcBSIQABQSBIKAh7/OaCTKSTt5djpmiQ7Mx8owKFNPdolko/8I4WB3StZhvchKRFfAAo5bV9eREGNr5Vq4z+4Fwl+ZRkw1Al\" \"/Downloads/Verus-CLI-Linux-v0.9.4-2-x86_64/Verus-CLI-Linux-v0.9.4-2-x86_64.tar.gz\"\n```\n\n**Verifying Using a Checksum:**\nAlternatively, you can use the `verifyhash` command to verify the signature using a checksum. This command takes three arguments: the ID of the signer, the signature, and the checksum to be verified. Here's an example:\n\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AcBSIQABQSBIKAh7/OaCTKSTt5djpmiQ7Mx8owKFNPdolko/8I4WB3StZhvchKRFfAAo5bV9eREGNr5Vq4z+4Fwl+ZRkw1Al\" ce611f081daba33876af496c5699b669da0e35343106801e21c4ed6169460140\n```\n\nIf the signature is valid, the result will be `true`.\n\nThe PBaaS protocol updates have introduced significant changes to ID control technology, enabling self-sovereign, tokenized ID control. This means that any ID, including sub-IDs, can generate a single token as its currency, which grants the holder additional revoke/recover power over the ID. This technology is now available in the pre-existing APIs, including `updateidentity`, `revokeidentity`, and `recoveryidentity`.",
    "## Verifying Downloads\nA txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\".\n1) Extract downloaded archive\n2) Verify signature for the extracted archive using the extracted text file.\n3) Extract archive to desired directory\n### CLI examples\n**Verifying file directly**\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" \"AcBSIQABQSBIKAh7/OaCTKSTt5djpmiQ7Mx8owKFNPdolko/8I4WB3StZhvchKRFfAAo5bV9eREGNr5Vq4z+4Fwl+ZRkw1Al\" \"/Downloads/Verus-CLI-Linux-v0.9.4-2-x86_64/Verus-CLI-Linux-v0.9.4-2-x86_64.tar.gz\"\n```\n**Verifying using a checksum**\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" \"AcBSIQABQSBIKAh7/OaCTKSTt5djpmiQ7Mx8owKFNPdolko/8I4WB3StZhvchKRFfAAo5bV9eREGNr5Vq4z+4Fwl+ZRkw1Al\" ce611f081daba33876af496c5699b669da0e35343106801e21c4ed6169460140\n```**The result will be true if the signature is valid.**\n```\ntrue\n```\nAnnouncing v0.9.4-1 with the world\u2019s first self-sovereign, tokenized ID control technology, RECOMMENDED FOR MAINNET -- MANDATORY FOR TESTNET USEThis release has no material mainnet changes.For testnet, this is RC3 of the PBaaS protocol and is required to follow the main testnet chain. RC3 has some significant and important API additions, including the ability for any ID at all, even sub-IDs, to generate a single token as its currency. That token then enables whoever holds it to have another level of revoke/recover power over the ID, in addition to the normal revocation and recovery authorities, which also still work. This technology is now available in the pre-existing APIs, updateidentity (for changing revocation / recovery authorities), revokeidentity, and recoveryidentity. Please see help for details.",
    "./raw_text_input_wiki/release_notes.md"
]