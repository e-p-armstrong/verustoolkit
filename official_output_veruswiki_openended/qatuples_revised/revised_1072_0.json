[
    "What are the different options available when defining a currency or blockchain on Verus, and how do they affect the behavior of the currency or blockchain?",
    "When defining a currency or blockchain on Verus, there are several options available that can be used to customize its behavior. These options are represented as flags, and they can be combined using bitwise operations to create a single option value.\n\nHere are some of the available options:\n\n* `OPTION_PBAAS`: This option indicates that the currency or blockchain is a PBaaS (Private Blockchain as a Service) chain definition. It is represented by the value 0x100 or 256 in decimal.\n\n* `OPTION_GATEWAY_CONVERTER`: This option means that for a specific PBaaS gateway, this is the default converter and will publish prices. It is represented by the value 0x200 or 512 in decimal.\n\n* `OPTION_GATEWAY_NAMECONTROLLER`: This option specifies that when not set on a gateway, top-level ID and currency registration happen on the launch chain. It is represented by the value 0x400 or 1024 in decimal.\n\n* `OPTION_NFT_TOKEN`: This option indicates that the token is a single satoshi NFT token, which tokenizes control over the root ID. It is represented by the value 0x800 or 2048 in decimal.\n\n* `OPTION_NO_IDS`: This option specifies that the currency cannot issue IDs. It is represented by the value 0x1000 or 4096 in decimal.\n\nWhen defining a currency or blockchain, you can combine these options using bitwise operations to create a single option value. For example, if you want to define a PBaaS chain with a default converter that publishes prices, you would use the option value `0x300` or 768 in decimal, which is the combination of `OPTION_PBAAS` and `OPTION_GATEWAY_CONVERTER`.\n\nIn addition to these options, there are also other properties that can be specified when defining a currency or blockchain, such as:\n\n* `name`: The name of the currency or blockchain.\n\n* `idregistrationfees`: The price of an identity in native currency.\n\n* `idreferrallevels`: The number of levels ID referrals go back in reward.\n\n* `notaries`: A list of identities that are assigned as chain notaries.\n\n* `minnotariesconfirm`: The minimum number of unique notary signatures required to confirm an auto-notarization.\n\n* `notarizationreward`: The default VRSC notarization reward total for the first billing period.\n\n* `proofprotocol`: The proof protocol used by the currency or blockchain. This can be either `PROOF_PBAASMMR` (Verus MMR proof, no notaries required) or `PROOF_CHAINID` (non-native only, currency has centralized control).\n\nBy combining these options and properties, you can customize the behavior of your currency or blockchain on Verus to suit your specific needs.",
    "                  OPTION_PBAAS = 0x100          // (256 decimal) this is a PBaaS chain definition\n                     OPTION_GATEWAY_CONVERTER = 0x200    // (512 decimal) this means that for a specific PBaaS gateway, this is the default converter and will publish prices\n                     OPTION_GATEWAY_NAMECONTROLLER = 0x400 // (1024 decimal) when not set on a gateway, top level ID and currency registration happen on launch chain\n                     OPTION_NFT_TOKEN = 0x800        // (2048 decimal) single satoshi NFT token, tokenizes control over the root ID\n                     OPTION_NO_IDS = 0x1000         // (4096 decimal) this currency cannot issue IDs\n\t\t\t\t\t\t\t\t\t\t        OPTIONS_FLAG_MASK = 0xfff\n \"name\" : \"xxxx\",         (string, required) name of existing identity with no active or pending blockchain\n \"idregistrationfees\" : \"xx.xx\", (value, required) price of an identity in native currency\n \"idreferrallevels\" : n,     (int, required) how many levels ID referrals go back in reward\n \"notaries\" : \"[identity,..]\",  (list, optional) list of identities that are assigned as chain notaries\n \"minnotariesconfirm\" : n,    (int, optional) unique notary signatures required to confirm an auto-notarization\n \"notarizationreward\" : \"xx.xx\", (value, required) default VRSC notarization reward total for first billing period\n \"proofprotocol\" : n,       (int, optional) if 2, currency can be minted by whoever controls the ID\n                         1 = PROOF_PBAASMMR - Verus MMR proof, no notaries required\n                         2 = PROOF_CHAINID - non-native only - currency has centralized control, and\n                             ",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]