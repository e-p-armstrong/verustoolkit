[
    "What are some important considerations to keep in mind when defining a PBaaS chain using the `definecurrency` command in Verus, and what limitations should I be aware of when working with multi-currency features?",
    "When defining a PBaaS chain using the `definecurrency` command in Verus, there are several important considerations to keep in mind.\n\nFirst, the `definecurrency` command takes two JSON objects as input: one for the PBaaS chain definition, and another for the overridable defaults of the bridge. The PBaaS chain definition includes properties such as the chain's name, options, currencies, conversions, eras, notaries, and nodes. The bridge defaults define the currencies supported by the bridge, initial contributions, and initial supply.\n\nHowever, there are some limitations to be aware of when working with multi-currency features in Verus. One limitation is that you cannot create a currency from an ID that has a properly encoded i-address as its actual name, rather than its calculated ID. This is because using an i-address as a currency name can cause problems when referring to the currency or identity. It is generally advised to avoid doing this.\n\nAnother limitation, specific to the GUI, is that if a currency is already supported in the Verus Desktop, such as BTC or ETH, you will not be able to use those same names as a PBaaS chain. This limitation is considered errata and will be addressed before mainnet availability.\n\nIt is essential to carefully consider these limitations and restrictions when working with multi-currency features in Verus to avoid potential problems and ensure successful implementation of your PBaaS chain.",
    "Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
    "./raw_text_input_wiki/release_notes.md"
]