[
    "How do you define a PBaaS chain using the `definecurrency` command, and what are some limitations to be aware of when working with multi-currency in Verus?",
    "To define a PBaaS chain using the `definecurrency` command, you need to pass two JSON objects to the command. The first JSON object defines the properties of the PBaaS chain, such as its name, options, currencies, conversions, eras, notaries, and nodes. The second JSON object defines the overridable defaults of the bridge, including the currencies it supports, initial contributions, and initial supply.\n\nHere is an example of how to define a PBaaS chain using the `definecurrency` command:\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\nWhen working with multi-currency in Verus, there are some limitations to be aware of:\n\n1. **IDS with i-addresses as names**: You should avoid creating an ID with an i-address as its actual name, as this can cause problems when referring to the ID or currency. Instead, use a descriptive name for the ID, and let the protocol calculate the i-address based on the name registration.\n2. **Currency name conflicts**: In the GUI, if a currency is already supported in Verus Desktop, such as BTC or ETH, you will not be able to use those same names as a PBaaS chain. This limitation will be resolved before mainnet availability.\n\nBy understanding these limitations and following the correct syntax for defining a PBaaS chain, you can effectively create and manage multi-currency systems in Verus.",
    "Now pass those definitions to `definecurrency`\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```## Limitations in multi-currency to be aware of:\n1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
    "./raw_text_input_wiki/release_notes.md"
]