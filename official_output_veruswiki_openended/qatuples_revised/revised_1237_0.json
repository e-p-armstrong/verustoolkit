[
    "What is the `getvdxfid` command in Verus, and how can I use it to generate a VDXF ID, including what information is returned and how it can be used in different scenarios?",
    "The `getvdxfid` command in Verus is used to generate a VDXF ID, which is a unique identifier used to represent a URI (Uniform Resource Identifier) in the Verus ecosystem. The VDXF ID is a combination of the URI, along with other parameters, processed through the VDXF (Verus Data eXchange Format) algorithm.\n\nWhen you run the `getvdxfid` command, it returns a JSON object with several key-value pairs. The main components of this object are:\n\n1. `vdxfid`: a base58check encoded string representing the VDXF ID of the input URI.\n2. `hash160result`: a 20-byte hash of the input URI string, represented as a hexadecimal string.\n3. `qualifiedname`: an object containing the leaf name and parent ID (or namespace) of the input URI.\n4. `bounddata`: an object containing additional data bound to the VDXF ID, if applicable. This includes the i-address or VDXF key, a 256-bit hash, and an integer index number.\n\nThe `getvdxfid` command can be used in various scenarios, such as:\n\n* Creating a signature for a URI, by combining the URI with other parameters and processing it through the VDXF algorithm.\n* Verifying a signature, by generating the VDXF ID and comparing it with the expected value.\n* Using the VDXF ID as a unique identifier for a URI in the Verus ecosystem.\n\nYou can use the `getvdxfid` command in different ways, including:\n\n* As a command-line argument, by running `verus getvdxfid \"input_uri\"` in the terminal.\n* As a JSON RPC call, by sending a JSON request to the Verus daemon, with the `getvdxfid` method and the input URI as a parameter.\n\nOverall, the `getvdxfid` command is a powerful tool in the Verus ecosystem, allowing you to generate unique identifiers for URIs and use them in a variety of applications.",
    "#### Result:\n```json\n{                   (object) object with both base58check and hex vdxfid values of string and parents\n \"vdxfid\"               (base58check) i-ID of the URI processed with the VDXF & all combined parameters\n \"hash160result\"           (hexstring) 20 byte hash in hex of the URL string passed in, processed with the VDXF\n \"qualifiedname\":           (object) separate name and parent ID value\n {\n  \"name\": \"namestr\"         (string) leaf name\n  \"parentid\" | \"namespace\":\"string\" (string) parent ID (or namespace if VDXF key) of name\n }\n \"bounddata\": {            (object) if additional data is bound to create the value, it is returned here {\n  \"vdxfkey\":\"i-address or vdxfkey\"  (string) i-address that was combined via hash\n  \"uint256\":\"32bytehex\"       (hexstr) 256 bit hash combined with hash\n  \"indexnum\":int           (integer) int32_t combined with hash\n }\n}```\nExamples:\n```bash\nCreate the signature\n> verus getvdxfid \"system.currency.export\"Verify the signature\n> verus getvdxfid \"idname::userdefinedgroup.subgroup.publishedname\"As json rpc\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getvdxfid\", \"params\": [\"idname::userdefinedgroup.subgroup.publishedname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```## Wallet### `addmultisigaddress nrequired [\"key\",...] ( \"account\" )`\nAdd a nrequired-to-sign multisignature address to the wallet.\nEach key is a VRSC address or hex-encoded public key.\nIf 'account' is specified (DEPRECATED), assign address to that account.",
    "./raw_text_input_wiki/clifaq-02_verus_commands.md"
]