[
    "## Conversation that answers the provided questions:\n**User:**\nHi, I've been following the developments in Verus and I'm curious about the TestNet protocols. What are some key enhancements to the TestNet protocols in Verus, and how do they improve scalability, currency management, and prevent front running?\n\n**AI Assistant:**\nThe TestNet protocols in Verus have undergone significant enhancements to improve scalability, currency management, and prevent front running. Let me break down these enhancements for you.\n\nIn Verus, the TestNet protocols have been enhanced to improve scalability, currency management, and prevent front running. Some key enhancements include:\n\n**Increased Scale:** The TestNet protocols have been optimized to handle a higher volume of transactions, allowing for increased scalability and faster processing times.\n\n**Currency Burn Functions:** A new parameter called \"burn\" has been added to the \"sendcurrency\" API. When \"burn\" is set to 1, a currency sent (which must be a token or fractional currency) is officially removed from that currency's supply. In the case of a fractional currency, this will have the effect of increasing the on-chain price for all holders, depending on the amount burned.\n\n**Centralized Fractional Currencies:** The protocols now allow for the application of both fractional and centralized attributes to a currency. This enables price-neutral minting by the currency controller through automatic reductions of the reserve ratio of all currencies.\n\n**Preventing Front Running:** To prevent front running, conversions are now processed in a way that ensures all transactions in an aggregation of import blocks are simultaneously solved in all currency conversion directions. This means that all conversions are processed at the same rate, with no spread between the conversion to and from a currency. As a result, all users get the same price in each direction, eliminating the possibility of front running.\n\nThese enhancements provide a more robust and efficient system for managing currencies and preventing unfair practices in Verus. Do you have any further questions about these enhancements, or how they improve the overall Verus ecosystem?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What are some key enhancements to the TestNet protocols in Verus, and how do they improve scalability, currency management, and prevent front running?",
            "In Verus, the TestNet protocols have been enhanced to improve scalability, currency management, and prevent front running. Some key enhancements include:\n\n**Increased Scale:** The TestNet protocols have been optimized to handle a higher volume of transactions, allowing for increased scalability and faster processing times.\n\n**Currency Burn Functions:** A new parameter called \"burn\" has been added to the \"sendcurrency\" API. When \"burn\" is set to 1, a currency sent (which must be a token or fractional currency) is officially removed from that currency's supply. In the case of a fractional currency, this will have the effect of increasing the on-chain price for all holders, depending on the amount burned.\n\n**Centralized Fractional Currencies:** The protocols now allow for the application of both fractional and centralized attributes to a currency. This enables price-neutral minting by the currency controller through automatic reductions of the reserve ratio of all currencies.\n\n**Preventing Front Running:** To prevent front running, conversions are now processed in a way that ensures all transactions in an aggregation of import blocks are simultaneously solved in all currency conversion directions. This means that all conversions are processed at the same rate, with no spread between the conversion to and from a currency. As a result, all users get the same price in each direction, eliminating the possibility of front running.\n\nThese enhancements provide a more robust and efficient system for managing currencies and preventing unfair practices in Verus.",
            "# Enhancements to TestNet Protocols for Increased Scale, Currency Burn Functions, and Centralized Fractional Currencies\nVersion v0.7.1-5 is not yet considered hardened for mainnet, but has increased scale over previous versions in addition to the ability to apply both fractional and centralized attributes to a currency. This allows price neutral minting by the currency controller through automatic reductions of the reserve ratio of all currencies. This version also enables a new parameter to the \"sendcurrency\" API called \"burn\". If \"burn\" is set to 1, a currency sent, which must be a token or fractional currency is officially removed from that currency's supply. In the case of a fractional currency, this will have the effect of increasing the on-chain price for all holders, depending on the amount burned.# An end to front running\nConversion will always be at the same rate as all conversions processed in one group of transactions. There is also no spread between the conversion to and from a currency. All transactions in a aggregation of import blocks, which will be detailed in later documentation, are simultaneously solved in all currency conversion directions and all converted at the same rate, all getting the same price in each direction as any person who may be exchanging in the other.",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]