[
    "## Conversation that answers the provided questions:\n**User:**\nI'm interested in learning more about Verus Vault's time-locking feature. Can you explain how it works, and what are some potential use cases for it? Additionally, how do I use Verus commands to update an identity with time-locking and time delay features, and what are some other related features of Verus?\n\n**AI Assistant:**\nVerus Vault's time-locking feature is a powerful protocol capability that allows users to lock and unlock identities, as well as delay the unlock process, providing an additional layer of security and flexibility.\n\nThis feature can be used in various ways, such as:\n\n* Providing time-locked funds to team members, children, employees, or structured in a way to provide time-locked deal and payment terms.\n* Creating delayed lock opening, where an identity is locked until a certain block height is reached, and then the unlock period starts counting down.\n* Theft resistance, where an identity is locked and can only be unlocked after a certain period of time, preventing unauthorized access.\n\nTo update an identity with time-locking and time delay features using Verus commands, you can use the following formats:\n\n* To set a time lock, use the `updateidentity` command with the `timelock` parameter set to the desired unlock block height:\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n* To set a time delay, use the `updateidentity` command with the `timelock` parameter set to the desired unlock block delay, and the `flags` set to 2:\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\nSome important notes to keep in mind:\n\n* Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n* A locked identity cannot revoke itself.\n\nAdditionally, Verus provides other related features, such as the `getcurrencyconverters` API, which retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves. You can use this API to find currencies that meet certain liquidity thresholds, for example:\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nThis command will return all currencies that have btc/eth markets at or above the liquidity threshold.\n\nIt's also important to note that all testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset.\n\nDo you have any further questions about time-locking, or would you like to know more about other Verus features?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "How does Verus Vault's time-locking feature work, and what are some potential use cases for it? Additionally, how do I use Verus commands to update an identity with time-locking and time delay features, and what are some other related features of Verus?",
            "Verus Vault's time-locking feature is a powerful protocol capability that allows users to lock and unlock identities, as well as delay the unlock process, providing an additional layer of security and flexibility. This feature can be used in various ways, such as:\n\n* Providing time-locked funds to team members, children, employees, or structured in a way to provide time-locked deal and payment terms.\n* Creating delayed lock opening, where an identity is locked until a certain block height is reached, and then the unlock period starts counting down.\n* Theft resistance, where an identity is locked and can only be unlocked after a certain period of time, preventing unauthorized access.\n\nTo update an identity with time-locking and time delay features using Verus commands, you can use the following formats:\n\n* To set a time lock, use the `updateidentity` command with the `timelock` parameter set to the desired unlock block height:\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\n* To set a time delay, use the `updateidentity` command with the `timelock` parameter set to the desired unlock block delay, and the `flags` set to 2:\n```\nverus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n```\nSome important notes to keep in mind:\n\n* Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n* A locked identity cannot revoke itself.\n\nAdditionally, Verus provides other related features, such as the `getcurrencyconverters` API, which retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves. You can use this API to find currencies that meet certain liquidity thresholds, for example:\n```\nverus -chain=VRSCTEST getcurrencyconverters btc eth\n```\nThis command will return all currencies that have btc/eth markets at or above the liquidity threshold.\n\nIt's also important to note that all testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset.",
            "In addition to use cases related to theft resistance and delayed lock opening, Verus Vault can be used to provide more standard forms of time-locking by simply time locking and unlocking in one operation, leaving the unlock period immediately counting down. This capability could be used to provide time locked funds to team members, children, employees, or structured in a way to provide time locked deal and payment terms. The uses for this technology are certainly beyond those that we have already thought of, and we look forward to seeing how people leverage this powerful new protocol capability.- **Time Lock:**\n  The timelock parameter defines the unlock height of the identity.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 0, \"timelock\": <Unlock block height>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- **Time Delay:**\n  The timelock parameter defines how many blocks to delay an ID's unlock when the flags are set back to an unlocked state.\n  ```\n  verus -chain=VRSCTEST updateidentity '{\"name\": \"ID@\", \"flags\": 2, \"timelock\": <Unlock block delay>, \"minimumsignatures\": 1, \"primaryaddresses\": [\"t-address\"]}'\n  ```\n- Revoking an identity will clear its locked status, regardless of time delay or unlock height.\n- A locked identity cannot revoke itself.\n### Conversion Queries\nThe `getcurrencyconverters` API retrieves all currencies that have at least 1000 VRSC in reserve, are greater than 10% VRSC reserve ratio, and have all listed currencies as reserves\n- **E.g. BTC ETH:**\n  ```\n  verus -chain=VRSCTEST getcurrencyconverters btc eth\n  ```\n  Will return all currencies that have btc/eth markets at or above the liquidity threshold.### Sending and Converting Currency\n**Warning: All testnet coins/currencies have no value and will disappear whenever VRSCTEST is reset**",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]