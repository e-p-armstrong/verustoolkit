[
    "## Conversation that answers the provided questions:\n**User:**\nHi, I'm trying to create a PBaaS blockchain using Verus and export an ID to it, but I'm not sure how to do it. Can you walk me through the process?\n\n**AI Assistant:**\nDefining a PBaaS blockchain and exporting an ID to it using Verus involves a few steps. Let me break it down for you.\n\nTo define a PBaaS blockchain using Verus, you need to create two JSON objects: one for the blockchain definition and another for the bridge definition. The blockchain definition JSON object contains properties such as:\n\n* `name`: the name of the blockchain\n* `options`: an integer that configures the blockchain's behavior\n* `currencies`: an array of currencies that can be converted to the blockchain's native currency\n* `conversions`: an array of conversion ratios between the native currency and each currency on the chain\n* `eras`: an array of objects that define the block reward, reward decay, halving, and end of each era in the chain's lifecycle\n* `notaries`: an array of VerusIDs that will serve as notaries on the chain\n* `minnotariesconfirm`: an integer that specifies the minimum number of notaries needed to confirm a block\n* `nodes`: an array of objects that describe the network addresses of the nodes on the chain, as well as their IDs\n* `gatewayconvertername`: the name of the bridge that can be used to move funds on and off the PBaaS chain\n* `gatewayconverterissuance`: the initial issuance of the bridge's native token\n\nThe bridge definition JSON object has its own properties, such as:\n\n* `currencies`: an array of currency tickers that the bridge supports (including the native coins of the chains being bridged)\n* `initialcontributions`: an array of initial liquidity for each currency in the bridge\n* `initialsupply`: the initial supply of the bridge's native token\n\nOnce you have created these two JSON objects, you can pass them to the `definecurrency` command in Verus to create the PBaaS blockchain.\n\nNow, to export an ID to a PBaaS chain, you can use the `sendcurrency` command in Verus. This command takes several parameters, including:\n\n* `address`: the ID that you want to export\n* `exportto`: the name of the PBaaS chain that you want to export the ID to\n* `exportid`: a boolean that specifies whether to export the ID or not\n* `amount`: the amount of currency to send with the ID\n* `currency`: the currency to use for the export\n\nHere is an example of how to export an ID to a PBaaS chain using the `sendcurrency` command:\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```\nThis command exports the ID `IDNAME@` to the PBaaS chain `PBaaSChainName` with 100 units of `vrsctest` currency.\n\nDo you have any questions about this process, or would you like more information on any of the steps involved?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "How do I define a PBaaS blockchain and export an ID to it using Verus?",
            "To define a PBaaS blockchain using Verus, you need to create two JSON objects: one for the blockchain definition and another for the bridge definition. The blockchain definition JSON object contains properties such as:\n\n* `name`: the name of the blockchain\n* `options`: an integer that configures the blockchain's behavior\n* `currencies`: an array of currencies that can be converted to the blockchain's native currency\n* `conversions`: an array of conversion ratios between the native currency and each currency on the chain\n* `eras`: an array of objects that define the block reward, reward decay, halving, and end of each era in the chain's lifecycle\n* `notaries`: an array of VerusIDs that will serve as notaries on the chain\n* `minnotariesconfirm`: an integer that specifies the minimum number of notaries needed to confirm a block\n* `nodes`: an array of objects that describe the network addresses of the nodes on the chain, as well as their IDs\n* `gatewayconvertername`: the name of the bridge that can be used to move funds on and off the PBaaS chain\n* `gatewayconverterissuance`: the initial issuance of the bridge's native token\n\nThe bridge definition JSON object has its own properties, such as:\n\n* `currencies`: an array of currency tickers that the bridge supports (including the native coins of the chains being bridged)\n* `initialcontributions`: an array of initial liquidity for each currency in the bridge\n* `initialsupply`: the initial supply of the bridge's native token\n\nOnce you have created these two JSON objects, you can pass them to the `definecurrency` command in Verus to create the PBaaS blockchain.\n\nTo export an ID to a PBaaS chain, you can use the `sendcurrency` command in Verus. This command takes several parameters, including:\n\n* `address`: the ID that you want to export\n* `exportto`: the name of the PBaaS chain that you want to export the ID to\n* `exportid`: a boolean that specifies whether to export the ID or not\n* `amount`: the amount of currency to send with the ID\n* `currency`: the currency to use for the export\n\nHere is an example of how to export an ID to a PBaaS chain using the `sendcurrency` command:\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```\nThis command exports the ID `IDNAME@` to the PBaaS chain `PBaaSChainName` with 100 units of `vrsctest` currency.",
            "#### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n#### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]