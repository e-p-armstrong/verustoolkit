[
    "## Conversation that answers the provided questions:\n**User:**\nI'm trying to integrate another system with Verus, and I've heard that the `submitimports` command is what I need. Can you explain what it does and how to use it?\n\n**AI Assistant:**\nThe `submitimports` command is a crucial tool for integrating other systems with the Verus ecosystem. It allows you to accept a set of exports from another system and post them to the VRSC network.\n\nTo be more specific, the `submitimports` command enables the transfer of assets and data between systems. To use it, you'll need to provide a set of arguments in a specific format. These arguments include:\n\n* `sourcesystemid`: the ID of the system from which the exports are coming\n* `notarizationtxid`: the transaction ID of the notarization transaction\n* `notarizationtxoutnum`: the output number of the notarization transaction\n* `exports`: an array of export objects, each containing:\n\t+ `height`: the block height of the export\n\t+ `txid`: the transaction ID of the export\n\t+ `txoutnum`: the output number of the export\n\t+ `partialtransactionproof`: a partial proof of the transaction\n\t+ `transfers`: an array of transfer objects, each representing a transfer of assets\n\nYou can use the `submitimports` command in two ways: through the Verus command-line interface using the `verus` command, or through an HTTP request using the `curl` command.\n\nWhen you run the command, it will return an array of objects, each representing a successful import, with the following properties:\n\n* `currency`: the ID of the currency being imported\n* `txid`: the transaction ID of the import\n* `txoutnum`: the output number of the import\n\nBy using the `submitimports` command, you can seamlessly integrate other systems with Verus, enabling the transfer of assets and data between them.\n\nDo you have any questions about the arguments or the usage of the `submitimports` command? Would you like more information on how to integrate your specific system with Verus?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What is the purpose of the `submitimports` command in Verus, and how do you use it to accept a set of exports from another system and post them to the VRSC network?",
            "The `submitimports` command in Verus is used to accept a set of exports from another system and post them to the VRSC network. This command allows for the integration of other systems with the Verus ecosystem, enabling the transfer of assets and data between them.\n\nTo use the `submitimports` command, you need to provide a set of arguments in a specific format. These arguments include:\n\n* `sourcesystemid`: the ID of the system from which the exports are coming\n* `notarizationtxid`: the transaction ID of the notarization transaction\n* `notarizationtxoutnum`: the output number of the notarization transaction\n* `exports`: an array of export objects, each containing:\n\t+ `height`: the block height of the export\n\t+ `txid`: the transaction ID of the export\n\t+ `txoutnum`: the output number of the export\n\t+ `partialtransactionproof`: a partial proof of the transaction\n\t+ `transfers`: an array of transfer objects, each representing a transfer of assets\n\nThe command can be used in two ways: through the Verus command-line interface using the `verus` command, or through an HTTP request using the `curl` command.\n\nThe result of the `submitimports` command is an array of objects, each representing a successful import, with the following properties:\n\n* `currency`: the ID of the currency being imported\n* `txid`: the transaction ID of the import\n* `txoutnum`: the output number of the import\n\nBy using the `submitimports` command, you can integrate other systems with Verus, enabling the seamless transfer of assets and data between them.",
            "### `submitimports '{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", Fresendw\"transfers\": [{transfer1}, {transfer2},...]}, ...]}'`\nAccepts a set of exports from another system to post to the VRSC network.#### Arguments:\n```json\n {\n  \"sourcesystemid\":\"systemid\"    ()\n  \"notarizationtxid\":\"txid\"     ()\n  \"notarizationtxoutnum\":n       ()\n  \"exports\": [{\n    \"height\": n,\n    \"txid\": \"hexid\",\n    \"txoutnum\": n,\n    \"partialtransactionproof\": \"hexstr\",\n    \"transfers\": [{transfer1}, {transfer2},...]\n  }, ...]\n }\n```\n#### Result:\n```json\n [{\n   \"currency\": \"currencyid\"\n   \"txid\": \"hexid\",\n   \"txoutnum\": n\n }, ...]\n```\nExamples:\n```bash\n> verus submitimports {\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]}\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitimports\", \"params\": [{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ]
]