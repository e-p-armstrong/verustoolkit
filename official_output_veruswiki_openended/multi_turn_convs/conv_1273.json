[
    "## Conversation that answers the provided questions:\n**User:**\nHi, I have a few questions about more advanced features in Verus. Can you explain the process of signing transactions from multi-signature IDs, creating a tokenized ID control (next generation NFT), and creating an identity with a fractional currency as its parent in Verus?\n\n**AI Assistant:**\nI'd be happy to walk you through these advanced features in Verus.\n\n**Signing Transactions from Multi-Signature IDs:**\nIn Verus, you can sign transactions from multi-signature IDs using a combination of commands. Here's a step-by-step guide:\n\n1. **Create a transaction:** Use the `sendcurrency` command to create a transaction from a multi-signature ID. The command format is:\n```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n```\n2. **Get the raw transaction data:** Use the `z_getoperationstatus` command to get the raw transaction data. You'll need the operation ID returned by `sendcurrency`.\n```\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\n3. **Sign the transaction:** Take the raw hex transaction data to each additional wallet containing the additional signing addresses/IDs. Use the `signrawtransaction` command to sign the transaction.\n```\nverus signrawtransaction <raw_hex_transaction>\n```\n4. **Broadcast the signed transaction:** After the last necessary signature is applied, broadcast the signed transaction on the network using the `sendrawtransaction` command.\n```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```\n\n**Creating a Tokenized ID Control (Next Generation NFT):**\nTo create a tokenized ID control, also known as a next-generation NFT, you need to define a currency with specific flags and properties. Here's an example:\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```\nThe key properties here are:\n\n* `options`: Set to 2080, which includes the flags `OPTION_NFT_TOKEN` and `OPTION_TOKEN`.\n* `preallocations`: Specifies the pre-allocation of the token to a specific address.\n* `maxpreconversion`: Set to 0, indicating that the maximum pre-conversion is 0.\n\n**Creating an Identity with a Fractional Currency as its Parent:**\nTo create an identity with a fractional currency as its parent, you need to use the `registernamecommitment` command with additional arguments. The format is:\n```\nverus registernamecommitment <username> <commitment> <parent_currency> <funding_address>\n```\nFor example:\n```\nverus registernamecommitment \"username\" \"commitment\" \"vrsc-btc\" \"funding_address\"\n```\nIn this example, `vrsc-btc` is the parent currency, and `funding_address` is the address used to fund the name commitment and identity registration. You can use quotes `\"\"` to leave fields blank, such as the referrer field.\n\nDo you have any further questions about these advanced features in Verus, or would you like me to clarify any of the steps?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "Can you explain the process of signing transactions from multi-signature IDs, creating a tokenized ID control (next generation NFT), and creating an identity with a fractional currency as its parent in Verus?",
            "**Signing Transactions from Multi-Signature IDs:**\nIn Verus, you can sign transactions from multi-signature IDs using a combination of commands. Here's a step-by-step guide:\n\n1. **Create a transaction:** Use the `sendcurrency` command to create a transaction from a multi-signature ID. The command format is:\n```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n```\n2. **Get the raw transaction data:** Use the `z_getoperationstatus` command to get the raw transaction data. You'll need the operation ID returned by `sendcurrency`.\n```\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\n3. **Sign the transaction:** Take the raw hex transaction data to each additional wallet containing the additional signing addresses/IDs. Use the `signrawtransaction` command to sign the transaction.\n```\nverus signrawtransaction <raw_hex_transaction>\n```\n4. **Broadcast the signed transaction:** After the last necessary signature is applied, broadcast the signed transaction on the network using the `sendrawtransaction` command.\n```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```\n\n**Creating a Tokenized ID Control (Next Generation NFT):**\nTo create a tokenized ID control, also known as a next-generation NFT, you need to define a currency with specific flags and properties. Here's an example:\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```\nThe key properties here are:\n\n* `options`: Set to 2080, which includes the flags `OPTION_NFT_TOKEN` and `OPTION_TOKEN`.\n* `preallocations`: Specifies the pre-allocation of the token to a specific address.\n* `maxpreconversion`: Set to 0, indicating that the maximum pre-conversion is 0.\n\n**Creating an Identity with a Fractional Currency as its Parent:**\nTo create an identity with a fractional currency as its parent, you need to use the `registernamecommitment` command with additional arguments. The format is:\n```\nverus registernamecommitment <username> <commitment> <parent_currency> <funding_address>\n```\nFor example:\n```\nverus registernamecommitment \"username\" \"commitment\" \"vrsc-btc\" \"funding_address\"\n```\nIn this example, `vrsc-btc` is the parent currency, and `funding_address` is the address used to fund the name commitment and identity registration. You can use quotes `\"\"` to leave fields blank, such as the referrer field.",
            "## Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]