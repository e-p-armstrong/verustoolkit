[
    "## Conversation that answers the provided questions:\n**User:**\nHey, I'm having some trouble with PBaaS chains and multi-signature IDs on the Verus network. Can you help me out? Specifically, how do I define a PBaaS chain and export an ID to it, and how do I sign transactions from multi-signature IDs?\n\n**AI Assistant:**\nI'd be happy to help you with that. To define a PBaaS chain and export an ID to it, and to sign transactions from multi-signature IDs on the Verus network, you need to use the Verus command line tool with specific inputs.\n\n**Defining a PBaaS Chain:**\nTo define a PBaaS chain, you need to pass two JSON objects to the `definecurrency` command. The first JSON object defines the properties of the PBaaS chain, such as its name, options, currencies, conversions, eras, notaries, and nodes. The second JSON object defines the overridable defaults of the bridge, such as the currencies it supports, initial contributions, and initial supply. Here's an example of how to define a PBaaS chain named \"PBaaSChain\":\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n\n**Exporting an ID to a PBaaS Chain:**\nTo export an ID to a PBaaS chain, you need to use the `sendcurrency` command with the `exportto` option. Here's an example of how to export an ID named \"IDNAME@\" to a PBaaS chain named \"PBaaSChainName\":\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```\n\n**Signing Transactions from Multi-Signature IDs:**\nTo sign transactions from multi-signature IDs on the Verus network, you need to follow these steps:\n\n1. Create a transaction using the `sendcurrency` command and get the raw transaction data.\n```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\n2. Take the raw hex transaction data provided by `z_getoperationstatus` to each additional wallet(s) containing the additional signing addresses/IDs.\n```\nverus signrawtransaction <raw_hex_transaction>\n```\n3. After the last necessary signature is applied, broadcast on the network using:\n```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```\nThis is how you define a PBaaS chain, export an ID to it, and sign transactions from multi-signature IDs on the Verus network. Do you have any further questions about this process?",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "How do I define a PBaaS chain and export an ID to it, and how do I sign transactions from multi-signature IDs on the Verus network?",
            "To define a PBaaS chain and export an ID to it, and to sign transactions from multi-signature IDs on the Verus network, you need to use the Verus command line tool with specific inputs.\n\n**Defining a PBaaS Chain:**\nTo define a PBaaS chain, you need to pass two JSON objects to the `definecurrency` command. The first JSON object defines the properties of the PBaaS chain, such as its name, options, currencies, conversions, eras, notaries, and nodes. The second JSON object defines the overridable defaults of the bridge, such as the currencies it supports, initial contributions, and initial supply. Here's an example of how to define a PBaaS chain named \"PBaaSChain\":\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n\n**Exporting an ID to a PBaaS Chain:**\nTo export an ID to a PBaaS chain, you need to use the `sendcurrency` command with the `exportto` option. Here's an example of how to export an ID named \"IDNAME@\" to a PBaaS chain named \"PBaaSChainName\":\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```\n\n**Signing Transactions from Multi-Signature IDs:**\nTo sign transactions from multi-signature IDs on the Verus network, you need to follow these steps:\n\n1. Create a transaction using the `sendcurrency` command and get the raw transaction data.\n```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\n2. Take the raw hex transaction data provided by `z_getoperationstatus` to each additional wallet(s) containing the additional signing addresses/IDs.\n```\nverus signrawtransaction <raw_hex_transaction>\n```\n3. After the last necessary signature is applied, broadcast on the network using:\n```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```\nThis is how you define a PBaaS chain, export an ID to it, and sign transactions from multi-signature IDs on the Verus network.",
            "Now pass those definitions to `definecurrency`\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n#### Exporting an ID to a PBaaS chain\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```### Signing transactions from multi-signature IDs (testnet and mainnet)\nCreate transaction, get raw transaction data:\n ```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\nTake the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:\n ```\nverus signrawtransaction <raw_hex_transaction>\n```\nAfter the last necessary signature is applied, broadcast on the network using:\n ```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ]
]