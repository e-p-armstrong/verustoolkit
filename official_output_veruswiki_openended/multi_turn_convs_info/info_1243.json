[
    [
        [
            "What are the different ways to encrypt and decrypt data using the Verus command line, and how can you retrieve the private key corresponding to a transparent address?",
            "Verus provides various ways to encrypt and decrypt data using the command line interface. Here's an overview of how to use these commands:\n\n**Encrypting Data:**\nTo encrypt data, you can use the `signdata` command. This command takes a JSON object as an argument, which must include the address, create MMR option, and the data to be encrypted, along with the address to encrypt to. Here's an example:\n```bash\n> verus signdata '{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'\n```\nThis command will encrypt the data \"hello world\" and create a MMR (Merkle Memory Random) commitment for it.\n\n**Decrypting Data:**\nTo decrypt data, you can use the `decryptdata` command. This command takes a JSON object as an argument, which is the encrypted data descriptor. Here's an example:\n```bash\n> verus decryptdata '{encrypteddatadescriptor}'\n```\nThis command will decrypt the data using the wallet keys included in the descriptor. If the extended viewing key or incoming viewing key is known, they can be provided as optional arguments to aid in the decryption process.\n\n**Retrieving Private Key:**\nTo retrieve the private key corresponding to a transparent address, you can use the `dumpprivkey` command. This command takes a single argument, which is the transparent address for the private key. Here's an example:\n```bash\n> verus dumpprivkey \"t-addr\"\n```\nThis command will reveal the private key corresponding to the transparent address `t-addr`. The output can then be used with the `importprivkey` command.\n\n**JSON RPC:**\nAll of these commands can also be accessed using JSON RPC. For example, to encrypt data using JSON RPC, you can use the following command:\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signdata\", \"params\": ['{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\nThis command sends a JSON RPC request to the Verus server to encrypt the data \"hello world\" and create a MMR commitment for it.",
            "#### Arguments:\n`json object`\n```json\n{\n \"datadescriptor\": {}                      (object, required) Encrypted data descriptor to decrypt, uses wallet keys included in descriptor\n \"evk\":\"Sapling extended full viewing key\"           (evk, optional) if known, an extended viewing key to use for decoding that may not be in the descriptor\n \"ivk\":\"Sapling incoming viewing key hex\"            (ivk, optional) if known, an incoming viewing key to use for decoding\n \"txid\":\"hex\",                         (txid, optional) if data is from a tx and retrieve is true, this may be needed when the data is on the same tx as the link\n \"retrieve\": bool                        (bool, optional) Defaults to false. If true and the data passed is an encrypted or unencrypted reference\n                                            on this chain, it retrieves the data from its reference and decrypts if it can\n}\n```\n#### Result:#### Examples:\nEncrypt data\n```bash\n> verus signdata '{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'```\nDecrypt data\n```bash\n> verus decryptdata '{encrypteddatadescriptor}'\n```\nAs json rpc\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signdata\", \"params\": ['{\"address\":\"Verus Coin Foundation.vrsc@\", \"createmmr\":true, \"data\":[{\"message\":\"hello world\", \"encrypttoaddress\":\"Sapling address\"}]}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `dumpprivkey \"t-addr\"`\nReveals the private key corresponding to 't-addr'.\nThen the importprivkey can be used with this output#### Arguments:\n1. \"t-addr\"  (string, required) The transparent address for the private key",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "77f8a379-0da8-49e5-b7cc-bf0cee3b691b"
]