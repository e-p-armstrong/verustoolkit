[
    [
        [
            "What are the steps to tokenize ID control using next-generation NFTs and create an identity with a fractional currency as its parent in Verus?",
            "To tokenize ID control using next-generation NFTs in Verus, you can follow these steps:\n\n**Tokenizing ID Control:**\nTo tokenize ID control, you need to define a currency with specific flags and properties. The flags required are OPTION_NFT_TOKEN and OPTION_TOKEN, and the max supply should be set to 1 satoshi. The token can be either pre-allocated or pre-converted to. If it's pre-allocated, the maximum pre-conversion must be 0. Here's an example of how to define such a currency using the `definecurrency` command:\n\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```\n\n**Creating an Identity with a Fractional Currency as its Parent:**\nTo create an identity with a fractional currency as its parent, you need to use the `registernamecommitment` and `registeridentity` commands.\n\nFirst, you need to register a name commitment using the `registernamecommitment` command. This command now takes two more positional arguments to specify a currency parent and a funding address. Here's an example of how to register a name commitment with a parent currency and a funding address:\n\n```\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\n\nNext, you need to specify the parent in the identity definition and register the identity using the `registeridentity` command. Here's an example of how to register the identity:\n\n```\nverus -chain=vrsctest registeridentity '{ID registration with name commitment}' false 0 zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n```\n\nIn this example, `false` is used for `returntx` to sign and submit the ID registration, `0` is used for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address is specified as the source of funds.",
            "## Tokenizing ID control (next generation NFT):\nThe currency definition have flags OPTION_NFT_TOKEN + OPTION_TOKEN, and a max supply of 1 satoshi that is either pre allocated or pre-converted to. If the token is pre-allocated, then the maximum pre-conversion must be 0.\n```\nverus -chain=vrsctest definecurrency '{\"name\":\"ID\",\"options\":2080,\"preallocations\":[{\"ControlTokenRecipient@\":0.00000001}],\"maxpreconversion\":[0]}'\n```## Creating an identity with a fractional currency as its parent\n`registernamecommitment` now takes two more positional arguments to specify a currency parent and a funding address. Use quotes `\"\"` to leave fields blank, the example below specifies a parent currency, vrsc-btc , but no referrer. We're now able to use z_addresses to fund the name commitment and identity registration```\n# verus -chain=vrsctest registernamecommitment name controladdress referral parent sourceoffunds\nverus -chain=vrsctest registernamecommitment subID RDnf7mH7RQki9b7PqdBD2Er6WXv3DTawGr \"\" vrsc-btc zs1s2mteau9tcalvk55cnepw3aq7dr6w7f447pqqkxczat3a02208d3ersx60wz9srw3nkd25ppfny\n````\nSpecify the parent in the identity definition. Enter `false` for `returntx` to sign and submit the id registration, `0` for the `feeoffer` to use the default fee, and the funding identity, transparent address, or z-address\n```\n# verus -chain=vrsctest registeridentity '{ID registration with name commitment}' returntx feeoffer sourceoffunds",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "ade1d7c6-3167-4f05-a074-21534a37d0c5"
]