[
    [
        [
            "What information is returned by the `getblock` command in Verus, and how can it be accessed?",
            "The `getblock` command in Verus returns information about a specific block in the blockchain. This command can be accessed through the Verus command-line interface or through JSON-RPC using a tool like curl.\n\nWhen you run `getblock` with a block hash or block height, it returns a JSON object with several properties that describe the block. These properties include:\n\n* `confirmations`: The number of confirmations the block has, or -1 if it's not on the main chain.\n* `size`: The size of the block in bytes.\n* `height`: The block height or index.\n* `version`: The block version.\n* `merkleroot`: The Merkle root of the block.\n* `finalsaplingroot`: The root of the Sapling commitment tree after applying this block.\n* `tx`: An array of transaction IDs or, if verbosity is set to 2, an array of transaction objects in the format of the `getrawtransaction` RPC.\n* `time`: The block time in seconds since the epoch (January 1, 1970, GMT).\n* `nonce`: The nonce.\n* `bits`: The bits.\n* `difficulty`: The difficulty of the block.\n* `previousblockhash`: The hash of the previous block.\n* `nextblockhash`: The hash of the next block.\n\nYou can access the `getblock` command by running `verus getblock <block_hash_or_height>` in the Verus command-line interface, or by using JSON-RPC with a tool like curl. For example, you can run `curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"<block_hash_or_height>\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/` to access the `getblock` command through JSON-RPC.\n\nBy default, the `getblock` command returns a limited set of information. However, you can increase the verbosity of the output by adding a verbosity parameter. For example, you can run `verus getblock <block_hash_or_height> 2` to return a more detailed set of information, including transaction objects instead of just transaction IDs.",
            "mations\" : n,  (numeric) The number of confirmations, or -1 if the block is not on the main chain\n \"size\" : n,      (numeric) The block size\n \"height\" : n,     (numeric) The block height or index (same as provided height)\n \"version\" : n,     (numeric) The block version\n \"merkleroot\" : \"xxxx\", (string) The merkle root\n \"finalsaplingroot\" : \"xxxx\", (string) The root of the Sapling commitment tree after applying this block\n \"tx\" : [        (array of string) The transaction ids\n   \"transactionid\"   (string) The transaction id\n   ,...\n ],\n \"time\" : ttt,     (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\n \"nonce\" : n,      (numeric) The nonce\n \"bits\" : \"1d00ffff\",  (string) The bits\n \"difficulty\" : x.xxx, (numeric) The difficulty\n \"previousblockhash\" : \"hash\", (string) The hash of the previous block\n \"nextblockhash\" : \"hash\"    (string) The hash of the next block\n}\n```\n#### Result (for verbosity = 2):\n```json\n{\n ...,           Same output as verbosity = 1.\n \"tx\" : [        (array of Objects) The transactions in the format of the getrawtransaction RPC. Different from verbosity = 1 \"tx\" result.\n     ,...\n ],\n ,...           Same output as verbosity = 1.\n}\n```\nExamples:\n```bash\n> verus getblock \"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [\"00000000febc373a1da2bd9f887b105ad79ddc26ac26c2b28652d64e5207c5b5\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n> verus getblock 12800\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getblock\", \"params\": [12800] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "95900ada-976e-49be-86aa-fa3ed171d038"
]