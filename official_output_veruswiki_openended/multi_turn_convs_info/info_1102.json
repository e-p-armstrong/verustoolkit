[
    [
        [
            "What is the purpose of the `getcurrencyconverters` command in Verus, and how can it be used to retrieve the current state of multiple currencies?",
            "The `getcurrencyconverters` command in Verus is used to retrieve the current state of one or more currencies. This command allows users to query the current state of multiple currencies at once, including their last known amounts and conversion rates.\n\nThe command takes two main arguments: `currencyname` and `paramobject`. The `currencyname` argument is a string or an array of strings, specifying the names of the currencies to query. The `paramobject` argument is an optional object that allows users to specify advanced query parameters, such as the target currency, target price, amount, and slippage.\n\nThe `paramobject` can include the following properties:\n\n* `convertto`: the target currency to convert to\n* `fromcurrency`: the source currency to convert from\n* `targetprice`: the target price within the allowed slippage\n* `amount`: the amount of the target currency needed\n* `slippage`: the maximum allowed slippage (default is 50%)\n\nThe command returns an array of objects, each containing the current state of a currency, including its last known amount and conversion rate.\n\nHere are some examples of how to use the `getcurrencyconverters` command:\n\n* `verus getcurrencyconverters '[\"currency1\",\"currency2\",...]`': retrieves the current state of multiple currencies\n* `curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrencyconverters\", \"params\": ['[\"currency1\",\"currency2\",...]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/`: retrieves the current state of multiple currencies using the Verus JSON-RPC API\n\nOverall, the `getcurrencyconverters` command provides a convenient way to query the current state of multiple currencies in Verus, making it easier to track and manage cryptocurrency conversions.",
            "#### Arguments:\n\"currencyname\"          : \"string\" ... (string(s), one or more) all selected currencies are returned with their current state\n\"paramobject\"           : \"object\" ... (one or more parameters) advanced query with slippage options\n```json\n    {\n      \"convertto\":\"destcurrency\"       \"string\"        target currency\n      \"fromcurrency\":\"sourcecurrency\" | [...] \"string\" | object array (string(s), one or more) currencies to convert from\n      \"targetprice\":n | [n,...]        \"number(s)\" ...     (number(s), one or more) target price within slippage required\n      \"amount\":n               \"number\"        (number) amount of tocurrency needed\n      \"slippage\":n              \"number\"        (number) max slippage with no other conversions max is 50000000 == 50%\n    }\n```\nResult:\n```json\n\"[{currency1}, {currency2}]\" : \"array of objects\" (string) All currencies, last currency state, and last amount to convert if amount specified\n```\nExamples:\n```bash\n> verus getcurrencyconverters '[\"currency1\",\"currency2\",...]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrencyconverters\", \"params\": ['[\"currency1\",\"currency2\",...]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `getcurrencystate \"currencynameorid\" (\"n | m,n | m,n,o\") (\"connectedsystemid\")`\nReturns the total amount of preconversions that have been confirmed on the blockchain for the specified chain.",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "541a7be0-1e2a-4215-81cf-d35285684947"
]