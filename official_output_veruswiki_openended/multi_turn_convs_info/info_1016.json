[
    [
        [
            "What is the `verifysignature` API in Verus, and how do I use it to verify a signature?",
            "The `verifysignature` API in Verus is a method that allows you to verify the signature of a message. This API takes in several parameters, including the identity of the signer, the message that was signed, and the signature itself.\n\nThe parameters that can be passed to the `verifysignature` API include:\n\n* `identity`: the friendly name ID or object for the `getvdxfid` API (no i-addresses)\n* `message`: the message that was signed\n* `boundhashes`: an optional array of bound hash values\n* `hashtype`: an optional string specifying the hash type (one of \"sha256\", \"sha256D\", \"blake2b\", or \"keccak256\", defaulting to \"sha256\")\n* `signature`: an optional string representing the current signature of the message encoded in base 64\n* `checklatest`: an optional boolean value indicating whether to check the signature validity based on the latest identity (defaults to false, which determines validity based on the signing height stored in the signature)\n\nWhen the `verifysignature` API is called, it returns a JSON object with two properties:\n\n* `hash`: the hash of the message (SHA256, not SHA256D)\n* `signature`: the aggregate signature of the message encoded in base 64, if the signing was successful (either fully or partially)\n\nYou can use the `verifysignature` API in Verus through the command line or using a JSON-RPC request. For example, you can use the following command in the terminal:\n```bash\nverus verifysignature '{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}'\n```\nAlternatively, you can use a JSON-RPC request, like this:\n```bash\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifysignature\", \"params\": [{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}]}' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\nNote that you need to replace `myusername` with your actual username, and `base64sig` with the actual base64-encoded signature.",
            "objects for getvdxfid API, or friendly name ID -- no i-addresses\n \"boundhashes\":[\"hexhash\", ...],               (array, optional) Array of bound hash values\n \"hashtype\"                          (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256\n \"signature\"                         (string, optional) The current signature of the message encoded in base 64\n \"checklatest\"                        (bool, optional)  If true, checks signature validity based on latest identity. defaults to false,\n                                which determines validity of signing height stored in signature.\n}\n```\n#### Results:\n```json\n{\n \"hash\":\"hexhash\"     (string) The hash of the message (SHA256, NOT SHA256D)\n \"signature\":\"base64sig\" (string) The aggregate signature of the message encoded in base 64 if all or partial signing successful\n}\n```\n#### Examples:\n```bash\n> verus verifysignature '{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifysignature\", \"params\": [{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}]}' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "179bfdc3-bc8f-4a51-9654-c2dd642190cd"
]