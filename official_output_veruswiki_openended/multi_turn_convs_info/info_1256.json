[
    [
        [
            "How do you define and launch a new currency on a Verus test chain, including preallocations and conversion rules, and what are the requirements for a successful launch?",
            "To define and launch a new currency on a Verus test chain, you need to follow a series of steps. Here's a step-by-step guide on how to do it.\n\n**Defining the Currency:**\nFirst, you need to define the currency using the `definecurrency` command. For example, let's say you want to define a new currency called \"gold\" on a Verus test chain called VRSCTEST. The command would look like this:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nThis command defines a new currency called \"gold\" with specific options, conversion rules, and preallocations.\n\n**Funding the Currency Identity:**\nBefore launching the currency, you need to fund the currency identity with at least 10 VRSCTEST. This is a requirement for a successful launch.\n\n**Launching the Currency:**\nTo launch the currency, you need to send a transaction to the network. The launch will start 50 blocks from when the transaction is made, and it requires 1000 VRSCTEST to be preconverted at a rate of 0.01 VRSCTEST per GOLD. The mining process will handle the launch, and miners will earn 0.025% conversion fees for participating in the launch.\n\n**Converting VRSCTEST to GOLD:**\nAfter the currency is launched, you can convert VRSCTEST to GOLD using the `sendcurrency` command. For example:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nThis command will park your conversion until the token launches. Once launched, you will either receive 0.975 GOLD in your wallet or have your VRSCTEST returned.\n\n**Creating a New Currency with Multiple Conversion Options:**\nIf you want to create a new currency that can be converted to with either GOLD or VRSCTEST, you can define it using the `definecurrency` command. For example:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nThis command defines a new currency called \"mycoin\" with multiple conversion options.",
            "./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the currency must be funded with at least 10 VRSCTEST before sending the transaction returned from this command to\ninitiate a currency launch that will start at 50 blocks from when it was made (default), and that must have 1000 VRSCTEST preconverted at 0.01 VRSCTEST per GOLD in order to launch.\nall of this happens as part of the mining process, since mining the blocks that launch a currency earn the 0.025% conversion fees of participation\nin the launch, converting VRSCTEST to GOLD. I could send the following command before the block where GOLD token launches.\nAfter it launches, the only way at present to create new tokens is with a centralized issuance option. To convert VRSCTEST to GOLD, you could issue the command:\n```\n./verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"mike@\",\"convertto\":\"gold\",\"preconvert\":1,\"amount\":100}]'\n```\nthat would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.\nAssuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "a8578c12-0f82-46d8-80ba-9d0dbdd129ae"
]