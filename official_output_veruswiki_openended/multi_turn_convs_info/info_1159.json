[
    [
        [
            "How do I use the `submitacceptednotarization` and `submitchallenges` commands in Verus, and what are their purposes in the notarization process?",
            "In Verus, notarization is an essential process that ensures the integrity and security of the blockchain. Two important commands in this process are `submitacceptednotarization` and `submitchallenges`.\n\n**`submitacceptednotarization` Command:**\nThe `submitacceptednotarization` command is used to submit a notarization that has been accepted by a notary node. This command takes two arguments: `earnednotarization` and `notaryevidence`. The `earnednotarization` argument is the notarization that has been accepted, and the `notaryevidence` argument is the evidence provided by the notary node to support the notarization.\n\nHere's an example of how to use the `submitacceptednotarization` command:\n```bash\nverus submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\"\n```\nAlternatively, you can use the JSON-RPC interface to submit the notarization using the `curl` command:\n```bash\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitacceptednotarization\", \"params\": [\"{earnednotarization}\" \"{notaryevidence}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n**`submitchallenges` Command:**\nThe `submitchallenges` command is used to submit one or more cryptographic challenges to existing, unconfirmed notarizations. This command requires a JSON array of challenges, each containing information about the notarization being challenged, the fork root, the challenger root, and the evidence supporting the challenge.\n\nHere's an example of how to use the `submitchallenges` command:\n```bash\nverus submitchallenges '[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]'\n```\nAlternatively, you can use the JSON-RPC interface to submit the challenges using the `curl` command:\n```bash\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitchallenges\", \"params\": [[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\nThe purpose of the `submitchallenges` command is to prove the existence of an alternate chain that has moved forward multiple blocks since the prior notarization. This command requires that the local wallet have funds for fees.\n\nIn summary, the `submitacceptednotarization` command is used to submit a notarization that has been accepted by a notary node, while the `submitchallenges` command is used to submit cryptographic challenges to existing, unconfirmed notarizations. Both commands play important roles in the notarization process in Verus.",
            "Examples:\n```bash\n> verus submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitacceptednotarization\", \"params\": [\"{earnednotarization}\" \"{notaryevidence}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```### `submitchallenges [json array]`\nSubmits one or more cryptographic challenges to existing, unconfirmed notarizations, proving the existence\nof an alternate chain. Whether the alternate chain has more power than the chain with a pending notarization\nis not required, only that it has moved forward multiple blocks since the prior notarization.Requires that the local wallet have funds for fees.#### Arguments:\n\"challenges\"         (array, required) one or more challenges to unconfirmed notarizations on this system\n```json\n[\n {\n  \"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\" ||\n            \"type\":\"vrsc::evidence.validitychallenge\" || \"iCPb8ywQna7jYV2SHrGZ6vQMj7kuyWFxvb\",\n  \"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\n  \"forkroot\":{},\n  \"challengeroot\":{},\n  \"evidence\":{}\n },\n {...},\n  ...\n]\n```#### Result:\n```json\n[{\"txid\":\"hex\"}, {\"error\":\"errorstring\"}, ...]  (array) results of submitted challenge transactions\n```#### Examples:\n```bash\n> verus submitchallenges '[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitchallenges\", \"params\": [[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "666468f3-2ea6-489d-b902-23889d16d287"
]