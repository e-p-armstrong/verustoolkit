[
    [
        [
            "What are the available parameters and formats for the `setidentitytimelock` command in Verus, and how does it work?",
            "The `setidentitytimelock` command in Verus is used to set a time lock on an identity. This command requires either the \"unlockatblock\" or \"setunlockdelay\" argument to be specified, but not both.\n\n**Arguments:**\n\n* `unlockatblock`: This is an optional number argument that specifies the absolute block height at which the identity should be unlocked. The countdown to unlock starts when the transaction is mined into a block.\n* `setunlockdelay`: This is an optional number argument that specifies the delay in blocks after the unlock request to unlock the identity. This delay can only be circumvented by revoking and recovering the identity.\n* `returntx`: This is an optional boolean argument that defaults to false. If set to true, the transaction is signed by the wallet and returned as a hexadecimal string, rather than being sent.\n* `feeoffer`: This is an optional boolean argument that allows for a non-standard fee amount to be paid for the transaction.\n* `sourceoffunds`: This is an optional string argument that specifies the transparent or private address to source all funds for fees, preserving the privacy of the identity.\n\n**Result:**\nThe command returns a hexadecimal string of either the transaction ID (if `returntx` is false) or the hex-serialized transaction (if `returntx` is true). If `returntx` is true, the transaction will not have been submitted and must be sent using the \"sendrawtransaction\" command after any necessary signatures are applied in the case of multisig.\n\n**Examples:**\nThe command can be used in the following ways:\n```bash\n> verus setidentitytimelock \"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx)\n```\nor using curl:\n```bash\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setidentitytimelock\", \"params\": [\"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx)] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "#### Arguments - either \"unlockatblock\" or \"setunlockdelay\" must be specified and not both\n```json\n{\n \"unlockatblock\"        (number, optional) unlock at an absolute block height, countdown starts when mined into a block\n \"setunlockdelay\"        (number, optional) delay this many blocks after unlock request to unlock, can only be\n                           circumvented by revoke/recover\n}\n\"returntx\"            (bool,  optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned\n\"feeoffer\"            (bool,  optional) non-standard fee amount to pay for the transaction\n\"sourceoffunds\"         (string,  optional) transparent or private address to source all funds for fees to preserve privacy of the identity\n```\n#### Result:\n  Hex string of either the txid if returnhex is false or the hex serialized transaction if returntx is true.\n  If returntx is true, the transaction will not have been submitted and must be sent with \"sendrawtransaction\"\n  after any necessary signatures are applied in the case of multisig.Examples:\n```bash\n> verus setidentitytimelock \"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx)\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setidentitytimelock\", \"params\": [\"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx)] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "2f8db4f2-0b4a-4eda-a388-7d07ff233358"
]