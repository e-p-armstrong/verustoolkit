[
    [
        [
            "How do I create a new currency, called `mycoin`, using Verus, and what are the implications of setting `proofprotocol` to 2?",
            "To create a new currency called `mycoin` using Verus, you can use the `definecurrency` command. The command to create `mycoin` would look like this:\n\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\n\nIn this command, we're defining a new currency called `mycoin` with the following properties:\n\n* `name`: The name of the currency, which is `mycoin`.\n* `options`: An integer that configures various properties of the currency, in this case set to 33.\n* `proofprotocol`: The proof protocol used by the currency, set to 2, which corresponds to PROOF_CHAINID.\n* `currencies`: A list of currencies that can be converted to `mycoin`, which are `vrsctest` and `gold`.\n* `minpreconversion`: The minimum amounts of `vrsctest` and `gold` required to convert to `mycoin`, which are 10,000 and 5.1298, respectively.\n* `initialsupply`: The initial supply of `mycoin`, which is 20,000 units.\n\nNow, let's talk about the implications of setting `proofprotocol` to 2. When `proofprotocol` is set to 2, it means that the controller of the chain ID can mint new coins. This allows the controller to create new `mycoin` units as needed. For example, to mint 10,000 new `mycoin` units, the controller would use the following command:\n\n```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\n\nThis command would mint 10,000 new `mycoin` units and send them to the address `mike@`.",
            "```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "8db909e0-f111-4249-af06-6f0895193426"
]