[
    [
        [
            "How do I create a currency with a specific name on the Verus platform, and what are some examples of creating different types of currencies, such as a gold-backed currency and a utility token?",
            "To create a currency with a specific name on the Verus platform, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once. This means that if you want to create a currency called \"gold\", you need an ID called \"gold@\".\n\nHere's an example of how to define a currency called \"gold\" using the `definecurrency` command:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nIn this example, the currency \"gold\" is defined with the following properties:\n\n* `name`: the name of the currency, which must match the ID of the controller.\n* `options`: a configurable integer that determines the behavior of the currency.\n* `currencies`: an array of currencies that can be converted to the new currency.\n* `conversions`: an array of conversion ratios between the new currency and the currencies in the `currencies` array.\n* `minpreconversion`: the minimum amount of the currency required to perform a conversion.\n* `preallocations`: an array of pre-allocations of the currency to specific IDs.\n\nNow, let's consider two examples of creating different types of currencies.\n\n**Example 1: Gold-Backed Currency**\nIn this example, we want to create a currency called \"gold\" that is backed by a specific, auditable store of gold. To do this, we would need to define the currency \"gold\" as above, and then establish a trusted relationship between the currency and the gold store. This could be done through a third-party audit or a smart contract that ensures the gold reserve is maintained.\n\n**Example 2: Utility Token**\nIn this example, we want to create a token called \"mycoin\" that offers utility or product value if the purchase exceeds a certain level. To do this, we would need to define the currency \"mycoin\" with similar properties to the \"gold\" currency, but with different conversion ratios and pre-allocations. For example:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":32,\"currencies\":[\"vrsctest\"],\"conversions\":[0.05],\"minpreconversion\":[500],\"preallocations\":[{\"mike@\":10000000.00000000}]}'\n```\nIn this example, the currency \"mycoin\" is defined with a different set of properties that reflect its utility token nature. The `conversions` array specifies a different conversion ratio, and the `preallocations` array allocates a different amount of the currency to the ID \"mike@\".\n\nThese examples demonstrate how the Verus platform can be used to create different types of currencies with unique properties and use cases.",
            "To create a currency of a specific name, you need an ID of the same name. The controller of this ID is the only one who can create a currency of that name, and they can only do so once.\nSo, let's hypothetically assume I have 3 IDs, one named gold@, one named mycoin@, and one named mike@. I would like to have one currency, gold@,\nthat I somehow launch in a way that maps it in a way that can be widely trusted to a specific, auditable store of gold.\nI also would like to launch a token called mycoin@, which is something like a Kickstarter, where a business, \"my\", offers to attribute the coins some utility or product value if the purchase exceeds a certain level.\nFirst, I could define the currency \"gold\" as follows:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"gold\",\"options\":96,\"currencies\":[\"vrsctest\"],\"conversions\":[0.01],\"minpreconversion\":[1000],\"preallocations\":[{\"mike@\":50000000.00000000}]}'\n```\nof course, since this is a test currency, I send myself some to start. The identity of the curre",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "f39cc964-3b48-4799-99ee-57f4197b8765"
]