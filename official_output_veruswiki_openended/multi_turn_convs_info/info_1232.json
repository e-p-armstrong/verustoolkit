[
    [
        [
            "What are the different Verus commands for validating a z-Address and retrieving a VDXF key, and how do they work?",
            "Verus provides two commands to validate a z-Address and retrieve a VDXF key. These commands are `z_validateaddress` and `getvdxfid`.\n\n**Validating a z-Address:**\nThe `z_validateaddress` command is used to validate a z-Address and retrieve information about it. The command takes a single argument, which is the z-Address to be validated. The command returns a JSON object with the following properties:\n\n* `isvalid`: A boolean indicating whether the address is valid or not.\n* `address`: The z-Address that was validated.\n* `type`: The type of the address, which can be either \"sprout\" or \"sapling\".\n* `ismine`: A boolean indicating whether the address belongs to the user or not.\n* `payingkey`, `transmissionkey`, `diversifier`, and `diversifiedtransmissionkey`: These properties are specific to the type of address and contain the corresponding keys or values.\n\n**Retrieving a VDXF key:**\nThe `getvdxfid` command is used to retrieve a VDXF key from a URI string. The command takes three arguments: `vdxfuri`, `vdxfkey`, and `uint256`. The `vdxfuri` argument is required and is the URI string from which to retrieve the VDXF key. The `vdxfkey` and `uint256` arguments are optional and can be used to combine with the hash of the `vdxfuri` string.\n\nThe command returns the VDXF key of the URI string. The `vdxfkey` argument can be either an i-address or a VDXF key, and the `uint256` argument is a 256-bit hash. The `indexnum` argument is an optional integer value that can be used to combine with the hash.\n\nBoth of these commands can be used to validate and retrieve information about z-Addresses and VDXF keys, respectively, and are useful for developers and users working with the Verus platform.",
            "#### Result:\n```\n{\n \"isvalid\" : true|false,   (boolean) If the address is valid or not. If not, this is the only property returned.\n \"address\" : \"zaddr\",     (string) The z address validated\n \"type\" : \"xxxx\",       (string) \"sprout\" or \"sapling\"\n \"ismine\" : true|false,    (boolean) If the address is yours or not\n \"payingkey\" : \"hex\",     (string) [sprout] The hex value of the paying key, a_pk\n \"transmissionkey\" : \"hex\",  (string) [sprout] The hex value of the transmission key, pk_enc\n \"diversifier\" : \"hex\",    (string) [sapling] The hex value of the diversifier, d\n \"diversifiedtransmissionkey\" : \"hex\", (string) [sapling] The hex value of pk_d\n}\n```\nExamples:\n```bash\n> verus z_validateaddress \"zcWsmqT4X2V4jgxbgiCzyrAfRT1vi1F4sn7M5Pkh66izzw8Uk7LBGAH3DtcSMJeUb2pi3W4SQF8LMKkU2cUuVP68yAGcomL\"\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_validateaddress\", \"params\": [\"zcWsmqT4X2V4jgxbgiCzyrAfRT1vi1F4sn7M5Pkh66izzw8Uk7LBGAH3DtcSMJeUb2pi3W4SQF8LMKkU2cUuVP68yAGcomL\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n## VDXF\n### `getvdxfid \"vdxfuri\" '{\"vdxfkey\":\"i-address or vdxfkey\", \"uint256\":\"hexstr\", \"indexnum\":0}'`\nReturns the VDXF key of the URI string. For example \"vrsc::system.currency.export\"#### Arguments:\n \"vdxfuri\"      (string, required) This message is converted from hex, the data is hashed, then returned\n```json\n{\n \"vdxfkey\":\"i-address or vdxfkey\"   (string, optional) VDXF key or i-address to combine via hash\n \"uint256\":\"32bytehex\"        (hexstr, optional) 256 bit hash to combine with hash\n \"indexnum\":int            (integer, optional) int32_t number to combine with hash\n}\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "ecebd977-846e-4b67-a0b5-10943bd09136"
]