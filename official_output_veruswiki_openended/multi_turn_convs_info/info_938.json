[
    [
        [
            "How do I define a new currency on the Verus network, and what are the key components of defining a PBaaS blockchain on Verus?",
            "Defining a new currency on the Verus network can be done using the `definecurrency` command. For example, let's say you want to create a new currency called `mycoin`. You can use the following command:\n```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nThis command defines a new currency named `mycoin` with the following properties:\n\n* `name`: The name of the currency.\n* `options`: An integer that specifies the options for the currency.\n* `proofprotocol`: The proof protocol used by the currency. In this case, it is set to 2, which means that the controller of the chain ID can mint new coins.\n* `currencies`: An array of currencies that can be converted to `mycoin`.\n* `minpreconversion`: An array that specifies the minimum amounts of each currency required to convert to `mycoin`.\n* `initialsupply`: The initial supply of `mycoin`.\n\nWith `proofprotocol` set to 2, the controller of the chain ID can mint new coins using the following command:\n```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\nNow, let's move on to defining a PBaaS blockchain on Verus. A PBaaS blockchain is defined using a JSON object that specifies the properties of the chain. The key components of defining a PBaaS blockchain include:\n\n* `name`: The name of the chain.\n* `options`: An integer that specifies the options for the chain.\n* `currencies`: An array of currencies that the chain's native currency can be converted into.\n* `conversions`: An array that specifies the conversion ratios between the chain's native currency and each currency on the chain.\n* `eras`: An array that specifies the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle.\n* `notaries`: An array of VerusIDs that will serve as notaries on the chain.\n* `minnotariesconfirm`: An integer that specifies the minimum number of notaries needed to confirm a block.\n* `nodes`: An array that specifies the network addresses of the nodes on the chain, as well as their IDs.\n* `gatewayconvertername`: The name of the bridge that will be used to move funds on and off the chain.\n* `gatewayconverterissuance`: The initial supply of the bridge's native token.\n\nThe bridge definition has overridable defaults, which include:\n\n* `currencies`: An array of currencies that the bridge supports.\n* `initialcontributions`: An array that specifies the initial liquidity for each currency in the bridge.\n* `initialsupply`: The initial supply of the bridge's native token.\n\nHere is an example of a PBaaS blockchain definition:\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n\"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nAnd here is an example of the bridge definition with overridable defaults:\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```\nThese definitions can be used to create a new PBaaS blockchain on the Verus network.",
            "```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":97, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":[20000]'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```## Defining a PBaaS blockchain\n```json\n{\n\"name\": \"PBaaSChain\",\n\"options\": 330,\n\"currencies\": [\n\"VRSCTEST\"\n],\n\"conversions\": [\n1\n],\n\"eras\": [\n{\n\"reward\": 1200000000,\n\"decay\": 0,\n\"halving\": 0,\n\"eraend\": 0\n}\n],\n\"notaries\": [\n\"Notary1@\",\n\"Notary2@\",\n\"Notary3@\",\n],\n\"minnotariesconfirm\": 2,\n\"nodes\": [\n{\n\"networkaddress\": \"111.111.111.111:10000\",\n\"nodeidentity\": \"Node1@\"\n},\n{\n \"networkaddress\": \"111.111.111.112:10000\",\n\"nodeidentity\": \"Node2@\"\n}\n],\n\"gatewayconvertername\": \"Bridge\",\n\"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n{\n\"currencies\": [\n\"VRSCTEST\",\n\"PBaaSChain\",\n\"USD\"\n],\n\"initialcontributions\": [\n380228.12033701,\n0,\n1000000\n],\n\"initialsupply\": 3000000\n}\n```",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "a8203939-e496-45f4-812b-3bdacc4294e0"
]