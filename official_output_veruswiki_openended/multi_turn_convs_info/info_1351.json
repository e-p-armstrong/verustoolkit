[
    [
        [
            "What are the arguments and results of a filtering operation in Verus, specifically when working with shielded transactions and addresses?",
            "In Verus, when working with shielded transactions and addresses, you can perform a filtering operation that returns a list of transactions that match certain criteria. This operation takes several arguments and returns a JSON array of objects with specific properties.\n\n**Arguments:**\nThe filtering operation accepts the following arguments:\n\n1. `minconf`: This is an optional numeric argument that specifies the minimum number of confirmations required for a transaction to be included in the result. The default value is 1.\n2. `maxconf`: This is an optional numeric argument that specifies the maximum number of confirmations required for a transaction to be included in the result. The default value is 9999999.\n3. `includeWatchonly`: This is an optional boolean argument that specifies whether to include watchonly addresses in the result. The default value is false.\n4. `addresses`: This is a required JSON array of zaddrs (both Sprout and Sapling) to filter on. Duplicate addresses are not allowed.\n\n**Result:**\nThe filtering operation returns a JSON array of objects, each representing a transaction that matches the specified criteria. Each object in the array has the following properties:\n\n1. `txid`: This is a string representing the transaction ID.\n2. `jsindex` (Sprout) or `outindex` (Sapling): This is a numeric value representing the joinsplit index or output index of the transaction, depending on the address type.\n3. `confirmations`: This is a numeric value representing the number of confirmations for the transaction.\n4. `spendable`: This is a boolean value indicating whether the note can be spent by the wallet (true) or if the address is watchonly (false).\n5. `address`: This is a string representing the shielded address.\n6. `amount`: This is a numeric value representing the amount of value in the note.\n7. `memo`: This is a hexadecimal string representation of the memo field.\n8. `change`: This is a boolean value indicating whether the address that received the note is also one of the sending addresses (true) or not (false).\n\nBy using this filtering operation, you can retrieve specific transactions and their details based on the specified criteria, which can be useful for various applications and use cases in Verus.",
            "#### Arguments:\n1. minconf     (numeric, optional, default=1) The minimum confirmations to filter\n2. maxconf     (numeric, optional, default=9999999) The maximum confirmations to filter\n3. includeWatchonly (bool, optional, default=false) Also include watchonly addresses (see 'z_importviewingkey')\n4. \"addresses\"   (string) A json array of zaddrs (both Sprout and Sapling) to filter on. Duplicate addresses not allowed.\n```json\n  [\n   \"address\"   (string) zaddr\n   ,...\n  ]\n```\nResult\n```json\n[               (array of json object)\n {\n  \"txid\" : \"txid\",     (string) the transaction id\n  \"jsindex\" (sprout) : n,    (numeric) the joinsplit index\n  \"jsoutindex\" (sprout) : n,    (numeric) the output index of the joinsplit\n  \"outindex\" (sapling) : n,    (numeric) the output index\n  \"confirmations\" : n,    (numeric) the number of confirmations\n  \"spendable\" : true|false, (boolean) true if note can be spent by wallet, false if address is watchonly\n  \"address\" : \"address\",  (string) the shielded address\n  \"amount\": xxxxx,     (numeric) the amount of value in the note\n  \"memo\": xxxxx,      (string) hexademical string representation of memo field\n  \"change\": true|false,   (boolean) true if the address that received the note is also one of the sending addresses\n }\n ,...\n]\n```",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "975bba8a-3ef7-4a15-a0cc-1f8fdf1be0be"
]