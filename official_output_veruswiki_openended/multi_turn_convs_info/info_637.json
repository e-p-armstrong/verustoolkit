[
    [
        [
            "What are the key elements of a currency definition, and how do you define a new currency on the Verus platform? Additionally, how do you define a PBaaS blockchain and its bridge configuration?",
            "Defining a new currency on the Verus platform involves specifying several key elements, including the currency's name, options, proof protocol, convertible currencies, minimum pre-conversion amounts, and initial supply.\n\nIn the example provided, a new currency called \"mycoin\" is defined with the following properties:\n* `name`: \"mycoin\"\n* `options`: 33\n* `proofprotocol`: 2 (PROOF_CHAINID), which allows the controller of the chain ID to mint new coins\n* `currencies`: [\"vrsctest\", \"gold\"], which specifies the currencies that can be converted to \"mycoin\"\n* `minpreconversion`: [10000, 5.1298], which defines the minimum amounts of VRSCTEST and GOLD required for conversion to \"mycoin\"\n* `initialsupply`: 20000, which sets the initial supply of \"mycoin\"\n\nTo mint new coins, the controller of the chain ID can use the `sendcurrency` command, specifying the `mintnew` option and the amount to be minted.\n\nDefining a PBaaS blockchain involves specifying its properties, including its name, options, currencies, conversions, eras, notaries, nodes, and bridge configuration. The bridge configuration has overridable defaults for currencies, initial contributions, and initial supply.\n\nIn the example provided, the PBaaS blockchain is defined with the following properties:\n* `name`: \"PBaaSChain\"\n* `options`: 264\n* `currencies`: [\"VRSCTEST\"]\n* `conversions`: [1]\n* `eras`: [{\"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0}]\n* `notaries`: [\"Notary1@\", \"Notary2@\", \"Notary3@\"]\n* `minnotariesconfirm`: 2\n* `nodes`: [{\"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\"}, {\"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\"}]\n* `gatewayconvertername`: \"Bridge\"\n* `gatewayconverterissuance`: 1000000\n\nThe bridge configuration has the following overridable defaults:\n* `currencies`: [\"VRSCTEST\", \"PBaaSChain\", \"USD\"]\n* `initialcontributions`: [380228.12033701, 0, 1000000]\n* `initialsupply`: 3000000\n\nThese configurations define the properties and behavior of the PBaaS blockchain and its bridge.",
            "```\n./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000'\n```\nIn \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```#### Defining a PBaaS blockchain\n```json\n {\n \"name\": \"PBaaSChain\",\n \"options\": 264,\n \"currencies\": [\n  \"VRSCTEST\"\n ],\n \"conversions\": [\n  1\n ],\n \"eras\": [\n  {\n   \"reward\": 1200000000,\n   \"decay\": 0,\n   \"halving\": 0,\n   \"eraend\": 0\n  }\n ],\n \"notaries\": [\n  \"Notary1@\",\n  \"Notary2@\",\n  \"Notary3@\",\n ],\n \"minnotariesconfirm\": 2,\n \"nodes\": [\n  {\n   \"networkaddress\": \"111.111.111.111:10000\",\n   \"nodeidentity\": \"Node1@\"\n  },\n  {\n   \"networkaddress\": \"111.111.111.112:10000\",\n   \"nodeidentity\": \"Node2@\"\n  }\n ],\n \"gatewayconvertername\": \"Bridge\",\n \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults\n```json\n {\n \"currencies\": [\n  \"VRSCTEST\",\n  \"PBaaSChain\",\n  \"USD\"\n ],\n \"initialcontributions\": [\n  380228.12033701,\n  0,\n  1000000\n ],\n \"initialsupply\": 3000000\n}\n```",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "ed2c4b2a-512c-4c41-a528-702724296cdf"
]