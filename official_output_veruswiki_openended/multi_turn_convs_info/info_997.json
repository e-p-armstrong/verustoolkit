[
    [
        [
            "What are the parameters and results of the Verus signing function, and how do they relate to message hashing, encryption, and signature generation?",
            "The Verus signing function is a versatile tool that allows users to sign messages, encrypt data, and generate signatures. The function takes several parameters, including:\n\n* `hashtype`: a string that specifies the hashing algorithm to use, which can be one of \"sha256\", \"sha256D\", \"blake2b\", or \"keccak256\". The default is \"sha256\".\n* `signature`: a base64-encoded string that represents the current signature of the message, if the ID is multisig.\n* `encrypttoaddress`: a string that specifies the Sapling address to encrypt the data to, if present.\n* `createmmr`: a boolean that indicates whether to create a Merkle Mountain Range (MMR) and return processed data, MMRs, and root signature.\n\nThe function returns a JSON object with several properties, including:\n\n* `hash`: a string that represents the hash of the message, or null if an MMR is created.\n* `hashes`: an array of hashes for an MMR, returned as an alternate to `hash`.\n* `mmrroot`: a string that represents the root hash of the MMR, returned only when an array is passed for signing.\n* `vdxfkeys` and `vdxfkeynames`: arrays of strings that represent the viewing decryption keys and their corresponding names.\n* `boundhashes`: an array of hashes that are bound to the signature.\n* `hashtype`: a string that indicates the hashing algorithm used.\n* `signature`: a base64-encoded string that represents the aggregate signature of the message or MMR root.\n\nThe signing function can be used for various purposes, such as message signing, encryption, and signature generation. It provides a flexible and secure way to process and verify data, and is an essential component of the Verus ecosystem.",
            "        (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256\n \"signature\":\"base64str\",                   (string, optional) The current signature of the message encoded in base 64 if multisig ID\n \"encrypttoaddress\":\"saplingaddress\",             (string, optional) If present, encrypts and optionally returns encrypted data.\n                                         All data can be decrypted with the incoming viewing key, and a unique decryption key can\n                                         be generated for each sub-object.\n \"createmmr\":\"bool\"                      (bool, optional)  If this is true, OR there is more than one item to sign, returns processed data, MMRs, and root signature\n}\n```\n#### Results:\n```json\n{\n \"hash\":\"hexhash\"                       (string) The hash of the message or null and returns \"hashes\", an array of hashes for an MMR\n \"hashes\":[\"hexhash\"]                     (array) Array of hashes for an MMR, alternate to \"hash\"\n \"mmrroot\":\"hexstr\"                      (string) Only returned when passed an array for signing root hash of the merkle mountain range of the objects signed\n \"vdxfkeys\":[\"vdxfkey i-address\", ...],\n \"vdxfkeynames\":[\"vdxfkeyname, object for getvdxfid API, or friendly name ID -- no i-addresses\", ...],\n \"boundhashes\":[\"hexhash\", ...],\n \"hashtype\": \"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\"\n \"signature\":\"base64sig\"                   (string) The aggregate signature of the message or mmrroot encoded in base 64 if all or partial signing successful for MMR, it is of root\n \"\"}",
            "./raw_text_input_wiki/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "585b225c-d44e-4462-8eee-170be410007f"
]