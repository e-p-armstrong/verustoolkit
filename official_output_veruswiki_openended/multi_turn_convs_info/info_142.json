[
    [
        [
            "What are some key features of VerusIDs, and how does VerusHash algorithm work to equalize the performance of FPGAs and CPUs?",
            "VerusIDs are designed to provide users with a high degree of control and flexibility over their digital identities. Two important features of VerusIDs are their recoverability and privacy.\n\n**Recoverability:** Each VerusID includes a recovery authority, which defaults to the ID itself. This recovery authority can recover the ID by redefining its primary state and recovery state, but it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.\n\n**Privacy:** VerusIDs contain a set of zero-knowledge private addresses, which can be used for various purposes such as messaging, financial transactions, or voting. Each ID also contains a content map of key-value hashes, designed to work with applications and identity policies to provide private yet selectively provable claims and attestations. This means that users can choose to prove certain aspects of their identity without revealing the underlying information.\n\nNow, let's talk about VerusHash, the algorithm used by the Verus network. VerusHash 2.0 was a major milestone in the development of the algorithm, as it was the first to significantly equalize the performance of FPGAs (Field-Programmable Gate Arrays) and CPUs. This was achieved by intentionally not blocking FPGAs completely, but rather developing an algorithm that would allow them to operate at a performance level close to that of modern CPUs. VerusHash 2.1 builds upon this foundation by introducing an adjustment to the equalization technology, which is expected to tilt the balance slightly more in favor of CPUs while still enabling FPGAs to operate on the hash algorithm with minor modifications.\n\nThe Verus development team has taken a proactive approach by sharing the new algorithm with FPGA manufacturers, ensuring that everyone will have an opportunity to mine and stake when the Verus economy is fully operational.",
            "- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available.\n# VerusHash 2.1\nVerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network.\n# Disclaimer",
            "./raw_text_input_wiki/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "48bca787-eb8e-437a-9d12-9741b9ecb962"
]