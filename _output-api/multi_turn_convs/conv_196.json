[
    "## Conversation that answers the provided questions:\n**AI Assistant:**\nHey there! I'm here to help with any Verus-related questions you might have. What's on your mind today?\n\n**User:**\nI'm trying to understand the purpose of the `lockunspent` command in Verus. Can you explain it to me?\n\n**AI Assistant:**\nThe `lockunspent` command is used to temporarily lock or unlock specific transaction outputs, making them unavailable or available for automatic coin selection when spending VRSC. This can be useful for managing your transactions and outputs.\n\n**User:**\nThat makes sense. How do I use the `lockunspent` command to lock a transaction output?\n\n**AI Assistant:**\nTo lock a transaction output, you can use the `lockunspent` command with the following format:\n\n```\nverus lockunspent false \"[{\"txid\":\"txid\",\"vout\":n}]\"\n```\n\nReplace `txid` with the transaction ID and `n` with the output number you want to lock.\n\n**User:**\nAnd how do I use the `lockunspent` command to unlock a transaction output?\n\n**AI Assistant:**\nTo unlock a transaction output, you can use the `lockunspent` command with the following format:\n\n```\nverus lockunspent true \"[{\"txid\":\"txid\",\"vout\":n}]\"\n```\n\nReplace `txid` with the transaction ID and `n` with the output number you want to unlock.\n\n**User:**\nWhat happens to locked transaction outputs when a node stops or fails?\n\n**AI Assistant:**\nWhen a node stops or fails, the locked output list is always cleared, and all locked transaction outputs are unlocked.\n\n**User:**\nHow can I list the unspent transactions using Verus?\n\n**AI Assistant:**\nYou can list the unspent transactions using the `listunspent` command:\n\n```\nverus listunspent\n```\n\n**User:**\nHow can I list the locked transactions using Verus?\n\n**AI Assistant:**\nYou can list the locked transactions using the `listlockunspent` command:\n\n```\nverus listlockunspent\n```\n\n**User:**\nCan I use the `lockunspent` command as a JSON RPC call?\n\n**AI Assistant:**\nYes, you can use the `lockunspent` command as a JSON RPC call. Here is an example:\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n\nLet me know if you have any more questions!",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What is the purpose of the `lockunspent` command in Verus?",
            "The `lockunspent` command is used to temporarily lock or unlock specific transaction outputs, making them unavailable or available for automatic coin selection when spending VRSC.",
            "lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...] Updates list of temporarily unspendable outputs. Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs. A locked transaction output will not be chosen by automatic coin selection, when spending VRSC. Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list is always cleared (by virtue of process exit) when a node stops or fails. Also see the listunspent call Arguments: 1. unlock      (boolean, required) Whether to unlock (true) or lock (false) the specified transactions 2. \"transactions\" (string, required) A json array of objects. Each object the txid (string) vout (numeric)   [      (json array of json objects)    {     \"txid\":\"id\",  (string) The transaction id     \"vout\": n     (numeric) The output number    }    ,...   ] Result: true|false  (boolean) Whether the command was successful or not Examples: List the unspent transactions > verus listunspent Lock an unspent transaction > verus lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\" List the locked transactions > verus listlockunspent Unlock the transaction again > verus lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\" As a json rpc call > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/lockunspent"
        ],
        [
            "How do I use the `lockunspent` command to lock a transaction output?",
            "To lock a transaction output, you can use the `lockunspent` command with the following format:\n\n```\nverus lockunspent false \"[{\"txid\":\"txid\",\"vout\":n}]\"\n```\n\nReplace `txid` with the transaction ID and `n` with the output number you want to lock.",
            "lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...] Updates list of temporarily unspendable outputs. Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs. A locked transaction output will not be chosen by automatic coin selection, when spending VRSC. Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list is always cleared (by virtue of process exit) when a node stops or fails. Also see the listunspent call Arguments: 1. unlock      (boolean, required) Whether to unlock (true) or lock (false) the specified transactions 2. \"transactions\" (string, required) A json array of objects. Each object the txid (string) vout (numeric)   [      (json array of json objects)    {     \"txid\":\"id\",  (string) The transaction id     \"vout\": n     (numeric) The output number    }    ,...   ] Result: true|false  (boolean) Whether the command was successful or not Examples: List the unspent transactions > verus listunspent Lock an unspent transaction > verus lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\" List the locked transactions > verus listlockunspent Unlock the transaction again > verus lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\" As a json rpc call > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/lockunspent"
        ],
        [
            "How do I use the `lockunspent` command to unlock a transaction output?",
            "To unlock a transaction output, you can use the `lockunspent` command with the following format:\n\n```\nverus lockunspent true \"[{\"txid\":\"txid\",\"vout\":n}]\"\n```\n\nReplace `txid` with the transaction ID and `n` with the output number you want to unlock.",
            "lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...] Updates list of temporarily unspendable outputs. Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs. A locked transaction output will not be chosen by automatic coin selection, when spending VRSC. Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list is always cleared (by virtue of process exit) when a node stops or fails. Also see the listunspent call Arguments: 1. unlock      (boolean, required) Whether to unlock (true) or lock (false) the specified transactions 2. \"transactions\" (string, required) A json array of objects. Each object the txid (string) vout (numeric)   [      (json array of json objects)    {     \"txid\":\"id\",  (string) The transaction id     \"vout\": n     (numeric) The output number    }    ,...   ] Result: true|false  (boolean) Whether the command was successful or not Examples: List the unspent transactions > verus listunspent Lock an unspent transaction > verus lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\" List the locked transactions > verus listlockunspent Unlock the transaction again > verus lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\" As a json rpc call > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/lockunspent"
        ],
        [
            "What happens to locked transaction outputs when a node stops or fails?",
            "When a node stops or fails, the locked output list is always cleared, and all locked transaction outputs are unlocked.",
            "lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...] Updates list of temporarily unspendable outputs. Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs. A locked transaction output will not be chosen by automatic coin selection, when spending VRSC. Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list is always cleared (by virtue of process exit) when a node stops or fails. Also see the listunspent call Arguments: 1. unlock      (boolean, required) Whether to unlock (true) or lock (false) the specified transactions 2. \"transactions\" (string, required) A json array of objects. Each object the txid (string) vout (numeric)   [      (json array of json objects)    {     \"txid\":\"id\",  (string) The transaction id     \"vout\": n     (numeric) The output number    }    ,...   ] Result: true|false  (boolean) Whether the command was successful or not Examples: List the unspent transactions > verus listunspent Lock an unspent transaction > verus lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\" List the locked transactions > verus listlockunspent Unlock the transaction again > verus lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\" As a json rpc call > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/lockunspent"
        ],
        [
            "How can I list the unspent transactions using Verus?",
            "You can list the unspent transactions using the `listunspent` command:\n\n```\nverus listunspent\n```",
            "lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...] Updates list of temporarily unspendable outputs. Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs. A locked transaction output will not be chosen by automatic coin selection, when spending VRSC. Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list is always cleared (by virtue of process exit) when a node stops or fails. Also see the listunspent call Arguments: 1. unlock      (boolean, required) Whether to unlock (true) or lock (false) the specified transactions 2. \"transactions\" (string, required) A json array of objects. Each object the txid (string) vout (numeric)   [      (json array of json objects)    {     \"txid\":\"id\",  (string) The transaction id     \"vout\": n     (numeric) The output number    }    ,...   ] Result: true|false  (boolean) Whether the command was successful or not Examples: List the unspent transactions > verus listunspent Lock an unspent transaction > verus lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\" List the locked transactions > verus listlockunspent Unlock the transaction again > verus lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\" As a json rpc call > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/lockunspent"
        ],
        [
            "How can I list the locked transactions using Verus?",
            "You can list the locked transactions using the `listlockunspent` command:\n\n```\nverus listlockunspent\n```",
            "lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...] Updates list of temporarily unspendable outputs. Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs. A locked transaction output will not be chosen by automatic coin selection, when spending VRSC. Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list is always cleared (by virtue of process exit) when a node stops or fails. Also see the listunspent call Arguments: 1. unlock      (boolean, required) Whether to unlock (true) or lock (false) the specified transactions 2. \"transactions\" (string, required) A json array of objects. Each object the txid (string) vout (numeric)   [      (json array of json objects)    {     \"txid\":\"id\",  (string) The transaction id     \"vout\": n     (numeric) The output number    }    ,...   ] Result: true|false  (boolean) Whether the command was successful or not Examples: List the unspent transactions > verus listunspent Lock an unspent transaction > verus lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\" List the locked transactions > verus listlockunspent Unlock the transaction again > verus lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\" As a json rpc call > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/lockunspent"
        ],
        [
            "Can I use the `lockunspent` command as a JSON RPC call?",
            "Yes, you can use the `lockunspent` command as a JSON RPC call. Here is an example:\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...] Updates list of temporarily unspendable outputs. Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs. A locked transaction output will not be chosen by automatic coin selection, when spending VRSC. Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list is always cleared (by virtue of process exit) when a node stops or fails. Also see the listunspent call Arguments: 1. unlock      (boolean, required) Whether to unlock (true) or lock (false) the specified transactions 2. \"transactions\" (string, required) A json array of objects. Each object the txid (string) vout (numeric)   [      (json array of json objects)    {     \"txid\":\"id\",  (string) The transaction id     \"vout\": n     (numeric) The output number    }    ,...   ] Result: true|false  (boolean) Whether the command was successful or not Examples: List the unspent transactions > verus listunspent Lock an unspent transaction > verus lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\" List the locked transactions > verus listlockunspent Unlock the transaction again > verus lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\" As a json rpc call > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/lockunspent"
        ]
    ]
]