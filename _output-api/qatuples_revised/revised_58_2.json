[
    "What is the format of the `submitchallenges` command?",
    "The `submitchallenges` command takes an array of challenges as an argument, where each challenge is an object with the following properties:\n\n* `type`: either \"vrsc::evidence.skipchallenge\" or \"vrsc::evidence.validitychallenge\"\n* `notarizationref`: an object with `txid` and `voutnum` properties, referencing the notarization being challenged\n* `forkroot`: an object (not specified in detail)\n* `challengeroot`: an object (not specified in detail)\n* `evidence`: an object (not specified in detail)",
    "submitchallenges '[{\"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\" ||            \"type\":\"vrsc::evidence.validitychallenge\" || \"iCPb8ywQna7jYV2SHrGZ6vQMj7kuyWFxvb\",           \"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},           \"forkroot\":{},           \"challengeroot\":{},           \"evidence\":{}},          {...}, ...]' Submits one or more cryptographic challenges to existing, unconfirmed notarizations, proving the existence of an alternate chain. Whether the alternate chain has more power than the chain with a pending notarization is not required, only that it has moved forward multiple blocks since the prior notarization. Requires that the local wallet have funds for fees. Arguments \"challenges\"         (array, required) one or more challenges to unconfirmed notarizations on this system Result: [{\"txid\":\"hex\"}, {\"error\":\"errorstring\"}, ...]  (array) results of submitted challenge transactions Examples: > verus submitchallenges '[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitchallenges\", \"params\": [[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
    "./raw_text_input_api_text/submitchallenges"
]