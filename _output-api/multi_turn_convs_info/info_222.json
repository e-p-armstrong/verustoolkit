[
    [
        [
            "What is the required argument when using the Verus signing command?",
            "The required argument is \"address\", which should be a transparent address or identity to use for signing.",
            "Arguments: {  \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to use for signing.  \"filename\" | \"message\" | \"messagehex\" | \"messagebase64\" | \"datahash\" (string, optional) Data to sign  \"mmrdata\":[{\"filename | vdxfdata | message | serializedhex | serializedbase64 | datahash\":\"str\"}], (array, optional) Alternate to single data parameters, this enables an MMR signing       \"mmrsalt\":[\"salt\":\"str\"],            (string, optional) Protects privacy of leaf nodes of the MMR       \"mmrhashtype\":\"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\", (string, optional) Default is blake2b       \"priormmr\":\"[{\"idxhash\":,\"utxoref\":{}}]\",  (array, optional) When growing an MMR, the prior hashes can be used to construct the MMR and root w/o data  \"vdxfkeys\":[\"vdxfkey\", ...],                 (array, optional) Array of vdxfkeys or ID i-addresses  \"vdxfkeynames\":[\"vdxfkeyname\", ...],             (array, optional) Array of vdxfkey names or fully qualified friendly IDs  \"boundhashes\":[\"hexhash\", ...],               (array, optional) Array of bound hash values  \"hashtype\":\"str\",                      (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256  \"signature\":\"base64str\",                   (string, optional) The current signature of the message encoded in base 64 if multisig ID  \"encrypttoaddress\":\"saplingaddress\",             (string, optional) If present, encrypts and optionally returns encrypted data.                                          All data can be decrypted with the incoming viewing key, and a unique decryption key can                                          be generated for each sub-object.  \"createmmr\":\"bool\",                     (bool, optional)  If this is true, OR there is more than one item to sign, returns processed data, MMRs, and root signature }",
            "./raw_text_input_api_text/signdata"
        ],
        [
            "What are the different options for providing data to sign when using the Verus signing command?",
            "There are several options for providing data to sign:\n\n1. \"filename\" - a file to sign\n2. \"message\" - a message to sign\n3. \"messagehex\" - a hexadecimal message to sign\n4. \"messagebase64\" - a base64-encoded message to sign\n5. \"datahash\" - a data hash to sign\n6. \"mmrdata\" - an array of data to sign using an MMR (Merkle Mountain Range)",
            "Arguments: {  \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to use for signing.  \"filename\" | \"message\" | \"messagehex\" | \"messagebase64\" | \"datahash\" (string, optional) Data to sign  \"mmrdata\":[{\"filename | vdxfdata | message | serializedhex | serializedbase64 | datahash\":\"str\"}], (array, optional) Alternate to single data parameters, this enables an MMR signing       \"mmrsalt\":[\"salt\":\"str\"],            (string, optional) Protects privacy of leaf nodes of the MMR       \"mmrhashtype\":\"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\", (string, optional) Default is blake2b       \"priormmr\":\"[{\"idxhash\":,\"utxoref\":{}}]\",  (array, optional) When growing an MMR, the prior hashes can be used to construct the MMR and root w/o data  \"vdxfkeys\":[\"vdxfkey\", ...],                 (array, optional) Array of vdxfkeys or ID i-addresses  \"vdxfkeynames\":[\"vdxfkeyname\", ...],             (array, optional) Array of vdxfkey names or fully qualified friendly IDs  \"boundhashes\":[\"hexhash\", ...],               (array, optional) Array of bound hash values  \"hashtype\":\"str\",                      (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256  \"signature\":\"base64str\",                   (string, optional) The current signature of the message encoded in base 64 if multisig ID  \"encrypttoaddress\":\"saplingaddress\",             (string, optional) If present, encrypts and optionally returns encrypted data.                                          All data can be decrypted with the incoming viewing key, and a unique decryption key can                                          be generated for each sub-object.  \"createmmr\":\"bool\",                     (bool, optional)  If this is true, OR there is more than one item to sign, returns processed data, MMRs, and root signature }",
            "./raw_text_input_api_text/signdata"
        ],
        [
            "What is the purpose of the \"mmrsalt\" argument when using the Verus signing command with an MMR?",
            "The \"mmrsalt\" argument is used to protect the privacy of leaf nodes in the MMR.",
            "Arguments: {  \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to use for signing.  \"filename\" | \"message\" | \"messagehex\" | \"messagebase64\" | \"datahash\" (string, optional) Data to sign  \"mmrdata\":[{\"filename | vdxfdata | message | serializedhex | serializedbase64 | datahash\":\"str\"}], (array, optional) Alternate to single data parameters, this enables an MMR signing       \"mmrsalt\":[\"salt\":\"str\"],            (string, optional) Protects privacy of leaf nodes of the MMR       \"mmrhashtype\":\"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\", (string, optional) Default is blake2b       \"priormmr\":\"[{\"idxhash\":,\"utxoref\":{}}]\",  (array, optional) When growing an MMR, the prior hashes can be used to construct the MMR and root w/o data  \"vdxfkeys\":[\"vdxfkey\", ...],                 (array, optional) Array of vdxfkeys or ID i-addresses  \"vdxfkeynames\":[\"vdxfkeyname\", ...],             (array, optional) Array of vdxfkey names or fully qualified friendly IDs  \"boundhashes\":[\"hexhash\", ...],               (array, optional) Array of bound hash values  \"hashtype\":\"str\",                      (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256  \"signature\":\"base64str\",                   (string, optional) The current signature of the message encoded in base 64 if multisig ID  \"encrypttoaddress\":\"saplingaddress\",             (string, optional) If present, encrypts and optionally returns encrypted data.                                          All data can be decrypted with the incoming viewing key, and a unique decryption key can                                          be generated for each sub-object.  \"createmmr\":\"bool\",                     (bool, optional)  If this is true, OR there is more than one item to sign, returns processed data, MMRs, and root signature }",
            "./raw_text_input_api_text/signdata"
        ],
        [
            "What are the available hash types when using the Verus signing command with an MMR?",
            "The available hash types are:\n\n1. \"sha256\"\n2. \"sha256D\"\n3. \"blake2b\" (default)\n4. \"keccak256\"",
            "Arguments: {  \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to use for signing.  \"filename\" | \"message\" | \"messagehex\" | \"messagebase64\" | \"datahash\" (string, optional) Data to sign  \"mmrdata\":[{\"filename | vdxfdata | message | serializedhex | serializedbase64 | datahash\":\"str\"}], (array, optional) Alternate to single data parameters, this enables an MMR signing       \"mmrsalt\":[\"salt\":\"str\"],            (string, optional) Protects privacy of leaf nodes of the MMR       \"mmrhashtype\":\"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\", (string, optional) Default is blake2b       \"priormmr\":\"[{\"idxhash\":,\"utxoref\":{}}]\",  (array, optional) When growing an MMR, the prior hashes can be used to construct the MMR and root w/o data  \"vdxfkeys\":[\"vdxfkey\", ...],                 (array, optional) Array of vdxfkeys or ID i-addresses  \"vdxfkeynames\":[\"vdxfkeyname\", ...],             (array, optional) Array of vdxfkey names or fully qualified friendly IDs  \"boundhashes\":[\"hexhash\", ...],               (array, optional) Array of bound hash values  \"hashtype\":\"str\",                      (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256  \"signature\":\"base64str\",                   (string, optional) The current signature of the message encoded in base 64 if multisig ID  \"encrypttoaddress\":\"saplingaddress\",             (string, optional) If present, encrypts and optionally returns encrypted data.                                          All data can be decrypted with the incoming viewing key, and a unique decryption key can                                          be generated for each sub-object.  \"createmmr\":\"bool\",                     (bool, optional)  If this is true, OR there is more than one item to sign, returns processed data, MMRs, and root signature }",
            "./raw_text_input_api_text/signdata"
        ],
        [
            "What is the purpose of the \"priormmr\" argument when using the Verus signing command with an MMR?",
            "The \"priormmr\" argument is used when growing an MMR, and it allows you to construct the MMR and root without data by providing prior hashes.",
            "Arguments: {  \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to use for signing.  \"filename\" | \"message\" | \"messagehex\" | \"messagebase64\" | \"datahash\" (string, optional) Data to sign  \"mmrdata\":[{\"filename | vdxfdata | message | serializedhex | serializedbase64 | datahash\":\"str\"}], (array, optional) Alternate to single data parameters, this enables an MMR signing       \"mmrsalt\":[\"salt\":\"str\"],            (string, optional) Protects privacy of leaf nodes of the MMR       \"mmrhashtype\":\"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\", (string, optional) Default is blake2b       \"priormmr\":\"[{\"idxhash\":,\"utxoref\":{}}]\",  (array, optional) When growing an MMR, the prior hashes can be used to construct the MMR and root w/o data  \"vdxfkeys\":[\"vdxfkey\", ...],                 (array, optional) Array of vdxfkeys or ID i-addresses  \"vdxfkeynames\":[\"vdxfkeyname\", ...],             (array, optional) Array of vdxfkey names or fully qualified friendly IDs  \"boundhashes\":[\"hexhash\", ...],               (array, optional) Array of bound hash values  \"hashtype\":\"str\",                      (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256  \"signature\":\"base64str\",                   (string, optional) The current signature of the message encoded in base 64 if multisig ID  \"encrypttoaddress\":\"saplingaddress\",             (string, optional) If present, encrypts and optionally returns encrypted data.                                          All data can be decrypted with the incoming viewing key, and a unique decryption key can                                          be generated for each sub-object.  \"createmmr\":\"bool\",                     (bool, optional)  If this is true, OR there is more than one item to sign, returns processed data, MMRs, and root signature }",
            "./raw_text_input_api_text/signdata"
        ],
        [
            "What are the optional arguments for providing additional keys or key names when using the Verus signing command?",
            "The optional arguments are:\n\n1. \"vdxfkeys\" - an array of vdxfkeys or ID i-addresses\n2. \"vdxfkeynames\" - an array of vdxfkey names or fully qualified friendly IDs",
            "Arguments: {  \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to use for signing.  \"filename\" | \"message\" | \"messagehex\" | \"messagebase64\" | \"datahash\" (string, optional) Data to sign  \"mmrdata\":[{\"filename | vdxfdata | message | serializedhex | serializedbase64 | datahash\":\"str\"}], (array, optional) Alternate to single data parameters, this enables an MMR signing       \"mmrsalt\":[\"salt\":\"str\"],            (string, optional) Protects privacy of leaf nodes of the MMR       \"mmrhashtype\":\"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\", (string, optional) Default is blake2b       \"priormmr\":\"[{\"idxhash\":,\"utxoref\":{}}]\",  (array, optional) When growing an MMR, the prior hashes can be used to construct the MMR and root w/o data  \"vdxfkeys\":[\"vdxfkey\", ...],                 (array, optional) Array of vdxfkeys or ID i-addresses  \"vdxfkeynames\":[\"vdxfkeyname\", ...],             (array, optional) Array of vdxfkey names or fully qualified friendly IDs  \"boundhashes\":[\"hexhash\", ...],               (array, optional) Array of bound hash values  \"hashtype\":\"str\",                      (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256  \"signature\":\"base64str\",                   (string, optional) The current signature of the message encoded in base 64 if multisig ID  \"encrypttoaddress\":\"saplingaddress\",             (string, optional) If present, encrypts and optionally returns encrypted data.                                          All data can be decrypted with the incoming viewing key, and a unique decryption key can                                          be generated for each sub-object.  \"createmmr\":\"bool\",                     (bool, optional)  If this is true, OR there is more than one item to sign, returns processed data, MMRs, and root signature }",
            "./raw_text_input_api_text/signdata"
        ],
        [
            "What is the purpose of the \"boundhashes\" argument when using the Verus signing command?",
            "The \"boundhashes\" argument is used to provide an array of bound hash values.",
            "Arguments: {  \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to use for signing.  \"filename\" | \"message\" | \"messagehex\" | \"messagebase64\" | \"datahash\" (string, optional) Data to sign  \"mmrdata\":[{\"filename | vdxfdata | message | serializedhex | serializedbase64 | datahash\":\"str\"}], (array, optional) Alternate to single data parameters, this enables an MMR signing       \"mmrsalt\":[\"salt\":\"str\"],            (string, optional) Protects privacy of leaf nodes of the MMR       \"mmrhashtype\":\"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\", (string, optional) Default is blake2b       \"priormmr\":\"[{\"idxhash\":,\"utxoref\":{}}]\",  (array, optional) When growing an MMR, the prior hashes can be used to construct the MMR and root w/o data  \"vdxfkeys\":[\"vdxfkey\", ...],                 (array, optional) Array of vdxfkeys or ID i-addresses  \"vdxfkeynames\":[\"vdxfkeyname\", ...],             (array, optional) Array of vdxfkey names or fully qualified friendly IDs  \"boundhashes\":[\"hexhash\", ...],               (array, optional) Array of bound hash values  \"hashtype\":\"str\",                      (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256  \"signature\":\"base64str\",                   (string, optional) The current signature of the message encoded in base 64 if multisig ID  \"encrypttoaddress\":\"saplingaddress\",             (string, optional) If present, encrypts and optionally returns encrypted data.                                          All data can be decrypted with the incoming viewing key, and a unique decryption key can                                          be generated for each sub-object.  \"createmmr\":\"bool\",                     (bool, optional)  If this is true, OR there is more than one item to sign, returns processed data, MMRs, and root signature }",
            "./raw_text_input_api_text/signdata"
        ],
        [
            "What is the purpose of the \"encrypttoaddress\" argument when using the Verus signing command?",
            "The \"encrypttoaddress\" argument is used to encrypt the data and optionally return the encrypted data. If present, it encrypts the data and generates a unique decryption key for each sub-object.",
            "Arguments: {  \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to use for signing.  \"filename\" | \"message\" | \"messagehex\" | \"messagebase64\" | \"datahash\" (string, optional) Data to sign  \"mmrdata\":[{\"filename | vdxfdata | message | serializedhex | serializedbase64 | datahash\":\"str\"}], (array, optional) Alternate to single data parameters, this enables an MMR signing       \"mmrsalt\":[\"salt\":\"str\"],            (string, optional) Protects privacy of leaf nodes of the MMR       \"mmrhashtype\":\"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\", (string, optional) Default is blake2b       \"priormmr\":\"[{\"idxhash\":,\"utxoref\":{}}]\",  (array, optional) When growing an MMR, the prior hashes can be used to construct the MMR and root w/o data  \"vdxfkeys\":[\"vdxfkey\", ...],                 (array, optional) Array of vdxfkeys or ID i-addresses  \"vdxfkeynames\":[\"vdxfkeyname\", ...],             (array, optional) Array of vdxfkey names or fully qualified friendly IDs  \"boundhashes\":[\"hexhash\", ...],               (array, optional) Array of bound hash values  \"hashtype\":\"str\",                      (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256  \"signature\":\"base64str\",                   (string, optional) The current signature of the message encoded in base 64 if multisig ID  \"encrypttoaddress\":\"saplingaddress\",             (string, optional) If present, encrypts and optionally returns encrypted data.                                          All data can be decrypted with the incoming viewing key, and a unique decryption key can                                          be generated for each sub-object.  \"createmmr\":\"bool\",                     (bool, optional)  If this is true, OR there is more than one item to sign, returns processed data, MMRs, and root signature }",
            "./raw_text_input_api_text/signdata"
        ],
        [
            "What is the purpose of the \"createmmr\" argument when using the Verus signing command?",
            "The \"createmmr\" argument is a boolean flag that, if set to true, returns processed data, MMRs, and root signature. It is also set to true if there is more than one item to sign.",
            "Arguments: {  \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to use for signing.  \"filename\" | \"message\" | \"messagehex\" | \"messagebase64\" | \"datahash\" (string, optional) Data to sign  \"mmrdata\":[{\"filename | vdxfdata | message | serializedhex | serializedbase64 | datahash\":\"str\"}], (array, optional) Alternate to single data parameters, this enables an MMR signing       \"mmrsalt\":[\"salt\":\"str\"],            (string, optional) Protects privacy of leaf nodes of the MMR       \"mmrhashtype\":\"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\", (string, optional) Default is blake2b       \"priormmr\":\"[{\"idxhash\":,\"utxoref\":{}}]\",  (array, optional) When growing an MMR, the prior hashes can be used to construct the MMR and root w/o data  \"vdxfkeys\":[\"vdxfkey\", ...],                 (array, optional) Array of vdxfkeys or ID i-addresses  \"vdxfkeynames\":[\"vdxfkeyname\", ...],             (array, optional) Array of vdxfkey names or fully qualified friendly IDs  \"boundhashes\":[\"hexhash\", ...],               (array, optional) Array of bound hash values  \"hashtype\":\"str\",                      (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256  \"signature\":\"base64str\",                   (string, optional) The current signature of the message encoded in base 64 if multisig ID  \"encrypttoaddress\":\"saplingaddress\",             (string, optional) If present, encrypts and optionally returns encrypted data.                                          All data can be decrypted with the incoming viewing key, and a unique decryption key can                                          be generated for each sub-object.  \"createmmr\":\"bool\",                     (bool, optional)  If this is true, OR there is more than one item to sign, returns processed data, MMRs, and root signature }",
            "./raw_text_input_api_text/signdata"
        ]
    ],
    "will",
    "be",
    "replaced",
    "62585e90-21ea-4c31-968f-1a231f5b986f"
]