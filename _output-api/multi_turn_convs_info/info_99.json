[
    [
        [
            "What is the purpose of the `verifymessage` command in Verus?",
            "The `verifymessage` command is used to verify a signed message and check if the signature is valid.",
            "verifymessage \"address or identity\" \"signature\" \"message\" \"checklatest\" Verify a signed message Arguments: 1. \"t-addr or identity\" (string, required) The transparent address or identity that signed the message. 2. \"signature\"    (string, required) The signature provided by the signer in base 64 encoding (see signmessage). 3. \"message\"     (string, required) The message that was signed. 3. \"checklatest\"   (bool, optional)  If true, checks signature validity based on latest identity. defaults to false,                      which determines validity of signing height stored in signature. Result: true|false  (boolean) If the signature is verified or not. Examples: Create the signature > verus signmessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"my message\" Verify the signature > verus verifymessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"signature\" \"my message\" As json rpc > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/verifymessage"
        ],
        [
            "What are the required arguments for the `verifymessage` command?",
            "The required arguments for the `verifymessage` command are:\n1. \"address or identity\" (string) - The transparent address or identity that signed the message.\n2. \"signature\" (string) - The signature provided by the signer in base 64 encoding.\n3. \"message\" (string) - The message that was signed.",
            "verifymessage \"address or identity\" \"signature\" \"message\" \"checklatest\" Verify a signed message Arguments: 1. \"t-addr or identity\" (string, required) The transparent address or identity that signed the message. 2. \"signature\"    (string, required) The signature provided by the signer in base 64 encoding (see signmessage). 3. \"message\"     (string, required) The message that was signed. 3. \"checklatest\"   (bool, optional)  If true, checks signature validity based on latest identity. defaults to false,                      which determines validity of signing height stored in signature. Result: true|false  (boolean) If the signature is verified or not. Examples: Create the signature > verus signmessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"my message\" Verify the signature > verus verifymessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"signature\" \"my message\" As json rpc > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/verifymessage"
        ],
        [
            "What is the optional argument for the `verifymessage` command?",
            "The optional argument for the `verifymessage` command is:\n1. \"checklatest\" (bool) - If true, checks signature validity based on the latest identity. Defaults to false, which determines validity of signing height stored in signature.",
            "verifymessage \"address or identity\" \"signature\" \"message\" \"checklatest\" Verify a signed message Arguments: 1. \"t-addr or identity\" (string, required) The transparent address or identity that signed the message. 2. \"signature\"    (string, required) The signature provided by the signer in base 64 encoding (see signmessage). 3. \"message\"     (string, required) The message that was signed. 3. \"checklatest\"   (bool, optional)  If true, checks signature validity based on latest identity. defaults to false,                      which determines validity of signing height stored in signature. Result: true|false  (boolean) If the signature is verified or not. Examples: Create the signature > verus signmessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"my message\" Verify the signature > verus verifymessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"signature\" \"my message\" As json rpc > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/verifymessage"
        ],
        [
            "What is the result of the `verifymessage` command?",
            "The result of the `verifymessage` command is a boolean value (true or false) indicating whether the signature is verified or not.",
            "verifymessage \"address or identity\" \"signature\" \"message\" \"checklatest\" Verify a signed message Arguments: 1. \"t-addr or identity\" (string, required) The transparent address or identity that signed the message. 2. \"signature\"    (string, required) The signature provided by the signer in base 64 encoding (see signmessage). 3. \"message\"     (string, required) The message that was signed. 3. \"checklatest\"   (bool, optional)  If true, checks signature validity based on latest identity. defaults to false,                      which determines validity of signing height stored in signature. Result: true|false  (boolean) If the signature is verified or not. Examples: Create the signature > verus signmessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"my message\" Verify the signature > verus verifymessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"signature\" \"my message\" As json rpc > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/verifymessage"
        ],
        [
            "How can I use the `verifymessage` command as a JSON RPC?",
            "You can use the `verifymessage` command as a JSON RPC by sending a request with the following format:\n```json\n{\n  \"jsonrpc\": \"1.0\",\n  \"id\": \"curltest\",\n  \"method\": \"verifymessage\",\n  \"params\": [\"address or identity\", \"signature\", \"message\"]\n}\n```\nYou can send this request using a tool like `curl` to the Verus RPC server.",
            "verifymessage \"address or identity\" \"signature\" \"message\" \"checklatest\" Verify a signed message Arguments: 1. \"t-addr or identity\" (string, required) The transparent address or identity that signed the message. 2. \"signature\"    (string, required) The signature provided by the signer in base 64 encoding (see signmessage). 3. \"message\"     (string, required) The message that was signed. 3. \"checklatest\"   (bool, optional)  If true, checks signature validity based on latest identity. defaults to false,                      which determines validity of signing height stored in signature. Result: true|false  (boolean) If the signature is verified or not. Examples: Create the signature > verus signmessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"my message\" Verify the signature > verus verifymessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"signature\" \"my message\" As json rpc > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/verifymessage"
        ]
    ],
    "will",
    "be",
    "replaced",
    "898dec0a-d4a0-4a8d-8991-fd993d2105e6"
]