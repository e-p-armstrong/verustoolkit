[
    "How can I define a simple token currency called MyBrand, which is centralized and has a preallocation of 100 tokens to Klaus@, using the command line and Verus?",
    "You can define a simple token currency called MyBrand with the following command:\n```\n./verus -chain=VRSCTEST definecurrency '{  \"name\":\"MyBrand\",  \"options\":32,  \"proofprotocol\":2,  \"preallocations\":[{\"Klaus@\":100}] }'\n```\nThis command creates a centralized token currency called MyBrand, where the controller of the rootID can mint and burn tokens, and initially allocates 100 tokens to Klaus@.",
    "Example currency: ``` json ./verus -chain=VRSCTEST definecurrency '{  \"name\":\"MyBrand\",  \"options\":32,  \"proofprotocol\":2,  \"preallocations\":[{\"Klaus@\":100}] }' ``` \u261d\ufe0f A simple token currency called MyBrand, centralized (the controller of the rootID can mint and burn), and has a preallocation of 100 tokens to Klaus@.### **\"currencies\"** Here you put the names of the currencies (or just one \u2014 it must have VRSC when launched on Verus) that will be in the reserves when it\u2019s a basket currency (`options:33`).Or when it\u2019s a simple token currency (`options:32`), what people convert during the preconversion timeframe will go to the rootID of the currency, as a funding mechanism. In the case of a simple token currency, combine it with `\"conversions\"` to determine the preconversion price.Use up to 10 currencies for this parameter.Example currency: ``` json ./verus -chain=VRSCTEST definecurrency '{  \"name\":\"CommunityX\",  \"options\":33,  \"currencies\":[\"vrsctest\",\"MyBrand\",\"InfluencerCoin\"],  \"minpreconversion\":[10,50,10],  \"initialsupply\":100 }' ``` \u261d\ufe0f A basket currency called CommunityX. It needs to get a minimum of 10 VRSCTEST, 50 MyBrand and 10 InfluencerCoin into its reserves within the preconversion time frame to be launched. The initial supply of 100 CommunityX will be distributed among the preconverters.### **\"conversions\"** Use this parameter when launching a simple token currency. Together with `\"currencies\"`, it can be used as a funding mechanism for the rootID. This parameter is for the preconversion price. So when doing `\"conversions\":[0.1]`, it means that for every VRSC the preconverter receives 10 CURRENCY after launch. The converted VRSC goes into the rootID.People can preconvert to this currency within the preconversion time frame. Define a `\"startblock\"`, or let the default and minimum time frame play out, which is 20 blocks.Example currency: ``` json ./verus -chain=VRSCTEST definecurrency '{  \"name\":\"CoolBrand\",  \"options\":32,  \"currencies\":[\"vrsctest\"],  \"conversions\":[0.1],  \"minpreconversion\":[1000] }' ``` \u261d\ufe0f This simple token currency is called CoolBrand. During the preconversion time frame people need to convert 1000 VRSCTEST to the rootID. In exchange for that they receive 10.000 CoolBrand. If this minimum amount is not met, the currency will not launch, and everyone who did a preconvert will get their funds back.",
    "./raw_text_input_docs/launch-currency.md"
]