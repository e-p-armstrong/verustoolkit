[
    "What information does the `decodescript` command return about a hex-encoded script?",
    "The `decodescript` command returns a JSON object with information about the decoded script. The JSON object contains the following properties:\n\n1. `asm`: a string representing the script in assembly format.\n2. `hex`: a string representing the hex-encoded public key.\n3. `type`: a string indicating the output type.\n4. `reqSigs`: a numeric value indicating the required signatures.\n5. `addresses`: a JSON array of strings, where each string represents a Komodo address.\n6. `p2sh`: a string representing the script address.",
    "     ,...    ]   }   ,...  ], } ``` Examples: ```bash > verus decoderawtransaction \"hexstring\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decoderawtransaction\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `decodescript \"hex\"` Decode a hex-encoded script.#### Arguments: 1. \"hex\"   (string) the hex encoded script#### Result: ```json {  \"asm\":\"asm\",  (string) Script public key  \"hex\":\"hex\",  (string) hex encoded public key  \"type\":\"type\", (string) The output type  \"reqSigs\": n,  (numeric) The required signatures  \"addresses\": [  (json array of string)   \"address\"   (string) Komodo address   ,...  ],  \"p2sh\",\"address\" (string) script address } ``` Examples: ```bash > verus decodescript \"hexstring\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"decodescript\", \"params\": [\"hexstring\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `fundrawtransaction \"hexstring\" '[{\"txid\":\"8892b6c090b51a4eed7a61b72e9c8dbf5ed5bcd5aca6c6819b630acf2cb3fc87\",\"voutnum\":1},...]' (changeaddress) (explicitfee)` Add inputs to a transaction until it has enough in value to meet its out value. This will not modify existing inputs, and will add one change output to the outputs. Note that inputs which were signed may need to be resigned after completion since in/outputs have been added. The inputs added will not be signed, use signrawtransaction for that.#### Arguments: 1. \"hexstring\"  (string, required) The hex string of the raw transaction 2. \"objectarray\"   (UTXO list, optional) UTXOs to select from for funding 3. \"changeaddress\"  (string, optional)   Address to send change to if there is any 4. \"explicitfee\"   (number, optional)   Offer this instead of the default fee only when using UTXO list#### Result: ```json {  \"hex\":    \"value\", (string) The resulting raw transaction (hex-encoded string)  \"fee\":    n,     (numeric) The fee added to the transaction  \"changepos\": n     (numeric) The position of the added change output, or -1 } \"hex\" ``` Examples:Create a transaction with no inputs ```bash > verus createrawtransaction \"[]\" \"{\\\"myaddress\\\":0.01}\" ``` Add sufficient unsigned inputs to meet the output value ```bash > verus fundrawtransaction \"rawtransactionhex\" ``` Sign the transaction ```bash > verus signrawtransaction \"fundedtransactionhex\" ``` Send the transaction ```bash > verus sendrawtransaction \"signedtransactionhex\" ```",
    "./raw_txt_input/clifaq-02_verus_commands.md"
]