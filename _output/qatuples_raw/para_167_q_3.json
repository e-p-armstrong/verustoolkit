[
    "How do I export a viewing key corresponding to a zaddr using the `z_exportviewingkey` command in Verus?",
    "To export a viewing key corresponding to a zaddr using the `z_exportviewingkey` command, you need to provide a single argument: the zaddr for the viewing key. The command would look like this:\n```\nverus z_exportviewingkey \"myaddress\"\n```\nYou can also use the `curl` command with the JSON-RPC API to achieve the same result:\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_exportviewingkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\nThe command returns the viewing key as a string.",
    "#### Arguments: 1. \"VRSC_address\" (string, required) The VRSC address to be associated with an account. 2. \"account\"     (string, required) MUST be set to the empty string \"\" to represent the default account. Passing any other string will result in an error.Examples: ```bash > verus setaccount \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" \"tabby\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setaccount\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", \"tabby\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `settxfee amount` Set the transaction fee per kB.#### Arguments: 1. amount     (numeric, required) The transaction fee in VRSC/kB rounded to the nearest 0.00000001#### Result: true|false    (boolean) Returns true if successfulExamples: ```bash > verus settxfee 0.00001 > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"settxfee\", \"params\": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `z_exportkey \"zaddr\"` Reveals the zkey corresponding to 'zaddr'. Then the `z_importkey` can be used with this output#### Arguments: 1. \"zaddr\"  (string, required) The zaddr for the private key#### Result: \"key\"         (string) The private keyExamples: ```bash > verus z_exportkey \"myaddress\" > verus z_importkey \"mykey\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_exportkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `z_exportviewingkey \"zaddr\"` Reveals the viewing key corresponding to 'zaddr'. Then the `z_importviewingkey` can be used with this output#### Arguments: 1. \"zaddr\"  (string, required) The zaddr for the viewing keyResult: \"vkey\"         (string) The viewing keyExamples: ```bash > verus z_exportviewingkey \"myaddress\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_exportviewingkey\", \"params\": [\"myaddress\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `z_exportwallet \"filename\" (omitemptytaddresses)` Exports all wallet keys, for taddr and zaddr, in a human-readable format. Overwriting an existing file is not permitted.#### Arguments: 1. \"filename\"      (string, required) The filename, saved in folder set by verusd -exportdir option 2. \"omitemptytaddresses\" (boolean, optional) Defaults to false. If true, export only addresses with indexed UTXOs or that control IDs in the wallet             (do not use this option without being sure that all addresses of interest are included)#### Result: \"path\"      (string) The full path of the destination file",
    "./raw_txt_input/clifaq-02_verus_commands.md"
]