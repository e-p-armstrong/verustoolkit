[
    [
        [
            "What is the result of the `signrawtransaction` command?",
            "The result of the `signrawtransaction` command is a JSON object containing three properties:\n\n1. \"hex\" - the hex-encoded raw transaction with signature(s)\n2. \"complete\" - a boolean indicating if the transaction has a complete set of signatures\n3. \"errors\" - a JSON array of objects containing script verification errors (if any)",
            "#### Arguments: 1. \"hexstring\"   (string, required) The transaction hex string 2. \"prevtxs\"    (string, optional) An json array of previous dependent transaction outputs ```json   [        (json array of json objects, or 'null' if none provided)    {     \"txid\":\"id\",       (string, required) The transaction id     \"vout\":n,         (numeric, required) The output number     \"scriptPubKey\": \"hex\",  (string, required) script key     \"redeemScript\": \"hex\",  (string, required for P2SH) redeem script     \"amount\": value      (numeric, required) The amount spent    }    ,...   ] ``` 3. \"privatekeys\"   (string, optional) A json array of base58-encoded private keys for signing ```json   [         (json array of strings, or 'null' if none provided)    \"privatekey\"  (string) private key in base58-encoding    ,...   ] ``` 4. \"sighashtype\"   (string, optional, default=ALL) The signature hash type. Must be one of    \"ALL\"    \"NONE\"    \"SINGLE\"    \"ALL|ANYONECANPAY\"    \"NONE|ANYONECANPAY\"    \"SINGLE|ANYONECANPAY\" 5. \"branchid\"    (string, optional) The hex representation of the consensus branch id to sign with. This can be used to force signing with consensus rules that are ahead of the node's current height.#### Result: ```json: {  \"hex\" : \"value\",        (string) The hex-encoded raw transaction with signature(s)  \"complete\" : true|false,    (boolean) If the transaction has a complete set of signatures  \"errors\" : [          (json array of objects) Script verification errors (if there are any)   {    \"txid\" : \"hash\",      (string) The hash of the referenced, previous transaction    \"vout\" : n,        (numeric) The index of the output to spent and used as input    \"scriptSig\" : \"hex\",    (string) The hex-encoded signature script    \"sequence\" : n,      (numeric) Script sequence number    \"error\" : \"text\"      (string) Verification or signing error related to the input   }   ,...  ] } ``` Examples: ```bash > verus signrawtransaction \"myhex\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransaction\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Util### `createmultisig nrequired [\"key\",...]` Creates a multi-signature address with n signature of m keys required. It returns a json object with the address and redeemScript.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `signrawtransaction` command in Verus?",
            "The `signrawtransaction` command is used to sign a transaction with a set of provided private keys. It takes four arguments: the transaction hex string, an optional array of previous dependent transaction outputs, an optional array of base58-encoded private keys for signing, and an optional signature hash type.",
            "#### Arguments: 1. \"hexstring\"   (string, required) The transaction hex string 2. \"prevtxs\"    (string, optional) An json array of previous dependent transaction outputs ```json   [        (json array of json objects, or 'null' if none provided)    {     \"txid\":\"id\",       (string, required) The transaction id     \"vout\":n,         (numeric, required) The output number     \"scriptPubKey\": \"hex\",  (string, required) script key     \"redeemScript\": \"hex\",  (string, required for P2SH) redeem script     \"amount\": value      (numeric, required) The amount spent    }    ,...   ] ``` 3. \"privatekeys\"   (string, optional) A json array of base58-encoded private keys for signing ```json   [         (json array of strings, or 'null' if none provided)    \"privatekey\"  (string) private key in base58-encoding    ,...   ] ``` 4. \"sighashtype\"   (string, optional, default=ALL) The signature hash type. Must be one of    \"ALL\"    \"NONE\"    \"SINGLE\"    \"ALL|ANYONECANPAY\"    \"NONE|ANYONECANPAY\"    \"SINGLE|ANYONECANPAY\" 5. \"branchid\"    (string, optional) The hex representation of the consensus branch id to sign with. This can be used to force signing with consensus rules that are ahead of the node's current height.#### Result: ```json: {  \"hex\" : \"value\",        (string) The hex-encoded raw transaction with signature(s)  \"complete\" : true|false,    (boolean) If the transaction has a complete set of signatures  \"errors\" : [          (json array of objects) Script verification errors (if there are any)   {    \"txid\" : \"hash\",      (string) The hash of the referenced, previous transaction    \"vout\" : n,        (numeric) The index of the output to spent and used as input    \"scriptSig\" : \"hex\",    (string) The hex-encoded signature script    \"sequence\" : n,      (numeric) Script sequence number    \"error\" : \"text\"      (string) Verification or signing error related to the input   }   ,...  ] } ``` Examples: ```bash > verus signrawtransaction \"myhex\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"signrawtransaction\", \"params\": [\"myhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## Util### `createmultisig nrequired [\"key\",...]` Creates a multi-signature address with n signature of m keys required. It returns a json object with the address and redeemScript.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "240c751b-55b4-4768-99be-a96577de2008"
]