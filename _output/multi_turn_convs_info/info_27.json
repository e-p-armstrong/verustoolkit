[
    [
        [
            "What does it mean when the `proofprotocol` is set to 2 when defining a new currency?",
            "When the `proofprotocol` is set to 2 when defining a new currency, it means that the controller of the chain ID can mint new coins. This is referred to as PROOF_CHAINID.",
            "``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How can the controller of the chain ID mint new coins if `proofprotocol` is set to 2?",
            "The controller of the chain ID can mint new coins by using the `sendcurrency` command with the `mintnew` option set to 1. For example:\n\n```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\n\nThis will mint 10,000 new coins of the `mycoin` currency and send them to the address `mike@`.",
            "``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is a PBaaS blockchain, and how is it defined in Verus?",
            "A PBaaS (Private Blockchain as a Service) blockchain is a type of blockchain that allows for the creation of private, permissioned blockchains. In Verus, a PBaaS blockchain is defined using a JSON object that specifies the properties of the blockchain, such as its name, options, currencies, conversions, eras, notaries, nodes, and gateway converter.",
            "``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I export an ID to a PBaaS chain using Verus?",
            "You can export an ID to a PBaaS chain using the `sendcurrency` command with the `exportto` and `exportid` options. For example:\n\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```\n\nThis will export the ID `IDNAME@` to the PBaaS chain `PBaaSChainName` with an amount of 100 `vrsctest` coins.",
            "``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What does it mean when you set `proofprotocol` to 2 when defining a new currency with Verus?",
            "When you set `proofprotocol` to 2 when defining a new currency with Verus, it means that the proof protocol is set to PROOF_CHAINID. This allows the controller of the chain ID to mint new coins.",
            "``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How can the controller of the chain ID mint new coins after setting `proofprotocol` to 2?",
            "After setting `proofprotocol` to 2, the controller of the chain ID can mint new coins using the `sendcurrency` command. For example:\n```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\nThis command would mint 10,000 new \"mycoin\" coins and send them to the address \"mike@\".",
            "``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is a PBaaS blockchain, and how is it defined in Verus?",
            "A PBaaS (Private Blockchain as a Service) blockchain is a type of blockchain that allows users to create and manage their own private blockchains. In Verus, a PBaaS blockchain is defined using a JSON object that specifies various properties such as the name of the chain, the currencies it supports, the notaries that will validate transactions, and the nodes that will make up the network.\n\nThe definition of a PBaaS blockchain in Verus includes properties such as:\n\n* `name`: the name of the chain\n* `options`: an integer that specifies various options for the chain\n* `currencies`: an array of currency tickers that the chain supports\n* `conversions`: an array of conversion ratios between the chain's native currency and other currencies\n* `eras`: an array of objects that define the block reward, reward decay, halving, and end of each era in the chain's lifecycle\n* `notaries`: an array of VerusIDs that will serve as notaries on the chain\n* `minnotariesconfirm`: an integer that specifies the minimum number of notaries needed to confirm a block\n* `nodes`: an array of objects that define the network addresses and IDs of the nodes on the chain\n* `gatewayconvertername`: the name of the bridge that allows funds to be moved on and off the chain\n* `gatewayconverterissuance`: the initial supply of the bridge's native token",
            "``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do you define a PBaaS blockchain using the `definecurrency` command in Verus?",
            "You can define a PBaaS blockchain using the `definecurrency` command in Verus by passing two JSON objects as arguments. The first JSON object defines the properties of the PBaaS blockchain, and the second JSON object defines the overridable defaults for the bridge.\n\nFor example:\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\nThis command defines a PBaaS blockchain named \"PBaaSChain\" with the specified properties and overridable defaults for the bridge.",
            "``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What does it mean when I set `proofprotocol` to 2 when defining a new token using the `definecurrency` command in Verus?",
            "When you set `proofprotocol` to 2 when defining a new token using the `definecurrency` command in Verus, it means that the proof protocol is set to PROOF_CHAINID. This allows the controller of the chain ID to mint new tokens.",
            "``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How can I mint new tokens of a currency that has PROOF_CHAINID set, using the `sendcurrency` command in Verus?",
            "To mint new tokens of a currency that has PROOF_CHAINID set, you can use the `sendcurrency` command with the `mintnew` option. Here's an example:\n```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\nThis command mints 10,000 new tokens of the \"mycoin\" currency and sends them to the address \"mike@\".",
            "``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is a PBaaS blockchain, and how do I define one using Verus?",
            "A PBaaS (Private Blockchain as a Service) blockchain is a type of blockchain that allows users to create and manage their own private blockchain networks. To define a PBaaS blockchain using Verus, you need to pass a JSON object to the `definecurrency` command that defines the properties of the blockchain. Here's an example:\n```json\n{\n  \"name\": \"PBaaSChain\",\n  \"options\": 264,\n  \"currencies\": [\n    \"VRSCTEST\"\n  ],\n  \"conversions\": [\n    1\n  ],\n  \"eras\": [\n    {\n      \"reward\": 1200000000,\n      \"decay\": 0,\n      \"halving\": 0,\n      \"eraend\": 0\n    }\n  ],\n  \"notaries\": [\n    \"Notary1@\",\n    \"Notary2@\",\n    \"Notary3@\"\n  ],\n  \"minnotariesconfirm\": 2,\n  \"nodes\": [\n    {\n      \"networkaddress\": \"111.111.111.111:10000\",\n      \"nodeidentity\": \"Node1@\"\n    },\n    {\n      \"networkaddress\": \"111.111.111.112:10000\",\n      \"nodeidentity\": \"Node2@\"\n    }\n  ],\n  \"gatewayconvertername\": \"Bridge\",\n  \"gatewayconverterissuance\": 1000000\n}\n```\nThis JSON object defines a PBaaS blockchain with a name, options, currencies, conversions, eras, notaries, nodes, and a gateway converter.",
            "``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I export an ID to a PBaaS chain using Verus?",
            "To export an ID to a PBaaS chain using Verus, you can use the `sendcurrency` command with the `exportto` and `exportid` options. Here's an example:\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```\nThis command exports the ID \"IDNAME@\" to the PBaaS chain \"PBaaSChainName\" with an amount of 100 VRSCTEST.",
            "``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is the purpose of setting `proofprotocol` to 2 when defining a new currency in Verus?",
            "Setting `proofprotocol` to 2 when defining a new currency in Verus means that the controller of the chain ID can mint new coins. This is known as PROOF_CHAINID.",
            "``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How can I mint new coins in a currency that has `proofprotocol` set to 2?",
            "To mint new coins in a currency that has `proofprotocol` set to 2, you can use the `sendcurrency` command. For example:\n\n```\n./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]'\n```\n\nThis command mints 10,000 new coins of the \"mycoin\" currency and sends them to the address \"mike@\".",
            "``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is a PBaaS blockchain, and how is it defined in Verus?",
            "A PBaaS (Private Blockchain as a Service) blockchain is a type of blockchain that allows users to create their own private blockchain networks. In Verus, a PBaaS blockchain is defined using a JSON object that specifies the properties of the blockchain, such as its name, options, currencies, conversions, eras, notaries, and nodes. The definition is then passed to the `definecurrency` command to create the blockchain.",
            "``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How can I export an ID to a PBaaS chain in Verus?",
            "To export an ID to a PBaaS chain in Verus, you can use the `sendcurrency` command. For example:\n\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```\n\nThis command exports the ID \"IDNAME@\" to the PBaaS chain \"PBaaSChainName\" with an amount of 100 VRSCTEST.",
            "``` ./verus -chain=VRSCTEST definecurrency '{\"name\":\"mycoin\",\"options\":33, \"proofprotocol\":2,\"currencies\":[\"vrsctest\", \"gold\"],\"minpreconversion\":[10000,5.1298]}, \"initialsupply\":20000' ``` In \"mycoin\", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:``` ./verus -chain=VRSCTEST sendcurrency \"mycoin@\" '[{\"address\":\"mike@\",\"currency\":\"mycoin\",\"mintnew\":1,\"amount\":10000}]' ```#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```",
            "./raw_txt_input/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "60b6dbb7-8592-4adf-827f-3ca5932c94bc"
]