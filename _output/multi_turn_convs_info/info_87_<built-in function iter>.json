[
    [
        [
            "What is the format of the result returned by the `submitchallenges` command?",
            "The result returned by the `submitchallenges` command is a JSON array of objects, where each object contains information about the result of submitting a challenge transaction, including the transaction ID and any error messages.",
            "#### Result: ```json [{\"txid\":\"hex\"}, {\"error\":\"errorstring\"}, ...]  (array) results of submitted challenge transactions ```#### Examples: ```bash > verus submitchallenges '[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitchallenges\", \"params\": [[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `submitimports '{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", Fresendw\"transfers\": [{transfer1}, {transfer2},...]}, ...]}'` Accepts a set of exports from another system to post to the VRSC network.#### Arguments: ```json  {   \"sourcesystemid\":\"systemid\"    ()   \"notarizationtxid\":\"txid\"     ()   \"notarizationtxoutnum\":n       ()   \"exports\": [{    \"height\": n,    \"txid\": \"hexid\",    \"txoutnum\": n,    \"partialtransactionproof\": \"hexstr\",    \"transfers\": [{transfer1}, {transfer2},...]   }, ...]  } ``` #### Result: ```json  [{   \"currency\": \"currencyid\"   \"txid\": \"hexid\",   \"txoutnum\": n  }, ...] ``` Examples: ```bash > verus submitimports {\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]} > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitimports\", \"params\": [{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `submitmergedblock \"hexdata\" ( \"jsonparametersobject\" )` Attempts to submit one more more new blocks to one or more networks. Each merged block submission may be valid for Verus and/or PBaaS merge mined chains. The submitted block consists of a valid block for this chain, along with embedded headers of other PBaaS merge mined chains. If the hash for this header meets targets of other chains that have been added with 'addmergedblock', this API will submit those blocks to the specified URL endpoints with an RPC 'submitmergedblock' request. Attempts to submit one or more new blocks to one or more networks.#### Arguments 1. \"hexdata\"  (string, required) the hex-encoded block data to submit",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How can I use the `submitimports` command to import exports from another system to the VRSC network?",
            "You can use the `submitimports` command to import exports from another system to the VRSC network by providing a JSON object with the necessary information, including the source system ID, notarization transaction ID and output number, and an array of exports. Each export object should contain the height, transaction ID, output number, partial transaction proof, and transfers.",
            "#### Result: ```json [{\"txid\":\"hex\"}, {\"error\":\"errorstring\"}, ...]  (array) results of submitted challenge transactions ```#### Examples: ```bash > verus submitchallenges '[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitchallenges\", \"params\": [[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `submitimports '{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", Fresendw\"transfers\": [{transfer1}, {transfer2},...]}, ...]}'` Accepts a set of exports from another system to post to the VRSC network.#### Arguments: ```json  {   \"sourcesystemid\":\"systemid\"    ()   \"notarizationtxid\":\"txid\"     ()   \"notarizationtxoutnum\":n       ()   \"exports\": [{    \"height\": n,    \"txid\": \"hexid\",    \"txoutnum\": n,    \"partialtransactionproof\": \"hexstr\",    \"transfers\": [{transfer1}, {transfer2},...]   }, ...]  } ``` #### Result: ```json  [{   \"currency\": \"currencyid\"   \"txid\": \"hexid\",   \"txoutnum\": n  }, ...] ``` Examples: ```bash > verus submitimports {\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]} > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitimports\", \"params\": [{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `submitmergedblock \"hexdata\" ( \"jsonparametersobject\" )` Attempts to submit one more more new blocks to one or more networks. Each merged block submission may be valid for Verus and/or PBaaS merge mined chains. The submitted block consists of a valid block for this chain, along with embedded headers of other PBaaS merge mined chains. If the hash for this header meets targets of other chains that have been added with 'addmergedblock', this API will submit those blocks to the specified URL endpoints with an RPC 'submitmergedblock' request. Attempts to submit one or more new blocks to one or more networks.#### Arguments 1. \"hexdata\"  (string, required) the hex-encoded block data to submit",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `submitmergedblock` command in Verus?",
            "The `submitmergedblock` command in Verus is used to submit one or more new blocks to one or more networks. It takes a hex-encoded block data as input and attempts to submit the block to the specified URL endpoints with an RPC `submitmergedblock` request. If the hash for the header meets the targets of other chains that have been added with `addmergedblock`, the API will submit those blocks to the specified URL endpoints.",
            "#### Result: ```json [{\"txid\":\"hex\"}, {\"error\":\"errorstring\"}, ...]  (array) results of submitted challenge transactions ```#### Examples: ```bash > verus submitchallenges '[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitchallenges\", \"params\": [[{\"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},\"challengeroot\":{},\"evidence\":{}}]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `submitimports '{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", Fresendw\"transfers\": [{transfer1}, {transfer2},...]}, ...]}'` Accepts a set of exports from another system to post to the VRSC network.#### Arguments: ```json  {   \"sourcesystemid\":\"systemid\"    ()   \"notarizationtxid\":\"txid\"     ()   \"notarizationtxoutnum\":n       ()   \"exports\": [{    \"height\": n,    \"txid\": \"hexid\",    \"txoutnum\": n,    \"partialtransactionproof\": \"hexstr\",    \"transfers\": [{transfer1}, {transfer2},...]   }, ...]  } ``` #### Result: ```json  [{   \"currency\": \"currencyid\"   \"txid\": \"hexid\",   \"txoutnum\": n  }, ...] ``` Examples: ```bash > verus submitimports {\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]} > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitimports\", \"params\": [{\"sourcesystemid\":\"systemid\", \"notarizationtxid\":\"txid\", \"notarizationtxoutnum\":n, \"exports\":[{\"height\":n, \"txid\":\"hexid\", \"txoutnum\":n, \"partialtransactionproof\":\"hexstr\", \"transfers\": [{transfer1}, {transfer2},...]}, ...]}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `submitmergedblock \"hexdata\" ( \"jsonparametersobject\" )` Attempts to submit one more more new blocks to one or more networks. Each merged block submission may be valid for Verus and/or PBaaS merge mined chains. The submitted block consists of a valid block for this chain, along with embedded headers of other PBaaS merge mined chains. If the hash for this header meets targets of other chains that have been added with 'addmergedblock', this API will submit those blocks to the specified URL endpoints with an RPC 'submitmergedblock' request. Attempts to submit one or more new blocks to one or more networks.#### Arguments 1. \"hexdata\"  (string, required) the hex-encoded block data to submit",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "ab3c3c93-2911-45e7-8cb4-01e8c1fe25cc"
]