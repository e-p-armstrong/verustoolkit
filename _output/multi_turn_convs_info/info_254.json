[
    [
        [
            "How do I create a raw transaction using the `createrawtransaction` command in Verus?",
            "To create a raw transaction using the `createrawtransaction` command in Verus, you need to adapt the command to your specific situation. The command should look similar to this:\n```bash\nrun createrawtransaction '[{\"txid\": \"your_TXID\", \"vout\": your_VOUT}]' '{\"your_address@\": your_amount}' your_fee\n```\nReplace `your_TXID` with the TXID of the transaction you want to use, `your_VOUT` with the output number you want to use, `your_address@` with the address you want to send the funds to, `your_amount` with the amount you want to send (minus the 0.0001 VRSC fee), and `your_fee` with the transaction fee.",
            "1. adapt the above `createrawtransaction` command, making sure to subtract the 0.0001 VRSC free from the amount that is in the original TXID, similar to this example: ```bash run createrawtransaction '[{\"txid\": \"fa5962ebf61ef31867ba73b173433841f8f68578d53b4bb30cfe1432b5820f15\", \"vout\": 10}]' '{\"Oink@\": 2.20004763}' 890450 ``` In this example, the result is a long HEX-string: ```json 0400008085202f8901150f82b53214fe0cb34b3bd57885f6f841384373b173ba6718f31ef6eb6259fa0a00000000feffffff019b011d0d0000000024050403000000cc1b04030001011504575dc6ae7484c83c0dc97a4218f88e2cbe9b659c7552960d006e960d000000000000000000000000 ``` Copy the string that your command gave as response, from the CLI interface of your wallet. You will need it in the next step.note: The above command and its result are examples. ***DO NOT*** use data from it. Use the results from your own wallet!2. In the CLI interface adapt and issue this command`run signrawtransaction <string from step 1>` In our example, that would look like this: ```bash run signrawtransaction 0400008085202f8901150f82b53214fe0cb34b3bd57885f6f841384373b173ba6718f31ef6eb6259fa0a00000000feffffff019b011d0d0000000024050403000000cc1b04030001011504575dc6ae7484c83c0dc97a4218f88e2cbe9b659c7552960d006e960d000000000000000000000000 ``` and your command will show a result similar to this example: ```json { \"hex\": \"0400008085202f8901150f82b53214fe0cb34b3bd57885f6f841384373b173ba6718f31ef6eb6259fa0a000000694c67010101012102c9ca37dac14c819a99ce4a71533ab8d3d5e37643ede9c4da0981081a074f75df40531ea63fb3de6111949652111bbe524506999c97c06302715e85aa5c5813519b3eace4ac15bb3950600f968c0c555a935fd826f1a51e00bd2a7f12d035757fc5feffffff019b011d0d0000000024050403000000cc1b04030001011504575dc6ae7484c83c0dc97a4218f88e2cbe9b659c7552960d006e960d000000000000000000000000\", \"complete\": true } ```note: The above command and its result are examples. ***DO NOT*** use data from it. Use the results from your own wallet!",
            "./raw_txt_input/faq-allos26_sent_funds_to_b-address.md"
        ],
        [
            "What do I do with the resulting HEX string from the `createrawtransaction` command?",
            "You will need to copy the resulting HEX string and use it in the next step to sign the raw transaction using the `signrawtransaction` command.",
            "1. adapt the above `createrawtransaction` command, making sure to subtract the 0.0001 VRSC free from the amount that is in the original TXID, similar to this example: ```bash run createrawtransaction '[{\"txid\": \"fa5962ebf61ef31867ba73b173433841f8f68578d53b4bb30cfe1432b5820f15\", \"vout\": 10}]' '{\"Oink@\": 2.20004763}' 890450 ``` In this example, the result is a long HEX-string: ```json 0400008085202f8901150f82b53214fe0cb34b3bd57885f6f841384373b173ba6718f31ef6eb6259fa0a00000000feffffff019b011d0d0000000024050403000000cc1b04030001011504575dc6ae7484c83c0dc97a4218f88e2cbe9b659c7552960d006e960d000000000000000000000000 ``` Copy the string that your command gave as response, from the CLI interface of your wallet. You will need it in the next step.note: The above command and its result are examples. ***DO NOT*** use data from it. Use the results from your own wallet!2. In the CLI interface adapt and issue this command`run signrawtransaction <string from step 1>` In our example, that would look like this: ```bash run signrawtransaction 0400008085202f8901150f82b53214fe0cb34b3bd57885f6f841384373b173ba6718f31ef6eb6259fa0a00000000feffffff019b011d0d0000000024050403000000cc1b04030001011504575dc6ae7484c83c0dc97a4218f88e2cbe9b659c7552960d006e960d000000000000000000000000 ``` and your command will show a result similar to this example: ```json { \"hex\": \"0400008085202f8901150f82b53214fe0cb34b3bd57885f6f841384373b173ba6718f31ef6eb6259fa0a000000694c67010101012102c9ca37dac14c819a99ce4a71533ab8d3d5e37643ede9c4da0981081a074f75df40531ea63fb3de6111949652111bbe524506999c97c06302715e85aa5c5813519b3eace4ac15bb3950600f968c0c555a935fd826f1a51e00bd2a7f12d035757fc5feffffff019b011d0d0000000024050403000000cc1b04030001011504575dc6ae7484c83c0dc97a4218f88e2cbe9b659c7552960d006e960d000000000000000000000000\", \"complete\": true } ```note: The above command and its result are examples. ***DO NOT*** use data from it. Use the results from your own wallet!",
            "./raw_txt_input/faq-allos26_sent_funds_to_b-address.md"
        ],
        [
            "How do I sign the raw transaction using the `signrawtransaction` command in Verus?",
            "To sign the raw transaction using the `signrawtransaction` command in Verus, you need to adapt the command to your specific situation. The command should look similar to this:\n```bash\nrun signrawtransaction <your_HEX_string>\n```\nReplace `<your_HEX_string>` with the HEX string you received from the `createrawtransaction` command. The command will show a result similar to the example, which includes the signed transaction in HEX format.",
            "1. adapt the above `createrawtransaction` command, making sure to subtract the 0.0001 VRSC free from the amount that is in the original TXID, similar to this example: ```bash run createrawtransaction '[{\"txid\": \"fa5962ebf61ef31867ba73b173433841f8f68578d53b4bb30cfe1432b5820f15\", \"vout\": 10}]' '{\"Oink@\": 2.20004763}' 890450 ``` In this example, the result is a long HEX-string: ```json 0400008085202f8901150f82b53214fe0cb34b3bd57885f6f841384373b173ba6718f31ef6eb6259fa0a00000000feffffff019b011d0d0000000024050403000000cc1b04030001011504575dc6ae7484c83c0dc97a4218f88e2cbe9b659c7552960d006e960d000000000000000000000000 ``` Copy the string that your command gave as response, from the CLI interface of your wallet. You will need it in the next step.note: The above command and its result are examples. ***DO NOT*** use data from it. Use the results from your own wallet!2. In the CLI interface adapt and issue this command`run signrawtransaction <string from step 1>` In our example, that would look like this: ```bash run signrawtransaction 0400008085202f8901150f82b53214fe0cb34b3bd57885f6f841384373b173ba6718f31ef6eb6259fa0a00000000feffffff019b011d0d0000000024050403000000cc1b04030001011504575dc6ae7484c83c0dc97a4218f88e2cbe9b659c7552960d006e960d000000000000000000000000 ``` and your command will show a result similar to this example: ```json { \"hex\": \"0400008085202f8901150f82b53214fe0cb34b3bd57885f6f841384373b173ba6718f31ef6eb6259fa0a000000694c67010101012102c9ca37dac14c819a99ce4a71533ab8d3d5e37643ede9c4da0981081a074f75df40531ea63fb3de6111949652111bbe524506999c97c06302715e85aa5c5813519b3eace4ac15bb3950600f968c0c555a935fd826f1a51e00bd2a7f12d035757fc5feffffff019b011d0d0000000024050403000000cc1b04030001011504575dc6ae7484c83c0dc97a4218f88e2cbe9b659c7552960d006e960d000000000000000000000000\", \"complete\": true } ```note: The above command and its result are examples. ***DO NOT*** use data from it. Use the results from your own wallet!",
            "./raw_txt_input/faq-allos26_sent_funds_to_b-address.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "3cbcc038-354d-4f93-b04d-1f911822c2de"
]