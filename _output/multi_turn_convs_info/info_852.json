[
    [
        [
            "What is the purpose of the `sourceoffunds` argument in the `setidentitytimelock` command?",
            "The `sourceoffunds` argument in the `setidentitytimelock` command is used to specify a transparent or private address to source all funds for fees, in order to preserve the privacy of the identity.",
            "Use \"unlockatblock\" to either unlock, by passing the current block, which will still require waiting for the specified unlock delay, or to set a future unlock height that immediately begins counting down. Unlike an unlock delay, which only starts counting down when the ID is unlocked, an \"unlockatblock\" time lock is absolute and will automatically unlock when the specified block passes.#### Arguments - either \"unlockatblock\" or \"setunlockdelay\" must be specified and not both ```json {  \"unlockatblock\"        (number, optional) unlock at an absolute block height, countdown starts when mined into a block  \"setunlockdelay\"        (number, optional) delay this many blocks after unlock request to unlock, can only be                            circumvented by revoke/recover } \"returntx\"            (bool,  optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned \"feeoffer\"            (bool,  optional) non-standard fee amount to pay for the transaction \"sourceoffunds\"         (string,  optional) transparent or private address to source all funds for fees to preserve privacy of the identity ``` #### Result:  Hex string of either the txid if returnhex is false or the hex serialized transaction if returntx is true.  If returntx is true, the transaction will not have been submitted and must be sent with \"sendrawtransaction\"  after any necessary signatures are applied in the case of multisig.Examples: ```bash > verus setidentitytimelock \"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx) > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setidentitytimelock\", \"params\": [\"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx)] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the `returntx` argument in the `setidentitytimelock` command, and what does it do?",
            "The `returntx` argument in the `setidentitytimelock` command is a boolean flag that defaults to `false`. If set to `true`, the command will return a hex-serialized transaction that has been signed by the wallet, but not yet submitted to the network. This transaction must then be sent using the `sendrawtransaction` command after any necessary signatures are applied.",
            "Use \"unlockatblock\" to either unlock, by passing the current block, which will still require waiting for the specified unlock delay, or to set a future unlock height that immediately begins counting down. Unlike an unlock delay, which only starts counting down when the ID is unlocked, an \"unlockatblock\" time lock is absolute and will automatically unlock when the specified block passes.#### Arguments - either \"unlockatblock\" or \"setunlockdelay\" must be specified and not both ```json {  \"unlockatblock\"        (number, optional) unlock at an absolute block height, countdown starts when mined into a block  \"setunlockdelay\"        (number, optional) delay this many blocks after unlock request to unlock, can only be                            circumvented by revoke/recover } \"returntx\"            (bool,  optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned \"feeoffer\"            (bool,  optional) non-standard fee amount to pay for the transaction \"sourceoffunds\"         (string,  optional) transparent or private address to source all funds for fees to preserve privacy of the identity ``` #### Result:  Hex string of either the txid if returnhex is false or the hex serialized transaction if returntx is true.  If returntx is true, the transaction will not have been submitted and must be sent with \"sendrawtransaction\"  after any necessary signatures are applied in the case of multisig.Examples: ```bash > verus setidentitytimelock \"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx) > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setidentitytimelock\", \"params\": [\"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx)] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How does `unlockatblock` differ from `setunlockdelay`?",
            "`unlockatblock` and `setunlockdelay` are two different ways to specify a time lock for an ID. `unlockatblock` sets an absolute block height at which the ID will be unlocked, whereas `setunlockdelay` sets a delay in blocks after the unlock request is made. The key difference is that `unlockatblock` starts counting down immediately, whereas `setunlockdelay` only starts counting down when the ID is unlocked.",
            "Use \"unlockatblock\" to either unlock, by passing the current block, which will still require waiting for the specified unlock delay, or to set a future unlock height that immediately begins counting down. Unlike an unlock delay, which only starts counting down when the ID is unlocked, an \"unlockatblock\" time lock is absolute and will automatically unlock when the specified block passes.#### Arguments - either \"unlockatblock\" or \"setunlockdelay\" must be specified and not both ```json {  \"unlockatblock\"        (number, optional) unlock at an absolute block height, countdown starts when mined into a block  \"setunlockdelay\"        (number, optional) delay this many blocks after unlock request to unlock, can only be                            circumvented by revoke/recover } \"returntx\"            (bool,  optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned \"feeoffer\"            (bool,  optional) non-standard fee amount to pay for the transaction \"sourceoffunds\"         (string,  optional) transparent or private address to source all funds for fees to preserve privacy of the identity ``` #### Result:  Hex string of either the txid if returnhex is false or the hex serialized transaction if returntx is true.  If returntx is true, the transaction will not have been submitted and must be sent with \"sendrawtransaction\"  after any necessary signatures are applied in the case of multisig.Examples: ```bash > verus setidentitytimelock \"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx) > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setidentitytimelock\", \"params\": [\"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx)] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `unlockatblock` argument in the `setidentitytimelock` command?",
            "The `unlockatblock` argument in the `setidentitytimelock` command is used to specify an absolute block height at which the ID will be automatically unlocked. This countdown starts when the block is mined, and the ID will be unlocked when the specified block is reached.",
            "Use \"unlockatblock\" to either unlock, by passing the current block, which will still require waiting for the specified unlock delay, or to set a future unlock height that immediately begins counting down. Unlike an unlock delay, which only starts counting down when the ID is unlocked, an \"unlockatblock\" time lock is absolute and will automatically unlock when the specified block passes.#### Arguments - either \"unlockatblock\" or \"setunlockdelay\" must be specified and not both ```json {  \"unlockatblock\"        (number, optional) unlock at an absolute block height, countdown starts when mined into a block  \"setunlockdelay\"        (number, optional) delay this many blocks after unlock request to unlock, can only be                            circumvented by revoke/recover } \"returntx\"            (bool,  optional) defaults to false and transaction is sent, if true, transaction is signed by this wallet and returned \"feeoffer\"            (bool,  optional) non-standard fee amount to pay for the transaction \"sourceoffunds\"         (string,  optional) transparent or private address to source all funds for fees to preserve privacy of the identity ``` #### Result:  Hex string of either the txid if returnhex is false or the hex serialized transaction if returntx is true.  If returntx is true, the transaction will not have been submitted and must be sent with \"sendrawtransaction\"  after any necessary signatures are applied in the case of multisig.Examples: ```bash > verus setidentitytimelock \"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx) > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setidentitytimelock\", \"params\": [\"id@\" '{\"unlockatblock\":absoluteblockheight || \"setunlockdelay\":numberofblocksdelayafterunlock}' (returntx)] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "e157635b-02fb-4a00-8b55-84e90198327d"
]