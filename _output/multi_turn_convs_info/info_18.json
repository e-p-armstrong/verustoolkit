[
    [
        [
            "What is the result of the `getexports` command in Verus?",
            "The result of the `getexports` command in Verus is a JSON array of objects, each containing information about an export transaction. The objects have the following properties:\n\n* `blockheight`: the block height of the transaction\n* `exportid`: the transaction ID as a hex string\n* `description`: an object containing metadata about the export, including the version, export currency ID, number of inputs, total amounts, and total fees\n* `transfers`: an array of objects, each describing a transfer within the export, with properties including version, currency ID, value, flags, preconvert, fees, destination currency ID, and destination address",
            "``` #### Result: ```json [  {   \"blockheight\": n,          (numeric) block height   \"exportid\": \"hash\",         (hexstring) transaction ID   \"description\": {    \"version\": n,           (int) version of this chain definition    \"exportcurrencyid\": \"xxxx\",    (text) i-address of the currency ID    \"numinputs\": n,          (numeric) Amount of inputs in this export    \"totalamounts\": {     \"xxxx\": xxx.xxxxxxxx,      (text) i-address of the currency ID, (numeric) the total value of the export                     of the currency     ....    },    \"totalfees\": {     \"xxxx\": xxx.xxxxxxxx,      (text) i-address of the currency ID, (numeric) the total fees for the export                     of the currency     ....    }   },   \"transfers\": [    {     \"version\": n,          (int) version of this chain definition     \"currencyid\": \"xxxx\",      (text) i-address of the currency ID     \"value\": n,           (numeric) the value this transaction     \"flags\": n,           (hex) flags for the currency     \"preconvert\": true|false,    (boolean) Shows whether the transaction is a preconversion     \"fees\": xxx.xxxxxxxx,      (numeric) the fees for this transaction     \"destinationcurrencyid\": \"xxxx\", (text) i-address of the currency ID     \"destination\": \"xxxx\"      (text) address of the transaction    },    ....   ]  },  {},  ... ] ``` Examples: ```bash > verus getexports \"chainname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getexports\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getimports \"chainname\" (startheight) (endheight)` Returns all imports into a specific currency, optionally that were imported between a specific block range. #### Arguments: ``` 1. \"chainname\"           (string, optional) name of the chain to look for. no parameter returns current chain in daemon. 2. \"heightstart\"          (int, optional)   default=0 only return exports at or above this height 3. \"heightend\"           (int, optional)   default=maxheight only return exports below or at this height",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How can I use the `getexports` command in Verus to retrieve exports for a specific chain?",
            "To use the `getexports` command in Verus to retrieve exports for a specific chain, you can run the command with the chain name as an argument, like this:\n\n```\nverus getexports \"chainname\"\n```\n\nAlternatively, you can use the JSON-RPC API to make the same request:\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getexports\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "``` #### Result: ```json [  {   \"blockheight\": n,          (numeric) block height   \"exportid\": \"hash\",         (hexstring) transaction ID   \"description\": {    \"version\": n,           (int) version of this chain definition    \"exportcurrencyid\": \"xxxx\",    (text) i-address of the currency ID    \"numinputs\": n,          (numeric) Amount of inputs in this export    \"totalamounts\": {     \"xxxx\": xxx.xxxxxxxx,      (text) i-address of the currency ID, (numeric) the total value of the export                     of the currency     ....    },    \"totalfees\": {     \"xxxx\": xxx.xxxxxxxx,      (text) i-address of the currency ID, (numeric) the total fees for the export                     of the currency     ....    }   },   \"transfers\": [    {     \"version\": n,          (int) version of this chain definition     \"currencyid\": \"xxxx\",      (text) i-address of the currency ID     \"value\": n,           (numeric) the value this transaction     \"flags\": n,           (hex) flags for the currency     \"preconvert\": true|false,    (boolean) Shows whether the transaction is a preconversion     \"fees\": xxx.xxxxxxxx,      (numeric) the fees for this transaction     \"destinationcurrencyid\": \"xxxx\", (text) i-address of the currency ID     \"destination\": \"xxxx\"      (text) address of the transaction    },    ....   ]  },  {},  ... ] ``` Examples: ```bash > verus getexports \"chainname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getexports\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getimports \"chainname\" (startheight) (endheight)` Returns all imports into a specific currency, optionally that were imported between a specific block range. #### Arguments: ``` 1. \"chainname\"           (string, optional) name of the chain to look for. no parameter returns current chain in daemon. 2. \"heightstart\"          (int, optional)   default=0 only return exports at or above this height 3. \"heightend\"           (int, optional)   default=maxheight only return exports below or at this height",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How can I use the `getimports` command in Verus to retrieve imports for a specific chain and block range?",
            "To use the `getimports` command in Verus to retrieve imports for a specific chain and block range, you can run the command with the chain name, start height, and end height as arguments, like this:\n\n```\nverus getimports \"chainname\" 100 200\n```\n\nThis would retrieve all imports into the specified chain between block heights 100 and 200. If you omit the start and end heights, the command will default to returning all imports into the chain.",
            "``` #### Result: ```json [  {   \"blockheight\": n,          (numeric) block height   \"exportid\": \"hash\",         (hexstring) transaction ID   \"description\": {    \"version\": n,           (int) version of this chain definition    \"exportcurrencyid\": \"xxxx\",    (text) i-address of the currency ID    \"numinputs\": n,          (numeric) Amount of inputs in this export    \"totalamounts\": {     \"xxxx\": xxx.xxxxxxxx,      (text) i-address of the currency ID, (numeric) the total value of the export                     of the currency     ....    },    \"totalfees\": {     \"xxxx\": xxx.xxxxxxxx,      (text) i-address of the currency ID, (numeric) the total fees for the export                     of the currency     ....    }   },   \"transfers\": [    {     \"version\": n,          (int) version of this chain definition     \"currencyid\": \"xxxx\",      (text) i-address of the currency ID     \"value\": n,           (numeric) the value this transaction     \"flags\": n,           (hex) flags for the currency     \"preconvert\": true|false,    (boolean) Shows whether the transaction is a preconversion     \"fees\": xxx.xxxxxxxx,      (numeric) the fees for this transaction     \"destinationcurrencyid\": \"xxxx\", (text) i-address of the currency ID     \"destination\": \"xxxx\"      (text) address of the transaction    },    ....   ]  },  {},  ... ] ``` Examples: ```bash > verus getexports \"chainname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getexports\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getimports \"chainname\" (startheight) (endheight)` Returns all imports into a specific currency, optionally that were imported between a specific block range. #### Arguments: ``` 1. \"chainname\"           (string, optional) name of the chain to look for. no parameter returns current chain in daemon. 2. \"heightstart\"          (int, optional)   default=0 only return exports at or above this height 3. \"heightend\"           (int, optional)   default=maxheight only return exports below or at this height",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "4f420c14-7ff1-4a2a-b251-916145cca92a"
]