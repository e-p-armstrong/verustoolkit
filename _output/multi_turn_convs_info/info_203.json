[
    [
        [
            "How can I list account balances using Verus, and what are the different options for doing so?",
            "You can list account balances using the `listaccounts` command. The basic syntax is `verus listaccounts`. This command will list account balances with at least 1 confirmation. \n\nYou can also specify a minimum number of confirmations to include in the list. For example, `verus listaccounts 0` will list account balances including zero confirmation transactions, while `verus listaccounts 6` will list account balances for 6 or more confirmations.\n\nAdditionally, you can use the JSON RPC call to list account balances. The syntax for this is `curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaccounts\", \"params\": [6] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/`",
            "List account balances where there at least 1 confirmation ```bash > verus listaccounts ``` List account balances including zero confirmation transactions ```bash > verus listaccounts 0 ``` List account balances for 6 or more confirmations ```bash > verus listaccounts 6 ``` As json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaccounts\", \"params\": [6] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `listaddressgroupings` Lists groups of addresses which have had their common ownership made public by common use as inputs or as the resulting change in past transactions#### Result: ```json [  [   [    \"VRSC address\",   (string) The VRSC address    amount,         (numeric) The amount in VRSC    \"account\"       (string, optional) The account (DEPRECATED)   ]   ,...  ]  ,... ] ```Examples: ```bash > verus listaddressgroupings > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `listlockunspent` Returns list of temporarily unspendable outputs. See the lockunspent call to lock and unlock transactions for spending.Result: ```json [  {   \"txid\" : \"transactionid\",   (string) The transaction id locked   \"vout\" : n           (numeric) The vout value  }  ,... ] ``` Examples:List the unspent transactions ```bash > verus listunspent ``` Lock an unspent transaction ```bash > verus lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\" ``` List the locked transactions ```bash > verus listlockunspent ``` Unlock the transaction again ```bash > verus lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\" ``` As a json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `listreceivedbyaccount ( minconf includeempty includeWatchonly)` DEPRECATED. List balances by account.#### Arguments: 1. minconf   (numeric, optional, default=1) The minimum number of confirmations before payments are included. 2. includeempty (boolean, optional, default=false) Whether to include accounts that haven't received any payments. 3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the `listaddressgroupings` command used for, and how do I use it?",
            "The `listaddressgroupings` command is used to list groups of addresses which have had their common ownership made public by common use as inputs or as the resulting change in past transactions.\n\nYou can use this command by running `verus listaddressgroupings`. You can also use the JSON RPC call to achieve the same result, with the syntax `curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/`",
            "List account balances where there at least 1 confirmation ```bash > verus listaccounts ``` List account balances including zero confirmation transactions ```bash > verus listaccounts 0 ``` List account balances for 6 or more confirmations ```bash > verus listaccounts 6 ``` As json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaccounts\", \"params\": [6] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `listaddressgroupings` Lists groups of addresses which have had their common ownership made public by common use as inputs or as the resulting change in past transactions#### Result: ```json [  [   [    \"VRSC address\",   (string) The VRSC address    amount,         (numeric) The amount in VRSC    \"account\"       (string, optional) The account (DEPRECATED)   ]   ,...  ]  ,... ] ```Examples: ```bash > verus listaddressgroupings > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `listlockunspent` Returns list of temporarily unspendable outputs. See the lockunspent call to lock and unlock transactions for spending.Result: ```json [  {   \"txid\" : \"transactionid\",   (string) The transaction id locked   \"vout\" : n           (numeric) The vout value  }  ,... ] ``` Examples:List the unspent transactions ```bash > verus listunspent ``` Lock an unspent transaction ```bash > verus lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\" ``` List the locked transactions ```bash > verus listlockunspent ``` Unlock the transaction again ```bash > verus lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\" ``` As a json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `listreceivedbyaccount ( minconf includeempty includeWatchonly)` DEPRECATED. List balances by account.#### Arguments: 1. minconf   (numeric, optional, default=1) The minimum number of confirmations before payments are included. 2. includeempty (boolean, optional, default=false) Whether to include accounts that haven't received any payments. 3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the `listlockunspent` command used for, and how do I use it?",
            "The `listlockunspent` command is used to return a list of temporarily unspendable outputs. You can use this command by running `verus listlockunspent`. \n\nAdditionally, you can use the `lockunspent` command to lock and unlock transactions for spending. The syntax for this is `verus lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"` to lock a transaction, and `verus lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"` to unlock a transaction.\n\nYou can also use the JSON RPC call to list the locked transactions, with the syntax `curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/`",
            "List account balances where there at least 1 confirmation ```bash > verus listaccounts ``` List account balances including zero confirmation transactions ```bash > verus listaccounts 0 ``` List account balances for 6 or more confirmations ```bash > verus listaccounts 6 ``` As json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaccounts\", \"params\": [6] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `listaddressgroupings` Lists groups of addresses which have had their common ownership made public by common use as inputs or as the resulting change in past transactions#### Result: ```json [  [   [    \"VRSC address\",   (string) The VRSC address    amount,         (numeric) The amount in VRSC    \"account\"       (string, optional) The account (DEPRECATED)   ]   ,...  ]  ,... ] ```Examples: ```bash > verus listaddressgroupings > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `listlockunspent` Returns list of temporarily unspendable outputs. See the lockunspent call to lock and unlock transactions for spending.Result: ```json [  {   \"txid\" : \"transactionid\",   (string) The transaction id locked   \"vout\" : n           (numeric) The vout value  }  ,... ] ``` Examples:List the unspent transactions ```bash > verus listunspent ``` Lock an unspent transaction ```bash > verus lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\" ``` List the locked transactions ```bash > verus listlockunspent ``` Unlock the transaction again ```bash > verus lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\" ``` As a json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `listreceivedbyaccount ( minconf includeempty includeWatchonly)` DEPRECATED. List balances by account.#### Arguments: 1. minconf   (numeric, optional, default=1) The minimum number of confirmations before payments are included. 2. includeempty (boolean, optional, default=false) Whether to include accounts that haven't received any payments. 3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the `listreceivedbyaccount` command used for, and how do I use it?",
            "The `listreceivedbyaccount` command is used to list balances by account. However, this command is deprecated and should not be used. Instead, use the `listaccounts` or `listaddressgroupings` commands to achieve similar results.",
            "List account balances where there at least 1 confirmation ```bash > verus listaccounts ``` List account balances including zero confirmation transactions ```bash > verus listaccounts 0 ``` List account balances for 6 or more confirmations ```bash > verus listaccounts 6 ``` As json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaccounts\", \"params\": [6] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `listaddressgroupings` Lists groups of addresses which have had their common ownership made public by common use as inputs or as the resulting change in past transactions#### Result: ```json [  [   [    \"VRSC address\",   (string) The VRSC address    amount,         (numeric) The amount in VRSC    \"account\"       (string, optional) The account (DEPRECATED)   ]   ,...  ]  ,... ] ```Examples: ```bash > verus listaddressgroupings > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listaddressgroupings\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `listlockunspent` Returns list of temporarily unspendable outputs. See the lockunspent call to lock and unlock transactions for spending.Result: ```json [  {   \"txid\" : \"transactionid\",   (string) The transaction id locked   \"vout\" : n           (numeric) The vout value  }  ,... ] ``` Examples:List the unspent transactions ```bash > verus listunspent ``` Lock an unspent transaction ```bash > verus lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\" ``` List the locked transactions ```bash > verus listlockunspent ``` Unlock the transaction again ```bash > verus lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\" ``` As a json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listlockunspent\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `listreceivedbyaccount ( minconf includeempty includeWatchonly)` DEPRECATED. List balances by account.#### Arguments: 1. minconf   (numeric, optional, default=1) The minimum number of confirmations before payments are included. 2. includeempty (boolean, optional, default=false) Whether to include accounts that haven't received any payments. 3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "bcb3285d-c628-4c02-bdc6-1176ff926da9"
]