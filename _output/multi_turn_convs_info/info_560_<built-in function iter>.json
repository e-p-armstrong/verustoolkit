[
    [
        [
            "What is the default `hashtype` used in the `verifysignature` command if not specified?",
            "The default `hashtype` used in the `verifysignature` command if not specified is `sha256`.",
            "### `Verifysignature 'json'` Checks to see if the signature is valid and returns an error for invalid #### Arguments ```json {  \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to verify against the signature                                (t-address checks on simple signature w/hash and prefix, nothing else)  \"prefixstring\":\"extra string that is hashed during signature and must be supplied for verification\",  \"filename\" | \"message\" | \"messagehex\" | \"messagebase64\" | \"datahash\" (string, required) Data or hash of data signed  \"vdxfkeys\":[\"vdxfkey\", ...],                 (array, optional) Array of vdxfkeys or ID i-addresses  \"vdxfkeynames\":[\"vdxfkeyname\", ...],             (array, optional) Array of objects for getvdxfid API, or friendly name ID -- no i-addresses  \"boundhashes\":[\"hexhash\", ...],               (array, optional) Array of bound hash values  \"hashtype\"                          (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256  \"signature\"                         (string, optional) The current signature of the message encoded in base 64  \"checklatest\"                        (bool, optional)  If true, checks signature validity based on latest identity. defaults to false,                                which determines validity of signing height stored in signature. } ``` #### Results: ```json {  \"hash\":\"hexhash\"     (string) The hash of the message (SHA256, NOT SHA256D)  \"signature\":\"base64sig\" (string) The aggregate signature of the message encoded in base 64 if all or partial signing successful } ``` #### Examples: ```bash > verus verifysignature '{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifysignature\", \"params\": [{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}]}' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What does the `checklatest` argument do in the `verifysignature` command?",
            "The `checklatest` argument checks signature validity based on the latest identity if set to `true`. If set to `false` (default), it determines validity of signing height stored in signature.",
            "### `Verifysignature 'json'` Checks to see if the signature is valid and returns an error for invalid #### Arguments ```json {  \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to verify against the signature                                (t-address checks on simple signature w/hash and prefix, nothing else)  \"prefixstring\":\"extra string that is hashed during signature and must be supplied for verification\",  \"filename\" | \"message\" | \"messagehex\" | \"messagebase64\" | \"datahash\" (string, required) Data or hash of data signed  \"vdxfkeys\":[\"vdxfkey\", ...],                 (array, optional) Array of vdxfkeys or ID i-addresses  \"vdxfkeynames\":[\"vdxfkeyname\", ...],             (array, optional) Array of objects for getvdxfid API, or friendly name ID -- no i-addresses  \"boundhashes\":[\"hexhash\", ...],               (array, optional) Array of bound hash values  \"hashtype\"                          (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256  \"signature\"                         (string, optional) The current signature of the message encoded in base 64  \"checklatest\"                        (bool, optional)  If true, checks signature validity based on latest identity. defaults to false,                                which determines validity of signing height stored in signature. } ``` #### Results: ```json {  \"hash\":\"hexhash\"     (string) The hash of the message (SHA256, NOT SHA256D)  \"signature\":\"base64sig\" (string) The aggregate signature of the message encoded in base 64 if all or partial signing successful } ``` #### Examples: ```bash > verus verifysignature '{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifysignature\", \"params\": [{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}]}' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `verifysignature` command in Verus?",
            "The `verifysignature` command in Verus is used to check if a signature is valid and returns an error if the signature is invalid. It verifies a signature against a given address or identity.",
            "### `Verifysignature 'json'` Checks to see if the signature is valid and returns an error for invalid #### Arguments ```json {  \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to verify against the signature                                (t-address checks on simple signature w/hash and prefix, nothing else)  \"prefixstring\":\"extra string that is hashed during signature and must be supplied for verification\",  \"filename\" | \"message\" | \"messagehex\" | \"messagebase64\" | \"datahash\" (string, required) Data or hash of data signed  \"vdxfkeys\":[\"vdxfkey\", ...],                 (array, optional) Array of vdxfkeys or ID i-addresses  \"vdxfkeynames\":[\"vdxfkeyname\", ...],             (array, optional) Array of objects for getvdxfid API, or friendly name ID -- no i-addresses  \"boundhashes\":[\"hexhash\", ...],               (array, optional) Array of bound hash values  \"hashtype\"                          (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256  \"signature\"                         (string, optional) The current signature of the message encoded in base 64  \"checklatest\"                        (bool, optional)  If true, checks signature validity based on latest identity. defaults to false,                                which determines validity of signing height stored in signature. } ``` #### Results: ```json {  \"hash\":\"hexhash\"     (string) The hash of the message (SHA256, NOT SHA256D)  \"signature\":\"base64sig\" (string) The aggregate signature of the message encoded in base 64 if all or partial signing successful } ``` #### Examples: ```bash > verus verifysignature '{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifysignature\", \"params\": [{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}]}' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What are the required arguments for the `verifysignature` command?",
            "The required arguments for the `verifysignature` command are:\n\n* `address`: The transparent address or identity to verify against the signature.\n* `filename`, `message`, `messagehex`, `messagebase64`, or `datahash`: The data or hash of data signed.",
            "### `Verifysignature 'json'` Checks to see if the signature is valid and returns an error for invalid #### Arguments ```json {  \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to verify against the signature                                (t-address checks on simple signature w/hash and prefix, nothing else)  \"prefixstring\":\"extra string that is hashed during signature and must be supplied for verification\",  \"filename\" | \"message\" | \"messagehex\" | \"messagebase64\" | \"datahash\" (string, required) Data or hash of data signed  \"vdxfkeys\":[\"vdxfkey\", ...],                 (array, optional) Array of vdxfkeys or ID i-addresses  \"vdxfkeynames\":[\"vdxfkeyname\", ...],             (array, optional) Array of objects for getvdxfid API, or friendly name ID -- no i-addresses  \"boundhashes\":[\"hexhash\", ...],               (array, optional) Array of bound hash values  \"hashtype\"                          (string, optional) one of: \"sha256\", \"sha256D\", \"blake2b\", \"keccak256\", defaults to sha256  \"signature\"                         (string, optional) The current signature of the message encoded in base 64  \"checklatest\"                        (bool, optional)  If true, checks signature validity based on latest identity. defaults to false,                                which determines validity of signing height stored in signature. } ``` #### Results: ```json {  \"hash\":\"hexhash\"     (string) The hash of the message (SHA256, NOT SHA256D)  \"signature\":\"base64sig\" (string) The aggregate signature of the message encoded in base 64 if all or partial signing successful } ``` #### Examples: ```bash > verus verifysignature '{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifysignature\", \"params\": [{\"identity\":\"Verus Coin Foundation.vrsc@\", \"message\":\"hello world\", \"signature\":\"base64sig\"}]}' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "83b135c6-baf8-4fb0-ba1d-9e7a53d8b19b"
]