[
    [
        [
            "What is the default behavior of the `getrawtransaction` command, and how can it be changed?",
            "By default, the `getrawtransaction` command only works sometimes, specifically when the transaction is in the mempool or there is an unspent output in the UTXO for this transaction. To make it always work, you need to maintain a transaction index, which can be done by using the `-txindex` command line option.",
            "### `getrawtransaction \"txid\" ( verbose )` NOTE: By default this function only works sometimes. This is when the tx is in the mempool or there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option.Return the raw transaction data.If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'. If verbose is non-zero, returns an Object with information about 'txid'.#### Arguments: 1. \"txid\"   (string, required) The transaction id 2. verbose    (numeric, optional, default=0) If 0, return a string, other return a json objectResult (if verbose is not set or set to 0): \"data\"   (string) The serialized, hex-encoded data for 'txid'#### Result (if verbose > 0): ```json {  \"hex\" : \"data\",    (string) The serialized, hex-encoded data for 'txid'  \"txid\" : \"id\",    (string) The transaction id (same as provided)  \"version\" : n,     (numeric) The version  \"locktime\" : ttt,    (numeric) The lock time  \"expiryheight\" : ttt,  (numeric, optional) The block height after which the transaction expires  \"vin\" : [        (array of json objects)   {    \"txid\": \"id\",  (string) The transaction id    \"vout\": n,     (numeric)    \"scriptSig\": {   (json object) The script     \"asm\": \"asm\", (string) asm     \"hex\": \"hex\"  (string) hex    },    \"sequence\": n   (numeric) The script sequence number   }   ,...  ],  \"vout\" : [       (array of json objects)   {    \"value\" : x.xxx,      (numeric) The value in VRSC    \"n\" : n,          (numeric) index    \"scriptPubKey\" : {     (json object)     \"asm\" : \"asm\",     (string) the asm     \"hex\" : \"hex\",     (string) the hex     \"reqSigs\" : n,      (numeric) The required sigs     \"type\" : \"pubkeyhash\", (string) The type, eg 'pubkeyhash'     \"addresses\" : [      (json array of string)      \"komodoaddress\"     (string) Komodo address      ,...     ]    }   }   ,...  ],  \"vjoinsplit\" : [    (array of json objects, only for version >= 2)   {    \"vpub_old\" : x.xxx,     (numeric) public input value in KMD    \"vpub_new\" : x.xxx,     (numeric) public output value in KMD    \"anchor\" : \"hex\",     (string) the anchor    \"nullifiers\" : [      (json array of string)     \"hex\"           (string) input note nullifier     ,...    ],    \"commitments\" : [      (json array of string)     \"hex\"           (string) output note commitment     ,... ",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What information is included in the JSON object returned by the `getrawtransaction` command when `verbose` is non-zero?",
            "When `verbose` is non-zero, the `getrawtransaction` command returns a JSON object with the following information:\n- `hex`: The serialized, hex-encoded data for the transaction.\n- `txid`: The transaction id (same as provided).\n- `version`: The version of the transaction.\n- `locktime`: The lock time of the transaction.\n- `expiryheight`: The block height after which the transaction expires (optional).\n- `vin`: An array of JSON objects containing information about the transaction inputs.\n- `vout`: An array of JSON objects containing information about the transaction outputs.\n- `vjoinsplit`: An array of JSON objects containing information about the transaction's join/split data (only for version >= 2).",
            "### `getrawtransaction \"txid\" ( verbose )` NOTE: By default this function only works sometimes. This is when the tx is in the mempool or there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option.Return the raw transaction data.If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'. If verbose is non-zero, returns an Object with information about 'txid'.#### Arguments: 1. \"txid\"   (string, required) The transaction id 2. verbose    (numeric, optional, default=0) If 0, return a string, other return a json objectResult (if verbose is not set or set to 0): \"data\"   (string) The serialized, hex-encoded data for 'txid'#### Result (if verbose > 0): ```json {  \"hex\" : \"data\",    (string) The serialized, hex-encoded data for 'txid'  \"txid\" : \"id\",    (string) The transaction id (same as provided)  \"version\" : n,     (numeric) The version  \"locktime\" : ttt,    (numeric) The lock time  \"expiryheight\" : ttt,  (numeric, optional) The block height after which the transaction expires  \"vin\" : [        (array of json objects)   {    \"txid\": \"id\",  (string) The transaction id    \"vout\": n,     (numeric)    \"scriptSig\": {   (json object) The script     \"asm\": \"asm\", (string) asm     \"hex\": \"hex\"  (string) hex    },    \"sequence\": n   (numeric) The script sequence number   }   ,...  ],  \"vout\" : [       (array of json objects)   {    \"value\" : x.xxx,      (numeric) The value in VRSC    \"n\" : n,          (numeric) index    \"scriptPubKey\" : {     (json object)     \"asm\" : \"asm\",     (string) the asm     \"hex\" : \"hex\",     (string) the hex     \"reqSigs\" : n,      (numeric) The required sigs     \"type\" : \"pubkeyhash\", (string) The type, eg 'pubkeyhash'     \"addresses\" : [      (json array of string)      \"komodoaddress\"     (string) Komodo address      ,...     ]    }   }   ,...  ],  \"vjoinsplit\" : [    (array of json objects, only for version >= 2)   {    \"vpub_old\" : x.xxx,     (numeric) public input value in KMD    \"vpub_new\" : x.xxx,     (numeric) public output value in KMD    \"anchor\" : \"hex\",     (string) the anchor    \"nullifiers\" : [      (json array of string)     \"hex\"           (string) input note nullifier     ,...    ],    \"commitments\" : [      (json array of string)     \"hex\"           (string) output note commitment     ,... ",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `getrawtransaction` command in Verus?",
            "The `getrawtransaction` command returns the raw transaction data for a given transaction id (txid). It can return the data in either a serialized, hex-encoded string or a JSON object with information about the transaction, depending on the verbose option.",
            "### `getrawtransaction \"txid\" ( verbose )` NOTE: By default this function only works sometimes. This is when the tx is in the mempool or there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option.Return the raw transaction data.If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'. If verbose is non-zero, returns an Object with information about 'txid'.#### Arguments: 1. \"txid\"   (string, required) The transaction id 2. verbose    (numeric, optional, default=0) If 0, return a string, other return a json objectResult (if verbose is not set or set to 0): \"data\"   (string) The serialized, hex-encoded data for 'txid'#### Result (if verbose > 0): ```json {  \"hex\" : \"data\",    (string) The serialized, hex-encoded data for 'txid'  \"txid\" : \"id\",    (string) The transaction id (same as provided)  \"version\" : n,     (numeric) The version  \"locktime\" : ttt,    (numeric) The lock time  \"expiryheight\" : ttt,  (numeric, optional) The block height after which the transaction expires  \"vin\" : [        (array of json objects)   {    \"txid\": \"id\",  (string) The transaction id    \"vout\": n,     (numeric)    \"scriptSig\": {   (json object) The script     \"asm\": \"asm\", (string) asm     \"hex\": \"hex\"  (string) hex    },    \"sequence\": n   (numeric) The script sequence number   }   ,...  ],  \"vout\" : [       (array of json objects)   {    \"value\" : x.xxx,      (numeric) The value in VRSC    \"n\" : n,          (numeric) index    \"scriptPubKey\" : {     (json object)     \"asm\" : \"asm\",     (string) the asm     \"hex\" : \"hex\",     (string) the hex     \"reqSigs\" : n,      (numeric) The required sigs     \"type\" : \"pubkeyhash\", (string) The type, eg 'pubkeyhash'     \"addresses\" : [      (json array of string)      \"komodoaddress\"     (string) Komodo address      ,...     ]    }   }   ,...  ],  \"vjoinsplit\" : [    (array of json objects, only for version >= 2)   {    \"vpub_old\" : x.xxx,     (numeric) public input value in KMD    \"vpub_new\" : x.xxx,     (numeric) public output value in KMD    \"anchor\" : \"hex\",     (string) the anchor    \"nullifiers\" : [      (json array of string)     \"hex\"           (string) input note nullifier     ,...    ],    \"commitments\" : [      (json array of string)     \"hex\"           (string) output note commitment     ,... ",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What are the required and optional arguments for the `getrawtransaction` command?",
            "The `getrawtransaction` command takes two arguments: \n1. `\"txid\"` (string, required): The transaction id.\n2. `verbose` (numeric, optional, default=0): If 0, returns a string; otherwise, returns a JSON object.",
            "### `getrawtransaction \"txid\" ( verbose )` NOTE: By default this function only works sometimes. This is when the tx is in the mempool or there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option.Return the raw transaction data.If verbose=0, returns a string that is serialized, hex-encoded data for 'txid'. If verbose is non-zero, returns an Object with information about 'txid'.#### Arguments: 1. \"txid\"   (string, required) The transaction id 2. verbose    (numeric, optional, default=0) If 0, return a string, other return a json objectResult (if verbose is not set or set to 0): \"data\"   (string) The serialized, hex-encoded data for 'txid'#### Result (if verbose > 0): ```json {  \"hex\" : \"data\",    (string) The serialized, hex-encoded data for 'txid'  \"txid\" : \"id\",    (string) The transaction id (same as provided)  \"version\" : n,     (numeric) The version  \"locktime\" : ttt,    (numeric) The lock time  \"expiryheight\" : ttt,  (numeric, optional) The block height after which the transaction expires  \"vin\" : [        (array of json objects)   {    \"txid\": \"id\",  (string) The transaction id    \"vout\": n,     (numeric)    \"scriptSig\": {   (json object) The script     \"asm\": \"asm\", (string) asm     \"hex\": \"hex\"  (string) hex    },    \"sequence\": n   (numeric) The script sequence number   }   ,...  ],  \"vout\" : [       (array of json objects)   {    \"value\" : x.xxx,      (numeric) The value in VRSC    \"n\" : n,          (numeric) index    \"scriptPubKey\" : {     (json object)     \"asm\" : \"asm\",     (string) the asm     \"hex\" : \"hex\",     (string) the hex     \"reqSigs\" : n,      (numeric) The required sigs     \"type\" : \"pubkeyhash\", (string) The type, eg 'pubkeyhash'     \"addresses\" : [      (json array of string)      \"komodoaddress\"     (string) Komodo address      ,...     ]    }   }   ,...  ],  \"vjoinsplit\" : [    (array of json objects, only for version >= 2)   {    \"vpub_old\" : x.xxx,     (numeric) public input value in KMD    \"vpub_new\" : x.xxx,     (numeric) public output value in KMD    \"anchor\" : \"hex\",     (string) the anchor    \"nullifiers\" : [      (json array of string)     \"hex\"           (string) input note nullifier     ,...    ],    \"commitments\" : [      (json array of string)     \"hex\"           (string) output note commitment     ,... ",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "e1974740-d526-4bf0-b7ee-d388ed8d7dc9"
]