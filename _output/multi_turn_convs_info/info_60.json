[
    [
        [
            "What is the purpose of the `getsaplingtree` command in Verus?",
            "The `getsaplingtree` command is used to retrieve the entries for a light wallet Sapling tree state. It can be used to get the Sapling tree state at a specific height or inclusive range with an optional step.",
            "### `getsaplingtree \"n | m,n | m,n,o\"` Returns the entries for a light wallet Sapling tree state.#### Arguments: 1. \"n\" or \"m,n\" or \"m,n,o\"     (int or string, optional) height or inclusive range with optional step at which to get the Sapling tree state. If not specified, the latest currency state and height is returned#### Result: ```json  [    {      \"network\": \"VRSC\",      \"height\": n,      \"hash\": \"hex\"      \"time\": n,      \"tree\": \"hex\"    },  ] ``` Examples: ```bash > verus getsaplingtree name > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getsaplingtree\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `listcurrencies ({query object}) startblock endblock` Returns a complete definition for any given chain if it is registered on the blockchain. If the chain requested is NULL, chain definition of the current chain is returned.#### Arguments: ```json {                      (json, optional) specify valid query conditions  \"launchstate\" :              (\"prelaunch\" | \"launched\" | \"refund\" | \"complete\") (optional) return only currencies in that state  \"systemtype\" :              (\"local\" | \"imported\" | \"gateway\" | \"pbaas\")  \"fromsystem\" :              (\"systemnameeorid\") default is the local chain, but if currency is from another system, specify here  \"converter\": [\"currency1\", (\"currency2\")] (array, optional) default empty, only return fractional currency converters of one or more currencies } ``` #### Result: ```json [  {   \"version\" : n,             (int) version of this chain definition   \"name\" : \"string\",           (string) name or symbol of the chain, same as passed   \"fullyqualifiedname\" : \"string\",    (string) name or symbol of the chain with all parent namespaces, separated by \".\"   \"currencyid\" : \"i-address\",      (string) string that represents the currency ID, same as the ID behind the currency   \"currencyidhex\" : \"hex\",        (string) hex representation of currency ID, getcurrency API supports \"hex:currencyidhex\"   \"parent\" : \"i-address\",        (string) parent blockchain ID   \"systemid\" : \"i-address\",       (string) system on which this currency is considered to run   \"launchsystemid\" : \"i-address\",    (string) system from which this currency was launched   \"notarizationprotocol\" : n       (int) protocol number that determines variations in cross-chain or bridged notarizations   \"proofprotocol\" : n          (int) protocol number that determines variations in",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What are the arguments for the `getsaplingtree` command?",
            "The `getsaplingtree` command takes one optional argument, which is a string or integer specifying the height or inclusive range with an optional step at which to get the Sapling tree state. If not specified, the latest currency state and height is returned.",
            "### `getsaplingtree \"n | m,n | m,n,o\"` Returns the entries for a light wallet Sapling tree state.#### Arguments: 1. \"n\" or \"m,n\" or \"m,n,o\"     (int or string, optional) height or inclusive range with optional step at which to get the Sapling tree state. If not specified, the latest currency state and height is returned#### Result: ```json  [    {      \"network\": \"VRSC\",      \"height\": n,      \"hash\": \"hex\"      \"time\": n,      \"tree\": \"hex\"    },  ] ``` Examples: ```bash > verus getsaplingtree name > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getsaplingtree\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `listcurrencies ({query object}) startblock endblock` Returns a complete definition for any given chain if it is registered on the blockchain. If the chain requested is NULL, chain definition of the current chain is returned.#### Arguments: ```json {                      (json, optional) specify valid query conditions  \"launchstate\" :              (\"prelaunch\" | \"launched\" | \"refund\" | \"complete\") (optional) return only currencies in that state  \"systemtype\" :              (\"local\" | \"imported\" | \"gateway\" | \"pbaas\")  \"fromsystem\" :              (\"systemnameeorid\") default is the local chain, but if currency is from another system, specify here  \"converter\": [\"currency1\", (\"currency2\")] (array, optional) default empty, only return fractional currency converters of one or more currencies } ``` #### Result: ```json [  {   \"version\" : n,             (int) version of this chain definition   \"name\" : \"string\",           (string) name or symbol of the chain, same as passed   \"fullyqualifiedname\" : \"string\",    (string) name or symbol of the chain with all parent namespaces, separated by \".\"   \"currencyid\" : \"i-address\",      (string) string that represents the currency ID, same as the ID behind the currency   \"currencyidhex\" : \"hex\",        (string) hex representation of currency ID, getcurrency API supports \"hex:currencyidhex\"   \"parent\" : \"i-address\",        (string) parent blockchain ID   \"systemid\" : \"i-address\",       (string) system on which this currency is considered to run   \"launchsystemid\" : \"i-address\",    (string) system from which this currency was launched   \"notarizationprotocol\" : n       (int) protocol number that determines variations in cross-chain or bridged notarizations   \"proofprotocol\" : n          (int) protocol number that determines variations in",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the format of the result returned by the `getsaplingtree` command?",
            "The result returned by the `getsaplingtree` command is a JSON array containing objects with the following properties:\n- \"network\": the network name (e.g. \"VRSC\")\n- \"height\": the height of the Sapling tree state\n- \"hash\": the hash of the Sapling tree state in hexadecimal format\n- \"time\": the time of the Sapling tree state\n- \"tree\": the Sapling tree state in hexadecimal format",
            "### `getsaplingtree \"n | m,n | m,n,o\"` Returns the entries for a light wallet Sapling tree state.#### Arguments: 1. \"n\" or \"m,n\" or \"m,n,o\"     (int or string, optional) height or inclusive range with optional step at which to get the Sapling tree state. If not specified, the latest currency state and height is returned#### Result: ```json  [    {      \"network\": \"VRSC\",      \"height\": n,      \"hash\": \"hex\"      \"time\": n,      \"tree\": \"hex\"    },  ] ``` Examples: ```bash > verus getsaplingtree name > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getsaplingtree\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `listcurrencies ({query object}) startblock endblock` Returns a complete definition for any given chain if it is registered on the blockchain. If the chain requested is NULL, chain definition of the current chain is returned.#### Arguments: ```json {                      (json, optional) specify valid query conditions  \"launchstate\" :              (\"prelaunch\" | \"launched\" | \"refund\" | \"complete\") (optional) return only currencies in that state  \"systemtype\" :              (\"local\" | \"imported\" | \"gateway\" | \"pbaas\")  \"fromsystem\" :              (\"systemnameeorid\") default is the local chain, but if currency is from another system, specify here  \"converter\": [\"currency1\", (\"currency2\")] (array, optional) default empty, only return fractional currency converters of one or more currencies } ``` #### Result: ```json [  {   \"version\" : n,             (int) version of this chain definition   \"name\" : \"string\",           (string) name or symbol of the chain, same as passed   \"fullyqualifiedname\" : \"string\",    (string) name or symbol of the chain with all parent namespaces, separated by \".\"   \"currencyid\" : \"i-address\",      (string) string that represents the currency ID, same as the ID behind the currency   \"currencyidhex\" : \"hex\",        (string) hex representation of currency ID, getcurrency API supports \"hex:currencyidhex\"   \"parent\" : \"i-address\",        (string) parent blockchain ID   \"systemid\" : \"i-address\",       (string) system on which this currency is considered to run   \"launchsystemid\" : \"i-address\",    (string) system from which this currency was launched   \"notarizationprotocol\" : n       (int) protocol number that determines variations in cross-chain or bridged notarizations   \"proofprotocol\" : n          (int) protocol number that determines variations in",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `listcurrencies` command in Verus?",
            "The `listcurrencies` command is used to retrieve a complete definition for any given chain if it is registered on the blockchain. If the chain requested is NULL, the chain definition of the current chain is returned.",
            "### `getsaplingtree \"n | m,n | m,n,o\"` Returns the entries for a light wallet Sapling tree state.#### Arguments: 1. \"n\" or \"m,n\" or \"m,n,o\"     (int or string, optional) height or inclusive range with optional step at which to get the Sapling tree state. If not specified, the latest currency state and height is returned#### Result: ```json  [    {      \"network\": \"VRSC\",      \"height\": n,      \"hash\": \"hex\"      \"time\": n,      \"tree\": \"hex\"    },  ] ``` Examples: ```bash > verus getsaplingtree name > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getsaplingtree\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `listcurrencies ({query object}) startblock endblock` Returns a complete definition for any given chain if it is registered on the blockchain. If the chain requested is NULL, chain definition of the current chain is returned.#### Arguments: ```json {                      (json, optional) specify valid query conditions  \"launchstate\" :              (\"prelaunch\" | \"launched\" | \"refund\" | \"complete\") (optional) return only currencies in that state  \"systemtype\" :              (\"local\" | \"imported\" | \"gateway\" | \"pbaas\")  \"fromsystem\" :              (\"systemnameeorid\") default is the local chain, but if currency is from another system, specify here  \"converter\": [\"currency1\", (\"currency2\")] (array, optional) default empty, only return fractional currency converters of one or more currencies } ``` #### Result: ```json [  {   \"version\" : n,             (int) version of this chain definition   \"name\" : \"string\",           (string) name or symbol of the chain, same as passed   \"fullyqualifiedname\" : \"string\",    (string) name or symbol of the chain with all parent namespaces, separated by \".\"   \"currencyid\" : \"i-address\",      (string) string that represents the currency ID, same as the ID behind the currency   \"currencyidhex\" : \"hex\",        (string) hex representation of currency ID, getcurrency API supports \"hex:currencyidhex\"   \"parent\" : \"i-address\",        (string) parent blockchain ID   \"systemid\" : \"i-address\",       (string) system on which this currency is considered to run   \"launchsystemid\" : \"i-address\",    (string) system from which this currency was launched   \"notarizationprotocol\" : n       (int) protocol number that determines variations in cross-chain or bridged notarizations   \"proofprotocol\" : n          (int) protocol number that determines variations in",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What are the arguments for the `listcurrencies` command?",
            "The `listcurrencies` command takes a JSON object as an optional argument, which specifies valid query conditions. The query object can contain the following properties:\n- \"launchstate\": a string specifying the launch state of the currencies to return (e.g. \"prelaunch\", \"launched\", \"refund\", or \"complete\")\n- \"systemtype\": a string specifying the system type of the currencies to return (e.g. \"local\", \"imported\", \"gateway\", or \"pbaas\")\n- \"fromsystem\": a string specifying the system from which the currencies to return originate\n- \"converter\": an array of strings specifying the currencies for which fractional currency converters should be returned",
            "### `getsaplingtree \"n | m,n | m,n,o\"` Returns the entries for a light wallet Sapling tree state.#### Arguments: 1. \"n\" or \"m,n\" or \"m,n,o\"     (int or string, optional) height or inclusive range with optional step at which to get the Sapling tree state. If not specified, the latest currency state and height is returned#### Result: ```json  [    {      \"network\": \"VRSC\",      \"height\": n,      \"hash\": \"hex\"      \"time\": n,      \"tree\": \"hex\"    },  ] ``` Examples: ```bash > verus getsaplingtree name > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getsaplingtree\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `listcurrencies ({query object}) startblock endblock` Returns a complete definition for any given chain if it is registered on the blockchain. If the chain requested is NULL, chain definition of the current chain is returned.#### Arguments: ```json {                      (json, optional) specify valid query conditions  \"launchstate\" :              (\"prelaunch\" | \"launched\" | \"refund\" | \"complete\") (optional) return only currencies in that state  \"systemtype\" :              (\"local\" | \"imported\" | \"gateway\" | \"pbaas\")  \"fromsystem\" :              (\"systemnameeorid\") default is the local chain, but if currency is from another system, specify here  \"converter\": [\"currency1\", (\"currency2\")] (array, optional) default empty, only return fractional currency converters of one or more currencies } ``` #### Result: ```json [  {   \"version\" : n,             (int) version of this chain definition   \"name\" : \"string\",           (string) name or symbol of the chain, same as passed   \"fullyqualifiedname\" : \"string\",    (string) name or symbol of the chain with all parent namespaces, separated by \".\"   \"currencyid\" : \"i-address\",      (string) string that represents the currency ID, same as the ID behind the currency   \"currencyidhex\" : \"hex\",        (string) hex representation of currency ID, getcurrency API supports \"hex:currencyidhex\"   \"parent\" : \"i-address\",        (string) parent blockchain ID   \"systemid\" : \"i-address\",       (string) system on which this currency is considered to run   \"launchsystemid\" : \"i-address\",    (string) system from which this currency was launched   \"notarizationprotocol\" : n       (int) protocol number that determines variations in cross-chain or bridged notarizations   \"proofprotocol\" : n          (int) protocol number that determines variations in",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the format of the result returned by the `listcurrencies` command?",
            "The result returned by the `listcurrencies` command is a JSON array containing objects with various properties describing the chain definitions, such as:\n- \"version\": the version of the chain definition\n- \"name\": the name or symbol of the chain\n- \"fullyqualifiedname\": the fully qualified name of the chain with all parent namespaces\n- \"currencyid\": the string representation of the currency ID\n- \"currencyidhex\": the hex representation of the currency ID\n- \"parent\": the parent blockchain ID\n- \"systemid\": the system on which the currency is considered to run\n- \"launchsystemid\": the system from which the currency was launched\n- \"notarizationprotocol\": the protocol number that determines variations in cross-chain or bridged notarizations\n- \"proofprotocol\": the protocol number that determines variations in proof-of-work or proof-of-stake consensus algorithms",
            "### `getsaplingtree \"n | m,n | m,n,o\"` Returns the entries for a light wallet Sapling tree state.#### Arguments: 1. \"n\" or \"m,n\" or \"m,n,o\"     (int or string, optional) height or inclusive range with optional step at which to get the Sapling tree state. If not specified, the latest currency state and height is returned#### Result: ```json  [    {      \"network\": \"VRSC\",      \"height\": n,      \"hash\": \"hex\"      \"time\": n,      \"tree\": \"hex\"    },  ] ``` Examples: ```bash > verus getsaplingtree name > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getsaplingtree\", \"params\": [name] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `listcurrencies ({query object}) startblock endblock` Returns a complete definition for any given chain if it is registered on the blockchain. If the chain requested is NULL, chain definition of the current chain is returned.#### Arguments: ```json {                      (json, optional) specify valid query conditions  \"launchstate\" :              (\"prelaunch\" | \"launched\" | \"refund\" | \"complete\") (optional) return only currencies in that state  \"systemtype\" :              (\"local\" | \"imported\" | \"gateway\" | \"pbaas\")  \"fromsystem\" :              (\"systemnameeorid\") default is the local chain, but if currency is from another system, specify here  \"converter\": [\"currency1\", (\"currency2\")] (array, optional) default empty, only return fractional currency converters of one or more currencies } ``` #### Result: ```json [  {   \"version\" : n,             (int) version of this chain definition   \"name\" : \"string\",           (string) name or symbol of the chain, same as passed   \"fullyqualifiedname\" : \"string\",    (string) name or symbol of the chain with all parent namespaces, separated by \".\"   \"currencyid\" : \"i-address\",      (string) string that represents the currency ID, same as the ID behind the currency   \"currencyidhex\" : \"hex\",        (string) hex representation of currency ID, getcurrency API supports \"hex:currencyidhex\"   \"parent\" : \"i-address\",        (string) parent blockchain ID   \"systemid\" : \"i-address\",       (string) system on which this currency is considered to run   \"launchsystemid\" : \"i-address\",    (string) system from which this currency was launched   \"notarizationprotocol\" : n       (int) protocol number that determines variations in cross-chain or bridged notarizations   \"proofprotocol\" : n          (int) protocol number that determines variations in",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "2e98cdea-5625-454c-b2fa-dd1bdfcaf091"
]