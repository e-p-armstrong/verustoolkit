[
    [
        [
            "How can I verify the authenticity of a Verus download?",
            "To verify the authenticity of a Verus download, you can follow these steps:\n\n1. Extract the downloaded archive.\n2. Verify the signature for the extracted archive using the extracted text file.\n3. Extract the archive to the desired directory.\n\nYou can use the `verifyfile` or `verifyhash` commands in the Verus CLI to verify the signature. For example:\n\n```\n./verus verifyfile \"Verus Coin Foundation Releases@\" AdJ2GwABQSCjCvnuaFl4Crj1vRK7s3gPAGa7u3OktJVrSY6NQoj002JK4IcK9xx0yQue/LK0Kg7H6L+h42BTTZb9+zeLgGVs /Downloads/Verus-CLI-Linux-v0.9.0-3-x86_64/Verus-CLI-Linux-v0.9.0-3-x86_64.tar.gz\n```\n\nor\n\n```\n./verus verifyhash \"Verus Coin Foundation Releases@\" AdJ2GwABQSCjCvnuaFl4Crj1vRK7s3gPAGa7u3OktJVrSY6NQoj002JK4IcK9xx0yQue/LK0Kg7H6L+h42BTTZb9+zeLgGVs fd58ff4f7f25a3eb2d48ce0b022c78162df66275c9f2257e071c5b97e9d94812\n```\n\nThe result will be `true` if the signature is valid.",
            "## Verifying Downloads A txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\". 1) Extract downloaded archive 2) Verify signature for the extracted archive using the extracted text file. 3) Extract archive to desired directory ### CLI examples **Verifying file directly** ``` ./verus verifyfile \"Verus Coin Foundation Releases@\" AdJ2GwABQSCjCvnuaFl4Crj1vRK7s3gPAGa7u3OktJVrSY6NQoj002JK4IcK9xx0yQue/LK0Kg7H6L+h42BTTZb9+zeLgGVs /Downloads/Verus-CLI-Linux-v0.9.0-3-x86_64/Verus-CLI-Linux-v0.9.0-3-x86_64.tar.gz ``` **Verifying using a checksum** ``` ./verus verifyhash \"Verus Coin Foundation Releases@\" AdJ2GwABQSCjCvnuaFl4Crj1vRK7s3gPAGa7u3OktJVrSY6NQoj002JK4IcK9xx0yQue/LK0Kg7H6L+h42BTTZb9+zeLgGVs fd58ff4f7f25a3eb2d48ce0b022c78162df66275c9f2257e071c5b97e9d94812 ```**The result will be true if the signature is valid.** ``` true ``` # Announcing NON-MANDATORY, RECOMMENDED Verus v0.9.0-2. This release is considered non-mandatory but IS RECOMMENDED for mainnet users, Komodo notaries, and is mandatory for testnet users to ensure reliable connection to the current testnet.## TO REMAIN CONNECTED TO THE MAINNET VERUS BLOCKCHAIN, YOU MUST UPGRADE FULL NODES TO v0.9.0 OR LATER. IF YOU HAVE NOT UPDATED AND ATTEMPTED TO STAY CONNECT TO MAINNET, YOU MAY NEED TO BOOTSTRAP OR RESYNC YOUR NATIVE WALLET OR NODE AFTER UPGRADING.## New Command and API for Verus Vault - setidentitytimelock v0.9.0-2 introduces a new command and RPC API, \"setidentitytimelock\". setidentitytimelock may be used to set a time unlock delay, set a lock until a specific block height, or unlock a delayed timelock on a VerusID under your control.You can use setidentitytimelock in one of two ways: ``` verus setidentitytimelock '{\"unlockatblock\":1796500}' (returntx) ``` or ``` verus setidentitytimelock '{\"setunlockdelay\":1440}' (returntx) ``` or ``` verus setidentitytimelock '{\"unlockatblock\":0}' (returntx) ``` The first example will lock the ID until the block specified. If the block specified is in the past, the ID will not be locked. The second example will set a 1440 block unlock delay, which will be needed to wait before spending funds controlled by the ID after unlocking the ID (about one day unlock time). The third example will unlock an ID that has been locked with an unlock delay, and the unlock time will be set to the block height at which the ID was unlocked + the originally set unlock delay.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is the purpose of the `setidentitytimelock` command in Verus?",
            "The `setidentitytimelock` command in Verus is used to set a time unlock delay, set a lock until a specific block height, or unlock a delayed timelock on a VerusID under your control. This command was introduced in Verus v0.9.0-2.\n\nYou can use `setidentitytimelock` in one of three ways:\n\n1. To lock the ID until a specific block height: `verus setidentitytimelock '{\"unlockatblock\":1796500}' (returntx)`\n2. To set a block unlock delay: `verus setidentitytimelock '{\"setunlockdelay\":1440}' (returntx)`\n3. To unlock an ID that has been locked with an unlock delay: `verus setidentitytimelock '{\"unlockatblock\":0}' (returntx)`",
            "## Verifying Downloads A txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\". 1) Extract downloaded archive 2) Verify signature for the extracted archive using the extracted text file. 3) Extract archive to desired directory ### CLI examples **Verifying file directly** ``` ./verus verifyfile \"Verus Coin Foundation Releases@\" AdJ2GwABQSCjCvnuaFl4Crj1vRK7s3gPAGa7u3OktJVrSY6NQoj002JK4IcK9xx0yQue/LK0Kg7H6L+h42BTTZb9+zeLgGVs /Downloads/Verus-CLI-Linux-v0.9.0-3-x86_64/Verus-CLI-Linux-v0.9.0-3-x86_64.tar.gz ``` **Verifying using a checksum** ``` ./verus verifyhash \"Verus Coin Foundation Releases@\" AdJ2GwABQSCjCvnuaFl4Crj1vRK7s3gPAGa7u3OktJVrSY6NQoj002JK4IcK9xx0yQue/LK0Kg7H6L+h42BTTZb9+zeLgGVs fd58ff4f7f25a3eb2d48ce0b022c78162df66275c9f2257e071c5b97e9d94812 ```**The result will be true if the signature is valid.** ``` true ``` # Announcing NON-MANDATORY, RECOMMENDED Verus v0.9.0-2. This release is considered non-mandatory but IS RECOMMENDED for mainnet users, Komodo notaries, and is mandatory for testnet users to ensure reliable connection to the current testnet.## TO REMAIN CONNECTED TO THE MAINNET VERUS BLOCKCHAIN, YOU MUST UPGRADE FULL NODES TO v0.9.0 OR LATER. IF YOU HAVE NOT UPDATED AND ATTEMPTED TO STAY CONNECT TO MAINNET, YOU MAY NEED TO BOOTSTRAP OR RESYNC YOUR NATIVE WALLET OR NODE AFTER UPGRADING.## New Command and API for Verus Vault - setidentitytimelock v0.9.0-2 introduces a new command and RPC API, \"setidentitytimelock\". setidentitytimelock may be used to set a time unlock delay, set a lock until a specific block height, or unlock a delayed timelock on a VerusID under your control.You can use setidentitytimelock in one of two ways: ``` verus setidentitytimelock '{\"unlockatblock\":1796500}' (returntx) ``` or ``` verus setidentitytimelock '{\"setunlockdelay\":1440}' (returntx) ``` or ``` verus setidentitytimelock '{\"unlockatblock\":0}' (returntx) ``` The first example will lock the ID until the block specified. If the block specified is in the past, the ID will not be locked. The second example will set a 1440 block unlock delay, which will be needed to wait before spending funds controlled by the ID after unlocking the ID (about one day unlock time). The third example will unlock an ID that has been locked with an unlock delay, and the unlock time will be set to the block height at which the ID was unlocked + the originally set unlock delay.",
            "./raw_txt_input/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "ca596ad2-7cbc-4619-826c-413d1e64a06f"
]