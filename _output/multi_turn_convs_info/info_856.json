[
    [
        [
            "How can I sign transactions from multi-signature IDs on both the testnet and mainnet using the Verus command-line tool?",
            "To sign transactions from multi-signature IDs, you need to:\n\n1. Create a transaction and get the raw transaction data using `verus sendcurrency`.\n2. Take the raw hex transaction data to each additional wallet containing the additional signing addresses/IDs and sign it using `verus signrawtransaction`.\n3. After the last necessary signature is applied, broadcast the transaction on the network using `verus sendrawtransaction`.",
            "1. Enable support for much larger proofs than was previously possible from systems that either have large proofs required or significantly variable length proofs. Having this capability in the daemon will pave the way for more types of cross-chain proving in the future as well. 2. Fix failed refunds of conversion transactions attempted after a fractional currency launches, but before it\u2019s preconversion phase is complete. If you sent transactions during this time, you may have stuck refunds that should flow after this upgrade. 3. Ensure that currencies are marked as \u201claunch complete\u201d immediately after all preconversions have been processed, enabling normal conversions in all directions from that point forward. 4. Fix an issue that left some import notarizations incomplete and caused cross-chain transfers to wait longer than expected after some imports. 5. Improve and validate hardening.If you miss the fork for this version at the above time you can get back on the correct chain by stopping Verus and deleting deleting everything other than your wallet.dat file in your data directory at: - Linux: `~/.Komodo/vrsctest` - Mac OS: `~/Library/Application Support/Komodo/vrsctest` - Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest` or `%AppData%\\Komodo\\vrsctest`## Exporting an ID to a PBaaS chain  ```  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'  ```## Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ```  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>  ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ```  verus signrawtransaction <raw_hex_transaction>  ``` After the last necessary signature is applied, broadcast on the network using:  ```  verus sendrawtransaction <raw_hex_signed_transaction>  ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How can I export an ID to a PBaaS chain using the Verus command-line tool?",
            "You can export an ID to a PBaaS chain using the following command:\n\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```",
            "1. Enable support for much larger proofs than was previously possible from systems that either have large proofs required or significantly variable length proofs. Having this capability in the daemon will pave the way for more types of cross-chain proving in the future as well. 2. Fix failed refunds of conversion transactions attempted after a fractional currency launches, but before it\u2019s preconversion phase is complete. If you sent transactions during this time, you may have stuck refunds that should flow after this upgrade. 3. Ensure that currencies are marked as \u201claunch complete\u201d immediately after all preconversions have been processed, enabling normal conversions in all directions from that point forward. 4. Fix an issue that left some import notarizations incomplete and caused cross-chain transfers to wait longer than expected after some imports. 5. Improve and validate hardening.If you miss the fork for this version at the above time you can get back on the correct chain by stopping Verus and deleting deleting everything other than your wallet.dat file in your data directory at: - Linux: `~/.Komodo/vrsctest` - Mac OS: `~/Library/Application Support/Komodo/vrsctest` - Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest` or `%AppData%\\Komodo\\vrsctest`## Exporting an ID to a PBaaS chain  ```  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'  ```## Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ```  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>  ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ```  verus signrawtransaction <raw_hex_transaction>  ``` After the last necessary signature is applied, broadcast on the network using:  ```  verus sendrawtransaction <raw_hex_signed_transaction>  ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What should I do if I miss the fork for this version of the Verus daemon?",
            "If you miss the fork for this version, you can get back on the correct chain by stopping Verus and deleting everything except your `wallet.dat` file in your data directory.",
            "1. Enable support for much larger proofs than was previously possible from systems that either have large proofs required or significantly variable length proofs. Having this capability in the daemon will pave the way for more types of cross-chain proving in the future as well. 2. Fix failed refunds of conversion transactions attempted after a fractional currency launches, but before it\u2019s preconversion phase is complete. If you sent transactions during this time, you may have stuck refunds that should flow after this upgrade. 3. Ensure that currencies are marked as \u201claunch complete\u201d immediately after all preconversions have been processed, enabling normal conversions in all directions from that point forward. 4. Fix an issue that left some import notarizations incomplete and caused cross-chain transfers to wait longer than expected after some imports. 5. Improve and validate hardening.If you miss the fork for this version at the above time you can get back on the correct chain by stopping Verus and deleting deleting everything other than your wallet.dat file in your data directory at: - Linux: `~/.Komodo/vrsctest` - Mac OS: `~/Library/Application Support/Komodo/vrsctest` - Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest` or `%AppData%\\Komodo\\vrsctest`## Exporting an ID to a PBaaS chain  ```  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'  ```## Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ```  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>  ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ```  verus signrawtransaction <raw_hex_transaction>  ``` After the last necessary signature is applied, broadcast on the network using:  ```  verus sendrawtransaction <raw_hex_signed_transaction>  ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are some of the key features and fixes in a recent Verus daemon upgrade?",
            "Some of the key features and fixes in the recent Verus daemon upgrade include:\n\n1. Support for much larger proofs, enabling more types of cross-chain proving in the future.\n2. Fixes for failed refunds of conversion transactions attempted after a fractional currency launches, but before its preconversion phase is complete.\n3. Ensuring that currencies are marked as \"launch complete\" immediately after all preconversions have been processed, enabling normal conversions in all directions.\n4. Fixes for incomplete import notarizations that caused cross-chain transfers to wait longer than expected.\n5. Improved and validated hardening.",
            "1. Enable support for much larger proofs than was previously possible from systems that either have large proofs required or significantly variable length proofs. Having this capability in the daemon will pave the way for more types of cross-chain proving in the future as well. 2. Fix failed refunds of conversion transactions attempted after a fractional currency launches, but before it\u2019s preconversion phase is complete. If you sent transactions during this time, you may have stuck refunds that should flow after this upgrade. 3. Ensure that currencies are marked as \u201claunch complete\u201d immediately after all preconversions have been processed, enabling normal conversions in all directions from that point forward. 4. Fix an issue that left some import notarizations incomplete and caused cross-chain transfers to wait longer than expected after some imports. 5. Improve and validate hardening.If you miss the fork for this version at the above time you can get back on the correct chain by stopping Verus and deleting deleting everything other than your wallet.dat file in your data directory at: - Linux: `~/.Komodo/vrsctest` - Mac OS: `~/Library/Application Support/Komodo/vrsctest` - Windows 10: `%AppData%\\Roaming\\Komodo\\vrsctest` or `%AppData%\\Komodo\\vrsctest`## Exporting an ID to a PBaaS chain  ```  verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'  ```## Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ```  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>  ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ```  verus signrawtransaction <raw_hex_transaction>  ``` After the last necessary signature is applied, broadcast on the network using:  ```  verus sendrawtransaction <raw_hex_signed_transaction>  ```",
            "./raw_txt_input/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "889b07e9-48ab-4a49-9ba3-bc6a96a72336"
]