[
    [
        [
            "What is the result of calling the `definecurrency` method in Verus?",
            "The result of calling the `definecurrency` method in Verus is a JSON object containing the following properties:\n\n* `txid`: a string specifying the transaction ID\n* `tx`: a JSON object representing the transaction decoded as a transaction\n* `hex`: a string specifying the raw data for the signed transaction",
            "d\" : n,    (int, optional) min period miners/stakers must wait to post new notarization to chain (default 10 min at any blocktime)  \"eras\"     : \"objarray\",  (array, optional) data specific to each era, maximum 3  {  \"reward\"   : n,       (int64, required) native initial block rewards in each period  \"decay\"   : n,       (int64, optional) reward decay for each era  \"halving\"  : n,       (int,  optional) halving period for each era  \"eraend\"   : n,       (int,  optional) ending block of each era } \"nodes\"     : \"[obj, ..]\", (objectarray, optional) up to 5 nodes that can be used to connect to the blockchain [{  \"networkaddress\" : \"ip:port\", (string, optional) internet, TOR, or other supported address for node  \"nodeidentity\" : \"name@\",   (string, optional) published node identity  }, .. ] } ``` #### Result: ```json {  \"txid\" : \"transactionid\",    (string) The transaction id  \"tx\"  : \"json\",         (json)  The transaction decoded as a transaction  \"hex\" : \"data\"         (string) Raw data for signed transaction } ```Examples: ```bash > verus definecurrency jsondefinition > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"definecurrency\", \"params\": [jsondefinition] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `estimateconversion '{\"currency\":\"name\",\"convertto\":\"name\",\"amount\":n}'` This estimates conversion from one currency to another, taking into account pending conversions, fees and slippage.#### Arguments ```json {  \"currency\": \"name\"    (string, required) Name of the source currency to send in this output, defaults to                        native of chain  \"amount\":amount     (numeric, required) The numeric amount of currency, denominated in source currency  \"convertto\":\"name\",   (string, optional) Valid currency to convert to, either a reserve of a fractional, or fractional  \"preconvert\":\"false\",  (bool, optional)  Convert to currency at market price (default=false), only works if                        transaction is mined before start of currency  \"via\":\"name\",      (string, optional) If source and destination currency are reserves, via is a common fractional                        to convert through } ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What does the `estimateconversion` method in Verus do?",
            "The `estimateconversion` method in Verus estimates the conversion from one currency to another, taking into account pending conversions, fees, and slippage.",
            "d\" : n,    (int, optional) min period miners/stakers must wait to post new notarization to chain (default 10 min at any blocktime)  \"eras\"     : \"objarray\",  (array, optional) data specific to each era, maximum 3  {  \"reward\"   : n,       (int64, required) native initial block rewards in each period  \"decay\"   : n,       (int64, optional) reward decay for each era  \"halving\"  : n,       (int,  optional) halving period for each era  \"eraend\"   : n,       (int,  optional) ending block of each era } \"nodes\"     : \"[obj, ..]\", (objectarray, optional) up to 5 nodes that can be used to connect to the blockchain [{  \"networkaddress\" : \"ip:port\", (string, optional) internet, TOR, or other supported address for node  \"nodeidentity\" : \"name@\",   (string, optional) published node identity  }, .. ] } ``` #### Result: ```json {  \"txid\" : \"transactionid\",    (string) The transaction id  \"tx\"  : \"json\",         (json)  The transaction decoded as a transaction  \"hex\" : \"data\"         (string) Raw data for signed transaction } ```Examples: ```bash > verus definecurrency jsondefinition > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"definecurrency\", \"params\": [jsondefinition] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `estimateconversion '{\"currency\":\"name\",\"convertto\":\"name\",\"amount\":n}'` This estimates conversion from one currency to another, taking into account pending conversions, fees and slippage.#### Arguments ```json {  \"currency\": \"name\"    (string, required) Name of the source currency to send in this output, defaults to                        native of chain  \"amount\":amount     (numeric, required) The numeric amount of currency, denominated in source currency  \"convertto\":\"name\",   (string, optional) Valid currency to convert to, either a reserve of a fractional, or fractional  \"preconvert\":\"false\",  (bool, optional)  Convert to currency at market price (default=false), only works if                        transaction is mined before start of currency  \"via\":\"name\",      (string, optional) If source and destination currency are reserves, via is a common fractional                        to convert through } ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What are the required arguments for the `estimateconversion` method in Verus?",
            "The required arguments for the `estimateconversion` method in Verus are:\n\n* `currency`: a string specifying the name of the source currency to send in this output, which defaults to the native currency of the chain\n* `amount`: a numeric value specifying the amount of currency to convert, denominated in the source currency",
            "d\" : n,    (int, optional) min period miners/stakers must wait to post new notarization to chain (default 10 min at any blocktime)  \"eras\"     : \"objarray\",  (array, optional) data specific to each era, maximum 3  {  \"reward\"   : n,       (int64, required) native initial block rewards in each period  \"decay\"   : n,       (int64, optional) reward decay for each era  \"halving\"  : n,       (int,  optional) halving period for each era  \"eraend\"   : n,       (int,  optional) ending block of each era } \"nodes\"     : \"[obj, ..]\", (objectarray, optional) up to 5 nodes that can be used to connect to the blockchain [{  \"networkaddress\" : \"ip:port\", (string, optional) internet, TOR, or other supported address for node  \"nodeidentity\" : \"name@\",   (string, optional) published node identity  }, .. ] } ``` #### Result: ```json {  \"txid\" : \"transactionid\",    (string) The transaction id  \"tx\"  : \"json\",         (json)  The transaction decoded as a transaction  \"hex\" : \"data\"         (string) Raw data for signed transaction } ```Examples: ```bash > verus definecurrency jsondefinition > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"definecurrency\", \"params\": [jsondefinition] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `estimateconversion '{\"currency\":\"name\",\"convertto\":\"name\",\"amount\":n}'` This estimates conversion from one currency to another, taking into account pending conversions, fees and slippage.#### Arguments ```json {  \"currency\": \"name\"    (string, required) Name of the source currency to send in this output, defaults to                        native of chain  \"amount\":amount     (numeric, required) The numeric amount of currency, denominated in source currency  \"convertto\":\"name\",   (string, optional) Valid currency to convert to, either a reserve of a fractional, or fractional  \"preconvert\":\"false\",  (bool, optional)  Convert to currency at market price (default=false), only works if                        transaction is mined before start of currency  \"via\":\"name\",      (string, optional) If source and destination currency are reserves, via is a common fractional                        to convert through } ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the optional `preconvert` argument in the `estimateconversion` method, and what does it do?",
            "The optional `preconvert` argument in the `estimateconversion` method is a boolean value that specifies whether to convert to the destination currency at the market price (default=false). This only works if the transaction is mined before the start of the currency.",
            "d\" : n,    (int, optional) min period miners/stakers must wait to post new notarization to chain (default 10 min at any blocktime)  \"eras\"     : \"objarray\",  (array, optional) data specific to each era, maximum 3  {  \"reward\"   : n,       (int64, required) native initial block rewards in each period  \"decay\"   : n,       (int64, optional) reward decay for each era  \"halving\"  : n,       (int,  optional) halving period for each era  \"eraend\"   : n,       (int,  optional) ending block of each era } \"nodes\"     : \"[obj, ..]\", (objectarray, optional) up to 5 nodes that can be used to connect to the blockchain [{  \"networkaddress\" : \"ip:port\", (string, optional) internet, TOR, or other supported address for node  \"nodeidentity\" : \"name@\",   (string, optional) published node identity  }, .. ] } ``` #### Result: ```json {  \"txid\" : \"transactionid\",    (string) The transaction id  \"tx\"  : \"json\",         (json)  The transaction decoded as a transaction  \"hex\" : \"data\"         (string) Raw data for signed transaction } ```Examples: ```bash > verus definecurrency jsondefinition > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"definecurrency\", \"params\": [jsondefinition] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `estimateconversion '{\"currency\":\"name\",\"convertto\":\"name\",\"amount\":n}'` This estimates conversion from one currency to another, taking into account pending conversions, fees and slippage.#### Arguments ```json {  \"currency\": \"name\"    (string, required) Name of the source currency to send in this output, defaults to                        native of chain  \"amount\":amount     (numeric, required) The numeric amount of currency, denominated in source currency  \"convertto\":\"name\",   (string, optional) Valid currency to convert to, either a reserve of a fractional, or fractional  \"preconvert\":\"false\",  (bool, optional)  Convert to currency at market price (default=false), only works if                        transaction is mined before start of currency  \"via\":\"name\",      (string, optional) If source and destination currency are reserves, via is a common fractional                        to convert through } ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "2edfc6ea-3f24-4d75-b0a6-a90c469cc36a"
]