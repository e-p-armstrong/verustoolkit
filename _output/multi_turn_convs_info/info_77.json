[
    [
        [
            "What is the purpose of the `setcurrencytrust` command in Verus?",
            "The `setcurrencytrust` command is used to manage currency trust lists in a Verus wallet. It allows you to clear all existing trust lists, set ratings for specific currencies, remove ratings for certain currencies, and configure the currency trust mode.",
            "### `setcurrencytrust '{\"clearall\": bool, \"setratings\":[{\"currencyid\":JSONRatingObject},...], \"removeratings\":[\"currencyid\",...], \"currencytrustmode\":<n>}` #### Arguments ```json {  \"clearall\": bool                  (bool, optional) clears all wallet currency trust lists before adding, removing, or trust mode operations  \"setratings\":[{\"currencyid\":JSONRatingObject},...] (objarray, optional) replaces ratings for specified currencies with those given  \"removeratings\":[\"currencyid\",...]         (strarray, optional) erases ratings for currencies specified  \"currencytrustmode\": <n>              (number, optional) 0 = spend/list all currencies, 1 = only spend/list those rated approved, 2 = spend/list all but those on block list } ``` #### Result no return on success, else error### `submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\"` Finishes an almost complete notarization transaction based on the notary chain and the current wallet or pubkey.If successful in submitting the transaction based on all rules, a transaction ID is returned, otherwise, NULL.#### Arguments: \"earnednotarization\"       (object, required) notarization earned on the other system, which is the basis for this \"notaryevidence\"         (object, required) evidence and notary signatures validating the notarization#### Result: txid               (hexstring) transaction ID of submitted transactionExamples: ```bash > verus submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitacceptednotarization\", \"params\": [\"{earnednotarization}\" \"{notaryevidence}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `submitchallenges [json array]` Submits one or more cryptographic challenges to existing, unconfirmed notarizations, proving the existence of an alternate chain. Whether the alternate chain has more power than the chain with a pending notarization is not required, only that it has moved forward multiple blocks since the prior notarization.Requires that the local wallet have funds for fees.#### Arguments: \"challenges\"         (array, required) one or more challenges to unconfirmed notarizations on this system ```json [  {   \"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\" ||            \"type\":\"vrsc::evidence.validitychallenge\" || \"iCPb8ywQna7jYV2SHrGZ6vQMj7kuyWFxvb\",   \"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},   \"forkroot\":{},   \"challengeroot\":{},   \"evidence\":{}  },  {...},  ... ] ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What are the different modes available for currency trust in Verus?",
            "There are three modes available for currency trust in Verus:\n\n1. Mode 0: Spend/list all currencies.\n2. Mode 1: Only spend/list currencies that are rated as approved.\n3. Mode 2: Spend/list all currencies except those on the block list.",
            "### `setcurrencytrust '{\"clearall\": bool, \"setratings\":[{\"currencyid\":JSONRatingObject},...], \"removeratings\":[\"currencyid\",...], \"currencytrustmode\":<n>}` #### Arguments ```json {  \"clearall\": bool                  (bool, optional) clears all wallet currency trust lists before adding, removing, or trust mode operations  \"setratings\":[{\"currencyid\":JSONRatingObject},...] (objarray, optional) replaces ratings for specified currencies with those given  \"removeratings\":[\"currencyid\",...]         (strarray, optional) erases ratings for currencies specified  \"currencytrustmode\": <n>              (number, optional) 0 = spend/list all currencies, 1 = only spend/list those rated approved, 2 = spend/list all but those on block list } ``` #### Result no return on success, else error### `submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\"` Finishes an almost complete notarization transaction based on the notary chain and the current wallet or pubkey.If successful in submitting the transaction based on all rules, a transaction ID is returned, otherwise, NULL.#### Arguments: \"earnednotarization\"       (object, required) notarization earned on the other system, which is the basis for this \"notaryevidence\"         (object, required) evidence and notary signatures validating the notarization#### Result: txid               (hexstring) transaction ID of submitted transactionExamples: ```bash > verus submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitacceptednotarization\", \"params\": [\"{earnednotarization}\" \"{notaryevidence}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `submitchallenges [json array]` Submits one or more cryptographic challenges to existing, unconfirmed notarizations, proving the existence of an alternate chain. Whether the alternate chain has more power than the chain with a pending notarization is not required, only that it has moved forward multiple blocks since the prior notarization.Requires that the local wallet have funds for fees.#### Arguments: \"challenges\"         (array, required) one or more challenges to unconfirmed notarizations on this system ```json [  {   \"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\" ||            \"type\":\"vrsc::evidence.validitychallenge\" || \"iCPb8ywQna7jYV2SHrGZ6vQMj7kuyWFxvb\",   \"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},   \"forkroot\":{},   \"challengeroot\":{},   \"evidence\":{}  },  {...},  ... ] ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `submitacceptednotarization` command in Verus?",
            "The `submitacceptednotarization` command is used to finish an almost complete notarization transaction based on the notary chain and the current wallet or pubkey. It submits a transaction to the network, and if successful, returns a transaction ID.",
            "### `setcurrencytrust '{\"clearall\": bool, \"setratings\":[{\"currencyid\":JSONRatingObject},...], \"removeratings\":[\"currencyid\",...], \"currencytrustmode\":<n>}` #### Arguments ```json {  \"clearall\": bool                  (bool, optional) clears all wallet currency trust lists before adding, removing, or trust mode operations  \"setratings\":[{\"currencyid\":JSONRatingObject},...] (objarray, optional) replaces ratings for specified currencies with those given  \"removeratings\":[\"currencyid\",...]         (strarray, optional) erases ratings for currencies specified  \"currencytrustmode\": <n>              (number, optional) 0 = spend/list all currencies, 1 = only spend/list those rated approved, 2 = spend/list all but those on block list } ``` #### Result no return on success, else error### `submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\"` Finishes an almost complete notarization transaction based on the notary chain and the current wallet or pubkey.If successful in submitting the transaction based on all rules, a transaction ID is returned, otherwise, NULL.#### Arguments: \"earnednotarization\"       (object, required) notarization earned on the other system, which is the basis for this \"notaryevidence\"         (object, required) evidence and notary signatures validating the notarization#### Result: txid               (hexstring) transaction ID of submitted transactionExamples: ```bash > verus submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitacceptednotarization\", \"params\": [\"{earnednotarization}\" \"{notaryevidence}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `submitchallenges [json array]` Submits one or more cryptographic challenges to existing, unconfirmed notarizations, proving the existence of an alternate chain. Whether the alternate chain has more power than the chain with a pending notarization is not required, only that it has moved forward multiple blocks since the prior notarization.Requires that the local wallet have funds for fees.#### Arguments: \"challenges\"         (array, required) one or more challenges to unconfirmed notarizations on this system ```json [  {   \"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\" ||            \"type\":\"vrsc::evidence.validitychallenge\" || \"iCPb8ywQna7jYV2SHrGZ6vQMj7kuyWFxvb\",   \"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},   \"forkroot\":{},   \"challengeroot\":{},   \"evidence\":{}  },  {...},  ... ] ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What are the required arguments for the `submitacceptednotarization` command?",
            "The `submitacceptednotarization` command requires two arguments:\n\n1. `earnednotarization`: The notarization earned on the other system, which is the basis for this transaction.\n2. `notaryevidence`: The evidence and notary signatures validating the notarization.",
            "### `setcurrencytrust '{\"clearall\": bool, \"setratings\":[{\"currencyid\":JSONRatingObject},...], \"removeratings\":[\"currencyid\",...], \"currencytrustmode\":<n>}` #### Arguments ```json {  \"clearall\": bool                  (bool, optional) clears all wallet currency trust lists before adding, removing, or trust mode operations  \"setratings\":[{\"currencyid\":JSONRatingObject},...] (objarray, optional) replaces ratings for specified currencies with those given  \"removeratings\":[\"currencyid\",...]         (strarray, optional) erases ratings for currencies specified  \"currencytrustmode\": <n>              (number, optional) 0 = spend/list all currencies, 1 = only spend/list those rated approved, 2 = spend/list all but those on block list } ``` #### Result no return on success, else error### `submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\"` Finishes an almost complete notarization transaction based on the notary chain and the current wallet or pubkey.If successful in submitting the transaction based on all rules, a transaction ID is returned, otherwise, NULL.#### Arguments: \"earnednotarization\"       (object, required) notarization earned on the other system, which is the basis for this \"notaryevidence\"         (object, required) evidence and notary signatures validating the notarization#### Result: txid               (hexstring) transaction ID of submitted transactionExamples: ```bash > verus submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitacceptednotarization\", \"params\": [\"{earnednotarization}\" \"{notaryevidence}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `submitchallenges [json array]` Submits one or more cryptographic challenges to existing, unconfirmed notarizations, proving the existence of an alternate chain. Whether the alternate chain has more power than the chain with a pending notarization is not required, only that it has moved forward multiple blocks since the prior notarization.Requires that the local wallet have funds for fees.#### Arguments: \"challenges\"         (array, required) one or more challenges to unconfirmed notarizations on this system ```json [  {   \"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\" ||            \"type\":\"vrsc::evidence.validitychallenge\" || \"iCPb8ywQna7jYV2SHrGZ6vQMj7kuyWFxvb\",   \"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},   \"forkroot\":{},   \"challengeroot\":{},   \"evidence\":{}  },  {...},  ... ] ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `submitchallenges` command in Verus?",
            "The `submitchallenges` command is used to submit one or more cryptographic challenges to existing, unconfirmed notarizations, proving the existence of an alternate chain.",
            "### `setcurrencytrust '{\"clearall\": bool, \"setratings\":[{\"currencyid\":JSONRatingObject},...], \"removeratings\":[\"currencyid\",...], \"currencytrustmode\":<n>}` #### Arguments ```json {  \"clearall\": bool                  (bool, optional) clears all wallet currency trust lists before adding, removing, or trust mode operations  \"setratings\":[{\"currencyid\":JSONRatingObject},...] (objarray, optional) replaces ratings for specified currencies with those given  \"removeratings\":[\"currencyid\",...]         (strarray, optional) erases ratings for currencies specified  \"currencytrustmode\": <n>              (number, optional) 0 = spend/list all currencies, 1 = only spend/list those rated approved, 2 = spend/list all but those on block list } ``` #### Result no return on success, else error### `submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\"` Finishes an almost complete notarization transaction based on the notary chain and the current wallet or pubkey.If successful in submitting the transaction based on all rules, a transaction ID is returned, otherwise, NULL.#### Arguments: \"earnednotarization\"       (object, required) notarization earned on the other system, which is the basis for this \"notaryevidence\"         (object, required) evidence and notary signatures validating the notarization#### Result: txid               (hexstring) transaction ID of submitted transactionExamples: ```bash > verus submitacceptednotarization \"{earnednotarization}\" \"{notaryevidence}\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"submitacceptednotarization\", \"params\": [\"{earnednotarization}\" \"{notaryevidence}\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `submitchallenges [json array]` Submits one or more cryptographic challenges to existing, unconfirmed notarizations, proving the existence of an alternate chain. Whether the alternate chain has more power than the chain with a pending notarization is not required, only that it has moved forward multiple blocks since the prior notarization.Requires that the local wallet have funds for fees.#### Arguments: \"challenges\"         (array, required) one or more challenges to unconfirmed notarizations on this system ```json [  {   \"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\" ||            \"type\":\"vrsc::evidence.validitychallenge\" || \"iCPb8ywQna7jYV2SHrGZ6vQMj7kuyWFxvb\",   \"notarizationref\":{\"txid\":\"hexvalue\",\"voutnum\":n},   \"forkroot\":{},   \"challengeroot\":{},   \"evidence\":{}  },  {...},  ... ] ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "f9a803eb-c78a-47f2-a009-7dc3d452d3ea"
]