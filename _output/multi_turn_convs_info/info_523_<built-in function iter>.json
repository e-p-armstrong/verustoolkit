[
    [
        [
            "How can I recover a VerusID using the command line and Verus?",
            "You can recover a VerusID using the `recoveridentity` command with Verus. Here's an example of how to do it:\n\n```\nverus recoveridentity '{\"name\" : \"myname\"}'\n```\n\nAlternatively, you can use the `curl` command to send a JSON-RPC request to the Verus server:\n\n```bash\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"recoveridentity\", \"params\": [{\"name\" : \"myname\"}]}' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "Examples: ```bash > verus recoveridentity '{\"name\" : \"myname\"}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"recoveridentity\", \"params\": ['{\"name\" : \"myname\"}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `registeridentity \"jsonidregistration\" (returntx) feeoffer sourceoffunds` `registeridentity` needs the values from `RegisterNameCommitment` output to register a VerusID#### Arguments: ```json {   \"txid\": \"hexid\",        (hex, required)                       the transaction ID of the name committment for this ID name -                       Take fromRegisterNameCommitment's output - txid   \"namereservation\": {    \"name\": \"namestr\",      (string, required)                       the unique name in this commitment - Take from                       output - name    \"salt\": \"hexstr\",      (hex, required)                       salt used to hide the commitment - Take from                       RegisterNameCommitment's output - salt    \"referral\": \"identityID\",  (name@ or address, required)                       must be a valid ID to use as a referrer to receive a                       discount - Take from RegisterNameCommitment's                       output - referral    \"parent\": \"\",        (name@ or address, required)                       must be a valid ID. This ID can be used to revoke and recover                       the nameID we regsiter with this current command - Take from                       RegisterNameCommitment's output - parent    \"nameid\": \"nameID\"      (base58, required)                       identity address for this identity if it is created -                       Take from RegisterNameCommitment's output - nameid   },   \"identity\": {    \"name\": \"namestr\",      (string, required)                       the unique name for this identity - Take from                       RegisterNameCommitment's output - name    \"parent\": \"IDParent\",    (string, required for IDs with parents other than VRSC) \t\t\t\t\t  the parents friendly name e.g. gravity    \"primaryaddresses\": [    (array of strings, required) the trasparent/public address(es)     \"hexstr\"    ],    \"minimumsignatures\": 1,   (int, required)                       MofN sig",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What are the required arguments for the `registeridentity` command in Verus?",
            "The `registeridentity` command requires the following arguments:\n\n* `txid`: the transaction ID of the name commitment for this ID name\n* `namereservation`: an object containing the name, salt, referral, parent, and nameid\n* `identity`: an object containing the name, parent, primaryaddresses, and minimumsignatures\n\nThese arguments are required to register a VerusID.",
            "Examples: ```bash > verus recoveridentity '{\"name\" : \"myname\"}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"recoveridentity\", \"params\": ['{\"name\" : \"myname\"}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `registeridentity \"jsonidregistration\" (returntx) feeoffer sourceoffunds` `registeridentity` needs the values from `RegisterNameCommitment` output to register a VerusID#### Arguments: ```json {   \"txid\": \"hexid\",        (hex, required)                       the transaction ID of the name committment for this ID name -                       Take fromRegisterNameCommitment's output - txid   \"namereservation\": {    \"name\": \"namestr\",      (string, required)                       the unique name in this commitment - Take from                       output - name    \"salt\": \"hexstr\",      (hex, required)                       salt used to hide the commitment - Take from                       RegisterNameCommitment's output - salt    \"referral\": \"identityID\",  (name@ or address, required)                       must be a valid ID to use as a referrer to receive a                       discount - Take from RegisterNameCommitment's                       output - referral    \"parent\": \"\",        (name@ or address, required)                       must be a valid ID. This ID can be used to revoke and recover                       the nameID we regsiter with this current command - Take from                       RegisterNameCommitment's output - parent    \"nameid\": \"nameID\"      (base58, required)                       identity address for this identity if it is created -                       Take from RegisterNameCommitment's output - nameid   },   \"identity\": {    \"name\": \"namestr\",      (string, required)                       the unique name for this identity - Take from                       RegisterNameCommitment's output - name    \"parent\": \"IDParent\",    (string, required for IDs with parents other than VRSC) \t\t\t\t\t  the parents friendly name e.g. gravity    \"primaryaddresses\": [    (array of strings, required) the trasparent/public address(es)     \"hexstr\"    ],    \"minimumsignatures\": 1,   (int, required)                       MofN sig",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `registeridentity` command in Verus?",
            "The `registeridentity` command is used to register a VerusID. It requires the values from the `RegisterNameCommitment` output to register a VerusID.",
            "Examples: ```bash > verus recoveridentity '{\"name\" : \"myname\"}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"recoveridentity\", \"params\": ['{\"name\" : \"myname\"}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `registeridentity \"jsonidregistration\" (returntx) feeoffer sourceoffunds` `registeridentity` needs the values from `RegisterNameCommitment` output to register a VerusID#### Arguments: ```json {   \"txid\": \"hexid\",        (hex, required)                       the transaction ID of the name committment for this ID name -                       Take fromRegisterNameCommitment's output - txid   \"namereservation\": {    \"name\": \"namestr\",      (string, required)                       the unique name in this commitment - Take from                       output - name    \"salt\": \"hexstr\",      (hex, required)                       salt used to hide the commitment - Take from                       RegisterNameCommitment's output - salt    \"referral\": \"identityID\",  (name@ or address, required)                       must be a valid ID to use as a referrer to receive a                       discount - Take from RegisterNameCommitment's                       output - referral    \"parent\": \"\",        (name@ or address, required)                       must be a valid ID. This ID can be used to revoke and recover                       the nameID we regsiter with this current command - Take from                       RegisterNameCommitment's output - parent    \"nameid\": \"nameID\"      (base58, required)                       identity address for this identity if it is created -                       Take from RegisterNameCommitment's output - nameid   },   \"identity\": {    \"name\": \"namestr\",      (string, required)                       the unique name for this identity - Take from                       RegisterNameCommitment's output - name    \"parent\": \"IDParent\",    (string, required for IDs with parents other than VRSC) \t\t\t\t\t  the parents friendly name e.g. gravity    \"primaryaddresses\": [    (array of strings, required) the trasparent/public address(es)     \"hexstr\"    ],    \"minimumsignatures\": 1,   (int, required)                       MofN sig",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "de81022d-b6f8-4a89-a144-14a33595143f"
]