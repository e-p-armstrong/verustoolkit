[
    [
        [
            "How do I define a PBaaS blockchain using Verus?",
            "To define a PBaaS blockchain using Verus, you need to create a JSON object that contains the blockchain's properties, such as its name, options, currencies, conversions, eras, notaries, nodes, and gateway converter information. Then, you pass this JSON object to the `definecurrency` command.\n\nHere's an example of how to define a PBaaS blockchain:\n```json\n{\n  \"name\": \"PBaaSChain\",\n  \"options\": 264,\n  \"currencies\": [\n    \"VRSCTEST\"\n  ],\n  \"conversions\": [\n    1\n  ],\n  \"eras\": [\n    {\n      \"reward\": 1200000000,\n      \"decay\": 0,\n      \"halving\": 0,\n      \"eraend\": 0\n    }\n  ],\n  \"notaries\": [\n    \"Notary1@\",\n    \"Notary2@\",\n    \"Notary3@\"\n  ],\n  \"minnotariesconfirm\": 2,\n  \"nodes\": [\n    {\n      \"networkaddress\": \"111.111.111.111:10000\",\n      \"nodeidentity\": \"Node1@\"\n    },\n    {\n      \"networkaddress\": \"111.111.111.112:10000\",\n      \"nodeidentity\": \"Node2@\"\n    }\n  ],\n  \"gatewayconvertername\": \"Bridge\",\n  \"gatewayconverterissuance\": 1000000\n}\n```\nYou also need to define the bridge's properties, such as its currencies, initial contributions, and initial supply. Then, you pass both JSON objects to the `definecurrency` command:\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",...}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],...}'\n```",
            "#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```### Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ``` verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]' verus z_getoperationstatus <operation_id_returned_by_sendcurrency> ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ``` verus signrawtransaction <raw_hex_transaction> ``` After the last necessary signature is applied, broadcast on the network using:  ``` verus sendrawtransaction <raw_hex_signed_transaction> ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are the overridable defaults in a PBaaS bridge definition?",
            "The overridable defaults in a PBaaS bridge definition are:\n\n1. `currencies`: An array of currency tickers that the bridge supports, including the native coins of the chains being bridged.\n2. `initialcontributions`: An array specifying the initial liquidity for each currency in the bridge.\n3. `initialsupply`: The initial supply for the bridge's native token.",
            "#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```### Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ``` verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]' verus z_getoperationstatus <operation_id_returned_by_sendcurrency> ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ``` verus signrawtransaction <raw_hex_transaction> ``` After the last necessary signature is applied, broadcast on the network using:  ``` verus sendrawtransaction <raw_hex_signed_transaction> ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are the main components of a PBaaS blockchain definition?",
            "The main components of a PBaaS blockchain definition include:\n\n1. `name`: The name of the blockchain.\n2. `options`: An integer that specifies additional options for the blockchain.\n3. `currencies`: An array of currencies that can be used on the blockchain.\n4. `conversions`: An array that specifies the conversion ratios between the currencies.\n5. `eras`: An array that defines the block reward, reward decay, halving, and end of each \"era\" in the blockchain's lifecycle.\n6. `notaries`: An array of VerusIDs that serve as notaries on the blockchain.\n7. `minnotariesconfirm`: An integer that specifies the minimum number of notaries required to confirm a block.\n8. `nodes`: An array that describes the network addresses and identities of the nodes on the blockchain.\n9. `gatewayconvertername` and `gatewayconverterissuance`: These specify the bridge converter name and issuance amount, respectively.",
            "#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```### Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ``` verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]' verus z_getoperationstatus <operation_id_returned_by_sendcurrency> ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ``` verus signrawtransaction <raw_hex_transaction> ``` After the last necessary signature is applied, broadcast on the network using:  ``` verus sendrawtransaction <raw_hex_signed_transaction> ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What properties can be defined when creating a PBaaS blockchain using Verus?",
            "When creating a PBaaS blockchain using Verus, the following properties can be defined:\n\n1. `name`: The name of the chain.\n2. `options`: An integer representing the chain's options.\n3. `currencies`: An array of currencies that the chain's native currency can be converted into.\n4. `conversions`: An array defining the conversion ratios between the chain's native currency and each currency on the chain.\n5. `eras`: An array defining the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle.\n6. `notaries`: An array of VerusIDs that will serve as notaries on the chain.\n7. `minnotariesconfirm`: An integer representing the minimum number of notaries needed to confirm a block.\n8. `nodes`: An array describing the network addresses of the nodes on the chain, as well as their IDs.\n9. `gatewayconvertername`: The name of the bridge converter.\n10. `gatewayconverterissuance`: The initial issuance of the bridge converter's native token.",
            "#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```### Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ``` verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]' verus z_getoperationstatus <operation_id_returned_by_sendcurrency> ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ``` verus signrawtransaction <raw_hex_transaction> ``` After the last necessary signature is applied, broadcast on the network using:  ``` verus sendrawtransaction <raw_hex_signed_transaction> ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How can I export an ID to a PBaaS chain using Verus?",
            "To export an ID to a PBaaS chain using Verus, you can use the `sendcurrency` command with the following format:\n\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```\n\nThis command exports the ID \"IDNAME@\" to the PBaaS chain \"PBaaSChainName\" with an amount of 100 VRSCTEST.",
            "#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```### Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ``` verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]' verus z_getoperationstatus <operation_id_returned_by_sendcurrency> ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ``` verus signrawtransaction <raw_hex_transaction> ``` After the last necessary signature is applied, broadcast on the network using:  ``` verus sendrawtransaction <raw_hex_signed_transaction> ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I export an ID to a PBaaS chain using Verus?",
            "To export an ID to a PBaaS chain using Verus, you can use the `sendcurrency` command with the `exportto` option. Here's an example:\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```\nThis command exports the ID `IDNAME@` to the PBaaS chain `PBaaSChainName`.",
            "#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```### Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ``` verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]' verus z_getoperationstatus <operation_id_returned_by_sendcurrency> ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ``` verus signrawtransaction <raw_hex_transaction> ``` After the last necessary signature is applied, broadcast on the network using:  ``` verus sendrawtransaction <raw_hex_signed_transaction> ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I sign transactions from multi-signature IDs using Verus?",
            "To sign transactions from multi-signature IDs using Verus, you need to follow these steps:\n\n1. Create a transaction using the `sendcurrency` command:\n```\nverus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'\n```\n2. Get the raw transaction data using the `z_getoperationstatus` command:\n```\nverus z_getoperationstatus <operation_id_returned_by_sendcurrency>\n```\n3. Take the raw hex transaction data to each additional wallet containing the additional signing addresses/IDs and sign it using the `signrawtransaction` command:\n```\nverus signrawtransaction <raw_hex_transaction>\n```\n4. After the last necessary signature is applied, broadcast the signed transaction on the network using the `sendrawtransaction` command:\n```\nverus sendrawtransaction <raw_hex_signed_transaction>\n```",
            "#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```### Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ``` verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]' verus z_getoperationstatus <operation_id_returned_by_sendcurrency> ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ``` verus signrawtransaction <raw_hex_transaction> ``` After the last necessary signature is applied, broadcast on the network using:  ``` verus sendrawtransaction <raw_hex_signed_transaction> ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are the essential components of a PBaaS blockchain definition using Verus?",
            "When defining a PBaaS blockchain using Verus, the essential components are:\n\n1. `name`: The name of the chain.\n2. `options`: An integer, in this case set to 264.\n3. `currencies`: An array of currencies that the chain's native currency can be converted into.\n4. `conversions`: An array defining the conversion ratios between the chain's native currency and each currency on the chain.\n5. `eras`: An array defining the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle.\n6. `notaries`: An array of VerusIDs that will serve as notaries on the chain.\n7. `minnotariesconfirm`: An integer for the minimum number of notaries needed to confirm a block.\n8. `nodes`: An array describing the network addresses of the nodes on the chain, as well as their IDs.\n9. `gatewayconvertername`: The name of the bridge converter.\n10. `gatewayconverterissuance`: The initial supply of the bridge's native token.",
            "#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```### Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ``` verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]' verus z_getoperationstatus <operation_id_returned_by_sendcurrency> ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ``` verus signrawtransaction <raw_hex_transaction> ``` After the last necessary signature is applied, broadcast on the network using:  ``` verus sendrawtransaction <raw_hex_signed_transaction> ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do you export an ID to a PBaaS chain using the command line and Verus?",
            "You can export an ID to a PBaaS chain using the `sendcurrency` command with the following format:\n```\nverus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]'\n```\nThis command exports the ID `IDNAME@` to the PBaaS chain `PBaaSChainName` with an amount of 100 units of `vrsctest` currency.",
            "#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```### Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ``` verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]' verus z_getoperationstatus <operation_id_returned_by_sendcurrency> ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ``` verus signrawtransaction <raw_hex_transaction> ``` After the last necessary signature is applied, broadcast on the network using:  ``` verus sendrawtransaction <raw_hex_signed_transaction> ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do you sign transactions from multi-signature IDs on Verus?",
            "To sign transactions from multi-signature IDs on Verus, you need to follow these steps:\n\n1. Create a transaction using the `sendcurrency` command and get the raw transaction data.\n2. Take the raw hex transaction data to each additional wallet containing the additional signing addresses/IDs and sign the transaction using the `signrawtransaction` command.\n3. After the last necessary signature is applied, broadcast the signed transaction on the network using the `sendrawtransaction` command.",
            "#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```### Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ``` verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]' verus z_getoperationstatus <operation_id_returned_by_sendcurrency> ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ``` verus signrawtransaction <raw_hex_transaction> ``` After the last necessary signature is applied, broadcast on the network using:  ``` verus sendrawtransaction <raw_hex_signed_transaction> ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is the purpose of the bridge definition in a PBaaS blockchain, and what are its key components?",
            "The bridge definition in a PBaaS blockchain is used to define the bridge's properties, which enables the movement of funds on and off the PBaaS chain. The key components of the bridge definition include:\n\n1. `currencies`: An array of currency tickers that the bridge supports, including the native coins of the chains being bridged.\n2. `initialcontributions`: An array specifying the initial liquidity for each currency in the bridge.\n3. `initialsupply`: An integer specifying the initial supply of the bridge's native token.",
            "#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```### Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ``` verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]' verus z_getoperationstatus <operation_id_returned_by_sendcurrency> ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ``` verus signrawtransaction <raw_hex_transaction> ``` After the last necessary signature is applied, broadcast on the network using:  ``` verus sendrawtransaction <raw_hex_signed_transaction> ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What information is required to define a PBaaS blockchain using the `definecurrency` command?",
            "To define a PBaaS blockchain, you need to provide the following information:\n\n1. `name`: The name of the blockchain.\n2. `options`: An integer value specifying the blockchain's options.\n3. `currencies`: An array of currency tickers that the blockchain's native currency can be converted into.\n4. `conversions`: An array defining the conversion ratios between the blockchain's native currency and each currency on the chain.\n5. `eras`: An array defining the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle.\n6. `notaries`: An array of VerusIDs that will serve as notaries on the chain.\n7. `minnotariesconfirm`: The minimum number of notaries needed to confirm a block.\n8. `nodes`: An array describing the network addresses of the nodes on the chain, as well as their IDs.\n9. `gatewayconvertername`: The name of the bridge.\n10. `gatewayconverterissuance`: The initial issuance of the bridge's native token.",
            "#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```### Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ``` verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]' verus z_getoperationstatus <operation_id_returned_by_sendcurrency> ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ``` verus signrawtransaction <raw_hex_transaction> ``` After the last necessary signature is applied, broadcast on the network using:  ``` verus sendrawtransaction <raw_hex_signed_transaction> ```",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I sign a transaction from a multi-signature ID using Verus?",
            "To sign a transaction from a multi-signature ID using Verus, you need to follow these steps:\n\n1. Create a transaction using the `sendcurrency` command and get the raw transaction data.\n2. Take the raw hex transaction data to each additional wallet containing the additional signing addresses/IDs.\n3. Use the `signrawtransaction` command to sign the transaction with each additional wallet.\n4. After the last necessary signature is applied, broadcast the signed transaction on the network using the `sendrawtransaction` command.\n\nNote that you need to use the `z_getoperationstatus` command to get the operation ID returned by `sendcurrency`, which is used to get the raw transaction data.",
            "#### Defining a PBaaS blockchain ```json  {  \"name\": \"PBaaSChain\",  \"options\": 264,  \"currencies\": [   \"VRSCTEST\"  ],  \"conversions\": [   1  ],  \"eras\": [   {    \"reward\": 1200000000,    \"decay\": 0,    \"halving\": 0,    \"eraend\": 0   }  ],  \"notaries\": [   \"Notary1@\",   \"Notary2@\",   \"Notary3@\"  ],  \"minnotariesconfirm\": 2,  \"nodes\": [   {    \"networkaddress\": \"111.111.111.111:10000\",    \"nodeidentity\": \"Node1@\"   },   {    \"networkaddress\": \"111.111.111.112:10000\",    \"nodeidentity\": \"Node2@\"   }  ],  \"gatewayconvertername\": \"Bridge\",  \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json  {  \"currencies\": [   \"VRSCTEST\",   \"PBaaSChain\",   \"USD\"  ],  \"initialcontributions\": [   380228.12033701,   0,   1000000  ],  \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```shell ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ``` #### Exporting an ID to a PBaaS chain ``` verus -chain=VRSCTEST sendcurrency \"*\" '[{\"address\":\"IDNAME@\",\"exportto\":\"PBaaSChainName\",\"exportid\":\"true\",\"amount\":100,\"currency\":\"vrsctest\"}]' ```### Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ``` verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]' verus z_getoperationstatus <operation_id_returned_by_sendcurrency> ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ``` verus signrawtransaction <raw_hex_transaction> ``` After the last necessary signature is applied, broadcast on the network using:  ``` verus sendrawtransaction <raw_hex_signed_transaction> ```",
            "./raw_txt_input/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "3e68a409-d8bd-4beb-a9a1-9349e28b0f49"
]