[
    [
        [
            "How can I submit a raw transaction to the local node and network using Verus?",
            "You can submit a raw transaction to the local node and network using the `sendrawtransaction` command, which takes a hex string of the raw transaction as an argument. You can also optionally specify whether to allow high fees.",
            "    ],    \"onetimePubKey\" : \"hex\", (string) the onetime public key used to encrypt the ciphertexts    \"randomSeed\" : \"hex\",   (string) the random seed    \"macs\" : [         (json array of string)     \"hex\"           (string) input note MAC     ,...    ],    \"proof\" : \"hex\",     (string) the zero-knowledge proof    \"ciphertexts\" : [      (json array of string)     \"hex\"           (string) output note ciphertext     ,...    ]   }   ,...  ],  \"blockhash\" : \"hash\",  (string) the block hash  \"confirmations\" : n,   (numeric) The confirmations  \"time\" : ttt,       (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)  \"blocktime\" : ttt     (numeric) The block time in seconds since epoch (Jan 1 1970 GMT) } ``` Examples: ```bash > verus getrawtransaction \"mytxid\" > verus getrawtransaction \"mytxid\" 1 > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `sendrawtransaction \"hexstring\" ( allowhighfees )` Submits raw transaction (serialized, hex-encoded) to local node and network.Also see createrawtransaction and signrawtransaction calls.#### Arguments: 1. \"hexstring\"  (string, required) The hex string of the raw transaction) 2. allowhighfees  (boolean, optional, default=false) Allow high fees#### Result: \"hex\"       (string) The transaction hash in hexExamples:Create a transaction ```bash > verus createrawtransaction \"[{\\\"txid\\\" : \\\"mytxid\\\",\\\"vout\\\":0}]\" \"{\\\"myaddress\\\":0.01}\" ``` Sign the transaction, and get back the hex ```bash > verus signrawtransaction \"myhex\" ``` Send the transaction (signed hex) ```bash > verus sendrawtransaction \"signedhex\" ``` As a json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `signrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype )` Sign inputs for raw transaction (serialized, hex-encoded). The second optional argument (may be null) is an array of previous transaction outputs that this transaction depends on but may not yet be in the block chain. The third optional argument (may be null) is an array of base58-encoded private keys that, if given, will be the only keys used to sign the transaction.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `createrawtransaction` and `signrawtransaction` commands in Verus?",
            "The `createrawtransaction` command creates a raw transaction, while the `signrawtransaction` command signs inputs for a raw transaction. These commands are used together to create and sign a transaction before submitting it to the network using the `sendrawtransaction` command.",
            "    ],    \"onetimePubKey\" : \"hex\", (string) the onetime public key used to encrypt the ciphertexts    \"randomSeed\" : \"hex\",   (string) the random seed    \"macs\" : [         (json array of string)     \"hex\"           (string) input note MAC     ,...    ],    \"proof\" : \"hex\",     (string) the zero-knowledge proof    \"ciphertexts\" : [      (json array of string)     \"hex\"           (string) output note ciphertext     ,...    ]   }   ,...  ],  \"blockhash\" : \"hash\",  (string) the block hash  \"confirmations\" : n,   (numeric) The confirmations  \"time\" : ttt,       (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT)  \"blocktime\" : ttt     (numeric) The block time in seconds since epoch (Jan 1 1970 GMT) } ``` Examples: ```bash > verus getrawtransaction \"mytxid\" > verus getrawtransaction \"mytxid\" 1 > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getrawtransaction\", \"params\": [\"mytxid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `sendrawtransaction \"hexstring\" ( allowhighfees )` Submits raw transaction (serialized, hex-encoded) to local node and network.Also see createrawtransaction and signrawtransaction calls.#### Arguments: 1. \"hexstring\"  (string, required) The hex string of the raw transaction) 2. allowhighfees  (boolean, optional, default=false) Allow high fees#### Result: \"hex\"       (string) The transaction hash in hexExamples:Create a transaction ```bash > verus createrawtransaction \"[{\\\"txid\\\" : \\\"mytxid\\\",\\\"vout\\\":0}]\" \"{\\\"myaddress\\\":0.01}\" ``` Sign the transaction, and get back the hex ```bash > verus signrawtransaction \"myhex\" ``` Send the transaction (signed hex) ```bash > verus sendrawtransaction \"signedhex\" ``` As a json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"sendrawtransaction\", \"params\": [\"signedhex\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `signrawtransaction \"hexstring\" ( [{\"txid\":\"id\",\"vout\":n,\"scriptPubKey\":\"hex\",\"redeemScript\":\"hex\"},...] [\"privatekey1\",...] sighashtype )` Sign inputs for raw transaction (serialized, hex-encoded). The second optional argument (may be null) is an array of previous transaction outputs that this transaction depends on but may not yet be in the block chain. The third optional argument (may be null) is an array of base58-encoded private keys that, if given, will be the only keys used to sign the transaction.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "5fa75210-88b6-42d7-8d45-aea93c1e8f1b"
]