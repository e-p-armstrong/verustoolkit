[
    [
        [
            "How can I verify the authenticity of a downloaded Verus package?",
            "To verify the authenticity of a downloaded Verus package, follow these steps:\n\n1. Extract the downloaded archive.\n2. Verify the signature for the extracted archive using the extracted text file, which contains the signer, standard sha256 file checksum, and signature.\n3. Extract the archive to the desired directory.\n\nYou can use the `verifyfile` or `verifyhash` commands in the Verus CLI to verify the signature.",
            "## Verifying Downloads A txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\". 1) Extract downloaded archive 2) Verify signature for the extracted archive using the extracted text file. 3) Extract archive to desired directory ### CLI examples **Verifying file directly** ``` ./verus verifyfile \"Verus Coin Foundation Releases@\" AdZEGQABQSCMoIi7MwgJwB2fXqry1Q2jMu8rIQUiRq+zRezdyhomTGwO1aVZN048dPAJR7dTIDUoA+osY2mx1Kfw33S8D5R7 /Downloads/Verus-CLI-Linux-v0.7.4-x86_64/Verus-CLI-Linux-v0.7.4-x86_64.tar.gz ``` **Verifying using a checksum** ``` ./verus verifyhash \"Verus Coin Foundation Releases@\" AdZEGQABQSCMoIi7MwgJwB2fXqry1Q2jMu8rIQUiRq+zRezdyhomTGwO1aVZN048dPAJR7dTIDUoA+osY2mx1Kfw33S8D5R7 2b7fcb26fc38f34e1fd77e581716c1cd8b4eee1f0f01627dfd2ef56170a8e2f4 ```**The result will be true if the signature is valid.** ``` true ``` ## Announcing NON-MANDATORY, RECOMMENDED UPDATE FOCUSED ON NETWORK CONNECTIVITY AND ROBUSTNESS IMPROVEMENTS v 0.7.3-10. v0.7.3-10 has very minimal updates targeted at networking robustness - faster response to notary inconsistencies and a check for detecting a corrupt index that if present, might otherwise prevent a node from staying synced.## Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ```  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>  ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ```  verus signrawtransaction <raw_hex_transaction>  ``` After the last necessary signature is applied, broadcast on the network using:  ```  verus sendrawtransaction <raw_hex_signed_transaction>  ```## New Verus Multicurrency, Multichain, DeFi Enabled Testnet With an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is the purpose of the `verifyfile` and `verifyhash` commands in the Verus CLI?",
            "The `verifyfile` and `verifyhash` commands in the Verus CLI are used to verify the signature of a file or a checksum, respectively. They ensure that the file or checksum has been signed by a trusted identity, in this case, \"Verus Coin Foundation Releases@\".",
            "## Verifying Downloads A txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\". 1) Extract downloaded archive 2) Verify signature for the extracted archive using the extracted text file. 3) Extract archive to desired directory ### CLI examples **Verifying file directly** ``` ./verus verifyfile \"Verus Coin Foundation Releases@\" AdZEGQABQSCMoIi7MwgJwB2fXqry1Q2jMu8rIQUiRq+zRezdyhomTGwO1aVZN048dPAJR7dTIDUoA+osY2mx1Kfw33S8D5R7 /Downloads/Verus-CLI-Linux-v0.7.4-x86_64/Verus-CLI-Linux-v0.7.4-x86_64.tar.gz ``` **Verifying using a checksum** ``` ./verus verifyhash \"Verus Coin Foundation Releases@\" AdZEGQABQSCMoIi7MwgJwB2fXqry1Q2jMu8rIQUiRq+zRezdyhomTGwO1aVZN048dPAJR7dTIDUoA+osY2mx1Kfw33S8D5R7 2b7fcb26fc38f34e1fd77e581716c1cd8b4eee1f0f01627dfd2ef56170a8e2f4 ```**The result will be true if the signature is valid.** ``` true ``` ## Announcing NON-MANDATORY, RECOMMENDED UPDATE FOCUSED ON NETWORK CONNECTIVITY AND ROBUSTNESS IMPROVEMENTS v 0.7.3-10. v0.7.3-10 has very minimal updates targeted at networking robustness - faster response to notary inconsistencies and a check for detecting a corrupt index that if present, might otherwise prevent a node from staying synced.## Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ```  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>  ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ```  verus signrawtransaction <raw_hex_transaction>  ``` After the last necessary signature is applied, broadcast on the network using:  ```  verus sendrawtransaction <raw_hex_signed_transaction>  ```## New Verus Multicurrency, Multichain, DeFi Enabled Testnet With an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What does it mean if the result of the `verifyfile` or `verifyhash` command is `true`?",
            "If the result of the `verifyfile` or `verifyhash` command is `true`, it means that the signature is valid, and the file or checksum has been signed by the trusted identity.",
            "## Verifying Downloads A txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\". 1) Extract downloaded archive 2) Verify signature for the extracted archive using the extracted text file. 3) Extract archive to desired directory ### CLI examples **Verifying file directly** ``` ./verus verifyfile \"Verus Coin Foundation Releases@\" AdZEGQABQSCMoIi7MwgJwB2fXqry1Q2jMu8rIQUiRq+zRezdyhomTGwO1aVZN048dPAJR7dTIDUoA+osY2mx1Kfw33S8D5R7 /Downloads/Verus-CLI-Linux-v0.7.4-x86_64/Verus-CLI-Linux-v0.7.4-x86_64.tar.gz ``` **Verifying using a checksum** ``` ./verus verifyhash \"Verus Coin Foundation Releases@\" AdZEGQABQSCMoIi7MwgJwB2fXqry1Q2jMu8rIQUiRq+zRezdyhomTGwO1aVZN048dPAJR7dTIDUoA+osY2mx1Kfw33S8D5R7 2b7fcb26fc38f34e1fd77e581716c1cd8b4eee1f0f01627dfd2ef56170a8e2f4 ```**The result will be true if the signature is valid.** ``` true ``` ## Announcing NON-MANDATORY, RECOMMENDED UPDATE FOCUSED ON NETWORK CONNECTIVITY AND ROBUSTNESS IMPROVEMENTS v 0.7.3-10. v0.7.3-10 has very minimal updates targeted at networking robustness - faster response to notary inconsistencies and a check for detecting a corrupt index that if present, might otherwise prevent a node from staying synced.## Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ```  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>  ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ```  verus signrawtransaction <raw_hex_transaction>  ``` After the last necessary signature is applied, broadcast on the network using:  ```  verus sendrawtransaction <raw_hex_signed_transaction>  ```## New Verus Multicurrency, Multichain, DeFi Enabled Testnet With an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How can I sign transactions from multi-signature IDs on the Verus network?",
            "To sign transactions from multi-signature IDs on the Verus network, follow these steps:\n\n1. Create a transaction using the `sendcurrency` command.\n2. Get the raw transaction data using the `z_getoperationstatus` command.\n3. Take the raw hex transaction data to each additional wallet(s) containing the additional signing addresses/IDs.\n4. Sign the raw transaction data using the `signrawtransaction` command.\n5. After the last necessary signature is applied, broadcast the signed transaction on the network using the `sendrawtransaction` command.",
            "## Verifying Downloads A txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\". 1) Extract downloaded archive 2) Verify signature for the extracted archive using the extracted text file. 3) Extract archive to desired directory ### CLI examples **Verifying file directly** ``` ./verus verifyfile \"Verus Coin Foundation Releases@\" AdZEGQABQSCMoIi7MwgJwB2fXqry1Q2jMu8rIQUiRq+zRezdyhomTGwO1aVZN048dPAJR7dTIDUoA+osY2mx1Kfw33S8D5R7 /Downloads/Verus-CLI-Linux-v0.7.4-x86_64/Verus-CLI-Linux-v0.7.4-x86_64.tar.gz ``` **Verifying using a checksum** ``` ./verus verifyhash \"Verus Coin Foundation Releases@\" AdZEGQABQSCMoIi7MwgJwB2fXqry1Q2jMu8rIQUiRq+zRezdyhomTGwO1aVZN048dPAJR7dTIDUoA+osY2mx1Kfw33S8D5R7 2b7fcb26fc38f34e1fd77e581716c1cd8b4eee1f0f01627dfd2ef56170a8e2f4 ```**The result will be true if the signature is valid.** ``` true ``` ## Announcing NON-MANDATORY, RECOMMENDED UPDATE FOCUSED ON NETWORK CONNECTIVITY AND ROBUSTNESS IMPROVEMENTS v 0.7.3-10. v0.7.3-10 has very minimal updates targeted at networking robustness - faster response to notary inconsistencies and a check for detecting a corrupt index that if present, might otherwise prevent a node from staying synced.## Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ```  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>  ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ```  verus signrawtransaction <raw_hex_transaction>  ``` After the last necessary signature is applied, broadcast on the network using:  ```  verus sendrawtransaction <raw_hex_signed_transaction>  ```## New Verus Multicurrency, Multichain, DeFi Enabled Testnet With an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are some features of the new Verus Multicurrency, Multichain, DeFi Enabled Testnet?",
            "The new Verus Multicurrency, Multichain, DeFi Enabled Testnet features an easy GUI for basic operations and a command line for more advanced functions. It allows users to create new identities, currencies, liquidity pools, and blockchains without any programming. It also enables sending currencies worldwide on the same chain or across blockchains with ease, and converting currencies to others on the network without an exchange.",
            "## Verifying Downloads A txt file containing the signer, standard sha256 file checksum, and signature, is included for each download. These packages have been signed with the identity \"Verus Coin Foundation Releases@\". 1) Extract downloaded archive 2) Verify signature for the extracted archive using the extracted text file. 3) Extract archive to desired directory ### CLI examples **Verifying file directly** ``` ./verus verifyfile \"Verus Coin Foundation Releases@\" AdZEGQABQSCMoIi7MwgJwB2fXqry1Q2jMu8rIQUiRq+zRezdyhomTGwO1aVZN048dPAJR7dTIDUoA+osY2mx1Kfw33S8D5R7 /Downloads/Verus-CLI-Linux-v0.7.4-x86_64/Verus-CLI-Linux-v0.7.4-x86_64.tar.gz ``` **Verifying using a checksum** ``` ./verus verifyhash \"Verus Coin Foundation Releases@\" AdZEGQABQSCMoIi7MwgJwB2fXqry1Q2jMu8rIQUiRq+zRezdyhomTGwO1aVZN048dPAJR7dTIDUoA+osY2mx1Kfw33S8D5R7 2b7fcb26fc38f34e1fd77e581716c1cd8b4eee1f0f01627dfd2ef56170a8e2f4 ```**The result will be true if the signature is valid.** ``` true ``` ## Announcing NON-MANDATORY, RECOMMENDED UPDATE FOCUSED ON NETWORK CONNECTIVITY AND ROBUSTNESS IMPROVEMENTS v 0.7.3-10. v0.7.3-10 has very minimal updates targeted at networking robustness - faster response to notary inconsistencies and a check for detecting a corrupt index that if present, might otherwise prevent a node from staying synced.## Signing transactions from multi-signature IDs (testnet and mainnet) Create transaction, get raw transaction data:  ```  verus sendcurrency <multi-signature-ID>@ '[{\"address\":\"<destination_address>\",\"amount\":<transaction_amount>}]'  verus z_getoperationstatus <operation_id_returned_by_sendcurrency>  ``` Take the raw hex transaction data provided by z_getoperationstatus to each additional wallet(s) containing the additional signing addresses/IDs:  ```  verus signrawtransaction <raw_hex_transaction>  ``` After the last necessary signature is applied, broadcast on the network using:  ```  verus sendrawtransaction <raw_hex_signed_transaction>  ```## New Verus Multicurrency, Multichain, DeFi Enabled Testnet With an easy GUI for basic operations or command line for more advanced functions. Without any programming, you can now create new identities, currencies, liquidity pools, and blockchains for your business, your government, your projects, a worthy cause, your family, or your next decentralized application suite. Send currencies worldwide on the same chain, or across blockchains with ease. Even convert currencies to others on the network without an exchange by sending to yourself and converting along the way.",
            "./raw_txt_input/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "33e367bf-977a-456b-8dae-080d5e52145a"
]