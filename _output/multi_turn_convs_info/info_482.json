[
    [
        [
            "What is the purpose of the `getspentinfo` command in Verus?",
            "The `getspentinfo` command is used to retrieve information about a spent transaction output. It takes two arguments: the transaction ID (`txid`) and the index of the spending input. The command returns a JSON object containing the transaction ID, the spending input index, and other information.",
            "#### Arguments: ```json {  \"txid\" (string) The hex string of the txid  \"index\" (number) The start block height } ``` #### Result: ```json {  \"txid\" (string) The transaction id  \"index\" (number) The spending input index  ,... } ``` Examples: ```bash > verus getspentinfo '{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getspentinfo\", \"params\": [{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `gettxout \"txid\" n ( includemempool )` Returns details about an unspent transaction output.#### Arguments: ``` 1. \"txid\"     (string, required) The transaction id 2. n        (numeric, required) vout value 3. includemempool (boolean, optional) Whether to include the mempool ```#### Result: ```json {  \"bestblock\" : \"hash\",   (string) the block hash  \"confirmations\" : n,   (numeric) The number of confirmations  \"value\" : x.xxx,     (numeric) The transaction value in VRSC  \"scriptPubKey\" : {    (json object)   \"asm\" : \"code\",    (string)   \"hex\" : \"hex\",     (string)   \"reqSigs\" : n,     (numeric) Number of required signatures   \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash   \"addresses\" : [    (array of string) array of Komodo addresses     \"verusaddress\"   (string) Komodo address     ,...   ]  },  \"version\" : n,      (numeric) The version  \"coinbase\" : true|false  (boolean) Coinbase or not } ``` Examples:Get unspent transactions ```bash > verus listunspent ``` View the details ```bash > verus gettxout \"txid\" 1 ``` As a json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## `gettxoutproof [\"txid\",...] ( blockhash )` Returns a hex-encoded proof that \"txid\" was included in a block.NOTE: By default this function only works sometimes. This is when there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option or specify the block in which the transaction is included in manually (by blockhash).Return the raw transaction data.#### Arguments: ```json 1. \"txids\"    (string) A json array of txids to filter   [    \"txid\"   (string) A transaction hash    ,...   ] ``` 2. \"block hash\" (string, optional) If specified, looks for txid in the block with this hash",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How do I use the `getspentinfo` command to retrieve information about a spent transaction output?",
            "You can use the `getspentinfo` command in Verus by providing the transaction ID and the index of the spending input as arguments. For example:\n\n```bash\nverus getspentinfo '{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}'\n```\n\nAlternatively, you can also use the JSON RPC method to call `getspentinfo`:\n\n```bash\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getspentinfo\", \"params\": [{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "#### Arguments: ```json {  \"txid\" (string) The hex string of the txid  \"index\" (number) The start block height } ``` #### Result: ```json {  \"txid\" (string) The transaction id  \"index\" (number) The spending input index  ,... } ``` Examples: ```bash > verus getspentinfo '{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getspentinfo\", \"params\": [{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `gettxout \"txid\" n ( includemempool )` Returns details about an unspent transaction output.#### Arguments: ``` 1. \"txid\"     (string, required) The transaction id 2. n        (numeric, required) vout value 3. includemempool (boolean, optional) Whether to include the mempool ```#### Result: ```json {  \"bestblock\" : \"hash\",   (string) the block hash  \"confirmations\" : n,   (numeric) The number of confirmations  \"value\" : x.xxx,     (numeric) The transaction value in VRSC  \"scriptPubKey\" : {    (json object)   \"asm\" : \"code\",    (string)   \"hex\" : \"hex\",     (string)   \"reqSigs\" : n,     (numeric) Number of required signatures   \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash   \"addresses\" : [    (array of string) array of Komodo addresses     \"verusaddress\"   (string) Komodo address     ,...   ]  },  \"version\" : n,      (numeric) The version  \"coinbase\" : true|false  (boolean) Coinbase or not } ``` Examples:Get unspent transactions ```bash > verus listunspent ``` View the details ```bash > verus gettxout \"txid\" 1 ``` As a json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## `gettxoutproof [\"txid\",...] ( blockhash )` Returns a hex-encoded proof that \"txid\" was included in a block.NOTE: By default this function only works sometimes. This is when there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option or specify the block in which the transaction is included in manually (by blockhash).Return the raw transaction data.#### Arguments: ```json 1. \"txids\"    (string) A json array of txids to filter   [    \"txid\"   (string) A transaction hash    ,...   ] ``` 2. \"block hash\" (string, optional) If specified, looks for txid in the block with this hash",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `gettxout` command in Verus?",
            "The `gettxout` command is used to retrieve information about an unspent transaction output. It takes three arguments: the transaction ID (`txid`), the vout value, and an optional boolean flag to include the mempool. The command returns a JSON object containing details about the unspent transaction output, such as the block hash, confirmations, value, scriptPubKey, and more.",
            "#### Arguments: ```json {  \"txid\" (string) The hex string of the txid  \"index\" (number) The start block height } ``` #### Result: ```json {  \"txid\" (string) The transaction id  \"index\" (number) The spending input index  ,... } ``` Examples: ```bash > verus getspentinfo '{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getspentinfo\", \"params\": [{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `gettxout \"txid\" n ( includemempool )` Returns details about an unspent transaction output.#### Arguments: ``` 1. \"txid\"     (string, required) The transaction id 2. n        (numeric, required) vout value 3. includemempool (boolean, optional) Whether to include the mempool ```#### Result: ```json {  \"bestblock\" : \"hash\",   (string) the block hash  \"confirmations\" : n,   (numeric) The number of confirmations  \"value\" : x.xxx,     (numeric) The transaction value in VRSC  \"scriptPubKey\" : {    (json object)   \"asm\" : \"code\",    (string)   \"hex\" : \"hex\",     (string)   \"reqSigs\" : n,     (numeric) Number of required signatures   \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash   \"addresses\" : [    (array of string) array of Komodo addresses     \"verusaddress\"   (string) Komodo address     ,...   ]  },  \"version\" : n,      (numeric) The version  \"coinbase\" : true|false  (boolean) Coinbase or not } ``` Examples:Get unspent transactions ```bash > verus listunspent ``` View the details ```bash > verus gettxout \"txid\" 1 ``` As a json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## `gettxoutproof [\"txid\",...] ( blockhash )` Returns a hex-encoded proof that \"txid\" was included in a block.NOTE: By default this function only works sometimes. This is when there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option or specify the block in which the transaction is included in manually (by blockhash).Return the raw transaction data.#### Arguments: ```json 1. \"txids\"    (string) A json array of txids to filter   [    \"txid\"   (string) A transaction hash    ,...   ] ``` 2. \"block hash\" (string, optional) If specified, looks for txid in the block with this hash",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How do I use the `gettxout` command to retrieve information about an unspent transaction output?",
            "You can use the `gettxout` command in Verus by providing the transaction ID and the vout value as arguments. For example:\n\n```bash\nverus gettxout \"txid\" 1\n```\n\nAlternatively, you can also use the JSON RPC method to call `gettxout`:\n\n```bash\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```",
            "#### Arguments: ```json {  \"txid\" (string) The hex string of the txid  \"index\" (number) The start block height } ``` #### Result: ```json {  \"txid\" (string) The transaction id  \"index\" (number) The spending input index  ,... } ``` Examples: ```bash > verus getspentinfo '{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getspentinfo\", \"params\": [{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `gettxout \"txid\" n ( includemempool )` Returns details about an unspent transaction output.#### Arguments: ``` 1. \"txid\"     (string, required) The transaction id 2. n        (numeric, required) vout value 3. includemempool (boolean, optional) Whether to include the mempool ```#### Result: ```json {  \"bestblock\" : \"hash\",   (string) the block hash  \"confirmations\" : n,   (numeric) The number of confirmations  \"value\" : x.xxx,     (numeric) The transaction value in VRSC  \"scriptPubKey\" : {    (json object)   \"asm\" : \"code\",    (string)   \"hex\" : \"hex\",     (string)   \"reqSigs\" : n,     (numeric) Number of required signatures   \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash   \"addresses\" : [    (array of string) array of Komodo addresses     \"verusaddress\"   (string) Komodo address     ,...   ]  },  \"version\" : n,      (numeric) The version  \"coinbase\" : true|false  (boolean) Coinbase or not } ``` Examples:Get unspent transactions ```bash > verus listunspent ``` View the details ```bash > verus gettxout \"txid\" 1 ``` As a json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## `gettxoutproof [\"txid\",...] ( blockhash )` Returns a hex-encoded proof that \"txid\" was included in a block.NOTE: By default this function only works sometimes. This is when there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option or specify the block in which the transaction is included in manually (by blockhash).Return the raw transaction data.#### Arguments: ```json 1. \"txids\"    (string) A json array of txids to filter   [    \"txid\"   (string) A transaction hash    ,...   ] ``` 2. \"block hash\" (string, optional) If specified, looks for txid in the block with this hash",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `gettxoutproof` command in Verus?",
            "The `gettxoutproof` command is used to retrieve a hex-encoded proof that a transaction was included in a block. It takes two arguments: a JSON array of transaction IDs and an optional block hash. The command returns a hex-encoded proof that the transaction was included in the specified block.",
            "#### Arguments: ```json {  \"txid\" (string) The hex string of the txid  \"index\" (number) The start block height } ``` #### Result: ```json {  \"txid\" (string) The transaction id  \"index\" (number) The spending input index  ,... } ``` Examples: ```bash > verus getspentinfo '{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getspentinfo\", \"params\": [{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `gettxout \"txid\" n ( includemempool )` Returns details about an unspent transaction output.#### Arguments: ``` 1. \"txid\"     (string, required) The transaction id 2. n        (numeric, required) vout value 3. includemempool (boolean, optional) Whether to include the mempool ```#### Result: ```json {  \"bestblock\" : \"hash\",   (string) the block hash  \"confirmations\" : n,   (numeric) The number of confirmations  \"value\" : x.xxx,     (numeric) The transaction value in VRSC  \"scriptPubKey\" : {    (json object)   \"asm\" : \"code\",    (string)   \"hex\" : \"hex\",     (string)   \"reqSigs\" : n,     (numeric) Number of required signatures   \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash   \"addresses\" : [    (array of string) array of Komodo addresses     \"verusaddress\"   (string) Komodo address     ,...   ]  },  \"version\" : n,      (numeric) The version  \"coinbase\" : true|false  (boolean) Coinbase or not } ``` Examples:Get unspent transactions ```bash > verus listunspent ``` View the details ```bash > verus gettxout \"txid\" 1 ``` As a json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## `gettxoutproof [\"txid\",...] ( blockhash )` Returns a hex-encoded proof that \"txid\" was included in a block.NOTE: By default this function only works sometimes. This is when there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option or specify the block in which the transaction is included in manually (by blockhash).Return the raw transaction data.#### Arguments: ```json 1. \"txids\"    (string) A json array of txids to filter   [    \"txid\"   (string) A transaction hash    ,...   ] ``` 2. \"block hash\" (string, optional) If specified, looks for txid in the block with this hash",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How do I use the `gettxoutproof` command to retrieve a hex-encoded proof that a transaction was included in a block?",
            "You can use the `gettxoutproof` command in Verus by providing a JSON array of transaction IDs and an optional block hash as arguments. For example:\n\n```json\nverus gettxoutproof [\"txid1\", \"txid2\",...] \"blockhash\"\n```\n\nNote that by default, `gettxoutproof` only works if there is an unspent output in the UTXO for the transaction. To make it always work, you need to maintain a transaction index using the `-txindex` command line option or specify the block in which the transaction is included manually (by block hash).",
            "#### Arguments: ```json {  \"txid\" (string) The hex string of the txid  \"index\" (number) The start block height } ``` #### Result: ```json {  \"txid\" (string) The transaction id  \"index\" (number) The spending input index  ,... } ``` Examples: ```bash > verus getspentinfo '{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getspentinfo\", \"params\": [{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `gettxout \"txid\" n ( includemempool )` Returns details about an unspent transaction output.#### Arguments: ``` 1. \"txid\"     (string, required) The transaction id 2. n        (numeric, required) vout value 3. includemempool (boolean, optional) Whether to include the mempool ```#### Result: ```json {  \"bestblock\" : \"hash\",   (string) the block hash  \"confirmations\" : n,   (numeric) The number of confirmations  \"value\" : x.xxx,     (numeric) The transaction value in VRSC  \"scriptPubKey\" : {    (json object)   \"asm\" : \"code\",    (string)   \"hex\" : \"hex\",     (string)   \"reqSigs\" : n,     (numeric) Number of required signatures   \"type\" : \"pubkeyhash\", (string) The type, eg pubkeyhash   \"addresses\" : [    (array of string) array of Komodo addresses     \"verusaddress\"   (string) Komodo address     ,...   ]  },  \"version\" : n,      (numeric) The version  \"coinbase\" : true|false  (boolean) Coinbase or not } ``` Examples:Get unspent transactions ```bash > verus listunspent ``` View the details ```bash > verus gettxout \"txid\" 1 ``` As a json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"gettxout\", \"params\": [\"txid\", 1] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```## `gettxoutproof [\"txid\",...] ( blockhash )` Returns a hex-encoded proof that \"txid\" was included in a block.NOTE: By default this function only works sometimes. This is when there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option or specify the block in which the transaction is included in manually (by blockhash).Return the raw transaction data.#### Arguments: ```json 1. \"txids\"    (string) A json array of txids to filter   [    \"txid\"   (string) A transaction hash    ,...   ] ``` 2. \"block hash\" (string, optional) If specified, looks for txid in the block with this hash",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "49e10e50-0880-4d78-98a7-5863698804e0"
]