[
    [
        [
            "What is the purpose of the `getpendingtransfers` command in Verus?",
            "The `getpendingtransfers` command is used to retrieve all pending transfers for a particular chain that have not yet been aggregated into an export. It takes an optional chain name as its argument and returns a JSON object with the pending transfers.",
            "#### Arguments:  \"challengerequests\"      (array, required) one or more challenge requests for unconfirmed notarizations on a bridged system ```json [  {   \"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\",   \"evidence\":{CNotaryEvidence},   \"entropyhash\":\"hex\",   \"proveheight\":n,   \"atheight\":n  },  {\"type\":\"vrsc::evidence.primaryproof\" || \"iKDesmiEkEjDG61nQSZJSGhWvC8x8xA578\",    \"priornotarizationref\":{CUTXORef} || \"priorroot\":{CProofRoot  },  \"challengeroots\":  [   {    \"indexkey\":{object},    \"proofroot\":{CProofRoot}   },  ...  ],  \"evidence\":{CNotaryEvidence},  \"entropyhash\":\"hex\",  \"confirmnotarization\":{newnotarization}, |  \"confirmroot\":{CPRoofRoot}},  \"fromheight\":n,  \"toheight\":n},  ... ] ``` #### Results: ```json {\"evidence\":[{CNotaryEvidence}, ...]  (array) notary evidence challenges, including proofs for challenges requested ``` #### Examples: ```bash > verus getnotarizationproofs '[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationproofs\", \"params\": [[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getpendingtransfers \"chainname\"` Returns all pending transfers for a particular chain that have not yet been aggregated into an export. #### Arguments: ``` 1. \"chainname\"           (string, optional) name of the chain to look for. no parameter returns current chain in daemon. ``` #### Result: ```json  {  } ``` Examples: ```bash > verus getpendingtransfers \"chainname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpendingtransfers\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getreservedeposits \"currencyname\"` Returns all deposits under control of the specified currency or chain. If the currency is of an external system or chain, all deposits will be under the control of that system or chain only, not its independent currencies.#### Arguments: 1. \"currencyname\"    (string, optional) full name or i-ID of controlling currency#### Result: ```json  {  } ``` Examples: ```bash > verus getreservedeposits \"currencyname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreservedeposits\", \"params\": [\"currencyname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How can I use the `getnotarizationproofs` command to retrieve notary evidence challenges for a particular chain?",
            "You can use the `getnotarizationproofs` command to retrieve notary evidence challenges for a particular chain by specifying the challenge requests for that chain as the argument. For example:\n```bash\nverus getnotarizationproofs '[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n},...]'\n```",
            "#### Arguments:  \"challengerequests\"      (array, required) one or more challenge requests for unconfirmed notarizations on a bridged system ```json [  {   \"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\",   \"evidence\":{CNotaryEvidence},   \"entropyhash\":\"hex\",   \"proveheight\":n,   \"atheight\":n  },  {\"type\":\"vrsc::evidence.primaryproof\" || \"iKDesmiEkEjDG61nQSZJSGhWvC8x8xA578\",    \"priornotarizationref\":{CUTXORef} || \"priorroot\":{CProofRoot  },  \"challengeroots\":  [   {    \"indexkey\":{object},    \"proofroot\":{CProofRoot}   },  ...  ],  \"evidence\":{CNotaryEvidence},  \"entropyhash\":\"hex\",  \"confirmnotarization\":{newnotarization}, |  \"confirmroot\":{CPRoofRoot}},  \"fromheight\":n,  \"toheight\":n},  ... ] ``` #### Results: ```json {\"evidence\":[{CNotaryEvidence}, ...]  (array) notary evidence challenges, including proofs for challenges requested ``` #### Examples: ```bash > verus getnotarizationproofs '[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationproofs\", \"params\": [[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getpendingtransfers \"chainname\"` Returns all pending transfers for a particular chain that have not yet been aggregated into an export. #### Arguments: ``` 1. \"chainname\"           (string, optional) name of the chain to look for. no parameter returns current chain in daemon. ``` #### Result: ```json  {  } ``` Examples: ```bash > verus getpendingtransfers \"chainname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getpendingtransfers\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getreservedeposits \"currencyname\"` Returns all deposits under control of the specified currency or chain. If the currency is of an external system or chain, all deposits will be under the control of that system or chain only, not its independent currencies.#### Arguments: 1. \"currencyname\"    (string, optional) full name or i-ID of controlling currency#### Result: ```json  {  } ``` Examples: ```bash > verus getreservedeposits \"currencyname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getreservedeposits\", \"params\": [\"currencyname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "9c1ff5d3-6ba5-47dd-9c10-96b5cf501958"
]