[
    [
        [
            "What is the purpose of the `setidentitytrust` command in Verus?",
            "The `setidentitytrust` command is used to manage identity trust lists in the Verus wallet. It allows you to clear all trust lists, set new ratings for specific IDs, remove ratings for certain IDs, and set the identity trust mode.",
            "### `setidentitytrust '{\"clearall\": bool, \"setratings\":{\"id\":JSONRatingObject,...}, \"removeratings\":[\"id\",...], \"identitytrustmode\":<n>}'` #### Arguments: ```json {   \"clearall\": bool               (bool, optional) clears all wallet identity trust lists before adding, removing, or trust mode operations   \"setratings\":{\"id\":JSONRatingObject,...}   (obj, optional) replaces ratings for specified IDs with those given   \"removeratings\":[\"id\",...]          (strarray, optional) erases ratings for IDs specified   \"identitytrustmode\": <n>           (number, optional) 0 = no restriction on sync, 1 = only sync to IDs rated approved, 2 = sync to all IDs but those on block list } ```#### Result no return on success, else error #### Examples ```bash > verus setidentitytrust '{\"clearall\": bool, \"setratings\":{\"id\":JSONRatingObject,...}, \"removeratings\":[\"id\",...], \"identitytrustmode\":<n>}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setidentitytrust\", \"params\": ['{\"clearall\": bool, \"setratings\":{\"id\":JSONRatingObject,...}, \"removeratings\":[\"id\",...], \"identitytrustmode\":<n>}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `signdata 'json'` Full json: ```json {  \"address\":\"i-address or friendly name (t-address will result in simple signature w/indicated hash and prefix, nothing else)\",  \"prefixstring\":\"extra string that is hashed during signature and must be supplied for verification\",   \"filename\":\"filepath/filename\" |   \"message\":\"any message\" |   \"vdxfdata\":\"vdxf encoded data\" |   \"messagehex\":\"hexdata\" |   \"messagebase64\":\"base64data\" |   \"datahash\":\"256bithex\" |   \"mmrdata\":[{    \"filename | serializedhex | serializedbase64 | vdxfdata | message | datahash\":\"str\"} |    \"strdata\"   ],  \"vdxfkeys\": [\"vdxfkey i-address\", ...],  \"vdxfkeynames\":[\"vdxfkeyname, object for getvdxfid API, or friendly name ID -- no i-addresses\", ...],  \"boundhashes\":[\"hexhash\", ...],  \"hashtype\": \"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\",  \"encrypttoaddress\": \"sapling address\",       granularly encrypt all data, either all decryptable with viewing key or parts using unique, SSKs  \"createmmr\":\"bool\",                 if true, 1 or more objects will be put into a merkle mountain range and the root signed  \"signature\":\"currentsig\" } ``` Generates a hash (SHA256 default if \"hashtype\" not specified) of the data, returns the hash, and signs it with parameters specified #### Arguments: ```json {  \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to use for signing.  \"file",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What are the optional arguments that can be passed to the `setidentitytrust` command?",
            "The optional arguments that can be passed to the `setidentitytrust` command are:\n\n* `clearall`: a boolean value that clears all wallet identity trust lists before adding, removing, or trust mode operations\n* `setratings`: an object that replaces ratings for specified IDs with those given\n* `removeratings`: an array of strings that erases ratings for IDs specified\n* `identitytrustmode`: a number that sets the identity trust mode (0 = no restriction on sync, 1 = only sync to IDs rated approved, 2 = sync to all IDs but those on block list)",
            "### `setidentitytrust '{\"clearall\": bool, \"setratings\":{\"id\":JSONRatingObject,...}, \"removeratings\":[\"id\",...], \"identitytrustmode\":<n>}'` #### Arguments: ```json {   \"clearall\": bool               (bool, optional) clears all wallet identity trust lists before adding, removing, or trust mode operations   \"setratings\":{\"id\":JSONRatingObject,...}   (obj, optional) replaces ratings for specified IDs with those given   \"removeratings\":[\"id\",...]          (strarray, optional) erases ratings for IDs specified   \"identitytrustmode\": <n>           (number, optional) 0 = no restriction on sync, 1 = only sync to IDs rated approved, 2 = sync to all IDs but those on block list } ```#### Result no return on success, else error #### Examples ```bash > verus setidentitytrust '{\"clearall\": bool, \"setratings\":{\"id\":JSONRatingObject,...}, \"removeratings\":[\"id\",...], \"identitytrustmode\":<n>}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setidentitytrust\", \"params\": ['{\"clearall\": bool, \"setratings\":{\"id\":JSONRatingObject,...}, \"removeratings\":[\"id\",...], \"identitytrustmode\":<n>}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `signdata 'json'` Full json: ```json {  \"address\":\"i-address or friendly name (t-address will result in simple signature w/indicated hash and prefix, nothing else)\",  \"prefixstring\":\"extra string that is hashed during signature and must be supplied for verification\",   \"filename\":\"filepath/filename\" |   \"message\":\"any message\" |   \"vdxfdata\":\"vdxf encoded data\" |   \"messagehex\":\"hexdata\" |   \"messagebase64\":\"base64data\" |   \"datahash\":\"256bithex\" |   \"mmrdata\":[{    \"filename | serializedhex | serializedbase64 | vdxfdata | message | datahash\":\"str\"} |    \"strdata\"   ],  \"vdxfkeys\": [\"vdxfkey i-address\", ...],  \"vdxfkeynames\":[\"vdxfkeyname, object for getvdxfid API, or friendly name ID -- no i-addresses\", ...],  \"boundhashes\":[\"hexhash\", ...],  \"hashtype\": \"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\",  \"encrypttoaddress\": \"sapling address\",       granularly encrypt all data, either all decryptable with viewing key or parts using unique, SSKs  \"createmmr\":\"bool\",                 if true, 1 or more objects will be put into a merkle mountain range and the root signed  \"signature\":\"currentsig\" } ``` Generates a hash (SHA256 default if \"hashtype\" not specified) of the data, returns the hash, and signs it with parameters specified #### Arguments: ```json {  \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to use for signing.  \"file",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `signdata` command in Verus?",
            "The `signdata` command is used to generate a hash of the provided data and sign it with the specified parameters. It returns the hash and the signature.",
            "### `setidentitytrust '{\"clearall\": bool, \"setratings\":{\"id\":JSONRatingObject,...}, \"removeratings\":[\"id\",...], \"identitytrustmode\":<n>}'` #### Arguments: ```json {   \"clearall\": bool               (bool, optional) clears all wallet identity trust lists before adding, removing, or trust mode operations   \"setratings\":{\"id\":JSONRatingObject,...}   (obj, optional) replaces ratings for specified IDs with those given   \"removeratings\":[\"id\",...]          (strarray, optional) erases ratings for IDs specified   \"identitytrustmode\": <n>           (number, optional) 0 = no restriction on sync, 1 = only sync to IDs rated approved, 2 = sync to all IDs but those on block list } ```#### Result no return on success, else error #### Examples ```bash > verus setidentitytrust '{\"clearall\": bool, \"setratings\":{\"id\":JSONRatingObject,...}, \"removeratings\":[\"id\",...], \"identitytrustmode\":<n>}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setidentitytrust\", \"params\": ['{\"clearall\": bool, \"setratings\":{\"id\":JSONRatingObject,...}, \"removeratings\":[\"id\",...], \"identitytrustmode\":<n>}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `signdata 'json'` Full json: ```json {  \"address\":\"i-address or friendly name (t-address will result in simple signature w/indicated hash and prefix, nothing else)\",  \"prefixstring\":\"extra string that is hashed during signature and must be supplied for verification\",   \"filename\":\"filepath/filename\" |   \"message\":\"any message\" |   \"vdxfdata\":\"vdxf encoded data\" |   \"messagehex\":\"hexdata\" |   \"messagebase64\":\"base64data\" |   \"datahash\":\"256bithex\" |   \"mmrdata\":[{    \"filename | serializedhex | serializedbase64 | vdxfdata | message | datahash\":\"str\"} |    \"strdata\"   ],  \"vdxfkeys\": [\"vdxfkey i-address\", ...],  \"vdxfkeynames\":[\"vdxfkeyname, object for getvdxfid API, or friendly name ID -- no i-addresses\", ...],  \"boundhashes\":[\"hexhash\", ...],  \"hashtype\": \"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\",  \"encrypttoaddress\": \"sapling address\",       granularly encrypt all data, either all decryptable with viewing key or parts using unique, SSKs  \"createmmr\":\"bool\",                 if true, 1 or more objects will be put into a merkle mountain range and the root signed  \"signature\":\"currentsig\" } ``` Generates a hash (SHA256 default if \"hashtype\" not specified) of the data, returns the hash, and signs it with parameters specified #### Arguments: ```json {  \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to use for signing.  \"file",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What are the required and optional arguments that can be passed to the `signdata` command?",
            "The required argument that can be passed to the `signdata` command is:\n\n* `address`: the transparent address or identity to use for signing (string, required)\n\nThe optional arguments that can be passed to the `signdata` command are:\n\n* `prefixstring`: an extra string that is hashed during signature and must be supplied for verification\n* `filename`, `message`, `vdxfdata`, `messagehex`, `messagebase64`, `datahash`: various data formats that can be used as input\n* `vdxfkeys`, `vdxfkeynames`: arrays of vdxf keys and names\n* `boundhashes`: an array of hex hashes\n* `hashtype`: the hash type to use (sha256, sha256D, blake2b, keccak256)\n* `encrypttoaddress`: a sapling address to granularly encrypt all data\n* `createmmr`: a boolean value to create a merkle mountain range and sign the root\n* `signature`: the current signature",
            "### `setidentitytrust '{\"clearall\": bool, \"setratings\":{\"id\":JSONRatingObject,...}, \"removeratings\":[\"id\",...], \"identitytrustmode\":<n>}'` #### Arguments: ```json {   \"clearall\": bool               (bool, optional) clears all wallet identity trust lists before adding, removing, or trust mode operations   \"setratings\":{\"id\":JSONRatingObject,...}   (obj, optional) replaces ratings for specified IDs with those given   \"removeratings\":[\"id\",...]          (strarray, optional) erases ratings for IDs specified   \"identitytrustmode\": <n>           (number, optional) 0 = no restriction on sync, 1 = only sync to IDs rated approved, 2 = sync to all IDs but those on block list } ```#### Result no return on success, else error #### Examples ```bash > verus setidentitytrust '{\"clearall\": bool, \"setratings\":{\"id\":JSONRatingObject,...}, \"removeratings\":[\"id\",...], \"identitytrustmode\":<n>}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"setidentitytrust\", \"params\": ['{\"clearall\": bool, \"setratings\":{\"id\":JSONRatingObject,...}, \"removeratings\":[\"id\",...], \"identitytrustmode\":<n>}'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `signdata 'json'` Full json: ```json {  \"address\":\"i-address or friendly name (t-address will result in simple signature w/indicated hash and prefix, nothing else)\",  \"prefixstring\":\"extra string that is hashed during signature and must be supplied for verification\",   \"filename\":\"filepath/filename\" |   \"message\":\"any message\" |   \"vdxfdata\":\"vdxf encoded data\" |   \"messagehex\":\"hexdata\" |   \"messagebase64\":\"base64data\" |   \"datahash\":\"256bithex\" |   \"mmrdata\":[{    \"filename | serializedhex | serializedbase64 | vdxfdata | message | datahash\":\"str\"} |    \"strdata\"   ],  \"vdxfkeys\": [\"vdxfkey i-address\", ...],  \"vdxfkeynames\":[\"vdxfkeyname, object for getvdxfid API, or friendly name ID -- no i-addresses\", ...],  \"boundhashes\":[\"hexhash\", ...],  \"hashtype\": \"sha256\" | \"sha256D\" | \"blake2b\" | \"keccak256\",  \"encrypttoaddress\": \"sapling address\",       granularly encrypt all data, either all decryptable with viewing key or parts using unique, SSKs  \"createmmr\":\"bool\",                 if true, 1 or more objects will be put into a merkle mountain range and the root signed  \"signature\":\"currentsig\" } ``` Generates a hash (SHA256 default if \"hashtype\" not specified) of the data, returns the hash, and signs it with parameters specified #### Arguments: ```json {  \"address\":\"t-addr or identity\"                (string, required) The transparent address or identity to use for signing.  \"file",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "cf9e8d5a-2381-47dd-9ff8-8eb662ad7f57"
]