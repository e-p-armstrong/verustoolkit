[
    [
        [
            "What information does the `getwalletinfo` command provide about my Verus wallet?",
            "The `getwalletinfo` command provides a range of information about your Verus wallet, including:\n\n* The wallet version\n* The total confirmed balance of the wallet in VRSC\n* The total confirmed reserve balance of the wallet in VRSC (for PBaaS reserve chains)\n* The total unconfirmed balance of the wallet in VRSC\n* The total unconfirmed reserve balance of the wallet in VRSC\n* The total immature balance of the wallet in VRSC\n* The total immature reserve balance of the wallet in VRSC\n* The eligible staking balance in VRSC\n* A JSON object with currencies and their balances\n* The total number of transactions in the wallet\n* The timestamp of the oldest pre-generated key in the key pool\n* The number of new keys pre-generated\n* The timestamp that the wallet is unlocked for transfers, or 0 if the wallet is locked\n* The transaction fee configuration, set in VRSC/kB\n* The BLAKE2b-256 hash of the HD seed",
            "#### Result: ```json {  \"walletversion\": xxxxx,   (numeric) the wallet version  \"balance\": xxxxxxx,     (numeric) the total confirmed balance of the wallet in VRSC  \"reserve_balance\": xxxxxxx, (numeric) for PBaaS reserve chains, the total confirmed reserve balance of the wallet in VRSC  \"unconfirmed_balance\": xxx, (numeric) the total unconfirmed balance of the wallet in VRSC  \"unconfirmed_reserve_balance\": xxx, (numeric) total unconfirmed reserve balance of the wallet in VRSC  \"immature_balance\": xxxxxx, (numeric) the total immature balance of the wallet in VRSC  \"immature_reserve_balance\": xxxxxx, (numeric) total immature reserve balance of the wallet in VRSC  \"eligible_staking_balance\": xxxxxx, (numeric) eligible staking balance in VRSC  \"reserve_balance\": {\"currency\":XXXXXX,...} (json) json with currencies and the balances  \"txcount\": xxxxxxx,     (numeric) the total number of transactions in the wallet  \"keypoololdest\": xxxxxx,  (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool  \"keypoolsize\": xxxx,    (numeric) how many new keys are pre-generated  \"unlocked_until\": ttt,   (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked  \"paytxfee\": x.xxxx,     (numeric) the transaction fee configuration, set in VRSC/kB  \"seedfp\": \"uint256\",    (string) the BLAKE2b-256 hash of the HD seed } ```Examples: ```bash > verus getwalletinfo > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `importaddress \"address\" ( \"label\" rescan )` Adds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend.#### Arguments: 1. \"address\"     (string, required) The address 2. \"label\"      (string, optional, default=\"\") An optional label 3. rescan        (boolean, optional, default=true) Rescan the wallet for transactionsNote: This call can take minutes to complete if rescan is true.Examples:Import an address with rescan ```bash > verus importaddress \"myaddress\" ``` Import using a label without rescan ```bash > verus importaddress \"myaddress\" \"testing\" false ``` As a JSON-RPC call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myaddress\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `importprivkey \"verusprivkey\" ( \"label\" rescan )` Adds a private key (as returned by dumpprivkey) to your wallet.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `importaddress` command in Verus?",
            "The `importaddress` command is used to add an address or script (in hex) that can be watched as if it were in your wallet, but cannot be used to spend. This allows you to track transactions related to that address without having control over the associated private key.",
            "#### Result: ```json {  \"walletversion\": xxxxx,   (numeric) the wallet version  \"balance\": xxxxxxx,     (numeric) the total confirmed balance of the wallet in VRSC  \"reserve_balance\": xxxxxxx, (numeric) for PBaaS reserve chains, the total confirmed reserve balance of the wallet in VRSC  \"unconfirmed_balance\": xxx, (numeric) the total unconfirmed balance of the wallet in VRSC  \"unconfirmed_reserve_balance\": xxx, (numeric) total unconfirmed reserve balance of the wallet in VRSC  \"immature_balance\": xxxxxx, (numeric) the total immature balance of the wallet in VRSC  \"immature_reserve_balance\": xxxxxx, (numeric) total immature reserve balance of the wallet in VRSC  \"eligible_staking_balance\": xxxxxx, (numeric) eligible staking balance in VRSC  \"reserve_balance\": {\"currency\":XXXXXX,...} (json) json with currencies and the balances  \"txcount\": xxxxxxx,     (numeric) the total number of transactions in the wallet  \"keypoololdest\": xxxxxx,  (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool  \"keypoolsize\": xxxx,    (numeric) how many new keys are pre-generated  \"unlocked_until\": ttt,   (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked  \"paytxfee\": x.xxxx,     (numeric) the transaction fee configuration, set in VRSC/kB  \"seedfp\": \"uint256\",    (string) the BLAKE2b-256 hash of the HD seed } ```Examples: ```bash > verus getwalletinfo > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `importaddress \"address\" ( \"label\" rescan )` Adds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend.#### Arguments: 1. \"address\"     (string, required) The address 2. \"label\"      (string, optional, default=\"\") An optional label 3. rescan        (boolean, optional, default=true) Rescan the wallet for transactionsNote: This call can take minutes to complete if rescan is true.Examples:Import an address with rescan ```bash > verus importaddress \"myaddress\" ``` Import using a label without rescan ```bash > verus importaddress \"myaddress\" \"testing\" false ``` As a JSON-RPC call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myaddress\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `importprivkey \"verusprivkey\" ( \"label\" rescan )` Adds a private key (as returned by dumpprivkey) to your wallet.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What are the arguments for the `importaddress` command?",
            "The `importaddress` command takes three arguments:\n\n1. \"address\" - a string, required, which is the address to be imported\n2. \"label\" - a string, optional, default=\"\", which is an optional label for the address\n3. rescan - a boolean, optional, default=true, which specifies whether to rescan the wallet for transactions",
            "#### Result: ```json {  \"walletversion\": xxxxx,   (numeric) the wallet version  \"balance\": xxxxxxx,     (numeric) the total confirmed balance of the wallet in VRSC  \"reserve_balance\": xxxxxxx, (numeric) for PBaaS reserve chains, the total confirmed reserve balance of the wallet in VRSC  \"unconfirmed_balance\": xxx, (numeric) the total unconfirmed balance of the wallet in VRSC  \"unconfirmed_reserve_balance\": xxx, (numeric) total unconfirmed reserve balance of the wallet in VRSC  \"immature_balance\": xxxxxx, (numeric) the total immature balance of the wallet in VRSC  \"immature_reserve_balance\": xxxxxx, (numeric) total immature reserve balance of the wallet in VRSC  \"eligible_staking_balance\": xxxxxx, (numeric) eligible staking balance in VRSC  \"reserve_balance\": {\"currency\":XXXXXX,...} (json) json with currencies and the balances  \"txcount\": xxxxxxx,     (numeric) the total number of transactions in the wallet  \"keypoololdest\": xxxxxx,  (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool  \"keypoolsize\": xxxx,    (numeric) how many new keys are pre-generated  \"unlocked_until\": ttt,   (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked  \"paytxfee\": x.xxxx,     (numeric) the transaction fee configuration, set in VRSC/kB  \"seedfp\": \"uint256\",    (string) the BLAKE2b-256 hash of the HD seed } ```Examples: ```bash > verus getwalletinfo > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `importaddress \"address\" ( \"label\" rescan )` Adds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend.#### Arguments: 1. \"address\"     (string, required) The address 2. \"label\"      (string, optional, default=\"\") An optional label 3. rescan        (boolean, optional, default=true) Rescan the wallet for transactionsNote: This call can take minutes to complete if rescan is true.Examples:Import an address with rescan ```bash > verus importaddress \"myaddress\" ``` Import using a label without rescan ```bash > verus importaddress \"myaddress\" \"testing\" false ``` As a JSON-RPC call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myaddress\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `importprivkey \"verusprivkey\" ( \"label\" rescan )` Adds a private key (as returned by dumpprivkey) to your wallet.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `importprivkey` command in Verus?",
            "The `importprivkey` command is used to add a private key (as returned by dumpprivkey) to your wallet. This allows you to use the associated address to spend funds.",
            "#### Result: ```json {  \"walletversion\": xxxxx,   (numeric) the wallet version  \"balance\": xxxxxxx,     (numeric) the total confirmed balance of the wallet in VRSC  \"reserve_balance\": xxxxxxx, (numeric) for PBaaS reserve chains, the total confirmed reserve balance of the wallet in VRSC  \"unconfirmed_balance\": xxx, (numeric) the total unconfirmed balance of the wallet in VRSC  \"unconfirmed_reserve_balance\": xxx, (numeric) total unconfirmed reserve balance of the wallet in VRSC  \"immature_balance\": xxxxxx, (numeric) the total immature balance of the wallet in VRSC  \"immature_reserve_balance\": xxxxxx, (numeric) total immature reserve balance of the wallet in VRSC  \"eligible_staking_balance\": xxxxxx, (numeric) eligible staking balance in VRSC  \"reserve_balance\": {\"currency\":XXXXXX,...} (json) json with currencies and the balances  \"txcount\": xxxxxxx,     (numeric) the total number of transactions in the wallet  \"keypoololdest\": xxxxxx,  (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool  \"keypoolsize\": xxxx,    (numeric) how many new keys are pre-generated  \"unlocked_until\": ttt,   (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked  \"paytxfee\": x.xxxx,     (numeric) the transaction fee configuration, set in VRSC/kB  \"seedfp\": \"uint256\",    (string) the BLAKE2b-256 hash of the HD seed } ```Examples: ```bash > verus getwalletinfo > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getwalletinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `importaddress \"address\" ( \"label\" rescan )` Adds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend.#### Arguments: 1. \"address\"     (string, required) The address 2. \"label\"      (string, optional, default=\"\") An optional label 3. rescan        (boolean, optional, default=true) Rescan the wallet for transactionsNote: This call can take minutes to complete if rescan is true.Examples:Import an address with rescan ```bash > verus importaddress \"myaddress\" ``` Import using a label without rescan ```bash > verus importaddress \"myaddress\" \"testing\" false ``` As a JSON-RPC call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"importaddress\", \"params\": [\"myaddress\", \"testing\", false] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `importprivkey \"verusprivkey\" ( \"label\" rescan )` Adds a private key (as returned by dumpprivkey) to your wallet.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "6ecc282d-9b1a-483d-8884-fee76f9b8849"
]