[
    [
        [
            "What is the purpose of the `createmultisig` command in Verus, and what are the required arguments?",
            "The `createmultisig` command is used to create a new multisig address. It requires two arguments: `nrequired` and `keys`. `nrequired` is the number of required signatures out of the n keys or addresses, and `keys` is a JSON array of keys which are Komodo addresses or hex-encoded public keys.",
            "#### Arguments: 1. nrequired  (numeric, required) The number of required signatures out of the n keys or addresses. 2. \"keys\"    (string, required) A json array of keys which are Komodo addresses or hex-encoded public keys ```json   [    \"key\"  (string) Komodo address or hex-encoded public key    ,...   ] ``` #### Result: ```json {  \"address\":\"multisigaddress\", (string) The value of the new multisig address.  \"redeemScript\":\"script\"    (string) The string value of the hex-encoded redemption script. } ``` Examples: Create a multisig address from 2 addresses ```bash > verus createmultisig 2 \"[\\\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\\\",\\\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\\\"]\" ``` As a json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\\\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\\\",\\\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `estimatefee nblocks` Estimates the approximate fee per kilobyte needed for a transaction to begin confirmation within nblocks blocks.#### Arguments: 1. nblocks   (numeric)#### Result: n :  (numeric) estimated fee-per-kilobyteminimum fee is returned if not enough transactions and blocks have been observed to make an estimate.Example: ```bash > verus estimatefee 6 ```### `estimatepriority nblocks` Estimates the approximate priority a zero-fee transaction needs to begin confirmation within nblocks blocks.#### Arguments: 1. nblocks   (numeric)#### Result: n :  (numeric) estimated priority-1.0 is returned if not enough transactions and blocks have been observed to make an estimate.Example: ```bash > verus estimatepriority 6 ```### `invalidateblock \"hash\"` Permanently marks a block as invalid, as if it violated a consensus rule.#### Arguments: 1. hash  (string, required) the hash of the block to mark as invalid### `jumblr_deposit \"depositaddress\"` ### `jumblr_pause` ### `jumblr_resume` ### `jumblr_secret \"secretaddress\"` ### `reconsiderblock \"hash\"` Removes invalidity status of a block and its descendants, reconsider them for activation. This can be used to undo the effects of invalidateblock.#### Arguments: 1. hash  (string, required) the hash of the block to reconsider#### Result:Examples: ```bash > verus invalidateblock \"blockhash\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"invalidateblock\", \"params\": [\"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `validateaddress \"verusaddress\"` Return information about the given Verus address.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the result of the `createmultisig` command, and what information does it provide?",
            "The result of the `createmultisig` command is a JSON object that contains two properties: `address` and `redeemScript`. The `address` property is the value of the new multisig address, and the `redeemScript` property is the string value of the hex-encoded redemption script.",
            "#### Arguments: 1. nrequired  (numeric, required) The number of required signatures out of the n keys or addresses. 2. \"keys\"    (string, required) A json array of keys which are Komodo addresses or hex-encoded public keys ```json   [    \"key\"  (string) Komodo address or hex-encoded public key    ,...   ] ``` #### Result: ```json {  \"address\":\"multisigaddress\", (string) The value of the new multisig address.  \"redeemScript\":\"script\"    (string) The string value of the hex-encoded redemption script. } ``` Examples: Create a multisig address from 2 addresses ```bash > verus createmultisig 2 \"[\\\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\\\",\\\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\\\"]\" ``` As a json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\\\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\\\",\\\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `estimatefee nblocks` Estimates the approximate fee per kilobyte needed for a transaction to begin confirmation within nblocks blocks.#### Arguments: 1. nblocks   (numeric)#### Result: n :  (numeric) estimated fee-per-kilobyteminimum fee is returned if not enough transactions and blocks have been observed to make an estimate.Example: ```bash > verus estimatefee 6 ```### `estimatepriority nblocks` Estimates the approximate priority a zero-fee transaction needs to begin confirmation within nblocks blocks.#### Arguments: 1. nblocks   (numeric)#### Result: n :  (numeric) estimated priority-1.0 is returned if not enough transactions and blocks have been observed to make an estimate.Example: ```bash > verus estimatepriority 6 ```### `invalidateblock \"hash\"` Permanently marks a block as invalid, as if it violated a consensus rule.#### Arguments: 1. hash  (string, required) the hash of the block to mark as invalid### `jumblr_deposit \"depositaddress\"` ### `jumblr_pause` ### `jumblr_resume` ### `jumblr_secret \"secretaddress\"` ### `reconsiderblock \"hash\"` Removes invalidity status of a block and its descendants, reconsider them for activation. This can be used to undo the effects of invalidateblock.#### Arguments: 1. hash  (string, required) the hash of the block to reconsider#### Result:Examples: ```bash > verus invalidateblock \"blockhash\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"invalidateblock\", \"params\": [\"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `validateaddress \"verusaddress\"` Return information about the given Verus address.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How can I estimate the approximate fee per kilobyte needed for a transaction to begin confirmation within a certain number of blocks using Verus?",
            "You can use the `estimatefee` command to estimate the approximate fee per kilobyte needed for a transaction to begin confirmation within a certain number of blocks. The command takes one argument, `nblocks`, which is the number of blocks. The result is an estimated fee-per-kilobyte, and a minimum fee is returned if not enough transactions and blocks have been observed to make an estimate.",
            "#### Arguments: 1. nrequired  (numeric, required) The number of required signatures out of the n keys or addresses. 2. \"keys\"    (string, required) A json array of keys which are Komodo addresses or hex-encoded public keys ```json   [    \"key\"  (string) Komodo address or hex-encoded public key    ,...   ] ``` #### Result: ```json {  \"address\":\"multisigaddress\", (string) The value of the new multisig address.  \"redeemScript\":\"script\"    (string) The string value of the hex-encoded redemption script. } ``` Examples: Create a multisig address from 2 addresses ```bash > verus createmultisig 2 \"[\\\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\\\",\\\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\\\"]\" ``` As a json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\\\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\\\",\\\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `estimatefee nblocks` Estimates the approximate fee per kilobyte needed for a transaction to begin confirmation within nblocks blocks.#### Arguments: 1. nblocks   (numeric)#### Result: n :  (numeric) estimated fee-per-kilobyteminimum fee is returned if not enough transactions and blocks have been observed to make an estimate.Example: ```bash > verus estimatefee 6 ```### `estimatepriority nblocks` Estimates the approximate priority a zero-fee transaction needs to begin confirmation within nblocks blocks.#### Arguments: 1. nblocks   (numeric)#### Result: n :  (numeric) estimated priority-1.0 is returned if not enough transactions and blocks have been observed to make an estimate.Example: ```bash > verus estimatepriority 6 ```### `invalidateblock \"hash\"` Permanently marks a block as invalid, as if it violated a consensus rule.#### Arguments: 1. hash  (string, required) the hash of the block to mark as invalid### `jumblr_deposit \"depositaddress\"` ### `jumblr_pause` ### `jumblr_resume` ### `jumblr_secret \"secretaddress\"` ### `reconsiderblock \"hash\"` Removes invalidity status of a block and its descendants, reconsider them for activation. This can be used to undo the effects of invalidateblock.#### Arguments: 1. hash  (string, required) the hash of the block to reconsider#### Result:Examples: ```bash > verus invalidateblock \"blockhash\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"invalidateblock\", \"params\": [\"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `validateaddress \"verusaddress\"` Return information about the given Verus address.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `estimatepriority` command in Verus, and how does it work?",
            "The `estimatepriority` command is used to estimate the approximate priority a zero-fee transaction needs to begin confirmation within a certain number of blocks. It takes one argument, `nblocks`, which is the number of blocks. The result is an estimated priority, and -1.0 is returned if not enough transactions and blocks have been observed to make an estimate.",
            "#### Arguments: 1. nrequired  (numeric, required) The number of required signatures out of the n keys or addresses. 2. \"keys\"    (string, required) A json array of keys which are Komodo addresses or hex-encoded public keys ```json   [    \"key\"  (string) Komodo address or hex-encoded public key    ,...   ] ``` #### Result: ```json {  \"address\":\"multisigaddress\", (string) The value of the new multisig address.  \"redeemScript\":\"script\"    (string) The string value of the hex-encoded redemption script. } ``` Examples: Create a multisig address from 2 addresses ```bash > verus createmultisig 2 \"[\\\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\\\",\\\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\\\"]\" ``` As a json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\\\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\\\",\\\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `estimatefee nblocks` Estimates the approximate fee per kilobyte needed for a transaction to begin confirmation within nblocks blocks.#### Arguments: 1. nblocks   (numeric)#### Result: n :  (numeric) estimated fee-per-kilobyteminimum fee is returned if not enough transactions and blocks have been observed to make an estimate.Example: ```bash > verus estimatefee 6 ```### `estimatepriority nblocks` Estimates the approximate priority a zero-fee transaction needs to begin confirmation within nblocks blocks.#### Arguments: 1. nblocks   (numeric)#### Result: n :  (numeric) estimated priority-1.0 is returned if not enough transactions and blocks have been observed to make an estimate.Example: ```bash > verus estimatepriority 6 ```### `invalidateblock \"hash\"` Permanently marks a block as invalid, as if it violated a consensus rule.#### Arguments: 1. hash  (string, required) the hash of the block to mark as invalid### `jumblr_deposit \"depositaddress\"` ### `jumblr_pause` ### `jumblr_resume` ### `jumblr_secret \"secretaddress\"` ### `reconsiderblock \"hash\"` Removes invalidity status of a block and its descendants, reconsider them for activation. This can be used to undo the effects of invalidateblock.#### Arguments: 1. hash  (string, required) the hash of the block to reconsider#### Result:Examples: ```bash > verus invalidateblock \"blockhash\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"invalidateblock\", \"params\": [\"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `validateaddress \"verusaddress\"` Return information about the given Verus address.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `reconsiderblock` command in Verus, and how does it work?",
            "The `reconsiderblock` command is used to remove the invalidity status of a block and its descendants, and reconsider them for activation. It takes one argument, `hash`, which is the hash of the block to reconsider. This command can be used to undo the effects of the `invalidateblock` command.",
            "#### Arguments: 1. nrequired  (numeric, required) The number of required signatures out of the n keys or addresses. 2. \"keys\"    (string, required) A json array of keys which are Komodo addresses or hex-encoded public keys ```json   [    \"key\"  (string) Komodo address or hex-encoded public key    ,...   ] ``` #### Result: ```json {  \"address\":\"multisigaddress\", (string) The value of the new multisig address.  \"redeemScript\":\"script\"    (string) The string value of the hex-encoded redemption script. } ``` Examples: Create a multisig address from 2 addresses ```bash > verus createmultisig 2 \"[\\\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\\\",\\\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\\\"]\" ``` As a json rpc call ```bash > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"createmultisig\", \"params\": [2, \"[\\\"RTZMZHDFSTFQst8XmX2dR4DaH87cEUs3gC\\\",\\\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\\\"]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `estimatefee nblocks` Estimates the approximate fee per kilobyte needed for a transaction to begin confirmation within nblocks blocks.#### Arguments: 1. nblocks   (numeric)#### Result: n :  (numeric) estimated fee-per-kilobyteminimum fee is returned if not enough transactions and blocks have been observed to make an estimate.Example: ```bash > verus estimatefee 6 ```### `estimatepriority nblocks` Estimates the approximate priority a zero-fee transaction needs to begin confirmation within nblocks blocks.#### Arguments: 1. nblocks   (numeric)#### Result: n :  (numeric) estimated priority-1.0 is returned if not enough transactions and blocks have been observed to make an estimate.Example: ```bash > verus estimatepriority 6 ```### `invalidateblock \"hash\"` Permanently marks a block as invalid, as if it violated a consensus rule.#### Arguments: 1. hash  (string, required) the hash of the block to mark as invalid### `jumblr_deposit \"depositaddress\"` ### `jumblr_pause` ### `jumblr_resume` ### `jumblr_secret \"secretaddress\"` ### `reconsiderblock \"hash\"` Removes invalidity status of a block and its descendants, reconsider them for activation. This can be used to undo the effects of invalidateblock.#### Arguments: 1. hash  (string, required) the hash of the block to reconsider#### Result:Examples: ```bash > verus invalidateblock \"blockhash\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"invalidateblock\", \"params\": [\"blockhash\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `validateaddress \"verusaddress\"` Return information about the given Verus address.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "0f9dbf98-fa4f-4500-b554-cebfd06251b3"
]