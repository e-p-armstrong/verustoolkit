[
    [
        [
            "What information does the `getimports` command return when querying a PBaaS chain?",
            "The `getimports` command returns a JSON array of objects, each containing information about a specific import transaction on the PBaaS chain. The object contains properties such as:\n\n* `blockheight`: The block height at which the import transaction was confirmed.\n* `importid`: The transaction ID of the import transaction.\n* `description`: An object containing metadata about the import, including the version of the chain definition, the source system ID, the import currency ID, and the total value of the import in each currency.\n* `transfers`: An array of objects, each representing a transfer of value within the import transaction. Each transfer object contains properties such as the currency ID, value, flags, preconversion status, fees, destination currency ID, and destination address.",
            "``` #### Result: ```json [  {   \"blockheight\": n,          (numeric) block height   \"importid\": \"hash\",         (hexstring) transaction ID   \"description\": {    \"version\":n,            (int) version of this chain definition    \"sourcesystemid\": \"xxxx\",     (text) i-address of the source system    \"importcurrencyid\": \"xxxx\",    (text) i-address of the currency ID    \"valuein\": {     \"xxxx\": xxx.xxxxxxxx,      (text) i-address of the currency ID, (numeric) the total value of the import                     of the currency     ....    },    \"tokensout\": {     \"xxxx\": xxx.xxxxxxxx,      (text) i-address of the currency ID, (numeric) the total value of the import                     into the currency into this currency    }   },   \"transfers\": [    {     \"version\": n,          (int) version of this chain definition     \"currencyid\": \"xxxx\",      (text) i-address of the currency ID     \"value\": n,           (numeric) the value this transaction     \"flags\": n,           (hex) flags for the currency     \"preconvert\": true|false,    (boolean) Shows whether the transaction is a preconversion     \"fees\": xxx.xxxxxxxx,      (numeric) the fees for this transaction     \"destinationcurrencyid\": \"xxxx\", (text) i-address of the currency ID     \"destination\": \"xxxx\"      (text) address of the transaction    },    ....    }   ]  },  {},  ... ] ``` Examples: ```bash > verus getimports \"chainname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getimports\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getinitialcurrencystate \"name\"` Returns the total amount of preconversions that have been confirmed on the blockchain for the specified PBaaS chain. This should be used to get information about chains that are not this chain, but are being launched by it.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "How can I use the `getimports` command to query a PBaaS chain?",
            "You can use the `getimports` command to query a PBaaS chain by running the following command in the terminal:\n\n```\nverus getimports \"chainname\"\n```\n\nAlternatively, you can use `curl` to send a JSON-RPC request to the Verus daemon:\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getimports\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n\nReplace `\"chainname\"` with the actual name of the PBaaS chain you want to query.",
            "``` #### Result: ```json [  {   \"blockheight\": n,          (numeric) block height   \"importid\": \"hash\",         (hexstring) transaction ID   \"description\": {    \"version\":n,            (int) version of this chain definition    \"sourcesystemid\": \"xxxx\",     (text) i-address of the source system    \"importcurrencyid\": \"xxxx\",    (text) i-address of the currency ID    \"valuein\": {     \"xxxx\": xxx.xxxxxxxx,      (text) i-address of the currency ID, (numeric) the total value of the import                     of the currency     ....    },    \"tokensout\": {     \"xxxx\": xxx.xxxxxxxx,      (text) i-address of the currency ID, (numeric) the total value of the import                     into the currency into this currency    }   },   \"transfers\": [    {     \"version\": n,          (int) version of this chain definition     \"currencyid\": \"xxxx\",      (text) i-address of the currency ID     \"value\": n,           (numeric) the value this transaction     \"flags\": n,           (hex) flags for the currency     \"preconvert\": true|false,    (boolean) Shows whether the transaction is a preconversion     \"fees\": xxx.xxxxxxxx,      (numeric) the fees for this transaction     \"destinationcurrencyid\": \"xxxx\", (text) i-address of the currency ID     \"destination\": \"xxxx\"      (text) address of the transaction    },    ....    }   ]  },  {},  ... ] ``` Examples: ```bash > verus getimports \"chainname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getimports\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getinitialcurrencystate \"name\"` Returns the total amount of preconversions that have been confirmed on the blockchain for the specified PBaaS chain. This should be used to get information about chains that are not this chain, but are being launched by it.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `getinitialcurrencystate` command, and how does it differ from the `getimports` command?",
            "The `getinitialcurrencystate` command returns the total amount of preconversions that have been confirmed on the blockchain for a specified PBaaS chain. This command is used to get information about chains that are not the current chain, but are being launched by it.\n\nIn contrast, the `getimports` command returns information about import transactions on the current PBaaS chain. While both commands provide information about preconversions, `getinitialcurrencystate` is specifically used to query the initial currency state of a chain being launched by the current chain, whereas `getimports` provides a more detailed view of import transactions on the current chain.",
            "``` #### Result: ```json [  {   \"blockheight\": n,          (numeric) block height   \"importid\": \"hash\",         (hexstring) transaction ID   \"description\": {    \"version\":n,            (int) version of this chain definition    \"sourcesystemid\": \"xxxx\",     (text) i-address of the source system    \"importcurrencyid\": \"xxxx\",    (text) i-address of the currency ID    \"valuein\": {     \"xxxx\": xxx.xxxxxxxx,      (text) i-address of the currency ID, (numeric) the total value of the import                     of the currency     ....    },    \"tokensout\": {     \"xxxx\": xxx.xxxxxxxx,      (text) i-address of the currency ID, (numeric) the total value of the import                     into the currency into this currency    }   },   \"transfers\": [    {     \"version\": n,          (int) version of this chain definition     \"currencyid\": \"xxxx\",      (text) i-address of the currency ID     \"value\": n,           (numeric) the value this transaction     \"flags\": n,           (hex) flags for the currency     \"preconvert\": true|false,    (boolean) Shows whether the transaction is a preconversion     \"fees\": xxx.xxxxxxxx,      (numeric) the fees for this transaction     \"destinationcurrencyid\": \"xxxx\", (text) i-address of the currency ID     \"destination\": \"xxxx\"      (text) address of the transaction    },    ....    }   ]  },  {},  ... ] ``` Examples: ```bash > verus getimports \"chainname\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getimports\", \"params\": [\"chainname\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getinitialcurrencystate \"name\"` Returns the total amount of preconversions that have been confirmed on the blockchain for the specified PBaaS chain. This should be used to get information about chains that are not this chain, but are being launched by it.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "4753be36-bb28-42b1-88c8-b44560f8661b"
]