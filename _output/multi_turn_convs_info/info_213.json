[
    [
        [
            "What are the limitations of creating multi-currency PBaaS chains in Verus?",
            "There are two limitations to be aware of when creating multi-currency PBaaS chains in Verus:\n\n1. You cannot create a currency from an ID that has a properly encoded i-address as its actual name. This is because using an i-address as a currency name can cause problems when referencing the currency or identity.\n2. In the Verus Desktop GUI, if a currency is already supported, such as BTC or ETH, you cannot use the same name for a PBaaS chain. This limitation is considered errata for the testnet release and will be removed before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I define a PBaaS blockchain using Verus?",
            "You can define a PBaaS blockchain using Verus by creating a JSON object with the following properties:\n\n* `name`: The name of the blockchain.\n* `options`: An integer specifying the blockchain's options.\n* `currencies`: An array of currencies that can be converted to the blockchain's native currency.\n* `conversions`: An array of conversion ratios between the native currency and each currency on the blockchain.\n* `eras`: An array of objects specifying the block reward, reward decay, halving, and end of each era in the blockchain's lifecycle.\n* `notaries`: An array of VerusIDs that will serve as notaries on the blockchain.\n* `minnotariesconfirm`: An integer specifying the minimum number of notaries needed to confirm a block.\n* `nodes`: An array of objects specifying the network addresses and identities of the nodes on the blockchain.\n* `gatewayconvertername`: The name of the bridge converter.\n* `gatewayconverterissuance`: The initial issuance of the bridge converter's native token.\n\nYou can then pass this JSON object to the `definecurrency` command to create the PBaaS blockchain.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "aa844f75-5569-4ec3-8b46-b97b0eae597d"
]