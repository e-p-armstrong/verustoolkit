[
    [
        [
            "What is the optional argument for the `kvupdate` command?",
            "The optional argument for the `kvupdate` command is:\n\n4. `passphrase` (string, optional): a passphrase required to update this key",
            "### `kvupdate key \"value\" days passphrase` Store a key value. This feature is only available for asset chains. #### Arguments: ``` 1. key           (string, required) key 2. \"value\"         (string, required) value 3. days           (numeric, required) amount of days(1440 blocks/day) before the key expires. Minimum 1 day 4. passphrase        (string, optional) passphrase required to update this key ``` #### Result: ```json {  \"coin\": \"xxxxx\",     (string) chain the key is stored on  \"height\": xxxxx,     (numeric) height the key was stored at  \"expiration\": xxxxx,   (numeric) height the key will expire  \"flags\": x,        (string) amount of days the key will be stored  \"key\": \"xxxxx\",      (numeric) stored key  \"keylen\": xxxxx,     (numeric) length of the key  \"value\": \"xxxxx\"     (numeric) stored value  \"valuesize\": xxxxx,    (string) length of the stored value  \"fee\": xxxxx       (string) transaction fee paid to store the key  \"txid\": \"xxxxx\"      (string) transaction id } ``` Examples: ```bash > verus kvupdate examplekey \"examplevalue\" 2 examplepassphrase > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"kvupdate\", \"params\": [examplekey \"examplevalue\" 2 examplepassphrase] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `minerids needs height`### `notaries height timestamp`### `processupgradedata {upgradedata}` Returns the txid and index where an output is spent.#### Arguments: ```json {  \"upgradeid\"        (string) The VDXF key identifier  \"minimumdaemonversion\"   (string) The minimum version required for the upgrade  \"activationheight\"     (number) The block height to activate  \"activationtime\"      (number) Epoch time to activate, depending on upgrade } ``` #### Result: ```json {  \"txid\" (string) The transaction id  \"index\" (number) The spending input index  ,... } ``` Examples: ```bash > verus processupgradedata '{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"processupgradedata\", \"params\": [{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `verifychain ( checklevel numblocks )` Verifies blockchain database.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the result of the `kvupdate` command?",
            "The result of the `kvupdate` command is a JSON object containing information about the stored key-value pair, including:\n\n* `coin`: the chain the key is stored on\n* `height`: the height at which the key was stored\n* `expiration`: the height at which the key will expire\n* `flags`: the amount of days the key will be stored\n* `key`: the stored key\n* `keylen`: the length of the key\n* `value`: the stored value\n* `valuesize`: the length of the stored value\n* `fee`: the transaction fee paid to store the key\n* `txid`: the transaction ID",
            "### `kvupdate key \"value\" days passphrase` Store a key value. This feature is only available for asset chains. #### Arguments: ``` 1. key           (string, required) key 2. \"value\"         (string, required) value 3. days           (numeric, required) amount of days(1440 blocks/day) before the key expires. Minimum 1 day 4. passphrase        (string, optional) passphrase required to update this key ``` #### Result: ```json {  \"coin\": \"xxxxx\",     (string) chain the key is stored on  \"height\": xxxxx,     (numeric) height the key was stored at  \"expiration\": xxxxx,   (numeric) height the key will expire  \"flags\": x,        (string) amount of days the key will be stored  \"key\": \"xxxxx\",      (numeric) stored key  \"keylen\": xxxxx,     (numeric) length of the key  \"value\": \"xxxxx\"     (numeric) stored value  \"valuesize\": xxxxx,    (string) length of the stored value  \"fee\": xxxxx       (string) transaction fee paid to store the key  \"txid\": \"xxxxx\"      (string) transaction id } ``` Examples: ```bash > verus kvupdate examplekey \"examplevalue\" 2 examplepassphrase > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"kvupdate\", \"params\": [examplekey \"examplevalue\" 2 examplepassphrase] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `minerids needs height`### `notaries height timestamp`### `processupgradedata {upgradedata}` Returns the txid and index where an output is spent.#### Arguments: ```json {  \"upgradeid\"        (string) The VDXF key identifier  \"minimumdaemonversion\"   (string) The minimum version required for the upgrade  \"activationheight\"     (number) The block height to activate  \"activationtime\"      (number) Epoch time to activate, depending on upgrade } ``` #### Result: ```json {  \"txid\" (string) The transaction id  \"index\" (number) The spending input index  ,... } ``` Examples: ```bash > verus processupgradedata '{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"processupgradedata\", \"params\": [{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `verifychain ( checklevel numblocks )` Verifies blockchain database.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `kvupdate` command in Verus?",
            "The `kvupdate` command in Verus is used to store a key-value pair on an asset chain. This feature is only available for asset chains.",
            "### `kvupdate key \"value\" days passphrase` Store a key value. This feature is only available for asset chains. #### Arguments: ``` 1. key           (string, required) key 2. \"value\"         (string, required) value 3. days           (numeric, required) amount of days(1440 blocks/day) before the key expires. Minimum 1 day 4. passphrase        (string, optional) passphrase required to update this key ``` #### Result: ```json {  \"coin\": \"xxxxx\",     (string) chain the key is stored on  \"height\": xxxxx,     (numeric) height the key was stored at  \"expiration\": xxxxx,   (numeric) height the key will expire  \"flags\": x,        (string) amount of days the key will be stored  \"key\": \"xxxxx\",      (numeric) stored key  \"keylen\": xxxxx,     (numeric) length of the key  \"value\": \"xxxxx\"     (numeric) stored value  \"valuesize\": xxxxx,    (string) length of the stored value  \"fee\": xxxxx       (string) transaction fee paid to store the key  \"txid\": \"xxxxx\"      (string) transaction id } ``` Examples: ```bash > verus kvupdate examplekey \"examplevalue\" 2 examplepassphrase > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"kvupdate\", \"params\": [examplekey \"examplevalue\" 2 examplepassphrase] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `minerids needs height`### `notaries height timestamp`### `processupgradedata {upgradedata}` Returns the txid and index where an output is spent.#### Arguments: ```json {  \"upgradeid\"        (string) The VDXF key identifier  \"minimumdaemonversion\"   (string) The minimum version required for the upgrade  \"activationheight\"     (number) The block height to activate  \"activationtime\"      (number) Epoch time to activate, depending on upgrade } ``` #### Result: ```json {  \"txid\" (string) The transaction id  \"index\" (number) The spending input index  ,... } ``` Examples: ```bash > verus processupgradedata '{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"processupgradedata\", \"params\": [{\"txid\": \"0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9\", \"index\": 0}] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `verifychain ( checklevel numblocks )` Verifies blockchain database.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "3beb53d0-dd59-4cca-b122-12adf361e1e4"
]