[
    [
        [
            "What is the structure of a PBaaS blockchain definition in Verus?",
            "A PBaaS blockchain definition in Verus consists of several properties:\n\n* `name`: the name of the chain\n* `options`: an integer value, in this case 330\n* `currencies`: an array of currencies that the chain's native currency can be converted into\n* `conversions`: an array defining the conversion ratios between the chain's native currency and each currency on the chain\n* `eras`: an array defining the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle\n* `notaries`: an array of VerusIDs that will serve as notaries on the chain\n* `minnotariesconfirm`: an integer specifying the minimum number of notaries needed to confirm a block\n* `nodes`: an array describing the network addresses of the nodes on the chain, as well as their IDs\n* `gatewayconvertername`: the name of the bridge\n* `gatewayconverterissuance`: the initial supply of the bridge's native token\n\nAdditionally, the bridge definition has overridable defaults, which include:\n* `currencies`: an array of currencies supported by the bridge\n* `initialcontributions`: an array specifying the initial liquidity for each currency in the bridge\n* `initialsupply`: the initial supply for the bridge's native token",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I define a PBaaS blockchain in Verus using the command line?",
            "To define a PBaaS blockchain in Verus using the command line, you need to pass the PBaaS blockchain definition and the bridge definition to the `definecurrency` command. Here's an example:\n```\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are some limitations to be aware of when working with multi-currency in Verus?",
            "There are two limitations to be aware of:\n\n1. You should not create an ID with an i-address as its name, as this can cause problems when using i-addresses or names. This is not prevented by the protocol, but it will cause issues and is not supported for creating currencies.\n2. (GUI only) If a currency is already supported in the Verus Desktop, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I define a PBaaS blockchain using Verus?",
            "You can define a PBaaS blockchain by creating a JSON object with the necessary properties and then passing it to the `definecurrency` command. The JSON object should include the following properties:\n\n* `name`: The name of the PBaaS chain.\n* `options`: An integer that configures various options for the chain.\n* `currencies`: An array of currencies that the chain's native currency can be converted into.\n* `conversions`: An array that defines the conversion ratios between the chain's native currency and each currency on the chain.\n* `eras`: An array that defines the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle.\n* `notaries`: An array of VerusIDs that will serve as notaries on the chain.\n* `minnotariesconfirm`: The minimum number of notaries needed to confirm a block.\n* `nodes`: An array of objects that describe the network addresses and IDs of the nodes on the chain.\n* `gatewayconvertername`: The name of the bridge that will be used to move funds on and off the PBaaS chain.\n* `gatewayconverterissuance`: The initial supply of the bridge's native token.\n\nHere is an example of a JSON object that defines a PBaaS blockchain:\n```json\n{\n  \"name\": \"PBaaSChain\",\n  \"options\": 330,\n  \"currencies\": [ \"VRSCTEST\" ],\n  \"conversions\": [ 1 ],\n  \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ],\n  \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\" ],\n  \"minnotariesconfirm\": 2,\n  \"nodes\": [ \n    { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" },\n    { \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" }\n  ],\n  \"gatewayconvertername\": \"Bridge\",\n  \"gatewayconverterissuance\": 1000000\n}\n```\nYou can then pass this JSON object to the `definecurrency` command along with the bridge definition defaults to create the PBaaS chain.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are some limitations to be aware of when working with multi-currency on Verus?",
            "There are two limitations to be aware of when working with multi-currency on Verus:\n\n1. You cannot create a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. This can cause problems when referring to the currency or identity, and it is not supported for creating currencies.\n2. (GUI only) If a currency is already supported in the Verus Desktop, such as BTC or ETH, you cannot use the same name for a PBaaS chain. This limitation will be resolved before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "Why is it not recommended to create an ID with an i-address as its name?",
            "It is not recommended to create an ID with an i-address as its name because it can cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. This is because an i-address is meant to be a calculated ID based on a name registration, not an actual name. Using an i-address as a name can lead to confusion and errors.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I define a PBaaS blockchain using Verus?",
            "To define a PBaaS blockchain using Verus, you need to create two JSON objects: one for the PBaaS blockchain definition and another for the overridable defaults of the bridge. Then, you pass these definitions to the `definecurrency` command.\n\nHere's an example of how to define a PBaaS blockchain:\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are some limitations to be aware of when working with multi-currency on Verus?",
            "There are two limitations to be aware of when working with multi-currency on Verus:\n\n1. **Don't use i-addresses as names for IDs**: You cannot create a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. This can cause problems whenever an i-address or name may be used. \n2. **Avoid using existing currency names**: In the Verus Desktop GUI, if a currency is already supported (e.g., BTC or ETH), you cannot use those same names as a PBaaS chain. This limitation is expected to be resolved before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I define a PBaaS blockchain using Verus?",
            "You can define a PBaaS blockchain using Verus by creating a JSON object with the following properties:\n\n* `name`: The name of the blockchain.\n* `options`: An integer specifying the blockchain's options.\n* `currencies`: An array of currencies that can be converted to the blockchain's native currency.\n* `conversions`: An array of conversion ratios between the native currency and each currency on the blockchain.\n* `eras`: An array of objects specifying the block reward, reward decay, halving, and end of each era in the blockchain's lifecycle.\n* `notaries`: An array of VerusIDs that will serve as notaries on the blockchain.\n* `minnotariesconfirm`: An integer specifying the minimum number of notaries needed to confirm a block.\n* `nodes`: An array of objects specifying the network addresses and identities of the nodes on the blockchain.\n* `gatewayconvertername`: The name of the bridge converter.\n* `gatewayconverterissuance`: The initial issuance of the bridge converter's native token.\n\nYou can then pass this JSON object to the `definecurrency` command to create the PBaaS blockchain.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are the limitations of creating multi-currency PBaaS chains in Verus?",
            "There are two limitations to be aware of when creating multi-currency PBaaS chains in Verus:\n\n1. You cannot create a currency from an ID that has a properly encoded i-address as its actual name. This is because using an i-address as a currency name can cause problems when referencing the currency or identity.\n2. In the Verus Desktop GUI, if a currency is already supported, such as BTC or ETH, you cannot use the same name for a PBaaS chain. This limitation is considered errata for the testnet release and will be removed before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is a PBaaS blockchain, and how can I define one using Verus?",
            "A PBaaS (Private Blockchain as a Service) blockchain is a private blockchain that can be created and managed using Verus. To define a PBaaS blockchain, you can use the `definecurrency` command with a JSON object that specifies the properties of the blockchain. The JSON object should include the following properties:\n\n* `name`: The name of the PBaaS chain.\n* `options`: An integer that specifies the options for the chain.\n* `currencies`: An array of currencies that can be converted to and from the chain's native currency.\n* `conversions`: An array of conversion ratios between the chain's native currency and each currency on the chain.\n* `eras`: An array of objects that define the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle.\n* `notaries`: An array of VerusIDs that will serve as notaries on the chain.\n* `minnotariesconfirm`: An integer that specifies the minimum number of notaries needed to confirm a block.\n* `nodes`: An array of objects that describe the network addresses of the nodes on the chain, as well as their IDs.\n* `gatewayconvertername`: The name of the bridge that can be used to move funds on and off the chain.\n* `gatewayconverterissuance`: The initial supply of the bridge's native token.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are some limitations to be aware of when creating a multi-currency PBaaS chain?",
            "There are two limitations to be aware of when creating a multi-currency PBaaS chain:\n\n1. You cannot create a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. This is because using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration.\n2. (Only applicable to the GUI) If a currency is already supported in the Verus Desktop, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for the testnet release and will not be a limitation before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are the components of a PBaaS blockchain definition in Verus?",
            "A PBaaS blockchain definition in Verus consists of several components, including:\n\n1. `name`: The name of the PBaaS chain.\n2. `options`: An integer that specifies various options for the chain.\n3. `currencies`: An array of currencies that the chain supports.\n4. `conversions`: An array that specifies the conversion rates between the supported currencies.\n5. `eras`: An array that defines the block reward, reward decay, halving, and end of each era in the chain's lifecycle.\n6. `notaries`: An array of VerusIDs that will serve as notaries on the chain.\n7. `minnotariesconfirm`: An integer that specifies the minimum number of notaries required to confirm a block.\n8. `nodes`: An array that describes the network addresses and identities of the nodes on the chain.\n9. `gatewayconvertername`: The name of the gateway converter that will facilitate interactions with other chains.\n10. `gatewayconverterissuance`: The initial issuance of the gateway converter's native token.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are the overridable defaults for a bridge definition in Verus?",
            "The overridable defaults for a bridge definition in Verus include:\n\n1. `currencies`: An array of currencies that the bridge supports.\n2. `initialcontributions`: An array that specifies the initial liquidity for each currency in the bridge.\n3. `initialsupply`: The initial supply of the bridge's native token.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What limitations should I be aware of when working with multi-currency support in Verus?",
            "There are two limitations to be aware of:\n\n1. You cannot create a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. This can cause problems whenever an i-address or name may be used.\n2. In the GUI, if a currency is already supported in the Verus Desktop, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I define a PBaaS blockchain using Verus?",
            "To define a PBaaS blockchain using Verus, you need to create a JSON object with the following properties:\n```\n{\n  \"name\": \"PBaaSChain\",\n  \"options\": 330,\n  \"currencies\": [ \"VRSCTEST\" ],\n  \"conversions\": [ 1 ],\n  \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ],\n  \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\" ],\n  \"minnotariesconfirm\": 2,\n  \"nodes\": [ \n    { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" },\n    { \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" }\n  ],\n  \"gatewayconvertername\": \"Bridge\",\n  \"gatewayconverterissuance\": 1000000\n}\n```\nThen, you need to pass this definition to the `definecurrency` command:\n```\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,...}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are the limitations of multi-currency in Verus that I should be aware of?",
            "There are two limitations of multi-currency in Verus that you should be aware of:\n\n1. You cannot create a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. This is not recommended and may cause problems whenever an i-address or name is used.\n2. In the GUI, if a currency is already supported in Verus Desktop (e.g. BTC or ETH), you will not be able to use the same named currencies as a PBaaS chain. This limitation is considered errata for the testnet release and will not be a limitation before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "Why is it not recommended to create an ID with an i-address as its name in Verus?",
            "It is not recommended to create an ID with an i-address as its name in Verus because it may cause problems whenever an i-address or name is used. This is because using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How can I define a PBaaS blockchain using Verus?",
            "To define a PBaaS blockchain using Verus, you can create a JSON object with the following properties: `name`, `options`, `currencies`, `conversions`, `eras`, `notaries`, `minnotariesconfirm`, `nodes`, `gatewayconvertername`, and `gatewayconverterissuance`. Then, you can pass this definition to the `definecurrency` command. Here's an example of how to do this:\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are some limitations to be aware of when working with multi-currency in Verus?",
            "There are two limitations to be aware of when working with multi-currency in Verus:\n\n1. **Avoid using i-addresses as currency names**: You should not create a currency with an i-address as its actual name, as this can cause problems when referring to the currency or identity. Instead, use a unique name for your currency.\n2. **GUI limitation for existing currencies**: In the GUI, if a currency is already supported in Verus Desktop (such as BTC or ETH), you cannot use the same name for a PBaaS chain. This limitation will be removed before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I define a PBaaS blockchain using Verus?",
            "To define a PBaaS blockchain using Verus, you need to create a JSON object that contains the chain's properties and pass it to the `definecurrency` command. Here's an example:\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\nThis command defines a PBaaS blockchain with a name, options, currencies, conversions, eras, notaries, nodes, and a gateway converter.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are some limitations to be aware of when working with multi-currency in Verus?",
            "There are two limitations to be aware of when working with multi-currency in Verus:\n\n1. You cannot create a currency from an ID that has a properly encoded i-address as its actual name. This can cause problems when using i-addresses or names, and it's not recommended to create IDs with i-addresses as their names.\n2. In the GUI, if a currency is already supported in Verus Desktop (e.g., BTC or ETH), you cannot use the same name for a PBaaS chain. However, this limitation will be removed before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What happens if I try to create a currency with an ID that has a properly encoded i-address as its actual name?",
            "If you try to create a currency with an ID that has a properly encoded i-address as its actual name, it may cause problems when using i-addresses or names. The protocol does not prevent you from doing this, but it's not recommended and will not be supported for creating currencies.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How can I define a PBaaS blockchain using Verus?",
            "To define a PBaaS blockchain using Verus, you can use the `definecurrency` command with a JSON object that specifies the properties of the blockchain. Here's an example:\n\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\n\nThis command defines a new PBaaS blockchain with the specified properties, including its name, options, currencies, conversions, eras, notaries, nodes, and gateway converter.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are some limitations to be aware of when working with multi-currency in Verus?",
            "There are two limitations to be aware of when working with multi-currency in Verus:\n\n1. **Avoid using i-addresses as names for IDs**: When creating a currency from an ID, you should not use an i-address as the actual name of the ID. This can cause problems when referring to the currency or identity, and is not supported.\n2. **Avoid using existing currency names for PBaaS chains**: In the Verus Desktop GUI, you cannot use the same name for a PBaaS chain as an existing supported currency, such as BTC or ETH. This limitation will be removed before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I define a PBaaS blockchain using Verus?",
            "You can define a PBaaS blockchain using a single command line command with Verus. You need to pass two JSON objects, one for the PBaaS blockchain, and another for the overridable defaults of the bridge. Here's an example of how to define a PBaaS blockchain:\n\n```shell\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are some limitations to be aware of when working with multi-currency in Verus?",
            "There are two limitations to be aware of:\n\n1. **Using an i-address as an ID name**: It is not recommended to create an ID with an i-address as its name, as this can cause problems when using the ID or name in various contexts. The protocol does not prevent this, but it is not supported for creating currencies, and will cause user confusion.\n2. **Currency name conflicts in the GUI**: In the GUI, if a currency is already supported, such as BTC or ETH, you will not be able to use those same names for a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "Why is it not recommended to use i-addresses as names for IDs in Verus?",
            "It is not recommended to use i-addresses as names for IDs in Verus because it can cause problems whenever an i-address or name may be used. This is because an i-address will be interpreted as referring to the currency or identity that has that i-address calculated based on its name registration, rather than the ID with the i-address as its name. To avoid user confusion, the naming system will also be expanded to disallow certain characters for currency registrations.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is the basic structure of a PBaaS blockchain definition in Verus?",
            "The basic structure of a PBaaS blockchain definition in Verus consists of several key components:\n1. `name`: The name of the PBaaS chain.\n2. `options`: An integer that defines various properties of the chain.\n3. `currencies`: An array of currencies that the chain's native currency can be converted into.\n4. `conversions`: An array that defines the conversion ratios between the chain's native currency and each currency on the chain.\n5. `eras`: An array that defines the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle.\n6. `notaries`: An array of VerusIDs that will serve as notaries on the chain.\n7. `minnotariesconfirm`: An integer for the minimum number of notaries needed to confirm a block.\n8. `nodes`: An array describing the network addresses of the nodes on the chain, as well as their IDs.\n9. `gatewayconvertername`: The name of the bridge that can be used to move funds on and off the PBaaS chain.\n10. `gatewayconverterissuance`: The initial supply of the bridge's native token.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What does the `definecurrency` command do in Verus, and how do I use it to define a PBaaS blockchain?",
            "The `definecurrency` command in Verus is used to define a new currency or blockchain on the Verus network. To define a PBaaS blockchain, you need to pass two JSON objects to the `definecurrency` command: one for the blockchain definition and another for the overridable defaults of the bridge. Here's an example of how to define a PBaaS blockchain:\n\n```json\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are some limitations to be aware of when working with multi-currency in Verus?",
            "There are two limitations to be aware of when working with multi-currency in Verus:\n\n1. **ID naming limitation**: You cannot create a currency from an ID that has a properly encoded i-address as its actual name. This is because an i-address will be interpreted as referring to the currency or identity that has that i-address calculated based on its name registration. It is recommended to avoid using an i-address as the name of an ID.\n2. **Currency name conflict limitation (GUI only)**: In the Verus Desktop GUI, if a currency is already supported, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for the testnet release and will be resolved before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What limitations should I be aware of when working with multi-currency in Verus?",
            "There are two main limitations to be aware of when working with multi-currency in Verus:\n1. Avoid creating an ID with an i-address as its name, as this can cause problems when referring to the ID or currency.\n2. In the Verus Desktop GUI, you cannot use the same name for a PBaaS chain as a currency that is already supported, such as BTC or ETH. This limitation will be resolved before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "Why is it not recommended to create an ID with an i-address as its name?",
            "Creating an ID with an i-address as its name is not recommended because it can cause problems whenever an i-address or name may be used (in many cases), and it will not be supported for creating currencies. This is because using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is the basic structure of a PBaaS blockchain definition in Verus?",
            "A PBaaS blockchain definition in Verus consists of two main parts: the blockchain definition and the bridge definition. The blockchain definition includes properties such as:\n\n* `name`: the name of the chain\n* `options`: an integer specifying the chain's options\n* `currencies`: an array of currencies that can be converted to the chain's native currency\n* `conversions`: an array specifying the conversion ratios between the chain's native currency and each currency on the chain\n* `eras`: an array defining the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle\n* `notaries`: an array of VerusIDs serving as notaries on the chain\n* `minnotariesconfirm`: an integer specifying the minimum number of notaries needed to confirm a block\n* `nodes`: an array describing the network addresses of the nodes on the chain, as well as their IDs\n* `gatewayconvertername`: the name of the bridge\n* `gatewayconverterissuance`: the initial issuance of the bridge's native token\n\nThe bridge definition includes properties such as:\n\n* `currencies`: an array of currencies supported by the bridge\n* `initialcontributions`: an array specifying the initial liquidity for each currency in the bridge\n* `initialsupply`: the initial supply of the bridge's native token",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I define a PBaaS blockchain using Verus?",
            "To define a PBaaS blockchain using Verus, you need to create a JSON object with the following properties:\n\n* `name`: the name of the chain\n* `options`: an integer specifying the options for the chain\n* `currencies`: an array of currencies that can be converted to on the chain\n* `conversions`: an array of conversion ratios between the chain's native currency and each currency on the chain\n* `eras`: an array defining the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle\n* `notaries`: an array of VerusIDs that will serve as notaries on the chain\n* `minnotariesconfirm`: an integer specifying the minimum number of notaries needed to confirm a block\n* `nodes`: an array describing the network addresses of the nodes on the chain, as well as their IDs\n* `gatewayconvertername`: the name of the bridge converter\n* `gatewayconverterissuance`: the initial issuance of the bridge converter\n\nYou then need to pass this JSON object to the `definecurrency` command, along with another JSON object specifying the overridable defaults for the bridge.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are some limitations to be aware of when working with multi-currency in Verus?",
            "There are two limitations to be aware of:\n\n1. You cannot create a currency from an ID that has a properly encoded i-address as its actual name. This is because using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration.\n2. In the GUI, if a currency is already supported in the Verus Desktop, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are some limitations to be aware of when working with multi-currency in Verus?",
            "There are two main limitations to be aware of:\n\n1. Avoid creating an ID with an i-address as its actual name, as this can cause problems when referring to the currency or identity. Instead, use a properly encoded i-address as the calculated ID.\n2. In the GUI, you cannot use the same name for a PBaaS chain as a currency that is already supported by Verus Desktop, such as BTC or ETH. This limitation will be resolved before mainnet availability.\n\nThese limitations are important to keep in mind to avoid potential user confusion and errors when working with multi-currency in Verus.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How can I define a PBaaS blockchain using Verus?",
            "You can define a PBaaS blockchain by creating a JSON object that specifies the blockchain's properties, such as its name, options, currencies, conversions, eras, notaries, nodes, and gateway converter. The JSON object should be passed to the `definecurrency` command.\n\nHere is an example of a PBaaS blockchain definition:\n```json\n{\n  \"name\": \"PBaaSChain\",\n  \"options\": 330,\n  \"currencies\": [ \"VRSCTEST\" ],\n  \"conversions\": [ 1 ],\n  \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ],\n  \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\" ],\n  \"minnotariesconfirm\": 2,\n  \"nodes\": [ \n    { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" },\n    { \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" }\n  ],\n  \"gatewayconvertername\": \"Bridge\",\n  \"gatewayconverterissuance\": 1000000\n}\n```\nThe bridge definition has overridable defaults, which can be specified in another JSON object:\n```json\n{\n  \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ],\n  \"initialcontributions\": [ 380228.12033701, 0, 1000000 ],\n  \"initialsupply\": 3000000\n}\n```\nYou can then pass these definitions to the `definecurrency` command:\n```bash\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is a limitation of using i-addresses as names for IDs in Verus?",
            "One limitation is that you will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. This is because using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. This can cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is another limitation of using multi-currency in Verus, specifically in the GUI?",
            "In the Verus Desktop GUI, if a currency is already supported, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I define a PBaaS blockchain using Verus?",
            "To define a PBaaS blockchain using Verus, you can create a JSON object with the following properties: `name`, `options`, `currencies`, `conversions`, `eras`, `notaries`, `minnotariesconfirm`, `nodes`, `gatewayconvertername`, and `gatewayconverterissuance`. Here's an example:\n```json\n{\n  \"name\": \"PBaaSChain\",\n  \"options\": 330,\n  \"currencies\": [ \"VRSCTEST\" ],\n  \"conversions\": [ 1 ],\n  \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ],\n  \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\" ],\n  \"minnotariesconfirm\": 2,\n  \"nodes\": [\n    { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" },\n    { \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" }\n  ],\n  \"gatewayconvertername\": \"Bridge\",\n  \"gatewayconverterissuance\": 1000000\n}\n```\nThen, you need to pass this definition to the `definecurrency` command, along with the bridge definition overrides.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are some limitations to be aware of when working with multi-currency in Verus?",
            "There are two limitations to be aware of:\n\n1. You cannot create a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. This is because using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration.\n2. (Only applicable in the GUI) If a currency is already supported in the Verus Desktop, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.\n\nThese limitations are important to keep in mind to avoid potential issues and user confusion.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "How do I define a PBaaS blockchain using Verus?",
            "To define a PBaaS blockchain using Verus, you need to create a JSON object with the following properties:\n\n* `name`: The name of the chain.\n* `options`: An integer that defines the chain's properties.\n* `currencies`: An array of currencies that the chain's native currency can be converted into.\n* `conversions`: An array of conversion ratios between the chain's native currency and each currency on the chain.\n* `eras`: An array of objects that define the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle.\n* `notaries`: An array of VerusIDs that will serve as notaries on the chain.\n* `minnotariesconfirm`: An integer that specifies the minimum number of notaries needed to confirm a block.\n* `nodes`: An array of objects that describe the network addresses of the nodes on the chain, as well as their IDs.\n* `gatewayconvertername`: The name of the bridge that will be used to move funds on and off the PBaaS chain.\n* `gatewayconverterissuance`: The initial supply of the bridge's native token.\n\nYou then need to pass this JSON object to the `definecurrency` command, along with a second JSON object that defines the overridable defaults for the bridge.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are some limitations to be aware of when working with multi-currency in Verus?",
            "There are two limitations to be aware of:\n\n1. You should not create an ID with an i-address as its name, as this can cause problems when referring to the ID or currency. This is because an i-address will be interpreted as referring to the currency or identity that has that i-address calculated based on its name registration.\n2. In the Verus Desktop GUI, you cannot use the names of existing currencies (such as BTC or ETH) as the name of a PBaaS chain. This is a limitation of the testnet release and will be removed before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are the components of a PBaaS blockchain definition in Verus?",
            "A PBaaS blockchain definition in Verus consists of several components, including:\n\n1. `name`: The name of the blockchain.\n2. `options`: An integer that specifies the options for the blockchain.\n3. `currencies`: An array of currencies that the blockchain supports.\n4. `conversions`: An array of conversion rates between the currencies.\n5. `eras`: An array of era schedules, including the reward, decay, halving, and era end.\n6. `notaries`: An array of notaries that validate transactions on the blockchain.\n7. `minnotariesconfirm`: The minimum number of notaries required to confirm a transaction.\n8. `nodes`: An array of nodes that make up the blockchain network.\n9. `gatewayconvertername`: The name of the gateway converter.\n10. `gatewayconverterissuance`: The initial issuance of the gateway converter.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are the overridable defaults for the bridge in a PBaaS blockchain definition?",
            "The overridable defaults for the bridge in a PBaaS blockchain definition include:\n\n1. `currencies`: An array of currencies that the bridge supports.\n2. `initialcontributions`: An array of initial contributions to the bridge for each currency.\n3. `initialsupply`: The initial supply of the bridge's native token.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is the importance of not using an i-address as the name of an ID when creating a currency in Verus?",
            "Using an i-address as the name of an ID when creating a currency in Verus can cause problems and confusion, as it may be interpreted as referring to the currency or identity that has that i-address calculated based on its name registration. It is recommended to avoid doing so to prevent potential issues.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is the limitation in the Verus Desktop GUI when creating a PBaaS chain with a name that is already used by a supported currency?",
            "In the Verus Desktop GUI, if a currency is already supported, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for the testnet release and will not be a limitation before mainnet availability.",
            "## Defining a PBaaS blockchain ```json { \"name\": \"PBaaSChain\", \"options\": 330, \"currencies\": [ \"VRSCTEST\" ], \"conversions\": [ 1 ], \"eras\": [ { \"reward\": 1200000000, \"decay\": 0, \"halving\": 0, \"eraend\": 0 } ], \"notaries\": [ \"Notary1@\", \"Notary2@\", \"Notary3@\", ], \"minnotariesconfirm\": 2, \"nodes\": [ { \"networkaddress\": \"111.111.111.111:10000\", \"nodeidentity\": \"Node1@\" }, {  \"networkaddress\": \"111.111.111.112:10000\", \"nodeidentity\": \"Node2@\" } ], \"gatewayconvertername\": \"Bridge\", \"gatewayconverterissuance\": 1000000 } ``` The bridge definition has overridable defaults ```json { \"currencies\": [ \"VRSCTEST\", \"PBaaSChain\", \"USD\" ], \"initialcontributions\": [ 380228.12033701, 0, 1000000 ], \"initialsupply\": 3000000 } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":330,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```## Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.2. (GUI) If a currency is supported in the Verus Desktop already, such as BTC or ETH, you will not be able to use those same named currencies as a PBaaS chain. This limitation is considered errata for this testnet release and will not be a limitation before mainnet availability.",
            "./raw_txt_input/release_notes.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "dbdf3a5c-81ef-43c0-aaf0-917c601a7e98"
]