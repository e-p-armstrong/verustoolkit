[
    [
        [
            "What is the purpose of the `getlaunchinfo` command in Verus?",
            "The `getlaunchinfo` command is used to retrieve information about the launch of a specific currency, including its definition, transaction ID, vout index of the launch notarization, partial transaction proof, launch notarization, and current notarization of the chain.",
            "#### Arguments: 1. \"currencyid\"         (string, required) the hex-encoded ID or string name search for notarizations on#### Result: ```json {  \"currencydefinition\" : {},   (json) Full currency definition  \"txid\" : \"hexstr\",       (hexstr) transaction ID  \"voutnum\" : \"n\",        (number) vout index of the launch notarization  \"transactionproof\" : {},    (json) Partial transaction proof of the launch transaction and output  \"launchnotarization\" : {},   (json) Final CPBaaSNotarization clearing launch or refund  \"notarynotarization\" : {},   (json) Current notarization of this chain } ```Examples: ```bash > verus getlaunchinfo \"currencyid\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlaunchinfo\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getnotarizationdata \"currencyid\" (getevidence) (separatecounterevidence)` Returns the latest PBaaS notarization data for the specifed currencyid.Arguments ``` 1. \"currencyid\"         (string, required) the hex-encoded ID or string name search for notarizations on 2. \"(getevidence)\" \t      (bool, optional)  if true, returns notarization evidence as well as other data 3. \"(separatecounterevidence)\"  (bool, optional)  if true, counter-evidence is processed and returned with proofroots ``` #### Result: ```json {  \"version\" : n,         (numeric) The notarization protocol version } ``` Examples: ```bash > verus getnotarizationdata \"currencyid\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationdata\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getnotarizationproofs {json object}` Returns proofs to a caller for requested challenges. Some proofs can either independently or in combination with other proofs over time invalidate or force a competing chain to provide more proofs in order to confirm any pending cross-chain notarization of an alternate chain that may not agree with us.* It is not valid to have a challenge request with both confirmnotarization and confirmroot.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What does the `getlaunchinfo` command return?",
            "The `getlaunchinfo` command returns a JSON object containing the following information:\n\n1. `currencydefinition`: The full currency definition.\n2. `txid`: The transaction ID of the launch notarization.\n3. `voutnum`: The vout index of the launch notarization.\n4. `transactionproof`: A partial transaction proof of the launch transaction and output.\n5. `launchnotarization`: The final CPBaaSNotarization clearing launch or refund.\n6. `notarynotarization`: The current notarization of this chain.",
            "#### Arguments: 1. \"currencyid\"         (string, required) the hex-encoded ID or string name search for notarizations on#### Result: ```json {  \"currencydefinition\" : {},   (json) Full currency definition  \"txid\" : \"hexstr\",       (hexstr) transaction ID  \"voutnum\" : \"n\",        (number) vout index of the launch notarization  \"transactionproof\" : {},    (json) Partial transaction proof of the launch transaction and output  \"launchnotarization\" : {},   (json) Final CPBaaSNotarization clearing launch or refund  \"notarynotarization\" : {},   (json) Current notarization of this chain } ```Examples: ```bash > verus getlaunchinfo \"currencyid\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlaunchinfo\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getnotarizationdata \"currencyid\" (getevidence) (separatecounterevidence)` Returns the latest PBaaS notarization data for the specifed currencyid.Arguments ``` 1. \"currencyid\"         (string, required) the hex-encoded ID or string name search for notarizations on 2. \"(getevidence)\" \t      (bool, optional)  if true, returns notarization evidence as well as other data 3. \"(separatecounterevidence)\"  (bool, optional)  if true, counter-evidence is processed and returned with proofroots ``` #### Result: ```json {  \"version\" : n,         (numeric) The notarization protocol version } ``` Examples: ```bash > verus getnotarizationdata \"currencyid\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationdata\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getnotarizationproofs {json object}` Returns proofs to a caller for requested challenges. Some proofs can either independently or in combination with other proofs over time invalidate or force a competing chain to provide more proofs in order to confirm any pending cross-chain notarization of an alternate chain that may not agree with us.* It is not valid to have a challenge request with both confirmnotarization and confirmroot.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `getnotarizationdata` command in Verus?",
            "The `getnotarizationdata` command is used to retrieve the latest PBaaS notarization data for a specified currency ID. It can also return notarization evidence and counter-evidence with proof roots if the optional parameters are set.",
            "#### Arguments: 1. \"currencyid\"         (string, required) the hex-encoded ID or string name search for notarizations on#### Result: ```json {  \"currencydefinition\" : {},   (json) Full currency definition  \"txid\" : \"hexstr\",       (hexstr) transaction ID  \"voutnum\" : \"n\",        (number) vout index of the launch notarization  \"transactionproof\" : {},    (json) Partial transaction proof of the launch transaction and output  \"launchnotarization\" : {},   (json) Final CPBaaSNotarization clearing launch or refund  \"notarynotarization\" : {},   (json) Current notarization of this chain } ```Examples: ```bash > verus getlaunchinfo \"currencyid\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlaunchinfo\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getnotarizationdata \"currencyid\" (getevidence) (separatecounterevidence)` Returns the latest PBaaS notarization data for the specifed currencyid.Arguments ``` 1. \"currencyid\"         (string, required) the hex-encoded ID or string name search for notarizations on 2. \"(getevidence)\" \t      (bool, optional)  if true, returns notarization evidence as well as other data 3. \"(separatecounterevidence)\"  (bool, optional)  if true, counter-evidence is processed and returned with proofroots ``` #### Result: ```json {  \"version\" : n,         (numeric) The notarization protocol version } ``` Examples: ```bash > verus getnotarizationdata \"currencyid\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationdata\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getnotarizationproofs {json object}` Returns proofs to a caller for requested challenges. Some proofs can either independently or in combination with other proofs over time invalidate or force a competing chain to provide more proofs in order to confirm any pending cross-chain notarization of an alternate chain that may not agree with us.* It is not valid to have a challenge request with both confirmnotarization and confirmroot.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What does the `getnotarizationdata` command return?",
            "The `getnotarizationdata` command returns a JSON object containing the notarization protocol version. If the `(getevidence)` parameter is set to `true`, it also returns notarization evidence and other data. If the `(separatecounterevidence)` parameter is set to `true`, it processes and returns counter-evidence with proof roots.",
            "#### Arguments: 1. \"currencyid\"         (string, required) the hex-encoded ID or string name search for notarizations on#### Result: ```json {  \"currencydefinition\" : {},   (json) Full currency definition  \"txid\" : \"hexstr\",       (hexstr) transaction ID  \"voutnum\" : \"n\",        (number) vout index of the launch notarization  \"transactionproof\" : {},    (json) Partial transaction proof of the launch transaction and output  \"launchnotarization\" : {},   (json) Final CPBaaSNotarization clearing launch or refund  \"notarynotarization\" : {},   (json) Current notarization of this chain } ```Examples: ```bash > verus getlaunchinfo \"currencyid\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlaunchinfo\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getnotarizationdata \"currencyid\" (getevidence) (separatecounterevidence)` Returns the latest PBaaS notarization data for the specifed currencyid.Arguments ``` 1. \"currencyid\"         (string, required) the hex-encoded ID or string name search for notarizations on 2. \"(getevidence)\" \t      (bool, optional)  if true, returns notarization evidence as well as other data 3. \"(separatecounterevidence)\"  (bool, optional)  if true, counter-evidence is processed and returned with proofroots ``` #### Result: ```json {  \"version\" : n,         (numeric) The notarization protocol version } ``` Examples: ```bash > verus getnotarizationdata \"currencyid\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationdata\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getnotarizationproofs {json object}` Returns proofs to a caller for requested challenges. Some proofs can either independently or in combination with other proofs over time invalidate or force a competing chain to provide more proofs in order to confirm any pending cross-chain notarization of an alternate chain that may not agree with us.* It is not valid to have a challenge request with both confirmnotarization and confirmroot.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the purpose of the `getnotarizationproofs` command in Verus?",
            "The `getnotarizationproofs` command is used to return proofs to a caller for requested challenges. These proofs can be used to invalidate or force a competing chain to provide more proofs in order to confirm any pending cross-chain notarization of an alternate chain that may not agree with us.",
            "#### Arguments: 1. \"currencyid\"         (string, required) the hex-encoded ID or string name search for notarizations on#### Result: ```json {  \"currencydefinition\" : {},   (json) Full currency definition  \"txid\" : \"hexstr\",       (hexstr) transaction ID  \"voutnum\" : \"n\",        (number) vout index of the launch notarization  \"transactionproof\" : {},    (json) Partial transaction proof of the launch transaction and output  \"launchnotarization\" : {},   (json) Final CPBaaSNotarization clearing launch or refund  \"notarynotarization\" : {},   (json) Current notarization of this chain } ```Examples: ```bash > verus getlaunchinfo \"currencyid\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getlaunchinfo\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getnotarizationdata \"currencyid\" (getevidence) (separatecounterevidence)` Returns the latest PBaaS notarization data for the specifed currencyid.Arguments ``` 1. \"currencyid\"         (string, required) the hex-encoded ID or string name search for notarizations on 2. \"(getevidence)\" \t      (bool, optional)  if true, returns notarization evidence as well as other data 3. \"(separatecounterevidence)\"  (bool, optional)  if true, counter-evidence is processed and returned with proofroots ``` #### Result: ```json {  \"version\" : n,         (numeric) The notarization protocol version } ``` Examples: ```bash > verus getnotarizationdata \"currencyid\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationdata\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `getnotarizationproofs {json object}` Returns proofs to a caller for requested challenges. Some proofs can either independently or in combination with other proofs over time invalidate or force a competing chain to provide more proofs in order to confirm any pending cross-chain notarization of an alternate chain that may not agree with us.* It is not valid to have a challenge request with both confirmnotarization and confirmroot.",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ],
    "will",
    "be",
    "replaced",
    "68d0bae3-9646-4767-85e2-4e7f994ba0b0"
]