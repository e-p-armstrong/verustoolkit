[
    "How do I convert a raw transaction to a cross-chain export using Verus?",
    "You can use the `migrate_converttoexport` command to convert a raw transaction to a cross-chain export. This command takes three arguments: `rawTx`, `dest_symbol`, and `export_amount`. If necessary, the transaction should be funded using `fundrawtransaction` and signed using `signrawtransaction`. The finished export transaction and payouts should then be passed to the `migrate_createimporttransaction` method on a KMD node to get the corresponding import transaction.",
    "### `MoMoMdata symbol kmdheight ccid` ### `assetchainproof needs a txid` ### `calc_MoM height MoMdepth` ### `getNotarisationsForBlock blockHash` Takes a block hash and returns notarisation transactions within the block### `height_MoM height` ### `migrate_completeimporttransaction importTx` Takes a cross chain import tx with proof generated on assetchain and extends proof to target chain proof root### `migrate_converttoexport rawTx dest_symbol export_amount` Convert a raw transaction to a cross-chain export. If necesary, the transaction should be funded using `fundrawtransaction`. Finally, the transaction should be signed using `signrawtransaction`. The finished export transaction, plus the payouts, should be passed to the \"`migrate_createimporttransactio`n\" method on a KMD node to get the corresponding import transaction.### `migrate_createimporttransaction burnTx payouts` Create an importTx given a burnTx and the corresponding payouts, hex encoded### `scanNotarisationsDB blockHeight symbol [blocksLimit=1440]` Scans notarisationsdb backwards from height for a notarisation of given symbol## Disclosure ### `z_getpaymentdisclosure \"txid\" \"js_index\" \"output_index\" (\"message\")` Generate a payment disclosure for a given joinsplit output.EXPERIMENTAL FEATUREWARNING: z_getpaymentdisclosure is disabled. To enable it, restart verusd with the `-experimentalfeatures` and `-paymentdisclosure` commandline options, or add these two lines to the zcash.conf file: ``` experimentalfeatures=1 paymentdisclosure=1 ``` #### Arguments: ``` 1. \"txid\"      (string, required) 2. \"js_index\"    (string, required) 3. \"output_index\"  (string, required) 4. \"message\"     (string, optional) ``` #### Result: ``` \"paymentdisclosure\" (string) Hex data string, with \"zpd:\" prefix. ``` Examples: ```bash > verus z_getpaymentdisclosure 96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2 0 0 \"refund\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getpaymentdisclosure\", \"params\": [\"96f12882450429324d5f3b48630e3168220e49ab7b0f066e5c2935a6b88bb0f2\", 0, 0, \"refund\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `z_validatepaymentdisclosure \"paymentdisclosure\"` Validates a payment disclosure.EXPERIMENTAL FEATURE",
    "./raw_txt_input/clifaq-02_verus_commands.md"
]