[
    "## Conversation that answers the provided questions:\n**AI Assistant:**\nHey there! I'm here to assist you in understanding Verus. What's on your mind today?\n\n**User:**\nI've been playing around with the Verus CLI, and I came across the `listcurrencies` command. What does it do, and how can I use it?\n\n**AI Assistant:**\nThe `listcurrencies` command in Verus is used to list all available currencies on the Verus network. You can use it by running the command `verus listcurrencies true` in the terminal, or by making a JSON-RPC request to the Verus daemon. The `true` argument is required to specify that you want to list all available currencies.\n\nHave you tried using it already? Do you have any questions about the output or how to interpret the results?\n\n**User:**\nNo, I haven't tried it yet, but I think I understand how to use it now. Thanks! Actually, I have another question about a different command. What's the `refundfailedlaunch` command, and how can I use it?\n\n**AI Assistant:**\nThe `refundfailedlaunch` command in Verus is used to refund any funds sent to a chain if they are eligible for refund. This command attempts to refund all transactions for all contributors. You can use it by running the command `verus refundfailedlaunch \"currencyid\"` in the terminal, where \"currencyid\" is the ID of the chain to refund contributions to.\n\nMake sure to replace \"currencyid\" with the actual ID of the chain you want to refund contributions from. Do you have any questions about when to use this command or how to identify eligible refunds?\n\n**User:**\nNo, I think I understand. Thanks for the help!",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What is the `listcurrencies` command in Verus, and how can I use it?",
            "The `listcurrencies` command in Verus is used to list all available currencies on the Verus network. You can use it by running the command `verus listcurrencies true` in the terminal, or by making a JSON-RPC request to the Verus daemon. The `true` argument is required to specify that you want to list all available currencies.",
            " }   \"besttxid\" : \"txid\"   }   \"confirmednotarization\" : {   }   \"confirmedtxid\" : \"txid\"  }, ... ] ``` Examples: ```bash > verus listcurrencies true > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listcurrencies\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `refundfailedlaunch \"currencyid\"` Refunds any funds sent to the chain if they are eligible for refund. This attempts to refund all transactions for all contributors. #### Arguments: ``` \"currencyid\"      (hex or chain name, required) the chain to refund contributions to ``` #### Result: Examples: ```bash > verus refundfailedlaunch \"currencyid\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"refundfailedlaunch\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `sendcurrency \"fromaddress\" '[{\"address\":... ,\"amount\":...},...]' (minconfs) (feeamount) (returntxtemplate)` This sends one or many Verus outputs to one or many addresses on the same or another chain. Funds are sourced automatically from the current wallet, which must be present, as in sendtoaddress. If \"fromaddress\" is specified, all funds will be taken from that address, otherwise funds may come from any source set of UTXOs controlled by the wallet. #### Arguments: 1. \"fromaddress\"       (string, required) The VerusID or address to send the funds from. \"\\*\", \"R\\*\" and \"i\\*\" wildcards are supported. Also `\"idname@:private\"` can be used to source from a balance of a private address attached to an ID. 2. \"outputs\"         (array, required) An array of json objects representing currencies, amounts, and destinations to send.   ```json   [{    \"currency\": \"name\"   (string, required) Name of the source currency to send in this output, defaults to native of chain    \"amount\":amount    (numeric, required) The numeric amount of currency, denominated in source currency    \"convertto\":\"name\",  (string, optional) Valid currency to convert to, either a reserve of a fractional, or fractional    \"exportto\":\"name\",   (string, optional) Valid chain or system name or ID to export to    \"exportid\":\"false\",  (bool,  optional) if cross-chain ID, export the ID to the destination chain (will cost to export)    \"exportcurrency\":\"false\", (bool, optional) if cross-chain export, export the currency definition (will cost to export)    \"feecurrency\":\"name\", (string, optional) Valid currency that should be pulled from the current wallet and used to pay fee    \"via\":\"name\",     (string, optional) If source and destination currency are",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ],
        [
            "What is the `refundfailedlaunch` command in Verus, and how can I use it?",
            "The `refundfailedlaunch` command in Verus is used to refund any funds sent to a chain if they are eligible for refund. This command attempts to refund all transactions for all contributors. You can use it by running the command `verus refundfailedlaunch \"currencyid\"` in the terminal, where \"currencyid\" is the ID of the chain to refund contributions to.",
            " }   \"besttxid\" : \"txid\"   }   \"confirmednotarization\" : {   }   \"confirmedtxid\" : \"txid\"  }, ... ] ``` Examples: ```bash > verus listcurrencies true > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"listcurrencies\", \"params\": [true] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `refundfailedlaunch \"currencyid\"` Refunds any funds sent to the chain if they are eligible for refund. This attempts to refund all transactions for all contributors. #### Arguments: ``` \"currencyid\"      (hex or chain name, required) the chain to refund contributions to ``` #### Result: Examples: ```bash > verus refundfailedlaunch \"currencyid\" > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"refundfailedlaunch\", \"params\": [\"currencyid\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/ ```### `sendcurrency \"fromaddress\" '[{\"address\":... ,\"amount\":...},...]' (minconfs) (feeamount) (returntxtemplate)` This sends one or many Verus outputs to one or many addresses on the same or another chain. Funds are sourced automatically from the current wallet, which must be present, as in sendtoaddress. If \"fromaddress\" is specified, all funds will be taken from that address, otherwise funds may come from any source set of UTXOs controlled by the wallet. #### Arguments: 1. \"fromaddress\"       (string, required) The VerusID or address to send the funds from. \"\\*\", \"R\\*\" and \"i\\*\" wildcards are supported. Also `\"idname@:private\"` can be used to source from a balance of a private address attached to an ID. 2. \"outputs\"         (array, required) An array of json objects representing currencies, amounts, and destinations to send.   ```json   [{    \"currency\": \"name\"   (string, required) Name of the source currency to send in this output, defaults to native of chain    \"amount\":amount    (numeric, required) The numeric amount of currency, denominated in source currency    \"convertto\":\"name\",  (string, optional) Valid currency to convert to, either a reserve of a fractional, or fractional    \"exportto\":\"name\",   (string, optional) Valid chain or system name or ID to export to    \"exportid\":\"false\",  (bool,  optional) if cross-chain ID, export the ID to the destination chain (will cost to export)    \"exportcurrency\":\"false\", (bool, optional) if cross-chain export, export the currency definition (will cost to export)    \"feecurrency\":\"name\", (string, optional) Valid currency that should be pulled from the current wallet and used to pay fee    \"via\":\"name\",     (string, optional) If source and destination currency are",
            "./raw_txt_input/clifaq-02_verus_commands.md"
        ]
    ]
]