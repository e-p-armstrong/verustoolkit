[
    "## Conversation that answers the provided questions:\n**AI Assistant:**\nHi there! I'm here to help with any questions you have about Verus. What's on your mind today?\n\n**User:**\nHow do you define a PBaaS blockchain using the command line and Verus?\n\n**AI Assistant:**\nYou can define a PBaaS blockchain using the `definecurrency` command in Verus. The command takes two JSON objects as arguments: one for the PBaaS blockchain definition and another for the overridable defaults of the bridge. Here's an example:\n```\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```\nDo you have any further questions about defining a PBaaS blockchain in Verus?\n\n**User:**\nWhat are the limitations of creating a currency from an ID with a properly encoded i-address as its actual name in Verus?\n\n**AI Assistant:**\nIn Verus, creating a currency from an ID with a properly encoded i-address as its actual name is not supported and can cause problems. This is because an i-address is used to calculate the ID based on its name registration, and using an i-address as a currency name can lead to confusion and errors. It is generally advised to avoid using i-addresses as currency names.\n\n**User:**\nWhy is it recommended to avoid using i-addresses as currency names in Verus?\n\n**AI Assistant:**\nUsing an i-address as a currency name can lead to confusion and errors, as an i-address is used to calculate the ID based on its name registration. This can cause issues whenever an i-address or name may be used, and is not supported for creating currencies. To avoid user confusion, Verus is expanding the set of characters that will not be allowed for currency registrations.\n\n**User:**\nWhat is the purpose of the `definecurrency` command in Verus?\n\n**AI Assistant:**\nThe `definecurrency` command is used to define a new PBaaS blockchain and its properties, such as its name, options, currencies, conversions, eras, notaries, nodes, and gateway converter settings.\n\n**User:**\nWhat are the components of a PBaaS blockchain definition in Verus?\n\n**AI Assistant:**\nA PBaaS blockchain definition in Verus consists of several components, including the name of the chain, options, currencies, conversions, eras, notaries, min notaries confirm, nodes, gateway converter name, and gateway converter issuance.\n\n**User:**\nWhat are the key components of a PBaaS blockchain definition in Verus?\n\n**AI Assistant:**\nThe key components of a PBaaS blockchain definition in Verus include the name of the chain, options, currencies, conversions, eras, notaries, min notaries confirm, nodes, gateway converter name, and gateway converter issuance.\n\n**User:**\nWhat are the override defaults for the bridge definition in a PBaaS blockchain?\n\n**AI Assistant:**\nThe override defaults for the bridge definition in a PBaaS blockchain include currencies, initial contributions, and initial supply.\n\n**User:**\nWhat is a limitation to be aware of when creating a multi-currency in Verus?\n\n**AI Assistant:**\nOne limitation to be aware of when creating a multi-currency in Verus is that you cannot make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. This is because using an i-address when referring to a currency will only be interpreted as referring to the currency or identity that has that i-address calculated based on its name registration. It is advised to avoid creating IDs with i-addresses as their names to prevent potential user confusion and problems.\n\n**User:**\nWhat are the essential components of a PBaaS blockchain definition in Verus?\n\n**AI Assistant:**\nA PBaaS blockchain definition in Verus consists of several essential components, including the name of the chain, options, currencies, conversions, eras, notaries, min notaries confirm, nodes, gateway converter name, and gateway converter issuance.\n\n**User:**\nWhat is an important limitation to be aware of when working with multi-currency in Verus?\n\n**AI Assistant:**\nOne important limitation to be aware of is that you cannot create a currency from an ID that has a properly encoded i-address as its actual name (not its calculated ID). This can cause problems when using i-addresses or names, and is not supported for creating currencies.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "How do you define a PBaaS blockchain using the command line and Verus?",
            "You can define a PBaaS blockchain using the `definecurrency` command in Verus. The command takes two JSON objects as arguments: one for the PBaaS blockchain definition and another for the overridable defaults of the bridge. Here's an example:\n```\n./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}'\n```",
            "### Defining a PBaaS blockchain ```json  {   \"name\": \"PBaaSChain\",   \"options\": 264,   \"currencies\": [    \"VRSCTEST\"   ],   \"conversions\": [    1   ],   \"eras\": [    {     \"reward\": 1200000000,     \"decay\": 0,     \"halving\": 0,     \"eraend\": 0    }   ],   \"notaries\": [    \"Notary1@\",    \"Notary2@\",    \"Notary3@\",   ],   \"minnotariesconfirm\": 2,   \"nodes\": [    {     \"networkaddress\": \"111.111.111.111:10000\",     \"nodeidentity\": \"Node1@\"    },    {     \"networkaddress\": \"111.111.111.112:10000\",     \"nodeidentity\": \"Node2@\"    }   ],   \"gatewayconvertername\": \"Bridge\",   \"gatewayconverterissuance\": 1000000  } ``` The bridge definition has overridable defaults ```json  {   \"currencies\": [    \"VRSCTEST\",    \"PBaaSChain\",    \"USD\"   ],   \"initialcontributions\": [    380228.12033701,    0,    1000000   ],   \"initialsupply\": 3000000  } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are the limitations of creating a currency from an ID with a properly encoded i-address as its actual name in Verus?",
            "In Verus, creating a currency from an ID with a properly encoded i-address as its actual name is not supported and can cause problems. This is because an i-address is used to calculate the ID based on its name registration, and using an i-address as a currency name can lead to confusion and errors. It is generally advised to avoid using i-addresses as currency names.",
            "### Defining a PBaaS blockchain ```json  {   \"name\": \"PBaaSChain\",   \"options\": 264,   \"currencies\": [    \"VRSCTEST\"   ],   \"conversions\": [    1   ],   \"eras\": [    {     \"reward\": 1200000000,     \"decay\": 0,     \"halving\": 0,     \"eraend\": 0    }   ],   \"notaries\": [    \"Notary1@\",    \"Notary2@\",    \"Notary3@\",   ],   \"minnotariesconfirm\": 2,   \"nodes\": [    {     \"networkaddress\": \"111.111.111.111:10000\",     \"nodeidentity\": \"Node1@\"    },    {     \"networkaddress\": \"111.111.111.112:10000\",     \"nodeidentity\": \"Node2@\"    }   ],   \"gatewayconvertername\": \"Bridge\",   \"gatewayconverterissuance\": 1000000  } ``` The bridge definition has overridable defaults ```json  {   \"currencies\": [    \"VRSCTEST\",    \"PBaaSChain\",    \"USD\"   ],   \"initialcontributions\": [    380228.12033701,    0,    1000000   ],   \"initialsupply\": 3000000  } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "Why is it recommended to avoid using i-addresses as currency names in Verus?",
            "Using an i-address as a currency name can lead to confusion and errors, as an i-address is used to calculate the ID based on its name registration. This can cause issues whenever an i-address or name may be used, and is not supported for creating currencies. To avoid user confusion, Verus is expanding the set of characters that will not be allowed for currency registrations.",
            "### Defining a PBaaS blockchain ```json  {   \"name\": \"PBaaSChain\",   \"options\": 264,   \"currencies\": [    \"VRSCTEST\"   ],   \"conversions\": [    1   ],   \"eras\": [    {     \"reward\": 1200000000,     \"decay\": 0,     \"halving\": 0,     \"eraend\": 0    }   ],   \"notaries\": [    \"Notary1@\",    \"Notary2@\",    \"Notary3@\",   ],   \"minnotariesconfirm\": 2,   \"nodes\": [    {     \"networkaddress\": \"111.111.111.111:10000\",     \"nodeidentity\": \"Node1@\"    },    {     \"networkaddress\": \"111.111.111.112:10000\",     \"nodeidentity\": \"Node2@\"    }   ],   \"gatewayconvertername\": \"Bridge\",   \"gatewayconverterissuance\": 1000000  } ``` The bridge definition has overridable defaults ```json  {   \"currencies\": [    \"VRSCTEST\",    \"PBaaSChain\",    \"USD\"   ],   \"initialcontributions\": [    380228.12033701,    0,    1000000   ],   \"initialsupply\": 3000000  } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is the purpose of the `definecurrency` command in Verus?",
            "The `definecurrency` command is used to define a new PBaaS blockchain and its properties, such as its name, options, currencies, conversions, eras, notaries, nodes, and gateway converter settings.",
            "### Defining a PBaaS blockchain ```json  {   \"name\": \"PBaaSChain\",   \"options\": 264,   \"currencies\": [    \"VRSCTEST\"   ],   \"conversions\": [    1   ],   \"eras\": [    {     \"reward\": 1200000000,     \"decay\": 0,     \"halving\": 0,     \"eraend\": 0    }   ],   \"notaries\": [    \"Notary1@\",    \"Notary2@\",    \"Notary3@\",   ],   \"minnotariesconfirm\": 2,   \"nodes\": [    {     \"networkaddress\": \"111.111.111.111:10000\",     \"nodeidentity\": \"Node1@\"    },    {     \"networkaddress\": \"111.111.111.112:10000\",     \"nodeidentity\": \"Node2@\"    }   ],   \"gatewayconvertername\": \"Bridge\",   \"gatewayconverterissuance\": 1000000  } ``` The bridge definition has overridable defaults ```json  {   \"currencies\": [    \"VRSCTEST\",    \"PBaaSChain\",    \"USD\"   ],   \"initialcontributions\": [    380228.12033701,    0,    1000000   ],   \"initialsupply\": 3000000  } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are the components of a PBaaS blockchain definition in Verus?",
            "A PBaaS blockchain definition in Verus consists of several components, including:\n\n1. `name`: the name of the chain\n2. `options`: an integer that defines the chain's properties\n3. `currencies`: an array of currency tickers that the chain's native currency can be converted into\n4. `conversions`: an array of conversion ratios between the chain's native currency and each currency on the chain\n5. `eras`: an array of objects that define the block reward, reward decay, halving, and end of each era in the chain's lifecycle\n6. `notaries`: an array of VerusIDs that will serve as notaries on the chain\n7. `minnotariesconfirm`: an integer that specifies the minimum number of notaries needed to confirm a block\n8. `nodes`: an array of objects that describe the network addresses of the nodes on the chain, as well as their IDs\n9. `gatewayconvertername`: the name of the bridge converter\n10. `gatewayconverterissuance`: the initial issuance of the bridge converter",
            "### Defining a PBaaS blockchain ```json  {   \"name\": \"PBaaSChain\",   \"options\": 264,   \"currencies\": [    \"VRSCTEST\"   ],   \"conversions\": [    1   ],   \"eras\": [    {     \"reward\": 1200000000,     \"decay\": 0,     \"halving\": 0,     \"eraend\": 0    }   ],   \"notaries\": [    \"Notary1@\",    \"Notary2@\",    \"Notary3@\",   ],   \"minnotariesconfirm\": 2,   \"nodes\": [    {     \"networkaddress\": \"111.111.111.111:10000\",     \"nodeidentity\": \"Node1@\"    },    {     \"networkaddress\": \"111.111.111.112:10000\",     \"nodeidentity\": \"Node2@\"    }   ],   \"gatewayconvertername\": \"Bridge\",   \"gatewayconverterissuance\": 1000000  } ``` The bridge definition has overridable defaults ```json  {   \"currencies\": [    \"VRSCTEST\",    \"PBaaSChain\",    \"USD\"   ],   \"initialcontributions\": [    380228.12033701,    0,    1000000   ],   \"initialsupply\": 3000000  } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are the key components of a PBaaS blockchain definition in Verus?",
            "The key components of a PBaaS blockchain definition in Verus include:\n\n1. `name`: The name of the chain.\n2. `options`: An integer value that configures the chain's properties.\n3. `currencies`: An array of currencies that the chain's native currency can be converted into.\n4. `conversions`: An array of conversion ratios between the chain's native currency and each currency on the chain.\n5. `eras`: An array of objects defining the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle.\n6. `notaries`: An array of VerusIDs that serve as notaries on the chain.\n7. `minnotariesconfirm`: An integer value specifying the minimum number of notaries needed to confirm a block.\n8. `nodes`: An array of objects describing the network addresses and IDs of the nodes on the chain.\n9. `gatewayconvertername`: The name of the bridge converter.\n10. `gatewayconverterissuance`: The initial issuance of the bridge converter's native token.",
            "### Defining a PBaaS blockchain ```json  {   \"name\": \"PBaaSChain\",   \"options\": 264,   \"currencies\": [    \"VRSCTEST\"   ],   \"conversions\": [    1   ],   \"eras\": [    {     \"reward\": 1200000000,     \"decay\": 0,     \"halving\": 0,     \"eraend\": 0    }   ],   \"notaries\": [    \"Notary1@\",    \"Notary2@\",    \"Notary3@\",   ],   \"minnotariesconfirm\": 2,   \"nodes\": [    {     \"networkaddress\": \"111.111.111.111:10000\",     \"nodeidentity\": \"Node1@\"    },    {     \"networkaddress\": \"111.111.111.112:10000\",     \"nodeidentity\": \"Node2@\"    }   ],   \"gatewayconvertername\": \"Bridge\",   \"gatewayconverterissuance\": 1000000  } ``` The bridge definition has overridable defaults ```json  {   \"currencies\": [    \"VRSCTEST\",    \"PBaaSChain\",    \"USD\"   ],   \"initialcontributions\": [    380228.12033701,    0,    1000000   ],   \"initialsupply\": 3000000  } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are the override defaults for the bridge definition in a PBaaS blockchain?",
            "The override defaults for the bridge definition in a PBaaS blockchain include:\n\n1. `currencies`: An array of currency tickers that the bridge supports.\n2. `initialcontributions`: An array of initial liquidity values for each currency in the bridge.\n3. `initialsupply`: The initial supply of the bridge's native token.",
            "### Defining a PBaaS blockchain ```json  {   \"name\": \"PBaaSChain\",   \"options\": 264,   \"currencies\": [    \"VRSCTEST\"   ],   \"conversions\": [    1   ],   \"eras\": [    {     \"reward\": 1200000000,     \"decay\": 0,     \"halving\": 0,     \"eraend\": 0    }   ],   \"notaries\": [    \"Notary1@\",    \"Notary2@\",    \"Notary3@\",   ],   \"minnotariesconfirm\": 2,   \"nodes\": [    {     \"networkaddress\": \"111.111.111.111:10000\",     \"nodeidentity\": \"Node1@\"    },    {     \"networkaddress\": \"111.111.111.112:10000\",     \"nodeidentity\": \"Node2@\"    }   ],   \"gatewayconvertername\": \"Bridge\",   \"gatewayconverterissuance\": 1000000  } ``` The bridge definition has overridable defaults ```json  {   \"currencies\": [    \"VRSCTEST\",    \"PBaaSChain\",    \"USD\"   ],   \"initialcontributions\": [    380228.12033701,    0,    1000000   ],   \"initialsupply\": 3000000  } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is a limitation to be aware of when creating a multi-currency in Verus?",
            "One limitation to be aware of when creating a multi-currency in Verus is that you cannot make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. This is because using an i-address when referring to a currency will only be interpreted as referring to the currency or identity that has that i-address calculated based on its name registration. It is advised to avoid creating IDs with i-addresses as their names to prevent potential user confusion and problems.",
            "### Defining a PBaaS blockchain ```json  {   \"name\": \"PBaaSChain\",   \"options\": 264,   \"currencies\": [    \"VRSCTEST\"   ],   \"conversions\": [    1   ],   \"eras\": [    {     \"reward\": 1200000000,     \"decay\": 0,     \"halving\": 0,     \"eraend\": 0    }   ],   \"notaries\": [    \"Notary1@\",    \"Notary2@\",    \"Notary3@\",   ],   \"minnotariesconfirm\": 2,   \"nodes\": [    {     \"networkaddress\": \"111.111.111.111:10000\",     \"nodeidentity\": \"Node1@\"    },    {     \"networkaddress\": \"111.111.111.112:10000\",     \"nodeidentity\": \"Node2@\"    }   ],   \"gatewayconvertername\": \"Bridge\",   \"gatewayconverterissuance\": 1000000  } ``` The bridge definition has overridable defaults ```json  {   \"currencies\": [    \"VRSCTEST\",    \"PBaaSChain\",    \"USD\"   ],   \"initialcontributions\": [    380228.12033701,    0,    1000000   ],   \"initialsupply\": 3000000  } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are the essential components of a PBaaS blockchain definition in Verus?",
            "A PBaaS blockchain definition in Verus consists of several essential components:\n\n1. **Name**: The name of the chain, e.g., \"PBaaSChain\".\n2. **Options**: An integer defining various settings for the chain, e.g., 264.\n3. **Currencies**: An array of currency tickers that the chain's native currency can be converted into, e.g., [\"VRSCTEST\"].\n4. **Conversions**: An array defining the conversion ratios between the chain's native currency and each currency on the chain, e.g., [1].\n5. **Eras**: An array defining the block reward, reward decay, halving, and end of each \"era\" in the chain's lifecycle.\n6. **Notaries**: An array of VerusIDs that will serve as notaries on the chain, e.g., [\"Notary1@\", \"Notary2@\", \"Notary3@\"].\n7. **Min Notaries Confirm**: An integer specifying the minimum number of notaries needed to confirm a block, e.g., 2.\n8. **Nodes**: An array describing the network addresses and IDs of the nodes on the chain.\n9. **Gateway Converter Name**: The name of the gateway converter, e.g., \"Bridge\".\n10. **Gateway Converter Issuance**: The initial issuance amount for the gateway converter, e.g., 1000000.",
            "### Defining a PBaaS blockchain ```json  {   \"name\": \"PBaaSChain\",   \"options\": 264,   \"currencies\": [    \"VRSCTEST\"   ],   \"conversions\": [    1   ],   \"eras\": [    {     \"reward\": 1200000000,     \"decay\": 0,     \"halving\": 0,     \"eraend\": 0    }   ],   \"notaries\": [    \"Notary1@\",    \"Notary2@\",    \"Notary3@\",   ],   \"minnotariesconfirm\": 2,   \"nodes\": [    {     \"networkaddress\": \"111.111.111.111:10000\",     \"nodeidentity\": \"Node1@\"    },    {     \"networkaddress\": \"111.111.111.112:10000\",     \"nodeidentity\": \"Node2@\"    }   ],   \"gatewayconvertername\": \"Bridge\",   \"gatewayconverterissuance\": 1000000  } ``` The bridge definition has overridable defaults ```json  {   \"currencies\": [    \"VRSCTEST\",    \"PBaaSChain\",    \"USD\"   ],   \"initialcontributions\": [    380228.12033701,    0,    1000000   ],   \"initialsupply\": 3000000  } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is an important limitation to be aware of when working with multi-currency in Verus?",
            "One important limitation to be aware of is that you cannot create a currency from an ID that has a properly encoded i-address as its actual name (not its calculated ID). This can cause problems when using i-addresses or names, and is not supported for creating currencies.",
            "### Defining a PBaaS blockchain ```json  {   \"name\": \"PBaaSChain\",   \"options\": 264,   \"currencies\": [    \"VRSCTEST\"   ],   \"conversions\": [    1   ],   \"eras\": [    {     \"reward\": 1200000000,     \"decay\": 0,     \"halving\": 0,     \"eraend\": 0    }   ],   \"notaries\": [    \"Notary1@\",    \"Notary2@\",    \"Notary3@\",   ],   \"minnotariesconfirm\": 2,   \"nodes\": [    {     \"networkaddress\": \"111.111.111.111:10000\",     \"nodeidentity\": \"Node1@\"    },    {     \"networkaddress\": \"111.111.111.112:10000\",     \"nodeidentity\": \"Node2@\"    }   ],   \"gatewayconvertername\": \"Bridge\",   \"gatewayconverterissuance\": 1000000  } ``` The bridge definition has overridable defaults ```json  {   \"currencies\": [    \"VRSCTEST\",    \"PBaaSChain\",    \"USD\"   ],   \"initialcontributions\": [    380228.12033701,    0,    1000000   ],   \"initialsupply\": 3000000  } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.",
            "./raw_txt_input/release_notes.md"
        ]
    ]
]