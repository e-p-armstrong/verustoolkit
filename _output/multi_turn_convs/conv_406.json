[
    "## Conversation that answers the provided questions:\n**AI Assistant:**\nHi there! I'm here to help you understand Verus. What's on your mind today?\n\n**User:**\nI'm interested in learning about VerusIDs. What features make a VerusID private?\n\n**AI Assistant:**\nA VerusID is private because it contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints. Additionally, each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong identity, attested to with a quantum secure signature when that is available.\n\n**User:**\nThat's really interesting. Can you tell me more about the characteristics of a VerusID in terms of privacy?\n\n**AI Assistant:**\nEach VerusID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints. Additionally, each ID contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide private yet selectively provable claims and attestations, or selectively provable components of a strong identity, attested to with a quantum secure signature when available.\n\n**User:**\nAnother thing I'd like to know is what it means for a VerusID to be revocable. Can you explain that to me?\n\n**AI Assistant:**\nA VerusID is revocable because it includes a revocation authority, which defaults to the identity itself. This authority has the permission to revoke the identity, creating a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered. This effectively freezes all of its funds, for example, in the case of key theft.\n\n**User:**\nI've heard about the VerusHash 2.0 algorithm. What's its purpose?\n\n**AI Assistant:**\nThe VerusHash 2.0 algorithm was developed to equalize FPGAs (Field-Programmable Gate Arrays) and modern CPUs, keeping FPGA performance for the price under 2x of CPU. This was done to prevent FPGAs from dominating over CPUs on the Verus network.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What features make a VerusID private?",
            "A VerusID is private because it contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints. Additionally, each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong identity, attested to with a quantum secure signature when that is available.",
            "- **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available. # VerusHash 2.1 VerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network. # Disclaimer",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are some characteristics of a VerusID in terms of privacy?",
            "Each VerusID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints. Additionally, each ID contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide private yet selectively provable claims and attestations, or selectively provable components of a strong identity, attested to with a quantum secure signature when available.",
            "- **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available. # VerusHash 2.1 VerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network. # Disclaimer",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What does it mean for a VerusID to be revocable?",
            "A VerusID is revocable because it includes a revocation authority, which defaults to the identity itself. This authority has the permission to revoke the identity, creating a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered. This effectively freezes all of its funds, for example, in the case of key theft.",
            "- **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available. # VerusHash 2.1 VerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network. # Disclaimer",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What is the purpose of the VerusHash 2.0 algorithm?",
            "The VerusHash 2.0 algorithm was developed to equalize FPGAs (Field-Programmable Gate Arrays) and modern CPUs, keeping FPGA performance for the price under 2x of CPU. This was done to prevent FPGAs from dominating over CPUs on the Verus network.",
            "- **Revocable** -- each ID includes a revocation authority, which defaults to the identity self, and which has the permission to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft.- **Recoverable** -- each ID also includes a separate recovery authority, which also defaults to self, and which can recover the identity through redefining its primary state and the recovery state as well, though it cannot modify the revocation state, or vice versa, unless they are both controlled by the same underlying authority.- **Private** - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong passport, attested to with a quantum secure signature when that is available. # VerusHash 2.1 VerusHash 2.0 was the first algorithm to significantly equalize FPGAs dominance over CPUs, once they were introduced on the Verus network. While FPGAs were intentionally not blocked completely, which would simply drive the performance battle to the higher end and further into secret, the VerusHash 2.0 algorithm was developed to explicitly equalize FPGAs and modern CPUs and has met its original goals in keeping FPGA performance for the price under 2x of CPU. VerusHash 2.1 introduces an adjustment to the equalization technology, which we expect to tilt the balance a bit more favorably towards CPUs, while still enabling FPGAs to operate on the hash algorithm with minor modifications. Verus Developers have proactively reached out to FPGA manufacturers and made the new algorithm available to them, so that everyone will have an opportunity to mine and stake when the Verus economy starts to roll and identity rewards, which will not inflate the currency, but should far exceed the potential for block rewards, begin streaming from the network. # Disclaimer",
            "./raw_txt_input/release_notes.md"
        ]
    ]
]