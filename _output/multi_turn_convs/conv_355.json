[
    "## Conversation that answers the provided questions:\n**AI Assistant:**\nHi there! I'm here to help you understand Verus better. What do you want to know about Verus today?\n\n**User:**\nI've been trying to learn more about PBaaS blockchain definitions in Verus. What are the key components of a PBaaS blockchain definition?\n\n**AI Assistant:**\nThe key components of a PBaaS blockchain definition in Verus include:\n\n1. `name`: The name of the blockchain.\n2. `options`: An integer specifying the blockchain's options.\n3. `currencies`: An array of currencies that the blockchain's native currency can be converted into.\n4. `conversions`: An array of conversion ratios between the blockchain's native currency and each currency on the chain.\n5. `eras`: An array of era definitions, including block reward, reward decay, halving, and era end.\n6. `notaries`: An array of VerusIDs that will serve as notaries on the chain.\n7. `minnotariesconfirm`: An integer specifying the minimum number of notaries needed to confirm a block.\n8. `nodes`: An array of node definitions, including network addresses and node identities.\n9. `gatewayconvertername` and `gatewayconverterissuance`: Settings for the bridge that connects the PBaaS chain to other chains.\n\nDo you have any other questions about PBaaS blockchain definitions or Verus in general?\n\n**User:**\nActually, I do have a question about creating currencies from IDs with i-addresses as their names. What are the limitations of doing that in Verus?\n\n**AI Assistant:**\nIn Verus, creating a currency from an ID with a properly encoded i-address as its actual name is not supported and can cause problems. This is because an i-address is used to calculate the ID based on its name registration, and using an i-address as a currency name can lead to confusion and errors. It is generally advised to avoid using i-addresses as currency names.\n\nWould you like to know more about why this is the case?\n\n**User:**\nYes, please explain why it's not recommended to use i-addresses as currency names in Verus.\n\n**AI Assistant:**\nUsing an i-address as a currency name can lead to confusion and errors, as an i-address is used to calculate the ID based on its name registration. This can cause issues whenever an i-address or name may be used, and is not supported for creating currencies. To avoid user confusion, Verus is expanding the set of characters that will not be allowed for currency registrations.",
    "AI Assistant",
    "",
    "N/A",
    [
        [
            "What are the key components of a PBaaS blockchain definition in Verus?",
            "The key components of a PBaaS blockchain definition in Verus include:\n\n1. `name`: The name of the blockchain.\n2. `options`: An integer specifying the blockchain's options.\n3. `currencies`: An array of currencies that the blockchain's native currency can be converted into.\n4. `conversions`: An array of conversion ratios between the blockchain's native currency and each currency on the chain.\n5. `eras`: An array of era definitions, including block reward, reward decay, halving, and era end.\n6. `notaries`: An array of VerusIDs that will serve as notaries on the chain.\n7. `minnotariesconfirm`: An integer specifying the minimum number of notaries needed to confirm a block.\n8. `nodes`: An array of node definitions, including network addresses and node identities.\n9. `gatewayconvertername` and `gatewayconverterissuance`: Settings for the bridge that connects the PBaaS chain to other chains.",
            "### Defining a PBaaS blockchain ```json  {   \"name\": \"PBaaSChain\",   \"options\": 264,   \"currencies\": [    \"VRSCTEST\"   ],   \"conversions\": [    1   ],   \"eras\": [    {     \"reward\": 1200000000,     \"decay\": 0,     \"halving\": 0,     \"eraend\": 0    }   ],   \"notaries\": [    \"Notary1@\",    \"Notary2@\",    \"Notary3@\",   ],   \"minnotariesconfirm\": 2,   \"nodes\": [    {     \"networkaddress\": \"111.111.111.111:10000\",     \"nodeidentity\": \"Node1@\"    },    {     \"networkaddress\": \"111.111.111.112:10000\",     \"nodeidentity\": \"Node2@\"    }   ],   \"gatewayconvertername\": \"Bridge\",   \"gatewayconverterissuance\": 1000000  } ``` The bridge definition has overridable defaults ```json  {   \"currencies\": [    \"VRSCTEST\",    \"PBaaSChain\",    \"USD\"   ],   \"initialcontributions\": [    380228.12033701,    0,    1000000   ],   \"initialsupply\": 3000000  } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "What are the limitations of creating a currency from an ID with a properly encoded i-address as its actual name in Verus?",
            "In Verus, creating a currency from an ID with a properly encoded i-address as its actual name is not supported and can cause problems. This is because an i-address is used to calculate the ID based on its name registration, and using an i-address as a currency name can lead to confusion and errors. It is generally advised to avoid using i-addresses as currency names.",
            "### Defining a PBaaS blockchain ```json  {   \"name\": \"PBaaSChain\",   \"options\": 264,   \"currencies\": [    \"VRSCTEST\"   ],   \"conversions\": [    1   ],   \"eras\": [    {     \"reward\": 1200000000,     \"decay\": 0,     \"halving\": 0,     \"eraend\": 0    }   ],   \"notaries\": [    \"Notary1@\",    \"Notary2@\",    \"Notary3@\",   ],   \"minnotariesconfirm\": 2,   \"nodes\": [    {     \"networkaddress\": \"111.111.111.111:10000\",     \"nodeidentity\": \"Node1@\"    },    {     \"networkaddress\": \"111.111.111.112:10000\",     \"nodeidentity\": \"Node2@\"    }   ],   \"gatewayconvertername\": \"Bridge\",   \"gatewayconverterissuance\": 1000000  } ``` The bridge definition has overridable defaults ```json  {   \"currencies\": [    \"VRSCTEST\",    \"PBaaSChain\",    \"USD\"   ],   \"initialcontributions\": [    380228.12033701,    0,    1000000   ],   \"initialsupply\": 3000000  } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.",
            "./raw_txt_input/release_notes.md"
        ],
        [
            "Why is it recommended to avoid using i-addresses as currency names in Verus?",
            "Using an i-address as a currency name can lead to confusion and errors, as an i-address is used to calculate the ID based on its name registration. This can cause issues whenever an i-address or name may be used, and is not supported for creating currencies. To avoid user confusion, Verus is expanding the set of characters that will not be allowed for currency registrations.",
            "### Defining a PBaaS blockchain ```json  {   \"name\": \"PBaaSChain\",   \"options\": 264,   \"currencies\": [    \"VRSCTEST\"   ],   \"conversions\": [    1   ],   \"eras\": [    {     \"reward\": 1200000000,     \"decay\": 0,     \"halving\": 0,     \"eraend\": 0    }   ],   \"notaries\": [    \"Notary1@\",    \"Notary2@\",    \"Notary3@\",   ],   \"minnotariesconfirm\": 2,   \"nodes\": [    {     \"networkaddress\": \"111.111.111.111:10000\",     \"nodeidentity\": \"Node1@\"    },    {     \"networkaddress\": \"111.111.111.112:10000\",     \"nodeidentity\": \"Node2@\"    }   ],   \"gatewayconvertername\": \"Bridge\",   \"gatewayconverterissuance\": 1000000  } ``` The bridge definition has overridable defaults ```json  {   \"currencies\": [    \"VRSCTEST\",    \"PBaaSChain\",    \"USD\"   ],   \"initialcontributions\": [    380228.12033701,    0,    1000000   ],   \"initialsupply\": 3000000  } ```Now pass those definitions to `definecurrency` ```json ./verus -chain=vrsctest definecurrency '{\"name\":\"PBaaSChain\",\"options\":264,\"currencies\":[\"VRSCTEST\"],\"conversions\":[1],\"eras\":[{\"reward\":1200000000,\"decay\":0,\"halving\":0,\"eraend\":0}],\"notaries\":[\"Notary1@\",\"Notary2@\",\"Notary3@\"],\"minnotariesconfirm\":2,\"nodes\":[{\"networkaddress\":\"111.111.111.111:10000\",\"nodeidentity\":\"Node1@\"},{\"networkaddress\":\"111.111.111.112:10000\",\"nodeidentity\":\"Node2@\"}],\"gatewayconvertername\":\"Bridge\",\"gatewayconverterissuance\":1000000}' '{\"currencies\":[\"VRSCTEST\",\"PBaaSChain\",\"USD\"],\"initialcontributions\":[371747.20398827,0,1000000],\"initialsupply\":3000000}' ```### Limitations in multi-currency to be aware of: 1. (GUI and CLI) You will not be able to make a currency from an ID that has a properly encoded i-address as its actual name, not its calculated ID. Generally, the advice is \u201cdon\u2019t do that\u201d. Using an i-address when referring to a currency will only be interpreted as referring to the currency or identity which has that i-address calculated based on its name registration. As a general rule, making an ID with an i-address as its name is not prevented by the protocol, but will cause problems whenever an i-address or name may be used (many cases) and will not be supported for creating currencies. To reduce any potential for user confusion, even though the naming system provides will also be expanding the set of characters that will not be allowed for currency registrations.",
            "./raw_txt_input/release_notes.md"
        ]
    ]
]