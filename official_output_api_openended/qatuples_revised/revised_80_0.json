[
    "What information does the `getpeerinfo` command return about connected network nodes in Verus, and what do each of the returned fields represent?",
    "The `getpeerinfo` command in Verus returns an array of objects containing information about each connected network node. The returned fields provide various details about the peers, including their connection status, network addresses, services offered, and synchronization state.\n\nHere's a breakdown of each field returned by `getpeerinfo`:\n\n1. `id`: A numeric peer index, uniquely identifying each connected node.\n2. `addr` and `addrlocal`: The IP address and port of the peer, both from the perspective of the external network (`addr`) and the local machine (`addrlocal`).\n3. `services`: A string representing the services offered by the peer, such as node functionality or protocol support.\n4. `tls_established` and `tls_verified`: Boolean values indicating the status of the TLS (Transport Layer Security) connection and the verification of the peer's certificate, respectively.\n5. `lastsend` and `lastrecv`: The timestamps (in seconds since the epoch, January 1, 1970, GMT) of the last data sent and received, respectively.\n6. `bytessent` and `bytesrecv`: The total number of bytes sent and received, respectively, during the connection.\n7. `conntime`: The connection time in seconds since the epoch, representing when the connection was established.\n8. `timeoffset`: The time offset in seconds, which can be used to adjust the local clock.\n9. `pingtime` and `pingwait`: The ping time and ping wait, respectively, which are related to network latency and responsiveness.\n10. `version` and `subver`: The peer's version number and a string representation of the version, including the protocol and software information.\n11. `inbound`: A boolean indicating whether the connection is inbound (true) or outbound (false).\n12. `startingheight`: The starting height (block) of the peer, which represents the peer's blockchain state.\n13. `banscore`: A numeric ban score, which can be used to track and manage peer connections.\n14. `synced_headers` and `synced_blocks`: The last header and block, respectively, that are in common with this peer, indicating the synchronization state.\n15. `inflight`: An array of block heights currently being requested from this peer.\n\nBy examining the output of `getpeerinfo`, you can gain insights into the connectivity, synchronization, and configuration of the Verus network nodes, which can be useful for troubleshooting, monitoring, and optimizing the network.",
    "getpeerinfoReturns data about each connected network node as a json array of objects.bResult:\n[\n {\n  \"id\": n,          (numeric) Peer index\n  \"addr\":\"host:port\",   (string) The ip address and port of the peer\n  \"addrlocal\":\"ip:port\",  (string) local address\n  \"services\":\"xxxxxxxxxxxxxxxx\",  (string) The services offered\n  \"tls_established\": true|false,    (boolean) status of TLS connection\n  \"tls_verified\": true|false,      (boolean) status of peer certificate. True if the chain of trust of a peer certificate can be verified using the OS certificate store\n  \"lastsend\": ttt,      (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send\n  \"lastrecv\": ttt,      (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive\n  \"bytessent\": n,      (numeric) The total bytes sent\n  \"bytesrecv\": n,      (numeric) The total bytes received\n  \"conntime\": ttt,      (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)\n  \"timeoffset\": ttt,     (numeric) The time offset in seconds\n  \"pingtime\": n,       (numeric) ping time\n  \"pingwait\": n,       (numeric) ping wait\n  \"version\": v,       (numeric) The peer version, such as 170002\n  \"subver\": \"/MagicBean:x.y.z[-v]/\", (string) The string version\n  \"inbound\": true|false,   (boolean) Inbound (true) or Outbound (false)\n  \"startingheight\": n,    (numeric) The starting height (block) of the peer\n  \"banscore\": n,       (numeric) The ban score\n  \"synced_headers\": n,    (numeric) The last header we have in common with this peer\n  \"synced_blocks\": n,    (numeric) The last block we have in common with this peer\n  \"inflight\": [\n    n,            (numeric) The heights of blocks we're currently asking from this peer\n    ...\n  ]\n }\n ,...\n]",
    "./raw_text_input_api_text/getpeerinfo"
]