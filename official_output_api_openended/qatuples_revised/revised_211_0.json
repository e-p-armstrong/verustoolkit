[
    "What is the purpose of the `lockunspent` command in Verus, and how can it be used to manage unspendable transaction outputs?",
    "The `lockunspent` command in Verus is used to update the list of temporarily unspendable outputs. This command allows you to temporarily lock or unlock specified transaction outputs, making them available or unavailable for spending.\n\nWhen you lock a transaction output using `lockunspent`, it will not be chosen by automatic coin selection when spending VRSC. Locks are stored in memory only, which means that they are cleared when a node stops or fails.\n\nThe `lockunspent` command takes two arguments: `unlock` and `transactions`. The `unlock` argument is a boolean value that specifies whether to unlock (true) or lock (false) the specified transactions. The `transactions` argument is a JSON array of objects, each containing the transaction ID (`txid`) and output number (`vout`) of the transaction output to be locked or unlocked.\n\nHere are some examples of how to use the `lockunspent` command:\n\n* To lock an unspent transaction, use `verus lockunspent false \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"`.\n* To unlock a previously locked transaction, use `verus lockunspent true \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"`.\n* To list the unspent transactions, use `verus listunspent`.\n* To list the locked transactions, use `verus listlockunspent`.\n\nThe `lockunspent` command returns a boolean value indicating whether the command was successful or not.\n\nIn addition to using the `lockunspent` command directly, you can also use it as a JSON RPC call. For example: `curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\",\\\"vout\\\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/`.",
    "lockunspent unlock [{\"txid\":\"txid\",\"vout\":n},...]\n\nUpdates list of temporarily unspendable outputs.\nTemporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\nA locked transaction output will not be chosen by automatic coin selection, when spending VRSC.\nLocks are stored in memory only. Nodes start with zero locked outputs, and the locked output list\nis always cleared (by virtue of process exit) when a node stops or fails.\nAlso see the listunspent call\n\nArguments:\n1. unlock      (boolean, required) Whether to unlock (true) or lock (false) the specified transactions\n2. \"transactions\" (string, required) A json array of objects. Each object the txid (string) vout (numeric)\n   [      (json array of json objects)\n    {\n     \"txid\":\"id\",  (string) The transaction id\n     \"vout\": n     (numeric) The output number\n    }\n    ,...\n   ]\n\nResult:\ntrue|false  (boolean) Whether the command was successful or not\n\nExamples:\n\nList the unspent transactions\n> verus listunspent\n\nLock an unspent transaction\n> verus lockunspent false \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"\n\nList the locked transactions\n> verus listlockunspent\n\nUnlock the transaction again\n> verus lockunspent true \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"lockunspent\", \"params\": [false, \"[{\"txid\":\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\",\"vout\":1}]\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
    "./raw_text_input_api_text/lockunspent"
]