[
    "How can I use the `getcurrencybalance` command to retrieve the balance of all currencies for a specific address in my Verus wallet, and what are the optional parameters I can use to customize the result?",
    "The `getcurrencybalance` command is used to retrieve the balance of all currencies for a specific address in your Verus wallet. This command is particularly useful for checking the balance of a specific address, including transparent and private addresses.\n\nThe basic syntax of the command is:\n```\ngetcurrencybalance \"address\" ( minconf ) ( friendlynames ) ( includeshared )\n```\nHere's a breakdown of the parameters:\n\n* `\"address\"`: This is the address for which you want to retrieve the balance. It can be a transparent or private address, and you can use wildcards like `z*`, `R*`, and `i*`.\n* `minconf`: This is an optional parameter that specifies the minimum number of confirmations required for a transaction to be included in the balance. The default value is 1.\n* `friendlynames`: This is an optional boolean parameter that determines whether to use friendly names instead of i-addresses. The default value is `true`.\n* `includeshared`: This is an optional boolean parameter that determines whether to include outputs that can also be spent by others. The default value is `false`.\n\nWhen you run the command, it returns the total amount in VRSC received for the specified address. For example, to retrieve the total amount received by address \"myaddress\", you can use the following command:\n```\nverus getcurrencybalance \"myaddress\"\n```\nIf you want to retrieve the total amount received by address \"myaddress\" with at least 5 blocks confirmed, you can use the following command:\n```\nverus getcurrencybalance \"myaddress\" 5\n```\nYou can also use the `getcurrencybalance` command as a JSON RPC call. Here's an example:\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrencybalance\", \"params\": [\"myaddress\", 5] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\nNote that if the wallet has only an incoming viewing key for the address, the returned balance may be larger than the actual balance, as spends cannot be detected in this case.",
    "getcurrencybalance \"address\" ( minconf ) ( friendlynames ) ( includeshared )\n\nReturns the balance in all currencies of a taddr or zaddr belonging to the node's wallet.\n\nCAUTION: If the wallet has only an incoming viewing key for this address, then spends cannot be\ndetected, and so the returned balance may be larger than the actual balance.\n\nArguments:\n1. \"address\"   (string) The selected address. It may be a transparent or private address and include z*, R*, and i* wildcards.\n2. minconf     (numeric, optional, default=1) Only include transactions confirmed at least this many times.\n3. friendlynames  (boolean, optional, default=true) use friendly names instead of i-addresses.\n4. includeshared  (bool, optional, default=false) Include outputs that can also be spent by others\n\nResult:\namount       (numeric) The total amount in VRSC received for this address.\n\nExamples:\n\nThe total amount received by address \"myaddress\"\n> verus getcurrencybalance \"myaddress\"\n\nThe total amount received by address \"myaddress\" at least 5 blocks confirmed\n> verus getcurrencybalance \"myaddress\" 5\n\nAs a json rpc call\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getcurrencybalance\", \"params\": [\"myaddress\", 5] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
    "./raw_text_input_api_text/getcurrencybalance"
]