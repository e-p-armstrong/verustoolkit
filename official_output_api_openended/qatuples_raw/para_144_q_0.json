[
    "What is the purpose of the `getnotarizationproofs` command in Verus, and how can it be used to obtain proofs for requested challenges in a bridged system?",
    "The `getnotarizationproofs` command in Verus is used to retrieve proofs for requested challenges in a bridged system. These proofs are necessary to validate cross-chain notarizations and ensure the integrity of the system.\n\nA challenge request is an object that contains information about the challenge, including the type of evidence required, the entropy hash, and the proof height. There are two types of challenges: `vrsc::evidence.skipchallenge` and `vrsc::evidence.primaryproof`. The `vrsc::evidence.skipchallenge` type is used to request a proof that a notarization has been skipped, while the `vrsc::evidence.primaryproof` type is used to request a proof that a notarization has been confirmed.\n\nThe `getnotarizationproofs` command takes an array of challenge requests as input and returns an array of notary evidence challenges, including the proofs for the requested challenges. This allows a caller to obtain the necessary proofs to validate cross-chain notarizations and ensure that any pending notarizations are confirmed.\n\nThe command is useful in situations where a competing chain may not agree with the current chain, and additional proofs are needed to confirm the pending notarizations. By obtaining the necessary proofs, the system can ensure that any disagreements between chains are resolved, and the integrity of the system is maintained.\n\nIn summary, the `getnotarizationproofs` command is a critical component of the Verus bridged system, as it enables the retrieval of proofs necessary to validate cross-chain notarizations and ensure the integrity of the system.",
    "getnotarizationproofs '[{\"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\",\n           \"evidence\":{CNotaryEvidence},\n           \"entropyhash\":\"hex\",\n           \"proveheight\":n,\n           \"atheight\":n}\n           {\"type\":\"vrsc::evidence.primaryproof\" || \"iKDesmiEkEjDG61nQSZJSGhWvC8x8xA578\",\n           \"priornotarizationref\":{CUTXORef} || \"priorroot\":{CProofRoot} ,\n           \"challengeroots\":[{\"indexkey\":{object}, \"proofroot\":{CProofRoot}}, ...],\n           \"evidence\":{CNotaryEvidence},\n           \"entropyhash\":\"hex\",\n           \"confirmnotarization\":{newnotarization}, |\n           \"confirmroot\":{CPRoofRoot}},\n           \"fromheight\":n,\n           \"toheight\":n},\n           ...]'Returns proofs to a caller for requested challenges. Some proofs can either independently or in combination\nwith other proofs over time invalidate or force a competing chain to provide more proofs in order to confirm\nany pending cross-chain notarization of an alternate chain that may not agree with us.* It is not valid to have a challenge request with both confirmnotarization and confirmroot.Arguments\n\"challengerequests\"       (array, required) one or more challenge requests for unconfirmed notarizations on a bridged systemResult:\n{\"evidence\":[{CNotaryEvidence}, ...]  (array) notary evidence challenges, including proofs for challenges requested",
    "./raw_text_input_api_text/getnotarizationproofs"
]