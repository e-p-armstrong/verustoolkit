[
    [
        [
            "What is the purpose of the `z_sendmany` command in Verus, and how can it be used to send multiple transactions at once?",
            "The `z_sendmany` command in Verus is used to send multiple transactions from a single address to multiple addresses in a single operation. This command is useful when you need to send funds to multiple recipients at the same time.\n\nThe `z_sendmany` command takes four arguments:\n\n1. `fromaddress`: This is the address from which the funds will be sent. It can be either a transparent address (taddr) or a shielded address (zaddr).\n2. `amounts`: This is an array of JSON objects, each representing a transaction to be sent. Each object must contain the recipient's address and the amount to be sent. Optionally, a memo field can be included if the recipient's address is a zaddr.\n3. `minconf`: This is an optional argument that specifies the minimum number of confirmations required for the funds to be spent. The default value is 1.\n4. `fee`: This is an optional argument that specifies the fee amount to attach to this transaction. The default value is 0.0001.\n\nWhen using `z_sendmany`, it's important to note that:\n\n* Change generated from a taddr flows to a new taddr address, while change generated from a zaddr returns to itself.\n* When sending coinbase UTXOs to a zaddr, change is not allowed. The entire value of the UTXO(s) must be consumed.\n* Before Sapling activates, the maximum number of zaddr outputs is 54 due to transaction size limits.\n\nThe `z_sendmany` command returns an operation ID, which can be used with the `z_getoperationstatus` command to get the result of the operation.\n\nHere's an example of how to use the `z_sendmany` command:\n```\nverus z_sendmany \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" '[{\"address\": \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\",\"amount\": 5.0}]'\n```\nThis example sends 5.0 KMD from the address `RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV` to the address `ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf`.",
            "z_sendmany \"fromaddress\" [{\"address\":... ,\"amount\":...},...] ( minconf ) ( fee )\n\nSend multiple times. Amounts are decimal numbers with at most 8 digits of precision.\nChange generated from a taddr flows to a new taddr address, while change generated from a zaddr returns to itself.\nWhen sending coinbase UTXOs to a zaddr, change is not allowed. The entire value of the UTXO(s) must be consumed.\nBefore Sapling activates, the maximum number of zaddr outputs is 54 due to transaction size limits.\n\nArguments:\n1. \"fromaddress\"     (string, required) The taddr or zaddr to send the funds from.\n2. \"amounts\"       (array, required) An array of json objects representing the amounts to send.\n  [{\n   \"address\":address (string, required) The address is a taddr or zaddr\n   \"amount\":amount  (numeric, required) The numeric amount in KMD is the value\n   \"memo\":memo    (string, optional) If the address is a zaddr, raw data represented in hexadecimal string format\n  }, ... ]\n3. minconf        (numeric, optional, default=1) Only use funds confirmed at least this many times.\n4. fee          (numeric, optional, default=0.0001) The fee amount to attach to this transaction.\n\nResult:\n\"operationid\"     (string) An operationid to pass to z_getoperationstatus to get the result of the operation.\n\nExamples:\n> verus z_sendmany \"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\" '[{\"address\": \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\" ,\"amount\": 5.0}]'\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_sendmany\", \"params\": [\"RD6GgnrMpPaTSMn8vai6yiGA7mN4QGPV\", [{\"address\": \"ztfaW34Gj9FrnGUEf833ywDVL62NWXBM81u6EQnM6VR45eYnXhwztecW1SjxA7JrmAXKJhxhj3vDNEpVCQoSvVoSpmbhtjf\" ,\"amount\": 5.0}]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/z_sendmany"
        ]
    ],
    "will",
    "be",
    "replaced",
    "f2e7ee56-8a49-4043-908c-ecac00ef436a"
]