[
    [
        [
            "What information can I get about a shielded transaction in my wallet using the `z_viewtransaction` command, and what do the different parts of the result mean?",
            "The `z_viewtransaction` command allows you to retrieve detailed information about a shielded transaction in your wallet, given the transaction ID (txid). The result is a JSON object containing several key-value pairs that provide insight into the transaction.\n\nHere's a breakdown of the result:\n\n* `txid`: The transaction ID, which is a string.\n* `spends`: An array of objects, each representing a spend in the transaction. Each object contains:\n\t+ `type`: The type of address involved in the spend, either \"sprout\" or \"sapling\".\n\t+ `js` and `jsSpend`: Indices of the JSDescription and spend within the JSDescription, respectively, for sprout addresses.\n\t+ `spend`: The index of the spend within the vShieldedSpend for sapling addresses.\n\t+ `txidPrev`: The transaction ID of the transaction that created the note being spent.\n\t+ `jsPrev` and `jsOutputPrev`: Indices of the JSDescription and output within the JSDescription, respectively, for sprout addresses.\n\t+ `outputPrev`: The index of the output within the vShieldedOutput for sapling addresses.\n\t+ `address`: The z-address involved in the transaction.\n\t+ `value`: The amount of VRSC involved in the transaction.\n\t+ `valueZat`: The amount in zatoshis (a smaller unit of VRSC).\n* `outputs`: An array of objects, each representing an output in the transaction. Each object contains:\n\t+ `type`: The type of address involved in the output, either \"sprout\" or \"sapling\".\n\t+ `js` and `jsOutput`: Indices of the JSDescription and output within the JSDescription, respectively, for sprout addresses.\n\t+ `output`: The index of the output within the vShieldedOutput for sapling addresses.\n\t+ `address`: The Verus private address involved in the transaction.\n\t+ `recovered`: A boolean indicating whether the output is not for an address in the wallet (only applicable for sapling addresses).\n\nBy using `z_viewtransaction`, you can gain a better understanding of the details of a shielded transaction in your wallet.",
            "z_viewtransaction \"txid\"Get detailed shielded information about in-wallet transaction <txid>Arguments:\n1. \"txid\" (string, required) The transaction idResult:\n{\n \"txid\" : \"transactionid\",  (string) The transaction id\n \"spends\" : [\n  {\n   \"type\" : \"sprout|sapling\",   (string) The type of address\n   \"js\" : n,            (numeric, sprout) the index of the JSDescription within vJoinSplit\n   \"jsSpend\" : n,         (numeric, sprout) the index of the spend within the JSDescription\n   \"spend\" : n,          (numeric, sapling) the index of the spend within vShieldedSpend\n   \"txidPrev\" : \"transactionid\",  (string) The id for the transaction this note was created in\n   \"jsPrev\" : n,          (numeric, sprout) the index of the JSDescription within vJoinSplit\n   \"jsOutputPrev\" : n,       (numeric, sprout) the index of the output within the JSDescription\n   \"outputPrev\" : n,        (numeric, sapling) the index of the output within the vShieldedOutput\n   \"address\" : \"zaddress\",    (string) The z address involved in the transaction\n   \"value\" : x.xxx         (numeric) The amount in VRSC\n   \"valueZat\" : xxxx        (numeric) The amount in zatoshis\n  }\n  ,...\n ],\n \"outputs\" : [\n  {\n   \"type\" : \"sprout|sapling\",   (string) The type of address\n   \"js\" : n,            (numeric, sprout) the index of the JSDescription within vJoinSplit\n   \"jsOutput\" : n,         (numeric, sprout) the index of the output within the JSDescription\n   \"output\" : n,          (numeric, sapling) the index of the output within the vShieldedOutput\n   \"address\" : \"address\",    (string) The Verus private address involved in the transaction\n   \"recovered\" : true|false    (boolean, sapling) True if the output is not for an address in the wallet\n  ",
            "./raw_text_input_api_text/z_viewtransaction"
        ]
    ],
    "will",
    "be",
    "replaced",
    "980e22d8-5c58-4b2e-80bf-d8d35ada8184"
]