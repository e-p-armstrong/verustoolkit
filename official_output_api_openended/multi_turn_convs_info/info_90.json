[
    [
        [
            "How do I verify a signed message using Verus, and what are the different components involved in the verification process?",
            "Verifying a signed message is an essential feature in Verus that allows you to confirm the authenticity of a message. To verify a signed message, you need to use the `verifymessage` command, which takes four arguments: the transparent address or identity that signed the message, the signature provided by the signer in base 64 encoding, the message that was signed, and an optional boolean flag `checklatest` that defaults to `false`.\n\nHere's a breakdown of each component involved in the verification process:\n\n1. **Transparent address or identity**: This is the address or identity that signed the message. It can be a transparent address (e.g., `RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z`) or an identity (e.g., `Name@`).\n2. **Signature**: This is the signature provided by the signer in base 64 encoding. It's generated using the `signmessage` command.\n3. **Message**: This is the original message that was signed.\n4. **Checklatest**: This is an optional boolean flag that defaults to `false`. If set to `true`, it checks the signature validity based on the latest identity. Otherwise, it determines the validity of the signing height stored in the signature.\n\nWhen you run the `verifymessage` command with the required arguments, it returns a boolean value indicating whether the signature is verified or not. If the signature is valid, it returns `true`; otherwise, it returns `false`.\n\nYou can use the `verifymessage` command in different ways, including as a command-line argument, as a JSON-RPC request, or even as part of a script. The example provided in the text demonstrates how to create a signature using the `signmessage` command and then verify it using the `verifymessage` command.\n\nIn summary, verifying a signed message using Verus involves providing the necessary arguments to the `verifymessage` command, which then checks the signature against the original message and returns a boolean value indicating the validity of the signature.",
            "verifymessage \"address or identity\" \"signature\" \"message\" \"checklatest\"\n\nVerify a signed message\n\nArguments:\n1. \"t-addr or identity\" (string, required) The transparent address or identity that signed the message.\n2. \"signature\"    (string, required) The signature provided by the signer in base 64 encoding (see signmessage).\n3. \"message\"     (string, required) The message that was signed.\n3. \"checklatest\"   (bool, optional)  If true, checks signature validity based on latest identity. defaults to false,\n                     which determines validity of signing height stored in signature.\n\nResult:\ntrue|false  (boolean) If the signature is verified or not.\n\nExamples:\n\nCreate the signature\n> verus signmessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"my message\"\n\nVerify the signature\n> verus verifymessage \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"signature\" \"my message\"\n\nAs json rpc\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifymessage\", \"params\": [\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\", \"signature\", \"my message\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/verifymessage"
        ]
    ],
    "will",
    "be",
    "replaced",
    "0533d416-cf00-4704-9102-74824c679677"
]