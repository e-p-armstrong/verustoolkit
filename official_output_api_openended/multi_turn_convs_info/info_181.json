[
    [
        [
            "What is the `getcurrency` command in Verus, and what information does it return about a given chain?",
            "The `getcurrency` command in Verus is used to retrieve a complete definition for a specific chain, if it is registered on the blockchain. This command takes one optional argument, `currencyname`, which is the name of the chain to look for. If no `currencyname` is provided, the command returns the chain definition of the current chain in the daemon.\n\nThe `getcurrency` command returns a JSON object that contains a wealth of information about the specified chain. This information includes:\n\n1. **Version**: The version of the chain definition, represented as an integer.\n2. **Name**: The name or symbol of the chain, which is the same as the `currencyname` passed as an argument.\n3. **Fully Qualified Name**: The name or symbol of the chain with all parent namespaces, separated by dots.\n4. **Currency ID**: A string that represents the currency ID, which is the same as the ID behind the currency.\n5. **Currency ID Hex**: The hex representation of the currency ID.\n6. **Parent**: The parent blockchain ID, represented as a string.\n7. **System ID**: The system on which this currency is considered to run, represented as a string.\n8. **Launch System ID**: The system from which this currency was launched, represented as a string.\n9. **Notarization Protocol**: The protocol number that determines variations in cross-chain or bridged notarizations, represented as an integer.\n10. **Proof Protocol**: The protocol number that determines variations in cross-chain or bridged proofs, represented as an integer.\n11. **Start Block**: The block number on this chain, which must be notarized into block one of the chain, represented as an integer.\n12. **End Block**: The block number after which, this chain's useful life is considered to be over, represented as an integer.\n13. **Currencies**: An array of currencies that can be converted to this currency at launch or makeup a liquidity basket, represented as a string array.\n14. **Weights**: An array of relative currency weights, represented as a number array.\n\nOverall, the `getcurrency` command provides a comprehensive view of a chain's definition, including its relationships with other chains, its currency ID, and its notarization and proof protocols.",
            "getcurrency \"currencyname\"Returns a complete definition for any given chain if it is registered on the blockchain. If the chain requestedis NULL, chain definition of the current chain is returned.Arguments\n1. \"currencyname\"      (string, optional) name of the chain to look for. no parameter returns current chain in daemon.Result:\n {\n  \"version\" : n,              (int) version of this chain definition\n  \"name\" : \"string\",           (string) name or symbol of the chain, same as passed\n  \"fullyqualifiedname\" : \"string\",    (string) name or symbol of the chain with all parent namespaces, separated by \".\"\n  \"currencyid\" : \"i-address\",      (string) string that represents the currency ID, same as the ID behind the currency\n  \"currencyidhex\" : \"hex\",        (string) hex representation of currency ID, getcurrency API supports \"hex:currencyidhex\"\n  \"parent\" : \"i-address\",        (string) parent blockchain ID\n  \"systemid\" : \"i-address\",       (string) system on which this currency is considered to run\n  \"launchsystemid\" : \"i-address\",    (string) system from which this currency was launched\n  \"notarizationprotocol\" : n        (int) protocol number that determines variations in cross-chain or bridged notarizations\n  \"proofprotocol\" : n           (int) protocol number that determines variations in cross-chain or bridged proofs\n  \"startblock\" : n,            (int) block # on this chain, which must be notarized into block one of the chain\n  \"endblock\" : n,             (int) block # after which, this chain's useful life is considered to be over\n  \"currencies\" : \"[\"i-address\", ...]\", (stringarray) currencies that can be converted to this currency at launch or makeup a liquidity basket\n  \"weights\" : \"[n, ...]\",        (numberarray) relative cu",
            "./raw_text_input_api_text/getcurrency"
        ]
    ],
    "will",
    "be",
    "replaced",
    "ced5f3d4-ec8e-465e-8fef-da868dd5c24e"
]