[
    [
        [
            "What does the `getexports` command do in Verus, and how can I use it to retrieve pending export transfers to a specific currency within a certain height range?",
            "The `getexports` command in Verus is used to retrieve pending export transfers to a specific currency within a certain height range. This command takes three arguments: the name or ID of the currency to look for, an optional start height, and an optional end height.\n\nThe `chainname` argument is a required string that specifies the name or ID of the currency to look for. If no parameter is provided, the command will return the current chain.\n\nThe `heightstart` and `heightend` arguments are optional integers that specify the height range to retrieve exports from. The `heightstart` argument defaults to 0, which means that the command will only return exports at or above this height. The `heightend` argument defaults to the maximum height, which means that the command will only return exports below or at this height.\n\nThe result of the `getexports` command is a JSON array of objects, each representing a pending export transfer. Each object contains the following properties:\n\n* `height`: The block height at which the export transfer was made.\n* `txid`: The transaction ID of the export transfer.\n* `txoutnum`: The transaction output number of the export transfer.\n* `partialtransactionproof`: A partial transaction proof in hexadecimal string format.\n* `transfers`: An array of transfer objects, each representing a transfer of funds from one address to another.\n\nYou can use the `getexports` command in two ways: either by running it directly in the Verus command line interface, or by sending a JSON-RPC request to the Verus daemon using `curl`. The command line interface usage is as follows:\n\n```\nverus getexports \"chainname\" (heightstart) (heightend)\n```\n\nThe JSON-RPC usage is as follows:\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getexports\", \"params\": [\"chainname\" (heightstart) (heightend)] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n\nNote that you need to replace `myusername` with your actual username, and `chainname` with the actual name or ID of the currency you're interested in.",
            "getexports \"chainname\" (heightstart) (heightend)\n\nReturns pending export transfers to the specified currency from start height to end height if specified\n\nArguments\n\"chainname\"           (string, required) name/ID of the currency to look for. no parameter returns current chain\n\"heightstart\"          (int, optional)   default=0 only return exports at or above this height\n\"heightend\"           (int, optional)   dedfault=maxheight only return exports below or at this height\n\nResult:\n [{\n   \"height\": n,   \"txid\": \"hexid\",   \"txoutnum\": n,   \"partialtransactionproof\": \"hexstr\",   \"transfers\": [{transfer1}, {transfer2},...] }, ...]\n\nExamples:\n> verus getexports \"chainname\" (heightstart) (heightend)\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getexports\", \"params\": [\"chainname\" (heightstart) (heightend)] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/getexports"
        ]
    ],
    "will",
    "be",
    "replaced",
    "0becb81c-f138-447e-a777-39cc6d5925ba"
]