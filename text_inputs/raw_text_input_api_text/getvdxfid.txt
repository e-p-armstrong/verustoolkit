getvdxfid "vdxfuri" '{"vdxfkey":"i-address or vdxfkey", "uint256":"hexstr", "indexnum":0}'

Returns the VDXF key of the URI string. For example "vrsc::system.currency.export"

Arguments:
  "vdxfuri"                              (string, required) This message is converted from hex, the data is hashed, then returned
  "{"
    "vdxfkey":"i-address or vdxfkey"   (string, optional) VDXF key or i-address to combine via hash
    "uint256":"32bytehex"              (hexstr, optional) 256 bit hash to combine with hash
    "indexnum":int                       (integer, optional) int32_t number to combine with hash
  "}"

Result:
{                                          (object) object with both base58check and hex vdxfid values of string and parents
  "vdxfid"                               (base58check) i-ID of the URI processed with the VDXF & all combined parameters
  "hash160result"                        (hexstring) 20 byte hash in hex of the URL string passed in, processed with the VDXF
  "qualifiedname":                       (object) separate name and parent ID value
  {
    "name": "namestr"                  (string) leaf name
    "parentid" | "namespace":"string" (string) parent ID (or namespace if VDXF key) of name
  }
  "bounddata": {                         (object) if additional data is bound to create the value, it is returned here  {
    "vdxfkey":"i-address or vdxfkey"   (string) i-address that was combined via hash
    "uint256":"32bytehex"              (hexstr) 256 bit hash combined with hash
    "indexnum":int                       (integer) int32_t combined with hash
  }
}

Examples:

Create the signature
> verus getvdxfid "system.currency.export"

Verify the signature
> verus getvdxfid "idname::userdefinedgroup.subgroup.publishedname"

As json rpc
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getvdxfid", "params": ["idname::userdefinedgroup.subgroup.publishedname"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/