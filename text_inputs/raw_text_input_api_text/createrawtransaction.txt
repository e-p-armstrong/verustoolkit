createrawtransaction [{"txid":"id","vout":n},...] {"address":amount,...} ( locktime ) ( expiryheight )

Create a transaction spending the given inputs and sending to the given addresses.
Returns hex-encoded raw transaction.
Note that the transaction's inputs are not signed, and
it is not stored in the wallet or transmitted to the network.

Arguments:
1. "transactions"        (string, required) A json array of json objects
     [
       {
         "txid":"id",    (string, required) The transaction id
         "vout":n        (numeric, required) The output number
         "sequence":n    (numeric, optional) The sequence number
       }
       ,...
     ]
2. "addresses"           (string, required) a json object with addresses as keys and amounts as values
    {
      "address": x.xxx   (numeric, required) The key is the destination address or ID, the value is the VRSC amount
      "address": {"currency": x.xxx, ...} (object, optional) The key is the destination address or ID, the value is currencies and amounts
      "data": "hex"    (string, optional) The key is "data", the value is hex encoded data
      ,...
    }
3. locktime              (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs
4. expiryheight          (numeric, optional, default=nextblockheight+20 (pre-Blossom) or nextblockheight+40 (post-Blossom)) Expiry height of transaction (if Overwinter is active)

Result:
"transaction"            (string) hex string of the transaction

Examples
> verus createrawtransaction "[{"txid":"myid","vout":0}]" "{"address":0.01}"
> verus createrawtransaction "[{"txid":"myid","vout":0}]" "{"address":0.01,"data":"00010203"}"
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "createrawtransaction", "params": ["[{"txid":"myid","vout":0}]", "{"address":0.01}"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/