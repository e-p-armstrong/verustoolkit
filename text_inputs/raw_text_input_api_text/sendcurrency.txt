sendcurrency "fromaddress" '[{"address":... ,"amount":...},...]' (minconfs) (feeamount) (returntxtemplate)

This sends one or many Verus outputs to one or many addresses on the same or another chain.
Funds are sourced automatically from the current wallet, which must be present, as in sendtoaddress.
If "fromaddress" is specified, all funds will be taken from that address, otherwise funds may come
from any source set of UTXOs controlled by the wallet.

Arguments
1. "fromaddress"             (string, required) The Sapling, VerusID, or wildcard address to send funds from. "*", "R*", or "i*" are valid wildcards
2. "outputs"                 (array, required) An array of json objects representing currencies, amounts, and destinations to send.
    [{
      "currency": "name"   (string, required) Name of the source currency to send in this output, defaults to native of chain
      "amount":amount        (numeric, required) The numeric amount of currency, denominated in source currency
      "convertto":"name",  (string, optional) Valid currency to convert to, either a reserve of a fractional, or fractional
      "addconversionfees":"false", (bool, optional) Calculate additional conversion fees to convert the full amount specified after fees
      "exportto":"name",   (string, optional) Valid chain or system name or ID to export to
      "exportid":"false",  (bool, optional) if cross-chain export, export the full ID to the destination chain (will cost to export)
      "exportcurrency":"false", (bool, optional) if cross-chain export, export the currency definition (will cost to export)
      "feecurrency":"name", (string, optional) Valid currency that should be pulled from the current wallet and used to pay fee
      "via":"name",        (string, optional) If source and destination currency are reserves, via is a common fractional to convert through
      "address":"dest"     (string, required) The address and optionally chain/system after the "@" as a system specific destination
      "refundto":"dest"    (string, optional) For pre-conversions, this is where refunds will go, defaults to fromaddress
      "memo":memo            (string, optional) If destination is a zaddr (not supported on testnet), a string message (not hexadecimal) to include.
      "data":"dataobject", (object, optional) (for data-only outputs with no other function) stores large, optionally signed data in one or more outputs.
      "preconvert":"false", (bool,  optional) convert to currency at market price (default=false), only works if transaction is mined before start of currency
      "burn":"false",      (bool,  optional) destroy the currency and subtract it from the supply. Currency must be a token.
      "mintnew":"false",   (bool,  optional) if the transaction is sent from the currency ID of a centralized currency, this creates new currency to send
    }, ... ]
3. "minconf"                 (numeric, optional, default=1) only use funds confirmed at least this many times.
4. "feeamount"               (number, optional) specific fee amount requested instead of default miner's fee

Result:
   "operation-id" : "opid" (string) The operation id, not public info, if (returntxtemplate) is false

   If (returntxtemplate) is true   {
       "outputtotals" : {currencyvaluemap}   Total outputs in all currencies that need to be input to the transaction
       "hextx" : "hexstring"               The transaction with all specified outputs and no inputs
   }

Examples:
> verus sendcurrency "*" '[{"currency":"btc","address":"RRehdmUV7oEAqoZnzEGBH34XysnWaBatct" ,"amount":500.0},...]'
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "sendcurrency", "params": ["bob@", [{"currency":"btc", "address":"alice@quad", "amount":500.0},...]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/