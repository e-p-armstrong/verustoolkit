- role: system
  content: | # TODO need to have mistral comb through a document and extract the most likely date it was written; this will ensure that answers are accurate. ALSO consider just going direct text-> conversation? TODO expand the useful general background knowledge list, with the help of community members. ||| TODO endprompt + sys prompt instructing to not compose questions about things that do exist, but are not provided. A question cannot ask about something that is real, but for which there is no provided information -- that does not count as a valid question. All answers should be complete. TODO change to not pull stuff out of ass, generally focus on things that are fully constrained to the text because otherwise it hallucinates, be aware that it must operate entirely within the text, that is needed for this, basically a mirror of the normal case, with that I should be able to improve QA perf. Maybe there are even more things I can do. Conversational modules, etc. Turn RPTK into actual innocent SFW RP (ikari collab project will enhance my open-source datagen efforts and efforts to become famous) Look into this! Reddit shall build my celebrity. my own work, autometa, ikari, these shall assist me this month. Actual consulting, will be done for crypto, this weekend belongs to the open source though I think (and maybe goldcross and a bit of lizardperson if I have time at the end)
    You are creating a series of flawed questions about the Verus multi-chain and multi-currency blockchain protocol — these questions are flawed because they either assert something that is false, or make something up. The questions will have a fundamentally flawed premise, and will be "wrong", in order to test the answerer's comprehension of the information so that they can correct the question and teach people to understand more about the Verus protocol and community. These questions must ask something that implicitly contradicts the provided information. So in short, you will write flawed questions, and their answers which point out the flaw and correct it, then provide the right answer.

    You should ask multiple questions and answers. The sequence of the questions matters. They should build on each other. While questions should build on each other, they still MUST make logical sense if read by themselves, without any reference materials on hand.
    
    The questions must ask about information that a user of Verus might ask about. So they may ask about facts, explanations, how to solve problems, or other things that may naturally come up; but more "educational test"-type questions that are somewhat arbitrary, like "what is the error message that happens under these circumstances" which a human would never need to ask, that kind of stuff is banned. The questions must have flawed premises or be wrong in some way: that is, they should assume information that is actually false (according to the provided information). So if the provided information said that all blueberries are blue, it might be that one question should be "Explain why blueberries are not blue," and another, "Why are blueberries green?"

    Do not explicitly mention the provided information in the questions or answers themselves — just talk about the concepts related to the questions.

    Instructions Resumed:

    **You Must:**

    * Create flawed educational questions based on the snippet of a website — each question must assert or imply some information that directly contradicts the provided text.
    * The questions must be flawed in some way.
    * The answers must point out the flaw, explain why it's wrong.
    * Do not mention the website, or the text, or the provided information, or any other reference in your questions or answers. Just ask about the facts or information.
    * Create as many or as few flawed questions as you feel like the provided information allows for.
    * Ensure a logical sequence of questions that build on each other. Maybe the answers help the questioner understand a single, large misunderstanding.
    * Keep in mind the timestamp of any solution. The current year is: 2024. Some info in the provided information may be outdated, specifically when talking about unreleased tech that is central to the protocol.
    * Use markdown formatting (such as code blocks and snippets) in your questions if applicable.
    * Focus on important information that is relevant to understanding Verus. So you may ignore arbitrary metadata such as authors or timestamps -- do not make those the subjects of questions.
    * Keep in mind that the provided text snippet may cut off abruptly. Work around this.
    * Include the information from the given paragraph alongside a simpler explanation of some underlying concepts, if possible.

    **Note:**

    * Documents may be out of date, and technology described as being in development has likely been released already. THEREFORE, BE AMBIGUOUS ABOUT RELEASES, using language like "This technology will do XYZ" or by focusing on what the tech "can" do, rather than what it "does" or "will" do.
    * You will always take a positive opinion of Verus and try to promote it through the education. The goal is to create a set of questions and answers that can help correct misunderstandings about Verus, including about things that don't exist.
    * Do NOT provide anchor links to content in your answers; since the provided text to make questions from is from a website, those links will be broken when used outside of said website. So you should NEVER have any content like [some text](#!/some/path) in your answer! Do not include external links either.
    
    Do not explicitly mention the provided text or the context in the questions or answers themselves — just talk about the concepts related to the questions.

    A good way to make questions is to systematically work your way down the information, making (flawed) questions from the top to the bottom.

    Aim for a variety of types of questions.
- role: user
  content: | # The few-shot examples should serve three purposes: 1. cover common types of input; 2. explore common output cases; 3. provide background on Verus just by being. Two classes of flawed question: 1. is where it makes stuff up, which trains hallucination defence; 2. is where it asserts something false. Explicitly mention these two things in the system prompt: half the questions should go to each.
    Text to make flawed-premise questions from: 
    """
    # error while loading shared libraries: libgomp.so.1: No such file or directory
    # error while loading shared libraries: libz.so: No such file or directory

    When running `./verusd` on a Linux distro (eg Debian or Devuan), not all dependencies may be installed by default, resulting in the errormessage `error while loading shared libraries: libgomp.so.1: No such file or directory` or `error while loading shared libraries: libz.so: No such file or directory`.

    To solve this you need to install the libgomp and zlib1g-dev libraries:
    `sudo apt-get install libgomp1 zlib1g-dev`

    Solution supplied by: Oink.vrsc@

    Note: revision date 2021-12-01.
    """

    -----------------
    Reminder 1: you are creating questions that either ask about something completely invented, or assert something that the text above indicates is false. The answers should correct the (wrong) questions.
    Reminder 2: Do not explicitly mention the information, or the provided text.
- role: assistant # Note: am making the first thing the LLM says be something from the question so that it does not need to correctly identify the truth or falsehood of a question in the very first token. Otherwise if it started by saying "Verus" it would always hallucinate. Like with prompting,  ORDER OF GENERATION REALLY MATTERS and there's only one right answer here. TODO remove verus operating system question, it's corrupting things.
  content: |
    **QUESTION:**
    How do I install the libgomp.so.1 and libz.so libraries to fix these errors on Linux?:
    ```
    error while loading shared libraries: libgomp.so.1: No such file or directory
    error while loading shared libraries: libz.so: No such file or directory
    ```

    **ANSWER:**
    `libgomp.so.1`` and `libz.so` are not the libraries you need — you need the libgomp and zlib1g-dev libraries. Installing these will fix your error. You can accomplish this by running `sudo apt-get install libgomp1 zlib1g-dev`.
- role: user
  content: |
    Text to make flawed-premise questions from: 
    """
    ```
    ./verus -chain=VRSCTEST sendcurrency "*" '[{"address":"mike@","convertto":"gold","preconvert":1,"amount":100}]'
    ```
    that would effectively park my conversion until the token launches, at which point, I will either find 0.975 GOLD in my wallet, or I will have my VRSCTEST back.
    Assuming it launches, and I later want to create mycoin, which can be converted to with either GOLD or VRSCTEST, I can create mycoin with:

      ```
    ./verus -chain=VRSCTEST definecurrency '{"name":"mycoin","options":33, "proofprotocol":2,"currencies":["vrsctest", "gold"],"minpreconversion":[10000,5.1298]}, "initialsupply":20000'
    ```
    In "mycoin", I set proofprotocol to 2, which is PROOF_CHAINID. That means that the controller of the chain ID can mint new coins as follows:

      ```
    ./verus -chain=VRSCTEST sendcurrency "mycoin@" '[{"address":"mike@","currency":"mycoin","mintnew":1,"amount":10000}]'
    ```

    #### Defining a PBaaS blockchain
    ```json
      {
      "name": "PBaaSChain",
      "options": 264,
      "currencies": [
        "VRSCTEST"
      ],
      "conversions": [
        1
      ],
      "eras": [
        {
          "reward": 1200000000,
          "decay": 0,
          "halving": 0,
          "eraend": 0
        }
      ],
      "notaries": [
        "Notary1@",
        "Notary2@",
        "Notary3@"
      ],
      "minnotariesconfirm": 2,
      "nodes": [
        {
          "networkaddress": "111.111.111.111:10000",
          "nodeidentity": "Node1@"
        },
        {
          "networkaddress": "111.111.111.112:10000",
          "nodeidentity": "Node2@"
        }
      ],
      "gatewayconvertername": "Bridge",
      "gatewayconverterissuance": 1000000
    }
    ```
    The bridge definition has overridable defaults
    ```json
      {
      "currencies": [
        "VRSCTEST",
        "PBaaSChain",
        "USD"
      ],
      "initialcontributions": [
        380228.12033701,
        0,
        1000000
      ],
      "initialsupply": 3000000
    }
    ```

    Now pass those definitions to `definecurrency`
    ```shell
    ./verus -chain=vrsctest definecurrency '{"name":"PBaaSChain","options":264,"currencies":["VRSCTEST"],"conversions":[1],"eras":[{"reward":1200000000,"decay":0,"halving":0,"eraend":0}],"notaries":["Notary1@","Notary2@","Notary3@"],"minnotariesconfirm":2,"nodes":[{"networkaddress":"111.111.111.111:10000","nodeidentity":"Node1@"},{"networkaddress":"111.111.111.112:10000","nodeidentity":"Node2@"}],"gatewayconvertername":"Bridge","gatewayconverterissuance":1000000}' '{"currencies":["VRSCTEST","PBaaSChain","USD"],"initialcontributions":[371747.20398827,0,1000000],"initialsupply":3000000}'
    ```
    #### Exporting an ID to a PBaaS chain
    ```
    verus -chain=VRSCTEST sendcurrency "*" '[{"address":"IDNAME@","exportto":"PBaaSChainName","exportid":"true","amount":100,"currency":"vrsctest"}]'
    ```
    """

    -----------------
    Reminder 1: you are creating questions that either ask about something completely invented, or assert something that the text above indicates is false. The answers should correct the (wrong) questions.
    Reminder 2: Do not explicitly mention the information, or the provided text.
- role: assistant
  content: | # Not "how can you" but instead "how can I" that's what I'm going to implement. Interesting I'm learning more about crypto as I do this: a "bridge" is for converting between different currencies? Maybe using a shared pool of stuff? Not sure about the second bit.
    **QUESTION:**
    Can you explain what the Verus command-line command:
    ```
    ./verus -chain=VRSCTEST sendcurrency "*" '[{"destination":"mike@","converttocurrency":"gold","preconvertamount":1, "amount":100, "foo": "bar"}]'
    ```

    Does?

    **ANSWER:**
    I can explain the command, but the command you showed isn't quite right. To park a conversion of VRSCTEST to a new token before the token launches, you can use the `sendcurrency` command with the following format and arguments:

    ```
    ./verus -chain=VRSCTEST sendcurrency "*" '[{"address":"target_address@","convertto":"gold","preconvert":1,"amount":100}]'
    ```

    This will effectively park your conversion until the GOLD token launches. After the launch, you will either find the converted amount of GOLD in your wallet, or you will have your original VRSCTEST amount returned.

    **QUESTION:**
    Explain why there is there no command to create a new token using the command line and Verus?

    **ANSWER:**
    There is, in fact, a command to create a new token using the command line and Verus. For example, to make a new token called "mycoin" using the command line, which can be converted to with either GOLD or VRSCTEST (assuming that GOLD is a new token that just launched) we must run a command to define the currency's properties. Here's an example of such a command:

    ```
    ./verus -chain=VRSCTEST definecurrency '{"name":"mycoin","options":33, "proofprotocol":2,"currencies":["vrsctest", "gold"],"minpreconversion":[10000,5.1298]}, "initialsupply":20000'
    ```

    This command defines a new token named "mycoin". Some important notes about this configuration:

    1. `proofprotocol` being set to 2 means that it's set to PROOF_CHAINID. This means that the controller of the chain ID can mint new coins.
    2. `options` is a configurable integer, in this case set to 33.
    3. `currencies` lists which tokens can be converted to mycoin.
    4. `"minpreconversion": [10000,5.1298]` defines the minimum amounts of VRSCTEST and GOLD needed to convert to mycoin, respectively.
    5. `initialsupply` sets the initial supply of mycoin to 20,000 units.

    **QUESTION:**
    Explain what it means for `proofprotocol` being set to 2 (in other words, being PROOF_CURRENCYID) when defining a new token?

    **ANSWER:**
    When `proofprotocol` is set to 2 when defining a new token, it means that the proof protocol is set to PROOF_CHAINID (*not* PROOF_CURRENCYID). PROOF_CHAINID means that the controller of the chain ID may mint new tokens. This minting can be done with a command like the following example:
    ```
    ./verus -chain=VRSCTEST sendcurrency "mycoin@" '[{"address":"mike@","currency":"mycoin","mintnew":1,"amount":10000}]'
    ```
- role: user
  content: |
    Text to make flawed-premise questions from: 
    """
    rusID

    **VerusIDs** are a fully functional blockchain protocol, not just an ID system. There is no corporation involved in the protocol, unlike most blockchain ID implementations. **VerusIDs** provide plenty of opportunity for identity applications. Specifically, **VerusID** provides:

    ### Quantum-ready friendly crypto-addresses on the worldwide Verus network
    VerusIDs can be used to receive and send funds, which are controlled by the single or multi-sig addresses specified in the identity itself. If these controlling addresses or the single or multi-sig properties are changed, which can be done by the controller of the identity, all future spends of UTXOs sent to that identity follow the updated spend conditions and are subject to the updated keys. Although Verus 0.6.2 does not include quantum resistant signatures for transactions, VerusIDs are themselves resistant to quantum attack with known algorithms, and we have already started to integrate a quantum secure signature scheme, which we expect to activate on mainnet early next year. When that is available, it will be possible to change an ID and have all of the funds sent to it made retroactively quantum resistant. VerusIDs can also be used to publish ID->destination address mappings on other blockchains, but only the Verus ecosystem has the ability to revoke, recover, inherit, funds in existing UTXOs.

    ### Fully Decentralized Protocol
    Anyone can create one and have complete, self sovereign control over it without permission to do so. All costs to create an ID go to miners, stakers, and ID referrers. VerusIDs are:

    * Revocable -- each ID includes a revocation authority, which defaults to the identity self. If another ID is specified as the revocation authority it can be used to revoke the identity, which creates a valid transaction that, once mined into a block, prevents the identity from being used to spend or sign until it is recovered, effectively freezing all of its funds, for example, in the case of key theft or turnover in an organization.

    * Recoverable -- each ID also includes a separate recovery authority, which also defaults to self. If another ID is specified as the recovery authority it can be used to recover the ID from its revoked state, with the option to alter the primary authorities used to spend and sign.

    * Private - Each ID contains a set of zero-knowledge private addresses, which can be used as messaging, financial, or voting endpoints, and each ID also contains a content map of key-value hashes, intended to be used alongside applications and various identity policies to provide everything from private yet selectively provable claims and attestations to selectively provable components of a strong identity, attested to with a quantum secure signature when that is available.

    * Powerful - Multiple addresses or other IDs can be defined as primary addresses, and any number of those may be required to spend, sign, or alter the identity (N of M). The revocation authority may only be altered by the revocation authority, and the same applies to the recovery authority, either of which may be another identity with its own N of M multisig contro
    """

    -----------------
    Reminder 1: you are creating questions that either ask about something completely invented, or assert something that the text above indicates is false. The answers should correct the (wrong) questions.
    Reminder 2: Do not explicitly mention the information, or the provided text.
- role: assistant
  content: |
    **QUESTION:**
    Can you explain to me in what ways VerusIDs are just an ID system?

    **ANSWER:**
    VerusIDs are not just an ID system, as you implied: they are actually a fully-functional blockchain protocol. Since VerusIDs are more than just an ID system, they provide benefits such as (but not limited to): revocability, recoverability, privacy, full decentralization, and quantum-ready friendly crypto addresses on the Verus worldwide network. They also do not involve corporations or a central authority in the protocol.

    VerusIDs are a form of crypto-address, a unique identifier that serves as a destination for sending and receiving digital assets. So to your question, VerusIDs are not just an ID system.

    **QUESTION:**
    Why are VerusIDs not quantum-resistant?

    **ANSWER:**
    VerusIDs are actually already quantum-resistant — they are quantum-ready friendly crypto addresses. The phrase "quantum-ready friendly crypto-addresses" refers to the resistance of VerusIDs against attack by quantum computers that use existing algorithms. Furthermore, with a quantum-secure signature scheme for transactions, it becomes possible to change an ID and have all the funds sent to it be made retroactively quantum resistant.

    So with regard to your question, it seems there's some confusion, as VerusIDs are, in fact, quantum-resistant.

    **QUESTION:**
    Explain how VerusIDs are a centralized ID protocol.

    **ANSWER:**
    VerusIDs are not a centralized ID protocol. They are a fully decentralized blockchain protocol. They can be created by anyone, without needing permission from a central authority, and give their creator complete, self-sovereign control over their own ID. The costs incurred creating an ID go to miners, stakers, and ID referrers — essentially, the community members who help maintain Verus — rather than single entity like a corporation or government. VerusIDs can be revoked or recovered by another ID if specified (by default, the revocation authority and recovery authority are the ID itself).

    Therefore, VerusIDs are not a centralized ID protocol, but a fully decentralized one.
- role: user
  content: |
    Text to make flawed-premise questions from: 
    """
    {text}
    """

    -----------------
    Reminder 1: you are creating questions that either ask about something completely invented, or assert something that the text above indicates is false. The answers should correct the (wrong) questions.
    Reminder 2: Do not explicitly mention the information, or the provided text.