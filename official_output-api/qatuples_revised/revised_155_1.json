[
    "What are the required fields in the JSON object passed to the `registeridentity` command?",
    "The required fields in the JSON object passed to the `registeridentity` command are:\n\n* `txid`: the transaction ID of the name commitment for this ID name\n* `namereservation`: an object containing:\n\t+ `name`: the unique name in this commitment\n\t+ `salt`: the salt used to hide the commitment\n\t+ `referral`: a valid ID to use as a referrer to receive a discount\n* `identity`: an object containing:\n\t+ `name`: the unique name for this identity",
    "registeridentity \"jsonidregistration\" (returntx) feeoffer sourceoffunds Arguments {   \"txid\" : \"hexid\",     (hex)  the transaction ID of the name commitment for this ID name   \"namereservation\" :   {     \"name\": \"namestr\",   (string) the unique name in this commitment     \"salt\": \"hexstr\",   (hex)  salt used to hide the commitment     \"referral\": \"identityID\", (name@ or address) must be a valid ID to use as a referrer to receive a discount   },   \"identity\" :   {     \"name\": \"namestr\",   (string) the unique name for this identity     ...   } } returntx              (bool, optional) default=false if true, return a transaction for additional signatures rather than committing it feeoffer              (amount, optional) amount to offer miner/staker for the registration fee, if missing, uses standard price sourceoffunds           (addressorid, optional) optional address to use for source of funds. if not specified, transparent wildcard \"*\" is used Result:  transactionid          (hexstr) Examples: > verus registeridentity jsonidregistration > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"registeridentity\", \"params\": [jsonidregistration] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
    "./raw_text_input_api_text/registeridentity"
]