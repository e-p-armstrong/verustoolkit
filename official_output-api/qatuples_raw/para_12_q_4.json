[
    "How can I use the `verifyfile` command in JSON RPC format?",
    "You can use the `verifyfile` command in JSON RPC format by sending a JSON payload with the required arguments to the Verus daemon. Here's an example:\n\n```json\n{\n  \"jsonrpc\": \"1.0\",\n  \"id\": \"curltest\",\n  \"method\": \"verifyfile\",\n  \"params\": [\n    \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\",\n    \"signature\",\n    \"filepath/filename\"\n  ]\n}\n```\n\nYou can send this payload using a tool like `curl` to the Verus daemon at `http://127.0.0.1:27486/`.",
    "verifyfile \"address or identity\" \"signature\" \"filepath/filename\" \"checklatest\" Verify a signed file Arguments: 1. \"t-addr or identity\" (string, required) The transparent address or identity that signed the file. 2. \"signature\"    (string, required) The signature provided by the signer in base 64 encoding (see signfile). 3. \"filename\"    (string, required) The file, which must be available locally to the daemon and that was signed. 3. \"checklatest\"   (bool, optional)  If true, checks signature validity based on latest identity. defaults to false,                      which determines validity of signing height stored in signature. Result: true|false  (boolean) If the signature is verified or not. Examples: Create the signature > verus signfile \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"filepath/filename\" Verify the signature > verus verifyfile \"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\" \"signature\" \"filepath/filename\" As json rpc > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"verifyfile\", \"params\": [\"RNKiEBduBru6Siv1cZRVhp4fkZNyPska6z\", \"signature\", \"filepath/filename\"] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
    "./raw_text_input_api_text/verifyfile"
]