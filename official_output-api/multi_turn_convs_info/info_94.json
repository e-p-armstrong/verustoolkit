[
    [
        [
            "What is the purpose of the `getnotarizationproofs` command in Verus?",
            "The `getnotarizationproofs` command is used to retrieve proofs for requested challenges related to unconfirmed notarizations on a bridged system. These proofs can be used to invalidate or force a competing chain to provide more proofs in order to confirm any pending cross-chain notarization of an alternate chain that may not agree with the current chain.",
            "getnotarizationproofs '[{\"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\",            \"evidence\":{CNotaryEvidence},            \"entropyhash\":\"hex\",            \"proveheight\":n,            \"atheight\":n}           {\"type\":\"vrsc::evidence.primaryproof\" || \"iKDesmiEkEjDG61nQSZJSGhWvC8x8xA578\",            \"priornotarizationref\":{CUTXORef} || \"priorroot\":{CProofRoot} ,            \"challengeroots\":[{\"indexkey\":{object}, \"proofroot\":{CProofRoot}}, ...],            \"evidence\":{CNotaryEvidence},            \"entropyhash\":\"hex\",            \"confirmnotarization\":{newnotarization}, |            \"confirmroot\":{CPRoofRoot}},            \"fromheight\":n,            \"toheight\":n},            ...]' Returns proofs to a caller for requested challenges. Some proofs can either independently or in combination with other proofs over time invalidate or force a competing chain to provide more proofs in order to confirm any pending cross-chain notarization of an alternate chain that may not agree with us. * It is not valid to have a challenge request with both confirmnotarization and confirmroot. Arguments \"challengerequests\"       (array, required) one or more challenge requests for unconfirmed notarizations on a bridged system Result: {\"evidence\":[{CNotaryEvidence}, ...]  (array) notary evidence challenges, including proofs for challenges requested Examples: > verus getnotarizationproofs '[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationproofs\", \"params\": [[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/getnotarizationproofs"
        ],
        [
            "What are the required arguments for the `getnotarizationproofs` command?",
            "The `getnotarizationproofs` command requires a single argument, `challengerequests`, which is an array of one or more challenge requests for unconfirmed notarizations on a bridged system.",
            "getnotarizationproofs '[{\"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\",            \"evidence\":{CNotaryEvidence},            \"entropyhash\":\"hex\",            \"proveheight\":n,            \"atheight\":n}           {\"type\":\"vrsc::evidence.primaryproof\" || \"iKDesmiEkEjDG61nQSZJSGhWvC8x8xA578\",            \"priornotarizationref\":{CUTXORef} || \"priorroot\":{CProofRoot} ,            \"challengeroots\":[{\"indexkey\":{object}, \"proofroot\":{CProofRoot}}, ...],            \"evidence\":{CNotaryEvidence},            \"entropyhash\":\"hex\",            \"confirmnotarization\":{newnotarization}, |            \"confirmroot\":{CPRoofRoot}},            \"fromheight\":n,            \"toheight\":n},            ...]' Returns proofs to a caller for requested challenges. Some proofs can either independently or in combination with other proofs over time invalidate or force a competing chain to provide more proofs in order to confirm any pending cross-chain notarization of an alternate chain that may not agree with us. * It is not valid to have a challenge request with both confirmnotarization and confirmroot. Arguments \"challengerequests\"       (array, required) one or more challenge requests for unconfirmed notarizations on a bridged system Result: {\"evidence\":[{CNotaryEvidence}, ...]  (array) notary evidence challenges, including proofs for challenges requested Examples: > verus getnotarizationproofs '[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationproofs\", \"params\": [[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/getnotarizationproofs"
        ],
        [
            "What is the result of the `getnotarizationproofs` command?",
            "The result of the `getnotarizationproofs` command is an array of notary evidence challenges, including proofs for the challenges requested.",
            "getnotarizationproofs '[{\"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\",            \"evidence\":{CNotaryEvidence},            \"entropyhash\":\"hex\",            \"proveheight\":n,            \"atheight\":n}           {\"type\":\"vrsc::evidence.primaryproof\" || \"iKDesmiEkEjDG61nQSZJSGhWvC8x8xA578\",            \"priornotarizationref\":{CUTXORef} || \"priorroot\":{CProofRoot} ,            \"challengeroots\":[{\"indexkey\":{object}, \"proofroot\":{CProofRoot}}, ...],            \"evidence\":{CNotaryEvidence},            \"entropyhash\":\"hex\",            \"confirmnotarization\":{newnotarization}, |            \"confirmroot\":{CPRoofRoot}},            \"fromheight\":n,            \"toheight\":n},            ...]' Returns proofs to a caller for requested challenges. Some proofs can either independently or in combination with other proofs over time invalidate or force a competing chain to provide more proofs in order to confirm any pending cross-chain notarization of an alternate chain that may not agree with us. * It is not valid to have a challenge request with both confirmnotarization and confirmroot. Arguments \"challengerequests\"       (array, required) one or more challenge requests for unconfirmed notarizations on a bridged system Result: {\"evidence\":[{CNotaryEvidence}, ...]  (array) notary evidence challenges, including proofs for challenges requested Examples: > verus getnotarizationproofs '[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationproofs\", \"params\": [[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/getnotarizationproofs"
        ],
        [
            "How can I use the `getnotarizationproofs` command to request proofs for multiple challenges?",
            "You can use the `getnotarizationproofs` command to request proofs for multiple challenges by including multiple challenge requests in the `challengerequests` array. For example:\n```\ngetnotarizationproofs '[{\"type\":\"vrsc::evidence.skipchallenge\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, {\"type\":\"vrsc::evidence.primaryproof\", \"priornotarizationref\":{CUTXORef}, \"challengeroots\":[{\"indexkey\":{object}, \"proofroot\":{CProofRoot}}], \"evidence\":{CNotaryEvidence}, \"entropyhash\":\"hex\", \"confirmnotarization\":{newnotarization}}]'\n```\nThis command would request proofs for two challenges: a skip challenge and a primary proof challenge.",
            "getnotarizationproofs '[{\"type\":\"vrsc::evidence.skipchallenge\" || \"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\",            \"evidence\":{CNotaryEvidence},            \"entropyhash\":\"hex\",            \"proveheight\":n,            \"atheight\":n}           {\"type\":\"vrsc::evidence.primaryproof\" || \"iKDesmiEkEjDG61nQSZJSGhWvC8x8xA578\",            \"priornotarizationref\":{CUTXORef} || \"priorroot\":{CProofRoot} ,            \"challengeroots\":[{\"indexkey\":{object}, \"proofroot\":{CProofRoot}}, ...],            \"evidence\":{CNotaryEvidence},            \"entropyhash\":\"hex\",            \"confirmnotarization\":{newnotarization}, |            \"confirmroot\":{CPRoofRoot}},            \"fromheight\":n,            \"toheight\":n},            ...]' Returns proofs to a caller for requested challenges. Some proofs can either independently or in combination with other proofs over time invalidate or force a competing chain to provide more proofs in order to confirm any pending cross-chain notarization of an alternate chain that may not agree with us. * It is not valid to have a challenge request with both confirmnotarization and confirmroot. Arguments \"challengerequests\"       (array, required) one or more challenge requests for unconfirmed notarizations on a bridged system Result: {\"evidence\":[{CNotaryEvidence}, ...]  (array) notary evidence challenges, including proofs for challenges requested Examples: > verus getnotarizationproofs '[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getnotarizationproofs\", \"params\": [[{\"type\":\"iCwxpRL6h3YeCRtGjgQSsqoKdZCuM4Dxaf\", \"evidence\":{CNotaryEvidence}, \"proveheight\":n, \"atheight\":n}, ...]] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/getnotarizationproofs"
        ]
    ],
    "will",
    "be",
    "replaced",
    "002379ea-2fd3-4d16-9cb9-0435218e7d30"
]