[
    [
        [
            "What is the purpose of the `z_getoperationstatus` command in Verus?",
            "The `z_getoperationstatus` command is used to retrieve the status of one or more operations, along with any associated result or error data. The operation remains in memory after the command is executed.",
            "z_getoperationstatus ([\"operationid\", ... ]) Get operation status and any associated result or error data. The operation will remain in memory. Arguments: 1. \"operationid\"     (array, optional) A list of operation ids we are interested in. If not provided, examine all operations known to the node. Result: \"  [object, ...]\"   (array) A list of JSON objects Examples: > verus z_getoperationstatus '[\"operationid\", ... ]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationstatus\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/z_getoperationstatus"
        ],
        [
            "What arguments does the `z_getoperationstatus` command take?",
            "The `z_getoperationstatus` command takes a single optional argument: an array of operation IDs. If this argument is not provided, the command will examine all operations known to the node.",
            "z_getoperationstatus ([\"operationid\", ... ]) Get operation status and any associated result or error data. The operation will remain in memory. Arguments: 1. \"operationid\"     (array, optional) A list of operation ids we are interested in. If not provided, examine all operations known to the node. Result: \"  [object, ...]\"   (array) A list of JSON objects Examples: > verus z_getoperationstatus '[\"operationid\", ... ]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationstatus\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/z_getoperationstatus"
        ],
        [
            "What is the format of the result returned by the `z_getoperationstatus` command?",
            "The result returned by the `z_getoperationstatus` command is an array of JSON objects, each containing information about an operation's status and any associated result or error data.",
            "z_getoperationstatus ([\"operationid\", ... ]) Get operation status and any associated result or error data. The operation will remain in memory. Arguments: 1. \"operationid\"     (array, optional) A list of operation ids we are interested in. If not provided, examine all operations known to the node. Result: \"  [object, ...]\"   (array) A list of JSON objects Examples: > verus z_getoperationstatus '[\"operationid\", ... ]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationstatus\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/z_getoperationstatus"
        ],
        [
            "How can I use the `z_getoperationstatus` command using the Verus command-line interface?",
            "You can use the `z_getoperationstatus` command using the Verus command-line interface by running the following command:\n\n```\nverus z_getoperationstatus '[\"operationid\",... ]'\n```\n\nReplace `\"operationid\",...` with the actual operation IDs you want to query.",
            "z_getoperationstatus ([\"operationid\", ... ]) Get operation status and any associated result or error data. The operation will remain in memory. Arguments: 1. \"operationid\"     (array, optional) A list of operation ids we are interested in. If not provided, examine all operations known to the node. Result: \"  [object, ...]\"   (array) A list of JSON objects Examples: > verus z_getoperationstatus '[\"operationid\", ... ]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationstatus\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/z_getoperationstatus"
        ],
        [
            "How can I use the `z_getoperationstatus` command using the Verus JSON-RPC interface?",
            "You can use the `z_getoperationstatus` command using the Verus JSON-RPC interface by sending a JSON-RPC request to the Verus node. The request should have the following format:\n\n```\ncurl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationstatus\", \"params\": ['[\"operationid\",... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/\n```\n\nReplace `\"operationid\",...` with the actual operation IDs you want to query, and `myusername` with your actual username.",
            "z_getoperationstatus ([\"operationid\", ... ]) Get operation status and any associated result or error data. The operation will remain in memory. Arguments: 1. \"operationid\"     (array, optional) A list of operation ids we are interested in. If not provided, examine all operations known to the node. Result: \"  [object, ...]\"   (array) A list of JSON objects Examples: > verus z_getoperationstatus '[\"operationid\", ... ]' > curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"z_getoperationstatus\", \"params\": ['[\"operationid\", ... ]'] }' -H 'content-type: text/plain;' http://127.0.0.1:27486/",
            "./raw_text_input_api_text/z_getoperationstatus"
        ]
    ],
    "will",
    "be",
    "replaced",
    "aa5b4bb8-47dc-4889-989a-309ab4e85b8c"
]